void sub_1D3DD6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D8BAAC(&a9);
  _Unwind_Resume(a1);
}

void sub_1D3DD6ABC(_QWORD *a1)
{
  sub_1D3DD6AE0(a1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DD6AE0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  unint64_t v5;

  *a1 = &off_1E95AF1F0;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    v4 = *(_BYTE **)(v2 + 16);
    if (v4 == (_BYTE *)v3)
    {
      v3 = *(_QWORD **)(v2 + 16);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      v5 = 0;
      do
      {
        if (v3[v5])
        {
          MEMORY[0x1D8254C54](v3[v5], 0x1000C4000313F17);
          v3 = *(_QWORD **)(v2 + 8);
          v4 = *(_BYTE **)(v2 + 16);
        }
        ++v5;
      }
      while (v5 < (v4 - (_BYTE *)v3) >> 3);
      if (!v3)
        goto LABEL_9;
    }
    *(_QWORD *)(v2 + 16) = v3;
    operator delete(v3);
LABEL_9:
    MEMORY[0x1D8254C54](v2, 0x1080C406BDE4C18);
  }
  return a1;
}

_QWORD *sub_1D3DD6B90(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = operator new(8uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 1;
  *v4 = *a2;
  a1[1] = v4 + 1;
  return a1;
}

uint64_t sub_1D3DD6BDC(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  *(_QWORD *)result = &off_1E95AF1F0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = a6;
  *(_QWORD *)(result + 32) = a7;
  v8 = *(_QWORD *)(a7 + 8);
  v7 = *(_QWORD *)(a7 + 16);
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = v9 >> 3;
    do
    {
      v11 += (*(_DWORD *)(*(_QWORD *)(v8 + 8 * v10) + 4) + *(_DWORD *)a7) * **(_DWORD **)(v8 + 8 * v10);
      ++v10;
    }
    while (v12 > v10);
  }
  *(_DWORD *)(result + 40) = v11;
  return result;
}

uint64_t sub_1D3DD6C40()
{
  uint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int **v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int **v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int **v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int **v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int **v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int **v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int *v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int **v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int **v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int **v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned int *v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int **v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned int *v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int **v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned int *v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int **v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int *v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int **v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned int *v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int **v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  _QWORD *v131;
  unsigned int *v132;
  unsigned int v133;
  unint64_t v134;
  unsigned int **v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  _QWORD *v139;
  unsigned int *v140;
  unsigned int v141;
  unint64_t v142;
  unsigned int **v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  _QWORD *v147;
  unsigned int *v148;
  unsigned int v149;
  unint64_t v150;
  unsigned int **v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  _QWORD *v155;
  unsigned int *v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int **v159;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int *v164;
  unsigned int v165;
  unint64_t v166;
  unsigned int **v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  _QWORD *v171;
  unsigned int *v172;
  unsigned int v173;
  unint64_t v174;
  unsigned int **v175;
  uint64_t v176;
  unsigned int *v177;
  uint64_t v178;
  _QWORD *v179;
  unsigned int *v180;
  unsigned int v181;
  unint64_t v182;
  unsigned int **v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  char **v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unint64_t v205;
  unsigned int **v206;
  uint64_t v207;
  unsigned int *v208;
  uint64_t v209;
  _QWORD *v210;
  unsigned int *v211;
  unsigned int v212;
  unint64_t v213;
  unsigned int **v214;
  uint64_t v215;
  unsigned int *v216;
  uint64_t v217;
  _QWORD *v218;
  unsigned int *v219;
  unsigned int v220;
  unint64_t v221;
  unsigned int **v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  _QWORD *v226;
  unsigned int *v227;
  unsigned int v228;
  unint64_t v229;
  unsigned int **v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  _QWORD *v234;
  unsigned int *v235;
  unsigned int v236;
  unint64_t v237;
  unsigned int **v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int *v243;
  unsigned int v244;
  unint64_t v245;
  unsigned int **v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  _QWORD *v250;
  unsigned int *v251;
  unsigned int v252;
  unint64_t v253;
  unsigned int **v254;
  unsigned int *v256;
  _QWORD *v257;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = 0;
  qword_1EFE317D8 = v0;
  v1 = (unsigned int *)operator new();
  v2 = operator new();
  v3 = (_QWORD *)operator new();
  *v3 = 0x300000001;
  v257 = v3;
  *(_DWORD *)v2 = 5;
  sub_1D3DD6B90((_QWORD *)(v2 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v1, 1, 10, 10, 8, 8, v2);
  v4 = v1 + 2;
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  v256 = v1;
  v6 = *(_QWORD *)(v0 + 8);
  if (v6 >= *(_QWORD *)(v0 + 16))
  {
    v7 = sub_1D3DD8AE8((unsigned int ***)v0, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v0, &v256);
    v7 = (unsigned int **)(v6 + 8);
  }
  *(_QWORD *)(v0 + 8) = v7;
  sub_1D3DC778C(&v256);
  v8 = qword_1EFE317D8;
  v9 = (unsigned int *)operator new();
  v10 = operator new();
  v11 = (_QWORD *)operator new();
  *v11 = 0x500000001;
  v257 = v11;
  *(_DWORD *)v10 = 7;
  sub_1D3DD6B90((_QWORD *)(v10 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v9, 2, 12, 12, 10, 10, v10);
  v12 = v9 + 2;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  v256 = v9;
  v14 = *(_QWORD *)(v8 + 8);
  if (v14 >= *(_QWORD *)(v8 + 16))
  {
    v15 = sub_1D3DD8AE8((unsigned int ***)v8, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v8, &v256);
    v15 = (unsigned int **)(v14 + 8);
  }
  *(_QWORD *)(v8 + 8) = v15;
  sub_1D3DC778C(&v256);
  v16 = qword_1EFE317D8;
  v17 = (unsigned int *)operator new();
  v18 = operator new();
  v19 = (_QWORD *)operator new();
  *v19 = 0x800000001;
  v257 = v19;
  *(_DWORD *)v18 = 10;
  sub_1D3DD6B90((_QWORD *)(v18 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v17, 3, 14, 14, 12, 12, v18);
  v20 = v17 + 2;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v256 = v17;
  v22 = *(_QWORD *)(v16 + 8);
  if (v22 >= *(_QWORD *)(v16 + 16))
  {
    v23 = sub_1D3DD8AE8((unsigned int ***)v16, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v16, &v256);
    v23 = (unsigned int **)(v22 + 8);
  }
  *(_QWORD *)(v16 + 8) = v23;
  sub_1D3DC778C(&v256);
  v24 = qword_1EFE317D8;
  v25 = (unsigned int *)operator new();
  v26 = operator new();
  v27 = (_QWORD *)operator new();
  *v27 = 0xC00000001;
  v257 = v27;
  *(_DWORD *)v26 = 12;
  sub_1D3DD6B90((_QWORD *)(v26 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v25, 4, 16, 16, 14, 14, v26);
  v28 = v25 + 2;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  v256 = v25;
  v30 = *(_QWORD *)(v24 + 8);
  if (v30 >= *(_QWORD *)(v24 + 16))
  {
    v31 = sub_1D3DD8AE8((unsigned int ***)v24, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v24, &v256);
    v31 = (unsigned int **)(v30 + 8);
  }
  *(_QWORD *)(v24 + 8) = v31;
  sub_1D3DC778C(&v256);
  v32 = qword_1EFE317D8;
  v33 = (unsigned int *)operator new();
  v34 = operator new();
  v35 = (_QWORD *)operator new();
  *v35 = 0x1200000001;
  v257 = v35;
  *(_DWORD *)v34 = 14;
  sub_1D3DD6B90((_QWORD *)(v34 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v33, 5, 18, 18, 16, 16, v34);
  v36 = v33 + 2;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v256 = v33;
  v38 = *(_QWORD *)(v32 + 8);
  if (v38 >= *(_QWORD *)(v32 + 16))
  {
    v39 = sub_1D3DD8AE8((unsigned int ***)v32, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v32, &v256);
    v39 = (unsigned int **)(v38 + 8);
  }
  *(_QWORD *)(v32 + 8) = v39;
  sub_1D3DC778C(&v256);
  v40 = qword_1EFE317D8;
  v41 = (unsigned int *)operator new();
  v42 = operator new();
  v43 = (_QWORD *)operator new();
  *v43 = 0x1600000001;
  v257 = v43;
  *(_DWORD *)v42 = 18;
  sub_1D3DD6B90((_QWORD *)(v42 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v41, 6, 20, 20, 18, 18, v42);
  v44 = v41 + 2;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v256 = v41;
  v46 = *(_QWORD *)(v40 + 8);
  if (v46 >= *(_QWORD *)(v40 + 16))
  {
    v47 = sub_1D3DD8AE8((unsigned int ***)v40, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v40, &v256);
    v47 = (unsigned int **)(v46 + 8);
  }
  *(_QWORD *)(v40 + 8) = v47;
  sub_1D3DC778C(&v256);
  v48 = qword_1EFE317D8;
  v49 = (unsigned int *)operator new();
  v50 = operator new();
  v51 = (_QWORD *)operator new();
  *v51 = 0x1E00000001;
  v257 = v51;
  *(_DWORD *)v50 = 20;
  sub_1D3DD6B90((_QWORD *)(v50 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v49, 7, 22, 22, 20, 20, v50);
  v52 = v49 + 2;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  v256 = v49;
  v54 = *(_QWORD *)(v48 + 8);
  if (v54 >= *(_QWORD *)(v48 + 16))
  {
    v55 = sub_1D3DD8AE8((unsigned int ***)v48, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v48, &v256);
    v55 = (unsigned int **)(v54 + 8);
  }
  *(_QWORD *)(v48 + 8) = v55;
  sub_1D3DC778C(&v256);
  v56 = qword_1EFE317D8;
  v57 = (unsigned int *)operator new();
  v58 = operator new();
  v59 = (_QWORD *)operator new();
  *v59 = 0x2400000001;
  v257 = v59;
  *(_DWORD *)v58 = 24;
  sub_1D3DD6B90((_QWORD *)(v58 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v57, 8, 24, 24, 22, 22, v58);
  v60 = v57 + 2;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v256 = v57;
  v62 = *(_QWORD *)(v56 + 8);
  if (v62 >= *(_QWORD *)(v56 + 16))
  {
    v63 = sub_1D3DD8AE8((unsigned int ***)v56, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v56, &v256);
    v63 = (unsigned int **)(v62 + 8);
  }
  *(_QWORD *)(v56 + 8) = v63;
  sub_1D3DC778C(&v256);
  v64 = qword_1EFE317D8;
  v65 = (unsigned int *)operator new();
  v66 = operator new();
  v67 = (_QWORD *)operator new();
  *v67 = 0x2C00000001;
  v257 = v67;
  *(_DWORD *)v66 = 28;
  sub_1D3DD6B90((_QWORD *)(v66 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v65, 9, 26, 26, 24, 24, v66);
  v68 = v65 + 2;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
  v256 = v65;
  v70 = *(_QWORD *)(v64 + 8);
  if (v70 >= *(_QWORD *)(v64 + 16))
  {
    v71 = sub_1D3DD8AE8((unsigned int ***)v64, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v64, &v256);
    v71 = (unsigned int **)(v70 + 8);
  }
  *(_QWORD *)(v64 + 8) = v71;
  sub_1D3DC778C(&v256);
  v72 = qword_1EFE317D8;
  v73 = (unsigned int *)operator new();
  v74 = operator new();
  v75 = (_QWORD *)operator new();
  *v75 = 0x3E00000001;
  v257 = v75;
  *(_DWORD *)v74 = 36;
  sub_1D3DD6B90((_QWORD *)(v74 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v73, 10, 32, 32, 14, 14, v74);
  v76 = v73 + 2;
  do
    v77 = __ldxr(v76);
  while (__stxr(v77 + 1, v76));
  v256 = v73;
  v78 = *(_QWORD *)(v72 + 8);
  if (v78 >= *(_QWORD *)(v72 + 16))
  {
    v79 = sub_1D3DD8AE8((unsigned int ***)v72, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v72, &v256);
    v79 = (unsigned int **)(v78 + 8);
  }
  *(_QWORD *)(v72 + 8) = v79;
  sub_1D3DC778C(&v256);
  v80 = qword_1EFE317D8;
  v81 = (unsigned int *)operator new();
  v82 = operator new();
  v83 = (_QWORD *)operator new();
  *v83 = 0x5600000001;
  v257 = v83;
  *(_DWORD *)v82 = 42;
  sub_1D3DD6B90((_QWORD *)(v82 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v81, 11, 36, 36, 16, 16, v82);
  v84 = v81 + 2;
  do
    v85 = __ldxr(v84);
  while (__stxr(v85 + 1, v84));
  v256 = v81;
  v86 = *(_QWORD *)(v80 + 8);
  if (v86 >= *(_QWORD *)(v80 + 16))
  {
    v87 = sub_1D3DD8AE8((unsigned int ***)v80, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v80, &v256);
    v87 = (unsigned int **)(v86 + 8);
  }
  *(_QWORD *)(v80 + 8) = v87;
  sub_1D3DC778C(&v256);
  v88 = qword_1EFE317D8;
  v89 = (unsigned int *)operator new();
  v90 = operator new();
  v91 = (_QWORD *)operator new();
  *v91 = 0x7200000001;
  v257 = v91;
  *(_DWORD *)v90 = 48;
  sub_1D3DD6B90((_QWORD *)(v90 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v89, 12, 40, 40, 18, 18, v90);
  v92 = v89 + 2;
  do
    v93 = __ldxr(v92);
  while (__stxr(v93 + 1, v92));
  v256 = v89;
  v94 = *(_QWORD *)(v88 + 8);
  if (v94 >= *(_QWORD *)(v88 + 16))
  {
    v95 = sub_1D3DD8AE8((unsigned int ***)v88, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v88, &v256);
    v95 = (unsigned int **)(v94 + 8);
  }
  *(_QWORD *)(v88 + 8) = v95;
  sub_1D3DC778C(&v256);
  v96 = qword_1EFE317D8;
  v97 = (unsigned int *)operator new();
  v98 = operator new();
  v99 = (_QWORD *)operator new();
  *v99 = 0x9000000001;
  v257 = v99;
  *(_DWORD *)v98 = 56;
  sub_1D3DD6B90((_QWORD *)(v98 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v97, 13, 44, 44, 20, 20, v98);
  v100 = v97 + 2;
  do
    v101 = __ldxr(v100);
  while (__stxr(v101 + 1, v100));
  v256 = v97;
  v102 = *(_QWORD *)(v96 + 8);
  if (v102 >= *(_QWORD *)(v96 + 16))
  {
    v103 = sub_1D3DD8AE8((unsigned int ***)v96, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v96, &v256);
    v103 = (unsigned int **)(v102 + 8);
  }
  *(_QWORD *)(v96 + 8) = v103;
  sub_1D3DC778C(&v256);
  v104 = qword_1EFE317D8;
  v105 = (unsigned int *)operator new();
  v106 = operator new();
  v107 = (_QWORD *)operator new();
  *v107 = 0xAE00000001;
  v257 = v107;
  *(_DWORD *)v106 = 68;
  sub_1D3DD6B90((_QWORD *)(v106 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v105, 14, 48, 48, 22, 22, v106);
  v108 = v105 + 2;
  do
    v109 = __ldxr(v108);
  while (__stxr(v109 + 1, v108));
  v256 = v105;
  v110 = *(_QWORD *)(v104 + 8);
  if (v110 >= *(_QWORD *)(v104 + 16))
  {
    v111 = sub_1D3DD8AE8((unsigned int ***)v104, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v104, &v256);
    v111 = (unsigned int **)(v110 + 8);
  }
  *(_QWORD *)(v104 + 8) = v111;
  sub_1D3DC778C(&v256);
  v112 = qword_1EFE317D8;
  v113 = (unsigned int *)operator new();
  v114 = operator new();
  v115 = (_QWORD *)operator new();
  *v115 = 0x6600000002;
  v257 = v115;
  *(_DWORD *)v114 = 42;
  sub_1D3DD6B90((_QWORD *)(v114 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v113, 15, 52, 52, 24, 24, v114);
  v116 = v113 + 2;
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
  v256 = v113;
  v118 = *(_QWORD *)(v112 + 8);
  if (v118 >= *(_QWORD *)(v112 + 16))
  {
    v119 = sub_1D3DD8AE8((unsigned int ***)v112, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v112, &v256);
    v119 = (unsigned int **)(v118 + 8);
  }
  *(_QWORD *)(v112 + 8) = v119;
  sub_1D3DC778C(&v256);
  v120 = qword_1EFE317D8;
  v121 = (unsigned int *)operator new();
  v122 = operator new();
  v123 = (_QWORD *)operator new();
  *v123 = 0x8C00000002;
  v257 = v123;
  *(_DWORD *)v122 = 56;
  sub_1D3DD6B90((_QWORD *)(v122 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v121, 16, 64, 64, 14, 14, v122);
  v124 = v121 + 2;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  v256 = v121;
  v126 = *(_QWORD *)(v120 + 8);
  if (v126 >= *(_QWORD *)(v120 + 16))
  {
    v127 = sub_1D3DD8AE8((unsigned int ***)v120, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v120, &v256);
    v127 = (unsigned int **)(v126 + 8);
  }
  *(_QWORD *)(v120 + 8) = v127;
  sub_1D3DC778C(&v256);
  v128 = qword_1EFE317D8;
  v129 = (unsigned int *)operator new();
  v130 = operator new();
  v131 = (_QWORD *)operator new();
  *v131 = 0x5C00000004;
  v257 = v131;
  *(_DWORD *)v130 = 36;
  sub_1D3DD6B90((_QWORD *)(v130 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v129, 17, 72, 72, 16, 16, v130);
  v132 = v129 + 2;
  do
    v133 = __ldxr(v132);
  while (__stxr(v133 + 1, v132));
  v256 = v129;
  v134 = *(_QWORD *)(v128 + 8);
  if (v134 >= *(_QWORD *)(v128 + 16))
  {
    v135 = sub_1D3DD8AE8((unsigned int ***)v128, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v128, &v256);
    v135 = (unsigned int **)(v134 + 8);
  }
  *(_QWORD *)(v128 + 8) = v135;
  sub_1D3DC778C(&v256);
  v136 = qword_1EFE317D8;
  v137 = (unsigned int *)operator new();
  v138 = operator new();
  v139 = (_QWORD *)operator new();
  *v139 = 0x7200000004;
  v257 = v139;
  *(_DWORD *)v138 = 48;
  sub_1D3DD6B90((_QWORD *)(v138 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v137, 18, 80, 80, 18, 18, v138);
  v140 = v137 + 2;
  do
    v141 = __ldxr(v140);
  while (__stxr(v141 + 1, v140));
  v256 = v137;
  v142 = *(_QWORD *)(v136 + 8);
  if (v142 >= *(_QWORD *)(v136 + 16))
  {
    v143 = sub_1D3DD8AE8((unsigned int ***)v136, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v136, &v256);
    v143 = (unsigned int **)(v142 + 8);
  }
  *(_QWORD *)(v136 + 8) = v143;
  sub_1D3DC778C(&v256);
  v144 = qword_1EFE317D8;
  v145 = (unsigned int *)operator new();
  v146 = operator new();
  v147 = (_QWORD *)operator new();
  *v147 = 0x9000000004;
  v257 = v147;
  *(_DWORD *)v146 = 56;
  sub_1D3DD6B90((_QWORD *)(v146 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v145, 19, 88, 88, 20, 20, v146);
  v148 = v145 + 2;
  do
    v149 = __ldxr(v148);
  while (__stxr(v149 + 1, v148));
  v256 = v145;
  v150 = *(_QWORD *)(v144 + 8);
  if (v150 >= *(_QWORD *)(v144 + 16))
  {
    v151 = sub_1D3DD8AE8((unsigned int ***)v144, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v144, &v256);
    v151 = (unsigned int **)(v150 + 8);
  }
  *(_QWORD *)(v144 + 8) = v151;
  sub_1D3DC778C(&v256);
  v152 = qword_1EFE317D8;
  v153 = (unsigned int *)operator new();
  v154 = operator new();
  v155 = (_QWORD *)operator new();
  *v155 = 0xAE00000004;
  v257 = v155;
  *(_DWORD *)v154 = 68;
  sub_1D3DD6B90((_QWORD *)(v154 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v153, 20, 96, 96, 22, 22, v154);
  v156 = v153 + 2;
  do
    v157 = __ldxr(v156);
  while (__stxr(v157 + 1, v156));
  v256 = v153;
  v158 = *(_QWORD *)(v152 + 8);
  if (v158 >= *(_QWORD *)(v152 + 16))
  {
    v159 = sub_1D3DD8AE8((unsigned int ***)v152, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v152, &v256);
    v159 = (unsigned int **)(v158 + 8);
  }
  *(_QWORD *)(v152 + 8) = v159;
  sub_1D3DC778C(&v256);
  v160 = qword_1EFE317D8;
  v161 = (unsigned int *)operator new();
  v162 = operator new();
  v163 = (_QWORD *)operator new();
  *v163 = 0x8800000006;
  v257 = v163;
  *(_DWORD *)v162 = 56;
  sub_1D3DD6B90((_QWORD *)(v162 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v161, 21, 104, 104, 24, 24, v162);
  v164 = v161 + 2;
  do
    v165 = __ldxr(v164);
  while (__stxr(v165 + 1, v164));
  v256 = v161;
  v166 = *(_QWORD *)(v160 + 8);
  if (v166 >= *(_QWORD *)(v160 + 16))
  {
    v167 = sub_1D3DD8AE8((unsigned int ***)v160, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v160, &v256);
    v167 = (unsigned int **)(v166 + 8);
  }
  *(_QWORD *)(v160 + 8) = v167;
  sub_1D3DC778C(&v256);
  v168 = qword_1EFE317D8;
  v169 = (unsigned int *)operator new();
  v170 = operator new();
  v171 = (_QWORD *)operator new();
  *v171 = 0xAF00000006;
  v257 = v171;
  *(_DWORD *)v170 = 68;
  sub_1D3DD6B90((_QWORD *)(v170 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v169, 22, 120, 120, 18, 18, v170);
  v172 = v169 + 2;
  do
    v173 = __ldxr(v172);
  while (__stxr(v173 + 1, v172));
  v256 = v169;
  v174 = *(_QWORD *)(v168 + 8);
  if (v174 >= *(_QWORD *)(v168 + 16))
  {
    v175 = sub_1D3DD8AE8((unsigned int ***)v168, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v168, &v256);
    v175 = (unsigned int **)(v174 + 8);
  }
  *(_QWORD *)(v168 + 8) = v175;
  sub_1D3DC778C(&v256);
  v176 = qword_1EFE317D8;
  v177 = (unsigned int *)operator new();
  v178 = operator new();
  v179 = (_QWORD *)operator new();
  *v179 = 0xA300000008;
  v257 = v179;
  *(_DWORD *)v178 = 62;
  sub_1D3DD6B90((_QWORD *)(v178 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v177, 23, 132, 132, 20, 20, v178);
  v180 = v177 + 2;
  do
    v181 = __ldxr(v180);
  while (__stxr(v181 + 1, v180));
  v256 = v177;
  v182 = *(_QWORD *)(v176 + 8);
  if (v182 >= *(_QWORD *)(v176 + 16))
  {
    v183 = sub_1D3DD8AE8((unsigned int ***)v176, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v176, &v256);
    v183 = (unsigned int **)(v182 + 8);
  }
  *(_QWORD *)(v176 + 8) = v183;
  sub_1D3DC778C(&v256);
  v184 = qword_1EFE317D8;
  v185 = (unsigned int *)operator new();
  v186 = operator new();
  v187 = (_QWORD *)operator new();
  *v187 = 0x9C00000008;
  v188 = (_QWORD *)operator new();
  *v188 = 0x9B00000002;
  v257 = v187;
  *(_DWORD *)v186 = 62;
  v189 = (char **)(v186 + 8);
  sub_1D3DD6B90((_QWORD *)(v186 + 8), &v257);
  v191 = *(_QWORD **)(v186 + 16);
  v190 = *(_QWORD *)(v186 + 24);
  if ((unint64_t)v191 >= v190)
  {
    v193 = ((char *)v191 - *v189) >> 3;
    if ((unint64_t)(v193 + 1) >> 61)
      sub_1D3D6D4F8();
    v194 = v190 - (_QWORD)*v189;
    v195 = v194 >> 2;
    if (v194 >> 2 <= (unint64_t)(v193 + 1))
      v195 = v193 + 1;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
      v196 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v196 = v195;
    if (v196)
      v196 = (unint64_t)sub_1D3D6D8A0(v196);
    else
      v197 = 0;
    v198 = (_QWORD *)(v196 + 8 * v193);
    v199 = v196 + 8 * v197;
    *v198 = v188;
    v192 = v198 + 1;
    v201 = *(char **)(v186 + 8);
    v200 = *(char **)(v186 + 16);
    if (v200 != v201)
    {
      do
      {
        v202 = *((_QWORD *)v200 - 1);
        v200 -= 8;
        *--v198 = v202;
      }
      while (v200 != v201);
      v200 = *v189;
    }
    *(_QWORD *)(v186 + 8) = v198;
    *(_QWORD *)(v186 + 16) = v192;
    *(_QWORD *)(v186 + 24) = v199;
    if (v200)
      operator delete(v200);
  }
  else
  {
    *v191 = v188;
    v192 = v191 + 1;
  }
  *(_QWORD *)(v186 + 16) = v192;
  sub_1D3DD6BDC((uint64_t)v185, 24, 144, 144, 22, 22, v186);
  v203 = v185 + 2;
  do
    v204 = __ldxr(v203);
  while (__stxr(v204 + 1, v203));
  v256 = v185;
  v205 = *(_QWORD *)(v184 + 8);
  if (v205 >= *(_QWORD *)(v184 + 16))
  {
    v206 = sub_1D3DD8AE8((unsigned int ***)v184, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v184, &v256);
    v206 = (unsigned int **)(v205 + 8);
  }
  *(_QWORD *)(v184 + 8) = v206;
  sub_1D3DC778C(&v256);
  v207 = qword_1EFE317D8;
  v208 = (unsigned int *)operator new();
  v209 = operator new();
  v210 = (_QWORD *)operator new();
  *v210 = 0x500000001;
  v257 = v210;
  *(_DWORD *)v209 = 7;
  sub_1D3DD6B90((_QWORD *)(v209 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v208, 25, 8, 18, 6, 16, v209);
  v211 = v208 + 2;
  do
    v212 = __ldxr(v211);
  while (__stxr(v212 + 1, v211));
  v256 = v208;
  v213 = *(_QWORD *)(v207 + 8);
  if (v213 >= *(_QWORD *)(v207 + 16))
  {
    v214 = sub_1D3DD8AE8((unsigned int ***)v207, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v207, &v256);
    v214 = (unsigned int **)(v213 + 8);
  }
  *(_QWORD *)(v207 + 8) = v214;
  sub_1D3DC778C(&v256);
  v215 = qword_1EFE317D8;
  v216 = (unsigned int *)operator new();
  v217 = operator new();
  v218 = (_QWORD *)operator new();
  *v218 = 0xA00000001;
  v257 = v218;
  *(_DWORD *)v217 = 11;
  sub_1D3DD6B90((_QWORD *)(v217 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v216, 26, 8, 32, 6, 14, v217);
  v219 = v216 + 2;
  do
    v220 = __ldxr(v219);
  while (__stxr(v220 + 1, v219));
  v256 = v216;
  v221 = *(_QWORD *)(v215 + 8);
  if (v221 >= *(_QWORD *)(v215 + 16))
  {
    v222 = sub_1D3DD8AE8((unsigned int ***)v215, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v215, &v256);
    v222 = (unsigned int **)(v221 + 8);
  }
  *(_QWORD *)(v215 + 8) = v222;
  sub_1D3DC778C(&v256);
  v223 = qword_1EFE317D8;
  v224 = (unsigned int *)operator new();
  v225 = operator new();
  v226 = (_QWORD *)operator new();
  *v226 = 0x1000000001;
  v257 = v226;
  *(_DWORD *)v225 = 14;
  sub_1D3DD6B90((_QWORD *)(v225 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v224, 27, 12, 26, 10, 24, v225);
  v227 = v224 + 2;
  do
    v228 = __ldxr(v227);
  while (__stxr(v228 + 1, v227));
  v256 = v224;
  v229 = *(_QWORD *)(v223 + 8);
  if (v229 >= *(_QWORD *)(v223 + 16))
  {
    v230 = sub_1D3DD8AE8((unsigned int ***)v223, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v223, &v256);
    v230 = (unsigned int **)(v229 + 8);
  }
  *(_QWORD *)(v223 + 8) = v230;
  sub_1D3DC778C(&v256);
  v231 = qword_1EFE317D8;
  v232 = (unsigned int *)operator new();
  v233 = operator new();
  v234 = (_QWORD *)operator new();
  *v234 = 0x1600000001;
  v257 = v234;
  *(_DWORD *)v233 = 18;
  sub_1D3DD6B90((_QWORD *)(v233 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v232, 28, 12, 36, 10, 16, v233);
  v235 = v232 + 2;
  do
    v236 = __ldxr(v235);
  while (__stxr(v236 + 1, v235));
  v256 = v232;
  v237 = *(_QWORD *)(v231 + 8);
  if (v237 >= *(_QWORD *)(v231 + 16))
  {
    v238 = sub_1D3DD8AE8((unsigned int ***)v231, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v231, &v256);
    v238 = (unsigned int **)(v237 + 8);
  }
  *(_QWORD *)(v231 + 8) = v238;
  sub_1D3DC778C(&v256);
  v239 = qword_1EFE317D8;
  v240 = (unsigned int *)operator new();
  v241 = operator new();
  v242 = (_QWORD *)operator new();
  *v242 = 0x2000000001;
  v257 = v242;
  *(_DWORD *)v241 = 24;
  sub_1D3DD6B90((_QWORD *)(v241 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v240, 29, 16, 36, 14, 16, v241);
  v243 = v240 + 2;
  do
    v244 = __ldxr(v243);
  while (__stxr(v244 + 1, v243));
  v256 = v240;
  v245 = *(_QWORD *)(v239 + 8);
  if (v245 >= *(_QWORD *)(v239 + 16))
  {
    v246 = sub_1D3DD8AE8((unsigned int ***)v239, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v239, &v256);
    v246 = (unsigned int **)(v245 + 8);
  }
  *(_QWORD *)(v239 + 8) = v246;
  sub_1D3DC778C(&v256);
  v247 = qword_1EFE317D8;
  v248 = (unsigned int *)operator new();
  v249 = operator new();
  v250 = (_QWORD *)operator new();
  *v250 = 0x3100000001;
  v257 = v250;
  *(_DWORD *)v249 = 28;
  sub_1D3DD6B90((_QWORD *)(v249 + 8), &v257);
  sub_1D3DD6BDC((uint64_t)v248, 30, 16, 48, 14, 22, v249);
  v251 = v248 + 2;
  do
    v252 = __ldxr(v251);
  while (__stxr(v252 + 1, v251));
  v256 = v248;
  v253 = *(_QWORD *)(v247 + 8);
  if (v253 >= *(_QWORD *)(v247 + 16))
  {
    v254 = sub_1D3DD8AE8((unsigned int ***)v247, &v256);
  }
  else
  {
    sub_1D3DD8A84((unsigned int *)v247, &v256);
    v254 = (unsigned int **)(v253 + 8);
  }
  *(_QWORD *)(v247 + 8) = v254;
  sub_1D3DC778C(&v256);
  return (*(_QWORD *)(qword_1EFE317D8 + 8) - *(_QWORD *)qword_1EFE317D8) >> 3;
}

void sub_1D3DD88B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = v5;
    operator delete(v5);
  }
  MEMORY[0x1D8254C54](v2, 0x1080C406BDE4C18);
  MEMORY[0x1D8254C54](v1, 0x10A1C40F1DF6643);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DD8A78(uint64_t (***a1)(void))
{
  return (**a1)();
}

unsigned int *sub_1D3DD8A84(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3DD8AE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DD8AE8(unsigned int ***a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  unint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  int64x2_t v24;
  char *v25;
  char *v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_1D3D6D4F8();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v30 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61)
      sub_1D3D6D50C();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned int **)&v8[8 * v2];
  v27 = v8;
  v28.i64[0] = (uint64_t)v9;
  v28.i64[1] = (uint64_t)v9;
  v29 = &v8[8 * v7];
  *v9 = 0;
  v10 = *a2;
  v11 = v9;
  v12 = v9;
  if (v10)
  {
    v13 = v10 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = v9;
    v12 = v9;
    if (*v9)
    {
      sub_1D3D6D13C(*v9);
      v12 = (unsigned int **)v28.i64[1];
      v11 = (unsigned int **)v28.i64[0];
    }
  }
  *v9 = v10;
  v15 = v12 + 1;
  v28.i64[1] = (uint64_t)(v12 + 1);
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((unsigned int **)v16 == *a1)
  {
    v24 = vdupq_n_s64(v16);
  }
  else
  {
    v18 = 0;
    v19 = v11;
    do
    {
      *--v19 = 0;
      v21 = *(unsigned int **)(v16 - 8);
      v16 -= 8;
      v20 = v21;
      if (v21)
      {
        v22 = v20 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        if (*v19)
          sub_1D3D6D13C(*v19);
      }
      *v19 = v20;
      v18 -= 8;
    }
    while ((unsigned int **)v16 != v17);
    v24 = *(int64x2_t *)a1;
    v15 = (unsigned int **)v28.i64[1];
    v11 = v19;
  }
  *a1 = v11;
  a1[1] = v15;
  v28 = v24;
  v25 = (char *)a1[2];
  a1[2] = (unsigned int **)v29;
  v29 = v25;
  v27 = (char *)v24.i64[0];
  sub_1D3DD8CB0((uint64_t)&v27);
  return v15;
}

void sub_1D3DD8C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DD8CB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DD8CB0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3DC778C((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__int128 *sub_1D3DD8CFC(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  char *v9;
  uint64_t v10;
  __int128 *result;
  char v12;
  unint64_t v13;
  char *v14;

  v3 = 0;
  v4 = 0;
  v5 = 0x7FFFFFFF;
  do
  {
    v6 = *(_DWORD *)((char *)&unk_1D3E6B770 + v3);
    if (v6 == a2)
    {
      v13 = *(unsigned int *)((char *)&unk_1D3E6B770 + v3 + 4);
      v14 = (char *)&unk_1D3E6B870 + 12 * ((v13 >> 2) & 7);
      v10 = *(_QWORD *)(v14 + 4);
      result = sub_1D3E02918(*(_DWORD *)v14);
      v5 = 0;
      v12 = v13 & 3;
      goto LABEL_10;
    }
    v7 = v6 ^ a2;
    v8 = dword_1D3E6ECC0[(v6 ^ a2) >> 4]
       + dword_1D3E6ECC0[(v6 ^ a2) & 0xF]
       + dword_1D3E6ECC0[(v7 >> 8) & 0xF]
       + dword_1D3E6ECC0[(unsigned __int16)v7 >> 12]
       + dword_1D3E6ECC0[((v6 ^ a2) >> 16) & 0xF]
       + dword_1D3E6ECC0[((v6 ^ a2) >> 20) & 0xF]
       + dword_1D3E6ECC0[((v6 ^ a2) >> 24) & 0xF]
       + dword_1D3E6ECC0[v7 >> 28];
    if (v8 < v5)
    {
      v4 = *(_DWORD *)((char *)&unk_1D3E6B770 + v3 + 4);
      v5 = v8;
    }
    v3 += 8;
  }
  while (v3 != 256);
  if (v5 > 3)
  {
    result = 0;
    v12 = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 17) = 0;
    v10 = 3;
    v5 = 0x7FFFFFFF;
  }
  else
  {
    v9 = (char *)&unk_1D3E6B870 + 12 * ((v4 >> 2) & 7);
    v10 = *(_QWORD *)(v9 + 4);
    result = sub_1D3E02918(*(_DWORD *)v9);
    v12 = v4 & 3;
  }
LABEL_10:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t MRCDecoderGetTypeID()
{
  if (qword_1EDB89348[0] != -1)
    dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
  return qword_1EDB89330;
}

_QWORD *sub_1D3DD8EA4()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[3];
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB891C8)
    _os_assumes_log();
  if (qword_1EDB89330)
    _os_assumes_log();
  qword_1EDB891C8 = (uint64_t)"MRCDecoder";
  qword_1EDB89330 = _CFRuntimeRegisterClass();
  v3 = 0;
  sub_1D3DAFDB4(qword_1EDB89330, v2);
  result = v3;
  if (v3 == v2)
  {
    v1 = 4;
    result = v2;
  }
  else
  {
    if (!v3)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1D3DD8F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1D3DD8FB4(CFTypeRef cf)
{
  CFTypeID v2;
  CFTypeID v3;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v2 != qword_1EDB89330)
      _os_assumes_log();
    v3 = CFGetTypeID(cf);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v3 != qword_1EDB89330)
      _os_assumes_log();
  }
  sub_1D3DD9AF4((unint64_t **)cf + 3);
  return sub_1D3DBEEE4((unint64_t *)cf + 2);
}

uint64_t sub_1D3DD908C(CFTypeRef cf, CFTypeRef a2)
{
  CFTypeID v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  BOOL v10;
  uint64_t result;

  if (!cf)
    goto LABEL_5;
  v4 = CFGetTypeID(cf);
  if (qword_1EDB89348[0] != -1)
    dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
  if (v4 != qword_1EDB89330)
  {
    _os_assumes_log();
    if (!a2)
      goto LABEL_10;
  }
  else
  {
LABEL_5:
    if (!a2)
      goto LABEL_10;
  }
  v5 = CFGetTypeID(a2);
  if (qword_1EDB89348[0] != -1)
    dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
  if (v5 != qword_1EDB89330)
    _os_assumes_log();
LABEL_10:
  v6 = *((_QWORD *)cf + 3);
  v7 = *((_QWORD *)a2 + 3);
  v8 = (const void *)atomic_load((unint64_t *)v7);
  v9 = (const void *)atomic_load((unint64_t *)v6);
  if (v9 == v8)
  {
LABEL_16:
    if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v7 + 8)
      && *(_DWORD *)(v6 + 16) == *(_DWORD *)(v7 + 16)
      && *(_DWORD *)(v6 + 20) == *(_DWORD *)(v7 + 20)
      && *(_DWORD *)(v6 + 24) == *(_DWORD *)(v7 + 24)
      && *(double *)(v6 + 32) == *(double *)(v7 + 32)
      && *(_DWORD *)(v6 + 40) == *(_DWORD *)(v7 + 40)
      && *(_DWORD *)(v6 + 44) == *(_DWORD *)(v7 + 44)
      && *(unsigned __int8 *)(v6 + 48) == *(unsigned __int8 *)(v7 + 48)
      && *(unsigned __int8 *)(v6 + 49) == *(unsigned __int8 *)(v7 + 49)
      && *(unsigned __int8 *)(v6 + 50) == *(unsigned __int8 *)(v7 + 50)
      && *(unsigned __int8 *)(v6 + 51) == *(unsigned __int8 *)(v7 + 51)
      && *(unsigned __int8 *)(v6 + 52) == *(unsigned __int8 *)(v7 + 52)
      && *(unsigned __int8 *)(v6 + 53) == *(unsigned __int8 *)(v7 + 53)
      && *(_QWORD *)(v6 + 56) == *(_QWORD *)(v7 + 56)
      && *(unsigned __int8 *)(v6 + 64) == *(unsigned __int8 *)(v7 + 64)
      && *(unsigned __int8 *)(v6 + 65) == *(unsigned __int8 *)(v7 + 65)
      && *(unsigned __int8 *)(v6 + 66) == *(unsigned __int8 *)(v7 + 66)
      && *(unsigned __int8 *)(v6 + 67) == *(unsigned __int8 *)(v7 + 67))
    {
      return *(unsigned __int8 *)(v6 + 68) == *(unsigned __int8 *)(v7 + 68);
    }
    return 0;
  }
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    result = CFEqual(v9, v8);
    if (!(_DWORD)result)
      return result;
    goto LABEL_16;
  }
  return 0;
}

unint64_t sub_1D3DD92CC(CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t v3;
  const void *v4;
  CFHashCode v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v2 != qword_1EDB89330)
      _os_assumes_log();
  }
  v3 = *((_QWORD *)cf + 3);
  v4 = (const void *)atomic_load((unint64_t *)v3);
  if (v4)
    v5 = CFHash(v4) + 2654435769u;
  else
    v5 = 3317042773;
  v6 = (*(_QWORD *)(v3 + 8) + 2654435769 + (v5 << 6) + (v5 >> 2)) ^ v5;
  v7 = (*(unsigned int *)(v3 + 16) + 2654435769 + (v6 << 6) + (v6 >> 2)) ^ v6;
  v8 = (*(int *)(v3 + 20) + 2654435769 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v9 = (*(int *)(v3 + 24) + 2654435769 + (v8 << 6) + (v8 >> 2)) ^ v8;
  v10 = *(_QWORD *)(v3 + 32) + 2654435769;
  if (*(double *)(v3 + 32) == 0.0)
    v10 = 2654435769;
  v11 = (v10 + (v9 << 6) + (v9 >> 2)) ^ v9;
  v12 = (*(int *)(v3 + 40) + 2654435769 + (v11 << 6) + (v11 >> 2)) ^ v11;
  v13 = (*(int *)(v3 + 44) + 2654435769 + (v12 << 6) + (v12 >> 2)) ^ v12;
  v14 = (*(unsigned __int8 *)(v3 + 48) + 2654435769 + (v13 << 6) + (v13 >> 2)) ^ v13;
  v15 = (*(unsigned __int8 *)(v3 + 49) + 2654435769 + (v14 << 6) + (v14 >> 2)) ^ v14;
  v16 = (*(unsigned __int8 *)(v3 + 51) + 2654435769 + (v15 << 6) + (v15 >> 2)) ^ v15;
  v17 = (*(unsigned __int8 *)(v3 + 52) + 2654435769 + (v16 << 6) + (v16 >> 2)) ^ v16;
  v18 = (*(unsigned __int8 *)(v3 + 53) + 2654435769 + (v17 << 6) + (v17 >> 2)) ^ v17;
  v19 = (*(_QWORD *)(v3 + 56) + 2654435769 + (v18 << 6) + (v18 >> 2)) ^ v18;
  v20 = (*(unsigned __int8 *)(v3 + 64) + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
  v21 = (*(unsigned __int8 *)(v3 + 65) + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
  v22 = (*(unsigned __int8 *)(v3 + 66) + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21;
  v23 = (*(unsigned __int8 *)(v3 + 67) + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
  return (*(unsigned __int8 *)(v3 + 68) + 2654435769 + (v23 << 6) + (v23 >> 2)) ^ v23;
}

CFStringRef sub_1D3DD94D8(CFTypeRef cf)
{
  CFTypeID v2;
  const __CFAllocator *v3;
  __CFString *v5;
  const void *v7;
  const __CFString *v9;
  const __CFArray *v11;
  __CFString *v13;
  unint64_t v14;
  __CFString *v16;
  const __CFSet *v17;
  CFIndex Count;
  const void **v19;
  const __CFSet *v20;
  uint64_t i;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  const char *v33;
  __CFString *v34;
  const char *v35;
  __CFString *v36;
  const char *v37;
  __CFString *v38;
  const char *v39;
  __CFString *v40;
  const char *v41;
  __CFString *v42;
  const char *v43;
  __CFString *v44;
  __CFString *v45;
  const char *v46;
  __CFString *v47;
  const char *v48;
  __CFString *v49;
  const char *v50;
  __CFString *v51;
  const char *v52;
  __CFString *v53;
  const char *v54;
  __CFString *v55;
  const __CFString *v56;
  CFStringRef Copy;
  CFStringRef v59;
  CFArrayRef ArrayBySeparatingStrings;
  CFStringRef v61;
  CFMutableStringRef Mutable;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v2 != qword_1EDB89330)
      _os_assumes_log();
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (atomic_load((unint64_t *)&Mutable))
  {
    v5 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v5, 0, CFSTR("<%s %p> {\n"), "MRCDecoder", cf);
    if (atomic_load((unint64_t *)cf + 2))
    {
      v7 = (const void *)atomic_load((unint64_t *)cf + 2);
      v61 = CFCopyDescription(v7);
      if (atomic_load((unint64_t *)&v61))
      {
        v9 = (const __CFString *)atomic_load((unint64_t *)&v61);
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v3, v9, CFSTR("\n"));
        if (atomic_load((unint64_t *)&ArrayBySeparatingStrings))
        {
          v11 = (const __CFArray *)atomic_load((unint64_t *)&ArrayBySeparatingStrings);
          v59 = CFStringCreateByCombiningStrings(v3, v11, CFSTR("\n    "));
          if (atomic_load((unint64_t *)&v59))
          {
            v13 = (__CFString *)atomic_load((unint64_t *)&Mutable);
            v14 = atomic_load((unint64_t *)&v59);
            CFStringAppendFormat(v13, 0, CFSTR("    context %@\n"), v14);
          }
          sub_1D3D8C70C((unint64_t *)&v59);
        }
        sub_1D3D74138((unint64_t *)&ArrayBySeparatingStrings);
      }
      sub_1D3D8C70C((unint64_t *)&v61);
    }
    if (atomic_load(*((unint64_t **)cf + 3)))
    {
      v16 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v16, CFSTR("    symbologies {"));
      v17 = (const __CFSet *)atomic_load(*((unint64_t **)cf + 3));
      Count = CFSetGetCount(v17);
      v19 = (const void **)operator new[]();
      v20 = (const __CFSet *)atomic_load(*((unint64_t **)cf + 3));
      CFSetGetValues(v20, v19);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          if (i)
          {
            v22 = (__CFString *)atomic_load((unint64_t *)&Mutable);
            CFStringAppend(v22, CFSTR(", "));
          }
          v23 = (__CFString *)atomic_load((unint64_t *)&Mutable);
          CFStringAppendFormat(v23, 0, CFSTR("%@"), v19[i]);
        }
      }
      MEMORY[0x1D8254C3C](v19, 0xC0C80B8AA526DLL);
      v24 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v24, CFSTR("}\n"));
    }
    v25 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v25, 0, CFSTR("    locatingMode %ld\n"), *(_QWORD *)(*((_QWORD *)cf + 3) + 8));
    v26 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v26, 0, CFSTR("    accuracy 0x%x\n"), *(unsigned int *)(*((_QWORD *)cf + 3) + 16));
    v27 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v27, 0, CFSTR("    maximumQRModuleSamplingCount %d\n"), *(unsigned int *)(*((_QWORD *)cf + 3) + 20));
    v28 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v28, 0, CFSTR("    maximumQRFinderPatternTripletCount %d\n"), *(unsigned int *)(*((_QWORD *)cf + 3) + 24));
    v29 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v29, 0, CFSTR("    maximum1DSymbologyDecodingTime %g\n"), *(_QWORD *)(*((_QWORD *)cf + 3) + 32));
    v30 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v30, 0, CFSTR("    maximum1DSymbologyDecodingScanlineCount %d\n"), *(unsigned int *)(*((_QWORD *)cf + 3) + 40));
    v31 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v31, 0, CFSTR("    minimum1DSymbologyDecodingScanlineCount %d\n"), *(unsigned int *)(*((_QWORD *)cf + 3) + 44));
    v32 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 48))
      v33 = "true";
    else
      v33 = "false";
    CFStringAppendFormat(v32, 0, CFSTR("    shouldStopAtFirstPyramidWith2DSymbologies %s\n"), v33);
    v34 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 49))
      v35 = "true";
    else
      v35 = "false";
    CFStringAppendFormat(v34, 0, CFSTR("    needsDecoderResultAttributeUnmatchedFinderPatternPoints %s\n"), v35);
    v36 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 50))
      v37 = "true";
    else
      v37 = "false";
    CFStringAppendFormat(v36, 0, CFSTR("    needsDecoderResultAttributeFocusSharpness %s\n"), v37);
    v38 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 51))
      v39 = "true";
    else
      v39 = "false";
    CFStringAppendFormat(v38, 0, CFSTR("    needsDecoderResultAttributeUnrecognizedCornerPointQuadruplets %s\n"), v39);
    v40 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 52))
      v41 = "true";
    else
      v41 = "false";
    CFStringAppendFormat(v40, 0, CFSTR("    needsDecoderResultAttributeUnrecognizedRegions %s\n"), v41);
    v42 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 53))
      v43 = "true";
    else
      v43 = "false";
    CFStringAppendFormat(v42, 0, CFSTR("    needsDecoderResultAttributeDebugInfo %s\n"), v43);
    v44 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v44, 0, CFSTR("    algorithmVersion 0x%lx (major=%ld, minor=%ld)\n"), *(_QWORD *)(*((_QWORD *)cf + 3) + 56), *(uint64_t *)(*((_QWORD *)cf + 3) + 56) >> 16, (unsigned __int16)*(_QWORD *)(*((_QWORD *)cf + 3) + 56));
    v45 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 64))
      v46 = "true";
    else
      v46 = "false";
    CFStringAppendFormat(v45, 0, CFSTR("    allowsAlgorithmicVersioningFallback %s\n"), v46);
    v47 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 65))
      v48 = "true";
    else
      v48 = "false";
    CFStringAppendFormat(v47, 0, CFSTR("    allowsPyramidGenerationOnDemand %s\n"), v48);
    v49 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 66))
      v50 = "true";
    else
      v50 = "false";
    CFStringAppendFormat(v49, 0, CFSTR("    allowsConcurrentDecoding %s\n"), v50);
    v51 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 67))
      v52 = "true";
    else
      v52 = "false";
    CFStringAppendFormat(v51, 0, CFSTR("    shouldCoalesceCompositeSymbologies %s\n"), v52);
    v53 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    if (*(_BYTE *)(*((_QWORD *)cf + 3) + 68))
      v54 = "true";
    else
      v54 = "false";
    CFStringAppendFormat(v53, 0, CFSTR("    shouldCollectMetrics %s\n"), v54);
    v55 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v55, CFSTR("}"));
    v56 = (const __CFString *)atomic_load((unint64_t *)&Mutable);
    Copy = CFStringCreateCopy(v3, v56);
    sub_1D3D8FA0C((unint64_t *)&Mutable);
    if (Copy)
      return Copy;
  }
  else
  {
    sub_1D3D8FA0C((unint64_t *)&Mutable);
  }
  return CFStringCreateWithFormat(v3, 0, CFSTR("<%s %p>"), "MRCDecoder", cf);
}

void sub_1D3DD9AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unint64_t v6;
  va_list va;
  unint64_t v8;
  va_list va1;
  unint64_t v10;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  sub_1D3D8C70C((unint64_t *)va);
  sub_1D3D74138((unint64_t *)va1);
  sub_1D3D8C70C((unint64_t *)va2);
  sub_1D3D8FA0C((unint64_t *)va3);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DD9AF4(unint64_t **a1)
{
  unint64_t *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1D3DD9B30(result);
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

unint64_t *sub_1D3DD9B30(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

unint64_t MRCDecoderCreateWithOptions(CFTypeRef a1)
{
  const __CFAllocator *v1;
  unint64_t *Instance;
  unint64_t *v3;
  CFTypeID v4;
  unint64_t v5;
  const __CFDictionary *v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  CFTypeRef v10;
  unint64_t *v11;
  uint64_t v12;
  __CFDictionary *v14;
  const void *v15;
  unint64_t v16;
  const void *v17;
  CFTypeID v18;
  unint64_t v19;
  const void *v20;
  CFTypeRef v22;
  unint64_t *v23;
  CFMutableDictionaryRef Mutable;

  if (a1)
    a1 = CFRetain(a1);
  v22 = a1;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (qword_1EDB89348[0] != -1)
    dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
  Instance = (unint64_t *)_CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    v4 = CFGetTypeID(Instance);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v4 != qword_1EDB89330)
      _os_assumes_log();
    v5 = atomic_load((unint64_t *)&v22);
    if (v5
      && (v6 = (const __CFDictionary *)atomic_load((unint64_t *)&v22),
          Value = CFDictionaryGetValue(v6, CFSTR("MRCDecoderOptionContext")),
          (v8 = Value) != 0))
    {
      v9 = CFGetTypeID(Value);
      if (qword_1EDB893E0 != -1)
        dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
      if (v9 != qword_1EDB893D8)
        _os_assumes_log();
      v10 = CFRetain(v8);
    }
    else
    {
      v10 = 0;
    }
    v11 = v3 + 2;
    v3[2] = (unint64_t)v10;
    v12 = operator new();
    sub_1D3DD9E64(v12, (unint64_t *)&v22);
    v3[3] = v12;
    if (!atomic_load(v3 + 2))
    {
      Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
      CFDictionarySetValue(v14, CFSTR("_MRCContextOptionIsOneShot"), (const void *)*MEMORY[0x1E0C9AE50]);
      v15 = (const void *)atomic_load((unint64_t *)&Mutable);
      v16 = MRCContextCreateWithOptions(v15);
      do
        v17 = (const void *)__ldaxr(v11);
      while (__stlxr(v16, v11));
      if (v17)
        CFRelease(v17);
      sub_1D3D740C8((unint64_t *)&Mutable);
    }
    v18 = CFGetTypeID(v3);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if (v18 != qword_1EDB89330)
      _os_assumes_log();
  }
  v23 = v3;
  do
    v19 = __ldaxr((unint64_t *)&v23);
  while (__stlxr(0, (unint64_t *)&v23));
  do
    v20 = (const void *)__ldaxr((unint64_t *)&v23);
  while (__stlxr(0, (unint64_t *)&v23));
  if (v20)
    CFRelease(v20);
  sub_1D3D8BAAC((unint64_t *)&v22);
  return v19;
}

void sub_1D3DD9DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t *v2;
  unint64_t **v3;
  va_list va;

  va_start(va, a2);
  sub_1D3DD9AF4(v3);
  sub_1D3DBEEE4(v2);
  sub_1D3D8BAAC((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DD9E64(uint64_t a1, unint64_t *a2)
{
  const __CFDictionary *v4;
  const __CFString *v5;
  CFTypeRef v6;
  unint64_t v7;
  char v8;
  char v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  CFTypeRef v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  const __CFSet *v33;
  const __CFSet *v34;
  const __CFSet *v35;
  const __CFSet *v36;
  const __CFSet *v37;
  const __CFString *v38;
  CFTypeRef v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  int v49;
  uint64_t v50;
  unint64_t v51;
  _BOOL8 v52;
  unint64_t *v53;
  unint64_t v54;
  const void *v55;

  sub_1D3DDA38C((unint64_t *)a1, a2, CFSTR("MRCDecoderOptionSymbologies"));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 13;
  *(_QWORD *)(a1 + 16) = -2575995796;
  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 46) = 0;
  *(_QWORD *)(a1 + 56) = 0x40000;
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 65) = 0;
  v4 = (const __CFDictionary *)atomic_load(a2);
  sub_1D3DEA648((CFDictionaryRef *)&v55, v4);
  v5 = sub_1D3DEA428(CFSTR("MRCDecoderOptionLocatingMode"));
  if (v5 && (v6 = sub_1D3DEA6E0((CFDictionaryRef *)&v55, v5), CFRelease(v5), v6))
  {
    v7 = sub_1D3DEA15C(v6);
    v9 = v8;
    CFRelease(v6);
    v10 = v9 != 0;
    if (v9)
      v11 = v7;
    else
      v11 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFF00;
    v13 = v11;
  }
  else
  {
    v12 = 0;
    v10 = 0;
    v13 = 0;
  }
  v14 = sub_1D3DEA428(CFSTR("MRCDecoderOptionAccuracy"));
  v52 = v10;
  v53 = a2;
  v50 = v13;
  v51 = v12;
  if (v14 && (v15 = sub_1D3DEA6E0((CFDictionaryRef *)&v55, v14), CFRelease(v14), v15))
  {
    v16 = sub_1D3DEA098(v15);
    CFRelease(v15);
    v17 = v16 | 0x100000000;
    if (!HIDWORD(v16))
      v17 = 0;
    v18 = v17 & 0x100000000;
    v49 = v17 & 0xFFFFFF00;
    v19 = v17;
  }
  else
  {
    v49 = 0;
    v18 = 0;
    v19 = 0;
  }
  v20 = sub_1D3DDA4D0((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionMaximumQRModuleSamplingCount"));
  v21 = sub_1D3DDA4D0((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionMaximumQRFinderPatternTripletCount"));
  v22 = sub_1D3DDA5C0((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionMaximum1DSymbologyDecodingTime"));
  v24 = v23;
  v25 = sub_1D3DDA4D0((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionMaximum1DSymbologyDecodingScanlineCount"));
  v26 = sub_1D3DDA4D0((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionMinimum1DSymbologyDecodingScanlineCount"));
  v27 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionShouldStopAtFirstPyramidWith2DSymbologies"));
  if (v52)
    *(_QWORD *)(a1 + 8) = v50 | v51;
  if (v18)
    *(_DWORD *)(a1 + 16) = v49 | v19;
  v28 = HIDWORD(v20);
  if (HIDWORD(v20))
    *(_DWORD *)(a1 + 20) = v20;
  v29 = HIDWORD(v21);
  if (HIDWORD(v21))
    *(_DWORD *)(a1 + 24) = v21;
  if (v24)
    *(_QWORD *)(a1 + 32) = v22;
  if (HIDWORD(v25))
    *(_DWORD *)(a1 + 40) = v25;
  if (HIDWORD(v26))
    *(_DWORD *)(a1 + 44) = v26;
  if (v27 >= 0x100u)
    *(_BYTE *)(a1 + 48) = v27;
  v30 = *(_DWORD *)(a1 + 16);
  if (v30 == 1751738216)
  {
    if (!v28)
      *(_DWORD *)(a1 + 20) = 7000;
    if (!v29)
    {
      v31 = 30;
      goto LABEL_40;
    }
  }
  else if (v30 == 1819244288)
  {
    if (!v28)
      *(_DWORD *)(a1 + 20) = 3000;
    if (!v29)
    {
      v31 = 10;
LABEL_40:
      *(_DWORD *)(a1 + 24) = v31;
    }
  }
  sub_1D3DDA38C(&v54, v53, CFSTR("MRCDecoderOptionNeededResultAttributes"));
  if (atomic_load(&v54))
  {
    v33 = (const __CFSet *)atomic_load(&v54);
    *(_BYTE *)(a1 + 49) = CFSetContainsValue(v33, CFSTR("LocatorPoints")) != 0;
    v34 = (const __CFSet *)atomic_load(&v54);
    *(_BYTE *)(a1 + 50) = CFSetContainsValue(v34, CFSTR("FocusSharpness")) != 0;
    v35 = (const __CFSet *)atomic_load(&v54);
    *(_BYTE *)(a1 + 51) = CFSetContainsValue(v35, CFSTR("FrameFailedLocations")) != 0;
    v36 = (const __CFSet *)atomic_load(&v54);
    *(_BYTE *)(a1 + 52) = CFSetContainsValue(v36, CFSTR("MRCDecoderResultAttributeUnrecognizedRegions")) != 0;
    v37 = (const __CFSet *)atomic_load(&v54);
    *(_BYTE *)(a1 + 53) = CFSetContainsValue(v37, CFSTR("FrameDebugData")) != 0;
  }
  v38 = sub_1D3DEA428(CFSTR("MRCDecoderOptionAlgorithmVersion"));
  if (v38)
  {
    v39 = sub_1D3DEA6E0((CFDictionaryRef *)&v55, v38);
    CFRelease(v38);
    if (v39)
    {
      v40 = sub_1D3DEA15C(v39);
      v42 = v41;
      CFRelease(v39);
      if (v42)
        *(_QWORD *)(a1 + 56) = v40;
    }
  }
  v43 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionAllowsAlgorithmicVersioningFallback"));
  if (v43 >= 0x100u)
    *(_BYTE *)(a1 + 64) = v43;
  v44 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionAllowsPyramidGenerationOnDemand"));
  if (v44 >= 0x100u)
    goto LABEL_53;
  if (*(uint64_t *)(a1 + 56) >= 196608 && _os_feature_enabled_impl())
  {
    LOBYTE(v44) = 1;
LABEL_53:
    *(_BYTE *)(a1 + 65) = v44;
  }
  v45 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionAllowsConcurrentDecoding"));
  if (v45 >= 0x100u)
    *(_BYTE *)(a1 + 66) = v45;
  v46 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionShouldCoalesceCompositeSymbologies"));
  if (v46 < 0x100u)
  {
    if (*(uint64_t *)(a1 + 56) < 0x40000)
      goto LABEL_60;
    LOBYTE(v46) = 1;
  }
  *(_BYTE *)(a1 + 67) = v46;
LABEL_60:
  v47 = sub_1D3DDA65C((CFDictionaryRef *)&v55, CFSTR("MRCDecoderOptionShouldCollectMetrics"));
  if (v47 >= 0x100u)
    *(_BYTE *)(a1 + 68) = v47;
  sub_1D3DD9B30(&v54);
  sub_1D3DEA6B0(&v55);
  return a1;
}

void sub_1D3DDA320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unint64_t *v7;
  unint64_t v9;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  sub_1D3DD9B30((unint64_t *)va);
  sub_1D3DEA6B0((const void **)va1);
  sub_1D3DD9B30(v7);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DDA38C(unint64_t *result, unint64_t *a2, void *key)
{
  unint64_t *v3;
  unint64_t v4;
  const __CFDictionary *v5;
  const __CFArray *v6;
  CFTypeID v7;
  uint64_t Count;
  const __CFAllocator *v9;
  CFIndex i;
  __CFSet *v11;
  const void *ValueAtIndex;
  const __CFSet *v13;
  CFTypeID v14;
  CFMutableSetRef Mutable;

  v3 = result;
  v4 = atomic_load(a2);
  if (v4
    && (v5 = (const __CFDictionary *)atomic_load(a2), (result = (unint64_t *)CFDictionaryGetValue(v5, key)) != 0))
  {
    v6 = (const __CFArray *)result;
    v7 = CFGetTypeID(result);
    if (v7 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v6);
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B3B0]);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v11 = (__CFSet *)atomic_load((unint64_t *)&Mutable);
          ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
          CFSetSetValue(v11, ValueAtIndex);
        }
      }
      v13 = (const __CFSet *)atomic_load((unint64_t *)&Mutable);
      *v3 = (unint64_t)CFSetCreateCopy(v9, v13);
      return sub_1D3DDA6E0((unint64_t *)&Mutable);
    }
    else
    {
      v14 = CFGetTypeID(v6);
      if (v14 != CFSetGetTypeID())
        _os_assumes_log();
      result = (unint64_t *)CFRetain(v6);
      *v3 = (unint64_t)result;
    }
  }
  else
  {
    *v3 = 0;
  }
  return result;
}

void sub_1D3DDA4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DDA6E0((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1D3DDA4D0(CFDictionaryRef *a1, const __CFString *a2)
{
  const __CFString *v3;
  CFTypeRef v4;
  CFTypeID v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int Value;
  int v11;
  int valuePtr;

  v3 = sub_1D3DEA428(a2);
  if (!v3)
  {
    v8 = 0;
LABEL_8:
    v9 = 0;
    return v8 | (unint64_t)v3 | v9;
  }
  v4 = sub_1D3DEA6E0(a1, v3);
  CFRelease(v3);
  if (!v4)
  {
    v8 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  v5 = CFGetTypeID(v4);
  if (v5 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v4))
  {
    Value = CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
    v7 = valuePtr & 0xFFFFFF00;
    v6 = valuePtr;
    if (!Value)
    {
      v7 = 0;
      v6 = 0;
    }
    v3 = (const __CFString *)((unint64_t)(Value != 0) << 32);
  }
  else
  {
    v6 = 0;
    v3 = 0;
    v7 = 0;
  }
  v11 = v7 | v6;
  CFRelease(v4);
  v8 = v11 & 0xFFFFFF00;
  v9 = v11;
  return v8 | (unint64_t)v3 | v9;
}

unint64_t sub_1D3DDA5C0(CFDictionaryRef *a1, const __CFString *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  CFTypeRef v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;

  v3 = sub_1D3DEA428(a2);
  if (v3 && (v4 = v3, v5 = sub_1D3DEA6E0(a1, v3), CFRelease(v4), v5))
  {
    v6 = sub_1D3DEA29C(v5);
    v7 = v6;
    v8 = v6 & 0xFFFFFFFFFFFFFF00;
    CFRelease(v5);
    v9 = v7;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return v9 | v8;
}

uint64_t sub_1D3DDA65C(CFDictionaryRef *a1, const __CFString *a2)
{
  const __CFString *v3;
  CFTypeRef v4;
  __int16 v5;
  int v6;

  v3 = sub_1D3DEA428(a2);
  if (v3)
  {
    v4 = sub_1D3DEA6E0(a1, v3);
    CFRelease(v3);
    if (v4)
    {
      v5 = sub_1D3DEA530(v4);
      LOBYTE(v3) = v5;
      v6 = HIBYTE(v5);
      CFRelease(v4);
    }
    else
    {
      v6 = 0;
      LOBYTE(v3) = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  return v3 | (v6 << 8);
}

unint64_t *sub_1D3DDA6E0(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

const void *MRCDecoderDecodeSample(__n128 a1)
{
  return MRCDecoderDecodeSampleWithRegions(a1);
}

const void *MRCDecoderDecodeSampleWithRegions(__n128 a1)
{
  uint64_t v1;
  unint64_t **v2;
  NSObject *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  _QWORD *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **p_cache;
  __CFString *Mutable;
  CFTypeID v14;
  unint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  __CVBuffer *CVPixelBuffer;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v29;
  double RegionOfInterest;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  const __CFArray *Pyramid;
  CFIndex Count;
  __n128 *ValueAtIndex;
  __n128 *v40;
  CFTypeID v41;
  CFIndex i;
  __n128 *v43;
  unint64_t Symbology;
  __int128 v45;
  double v46;
  double v47;
  CFTypeID v48;
  CFIndex v49;
  __int128 v50;
  CFIndex v51;
  const void *v52;
  const void *v53;
  CFTypeID v54;
  CFTypeID v55;
  CFTypeRef *v56;
  _QWORD *v57;
  _QWORD *v58;
  void **v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  CFTypeRef v65;
  std::string::size_type v66;
  CFTypeID v67;
  CFTypeID v68;
  const void *v69;
  unint64_t v70;
  __CFString *v71;
  int64_t j;
  char *DescriptorAtIndex;
  const void *v74;
  const void *v75;
  CFTypeID v76;
  std::__fs::filesystem::path *v77;
  NSObject *v78;
  std::__fs::filesystem::path *v79;
  const char *v80;
  std::string *p_buf;
  const std::__fs::filesystem::path *v82;
  pid_t v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  std::string *p_p;
  NSObject *v88;
  int v89;
  std::string::size_type v90;
  int *v91;
  std::__fs::filesystem::path *v92;
  int v93;
  std::__fs::filesystem::path *v94;
  std::string *v95;
  std::string::size_type size;
  std::__fs::filesystem::path *v97;
  NSObject *v98;
  uint64_t v99;
  std::string::size_type v100;
  int v101;
  __CVBuffer *v102;
  const __CFAllocator *v103;
  std::string *v104;
  const __CFString *v106;
  const __CFURL *v108;
  const void *tv_nsec;
  _BOOL4 v110;
  const __CFArray *v111;
  const __CFArray *v112;
  CFIndex v113;
  std::string::size_type v114;
  std::string::size_type v115;
  std::string::size_type v116;
  uint64_t v117;
  _QWORD *v118;
  __CVBuffer *v119;
  _BOOL4 v120;
  std::__fs::filesystem::path *v122;
  std::__fs::filesystem::path *v123;
  std::string *v124;
  const char *v125;
  NSObject *v126;
  uint32_t v127;
  int v128;
  std::string::size_type v129;
  int *v130;
  std::__fs::filesystem::path *v131;
  int v132;
  int v133;
  std::string::size_type v134;
  std::__fs::filesystem::path *v135;
  std::string *v136;
  int v137;
  std::string::size_type v138;
  std::__fs::filesystem::path *v139;
  std::string *v140;
  std::string *v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t *v146;
  os_signpost_id_t *v147;
  __int128 v148;
  dispatch_group_t *v149;
  NSObject *log;
  os_log_t loga;
  NSObject *logb;
  unint64_t **cf;
  void *cfa;
  CFIndex cfb;
  NSObject *oslog;
  NSObject *osloga;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162[7];
  char v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  char v167;
  _BYTE *v168;
  std::__fs::filesystem::path v169;
  char v170;
  std::string __p;
  timespec v172;
  const std::error_category *v173;
  uint8_t v174[24];
  os_signpost_id_t v175;
  _BYTE __dst[32];
  __int128 v177;
  unsigned int *v178;
  float *v179;
  __int128 v180;
  int *v181;
  void *v182;
  CFTypeRef v183;
  char v184;
  uint64_t v185;
  std::string buf;
  uint64_t v187;
  double v188;
  double v189;
  void *v190;
  char v191;
  uint64_t v192;
  std::__fs::filesystem::path v193;
  uint64_t v194;

  v1 = MEMORY[0x1E0C80A78](a1);
  log = v3;
  cf = v2;
  v5 = v4;
  v6 = (_QWORD *)v1;
  v194 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB89E30 != -1)
    dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
  v7 = qword_1EDB89E38;
  if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1D3D6B000, v7, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: enter", (uint8_t *)&buf, 2u);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    _os_log_impl(&dword_1D3D6B000, v7, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: decoder: %{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)cf;
    _os_log_impl(&dword_1D3D6B000, v7, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: sample: %{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl(&dword_1D3D6B000, v7, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: regions: %{public}@", (uint8_t *)&buf, 0xCu);
  }
  oslog = v7;
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  p_cache = &OBJC_METACLASS____MRCBase_DummyClass___.cache;
  if (v8)
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (v6)
    {
      v14 = CFGetTypeID(v6);
      if (qword_1EDB89348[0] != -1)
        dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
      if (v14 != qword_1EDB89330)
        _os_assumes_log();
    }
    sub_1D3E36CA0();
    buf.__r_.__value_.__s.__data_[0] = 0;
    buf.__r_.__value_.__s.__data_[4] = 0;
    v15 = (unint64_t *)v6[3];
    v16 = sub_1D3DDC334(v15, (uint64_t)&buf);
    buf.__r_.__value_.__s.__data_[0] = 0;
    buf.__r_.__value_.__s.__data_[4] = 0;
    if (sub_1D3DDC428(v15, CFSTR("QR"), (uint64_t)&buf))
      v17 = 2;
    else
      v17 = 0;
    __dst[0] = 0;
    __dst[4] = 0;
    v18 = v17 | sub_1D3DDC428(v15, CFSTR("DataMatrix"), (uint64_t)__dst);
    LOBYTE(v162[0]) = 0;
    BYTE4(v162[0]) = 0;
    if (sub_1D3DDC428(v15, CFSTR("Aztec"), (uint64_t)v162))
      v19 = 2;
    else
      v19 = 0;
    LOBYTE(v158) = 0;
    BYTE4(v158) = 0;
    v20 = v19 | (4 * v18) | sub_1D3DDC428(v15, CFSTR("MicroQR"), (uint64_t)&v158);
    buf.__r_.__value_.__s.__data_[0] = 0;
    buf.__r_.__value_.__s.__data_[4] = 0;
    if (sub_1D3DDC428(v15, CFSTR("Codabar"), (uint64_t)&buf))
      v21 = 2;
    else
      v21 = 0;
    __dst[0] = 0;
    __dst[4] = 0;
    v22 = v21 | sub_1D3DDC428(v15, CFSTR("GS1DataBar"), (uint64_t)__dst);
    LOBYTE(v162[0]) = 0;
    BYTE4(v162[0]) = 0;
    if (sub_1D3DDC428(v15, CFSTR("GS1DataBarExpanded"), (uint64_t)v162))
      v23 = 2;
    else
      v23 = 0;
    LOBYTE(v158) = 0;
    BYTE4(v158) = 0;
    v24 = v23 | (4 * v22) | sub_1D3DDC428(v15, CFSTR("GS1DataBarLimited"), (uint64_t)&v158);
    buf.__r_.__value_.__s.__data_[0] = 0;
    buf.__r_.__value_.__s.__data_[4] = 0;
    v25 = sub_1D3DDC428(v15, CFSTR("AppClipCode"), (uint64_t)&buf);
    v144 = v24;
    p_cache = &OBJC_METACLASS____MRCBase_DummyClass___.cache;
    CFStringAppendFormat(Mutable, 0, CFSTR("V%d Symbol_%d_%d_%d_%d"), v15[7] >> 16, v16, v20, v144, v25);
    CVPixelBuffer = (__CVBuffer *)MRCSampleGetCVPixelBuffer(cf);
    if (CVPixelBufferIsPlanar(CVPixelBuffer))
    {
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(CVPixelBuffer, 0);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(CVPixelBuffer, 0);
    }
    else
    {
      WidthOfPlane = CVPixelBufferGetWidth(CVPixelBuffer);
      HeightOfPlane = CVPixelBufferGetHeight(CVPixelBuffer);
    }
    v29 = HeightOfPlane;
    RegionOfInterest = MRCSampleGetRegionOfInterest(cf);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    Pyramid = (const __CFArray *)MRCSampleGetPyramid((unint64_t *)cf);
    if (Pyramid)
      Pyramid = (const __CFArray *)CFArrayGetCount(Pyramid);
    *((_QWORD *)&v145 + 1) = (int)v34;
    v146 = (uint64_t *)(int)v36;
    *((_QWORD *)&v143 + 1) = (int)RegionOfInterest;
    *(_QWORD *)&v145 = (int)v32;
    *((_QWORD *)&v142 + 1) = v29;
    *(_QWORD *)&v143 = Pyramid;
    CFStringAppendFormat(Mutable, 0, CFSTR(" Sample %zux%zu Pyramids_%d ROI_%d_%d_%d_%d"), WidthOfPlane);
    CFStringAppend(Mutable, CFSTR(" Regions"));
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count)
      {
        ValueAtIndex = (__n128 *)CFArrayGetValueAtIndex(v5, 0);
        v40 = ValueAtIndex;
        if (!ValueAtIndex)
          goto LABEL_45;
        v41 = CFGetTypeID(ValueAtIndex);
        if (qword_1EDB89308 != -1)
          dispatch_once_f(&qword_1EDB89308, 0, (dispatch_function_t)sub_1D3D741E0);
        if (v41 == qword_1EDB89320)
        {
          v177 = 0u;
          memset(__dst, 0, sizeof(__dst));
          MRCRegionGetTransform(v40, (__n128 *)__dst);
          v145 = v177;
          v142 = *(_OWORD *)__dst;
          v143 = *(_OWORD *)&__dst[16];
          CFStringAppendFormat(Mutable, 0, CFSTR(" Transform_%.2f_%.2f_%.2f_%.2f_%.2f_%.2f "));
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              v43 = (__n128 *)CFArrayGetValueAtIndex(v5, i);
              MRCRegionGetCornerPoints(v43, (__n128 *)&buf);
              Symbology = MRCRegionGetSymbology(v43->n128_u64);
              v45 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              v46 = v188;
              v47 = v189;
              *((_QWORD *)&v145 + 1) = MRCRegionGetOrientation(v43);
              *((_QWORD *)&v143 + 1) = (int)v46;
              *(_QWORD *)&v145 = (int)v47;
              *((_QWORD *)&v142 + 1) = (int)*(double *)&v45;
              *(_QWORD *)&v143 = (int)*((double *)&v45 + 1);
              *(_QWORD *)&v142 = Symbology;
              CFStringAppendFormat(Mutable, 0, CFSTR("%@_%d_%d_%d_%d*%.2f "));
            }
          }
        }
        else
        {
LABEL_45:
          CFStringAppend(Mutable, CFSTR(" type unexpected"));
        }
      }
      else
      {
        CFStringAppend(Mutable, CFSTR(" empty array"));
      }
    }
    else
    {
      CFStringAppend(Mutable, CFSTR(" NULL"));
    }
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)Mutable;
      _os_log_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&buf, 0xCu);
    }
    CFRelease(Mutable);
  }
  LOBYTE(v162[0]) = 0;
  LOBYTE(v168) = 0;
  if (!v5)
  {
LABEL_82:
    LOBYTE(v158) = 0;
    LOBYTE(v160) = 0;
    if (!v6)
      goto LABEL_87;
    goto LABEL_83;
  }
  v48 = CFGetTypeID(v5);
  if (v48 != CFArrayGetTypeID())
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MRCDecoderDecodeSampleWithRegions";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v5;
      _os_log_error_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_ERROR, "%{public}s: Unexpected type of \"regions\": %{public}@", (uint8_t *)&buf, 0x16u);
    }
    goto LABEL_82;
  }
  v49 = CFArrayGetCount(v5);
  if (!v49)
    goto LABEL_82;
  memset(__dst, 0, 24);
  sub_1D3DAB9DC((uint64_t *)__dst, v49);
  if (v49 >= 1)
  {
    v51 = 0;
    v149 = (dispatch_group_t *)&__dst[16];
    *(_QWORD *)&v50 = 136446722;
    v148 = v50;
    do
    {
      v52 = CFArrayGetValueAtIndex(v5, v51);
      v53 = v52;
      if (!v52)
        goto LABEL_292;
      v54 = CFGetTypeID(v52);
      if (qword_1EDB89308 != -1)
        dispatch_once_f(&qword_1EDB89308, 0, (dispatch_function_t)sub_1D3D741E0);
      if (v54 == qword_1EDB89320)
      {
        v55 = CFGetTypeID(v53);
        if (qword_1EDB89308 != -1)
          dispatch_once_f(&qword_1EDB89308, 0, (dispatch_function_t)sub_1D3D741E0);
        if (v55 != qword_1EDB89320)
          _os_assumes_log();
        v56 = *(CFTypeRef **)&__dst[8];
        if (*(_QWORD *)&__dst[8] >= *(_QWORD *)&__dst[16])
        {
          v58 = v6;
          v59 = p_cache;
          v60 = (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 3;
          if ((unint64_t)(v60 + 1) >> 61)
            sub_1D3D6D4F8();
          v61 = (uint64_t)(*(_QWORD *)&__dst[16] - *(_QWORD *)__dst) >> 2;
          if (v61 <= v60 + 1)
            v61 = v60 + 1;
          if (*(_QWORD *)&__dst[16] - *(_QWORD *)__dst >= 0x7FFFFFFFFFFFFFF8uLL)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          v188 = COERCE_DOUBLE(&__dst[16]);
          if (v62)
            v62 = (unint64_t)sub_1D3D6D8A0(v62);
          else
            v63 = 0;
          v64 = (_QWORD *)(v62 + 8 * v60);
          buf.__r_.__value_.__r.__words[0] = v62;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v64;
          v187 = v62 + 8 * v63;
          v65 = CFRetain(v53);
          v66 = buf.__r_.__value_.__r.__words[2];
          *v64 = v65;
          buf.__r_.__value_.__r.__words[2] = v66 + 8;
          sub_1D3D742F0((uint64_t *)__dst, &buf);
          v57 = *(_QWORD **)&__dst[8];
          sub_1D3D743C8((uint64_t)&buf);
          p_cache = v59;
          v6 = v58;
        }
        else
        {
          *v56 = CFRetain(v53);
          v57 = v56 + 1;
        }
        *(_QWORD *)&__dst[8] = v57;
      }
      else
      {
LABEL_292:
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = v148;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MRCDecoderDecodeSampleWithRegions";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v51;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2114;
          v187 = (uint64_t)v53;
          _os_log_error_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_ERROR, "%{public}s: Unexpected type of \"region\" at %{public}ld: %{public}@", (uint8_t *)&buf, 0x20u);
        }
      }
      ++v51;
    }
    while (v49 != v51);
  }
  v158 = *(_OWORD *)__dst;
  v159 = *(_QWORD *)&__dst[16];
  memset(__dst, 0, 24);
  LOBYTE(v160) = 1;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  sub_1D3D74170((void ***)&buf);
  if (v6)
  {
LABEL_83:
    v67 = CFGetTypeID(v6);
    if (qword_1EDB89348[0] != -1)
      dispatch_once_f(qword_1EDB89348, 0, (dispatch_function_t)sub_1D3DD8EA4);
    if ((void *)v67 != p_cache[102])
      _os_assumes_log();
  }
LABEL_87:
  if (cf)
  {
    v68 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v68 != qword_1EDB893A8)
      _os_assumes_log();
  }
  buf.__r_.__value_.__s.__data_[0] = 0;
  buf.__r_.__value_.__s.__data_[16] = 0;
  if ((_BYTE)v160)
  {
    buf.__r_.__value_.__r.__words[0] = v158;
    buf.__r_.__value_.__l.__size_ = (uint64_t)(*((_QWORD *)&v158 + 1) - v158) >> 3;
    buf.__r_.__value_.__s.__data_[16] = 1;
  }
  sub_1D3D70CE0((unint64_t *)__dst, (uint64_t)(v6 + 2), (uint64_t)cf, (__int128 *)&buf, (uint64_t)v162, v9, v10, v11, v142, *((unint64_t **)&v142 + 1), (uint64_t *)v143, *((unint64_t **)&v143 + 1), (unint64_t *)v145, *((uint64_t *)&v145 + 1), v146, v147, (dispatch_group_t *)v148, *((uint64_t *)&v148 + 1), v149,
    log,
    (void (*)(void))cf,
    (char *)oslog,
    (uint64_t *)v158,
    *((unint64_t *)&v158 + 1),
    v159,
    v160,
    v161,
    v162[0],
    v162[1],
    v162[2],
    v162[3],
    v162[4],
    v162[5],
    v162[6],
    v163,
    v164,
    v165,
    v166,
    v167,
    v168,
    v169.__pn_.__r_.__value_.__s.__data_[0],
    v169.__pn_.__r_.__value_.__l.__size_,
    v169.__pn_.__r_.__value_.__r.__words[2],
    v170,
    *(__int128 *)&__p.__r_.__value_.__l.__data_,
    __p.__r_.__value_.__r.__words[2],
    v172,
    (char)v173,
    *(timespec *)v174,
    v174[16],
    v175,
    *(_QWORD **)__dst,
    *(uint64_t *)&__dst[8],
    __dst[16],
    *(void **)&__dst[24],
    (void *)v177,
    *((uint64_t *)&v177 + 1),
    v178,
    v179,
    v180,
    v181,
    (uint64_t)v182,
    v183);
  do
    v69 = (const void *)__ldaxr((unint64_t *)__dst);
  while (__stlxr(0, (unint64_t *)__dst));
  sub_1D3D74DE4((unint64_t *)__dst);
  if (loga && (_BYTE)v168)
  {
    sub_1D3DF53CC((CFErrorRef *)&buf, (uint64_t)v162);
    do
      v70 = __ldaxr((unint64_t *)&buf);
    while (__stlxr(0, (unint64_t *)&buf));
    loga->isa = (Class)v70;
    sub_1D3D7448C((unint64_t *)&buf);
  }
  if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
  {
    v71 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CFStringAppend(v71, CFSTR("Result"));
    if (v69)
    {
      for (j = 0; j < MRCDecoderResultGetDescriptorCount(v69); ++j)
      {
        DescriptorAtIndex = (char *)MRCDecoderResultGetDescriptorAtIndex(v69, j);
        v74 = (const void *)MRCDescriptorCopyAttribute(DescriptorAtIndex, CFSTR("BarcodeType"));
        v75 = v74;
        if (v74)
        {
          v76 = CFGetTypeID(v74);
          if (v76 == CFStringGetTypeID())
            CFStringAppendFormat(v71, 0, CFSTR(" %@"), v75);
          CFRelease(v75);
        }
      }
    }
    else
    {
      CFStringAppend(v71, CFSTR(" NULL"));
    }
    if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
      _os_log_impl(&dword_1D3D6B000, osloga, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&buf, 0xCu);
    }
    CFRelease(v71);
  }
  if (qword_1EDB89F70 != -1)
    dispatch_once(&qword_1EDB89F70, &unk_1E95B3668);
  if (!byte_1EFE31888)
    goto LABEL_247;
  if (os_log_type_enabled(osloga, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1D3D6B000, osloga, OS_LOG_TYPE_INFO, "WARNING: Live dump is enabled, this may impact the performance.", (uint8_t *)&buf, 2u);
  }
  memset(&v193, 0, sizeof(v193));
  sub_1D3D8C744(&v193.__pn_, (std::string *)"/tmp", (std::string *)"");
  if ((v193.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = &v193;
  else
    v77 = (std::__fs::filesystem::path *)v193.__pn_.__r_.__value_.__r.__words[0];
  if (access((const char *)v77, 2))
  {
    if (qword_1EFE31810 != -1)
      dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
    v78 = qword_1EFE31808;
    if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_DEBUG))
    {
      v89 = SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]);
      v90 = v193.__pn_.__r_.__value_.__r.__words[0];
      v91 = __error();
      v92 = &v193;
      v93 = *v91;
      if (v89 < 0)
        v92 = (std::__fs::filesystem::path *)v90;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      _os_log_debug_impl(&dword_1D3D6B000, v78, OS_LOG_TYPE_DEBUG, "%{public}s is not writable, reason: %{public, errno}d", (uint8_t *)&buf, 0x12u);
    }
    std::__fs::filesystem::__temp_directory_path((std::__fs::filesystem::path *)&buf, 0);
    if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__pn_.__r_.__value_.__l.__data_);
    v193.__pn_ = buf;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
    {
      v94 = &v193;
      if ((v193.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v94 = (std::__fs::filesystem::path *)v193.__pn_.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v94;
      _os_log_debug_impl(&dword_1D3D6B000, v78, OS_LOG_TYPE_DEBUG, "trying %{public}s", (uint8_t *)&buf, 0xCu);
    }
    v79 = (v193.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v193
        : (std::__fs::filesystem::path *)v193.__pn_.__r_.__value_.__r.__words[0];
    if (access((const char *)v79, 2))
    {
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
      {
        v128 = SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]);
        v129 = v193.__pn_.__r_.__value_.__r.__words[0];
        v130 = __error();
        v131 = &v193;
        v132 = *v130;
        if (v128 < 0)
          v131 = (std::__fs::filesystem::path *)v129;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v131;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v132;
        _os_log_debug_impl(&dword_1D3D6B000, v78, OS_LOG_TYPE_DEBUG, "%{public}s is also not writable, reason: %{public, errno}d", (uint8_t *)&buf, 0x12u);
      }
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        goto LABEL_156;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v80 = "cannot find anywhere to write, skipping";
      p_buf = &buf;
LABEL_152:
      _os_log_debug_impl(&dword_1D3D6B000, v78, OS_LOG_TYPE_DEBUG, v80, (uint8_t *)p_buf, 2u);
LABEL_156:
      memset(&v169, 0, sizeof(v169));
      goto LABEL_188;
    }
  }
  LODWORD(v172.tv_nsec) = 0;
  v173 = std::system_category();
  if (std::__fs::filesystem::path::__filename(&v193).__size_)
    std::string::push_back(&v193.__pn_, 47);
  v82 = (const std::__fs::filesystem::path *)sub_1D3D8C744(&v193.__pn_, (std::string *)"MRCLiveDumps", (std::string *)"");
  std::__fs::filesystem::__status(v82, 0);
  if (__dst[0] != 2 && !std::__fs::filesystem::__create_directory(&v193, (std::error_code *)&v172.tv_nsec))
  {
    if (qword_1EFE31810 != -1)
      dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
    v88 = qword_1EFE31808;
    if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_DEBUG))
    {
      v133 = SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]);
      v134 = v193.__pn_.__r_.__value_.__r.__words[0];
      std::error_code::message(&buf, (const std::error_code *)&v172.tv_nsec);
      v135 = &v193;
      if (v133 < 0)
        v135 = (std::__fs::filesystem::path *)v134;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &buf;
      else
        v136 = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = v135;
      *(_WORD *)&__dst[12] = 2082;
      *(_QWORD *)&__dst[14] = v136;
      _os_log_debug_impl(&dword_1D3D6B000, v88, OS_LOG_TYPE_DEBUG, "cannot create directory at %{public}s, reason: %{public}s, skipping", __dst, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_156;
  }
  v83 = getpid();
  if (proc_name(v83, &buf, 0x1000u) <= 0)
  {
    if (qword_1EFE31810 != -1)
      dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
    v78 = qword_1EFE31808;
    if (!os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_DEBUG))
      goto LABEL_156;
    *(_WORD *)__dst = 0;
    v80 = "cannot retrieve process name, skipping";
    p_buf = (std::string *)__dst;
    goto LABEL_152;
  }
  v172.tv_sec = 0;
  if (pthread_threadid_np(0, (__uint64_t *)&v172))
    v172.tv_sec = MEMORY[0x1D8255044]();
  sub_1D3DDC604((uint64_t)__dst);
  v84 = strlen((const char *)&buf);
  sub_1D3D8C900(&__dst[16], (uint64_t)&buf, v84);
  sub_1D3D8C900(&__dst[16], (uint64_t)"_", 1);
  v85 = (_QWORD *)std::ostream::operator<<();
  sub_1D3D8C900(v85, (uint64_t)"_", 1);
  v86 = (_QWORD *)std::ostream::operator<<();
  sub_1D3D8C900(v86, (uint64_t)"_", 1);
  std::chrono::system_clock::now();
  std::ostream::operator<<();
  sub_1D3D93B64(&__p, (uint64_t)&__dst[24]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_162;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_162;
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__s.__data_[0] != 47)
  {
LABEL_162:
    if (std::__fs::filesystem::path::__filename(&v193).__size_)
      std::string::push_back(&v193.__pn_, 47);
    goto LABEL_171;
  }
  if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    *v193.__pn_.__r_.__value_.__l.__data_ = 0;
    v193.__pn_.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v193.__pn_.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v193.__pn_.__r_.__value_.__s + 23) = 0;
  }
LABEL_171:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = &__p;
  else
    v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  sub_1D3D8C744(&v193.__pn_, v95, (std::string *)((char *)v95 + size));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v193, 0);
  if (__p.__r_.__value_.__s.__data_[0] == 2
    || std::__fs::filesystem::__create_directory(&v193, (std::error_code *)&v172.tv_nsec))
  {
    v169 = v193;
    v97 = &v193;
  }
  else
  {
    if (qword_1EFE31810 != -1)
      dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
    v98 = qword_1EFE31808;
    if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_DEBUG))
    {
      v137 = SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]);
      v138 = v193.__pn_.__r_.__value_.__r.__words[0];
      std::error_code::message(&__p, (const std::error_code *)&v172.tv_nsec);
      v139 = &v193;
      if (v137 < 0)
        v139 = (std::__fs::filesystem::path *)v138;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v140 = &__p;
      else
        v140 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v174 = 136446466;
      *(_QWORD *)&v174[4] = v139;
      *(_WORD *)&v174[12] = 2082;
      *(_QWORD *)&v174[14] = v140;
      _os_log_debug_impl(&dword_1D3D6B000, v98, OS_LOG_TYPE_DEBUG, "cannot create directory at %{public}s, reason: %{public}s, skipping", v174, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v97 = &v169;
  }
  v97->__pn_.__r_.__value_.__r.__words[0] = 0;
  v97->__pn_.__r_.__value_.__l.__size_ = 0;
  v97->__pn_.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)__dst = *MEMORY[0x1E0DE4F50];
  v99 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&__dst[16] = v99;
  *(_QWORD *)&__dst[24] = MEMORY[0x1E0DE4FB8] + 16;
  if (v184 < 0)
    operator delete(v182);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D8254BF4](&v185);
LABEL_188:
  if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__pn_.__r_.__value_.__l.__data_);
  v100 = HIBYTE(v169.__pn_.__r_.__value_.__r.__words[2]);
  v101 = SHIBYTE(v169.__pn_.__r_.__value_.__r.__words[2]);
  if ((v169.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v100 = v169.__pn_.__r_.__value_.__l.__size_;
  if (!v100)
  {
LABEL_245:
    if ((v101 & 0x80) == 0)
      goto LABEL_247;
    goto LABEL_246;
  }
  if (qword_1EFE31810 != -1)
    dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
  logb = qword_1EFE31808;
  if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_DEBUG))
  {
    v122 = (std::__fs::filesystem::path *)v169.__pn_.__r_.__value_.__r.__words[0];
    if (v101 >= 0)
      v122 = &v169;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v122;
    _os_log_debug_impl(&dword_1D3D6B000, logb, OS_LOG_TYPE_DEBUG, "start dumping at %{public}s", (uint8_t *)&buf, 0xCu);
  }
  sub_1D3DDC7B8((std::string *)__dst, (std::string *)"decoder.txt");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  sub_1D3DDC810((int)&buf, v6);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  memset(__dst, 0, 24);
  sub_1D3D8C744((std::string *)__dst, (std::string *)"sample.txt", (std::string *)"");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  sub_1D3DDC810((int)&buf, cfa);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  sub_1D3DDC7B8((std::string *)__dst, (std::string *)"regions.txt");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  sub_1D3DDC810((int)&buf, v5);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  memset(__dst, 0, 24);
  sub_1D3D8C744((std::string *)__dst, (std::string *)"decoder_result.txt", (std::string *)"");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  sub_1D3DDC810((int)&buf, v69);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  memset(__dst, 0, 24);
  sub_1D3D8C744((std::string *)__dst, (std::string *)"pixelBuffer.png", (std::string *)"");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  v102 = (__CVBuffer *)MRCSampleGetCVPixelBuffer((unint64_t **)cfa);
  sub_1D3DDCAB0((uint64_t)&buf, v102);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  memset(__dst, 0, 24);
  sub_1D3D8C744((std::string *)__dst, (std::string *)"sample.mrcsample", (std::string *)"");
  sub_1D3D8C650((std::__fs::filesystem::path *)&buf, (uint64_t)&v169, (std::__fs::filesystem::path *)__dst);
  v103 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v104 = &buf;
  else
    v104 = (std::string *)buf.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v104);
  if (!atomic_load((unint64_t *)&__p))
  {
    if (os_log_type_enabled(logb, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v193.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1D3D6B000, logb, OS_LOG_TYPE_ERROR, "failed to create CFString with file system representation", (uint8_t *)&v193, 2u);
    }
    goto LABEL_229;
  }
  v106 = (const __CFString *)atomic_load((unint64_t *)&__p);
  *(_QWORD *)v174 = CFURLCreateWithFileSystemPath(v103, v106, kCFURLPOSIXPathStyle, 0);
  if (atomic_load((unint64_t *)v174))
  {
    v172.tv_nsec = 0;
    v108 = (const __CFURL *)atomic_load((unint64_t *)v174);
    if (!MRCSampleWriteOpaqueRepresentationToFile((char *)cfa, v108, (unint64_t *)&v172.tv_nsec))
    {
      tv_nsec = (const void *)v172.tv_nsec;
      v110 = os_log_type_enabled(logb, OS_LOG_TYPE_ERROR);
      if (tv_nsec)
      {
        if (v110)
        {
          v141 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v141 = (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v193.__pn_.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v193.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v141;
          WORD2(v193.__pn_.__r_.__value_.__r.__words[1]) = 2114;
          *(std::string::size_type *)((char *)&v193.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)tv_nsec;
          _os_log_error_impl(&dword_1D3D6B000, logb, OS_LOG_TYPE_ERROR, "failed to write sample as opaque representation to %{public}s, error: %{public}@", (uint8_t *)&v193, 0x16u);
          tv_nsec = (const void *)v172.tv_nsec;
        }
        CFRelease(tv_nsec);
        goto LABEL_228;
      }
      if (v110)
      {
        v124 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v124 = (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v193.__pn_.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v193.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v124;
        v125 = "failed to write sample as opaque representation to %{public}s";
        v126 = logb;
        v127 = 12;
        goto LABEL_278;
      }
    }
  }
  else if (os_log_type_enabled(logb, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v193.__pn_.__r_.__value_.__l.__data_) = 0;
    v125 = "failed to create file URL with POSIX-style file system path";
    v126 = logb;
    v127 = 2;
LABEL_278:
    _os_log_error_impl(&dword_1D3D6B000, v126, OS_LOG_TYPE_ERROR, v125, (uint8_t *)&v193, v127);
  }
LABEL_228:
  sub_1D3DDCCEC((unint64_t *)v174);
LABEL_229:
  sub_1D3D8C70C((unint64_t *)&__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v111 = (const __CFArray *)MRCSampleCopyAttribute((char *)cfa, CFSTR("MRCSampleAttributePyramid"));
  v112 = v111;
  if (v111)
  {
    cfb = CFArrayGetCount(v111);
    if (cfb >= 1)
    {
      v113 = 0;
      v114 = *MEMORY[0x1E0DE4F50];
      v116 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v115 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v117 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        sub_1D3DDC604((uint64_t)&buf);
        sub_1D3D8C900(&buf.__r_.__value_.__r.__words[2], (uint64_t)"pyramid_", 8);
        v118 = (_QWORD *)std::ostream::operator<<();
        sub_1D3D8C900(v118, (uint64_t)".png", 4);
        sub_1D3D93B64(&__p, (uint64_t)&v187);
        v193.__pn_ = __p;
        memset(&__p, 0, sizeof(__p));
        sub_1D3D8C650((std::__fs::filesystem::path *)__dst, (uint64_t)&v169, &v193);
        v119 = (__CVBuffer *)CFArrayGetValueAtIndex(v112, v113);
        sub_1D3DDCAB0((uint64_t)__dst, v119);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        if (SHIBYTE(v193.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__pn_.__r_.__value_.__l.__data_);
        buf.__r_.__value_.__r.__words[0] = v114;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + *(_QWORD *)(v114 - 24)) = v116;
        buf.__r_.__value_.__r.__words[2] = v115;
        v187 = v117;
        if (v191 < 0)
          operator delete(v190);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1D8254BF4](&v192);
        ++v113;
      }
      while (cfb != v113);
    }
    CFRelease(v112);
  }
  v120 = os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG);
  LOBYTE(v101) = *((_BYTE *)&v169.__pn_.__r_.__value_.__s + 23);
  if (!v120)
    goto LABEL_245;
  v123 = (std::__fs::filesystem::path *)v169.__pn_.__r_.__value_.__r.__words[0];
  if ((v169.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = &v169;
  LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v123;
  _os_log_debug_impl(&dword_1D3D6B000, logb, OS_LOG_TYPE_DEBUG, "finish dumping at %{public}s", (uint8_t *)&buf, 0xCu);
  if ((*((_BYTE *)&v169.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_246:
    operator delete(v169.__pn_.__r_.__value_.__l.__data_);
LABEL_247:
  if (os_log_type_enabled(osloga, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138739971;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
    _os_log_impl(&dword_1D3D6B000, osloga, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: decoderResult: %{sensitive}@", (uint8_t *)&buf, 0xCu);
  }
  if (os_log_type_enabled(osloga, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1D3D6B000, osloga, OS_LOG_TYPE_INFO, "MRCDecoderDecodeSampleWithRegions: leave", (uint8_t *)&buf, 2u);
  }
  if ((_BYTE)v160)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
    sub_1D3D74170((void ***)&buf);
  }
  if ((_BYTE)v168)
    sub_1D3DF4F24(v162);
  return v69;
}

void sub_1D3DDC124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  uint64_t v55;

  sub_1D3DDC730((uint64_t)&a55);
  if (*(char *)(v55 - 137) < 0)
    operator delete(*(void **)(v55 - 160));
  if (a26)
  {
    STACK[0x290] = (unint64_t)&a23;
    sub_1D3D74170((void ***)&STACK[0x290]);
  }
  if (a40)
    sub_1D3DF4F24(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DDC334(unint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CFString *ValueAtIndex;
  _BOOL4 v12;
  int v13;
  int v15;

  if (qword_1EDB89FF0 != -1)
    dispatch_once_f(&qword_1EDB89FF0, 0, (dispatch_function_t)sub_1D3D8FAA4);
  v4 = (unint64_t *)qword_1EDB89FE8;
  v5 = (const __CFArray *)atomic_load((unint64_t *)qword_1EDB89FE8);
  Count = CFArrayGetCount(v5);
  if (Count < 1)
    return 0;
  v7 = Count;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = (const __CFArray *)atomic_load(v4);
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v8);
    if (sub_1D3DDC428(a1, ValueAtIndex, a2))
    {
      v15 = 0;
      v12 = sub_1D3E37508(ValueAtIndex, &v15);
      v13 = 1 << v15;
      if (!v12)
        v13 = 0;
      v9 = v13 | v9;
    }
    ++v8;
  }
  while (v7 != v8);
  return v9;
}

uint64_t sub_1D3DDC428(unint64_t *a1, const void *a2, uint64_t a3)
{
  const __CFSet *v7;
  uint64_t result;
  CFTypeRef v9;
  unint64_t v10;
  int v11;
  int v12;
  CFTypeRef v14;

  if (!atomic_load(a1))
    return 1;
  v7 = (const __CFSet *)atomic_load(a1);
  result = CFSetContainsValue(v7, a2);
  if (!(_DWORD)result)
    return result;
  if (!*(_BYTE *)(a3 + 4))
    return 1;
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  v14 = v9;
  v10 = sub_1D3D911D4((unint64_t *)&v14);
  v11 = v10;
  v12 = BYTE4(v10);
  sub_1D3D8C70C((unint64_t *)&v14);
  if (v12 && v11 == 3)
  {
    v11 = 2 * ((uint64_t)a1[7] < 0x40000);
    v12 = 1;
  }
  return v12 && v11 == *(_DWORD *)a3;
}

void sub_1D3DDC4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3DDC4F4()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[3];
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB89240)
    _os_assumes_log();
  if (qword_1EDB893A8)
    _os_assumes_log();
  qword_1EDB89240 = (uint64_t)"MRCSample";
  qword_1EDB893A8 = _CFRuntimeRegisterClass();
  v3 = 0;
  sub_1D3DAFDB4(qword_1EDB893A8, v2);
  result = v3;
  if (v3 == v2)
  {
    v1 = 4;
    result = v2;
  }
  else
  {
    if (!v3)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1D3DDC5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3DDC604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1D3DDC708(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1D8254BF4](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DDC730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D8254BF4](a1 + 128);
  return a1;
}

std::string *sub_1D3DDC7B8(std::string *this, std::string *a2)
{
  std::string *v3;
  int v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = (std::string *)((char *)a2 - 1);
  do
  {
    v4 = v3->__r_.__value_.__s.__data_[1];
    v3 = (std::string *)((char *)v3 + 1);
  }
  while (v4);
  sub_1D3D8C744(this, a2, v3);
  return this;
}

void sub_1D3DDC7F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1D3DDC810(int a1, CFTypeRef cf)
{
  CFStringRef v2;
  const void *v3;
  CFTypeRef v5;
  const void *v6;
  const __CFString *v7;
  const char *CStringPtr;
  char *v9;
  const __CFString *v10;
  CFIndex Length;
  CFIndex v12;
  const __CFString *v13;
  size_t v14;
  NSObject *v16;
  unint64_t v17;
  uint8_t buf[8];
  uint64_t v19;
  _QWORD v20[20];

  v20[19] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (cf)
  {
    v2 = CFCopyDescription(cf);
    do
      v3 = (const void *)__ldaxr(&v17);
    while (__stlxr((unint64_t)v2, &v17));
    if (v3)
      CFRelease(v3);
  }
  if (!atomic_load(&v17))
  {
    v5 = CFRetain(&stru_1E95B5208);
    do
      v6 = (const void *)__ldaxr(&v17);
    while (__stlxr((unint64_t)v5, &v17));
    if (v6)
      CFRelease(v6);
  }
  v7 = (const __CFString *)atomic_load(&v17);
  CStringPtr = CFStringGetCStringPtr(v7, 0x8000100u);
  if (CStringPtr)
  {
    v9 = 0;
  }
  else
  {
    v10 = (const __CFString *)atomic_load(&v17);
    Length = CFStringGetLength(v10);
    v12 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v9 = (char *)operator new[]();
    v13 = (const __CFString *)atomic_load(&v17);
    if (!CFStringGetCString(v13, v9, v12, 0x8000100u))
    {
      if (qword_1EFE31810 != -1)
        dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
      v16 = qword_1EFE31808;
      if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1D3D6B000, v16, OS_LOG_TYPE_ERROR, "failed to retrieve C string in UTF-8", buf, 2u);
      }
      goto LABEL_16;
    }
    CStringPtr = v9;
  }
  sub_1D3DBD9FC(buf);
  v14 = strlen(CStringPtr);
  sub_1D3D8C900(buf, (uint64_t)CStringPtr, v14);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1D8254A74](&v19);
  std::ostream::~ostream();
  MEMORY[0x1D8254BF4](v20);
  if (v9)
LABEL_16:
    MEMORY[0x1D8254C3C](v9, 0x1000C8077774924);
  return sub_1D3D8C70C(&v17);
}

void sub_1D3DDCA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_1D3DBDB00((uint64_t *)va1);
  if (v2)
    MEMORY[0x1D8254C3C](v2, 0x1000C8077774924);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3DDCAB0(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  OSStatus v3;
  NSObject *v4;
  const __CFAllocator *v5;
  const char *v6;
  const __CFString *v7;
  const __CFURL *v8;
  CGImageDestination *v9;
  CGImageDestination *v10;
  NSObject *v11;
  unint64_t v12;
  CFURLRef v13;
  CFStringRef v14;
  CGImageRef imageOut;
  uint8_t buf[4];
  unint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  imageOut = 0;
  v3 = VTCreateCGImageFromCVPixelBuffer(pixelBuffer, 0, &imageOut);
  if (v3)
  {
    if (qword_1EFE31810 != -1)
      dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
    v4 = qword_1EFE31808;
    if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v17) = v3;
      _os_log_error_impl(&dword_1D3D6B000, v4, OS_LOG_TYPE_ERROR, "VTCreateCGImageFromCVPixelBuffer failed with %{public}d", buf, 8u);
    }
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(char *)(a1 + 23) >= 0)
      v6 = (const char *)a1;
    else
      v6 = *(const char **)a1;
    v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0x8000100u);
    v7 = (const __CFString *)atomic_load((unint64_t *)&v14);
    v13 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 0);
    v8 = (const __CFURL *)atomic_load((unint64_t *)&v13);
    v9 = CGImageDestinationCreateWithURL(v8, CFSTR("public.png"), 1uLL, 0);
    v10 = v9;
    if (v9)
    {
      CGImageDestinationAddImage(v9, imageOut, 0);
      CGImageDestinationFinalize(v10);
      CFRelease(v10);
    }
    else
    {
      if (qword_1EFE31810 != -1)
        dispatch_once(&qword_1EFE31810, &unk_1E95B3308);
      v11 = qword_1EFE31808;
      if (os_log_type_enabled((os_log_t)qword_1EFE31808, OS_LOG_TYPE_ERROR))
      {
        v12 = atomic_load((unint64_t *)&v13);
        *(_DWORD *)buf = 138543362;
        v17 = v12;
        _os_log_error_impl(&dword_1D3D6B000, v11, OS_LOG_TYPE_ERROR, "CGImageDestinationCreateWithURL failed for %{public}@", buf, 0xCu);
      }
    }
    CGImageRelease(imageOut);
    sub_1D3DDCCEC((unint64_t *)&v13);
    sub_1D3D8C70C((unint64_t *)&v14);
  }
}

void sub_1D3DDCCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DDCCEC(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

unint64_t *sub_1D3DDCD24(CFTypeRef cf)
{
  CFTypeID v2;
  CFTypeID v3;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
    v3 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v3 != qword_1EDB893A8)
      _os_assumes_log();
  }
  sub_1D3DDD060((void ***)cf + 9, 0);
  sub_1D3D74138((unint64_t *)cf + 8);
  sub_1D3D8BAAC((unint64_t *)cf + 3);
  return sub_1D3DDD0BC((unint64_t **)cf + 2);
}

BOOL sub_1D3DDCE14(CFTypeRef cf, CFTypeRef a2)
{
  CFTypeID v4;
  CFTypeID v5;

  if (!cf)
    goto LABEL_5;
  v4 = CFGetTypeID(cf);
  if (qword_1EDB893B0 != -1)
    dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
  if (v4 != qword_1EDB893A8)
  {
    _os_assumes_log();
    if (!a2)
      return cf == a2;
  }
  else
  {
LABEL_5:
    if (!a2)
      return cf == a2;
  }
  v5 = CFGetTypeID(a2);
  if (qword_1EDB893B0 != -1)
    dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
  if (v5 != qword_1EDB893A8)
    _os_assumes_log();
  return cf == a2;
}

unint64_t sub_1D3DDCEF8(CFTypeRef cf)
{
  CFTypeID v2;
  unint64_t v3;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  v3 = 0x9DDFEA08EB382D69
     * (((((((unint64_t)cf + 16) >> 3) & 0x3FFFFFF) << 6) | 8) ^ (((unint64_t)cf + 16) >> 32));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * ((((unint64_t)cf + 16) >> 32) ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69
                                                                                             * ((((unint64_t)cf
                                                                                                + 16) >> 32) ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef sub_1D3DDCFB0(CFTypeRef cf)
{
  CFTypeID v2;
  CFStringRef result;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  result = sub_1D3DE7A7C((uint64_t)cf + 16);
  if (!result)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<%s %p>"), "MRCSample", cf);
  return result;
}

void ***sub_1D3DDD060(void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    sub_1D3D74D70(&v3);
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

unint64_t *sub_1D3DDD0BC(unint64_t **a1)
{
  unint64_t *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1D3D74EDC(result);
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

const void *MRCDecoderDecodeSampleWithSegmentationMask(int a1, _QWORD *a2, char *cf, __n128 a4)
{
  CFTypeID v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSObject *v11;
  const char *v12;
  CGAffineTransform *v13;
  CGFloat MinX;
  CGFloat v15;
  CGFloat MaxX;
  CGFloat v17;
  CFTypeID v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  double v53;
  __int128 v54;
  CGAffineTransform *v55;
  CGAffineTransform *v56;
  __int128 v57;
  unint64_t v58;
  const __CFArray *v59;
  const __CFArray *v60;
  CFIndex Count;
  const __CFAllocator *v62;
  CFIndex v63;
  const __CFArray *v64;
  const __CFArray *v65;
  const void *ValueAtIndex;
  __CFArray *v67;
  const void *v68;
  const void *v69;
  const __CFArray *v71;
  CFArrayRef Copy;
  CGAffineTransform v73;
  char v74;
  CGAffineTransform v75;
  CGAffineTransform v76;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v79;
  CGAffineTransform v80;
  CGAffineTransform v81;
  CGAffineTransform v82;
  CGAffineTransform v83;
  _BYTE v84[24];
  CGFloat MaxY;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat MinY;
  CGAffineTransform v90;
  uint64_t v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;

  v91 = *MEMORY[0x1E0C80C00];
  if (!cf)
    goto LABEL_50;
  v6 = CFGetTypeID(cf);
  if (qword_1EFE317E8 != -1)
    dispatch_once_f(&qword_1EFE317E8, 0, (dispatch_function_t)sub_1D3D93D74);
  if (v6 != qword_1EFE317F0)
    _os_assumes_log();
  sub_1D3D948D0((uint64_t *)cf + 2);
  x = v92.origin.x;
  y = v92.origin.y;
  width = v92.size.width;
  height = v92.size.height;
  if (CGRectIsNull(v92))
  {
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v11 = qword_1EDB89E38;
    if (!os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_ERROR))
      goto LABEL_50;
    *(_DWORD *)v84 = 136446466;
    *(_QWORD *)&v84[4] = "MRCDecoderDecodeSampleWithSegmentationMask";
    *(_WORD *)&v84[12] = 2114;
    *(_QWORD *)&v84[14] = cf;
    v12 = "%{public}s: Unable to estimate region-of-interest from: %{public}@";
    v13 = (CGAffineTransform *)v84;
    goto LABEL_49;
  }
  v93.origin.x = x;
  v93.origin.y = y;
  v93.size.width = width;
  v93.size.height = height;
  MinX = CGRectGetMinX(v93);
  v94.origin.x = x;
  v94.origin.y = y;
  v94.size.width = width;
  v94.size.height = height;
  *(CGFloat *)v84 = MinX;
  *(_QWORD *)&v84[8] = CGRectGetMinY(v94);
  v95.origin.x = x;
  v95.origin.y = y;
  v95.size.width = width;
  v95.size.height = height;
  v15 = CGRectGetMinX(v95);
  v96.origin.x = x;
  v96.origin.y = y;
  v96.size.width = width;
  v96.size.height = height;
  *(CGFloat *)&v84[16] = v15;
  MaxY = CGRectGetMaxY(v96);
  v97.origin.x = x;
  v97.origin.y = y;
  v97.size.width = width;
  v97.size.height = height;
  MaxX = CGRectGetMaxX(v97);
  v98.origin.x = x;
  v98.origin.y = y;
  v98.size.width = width;
  v98.size.height = height;
  v86 = MaxX;
  v87 = CGRectGetMaxY(v98);
  v99.origin.x = x;
  v99.origin.y = y;
  v99.size.width = width;
  v99.size.height = height;
  v17 = CGRectGetMaxX(v99);
  v100.origin.x = x;
  v100.origin.y = y;
  v100.size.width = width;
  v100.size.height = height;
  v88 = v17;
  MinY = CGRectGetMinY(v100);
  if (a2)
  {
    v18 = CFGetTypeID(a2);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v18 != qword_1EDB893A8)
      _os_assumes_log();
  }
  v19 = (unint64_t *)(cf + 48);
  if (!*((_QWORD *)cf + 6) || (v20 = (unint64_t *)(cf + 56), !*((_QWORD *)cf + 7)))
  {
LABEL_21:
    LOBYTE(v73.a) = 0;
    v74 = 0;
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v11 = qword_1EDB89E38;
    if (!os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_ERROR))
      goto LABEL_50;
    LODWORD(v90.a) = 136446466;
    *(_QWORD *)((char *)&v90.a + 4) = "MRCDecoderDecodeSampleWithSegmentationMask";
    WORD2(v90.b) = 2114;
    *(_QWORD *)((char *)&v90.b + 6) = cf;
    v12 = "%{public}s: Unable to get transform from: %{public}@";
LABEL_48:
    v13 = &v90;
LABEL_49:
    _os_log_error_impl(&dword_1D3D6B000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)v13, 0x16u);
LABEL_50:
    Copy = 0;
    goto LABEL_51;
  }
  v21 = a2[2];
  switch(*((_QWORD *)cf + 9))
  {
    case 1:
      v22 = CGRectGetWidth(*(CGRect *)(v21 + 8));
      v23 = v22 / CGRectGetHeight(*(CGRect *)(v21 + 8));
      v24 = *(_QWORD *)(v21 + 8);
      v25 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      v27 = *(_QWORD *)(v21 + 32);
      if (v23 >= (double)*v19 / (double)*v20)
      {
        v28 = CGRectGetWidth(*(CGRect *)&v24);
      }
      else
      {
        v28 = CGRectGetHeight(*(CGRect *)&v24);
        v19 = (unint64_t *)(cf + 56);
      }
      v31 = v28 / (double)*v19;
      v30 = v31;
      goto LABEL_34;
    case 2:
      v43 = CGRectGetWidth(*(CGRect *)(v21 + 8));
      v44 = v43 / CGRectGetHeight(*(CGRect *)(v21 + 8));
      v45 = *(_QWORD *)(v21 + 8);
      v46 = *(_QWORD *)(v21 + 16);
      v47 = *(_QWORD *)(v21 + 24);
      v48 = *(_QWORD *)(v21 + 32);
      if (v44 >= (double)*v19 / (double)*v20)
      {
        v49 = CGRectGetHeight(*(CGRect *)&v45) / (double)*v20;
        v51 = (CGRectGetWidth(*(CGRect *)(v21 + 8)) / v49 - (double)*v19) * -0.5;
        v50 = 0.0;
      }
      else
      {
        v49 = CGRectGetWidth(*(CGRect *)&v45) / (double)*v19;
        v50 = (CGRectGetHeight(*(CGRect *)(v21 + 8)) / v49 - (double)*v20) * -0.5;
        v51 = 0.0;
      }
      v57 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v90.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v90.c = v57;
      *(_OWORD *)&v90.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)&v83.a = *(_OWORD *)&v90.a;
      *(_OWORD *)&v83.c = v57;
      *(_OWORD *)&v83.tx = *(_OWORD *)&v90.tx;
      CGAffineTransformMakeScale(&v82, v49, v49);
      CGAffineTransformConcat(&v90, &v83, &v82);
      v80 = v90;
      CGAffineTransformMakeTranslation(&v79, v51, v50);
      v55 = &v80;
      v56 = &v79;
      goto LABEL_37;
    case 3:
      v29 = CGRectGetWidth(*(CGRect *)(v21 + 8)) / (double)*v19;
      v30 = CGRectGetHeight(*(CGRect *)(v21 + 8)) / (double)*v20;
      v31 = v29;
LABEL_34:
      CGAffineTransformMakeScale(&v73, v31, v30);
      break;
    case 4:
      v32 = CGRectGetWidth(*(CGRect *)(v21 + 8));
      v33 = v32 / CGRectGetHeight(*(CGRect *)(v21 + 8));
      v34 = *(_QWORD *)(v21 + 8);
      v35 = *(_QWORD *)(v21 + 16);
      v36 = *(_QWORD *)(v21 + 24);
      v37 = *(_QWORD *)(v21 + 32);
      if (v33 >= (double)*v19 / (double)*v20)
      {
        v52 = CGRectGetWidth(*(CGRect *)&v34);
        v53 = (double)*v20;
        v40 = v52 / (double)*v19;
        v42 = (v53 - CGRectGetHeight(*(CGRect *)(v21 + 8)) / v40) * 0.5;
        v41 = 0.0;
      }
      else
      {
        v38 = CGRectGetHeight(*(CGRect *)&v34);
        v39 = (double)*v19;
        v40 = v38 / (double)*v20;
        v41 = (v39 - CGRectGetWidth(*(CGRect *)(v21 + 8)) / v40) * 0.5;
        v42 = 0.0;
      }
      v54 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v90.a = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v90.c = v54;
      *(_OWORD *)&v90.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      *(_OWORD *)&t1.a = *(_OWORD *)&v90.a;
      *(_OWORD *)&t1.c = v54;
      *(_OWORD *)&t1.tx = *(_OWORD *)&v90.tx;
      CGAffineTransformMakeScale(&t2, v40, v40);
      CGAffineTransformConcat(&v90, &t1, &t2);
      v76 = v90;
      CGAffineTransformMakeTranslation(&v75, v41, v42);
      v55 = &v76;
      v56 = &v75;
LABEL_37:
      CGAffineTransformConcat(&v81, v55, v56);
      *(_OWORD *)&v90.tx = *(_OWORD *)&v81.tx;
      v73 = v81;
      break;
    default:
      goto LABEL_21;
  }
  v74 = 1;
  v58 = atomic_load((unint64_t *)cf + 10);
  if (!v58 || (v59 = (const __CFArray *)atomic_load((unint64_t *)cf + 10), !CFArrayGetCount(v59)))
  {
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v11 = qword_1EDB89E38;
    if (!os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_ERROR))
      goto LABEL_50;
    LODWORD(v90.a) = 136446466;
    *(_QWORD *)((char *)&v90.a + 4) = "MRCDecoderDecodeSampleWithSegmentationMask";
    WORD2(v90.b) = 2114;
    *(_QWORD *)((char *)&v90.b + 6) = cf;
    v12 = "%{public}s: Symbologies not specified: %{public}@";
    goto LABEL_48;
  }
  v60 = (const __CFArray *)atomic_load((unint64_t *)cf + 10);
  Count = CFArrayGetCount(v60);
  v62 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v63 = 0;
  *(_QWORD *)&v90.a = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  while (1)
  {
    v64 = (const __CFArray *)atomic_load((unint64_t *)cf + 10);
    if (v63 >= CFArrayGetCount(v64))
      break;
    v65 = (const __CFArray *)atomic_load((unint64_t *)cf + 10);
    ValueAtIndex = CFArrayGetValueAtIndex(v65, v63);
    if (!v74)
      sub_1D3D74BBC();
    *(_QWORD *)&v83.a = MRCRegionCreate((__int128 *)v84, (__int128 *)&v73, ValueAtIndex, 0.0, 1.0);
    v67 = (__CFArray *)atomic_load((unint64_t *)&v90);
    v68 = (const void *)atomic_load((unint64_t *)&v83);
    CFArrayAppendValue(v67, v68);
    sub_1D3DDD984((unint64_t *)&v83);
    ++v63;
  }
  v71 = (const __CFArray *)atomic_load((unint64_t *)&v90);
  Copy = CFArrayCreateCopy(v62, v71);
  sub_1D3D74C60((unint64_t *)&v90);
LABEL_51:
  atomic_load((unint64_t *)&Copy);
  v69 = MRCDecoderDecodeSampleWithRegions(a4);
  sub_1D3D74138((unint64_t *)&Copy);
  return v69;
}

void sub_1D3DDD928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3D74C60((unint64_t *)(v1 - 192));
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DDD984(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1D3DDD9BC(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[8];
  _BYTE v4[8];
  _BYTE v5[8];

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    if (*(uint64_t *)(a1 + 56) >= 0x40000)
    {
      v5[0] = 0;
      v5[4] = 0;
      if ((sub_1D3DDC428((unint64_t *)a1, CFSTR("DataMatrix"), (uint64_t)v5) & 1) != 0)
        return 1;
      v4[0] = 0;
      v4[4] = 0;
      if ((sub_1D3DDC428((unint64_t *)a1, CFSTR("Aztec"), (uint64_t)v4) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v3[0] = 0;
        v3[4] = 0;
        return sub_1D3DDC428((unint64_t *)a1, CFSTR("MicroQR"), (uint64_t)v3);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

os_log_t sub_1D3DDDA70()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "MachineReadableCode");
  qword_1EDB89E38 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDA9C()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "OpaqueRepresentation");
  qword_1EFE317F8 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDAC8()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "LiveDump");
  qword_1EFE31808 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDAF4()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "Context");
  qword_1EDB89F88 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDB20()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "SampleDecoding");
  qword_1EDB89FA8 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDB4C()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "PayloadDecoding");
  qword_1EFE31818 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDB78()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "SegmentationNeuralNetwork");
  qword_1EFE31828 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDBA4()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "MetalHybridBinarizer");
  qword_1EFE31838 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDBD0()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "Imaging");
  qword_1EFE31848 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDBFC()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "PyramidGeneration");
  qword_1EDB89F48 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDC28()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "Inference");
  qword_1EDB89F98 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDC54()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "ANMD");
  qword_1EDB89F78 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDC80()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "IIE");
  qword_1EFE31858 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDCAC()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "QRFinderPattern");
  qword_1EDB89E58 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDCD8()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "QRAlignmentPattern");
  qword_1EDB89E48 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDD04()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "MicroQR");
  qword_1EFE31868 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDD30()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "AppClipCode");
  qword_1EDB89398 = (uint64_t)result;
  return result;
}

os_log_t sub_1D3DDDD5C()
{
  os_log_t result;

  result = os_log_create("com.apple.Quagga", "iconv");
  qword_1EFE31878 = (uint64_t)result;
  return result;
}

uint64_t sub_1D3DDDD88()
{
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  result = os_variant_has_internal_content();
  if ((_DWORD)result)
  {
    keyExistsAndHasValidFormat = 0;
    result = CFPreferencesGetAppBooleanValue(CFSTR("_MRCLiveDumpEnabled"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat
      || (result = CFPreferencesGetAppBooleanValue(CFSTR("_MRCLiveDumpEnabled"), CFSTR("com.apple.Quagga"), &keyExistsAndHasValidFormat), keyExistsAndHasValidFormat))
    {
      byte_1EFE31888 = (_DWORD)result != 0;
    }
  }
  return result;
}

void sub_1D3DDDE08(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 5;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59)
      sub_1D3D6D4F8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 4 > v9)
      v9 = v10 >> 4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 59)
        sub_1D3D6D50C();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[32 * v8];
    *((_QWORD *)v13 + 3) = 0;
    if (a2)
    {
      *(_QWORD *)v13 = &off_1E95AFB70;
      *((_QWORD *)v13 + 1) = a2;
      *((_QWORD *)v13 + 3) = v13;
    }
    v14 = &v12[32 * v11];
    v6 = v13 + 32;
    if (v5 == v7)
    {
      *a1 = v13;
      a1[1] = v6;
      a1[2] = v14;
      if (!v5)
        goto LABEL_35;
      goto LABEL_34;
    }
    v15 = 0;
    v16 = v5;
    while (1)
    {
      v17 = &v13[v15];
      v18 = &v5[v15];
      v19 = *(char **)&v5[v15 - 8];
      if (v19)
      {
        if (v18 - 32 == v19)
        {
          *((_QWORD *)v17 - 1) = v17 - 32;
          (*(void (**)(_QWORD *))(*((_QWORD *)v18 - 4) + 24))((_QWORD *)v18 - 4);
          goto LABEL_25;
        }
        v20 = v16 - 8;
        *((_QWORD *)v17 - 1) = v19;
      }
      else
      {
        v20 = v17 - 8;
      }
      *(_QWORD *)v20 = 0;
LABEL_25:
      v16 -= 32;
      v15 -= 32;
      if (&v5[v15] == v7)
      {
        v5 = *a1;
        v21 = a1[1];
        *a1 = &v13[v15];
        a1[1] = v6;
        a1[2] = v14;
        if (v21 != v5)
        {
          while (1)
          {
            v22 = v21 - 32;
            v23 = (char *)*((_QWORD *)v21 - 1);
            if (v21 - 32 == v23)
              break;
            if (v23)
            {
              v24 = 5;
LABEL_31:
              (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
            }
            v21 = v22;
            if (v22 == v5)
              goto LABEL_33;
          }
          v23 = v21 - 32;
          v24 = 4;
          goto LABEL_31;
        }
LABEL_33:
        if (!v5)
          goto LABEL_35;
LABEL_34:
        operator delete(v5);
        goto LABEL_35;
      }
    }
  }
  *((_QWORD *)v5 + 3) = 0;
  if (a2)
  {
    *(_QWORD *)v5 = &off_1E95AFB70;
    *((_QWORD *)v5 + 1) = a2;
    *((_QWORD *)v5 + 3) = v5;
  }
  v6 = v5 + 32;
LABEL_35:
  a1[1] = v6;
}

void sub_1D3DDDFD0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void sub_1D3DDE06C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DDE080(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95AFB70;
  result[1] = v3;
  return result;
}

uint64_t sub_1D3DDE0B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95AFB70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1D3DDE0D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_1D3DDE0DC(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"PFN3mrc5CFRefIP9__CFErrorEERNS_7ContextEE"))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D3DDE114()
{
  return &unk_1E95AEAD0;
}

void sub_1D3DDE124(std::exception *a1)
{
  sub_1D3DDE164(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3DDE148(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_1D3DDE164(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E95AFA80;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

_QWORD *sub_1D3DDE1A0(_QWORD *a1, char *a2)
{
  *a1 = &off_1E95AFA80;
  sub_1D3D81D4C(a1 + 1, a2);
  return a1;
}

void sub_1D3DDE1D0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3DDE1E8(std::exception *a1)
{
  sub_1D3DDE164(a1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DDE20C(_QWORD *a1, char *a2)
{
  _QWORD *result;

  result = sub_1D3DDE1A0(a1, a2);
  *result = &off_1E95AF330;
  return result;
}

void sub_1D3DDE230()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DDE244(float *a1, float a2, float a3, float a4)
{
  float v8;
  float v9;

  if (vabds_f32(a3, (*(float (**)(float *))(*(_QWORD *)a1 + 24))(a1)) > a2
    || vabds_f32(a4, (*(float (**)(float *))(*(_QWORD *)a1 + 16))(a1)) > a2)
  {
    return 0;
  }
  v8 = a1[5];
  v9 = vabds_f32(a2, v8);
  return v9 <= 1.0 || v9 <= v8;
}

uint64_t sub_1D3DDE2DC()
{
  return 0;
}

void sub_1D3DDE2E4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x20uLL);
  sub_1D3DB9334(exception, "This luminance source does not support cropping.");
  __cxa_throw(exception, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
}

void sub_1D3DDE320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3DDE334()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x20uLL);
  sub_1D3DB9334(exception, "This luminance source does not support rotation.");
  __cxa_throw(exception, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
}

void sub_1D3DDE370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3DDE384(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = &off_1E95AFA80;
  v3 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1D3D7FCC0(v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  *a1 = &off_1E95AF388;
  return a1;
}

void sub_1D3DDE3E8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DDE3FC(_QWORD **a1, uint64_t a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int **v41;
  unsigned int **v42;
  unsigned int **v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int **v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int **v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t i;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int **j;
  uint64_t k;
  unsigned int **result;
  float v60;
  float v61;
  float v62;
  unsigned int *v63[4];
  unsigned int *v64;

  v64 = (unsigned int *)*MEMORY[0x1E0C80C00];
  v62 = (*(float (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
  v6 = (*(float (**)(_QWORD))(*(_QWORD *)**a1 + 24))(**a1);
  v7 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[1] + 16))((*a1)[1]);
  v8 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[1] + 24))((*a1)[1]);
  v9 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[2] + 16))((*a1)[2]);
  v10 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[2] + 24))((*a1)[2]);
  v11 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[3] + 16))((*a1)[3]);
  v12 = (*(float (**)(_QWORD))(*(_QWORD *)(*a1)[3] + 24))((*a1)[3]);
  v61 = v7;
  v13 = (float)((float)((float)(v62 + v7) + v9) + v11) * 0.25;
  v14 = (float)((float)((float)(v6 + v8) + v10) + v12) * 0.25;
  if (v9 <= v13)
    v15 = a3;
  else
    v15 = -a3;
  v16 = v9 + v15;
  if (v10 <= v14)
    v17 = a3;
  else
    v17 = -a3;
  v18 = v10 + v17;
  if (v11 <= v13)
    v19 = a3;
  else
    v19 = -a3;
  v60 = v11 + v19;
  if (v12 <= v14)
    v20 = a3;
  else
    v20 = -a3;
  v21 = v12 + v20;
  v22 = operator new();
  if (v6 <= v14)
    v23 = a3;
  else
    v23 = -a3;
  v24 = v6 + v23;
  if (v62 <= v13)
    v25 = a3;
  else
    v25 = -a3;
  *(_DWORD *)(v22 + 8) = 0;
  v26 = (unsigned int *)(v22 + 8);
  *(_QWORD *)v22 = &off_1E95AF250;
  *(float *)(v22 + 12) = v62 + v25;
  *(float *)(v22 + 16) = v24;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  v63[0] = (unsigned int *)v22;
  v28 = operator new();
  if (v8 <= v14)
    v29 = a3;
  else
    v29 = -a3;
  v30 = v8 + v29;
  if (v61 <= v13)
    v31 = a3;
  else
    v31 = -a3;
  *(_DWORD *)(v28 + 8) = 0;
  v32 = (unsigned int *)(v28 + 8);
  *(_QWORD *)v28 = &off_1E95AF250;
  *(float *)(v28 + 12) = v61 + v31;
  *(float *)(v28 + 16) = v30;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  v63[1] = (unsigned int *)v28;
  v34 = operator new();
  *(_DWORD *)(v34 + 8) = 0;
  v35 = (unsigned int *)(v34 + 8);
  *(_QWORD *)v34 = &off_1E95AF250;
  *(float *)(v34 + 12) = v16;
  *(float *)(v34 + 16) = v18;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  v63[2] = (unsigned int *)v34;
  v37 = operator new();
  *(_DWORD *)(v37 + 8) = 0;
  v38 = (unsigned int *)(v37 + 8);
  *(_QWORD *)v37 = &off_1E95AF250;
  *(float *)(v37 + 12) = v60;
  *(float *)(v37 + 16) = v21;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v63[3] = (unsigned int *)v37;
  v40 = *(_QWORD *)(a2 + 16);
  v41 = *(unsigned int ***)a2;
  if ((unint64_t)(v40 - *(_QWORD *)a2) < 0x20)
  {
    if (v41)
    {
      v42 = *(unsigned int ***)(a2 + 8);
      v43 = *(unsigned int ***)a2;
      if (v42 != v41)
      {
        do
          v42 = sub_1D3D6D834(v42 - 1);
        while (v42 != v41);
        v43 = *(unsigned int ***)a2;
      }
      *(_QWORD *)(a2 + 8) = v41;
      operator delete(v43);
      v40 = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    v44 = v40 >> 2;
    if ((unint64_t)(v40 >> 2) <= 4)
      v44 = 4;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    sub_1D3D6D864((_QWORD *)a2, v45);
    v46 = sub_1D3D8CFF8(v63, &v64, *(unsigned int ***)(a2 + 8));
LABEL_56:
    *(_QWORD *)(a2 + 8) = v46;
    goto LABEL_68;
  }
  v47 = *(unsigned int ***)(a2 + 8);
  if ((unint64_t)((char *)v47 - (char *)v41) < 0x20)
  {
    v48 = (unsigned int **)((char *)v63 + (char *)v47 - (char *)v41);
    if (v47 != v41)
    {
      v49 = v63;
      do
      {
        v50 = *v49;
        if (*v49)
        {
          v51 = v50 + 2;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        if (*v41)
          sub_1D3D6D13C(*v41);
        *v41++ = v50;
        ++v49;
      }
      while (v49 != v48);
      v41 = *(unsigned int ***)(a2 + 8);
    }
    v46 = sub_1D3D8CFF8(v48, &v64, v41);
    goto LABEL_56;
  }
  for (i = 0; i != 4; ++i)
  {
    v54 = v63[i];
    if (v54)
    {
      v55 = v54 + 2;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    if (*v41)
      sub_1D3D6D13C(*v41);
    *v41++ = v54;
  }
  for (j = *(unsigned int ***)(a2 + 8); j != v41; j = sub_1D3D6D834(j - 1))
    ;
  *(_QWORD *)(a2 + 8) = v41;
LABEL_68:
  for (k = 3; k != -1; --k)
    result = sub_1D3D6D834(&v63[k]);
  return result;
}

void sub_1D3DDE87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 8) = v13;
  for (i = 24; i != -8; i -= 8)
    sub_1D3D6D834((unsigned int **)(&a12 + i));
  _Unwind_Resume(a1);
}

BOOL sub_1D3DDE8D8(unsigned int **a1, unsigned int **a2, int a3, unsigned int **a4, _DWORD *a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  BOOL v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  int v48;
  int v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  float v71;
  float v72;
  BOOL v73;
  int *v74;
  int *v75;
  float v76;
  _BOOL8 v77;
  char *v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  BOOL v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  _BOOL4 v100;
  int v101;
  int v102;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int v106;
  _BOOL4 v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  float v111;
  float v112;
  _BOOL4 v113;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  _BOOL4 v118;
  float v119;
  float v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  _BOOL4 v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int *v132;
  unsigned int v133;
  _BOOL4 v134;
  int v135;
  unsigned int *v136;
  unsigned int v137;
  _BOOL4 v138;
  int v139;
  int *v140;
  float *v141;
  int v142;
  int *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  int *v157;
  int *v158;
  uint64_t v159;
  BOOL v160;
  unsigned int **v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int v170;
  uint64_t (**v171)();
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  uint64_t v177;
  int32x2_t *v178;
  unint64_t v179;
  float32x2_t v180;
  int *v181;
  unint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  int32x2_t *v186;
  int32x2_t v187;
  float32x2_t v188;
  float v189;
  int32x2_t *v190;
  int32x2_t v191;
  float32x2_t v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  int *v201;
  int v202;
  int v203;
  float v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int *v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int *v222;
  int v223;
  int v224;
  _BOOL4 v225;
  float v226;
  float v227;
  float v228;
  float v229;
  unint64_t v230;
  float v231;
  float v232;
  uint64_t v233;
  int v234;
  unsigned int **v235;
  _DWORD *v236;
  int *v237;
  uint64_t v238;
  float v239;
  int v240;
  float v241;
  int v242;
  unsigned int *v243;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int *v246;
  unsigned int *v247;
  unsigned int *v248;
  unsigned int *v249;
  float v250;
  unsigned int *v251;
  unsigned int *v252;
  unsigned int *v253;
  unsigned int *v254;
  float v255;
  float v256;
  unsigned int *v257;
  unsigned int *v258;
  unsigned int *v259;
  unsigned int *v260;
  unsigned int *v261;
  unsigned int *v262;
  unsigned int *v263;
  unsigned int *v264;
  unsigned int *v265[2];

  v10 = *a2;
  if (*a2)
  {
    v11 = v10 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v264 = v10;
  v13 = a2[1];
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v263 = v13;
  if (v10)
  {
    v16 = v10 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v262 = v10;
  if (v13)
  {
    v18 = v13 + 2;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v261 = v13;
  v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
  v21 = (*(float (**)(unsigned int *))(*(_QWORD *)v262 + 24))(v262);
  v22 = (*(float (**)(unsigned int *))(*(_QWORD *)v261 + 16))(v261);
  v23 = (*(float (**)(unsigned int *))(*(_QWORD *)v261 + 24))(v261);
  sub_1D3D6D834(&v261);
  sub_1D3D6D834(&v262);
  v24 = *a1;
  if (*a1)
  {
    v25 = v24 + 2;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v260 = v24;
  v27 = v264;
  if (v264)
  {
    v28 = v264 + 2;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v259 = v27;
  if (!sub_1D3DDF9B8(v24, &v259))
  {
    sub_1D3D6D834(&v259);
    sub_1D3D6D10C(&v260);
LABEL_61:
    v77 = 0;
    goto LABEL_62;
  }
  v30 = *a1;
  if (*a1)
  {
    v31 = v30 + 2;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v258 = v30;
  v33 = v263;
  if (v263)
  {
    v34 = v263 + 2;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v257 = v33;
  v36 = sub_1D3DDF9B8(v30, &v257);
  v37 = sqrtf((float)((float)(v21 - v23) * (float)(v21 - v23)) + (float)((float)(v20 - v22) * (float)(v20 - v22)));
  v38 = v37 > 1.0 && v36;
  sub_1D3D6D834(&v257);
  sub_1D3D6D10C(&v258);
  sub_1D3D6D834(&v259);
  sub_1D3D6D10C(&v260);
  if (!v38)
    goto LABEL_61;
  v39 = (*(float (**)(unsigned int *))(*(_QWORD *)v264 + 16))(v264);
  v40 = (*(float (**)(unsigned int *))(*(_QWORD *)v264 + 24))(v264);
  v41 = (*(float (**)(unsigned int *))(*(_QWORD *)v263 + 16))(v263);
  v42 = (*(float (**)(unsigned int *))(*(_QWORD *)v263 + 24))(v263);
  v43 = (*(float (**)(unsigned int *))(*(_QWORD *)*a2 + 16))(*a2);
  v44 = (*(float (**)(unsigned int *))(*(_QWORD *)*a2 + 24))(*a2);
  v45 = (*(float (**)(unsigned int *))(*(_QWORD *)a2[1] + 16))(a2[1]);
  v46 = (*(float (**)(unsigned int *))(*(_QWORD *)a2[1] + 24))(a2[1]);
  v47 = (int)v39;
  v48 = (int)v40;
  v49 = (int)v41;
  v50 = (int)v42;
  v51 = v46 - v44;
  v52 = sqrtf((float)(v51 * v51) + (float)((float)(v45 - v43) * (float)(v45 - v43)));
  v53 = (float)(v45 - v43) / v52;
  v54 = v51 / v52;
  v55 = -(float)(v51 / v52);
  if (a3)
    v56 = v55;
  else
    v56 = v54;
  if (a3)
    v57 = v53;
  else
    v57 = -v53;
  v241 = v57;
  v58 = (int)(float)((float)(v37 * 0.125) + 0.5);
  if (v58 >= 4)
    v59 = 4;
  else
    v59 = (int)(float)((float)(v37 * 0.125) + 0.5);
  if (v49 >= v47)
    v60 = (int)v39;
  else
    v60 = v49;
  v61 = (*a1)[14];
  v62 = -v61;
  v63 = (*a1)[8];
  v64 = v61 - 1;
  v65 = (*a1)[4];
  if (v47 <= v49)
    v47 = v49;
  v66 = v47 + v59;
  if (v66 >= (int)(v65 & v64 | v63 & v62))
    v67 = v65 & v64 | v63 & v62;
  else
    v67 = v66;
  if (v50 >= v48)
    v68 = (int)v40;
  else
    v68 = (int)v42;
  if (v48 <= v50)
    v48 = (int)v42;
  v240 = v59;
  v69 = v48 + v59;
  if (v69 >= (int)(v63 & v64 | v65 & v62))
    v70 = v63 & v64 | v65 & v62;
  else
    v70 = v69;
  v71 = (*(float (**)(unsigned int *))(*(_QWORD *)v264 + 16))(v264);
  v256 = v71;
  v255 = (*(float (**)(unsigned int *))(*(_QWORD *)v264 + 24))(v264);
  v72 = (float)v67;
  v73 = v71 >= (float)((v60 - v240) & ~((v60 - v240) >> 31)) && v71 < v72;
  v239 = v37 * 0.25;
  v74 = 0;
  v75 = 0;
  if (!v73)
  {
    v76 = v56;
    goto LABEL_185;
  }
  v79 = 0;
  v242 = (int)(float)((float)(v37 * 0.25) + 0.5);
  v80 = (float)((v68 - v240) & ~((v68 - v240) >> 31));
  v81 = (float)v70;
  v231 = fabsf(v53);
  v232 = fabsf(v54);
  v82 = -1;
  if (v241 > 0.0)
    v83 = 1;
  else
    v83 = -1;
  v76 = v56;
  v225 = v56 > 0.0;
  if (v56 > 0.0)
    v82 = 1;
  v238 = v82;
  v228 = v72;
  v229 = (float)((v60 - v240) & ~((v60 - v240) >> 31));
  v226 = (float)v70;
  v227 = v80;
  while (2)
  {
    v84 = v255;
    if (v255 < v80 || v255 >= v81)
      goto LABEL_185;
    v86 = *a1;
    if (*a1)
    {
      v87 = v86 + 2;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
      do
        v89 = __ldxr(v87);
      while (__stxr(v89 + 1, v87));
    }
    v254 = v86;
    v265[0] = v86;
    v90 = sub_1D3DDFCF8(v86, v71, v84);
    sub_1D3D6D10C(v265);
    if (!v90)
      goto LABEL_181;
    v230 = (unint64_t)v79;
    v237 = v75;
    v91 = (int)v71;
    v92 = (int)v84;
    v93 = sub_1D3D6D4A0(v254, (int)v71, (int)v84);
    if (v242 < 1)
    {
      v74 = 0;
      v75 = 0;
LABEL_181:
      v161 = &v254;
      goto LABEL_184;
    }
    v94 = v93;
    v233 = v83;
    v234 = v58;
    v235 = a4;
    v236 = a5;
    v95 = 0;
    v96 = 1;
    while (1)
    {
      v97 = v254;
      if (v254)
      {
        v98 = v254 + 2;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      v71 = v53 + v71;
      v84 = v54 + v84;
      v247 = v97;
      v100 = sub_1D3DDFCF8(v97, v71, v84);
      sub_1D3D6D10C(&v247);
      if (!v100)
      {
LABEL_180:
        a4 = v235;
        a5 = v236;
        v75 = v237;
        goto LABEL_181;
      }
      v101 = (int)v71;
      v102 = (int)v84;
      if ((int)v71 == v91 && v92 == v102)
      {
        v104 = v254;
        if (v254)
        {
          v105 = v254 + 2;
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v71 = v53 + v71;
        v84 = v54 + v84;
        v249 = v104;
        v107 = sub_1D3DDFCF8(v104, v71, v84);
        sub_1D3D6D10C(&v249);
        if (!v107)
          goto LABEL_180;
        v101 = (int)v71;
        v102 = (int)v84;
      }
      v108 = v254;
      if (v94 == sub_1D3D6D4A0(v254, v101, v102))
        break;
      if (v95)
      {
        if (v108)
        {
          v109 = v108 + 2;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        v111 = v71 - v76;
        v112 = v84 - v241;
        v247 = v108;
        v113 = sub_1D3DDFCF8(v108, v71 - v76, v84 - v241);
        sub_1D3D6D10C(&v247);
        if (v113)
        {
          v101 = (int)v111;
          v102 = (int)v112;
          if ((int)v111 == v91 && v92 == v102)
          {
            v115 = v254;
            if (v254)
            {
              v116 = v254 + 2;
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
            v249 = v115;
            v118 = sub_1D3DDFCF8(v115, v111 - v76, v112 - v241);
            sub_1D3D6D10C(&v249);
            if (!v118)
              goto LABEL_112;
            v101 = (int)(float)(v111 - v76);
            v102 = (int)(float)(v112 - v241);
          }
          if (v94 == sub_1D3D6D4A0(v254, v101, v102))
            break;
        }
      }
LABEL_112:
      v96 = ++v95 < v242;
      if (v95 == v242)
      {
        v161 = &v254;
        goto LABEL_183;
      }
    }
    v119 = (float)v101 + 0.5;
    v120 = (float)v102 + 0.5;
    v255 = v120;
    v256 = v119;
    sub_1D3D6D10C(&v254);
    if (!v96)
    {
      a4 = v235;
      a5 = v236;
      v75 = v237;
      goto LABEL_185;
    }
    v121 = *a1;
    if (*a1)
    {
      v122 = v121 + 2;
      v83 = v233;
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
      v124 = v240;
      do
        v125 = __ldxr(v122);
      while (__stxr(v125 + 1, v122));
    }
    else
    {
      v124 = v240;
      v83 = v233;
    }
    v253 = v121;
    v247 = v121;
    v126 = sub_1D3DDFCF8(v121, v119, v120);
    sub_1D3D6D10C(&v247);
    if (!v126)
      goto LABEL_182;
    v127 = v253;
    v128 = (int)v119;
    v129 = (int)v120;
    v130 = sub_1D3D6D4A0(v253, v128, v129);
    if (v232 <= v231)
    {
      v224 = (int)v119;
      if (v234 < 1)
        goto LABEL_182;
      v135 = 0;
      while (1)
      {
        if (v127)
        {
          v136 = v127 + 2;
          do
            v137 = __ldxr(v136);
          while (__stxr(v137 + 1, v136));
        }
        v265[0] = v127;
        v138 = sub_1D3DDFCF8(v127, (float)v224, (float)(v129 + v83));
        sub_1D3D6D10C(v265);
        if (!v138)
          goto LABEL_182;
        v127 = v253;
        if (v130 != sub_1D3D6D4A0(v253, v128, v129 + v83))
          break;
        ++v135;
        v129 += v83;
        if (v135 == v124)
          goto LABEL_182;
      }
      v142 = v129 + (v241 > 0.0);
      a5 = v236;
      v143 = v237;
      v79 = (char *)v230;
      if ((unint64_t)v237 >= v230)
      {
        v152 = ((char *)v237 - (char *)v74) >> 3;
        v153 = v152 + 1;
        if ((unint64_t)(v152 + 1) >> 61)
          goto LABEL_258;
        if ((uint64_t)(v230 - (_QWORD)v74) >> 2 > v153)
          v153 = (uint64_t)(v230 - (_QWORD)v74) >> 2;
        if (v230 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
          v154 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        v155 = (char *)sub_1D3D6D8A0(v154);
        v157 = (int *)&v155[8 * v152];
        *v157 = v224;
        v157[1] = v142;
        v58 = v234;
        v158 = v157;
        if (v237 == v74)
        {
          v83 = v233;
        }
        else
        {
          v83 = v233;
          do
          {
            v159 = *((_QWORD *)v143 - 1);
            v143 -= 2;
            *((_QWORD *)v158 - 1) = v159;
            v158 -= 2;
          }
          while (v143 != v74);
        }
        v79 = &v155[8 * v156];
        v75 = v157 + 2;
        if (v74)
          operator delete(v74);
        v141 = &v255;
        v74 = v158;
        LODWORD(v128) = v129;
        a4 = v235;
      }
      else
      {
        *v237 = v224;
        v237[1] = v142;
        v75 = v237 + 2;
        v141 = &v255;
        LODWORD(v128) = v129;
LABEL_146:
        a4 = v235;
        v58 = v234;
      }
LABEL_175:
      *v141 = (float)(int)v128 + 0.5;
      sub_1D3D6D10C(&v253);
      v71 = v256;
      v160 = v256 >= v229 && v256 < v228;
      v81 = v226;
      v80 = v227;
      if (!v160)
        goto LABEL_185;
      continue;
    }
    break;
  }
  v223 = (int)v120;
  if (v234 >= 1)
  {
    v131 = 0;
    while (1)
    {
      if (v127)
      {
        v132 = v127 + 2;
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
      }
      v249 = v127;
      v134 = sub_1D3DDFCF8(v127, (float)(v128 + v238), (float)v223);
      sub_1D3D6D10C(&v249);
      if (!v134)
        goto LABEL_182;
      v127 = v253;
      if (v130 != sub_1D3D6D4A0(v253, v128 + v238, v129))
        break;
      ++v131;
      v128 += v238;
      if (v131 == v124)
        goto LABEL_182;
    }
    v139 = v128 + v225;
    a5 = v236;
    v140 = v237;
    v79 = (char *)v230;
    if ((unint64_t)v237 < v230)
    {
      *v237 = v139;
      v237[1] = v223;
      v75 = v237 + 2;
      v141 = &v256;
      goto LABEL_146;
    }
    v144 = ((char *)v237 - (char *)v74) >> 3;
    v145 = v144 + 1;
    if (!((unint64_t)(v144 + 1) >> 61))
    {
      if ((uint64_t)(v230 - (_QWORD)v74) >> 2 > v145)
        v145 = (uint64_t)(v230 - (_QWORD)v74) >> 2;
      if (v230 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v146 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v146 = v145;
      v147 = (char *)sub_1D3D6D8A0(v146);
      v149 = &v147[8 * v144];
      *(_DWORD *)v149 = v139;
      *((_DWORD *)v149 + 1) = v223;
      v58 = v234;
      v150 = v149;
      if (v237 == v74)
      {
        a4 = v235;
        v83 = v233;
      }
      else
      {
        a4 = v235;
        v83 = v233;
        do
        {
          v151 = *((_QWORD *)v140 - 1);
          v140 -= 2;
          *((_QWORD *)v150 - 1) = v151;
          v150 -= 8;
        }
        while (v140 != v74);
      }
      v79 = &v147[8 * v148];
      v75 = (int *)(v149 + 8);
      if (v74)
        operator delete(v74);
      v141 = &v256;
      v74 = (int *)v150;
      goto LABEL_175;
    }
LABEL_258:
    sub_1D3D6D4F8();
  }
LABEL_182:
  v161 = &v253;
LABEL_183:
  a4 = v235;
  a5 = v236;
  v75 = v237;
LABEL_184:
  sub_1D3D6D10C(v161);
LABEL_185:
  if ((unint64_t)((char *)v75 - (char *)v74) >= 0x20)
  {
    if ((unint64_t)((char *)v75 - (char *)v74) <= 0x50)
      v162 = 0;
    else
      v162 = -1;
    v163 = operator new();
    v164 = &v75[2 * v162];
    *(_DWORD *)(v163 + 8) = 0;
    v165 = (unsigned int *)(v163 + 8);
    *(_QWORD *)v163 = &off_1E95AF250;
    *(float32x2_t *)(v163 + 12) = vcvt_f32_s32(*(int32x2_t *)(v164 - 2));
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
    v265[0] = (unsigned int *)v163;
    do
      v167 = __ldxr(v165);
    while (__stxr(v167 + 1, v165));
    v252 = (unsigned int *)v163;
    v168 = v263;
    if (v263)
    {
      v169 = v263 + 2;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
      v171 = *(uint64_t (***)())v163;
    }
    else
    {
      v171 = &off_1E95AF250;
    }
    v251 = v168;
    v172 = ((float (*)(void))v171[2])();
    v173 = (*(float (**)(unsigned int *))(*(_QWORD *)v252 + 24))(v252);
    v174 = (*(float (**)(unsigned int *))(*(_QWORD *)v251 + 16))(v251);
    v175 = (*(float (**)(unsigned int *))(*(_QWORD *)v251 + 24))(v251);
    v176 = sqrtf((float)((float)(v173 - v175) * (float)(v173 - v175)) + (float)((float)(v172 - v174)
                                                                              * (float)(v172 - v174)));
    sub_1D3D6D834(&v251);
    sub_1D3D6D834(&v252);
    if (v176 > v239 || (v177 = (char *)v164 - (char *)v74, v164 == v74))
    {
      v77 = 0;
      goto LABEL_214;
    }
    if (v177 < 0)
      sub_1D3D6D4F8();
    v178 = (int32x2_t *)sub_1D3D6D8A0(v177 >> 3);
    v179 = 0;
    do
    {
      v180 = *(float32x2_t *)&v74[v179 / 4];
      v178[v179 / 8] = (int32x2_t)v180;
      v179 += 8;
    }
    while (&v74[v179 / 4] != v164);
    v181 = (int *)&v178[v179 / 8];
    v182 = (unint64_t)((char *)v181 - (char *)v178) >> 3;
    if ((int)v182 < 3)
      goto LABEL_222;
    v180.f32[0] = (float)(int)v182;
    if (v178 == (int32x2_t *)v181)
    {
      v193 = 0.0;
      v180.f32[0] = 0.0 / v180.f32[0];
      v188.i32[0] = 0;
      v194 = v180.f32[0];
    }
    else
    {
      v183 = 8 * (((char *)v181 - (char *)v178) >> 3);
      v184 = 0;
      v185 = v183;
      v186 = v178;
      do
      {
        v187 = *v186++;
        v184 = vadd_f32(v184, vcvt_f32_s32(v187));
        v185 -= 8;
      }
      while (v185);
      v180 = vdiv_f32(v184, (float32x2_t)vdup_lane_s32((int32x2_t)v180, 0));
      v188 = 0;
      v189 = 0.0;
      v190 = v178;
      do
      {
        v191 = *v190++;
        v192 = vsub_f32(vcvt_f32_s32(v191), v180);
        v189 = vmlas_n_f32(v189, v192.f32[0], v192.f32[0]);
        v188 = vmla_lane_f32(v188, v192, v192, 1);
        v183 -= 8;
      }
      while (v183);
      v193 = v188.f32[1];
      v194 = v180.f32[1];
      if (v188.f32[1] < v189)
      {
        v195 = sqrtf(vmul_f32(v188, v188).f32[0] + (float)(v189 * v189));
        v196 = v188.f32[0] / v195;
        goto LABEL_218;
      }
    }
    v195 = sqrtf((float)(v188.f32[0] * v188.f32[0]) + (float)(v193 * v193));
    v196 = v193 / v195;
    v189 = v188.f32[0];
LABEL_218:
    v197 = (float)-v189 / v195;
    if ((float)((float)(v241 * v197) + (float)(v196 * v76)) >= 0.0)
    {
      v198 = v196;
    }
    else
    {
      v197 = -v197;
      v198 = -v196;
    }
    v199 = (float)(v194 * v197) + (float)(v198 * v180.f32[0]);
    v249 = (unsigned int *)__PAIR64__(LODWORD(v197), LODWORD(v198));
    v250 = v199;
    if ((float)((float)(v241 * v197) + (float)(v198 * v76)) >= 0.87)
    {
      v200 = 0.0;
      if (v178 != (int32x2_t *)v181)
      {
        v201 = (int *)v178;
        do
        {
          v202 = *v201;
          v203 = v201[1];
          v201 += 2;
          v204 = vabds_f32((float)(v197 * (float)v203) + (float)(v198 * (float)v202), v199);
          if (v204 > v200)
            v200 = v204;
        }
        while (v201 != v181);
      }
      v77 = v200 < (float)v240;
      if (v178)
      {
LABEL_223:
        operator delete(v178);
        if (!v77)
          goto LABEL_214;
LABEL_232:
        v205 = v264;
        if (v264)
        {
          v206 = v264 + 2;
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
        }
        v245 = v205;
        sub_1D3DDFDC8((uint64_t *)&v246, (float *)&v249, &v245);
        v208 = v263;
        if (v263)
        {
          v209 = v263 + 2;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
        }
        v243 = v208;
        sub_1D3DDFDC8((uint64_t *)&v244, (float *)&v249, &v243);
        v247 = 0;
        v211 = v246;
        if (v246)
        {
          v212 = v246 + 2;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
        }
        v247 = v211;
        v248 = 0;
        v214 = v244;
        if (v244)
        {
          v215 = v244 + 2;
          do
            v216 = __ldxr(v215);
          while (__stxr(v216 + 1, v215));
        }
        v248 = v214;
        if (v211)
        {
          v217 = v211 + 2;
          do
            v218 = __ldxr(v217);
          while (__stxr(v218 + 1, v217));
        }
        if (*a4)
          sub_1D3D6D13C(*a4);
        *a4 = v211;
        v219 = v248;
        if (v248)
        {
          v220 = v248 + 2;
          do
            v221 = __ldxr(v220);
          while (__stxr(v221 + 1, v220));
        }
        v222 = a4[1];
        if (v222)
          sub_1D3D6D13C(v222);
        a4[1] = v219;
        sub_1D3D6D834(&v248);
        sub_1D3D6D834(&v247);
        sub_1D3D6D834(&v244);
        sub_1D3D6D834(&v243);
        sub_1D3D6D834(&v246);
        sub_1D3D6D834(&v245);
        *a5 = (unint64_t)v177 >> 3;
LABEL_214:
        sub_1D3D6D834(v265);
        if (v74)
          goto LABEL_215;
        goto LABEL_62;
      }
LABEL_231:
      if (!v77)
        goto LABEL_214;
      goto LABEL_232;
    }
LABEL_222:
    v77 = 0;
    if (v178)
      goto LABEL_223;
    goto LABEL_231;
  }
  v77 = 0;
  if (!v74)
    goto LABEL_62;
LABEL_215:
  operator delete(v74);
LABEL_62:
  sub_1D3D6D834(&v263);
  sub_1D3D6D834(&v264);
  return v77;
}

void sub_1D3DDF7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34)
{
  void *v34;
  uint64_t v35;

  sub_1D3D6D10C(&a34);
  if (v34)
    operator delete(v34);
  sub_1D3D6D834((unsigned int **)(v35 - 176));
  sub_1D3D6D834((unsigned int **)(v35 - 168));
  _Unwind_Resume(a1);
}

void sub_1D3DDF8B0(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;
  unsigned int **v6;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        sub_1D3D6D834(v4 - 1);
        sub_1D3D6D834(v6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float sub_1D3DDF92C(_QWORD *a1)
{
  float v2;

  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v2 = (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  (*(void (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  return v2 - (*(float (**)(_QWORD))(*(_QWORD *)a1[1] + 24))(a1[1]);
}

BOOL sub_1D3DDF9B8(unsigned int *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unsigned int *v10;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (a1)
  {
    v4 = a1 + 2;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v2 = *a2;
  }
  v10 = a1;
  v6 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v7 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v8 = sub_1D3DDFCF8(v10, v6, v7);
  sub_1D3D6D10C(&v10);
  return v8;
}

void sub_1D3DDFA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D6D10C((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DDFA6C(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int *v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;

  v5 = a1;
  v6 = *a1;
  if (v6)
  {
    v7 = v6 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v47 = v6;
  v9 = *a2;
  if (*a2)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v46 = v9;
  if (!sub_1D3DDF9B8(v6, &v46))
  {
    sub_1D3D6D834(&v46);
    sub_1D3D6D10C(&v47);
    return 0xFFFFFFFFLL;
  }
  v12 = *v5;
  if (*v5)
  {
    v13 = v12 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v45 = v12;
  v15 = *a3;
  if (*a3)
  {
    v16 = v15 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v44 = v15;
  v18 = sub_1D3DDF9B8(v12, &v44);
  sub_1D3D6D834(&v44);
  sub_1D3D6D10C(&v45);
  sub_1D3D6D834(&v46);
  sub_1D3D6D10C(&v47);
  if (!v18)
    return 0xFFFFFFFFLL;
  v19 = (int)(*(float (**)(unsigned int *))(*(_QWORD *)*a2 + 16))(*a2);
  v20 = (int)(*(float (**)(unsigned int *))(*(_QWORD *)*a2 + 24))(*a2);
  v21 = (int)(*(float (**)(unsigned int *))(*(_QWORD *)*a3 + 16))(*a3);
  v22 = (int)(*(float (**)(unsigned int *))(*(_QWORD *)*a3 + 24))(*a3);
  if (v22 - v20 >= 0)
    v23 = v22 - v20;
  else
    v23 = v20 - v22;
  if (v21 - v19 >= 0)
    v24 = v21 - v19;
  else
    v24 = v19 - v21;
  if (v23 > v24)
    v25 = v24;
  else
    v25 = v23;
  if (v23 > v24)
    v26 = v23;
  else
    v26 = v24;
  if (v23 > v24)
    v27 = v20;
  else
    v27 = v19;
  if (v23 > v24)
    v28 = v19;
  else
    v28 = v20;
  if (v23 > v24)
    v29 = v22;
  else
    v29 = v21;
  if (v23 > v24)
    v22 = v21;
  v42 = v22;
  v43 = v25;
  if (v28 < v22)
    v30 = 1;
  else
    v30 = -1;
  v41 = v30;
  if (v27 < v29)
    v31 = 1;
  else
    v31 = -1;
  if (v27 == v29)
    return 0;
  v40 = v26;
  v33 = *v5;
  v34 = sub_1D3D6D4A0(*v5, v19, v20);
  LODWORD(v5) = 0;
  v35 = (signed int)-v40 >> 1;
  do
  {
    if (v23 <= v24)
      v36 = v27;
    else
      v36 = v28;
    v37 = v36;
    if (v23 <= v24)
      v38 = v28;
    else
      v38 = v27;
    v39 = sub_1D3D6D4A0(v33, v37, v38);
    v5 = (unsigned int **)(v5 + ((v34 ^ v39) & 1));
    if (((v34 ^ v39) & 1) != 0)
      v34 = v39;
    v35 += v43;
    if (v35 >= 1)
    {
      if (v28 == v42)
        return (uint64_t)v5;
      v28 += v41;
      v35 -= v40;
    }
    v27 += v31;
  }
  while (v29 != v27);
  return (uint64_t)v5;
}

void sub_1D3DDFCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  va_list va;
  unsigned int *v6;
  va_list va1;
  unsigned int *v8;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, unsigned int *);
  va_copy(va2, va1);
  v6 = va_arg(va2, unsigned int *);
  va_copy(va3, va2);
  v8 = va_arg(va3, unsigned int *);
  sub_1D3D6D834((unsigned int **)va);
  sub_1D3D6D10C((unsigned int **)va1);
  sub_1D3D6D834((unsigned int **)va2);
  sub_1D3D6D10C((unsigned int **)va3);
  _Unwind_Resume(a1);
}

BOOL sub_1D3DDFCF8(_QWORD *a1, float a2, float a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (a2 < 0.0)
    return 0;
  result = 0;
  if (a3 >= 0.0)
  {
    v5 = a1[7];
    v6 = -v5;
    v7 = a1[2];
    v8 = v5 - 1;
    v9 = a1[4];
    if ((float)(v7 & v8 | v9 & v6) > a2)
      return (float)(v9 & v8 | v7 & v6) > a3;
  }
  return result;
}

uint64_t sub_1D3DDFD64(uint64_t a1)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int **v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(unsigned int ****)(a1 + 16);
    v3 = **(unsigned int ****)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 2;
        sub_1D3D6D834(v2 - 1);
        sub_1D3D6D834(v4);
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t sub_1D3DDFDC8(uint64_t *a1, float *a2, _QWORD *a3)
{
  float v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;

  v4 = *a2;
  v7 = a2[1];
  v6 = a2[2];
  v8 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v9 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v10 = (float)((float)(v7 * v9) + (float)(v4 * v8)) - v6;
  v11 = v8 - (float)(v10 * v4);
  v12 = v9 - (float)(v10 * v7);
  result = operator new();
  *(_DWORD *)(result + 8) = 0;
  v14 = (unsigned int *)(result + 8);
  *(_QWORD *)result = &off_1E95AF250;
  *(float *)(result + 12) = v11;
  *(float *)(result + 16) = v12;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  *a1 = result;
  return result;
}

uint64_t sub_1D3DDFE8C(uint64_t a1, int a2, _DWORD *a3, _BYTE *a4, _DWORD *a5, int *a6, _DWORD *a7)
{
  int v13;
  float v14;
  int v15;
  uint64_t i;
  unsigned int *v19;
  uint64_t (**v20)();
  int v21;
  unsigned int *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
    v13 = 5;
  else
    v13 = 7;
  if (a2)
    v14 = -5.0;
  else
    v14 = -7.0;
  sub_1D3DE2A40(&v27, a1, (2 * v13) | 1, v14, v14, 1.0, 0.0);
  sub_1D3DE2A40(&v28, a1, (2 * v13) | 1, (float)v13, v14, 0.0, 1.0);
  sub_1D3DE2A40(&v29, a1, (2 * v13) | 1, (float)v13, (float)v13, -1.0, 0.0);
  sub_1D3DE2A40(&v30, a1, (2 * v13) | 1, v14, (float)v13, 0.0, -1.0);
  v21 = 0;
  v19 = 0;
  v20 = &off_1E95AF650;
  v25 = 0;
  v24 = 0;
  v26 = 0;
  v22 = 0;
  sub_1D3D6D10C(&v19);
  v23 = a2;
  LODWORD(v25) = v13;
  sub_1D3D8E680((uint64_t)&v20, &v27);
  *a4 = v26;
  *a5 = HIDWORD(v25);
  v15 = HIDWORD(v24);
  *a6 = v24;
  *a7 = v15;
  *a3 = sub_1D3D8CB94(a2, *a6);
  v20 = &off_1E95AF650;
  sub_1D3D6D10C(&v22);
  for (i = 24; i != -8; i -= 8)
    sub_1D3D81D1C((unsigned int **)((char *)&v27 + i));
  return 1;
}

void sub_1D3DE0050(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3DE0000);
}

void sub_1D3DE0060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int **v17;
  uint64_t i;

  sub_1D3D6D10C(v17);
  for (i = 24; i != -8; i -= 8)
    sub_1D3D81D1C((unsigned int **)(&a17 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DE00B0(uint64_t a1, double a2, double a3)
{
  int32x2_t v3;
  int v5;
  uint64_t result;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  int32x2_t v28;
  float32x2_t v29;
  int32x2_t v30;
  float32x2_t v31;
  int32x2_t v32;
  int8x8_t v33;
  float v34;
  unsigned int v36;
  float32x2_t v37;
  int *v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  int *v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int *v70;
  char *v71;
  int v72;
  int v73;
  int v74;

  if (**(_BYTE **)a1 && (v5 = **(_DWORD **)(a1 + 8)) != 0)
  {
    sub_1D3E0B678(*(_QWORD *)(a1 + 16), **(_QWORD ***)(a1 + 24), (float)v5 * 0.5);
    return sub_1D3DDFE8C(**(_QWORD **)(a1 + 32), **(unsigned __int8 **)(a1 + 40), *(_DWORD **)(a1 + 8), *(_BYTE **)(a1 + 48), *(_DWORD **)(a1 + 56), *(int **)(a1 + 64), *(_DWORD **)(a1 + 72));
  }
  else
  {
    v7 = **(float32x2_t ***)(a1 + 24);
    v8 = v7[1];
    v10 = v7[2];
    v9 = v7[3];
    LODWORD(a3) = **(_DWORD **)(a1 + 80);
    v11 = vsub_f32(*v7, v9);
    v12 = (int32x2_t)vmul_f32(v11, v11);
    v13 = vsub_f32(*v7, v8);
    v14 = vsub_f32(v8, v10);
    v15 = (int32x2_t)vmul_f32(v14, v14);
    v16 = (int32x2_t)vmul_f32(v13, v13);
    v17 = vsub_f32(v10, v9);
    v18 = (int32x2_t)vmul_f32(v17, v17);
    v19 = vmul_f32(vadd_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v12), (float32x2_t)vzip2_s32(v16, v12))), vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v18, v15), (float32x2_t)vzip2_s32(v18, v15)))), (float32x2_t)0x3F0000003F000000);
    v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
    if (**(_BYTE **)(a1 + 88))
    {
      v21 = **(float32x2_t ***)(a1 + 96);
      v22 = v21[1];
      v24 = v21[2];
      v23 = v21[3];
      v25 = vsub_f32(*v21, v23);
      v26 = (int32x2_t)vmul_f32(v25, v25);
      v27 = vsub_f32(v22, v24);
      v28 = (int32x2_t)vmul_f32(v27, v27);
      *(float *)v3.i32 = (float)(2 * **(_DWORD **)(a1 + 104));
      v29 = vsub_f32(*v21, v22);
      v30 = (int32x2_t)vmul_f32(v29, v29);
      v31 = vsub_f32(v24, v23);
      v32 = (int32x2_t)vmul_f32(v31, v31);
      v33 = (int8x8_t)vdiv_f32(vadd_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v30, v26), (float32x2_t)vzip2_s32(v30, v26))), vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v32, v28), (float32x2_t)vzip2_s32(v32, v28)))), (float32x2_t)vdup_lane_s32(v3, 0));
      v34 = vabds_f32(*(float *)&v33.i32[1], *(float *)&a3);
      if (vabds_f32(*(float *)v33.i32, *(float *)&a3) < (float)(*(float *)&a3 * 0.5)
        && v34 < (float)(*(float *)&a3 * 0.5))
      {
        v36 = -1;
      }
      else
      {
        v36 = 0;
      }
      v20 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v36), v33, (int8x8_t)v20);
    }
    v37 = vdiv_f32(v19, v20);
    if (**(_BYTE **)(a1 + 40))
      v38 = (int *)&unk_1D3E6BB2C;
    else
      v38 = (int *)&unk_1D3E6BAAC;
    v39 = 4;
    if (!**(_BYTE **)(a1 + 40))
      v39 = 32;
    v40 = *v38;
    v41 = (float)*v38;
    if (v37.f32[1] >= v37.f32[0])
      v42 = v37.f32[0];
    else
      v42 = v37.f32[1];
    if (v42 <= (float)(v41 - (float)((float)v40 * 0.4)))
      goto LABEL_35;
    v43 = (float)v38[v39 - 1];
    v44 = v43 * 0.4;
    v45 = v37.f32[0] >= v37.f32[1] ? v37.f32[0] : v37.f32[1];
    if (v45 >= (float)(v44 + v43))
      goto LABEL_35;
    v46 = (float)(v37.f32[0] + v37.f32[1]) * 0.5;
    v47 = (unint64_t)&v38[v39];
    if (**(_BYTE **)(a1 + 40))
      v48 = (int *)&unk_1D3E6BB30;
    else
      v48 = (int *)&unk_1D3E6BAB0;
    v49 = v38;
    if (v48 != (int *)v47)
    {
      v50 = v48;
      do
      {
        v52 = *v50++;
        v51 = v52;
        if (vabds_f32((float)v52, v46) < vabds_f32((float)v40, v46))
        {
          v40 = v51;
          v49 = v48;
        }
        v48 = v50;
      }
      while (v50 != (int *)v47);
      v40 = *v49;
      v41 = (float)*v49;
    }
    if (vabds_f32(v41, v46) <= v44)
    {
      v53 = (char *)operator new(4uLL);
      *(_DWORD *)v53 = v40;
      v54 = v53 + 4;
      if (v38 < v49)
      {
        v62 = *(v49 - 1);
        v63 = (char *)operator new(8uLL);
        v54 = v63 + 8;
        *(_DWORD *)v63 = *(_DWORD *)v53;
        *((_DWORD *)v63 + 1) = v62;
        operator delete(v53);
        v53 = v63;
      }
      if ((unint64_t)(v49 + 1) >= v47)
      {
        v55 = (unint64_t)v54;
      }
      else
      {
        v64 = v54 - v53;
        v65 = (v54 - v53) >> 2;
        if ((unint64_t)(v65 + 1) >> 62)
          sub_1D3D6D4F8();
        v66 = v49[1];
        v67 = v64 >> 1;
        if (v64 >> 1 <= (unint64_t)(v65 + 1))
          v67 = v65 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
          v68 = (unint64_t)sub_1D3D82278(v68);
        else
          v69 = 0;
        v70 = (int *)(v68 + 4 * v65);
        v55 = v68 + 4 * v69;
        *v70 = v66;
        v71 = (char *)(v70 + 1);
        while (v54 != v53)
        {
          v72 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *--v70 = v72;
        }
        operator delete(v53);
        v53 = (char *)v70;
        v54 = v71;
      }
      if (v54 - v53 == 12)
      {
        v74 = *((_DWORD *)v53 + 1);
        v73 = *((_DWORD *)v53 + 2);
        if (vabds_f32((float)v73, v46) < vabds_f32((float)v74, v46))
        {
          *((_DWORD *)v53 + 1) = v73;
          *((_DWORD *)v53 + 2) = v74;
        }
      }
    }
    else
    {
LABEL_35:
      v53 = 0;
      v54 = 0;
      v55 = 0;
    }
    v56 = *(_QWORD *)(a1 + 112);
    v57 = *(void **)v56;
    if (*(_QWORD *)v56)
    {
      *(_QWORD *)(v56 + 8) = v57;
      operator delete(v57);
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v56 + 16) = 0;
    }
    *(_QWORD *)v56 = v53;
    *(_QWORD *)(v56 + 8) = v54;
    *(_QWORD *)(v56 + 16) = v55;
    v58 = *(_QWORD **)(a1 + 112);
    v59 = v58[1];
    if (*v58 == v59)
    {
      return 0;
    }
    else
    {
      v60 = *v58 + 4;
      do
      {
        sub_1D3E0B678(*(_QWORD *)(a1 + 16), **(_QWORD ***)(a1 + 24), (float)*(int *)(v60 - 4) * 0.5);
        result = sub_1D3DDFE8C(**(_QWORD **)(a1 + 32), **(unsigned __int8 **)(a1 + 40), *(_DWORD **)(a1 + 8), *(_BYTE **)(a1 + 48), *(_DWORD **)(a1 + 56), *(int **)(a1 + 64), *(_DWORD **)(a1 + 72));
        if ((result & 1) != 0)
          break;
        v61 = v60 == v59;
        v60 += 4;
      }
      while (!v61);
    }
  }
  return result;
}

void sub_1D3DE04E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D3DE0500(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char *v4;
  int32x2_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int32x2_t *v30;
  uint64_t v31;
  int32x2_t v32;
  __int128 v33;
  int32x2_t v34;
  int32x2_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  __int32 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int32 *v53;
  __int32 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  float *v70;
  unsigned int *v71;
  unsigned int v72;
  _BOOL4 v73;
  _BOOL8 v74;
  int v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  float *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;

  v1 = a1;
  if (!**(_BYTE **)a1 || (v2 = **(_DWORD **)(a1 + 8)) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8))
      return 0;
    v2 = **(_DWORD **)v3;
  }
  if (!**(_BYTE **)(a1 + 24))
    return 0;
  v4 = (char *)operator new(0x20uLL);
  *(float *)v5.i32 = (float)v2 * 0.5;
  v6 = v4 + 32;
  v85 = v4 + 32;
  v86 = v4 + 32;
  *(float *)v4 = -*(float *)v5.i32;
  *((float *)v4 + 1) = -*(float *)v5.i32;
  *((float *)v4 + 2) = -*(float *)v5.i32;
  *(int32x4_t *)(v4 + 12) = vdupq_lane_s32(v5, 0);
  *((float *)v4 + 7) = -*(float *)v5.i32;
  v83 = 0;
  v84 = v4;
  v81 = 0;
  v82 = 0;
  sub_1D3DE2750((void **)&v81, 0x10uLL);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD **)v8;
  v10 = *(_QWORD **)(v8 + 8);
  v77 = v1;
  if (*(_QWORD **)v8 != v10)
  {
    v11 = v82;
    v12 = v83;
    v13 = v81;
    do
    {
      *(_QWORD *)&v7 = *v9;
      if ((unint64_t)v11 >= v12)
      {
        v78 = v7;
        v15 = (v11 - v13) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
        {
          v82 = v11;
          v83 = v12;
          v81 = v13;
          sub_1D3D6D4F8();
        }
        if ((uint64_t)(v12 - (_QWORD)v13) >> 1 > v16)
          v16 = (uint64_t)(v12 - (_QWORD)v13) >> 1;
        if (v12 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)sub_1D3D82278(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v78;
        v14 = v19 + 4;
        if (v11 != v13)
        {
          v20 = v11;
          do
          {
            v21 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          while (v20 != v13);
        }
        v12 = v17 + 4 * v18;
        if (v13)
          operator delete(v13);
        v13 = v19;
        v7 = v78;
      }
      else
      {
        *(_DWORD *)v11 = v7;
        v14 = v11 + 4;
      }
      v22 = DWORD1(v7);
      if ((unint64_t)v14 >= v12)
      {
        v23 = (v14 - v13) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
        {
          v82 = v11;
          v83 = v12;
          v81 = v13;
          sub_1D3D6D4F8();
        }
        if ((uint64_t)(v12 - (_QWORD)v13) >> 1 > v24)
          v24 = (uint64_t)(v12 - (_QWORD)v13) >> 1;
        if (v12 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)sub_1D3D82278(v25);
        else
          v26 = 0;
        v27 = (char *)(v25 + 4 * v23);
        *(_DWORD *)v27 = v22;
        v11 = v27 + 4;
        while (v14 != v13)
        {
          v28 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        v12 = v25 + 4 * v26;
        if (v13)
          operator delete(v13);
        v13 = v27;
      }
      else
      {
        *(_DWORD *)v14 = DWORD1(v7);
        v11 = v14 + 4;
      }
      ++v9;
    }
    while (v9 != v10);
    v82 = v11;
    v83 = v12;
    v81 = v13;
  }
  v29 = **(_DWORD **)(v1 + 40);
  v30 = (int32x2_t *)operator new(0x20uLL);
  v31 = 0;
  *(float *)v32.i32 = (float)v29 * 0.5;
  *(float *)&v33 = -*(float *)v32.i32;
  v34 = vdup_lane_s32(v32, 0);
  *(float *)v35.i32 = -*(float *)v32.i32;
  v35.i32[1] = v32.i32[0];
  *(float *)&v32.i32[1] = -*(float *)v32.i32;
  *v30 = vdup_lane_s32(*(int32x2_t *)&v33, 0);
  v30[1] = v35;
  v30[2] = v34;
  v30[3] = v32;
  v36 = v83;
  v37 = v81;
  v38 = v85;
  v39 = v4 + 32;
  do
  {
    *(_QWORD *)&v33 = *(_QWORD *)(**(_QWORD **)(v1 + 48) + 8 * v31);
    v79 = v33;
    v40 = DWORD1(v33);
    if (v6 >= v39)
    {
      v76 = (int)v30[v31];
      v42 = (v6 - v4) >> 2;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
      {
        v85 = v38;
        v86 = v39;
        v83 = v36;
        v84 = v4;
        v81 = v37;
        sub_1D3D6D4F8();
      }
      if ((v39 - v4) >> 1 > v43)
        v43 = (v39 - v4) >> 1;
      if ((unint64_t)(v39 - v4) >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
        v44 = (unint64_t)sub_1D3D82278(v44);
      else
        v45 = 0;
      v46 = (char *)(v44 + 4 * v42);
      *(_DWORD *)v46 = v76;
      v41 = v46 + 4;
      while (v6 != v4)
      {
        v47 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v46 - 1) = v47;
        v46 -= 4;
      }
      v39 = (char *)(v44 + 4 * v45);
      if (v4)
        operator delete(v4);
      v4 = v46;
    }
    else
    {
      *(_DWORD *)v6 = v30[v31];
      v41 = v6 + 4;
    }
    v48 = v30[v31].i32[1];
    if (v41 >= v39)
    {
      v49 = (v41 - v4) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
      {
        v85 = v38;
        v86 = v39;
        v83 = v36;
        v84 = v4;
        v81 = v37;
        sub_1D3D6D4F8();
      }
      if ((v39 - v4) >> 1 > v50)
        v50 = (v39 - v4) >> 1;
      if ((unint64_t)(v39 - v4) >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v51 = (unint64_t)sub_1D3D82278(v51);
      else
        v52 = 0;
      v53 = (__int32 *)(v51 + 4 * v49);
      *v53 = v48;
      v38 = (char *)(v53 + 1);
      while (v41 != v4)
      {
        v54 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *--v53 = v54;
      }
      v39 = (char *)(v51 + 4 * v52);
      if (v4)
        operator delete(v4);
      v4 = (char *)v53;
    }
    else
    {
      *(_DWORD *)v41 = v48;
      v38 = v41 + 4;
    }
    v55 = v82;
    if ((unint64_t)v82 >= v36)
    {
      v57 = (v82 - v37) >> 2;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62)
      {
        v85 = v38;
        v86 = v39;
        v83 = v36;
        v84 = v4;
        v81 = v37;
        sub_1D3D6D4F8();
      }
      if ((uint64_t)(v36 - (_QWORD)v37) >> 1 > v58)
        v58 = (uint64_t)(v36 - (_QWORD)v37) >> 1;
      if (v36 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      if (v59)
        v59 = (unint64_t)sub_1D3D82278(v59);
      else
        v60 = 0;
      v61 = (char *)(v59 + 4 * v57);
      *((_QWORD *)&v33 + 1) = *((_QWORD *)&v79 + 1);
      *(_DWORD *)v61 = v79;
      v56 = v61 + 4;
      while (v55 != v37)
      {
        v62 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      v36 = v59 + 4 * v60;
      if (v37)
        operator delete(v37);
      v37 = v61;
    }
    else
    {
      *((_QWORD *)&v33 + 1) = *((_QWORD *)&v79 + 1);
      *(_DWORD *)v82 = v79;
      v56 = v55 + 4;
    }
    if ((unint64_t)v56 >= v36)
    {
      v64 = (v56 - v37) >> 2;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62)
      {
        v85 = v38;
        v86 = v39;
        v83 = v36;
        v84 = v4;
        v81 = v37;
        sub_1D3D6D4F8();
      }
      if ((uint64_t)(v36 - (_QWORD)v37) >> 1 > v65)
        v65 = (uint64_t)(v36 - (_QWORD)v37) >> 1;
      if (v36 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
        v66 = (unint64_t)sub_1D3D82278(v66);
      else
        v67 = 0;
      v68 = (char *)(v66 + 4 * v64);
      *(_DWORD *)v68 = v40;
      v63 = v68 + 4;
      while (v56 != v37)
      {
        v69 = *((_DWORD *)v56 - 1);
        v56 -= 4;
        *((_DWORD *)v68 - 1) = v69;
        v68 -= 4;
      }
      v36 = v66 + 4 * v67;
      if (v37)
        operator delete(v37);
      v37 = v68;
    }
    else
    {
      *(_DWORD *)v56 = v40;
      v63 = v56 + 4;
    }
    v82 = v63;
    v6 = v38;
    ++v31;
    v1 = v77;
  }
  while (v31 != 4);
  v85 = v38;
  v86 = v39;
  v83 = v36;
  v84 = v4;
  v81 = v37;
  v70 = *(float **)(*(_QWORD *)(v77 + 56) + 288);
  if (v70)
  {
    v71 = (unsigned int *)(v70 + 2);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v80 = v70;
  v73 = sub_1D3DB9928(&v80, (const void **)&v84, (uint64_t)&v81);
  sub_1D3D6F2E0((unsigned int **)&v80);
  v74 = v73
     && (sub_1D3DDFE8C(**(_QWORD **)(v77 + 64), **(unsigned __int8 **)(v77 + 72), *(_DWORD **)(v77 + 8), *(_BYTE **)(v77 + 80), *(_DWORD **)(v77 + 88), *(int **)(v77 + 96), *(_DWORD **)(v77 + 104)) & 1) != 0;
  operator delete(v30);
  if (v37)
  {
    v82 = v37;
    operator delete(v37);
    v4 = v84;
  }
  if (v4)
  {
    v85 = v4;
    operator delete(v4);
  }
  return v74;
}

void sub_1D3DE0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  operator delete(v22);
  if (__p)
    operator delete(__p);
  if (v23)
    operator delete(v23);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DE0BC4(_QWORD *a1, uint64_t a2, char a3, int a4, int a5, int a6, unsigned int *a7, double a8, int32x2_t a9)
{
  float32x2_t v9;
  uint64_t v13;
  int v14;
  float *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  float v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  char *v36;
  void **v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t v46;
  unsigned int *v47;
  unsigned int **v48;
  unsigned int v49;
  unsigned int **v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int v68;
  int32x2_t v69;
  uint64_t *v70;
  int v71;
  int32x2_t v72;
  int32x2_t v73;
  int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  float *v78;
  float *v79;
  uint64_t v80;
  int v81;
  unsigned int **v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int **v87;
  unsigned int **v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int **v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int v104;
  void **v105;
  int v106;
  uint64_t v108;
  int v109;
  void **v110;
  void **v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  float *v129;
  unsigned int *v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int **v143;
  unsigned int *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  int32x2_t v152;
  int32x2_t v153;
  float32x2_t v154;
  unsigned int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  char v168;
  int v169;
  uint64_t v170;
  int v171;
  char v172;
  char v173;
  uint64_t v174;
  int v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  int v182;
  char v183;
  char v184;
  float v185;
  float v186;
  float v187;
  float v188;
  char *v189;
  float v190;
  float v191;
  float32x2_t *v192;
  float32x2_t *v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int **v196;
  unsigned int *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  float32x2_t *v202;
  float32x2_t *v203;
  float32x2_t v204;
  int32x4_t v205;
  int32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x2_t *v210;
  int32x4_t v211;
  float32x2_t v212;
  float32x2_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x2_t v218;
  float v219;
  float *v220;
  unint64_t v221;
  float *v222;
  float *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  float *v228;
  int v229;
  float v230;
  float *v231;
  float *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  float *v237;
  int v238;
  float32x2_t v239;
  int32x4_t v240;
  float32x2_t v241;
  char *v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  int v251;
  __int32 v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  __int32 *v259;
  __int32 v260;
  unsigned int *v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int **v264;
  int v265;
  int v266;
  uint64_t v267;
  void **v268;
  uint64_t v269;
  int64_t v270;
  float *v271;
  unsigned int *v272;
  unsigned int v273;
  _BOOL4 v274;
  int32x2_t v275;
  float v276;
  int v277;
  float *v278;
  float *v279;
  float *v280;
  float *v281;
  uint64_t v282;
  float v283;
  float v284;
  float *v285;
  BOOL v286;
  float *v287;
  float v288;
  float *v289;
  float v290;
  float v291;
  char v292;
  uint64_t v293;
  char *v294;
  size_t v295;
  char *v296;
  size_t v297;
  unsigned int *v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int *v302;
  unsigned int *v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int *v307;
  unsigned int *v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  float v318;
  unsigned int v319;
  BOOL v320;
  unsigned int v321;
  unsigned int v322;
  int32x2_t v323;
  uint64_t *v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void **__p;
  float32x4_t v338;
  uint64_t v339;
  float32x4_t v340;
  int v341;
  uint64_t v342;
  float32x4_t v343;
  float v344;
  int v345;
  int32x2_t v346;
  unsigned int **v347;
  float v348;
  int v349;
  __int128 v350;
  int v351;
  float32x2_t v352;
  float *v353;
  int v354;
  _QWORD v355[3];
  unsigned int **v356[3];
  uint64_t (**v357)(_QWORD);
  int v358;
  uint64_t v359;
  unsigned int *v360;
  unsigned int *v361;
  unsigned int *v362;
  unsigned int *v363;
  unsigned int *v364;
  unsigned int **v365[3];
  unsigned int *v366;
  unsigned int *v367;
  unsigned int *v368;
  unsigned int *v369;
  unsigned int *v370;
  float *v371;
  void *v372;
  char *v373;
  unint64_t v374;
  void *v375;
  float *v376;
  unint64_t v377;
  unsigned int *v378;
  uint64_t v379;
  unsigned int *v380;
  float *v381;
  float *v382;
  uint64_t v383;
  unsigned int ***v384;
  unsigned int *v385;
  float *v386;
  unsigned int ***v387;
  unint64_t v388;
  char *v389;
  unsigned int **v390;
  unsigned int **v391;
  unint64_t v392;

  v13 = a2;
  v370 = 0;
  if (a7)
  {
    v14 = a4;
    v15 = *(float **)(a2 + 288);
    v16 = a7 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v369 = a7;
    sub_1D3DB9654((uint64_t *)&v390, v15, (uint64_t)&v369);
    v18 = v390;
    if (v390)
    {
      v19 = (unsigned int *)(v390 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(unsigned int **)(v13 + 288);
    if (v21)
      sub_1D3D6D13C(v21);
    *(_QWORD *)(v13 + 288) = v18;
    sub_1D3D6F2E0((unsigned int **)&v390);
    sub_1D3D6F2E0(&v369);
    a4 = v14;
  }
  *(float *)a9.i32 = (float)a4;
  v323 = a9;
  v22 = (float)a4 * -0.5;
  v322 = a4;
  sub_1D3DE2568((uint64_t *)&v368, v13, a4, a4, v22, v22);
  if (!v368)
  {
    *a1 = 0;
    v57 = v370;
    if (v370)
    {
      v58 = v370 + 2;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    *a1 = v57;
    goto LABEL_53;
  }
  v23 = operator new();
  v24 = (unsigned int *)v23;
  v25 = v368;
  if (v368)
  {
    v26 = v368 + 2;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v366 = v25;
  memset(v365, 0, sizeof(v365));
  sub_1D3D6D8D4(v23, v25, v365, *(_BYTE *)v13, a3, a5, a6);
  v28 = v24 + 2;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  v367 = v24;
  v390 = (unsigned int **)v365;
  sub_1D3D6D79C((void ***)&v390);
  sub_1D3D6D10C(&v366);
  v364 = 0;
  v30 = v367;
  if (v367)
  {
    v31 = v367 + 2;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v363 = v30;
  v342 = v13;
  sub_1D3D7FD5C((uint64_t *)&v390, (uint64_t)&v363);
  v33 = (unsigned int *)v390;
  if (v390)
  {
    v34 = (unsigned int *)(v390 + 1);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (v364)
    sub_1D3D6D13C(v364);
  v364 = v33;
  sub_1D3D7F814((unsigned int **)&v390);
  sub_1D3D7F2D8(&v363);
  if (v364)
    goto LABEL_25;
  if ((int)v322 <= 33)
  {
LABEL_48:
    *a1 = 0;
    v60 = v370;
    if (v370)
    {
      v61 = v370 + 2;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    goto LABEL_51;
  }
  v318 = v22;
  v375 = 0;
  v376 = 0;
  v377 = 0;
  v372 = 0;
  v373 = 0;
  v329 = v322 >> 1;
  v374 = 0;
  sub_1D3DE2750(&v375, (v322 >> 1) & 0x7FFFFFF0);
  sub_1D3DE2750(&v372, (v322 >> 1) & 0x7FFFFFF0);
  v320 = 0;
  v319 = v322 >> 5;
  v64 = *(int32x4_t *)(v13 + 256);
  v65 = *(int32x4_t *)(v13 + 240);
  v66 = vzip1q_s32(v65, v64);
  v66.i32[2] = *(_OWORD *)(v13 + 272);
  v327 = (float32x4_t)vzip2q_s32(vzip1q_s32(v65, *(int32x4_t *)(v13 + 272)), vdupq_lane_s32(*(int32x2_t *)v64.i8, 1));
  v328 = (float32x4_t)v66;
  v67 = vzip2q_s32(v65, v64);
  v67.i32[2] = *(_QWORD *)(v13 + 280);
  v326 = (float32x4_t)v67;
  v330 = 2;
  v68 = 1;
  do
  {
    v321 = v68;
    v69 = vdup_n_s32(-v68);
    v70 = &qword_1D3E6BB40;
    do
    {
      v71 = 0;
      v325 = v70;
      v72 = (int32x2_t)*v70;
      do
      {
        v73 = vshl_n_s32(v69, 4uLL);
        v379 = 0;
        v354 = v73.i32[1];
        v74 = v73.i32[0];
        sub_1D3DE27E4(&v384, v329, v73.i32[0], (_DWORD *)&v379 + 1);
        sub_1D3DE27E4(&v381, v329, v354, &v379);
        v75 = operator new();
        sub_1D3D938C4(v75, ((char *)v385 - (char *)v384) >> 2, v382 - v381);
        v76 = (unsigned int *)(v75 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        v378 = (unsigned int *)v75;
        v390 = 0;
        v391 = 0;
        v392 = 0;
        sub_1D3DE2750((void **)&v390, ((char *)v385 - (char *)v384) >> 1);
        v331 = v354;
        v332 = v74;
        v333 = v71;
        v78 = v381;
        v79 = v382;
        if (v381 != v382)
        {
          v80 = 0;
          do
          {
            v81 = *(_DWORD *)v78;
            v82 = v390;
            v391 = v390;
            v83 = (unsigned int *)v384;
            v84 = v385;
            while (v83 != v84)
            {
              v85 = *v83;
              v86 = v392;
              if ((unint64_t)v82 >= v392)
              {
                v88 = v390;
                v89 = ((char *)v82 - (char *)v390) >> 2;
                v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 62)
                  goto LABEL_336;
                v91 = v392 - (_QWORD)v390;
                if ((uint64_t)(v392 - (_QWORD)v390) >> 1 > v90)
                  v90 = v91 >> 1;
                v92 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL;
                v93 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v92)
                  v93 = v90;
                if (v93)
                {
                  v93 = (unint64_t)sub_1D3D82278(v93);
                  v88 = v390;
                  v82 = v391;
                }
                else
                {
                  v94 = 0;
                }
                v95 = (unsigned int *)(v93 + 4 * v89);
                *v95 = v85;
                v87 = (unsigned int **)(v95 + 1);
                while (v82 != v88)
                {
                  v96 = *((_DWORD *)v82 - 1);
                  v82 = (unsigned int **)((char *)v82 - 4);
                  *--v95 = v96;
                }
                v86 = v93 + 4 * v94;
                v390 = (unsigned int **)v95;
                v391 = v87;
                v392 = v86;
                if (v88)
                {
                  operator delete(v88);
                  v86 = v392;
                }
              }
              else
              {
                *(_DWORD *)v82 = v85;
                v87 = (unsigned int **)((char *)v82 + 4);
              }
              v391 = v87;
              if ((unint64_t)v87 >= v86)
              {
                v97 = v390;
                v98 = ((char *)v87 - (char *)v390) >> 2;
                v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 62)
LABEL_336:
                  sub_1D3D6D4F8();
                v100 = v86 - (_QWORD)v390;
                if (v100 >> 1 > v99)
                  v99 = v100 >> 1;
                v92 = (unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL;
                v101 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v92)
                  v101 = v99;
                if (v101)
                {
                  v101 = (unint64_t)sub_1D3D82278(v101);
                  v97 = v390;
                  v87 = v391;
                }
                else
                {
                  v102 = 0;
                }
                v103 = (_DWORD *)(v101 + 4 * v98);
                *v103 = v81;
                v82 = (unsigned int **)(v103 + 1);
                while (v87 != v97)
                {
                  v104 = *((_DWORD *)v87 - 1);
                  v87 = (unsigned int **)((char *)v87 - 4);
                  *--v103 = v104;
                }
                v390 = (unsigned int **)v103;
                v391 = v82;
                v392 = v101 + 4 * v102;
                if (v97)
                  operator delete(v97);
              }
              else
              {
                *(_DWORD *)v87 = v81;
                v82 = (unsigned int **)((char *)v87 + 4);
              }
              v391 = v82;
              ++v83;
            }
            sub_1D3E0B720(&v387, v342, (uint64_t *)&v390);
            v105 = (void **)v387;
            v106 = v388 & 0x3F;
            if (v388 > 0x3F || v106 != 0)
            {
              v108 = 0;
              v109 = 0;
              v110 = (void **)&v387[v388 >> 6];
              v111 = (void **)v387;
              do
              {
                if ((((unint64_t)*v111 >> v109) & 1) != 0)
                  *(_DWORD *)(*(_QWORD *)(v75 + 48)
                            + (((unint64_t)(v108 + v80 * *(_QWORD *)(v75 + 24)) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v108 + v80 * *(_QWORD *)(v75 + 24));
                ++v108;
                v111 += v109 == 63;
                if (v109 == 63)
                  v109 = 0;
                else
                  ++v109;
              }
              while (v109 != v106 || v111 != v110);
            }
            if (v105)
              operator delete(v105);
            ++v80;
            ++v78;
          }
          while (v78 != v79);
        }
        if (v390)
        {
          v391 = v390;
          operator delete(v390);
        }
        v112 = HIDWORD(v379);
        v113 = v379;
        v114 = v378[14];
        v115 = -v114;
        v116 = v378[4];
        v117 = v116 & -v114--;
        v118 = v378[8];
        v119 = v118 & v114 | v117;
        v120 = v116 & v114 | v118 & v115;
        if ((int)v379 <= 4)
          v121 = 4;
        else
          v121 = v379;
        v122 = (v121 - 4);
        if ((int)v379 + 4 >= v119 - 1)
          v123 = v119 - 1;
        else
          v123 = v379 + 4;
        if (SHIDWORD(v379) <= 4)
          v124 = 4;
        else
          v124 = HIDWORD(v379);
        if (HIDWORD(v379) + 4 >= v120 - 1)
          v125 = v120 - 1;
        else
          v125 = HIDWORD(v379) + 4;
        sub_1D3D8D6EC(&v390, v123 - (int)v122 + 1);
        v126 = (v124 - 4);
        v341 = v125 - v126;
        sub_1D3D8D6EC(&v387, v125 - (int)v126 + 1);
        v349 = v125;
        v345 = v124;
        if (v123 >= (int)v122)
        {
          v128 = v121 - 4;
          do
          {
            v129 = (float *)v378;
            if (v378)
            {
              v130 = v378 + 2;
              do
                v131 = __ldxr(v130);
              while (__stxr(v131 + 1, v130));
            }
            v386 = v129;
            v132 = sub_1D3DE286C((uint64_t)v129, 0, v128, 1u, 0, v120);
            *((_DWORD *)v390 + v128 - v122) = v132;
            sub_1D3D6D10C((unsigned int **)&v386);
            ++v128;
          }
          while (v123 + 1 != (_DWORD)v128);
        }
        if (v349 >= (int)v126)
        {
          v133 = v124 - 4;
          do
          {
            v134 = v378;
            if (v378)
            {
              v135 = v378 + 2;
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
            }
            v380 = v134;
            v137 = sub_1D3DE286C((uint64_t)v134, v133, 0, 0, 1u, v119);
            *((_DWORD *)v387 + v133 - v126) = v137;
            sub_1D3D6D10C(&v380);
            ++v133;
          }
          while (v349 + 1 != (_DWORD)v133);
        }
        *(_QWORD *)&v127 = __PAIR64__(v113, v112);
        if (v120 >= 0)
          v138 = v120;
        else
          v138 = v120 + 1;
        if (v119 >= 0)
          v139 = v119;
        else
          v139 = v119 + 1;
        __p = (void **)v387;
        if (v123 - (_DWORD)v122 < 0)
        {
          *(_QWORD *)&v350 = __PAIR64__(v113, v112);
        }
        else
        {
          v335 = (v124 - 4);
          v336 = (v121 - 4);
          v140 = 0;
          v141 = v138 >> 1;
          v142 = v139 >> 1;
          v334 = (v349 - v345 + 5);
          v339 = (v123 - v121 + 5);
          v143 = v390;
          v9.i32[0] = 0;
          v144 = v378;
          v346 = (int32x2_t)__PAIR64__(v113, v112);
          v350 = v127;
          do
          {
            if (*((_DWORD *)v143 + v140) >= v141)
              v145 = v141;
            else
              v145 = *((_DWORD *)v143 + v140);
            if ((v341 & 0x80000000) == 0)
            {
              v146 = v335;
              v147 = v140 + v336;
              v148 = (int *)__p;
              v149 = v334;
              do
              {
                if (sub_1D3D6D4A0(v144, v146, v147))
                {
                  v150 = *v148;
                  if (*v148 >= v142)
                    v150 = v142;
                  *((_QWORD *)&v151 + 1) = *((_QWORD *)&v350 + 1);
                  v152 = vsub_s32((int32x2_t)__PAIR64__(v147, v146), v346);
                  v153 = vmul_s32(v152, v152);
                  v154 = (float32x2_t)vadd_s32(v153, vdup_lane_s32(v153, 1));
                  v154.f32[0] = (float)(v150 + v145) - sqrtf((float)v154.i32[0]);
                  *(int8x8_t *)&v151 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v154, v9), 0), (int8x8_t)__PAIR64__(v147, v146), *(int8x8_t *)&v350);
                  v350 = v151;
                  if (v154.f32[0] > v9.f32[0])
                    v9.f32[0] = v154.f32[0];
                }
                ++v148;
                ++v146;
                --v149;
              }
              while (v149);
            }
            ++v140;
          }
          while (v140 != v339);
        }
        if (__p)
        {
          v388 = (unint64_t)__p;
          operator delete(__p);
        }
        if (v390)
        {
          v391 = v390;
          operator delete(v390);
        }
        v155 = v378;
        v156 = *((_QWORD *)v378 + 7);
        v157 = -v156;
        v158 = *((_QWORD *)v378 + 2);
        v159 = v158 & -v156;
        LODWORD(v156) = v156 - 1;
        v160 = *((_QWORD *)v378 + 4);
        v161 = v160 & v156 | v159;
        v162 = v158 & v156 | v160 & v157;
        v163 = (int)v350;
        v164 = v162;
        if ((int)v350 + 1 > v162)
          v162 = v350 + 1;
        v165 = v162 - 1;
        v166 = 1;
        v167 = (int)v350;
        while (1)
        {
          if (v167 + 1 >= v164)
          {
            v351 = v165;
            goto LABEL_170;
          }
          v168 = v166;
          if ((sub_1D3D6D4A0(v155, v167 + 1, SDWORD1(v350)) & 1) == 0)
            break;
          v166 = 0;
          ++v167;
          if ((v168 & 1) == 0)
          {
            v351 = v350 + 1;
            goto LABEL_170;
          }
        }
        v351 = v167;
LABEL_170:
        v169 = 0;
        v170 = v163;
        v171 = v163 & ((int)v163 >> 31);
        v172 = 1;
        while (v169 != (_DWORD)v163 - v171)
        {
          v173 = v172;
          if ((sub_1D3D6D4A0(v155, v170 - 1, SDWORD1(v350)) & 1) == 0)
          {
            v171 = v170;
            break;
          }
          v172 = 0;
          v169 = 1;
          --v170;
          if ((v173 & 1) == 0)
          {
            v171 = v163 - 1;
            break;
          }
        }
        v174 = v161;
        if (DWORD1(v350) + 1 > v161)
          v175 = DWORD1(v350) + 1;
        else
          v175 = v161;
        v176 = v175 - 1;
        v177 = 1;
        v178 = SDWORD1(v350);
        while (v178 + 1 < v174)
        {
          v179 = v177;
          if ((sub_1D3D6D4A0(v155, v163, v178 + 1) & 1) == 0)
          {
            v176 = v178;
            break;
          }
          v177 = 0;
          ++v178;
          if ((v179 & 1) == 0)
          {
            v176 = DWORD1(v350) + 1;
            break;
          }
        }
        v180 = 0;
        v181 = DWORD1(v350);
        v182 = DWORD1(v350) & (SDWORD1(v350) >> 31);
        v183 = 1;
        while (v180 != DWORD1(v350) - v182)
        {
          v184 = v183;
          if ((sub_1D3D6D4A0(v155, v163, v181 - 1) & 1) == 0)
          {
            v182 = v181;
            break;
          }
          v183 = 0;
          v180 = 1;
          --v181;
          if ((v184 & 1) == 0)
          {
            v182 = DWORD1(v350) - 1;
            break;
          }
        }
        v185 = *((float *)v384 + v171);
        v186 = *((float *)v384 + v351);
        v187 = v381[v182];
        v188 = v381[v176];
        v189 = (char *)operator new(0x28uLL);
        v13 = v342;
        v190 = (float)(v185 + v186) * 0.5;
        v191 = (float)(v187 + v188) * 0.5;
        v391 = (unsigned int **)(v189 + 40);
        v392 = (unint64_t)(v189 + 40);
        *(float *)v189 = v190;
        *((float *)v189 + 1) = v191;
        *((float *)v189 + 2) = v190;
        *((float *)v189 + 3) = v191 + -1.5;
        *((float *)v189 + 4) = v190;
        *((float *)v189 + 5) = v191 + 1.5;
        *((float *)v189 + 6) = v190 + -1.5;
        *((float *)v189 + 7) = v191;
        *((float *)v189 + 8) = v190 + 1.5;
        *((float *)v189 + 9) = v191;
        v390 = (unsigned int **)v189;
        (*(void (**)(_QWORD, unsigned int ***))(**(_QWORD **)(v342 + 288) + 16))(*(_QWORD *)(v342 + 288), &v390);
        v192 = 0;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        v196 = v390;
        do
        {
          v197 = v196[v195];
          if ((unint64_t)v193 >= v194)
          {
            v198 = v193 - v192;
            v199 = v198 + 1;
            if ((unint64_t)(v198 + 1) >> 61)
              sub_1D3D6D4F8();
            if ((uint64_t)(v194 - (_QWORD)v192) >> 2 > v199)
              v199 = (uint64_t)(v194 - (_QWORD)v192) >> 2;
            if (v194 - (unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
              v200 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v200 = v199;
            if (v200)
              v200 = (unint64_t)sub_1D3D6D8A0(v200);
            else
              v201 = 0;
            v202 = (float32x2_t *)(v200 + 8 * v198);
            *v202 = (float32x2_t)v197;
            v203 = v202 + 1;
            while (v193 != v192)
            {
              v204 = v193[-1];
              --v193;
              v202[-1] = v204;
              --v202;
            }
            v194 = v200 + 8 * v201;
            if (v192)
              operator delete(v192);
            v192 = v202;
            v193 = v203;
          }
          else
          {
            *v193++ = (float32x2_t)v197;
          }
          ++v195;
          v196 = v390;
        }
        while (((v195 * 2) | 1uLL) < ((char *)v391 - (char *)v390) >> 2);
        if (v192 != v193)
        {
          v205 = *(int32x4_t *)(v342 + 112);
          v206 = *(int32x4_t *)(v342 + 96);
          v207 = (float32x4_t)vzip1q_s32(v206, v205);
          v207.i32[2] = *(_OWORD *)(v342 + 128);
          v208 = (float32x4_t)vzip2q_s32(vzip1q_s32(v206, *(int32x4_t *)(v342 + 128)), vdupq_lane_s32(*(int32x2_t *)v205.i8, 1));
          v209 = (float32x4_t)vzip2q_s32(v206, v205);
          v209.i32[2] = *(_QWORD *)(v342 + 136);
          v210 = v192;
          do
          {
            v211 = (int32x4_t)vaddq_f32(v209, vmlaq_lane_f32(vmulq_n_f32(v207, COERCE_FLOAT(*v210)), v208, *v210, 1));
            *v210++ = vdiv_f32(*(float32x2_t *)v211.i8, (float32x2_t)vdup_laneq_s32(v211, 2));
          }
          while (v210 != v193);
        }
        v212 = *v192;
        v213 = v192[2];
        v214 = v192[3];
        v215 = v192[4];
        v216 = sub_1D3DE298C((int32x4_t *)v342, *v192, vsub_f32(v192[1], *v192));
        v217 = vmul_f32(vadd_f32(v216, sub_1D3DE298C((int32x4_t *)v342, v212, vsub_f32(v213, v212))), (float32x2_t)0x3F0000003F000000);
        v9 = sub_1D3DE298C((int32x4_t *)v342, v217, vsub_f32(v214, v212));
        v218 = sub_1D3DE298C((int32x4_t *)v342, v217, vsub_f32(v215, v212));
        operator delete(v192);
        if (v390)
        {
          v391 = v390;
          operator delete(v390);
        }
        sub_1D3D6D10C(&v378);
        if (v381)
        {
          v382 = v381;
          operator delete(v381);
        }
        if (v384)
        {
          v385 = (unsigned int *)v384;
          operator delete(v384);
        }
        v219 = (float)v332;
        v220 = v376;
        v221 = v377;
        if ((unint64_t)v376 >= v377)
        {
          v223 = (float *)v375;
          v224 = ((char *)v376 - (_BYTE *)v375) >> 2;
          v225 = v224 + 1;
          if ((unint64_t)(v224 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(v377 - (_QWORD)v375) >> 1 > v225)
            v225 = (uint64_t)(v377 - (_QWORD)v375) >> 1;
          if (v377 - (unint64_t)v375 >= 0x7FFFFFFFFFFFFFFCLL)
            v226 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v226 = v225;
          if (v226)
            v226 = (unint64_t)sub_1D3D82278(v226);
          else
            v227 = 0;
          v228 = (float *)(v226 + 4 * v224);
          *v228 = v219;
          v222 = v228 + 1;
          while (v220 != v223)
          {
            v229 = *((_DWORD *)v220-- - 1);
            *((_DWORD *)v228-- - 1) = v229;
          }
          v221 = v226 + 4 * v227;
          v375 = v228;
          v376 = v222;
          v377 = v221;
          if (v223)
            operator delete(v223);
        }
        else
        {
          *v376 = v219;
          v222 = v220 + 1;
        }
        v230 = (float)v331;
        if ((unint64_t)v222 >= v221)
        {
          v232 = (float *)v375;
          v233 = ((char *)v222 - (_BYTE *)v375) >> 2;
          v234 = v233 + 1;
          if ((unint64_t)(v233 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(v221 - (_QWORD)v375) >> 1 > v234)
            v234 = (uint64_t)(v221 - (_QWORD)v375) >> 1;
          if (v221 - (unint64_t)v375 >= 0x7FFFFFFFFFFFFFFCLL)
            v235 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v235 = v234;
          if (v235)
            v235 = (unint64_t)sub_1D3D82278(v235);
          else
            v236 = 0;
          v237 = (float *)(v235 + 4 * v233);
          *v237 = v230;
          v231 = v237 + 1;
          while (v222 != v232)
          {
            v238 = *((_DWORD *)v222-- - 1);
            *((_DWORD *)v237-- - 1) = v238;
          }
          v375 = v237;
          v377 = v235 + 4 * v236;
          if (v232)
            operator delete(v232);
        }
        else
        {
          *v222 = v230;
          v231 = v222 + 1;
        }
        v239 = vmul_f32(vadd_f32(v9, v218), (float32x2_t)0x3F0000003F000000);
        v240 = (int32x4_t)vaddq_f32(v326, vmlaq_lane_f32(vmulq_n_f32(v328, v239.f32[0]), v327, v239, 1));
        v241 = vdiv_f32(*(float32x2_t *)v240.i8, (float32x2_t)vdup_laneq_s32(v240, 2));
        v376 = v231;
        v242 = v373;
        v243 = v374;
        if ((unint64_t)v373 >= v374)
        {
          v352 = v241;
          v245 = (char *)v372;
          v246 = (v373 - (_BYTE *)v372) >> 2;
          v247 = v246 + 1;
          if ((unint64_t)(v246 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(v374 - (_QWORD)v372) >> 1 > v247)
            v247 = (uint64_t)(v374 - (_QWORD)v372) >> 1;
          if (v374 - (unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL)
            v248 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v248 = v247;
          if (v248)
            v248 = (unint64_t)sub_1D3D82278(v248);
          else
            v249 = 0;
          v250 = (char *)(v248 + 4 * v246);
          *(_DWORD *)v250 = v352.i32[0];
          v244 = v250 + 4;
          while (v242 != v245)
          {
            v251 = *((_DWORD *)v242 - 1);
            v242 -= 4;
            *((_DWORD *)v250 - 1) = v251;
            v250 -= 4;
          }
          v243 = v248 + 4 * v249;
          v372 = v250;
          v373 = v244;
          v374 = v243;
          if (v245)
            operator delete(v245);
          v241.i32[1] = v352.i32[1];
        }
        else
        {
          *(_DWORD *)v373 = v241.i32[0];
          v244 = v242 + 4;
        }
        v252 = v241.i32[1];
        if ((unint64_t)v244 >= v243)
        {
          v254 = (char *)v372;
          v255 = (v244 - (_BYTE *)v372) >> 2;
          v256 = v255 + 1;
          if ((unint64_t)(v255 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(v243 - (_QWORD)v372) >> 1 > v256)
            v256 = (uint64_t)(v243 - (_QWORD)v372) >> 1;
          if (v243 - (unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL)
            v257 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v257 = v256;
          if (v257)
            v257 = (unint64_t)sub_1D3D82278(v257);
          else
            v258 = 0;
          v259 = (__int32 *)(v257 + 4 * v255);
          *v259 = v252;
          v253 = (uint64_t)(v259 + 1);
          while (v244 != v254)
          {
            v260 = *((_DWORD *)v244 - 1);
            v244 -= 4;
            *--v259 = v260;
          }
          v372 = v259;
          v374 = v257 + 4 * v258;
          if (v254)
            operator delete(v254);
        }
        else
        {
          *(_DWORD *)v244 = v241.i32[1];
          v253 = (uint64_t)(v244 + 4);
        }
        v373 = (char *)v253;
        v71 = v333 + 1;
        v69 = vadd_s32(v69, v72);
      }
      while (v333 + 1 != v330);
      v70 = v325 + 1;
    }
    while (v325 + 1 != (uint64_t *)"N5zxing5aztec8DetectorE");
    v261 = *(unsigned int **)(v342 + 288);
    if (v261)
    {
      v262 = v261 + 2;
      do
        v263 = __ldxr(v262);
      while (__stxr(v263 + 1, v262));
    }
    v371 = (float *)v261;
    v390 = 0;
    v391 = 0;
    v392 = 0;
    sub_1D3D8E528(&v390, v375, (uint64_t)v376, ((char *)v376 - (_BYTE *)v375) >> 2);
    v387 = 0;
    v388 = 0;
    v389 = 0;
    sub_1D3D8E528(&v387, v372, v253, (v253 - (uint64_t)v372) >> 2);
    v264 = v391;
    v265 = (int)((unint64_t)((char *)v391 - (char *)v390) >> 2) / 2;
    v266 = (int)(float)((float)v265 * 0.8);
    if (v266 <= 4)
      v267 = 4;
    else
      v267 = v266;
    v268 = (void **)v387;
    if (v265 < (int)v267)
    {
      LOBYTE(v243) = 0;
      if (!v387)
        goto LABEL_295;
LABEL_294:
      operator delete(v268);
      goto LABEL_295;
    }
    v269 = v388;
    v347 = v390;
    v353 = (float *)v390 + 1;
    v270 = ((int)((unint64_t)((char *)v391 - (char *)v390) >> 2) / 2);
    while (1)
    {
      v271 = v371;
      if (v371)
      {
        v272 = (unsigned int *)(v371 + 2);
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
      }
      v386 = v271;
      v274 = sub_1D3DB9928(&v386, (const void **)&v390, (uint64_t)&v387);
      sub_1D3D6F2E0((unsigned int **)&v386);
      if (!v274)
        break;
      sub_1D3D8D5CC(&v384, v270);
      v13 = v342;
      v381 = 0;
      v382 = 0;
      v383 = 0;
      sub_1D3D8E528(&v381, v268, v269, (v269 - (uint64_t)v268) >> 2);
      v276 = sub_1D3DB983C(&v380, v371, v275);
      v277 = v265;
      if (v380)
      {
        (*(void (**)(unsigned int *, float **, float))(*(_QWORD *)v380 + 16))(v380, &v381, v276);
        v278 = (float *)v384;
        if (v270 >= 1)
        {
          v279 = v381 + 1;
          v280 = v353;
          v281 = (float *)v384;
          v282 = v265;
          do
          {
            v283 = *(v280 - 1) - *(v279 - 1);
            v284 = *v280;
            v280 += 2;
            *v281++ = (float)((float)(v284 - *v279) * (float)(v284 - *v279)) + (float)(v283 * v283);
            v279 += 2;
            --v282;
          }
          while (v282);
        }
        v285 = v278 + 1;
        v286 = v278 == (float *)v385 || v285 == (float *)v385;
        v287 = v278;
        if (!v286)
        {
          v288 = *v278;
          v287 = v278;
          v289 = v278 + 1;
          do
          {
            v290 = *v289++;
            v291 = v290;
            if (v288 < v290)
            {
              v288 = v291;
              v287 = v285;
            }
            v285 = v289;
          }
          while (v289 != (float *)v385);
        }
        if (*v287 >= 0.4)
        {
          v293 = (char *)v287 - (char *)v278;
          v294 = (char *)v347 + 2 * ((char *)v287 - (char *)v278);
          v295 = (char *)v264 - (v294 + 8);
          if (v295)
            memmove((char *)v347 + 2 * v293, v294 + 8, v295);
          v264 = (unsigned int **)&v294[v295];
          v391 = v264;
          v296 = (char *)v268 + 4 * (v293 >> 1);
          v297 = v269 - (_QWORD)(v296 + 8);
          if (v297)
            memmove((char *)v268 + 4 * (v293 >> 1), v296 + 8, v297);
          v269 = (uint64_t)&v296[v297];
          v388 = v269;
          v292 = 1;
          v13 = v342;
        }
        else
        {
          v292 = 0;
          LOBYTE(v243) = 1;
        }
      }
      else
      {
        v292 = 0;
        LOBYTE(v243) = 0;
      }
      sub_1D3D6F2E0(&v380);
      if (v381)
      {
        v382 = v381;
        operator delete(v381);
      }
      if (v384)
      {
        v385 = (unsigned int *)v384;
        operator delete(v384);
      }
      if ((v292 & 1) == 0)
        goto LABEL_334;
      v265 = v277 - 1;
      if (v270-- <= v267)
      {
        LOBYTE(v243) = 0;
        goto LABEL_334;
      }
    }
    LOBYTE(v243) = 0;
    v13 = v342;
LABEL_334:
    v268 = (void **)v387;
    if (v387)
      goto LABEL_294;
LABEL_295:
    if (v390)
      operator delete(v390);
    sub_1D3D6F2E0((unsigned int **)&v371);
    if ((v243 & 1) == 0)
      break;
    v376 = (float *)v375;
    v373 = (char *)v372;
    v68 = v321 + 1;
    v330 += 2;
    v320 = v321 >= v319;
  }
  while (v321 != v319);
  if (v372)
    operator delete(v372);
  if (v375)
    operator delete(v375);
  if (!v320)
    goto LABEL_48;
  sub_1D3DE2568((uint64_t *)&v390, v13, v322, v322, v318, v318);
  v299 = (unsigned int *)v390;
  if (v390)
  {
    v300 = (unsigned int *)(v390 + 1);
    do
      v301 = __ldxr(v300);
    while (__stxr(v301 + 1, v300));
  }
  if (v368)
    sub_1D3D6D13C(v368);
  v368 = v299;
  sub_1D3D6D10C((unsigned int **)&v390);
  v302 = v368;
  if (v368)
  {
    v303 = v367;
    v304 = v368 + 2;
    do
      v305 = __ldxr(v304);
    while (__stxr(v305 + 1, v304));
    v362 = v302;
    do
      v306 = __ldxr(v304);
    while (__stxr(v306 + 1, v304));
    v307 = (unsigned int *)*((_QWORD *)v303 + 8);
    if (v307)
      sub_1D3D6D13C(v307);
    *((_QWORD *)v303 + 8) = v302;
    sub_1D3D6D10C(&v362);
    v308 = v367;
    if (v367)
    {
      v309 = v367 + 2;
      do
        v310 = __ldxr(v309);
      while (__stxr(v310 + 1, v309));
    }
    v361 = v308;
    sub_1D3D7FD5C((uint64_t *)&v390, (uint64_t)&v361);
    v311 = (unsigned int *)v390;
    if (v390)
    {
      v312 = (unsigned int *)(v390 + 1);
      do
        v313 = __ldxr(v312);
      while (__stxr(v313 + 1, v312));
    }
    if (v364)
      sub_1D3D6D13C(v364);
    v364 = v311;
    sub_1D3D7F814((unsigned int **)&v390);
    sub_1D3D7F2D8(&v361);
    if (!v364)
    {
      *a1 = 0;
      v60 = v370;
      if (v370)
      {
        v314 = v370 + 2;
        do
          v315 = __ldxr(v314);
        while (__stxr(v315 + 1, v314));
      }
      goto LABEL_51;
    }
LABEL_25:
    v390 = 0;
    v391 = 0;
    v392 = 0;
    v36 = (char *)operator new(0x20uLL);
    v388 = (unint64_t)(v36 + 32);
    v389 = v36 + 32;
    *(_QWORD *)v36 = 0;
    *((_DWORD *)v36 + 2) = 0;
    *(int32x4_t *)(v36 + 12) = vdupq_lane_s32(v323, 0);
    *((_DWORD *)v36 + 7) = 0;
    v387 = (unsigned int ***)v36;
    (*(void (**)(_QWORD, unsigned int ****))(**(_QWORD **)(v13 + 288) + 16))(*(_QWORD *)(v13 + 288), &v387);
    v37 = (void **)v387;
    if (v388 - (unint64_t)v387 >= 5)
    {
      v38 = 0;
      v39 = *(int32x4_t *)(v13 + 112);
      v40 = *(int32x4_t *)(v13 + 96);
      v41 = vzip2q_s32(v40, v39);
      v41.i32[2] = *(_QWORD *)(v13 + 136);
      v343 = (float32x4_t)v41;
      v42 = vzip2q_s32(vzip1q_s32(v40, *(int32x4_t *)(v13 + 128)), vdupq_lane_s32(*(int32x2_t *)v39.i8, 1));
      v43 = vzip1q_s32(v40, v39);
      v43.i32[2] = *(_OWORD *)(v13 + 128);
      v338 = (float32x4_t)v43;
      v340 = (float32x4_t)v42;
      v44 = 1;
      do
      {
        v344 = *(float *)&v37[v38];
        v348 = *((float *)v37 + v44);
        v45 = operator new();
        v46 = (int32x4_t)vaddq_f32(v343, vmlaq_n_f32(vmulq_n_f32(v338, v344), v340, v348));
        *(_DWORD *)(v45 + 8) = 0;
        v47 = (unsigned int *)(v45 + 8);
        *(_QWORD *)v45 = &off_1E95AF250;
        *(float32x2_t *)(v45 + 12) = vdiv_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_laneq_s32(v46, 2));
        v384 = (unsigned int ***)v45;
        v48 = v391;
        if ((unint64_t)v391 >= v392)
        {
          v50 = (unsigned int **)sub_1D3DD1D5C((uint64_t)&v390, (unsigned int **)&v384);
        }
        else
        {
          *v391 = 0;
          do
            v49 = __ldxr(v47);
          while (__stxr(v49 + 1, v47));
          if (*v48)
            sub_1D3D6D13C(*v48);
          *v48 = (unsigned int *)v45;
          v50 = v48 + 1;
        }
        v391 = v50;
        v44 = (++v38 * 2) | 1;
        v37 = (void **)v387;
      }
      while (((v38 * 2) | 1uLL) < (uint64_t)(v388 - (_QWORD)v387) >> 2);
    }
    v51 = operator new();
    v359 = 0;
    v360 = 0;
    v358 = 0;
    v357 = &off_1E95AF9B0;
    v52 = *((_QWORD *)v364 + 4);
    if (v52)
    {
      v53 = (unsigned int *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v359 = v52;
    memset(v356, 0, sizeof(v356));
    sub_1D3D6D6A8((unsigned int *)v356, v390, v391, v391 - v390);
    sub_1D3D7F3AC((uint64_t)v355, (_QWORD *)v364 + 12);
    sub_1D3E17B10(v51, (uint64_t *)&v360, (uint64_t)&v357, v356, 10, v355);
    v55 = (unsigned int *)(v51 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    *a1 = v51;
    sub_1D3D7F520((_QWORD *)v355[1]);
    v384 = v356;
    sub_1D3D6D79C((void ***)&v384);
    sub_1D3D7F558(&v357);
    sub_1D3D7F598(&v360);
    if (v387)
    {
      v388 = (unint64_t)v387;
      operator delete(v387);
    }
    v387 = &v390;
    sub_1D3D6D79C((void ***)&v387);
  }
  else
  {
    *a1 = 0;
    v60 = v370;
    if (v370)
    {
      v316 = v370 + 2;
      do
        v317 = __ldxr(v316);
      while (__stxr(v317 + 1, v316));
    }
LABEL_51:
    *a1 = v60;
  }
  sub_1D3D7F814(&v364);
  sub_1D3D7F2D8(&v367);
LABEL_53:
  sub_1D3D6D10C(&v368);
  return sub_1D3D7F7E4(&v370);
}

void sub_1D3DE22C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unsigned int *a51)
{
  uint64_t v51;

  sub_1D3D7F814((unsigned int **)(v51 - 176));
  sub_1D3D7F2D8(&a51);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3DE2248);
}

void sub_1D3DE2304()
{
  JUMPOUT(0x1D3DE230CLL);
}

void sub_1D3DE2314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_1D3D7F814(&a54);
  sub_1D3D7F2D8(&a59);
  sub_1D3D6D10C(&a60);
  sub_1D3D7F7E4(&a62);
  _Unwind_Resume(a1);
}

void sub_1D3DE231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned int *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,unsigned int *a59,unsigned int *a60,uint64_t a61,unsigned int *a62,uint64_t a63)
{
  void *__p;
  void *a67;

  if (__p)
    operator delete(__p);
  if (a67)
    operator delete(a67);
  sub_1D3D7F814(&a54);
  sub_1D3D7F2D8(&a59);
  sub_1D3D6D10C(&a60);
  sub_1D3D7F7E4(&a62);
  _Unwind_Resume(a1);
}

void sub_1D3DE2568(uint64_t *a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  float *v17;
  char *v18;
  unint64_t v19;
  void *__p;
  void *v21[3];

  v12 = operator new();
  sub_1D3D938C4(v12, a3, a4);
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  *a1 = v12;
  sub_1D3D8D5CC(v21, 2 * a3);
  if (a4 >= 1)
  {
    v15 = 0;
    while (1)
    {
      if (a3 >= 1)
      {
        v16 = 0;
        v17 = (float *)((char *)v21[0] + 4);
        do
        {
          *(v17 - 1) = (float)((float)v16 + 0.5) + a5;
          *v17 = (float)((float)(int)v15 + 0.5) + a6;
          ++v16;
          v17 += 2;
        }
        while (a3 != v16);
      }
      sub_1D3E0B720(&__p, a2, (uint64_t *)v21);
      v18 = (char *)__p;
      if (a3 >= 1)
        break;
      if (__p)
        goto LABEL_15;
LABEL_16:
      if (++v15 == a4)
        goto LABEL_17;
    }
    v19 = 0;
    do
    {
      if (((*(_QWORD *)&v18[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v19) & 1) != 0)
        *(_DWORD *)(*(_QWORD *)(v12 + 48) + (((v19 + v15 * *(_QWORD *)(v12 + 24)) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v19 + v15 * *(_QWORD *)(v12 + 24));
      ++v19;
    }
    while (a3 != v19);
LABEL_15:
    operator delete(v18);
    goto LABEL_16;
  }
LABEL_17:
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_1D3DE2704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  unsigned int **v13;

  sub_1D3D6D10C(v13);
  _Unwind_Resume(a1);
}

void sub_1D3DE2750(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1D3D6D4F8();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_1D3D82278(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

float sub_1D3DE27E4(_QWORD *a1, int a2, int a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  float **v8;
  float result;
  float *v10;
  unsigned int v11;
  uint64_t v12;

  if (a3 - 4 <= -a2)
    v4 = -a2;
  else
    v4 = a3 - 4;
  v5 = a3 + 4;
  if (a3 + 4 >= a2)
    v5 = a2;
  *a4 = 2 * (a3 - v4);
  v6 = v5 - v4;
  v7 = (2 * (v5 - v4)) | 1;
  v8 = (float **)sub_1D3D8D5CC(a1, v7);
  if ((v6 & 0x80000000) == 0)
  {
    result = (float)v4;
    v10 = *v8;
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = v7;
    v12 = 4 * v11;
    do
    {
      *v10++ = result;
      result = result + 0.5;
      v12 -= 4;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1D3DE286C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v20;
  int v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;

  v6 = a6 - 1;
  if (a6 == 1 || (a3 & 0x80000000) != 0)
    return 0;
  v9 = 0;
  if ((a2 & 0x80000000) != 0)
    return v9;
  v11 = *(_DWORD *)(a1 + 56);
  v12 = -v11;
  v13 = *(_DWORD *)(a1 + 16);
  v14 = v13 & -v11--;
  v15 = *(_DWORD *)(a1 + 32);
  v16 = v15 & v11 | v14;
  v17 = v13 & v11 | v15 & v12;
  if (v16 <= (int)a3 || v17 <= (int)a2)
    return v9;
  v20 = a3 + v6 * a5;
  if (v20 < 0)
    return 0;
  v9 = 0;
  if (v20 < v16)
  {
    v22 = a2 + v6 * a4;
    if ((v22 & 0x80000000) == 0 && v22 < v17 && a6 >= 2)
    {
      v23 = sub_1D3D6D4A0((_QWORD *)a1, a2, a3);
      LODWORD(v9) = 0;
      v24 = a4 + (unint64_t)a2;
      v25 = a5 + (unint64_t)a3;
      do
      {
        v26 = sub_1D3D6D4A0((_QWORD *)a1, v24, v25);
        v9 = v9 + ((v23 ^ v26) & 1);
        if (((v23 ^ v26) & 1) != 0)
          v23 = v26;
        v24 += a4;
        v25 += a5;
        --v6;
      }
      while (v6);
    }
  }
  return v9;
}

float32x2_t sub_1D3DE298C(int32x4_t *a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  double v8;
  unint64_t i;

  v4 = vmul_f32(a3, a3);
  v4.i32[0] = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
  v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  v7 = vmul_n_f32(a3, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  v8 = COERCE_DOUBLE(vcvt_s32_f32(a2));
  for (i = LODWORD(v8); (LODWORD(v8) & 0x80000000) == 0; i = LODWORD(v8))
  {
    if (a1->i64[1] <= i)
      break;
    if ((HIDWORD(v8) & 0x80000000) != 0)
      break;
    if (a1[1].i64[0] <= (unint64_t)HIDWORD(v8))
      break;
    if (!sub_1D3E0BA8C(a1, v8))
      break;
    a2 = vadd_f32(v7, a2);
    v8 = COERCE_DOUBLE(vcvt_s32_f32(a2));
  }
  return vcvt_f32_s32(vsub_s32(vcvt_s32_f32(vsub_f32(a2, v7)), vcgtz_f32(v7)));
}

void sub_1D3DE2A40(uint64_t *a1, uint64_t a2, unsigned int a3, float a4, float a5, float a6, float a7)
{
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  void *__p;
  void *v22[3];

  sub_1D3D8D5CC(v22, 2 * a3);
  v14 = (float *)((char *)v22[0] + 4);
  v15 = a3;
  do
  {
    *(v14 - 1) = a4;
    *v14 = a5;
    a4 = a4 + a6;
    a5 = a5 + a7;
    v14 += 2;
    --v15;
  }
  while (v15);
  sub_1D3E0B720(&__p, a2, (uint64_t *)v22);
  v16 = operator new();
  sub_1D3D935D8(v16, a3);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = 0;
  *a1 = v16;
  v20 = (char *)__p;
  do
  {
    if (((*(_QWORD *)&v20[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v19) & 1) != 0)
      *(_DWORD *)(*(_QWORD *)(v16 + 48) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v19;
    ++v19;
  }
  while (a3 != v19);
  operator delete(v20);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_1D3DE2B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1D8254C54](v13, 0x1091C40C7871EBFLL);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DE3318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  float *v8;
  int v9;
  float v10;
  float v11;
  _DWORD *v12;
  int v13;

  v3 = *(_DWORD **)(a3 + 8);
  *v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(int *)(a1 + 12);
  if ((int)v5 + 1 >= v4)
  {
    v3[1] = v4;
    *(_DWORD *)a3 = 2;
    *(_DWORD *)a2 = 0;
    return 12;
  }
  v6 = 0;
  v7 = v5 + 1;
  v8 = (float *)(*(_QWORD *)a1 + 4 * v5 + 8);
  v9 = 1;
  do
  {
    v11 = *(v8 - 2);
    v10 = *(v8 - 1);
    if (v11 < v10 && v10 >= *v8)
    {
      v13 = v9++;
      v12 = v3;
      goto LABEL_9;
    }
    if (v11 > v10 && v10 <= *v8)
    {
      v12 = *(_DWORD **)(a2 + 8);
      v13 = v6++;
LABEL_9:
      v12[v13] = v7;
      v4 = *(_DWORD *)(a1 + 16);
    }
    ++v7;
    ++v8;
  }
  while (v7 < v4);
  v3[v9] = v4;
  *(_DWORD *)a3 = v9 + 1;
  *(_DWORD *)a2 = v6;
  if (v6)
    return 0;
  return 12;
}

uint64_t sub_1D3DE33E4(uint64_t *a1, unsigned int *a2, int *a3, int a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  float v27;
  float v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  uint64_t result;
  int v50;
  unint64_t *v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  int v71;
  unint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int *v80;
  unsigned int v81;
  uint64_t v82;
  int *v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _DWORD *v97;

  v6 = *a2;
  v7 = *a3;
  v8 = (int)v6 < 2 || (int)v7 < 2;
  if (v8)
    return 9;
  v13 = (int *)*((_QWORD *)a2 + 1);
  v97 = (_DWORD *)*((_QWORD *)a3 + 1);
  v14 = malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  v15 = malloc_type_malloc(4 * v6, 0x100004052888210uLL);
  if (a4 >= 0)
    v16 = a4;
  else
    v16 = a4 + 1;
  v17 = v16 >> 1;
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = v17;
  v19 = (float *)malloc_type_malloc(4 * *((int *)a1 + 2), 0x100004052888210uLL);
  v20 = (float *)malloc_type_malloc(4 * *((int *)a1 + 2), 0x100004052888210uLL);
  v21 = *((unsigned int *)a1 + 2);
  if ((int)v21 >= 1)
  {
    v22 = 0;
    v23 = *((_DWORD *)a1 + 4);
    v24 = *((int *)a1 + 3);
    v25 = -v18;
    v26 = -1;
    v27 = INFINITY;
    v28 = -INFINITY;
    v29 = -1;
    do
    {
      if (v25 <= v24)
        v30 = v24;
      else
        v30 = v25;
      if ((int)v24 <= (int)v22 - v18)
        v31 = v22 - v18;
      else
        v31 = v24;
      v32 = v18 + v22;
      if (v23 < v18 + (int)v22)
        v32 = v23;
      if (v26 < v31 && v29 < v31)
      {
        if (v31 <= v32)
        {
          v27 = INFINITY;
          v28 = -INFINITY;
          do
          {
            v34 = *a1;
            v35 = *(float *)(*a1 + 4 * v30);
            if (v35 > v28)
            {
              v28 = *(float *)(v34 + 4 * v30);
              v26 = v30;
            }
            if (v35 < v27)
            {
              v27 = *(float *)(v34 + 4 * v30);
              v29 = v30;
            }
            v8 = v30++ < v32;
          }
          while (v8);
          goto LABEL_54;
        }
        v28 = -INFINITY;
      }
      else
      {
        if (v26 >= v31)
        {
          if (*(float *)(*a1 + 4 * v32) > v28)
          {
            v28 = *(float *)(*a1 + 4 * v32);
            v26 = v32;
          }
        }
        else if (v31 <= v32)
        {
          v28 = -INFINITY;
          v36 = v30;
          do
          {
            if (*(float *)(*a1 + 4 * v36) > v28)
            {
              v28 = *(float *)(*a1 + 4 * v36);
              v26 = v36;
            }
            v8 = v36++ < v32;
          }
          while (v8);
        }
        else
        {
          v28 = -INFINITY;
        }
        if (v29 >= v31)
        {
          if (*(float *)(*a1 + 4 * v32) < v27)
          {
            v27 = *(float *)(*a1 + 4 * v32);
            v29 = v32;
          }
          goto LABEL_54;
        }
        if (v31 <= v32)
        {
          v27 = INFINITY;
          do
          {
            if (*(float *)(*a1 + 4 * v30) < v27)
            {
              v27 = *(float *)(*a1 + 4 * v30);
              v29 = v30;
            }
            v8 = v30++ < v32;
          }
          while (v8);
          goto LABEL_54;
        }
      }
      v27 = INFINITY;
LABEL_54:
      v19[v22] = v27;
      v20[v22++] = v28;
      ++v25;
    }
    while (v22 != v21);
  }
  v37 = (v7 - 1);
  v38 = *a1;
  if ((int)v7 < 3)
  {
    v39 = 0;
  }
  else
  {
    v39 = 0;
    v40 = v37 - 1;
    v41 = v97 + 1;
    do
    {
      v43 = *v41++;
      v42 = v43;
      if (*(float *)(v38 + 4 * v43) > (float)((float)(1.0 - a5) * (float)(v19[v43] + v20[v43])))
        v14[v39++] = v42;
      --v40;
    }
    while (v40);
  }
  v44 = 0;
  do
  {
    v46 = *v13++;
    v45 = v46;
    if (*(float *)(v38 + 4 * v46) < (float)((float)(v19[v46] + v20[v46]) * a5))
      v15[v44++] = v45;
    --v6;
  }
  while (v6);
  free(v19);
  free(v20);
  if (v39 < 2 || v44 < 2)
  {
    free(v14);
    free(v15);
    return 9;
  }
  if (*v14 <= *v15)
  {
    v48 = (int *)a2;
  }
  else
  {
    v47 = v39;
    v48 = (int *)a2;
    do
    {
      v8 = v47 > 1;
      v14[v47] = v14[(v47 - 1)];
      --v47;
    }
    while (v8);
    *v14 = *v97;
    ++v39;
  }
  if (v14[v39 - 1] < v15[v44 - 1])
    v14[v39++] = v97[v37];
  v50 = v39 + v44;
  v51 = (unint64_t *)malloc_type_malloc(8 * (v39 + v44), 0x100004000313F17uLL);
  if (v39 + v44 >= 1)
  {
    v52 = 0;
    v53 = 0;
    v54 = v50;
    v55 = v51;
    while (1)
    {
      if (v52 >= v39 || v53 >= v44)
      {
        if (v53 == v44 && v52 < v39)
        {
          v56 = v14[v52++];
          v59 = 0x100000000;
          v53 = v44;
        }
        else
        {
          if (v52 != v39 || v53 >= v44)
            goto LABEL_95;
          v56 = v15[v53++];
          v59 = 0xFFFFFFFF00000000;
          v52 = v39;
        }
      }
      else
      {
        v56 = v14[v52];
        v57 = v15[v53];
        v58 = (int)v56 < v57;
        if ((int)v56 < v57)
        {
          v59 = 0x100000000;
        }
        else
        {
          v56 = v15[v53];
          v59 = 0xFFFFFFFF00000000;
        }
        if (v58)
          ++v52;
        else
          ++v53;
      }
      *v55 = v59 | v56;
LABEL_95:
      ++v55;
      if (!--v54)
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = *((_QWORD *)v48 + 1);
        v64 = *((_QWORD *)a3 + 1);
        v65 = v50 - 1;
        v66 = -1;
        v67 = -1;
        while (1)
        {
          v68 = v60 + 1;
          if (HIDWORD(v51[v60]) == 1)
          {
            if ((int)v68 < v50 && HIDWORD(v51[(int)v68]) == 1)
            {
              v69 = v65 - (int)v68;
              v70 = &v51[(int)v68];
              v66 = v60;
              while (1)
              {
                if (*(float *)(*a1 + 4 * *(int *)v70) > *(float *)(*a1 + 4 * SLODWORD(v51[v66])))
                  v66 = v60 + 1;
                if (!v69)
                  break;
                v71 = *((_DWORD *)v70 + 3);
                --v69;
                ++v70;
                ++v60;
                if (v71 != 1)
                  goto LABEL_114;
              }
              v60 = v50 - 1;
              if (v67 < 0)
                goto LABEL_127;
            }
            else
            {
              v66 = v60;
LABEL_114:
              if (v67 < 0)
              {
LABEL_127:
                LODWORD(v73) = v51[v66];
LABEL_128:
                v74 = v62++;
                v75 = v64;
LABEL_129:
                *(_DWORD *)(v75 + 4 * v74) = v73;
                goto LABEL_130;
              }
            }
            if (v61 <= 0)
              goto LABEL_127;
            v73 = SLODWORD(v51[v66]);
            if (*(float *)(*a1 + 4 * v73) > (float)(*(float *)(*a1 + 4
                                                                    * *(int *)(v63 + 4 * (v61 - 1)))
                                                   + a6))
              goto LABEL_128;
            --v61;
          }
          else
          {
            if ((int)v68 < v50 && (v72 = &v51[v68], *((_DWORD *)v72 + 1) == -1))
            {
              v76 = v65 - v68;
              v67 = v60;
              while (1)
              {
                if (*(float *)(*a1 + 4 * *(int *)v72) < *(float *)(*a1 + 4 * SLODWORD(v51[v67])))
                  v67 = v60 + 1;
                if (!v76)
                  break;
                v77 = *((_DWORD *)v72 + 3);
                --v76;
                ++v72;
                ++v60;
                if (v77 != -1)
                  goto LABEL_109;
              }
              v60 = v50 - 1;
            }
            else
            {
              v67 = v60;
            }
LABEL_109:
            if (v66 < 0 || v62 <= 0)
            {
              LODWORD(v73) = v51[v67];
LABEL_119:
              v74 = v61++;
              v75 = v63;
              goto LABEL_129;
            }
            v73 = SLODWORD(v51[v67]);
            if (*(float *)(*a1 + 4 * v73) < (float)(*(float *)(*a1 + 4
                                                                    * *(int *)(v64 + 4 * (v62 - 1)))
                                                   - a6))
              goto LABEL_119;
            --v62;
          }
LABEL_130:
          if (++v60 >= v50)
          {
            *a3 = v62;
            *v48 = v61;
            goto LABEL_134;
          }
        }
      }
    }
  }
  v61 = 0;
  v62 = 0;
  v78 = 0;
  v79 = 0;
  *a3 = 0;
  *v48 = 0;
  if (v51)
  {
LABEL_134:
    free(v51);
    v78 = v61;
    v79 = v62;
  }
  free(v14);
  free(v15);
  result = 9;
  if (v78 >= 1 && v79 == v78 + 1)
  {
    v80 = (int *)*((_QWORD *)a3 + 1);
    if (*v48 < 2)
    {
      v81 = 0;
    }
    else
    {
      v81 = 0;
      v82 = (*v48 - 1);
      v83 = (int *)*((_QWORD *)v48 + 1);
      v86 = *v83;
      v84 = v83 + 1;
      v85 = v86;
      v87 = v80 + 1;
      v88 = *v80;
      do
      {
        v90 = *v84++;
        v89 = v90;
        v8 = v85 < v90;
        v92 = *v87++;
        v91 = v92;
        if (!v8 || v88 >= v91 || v88 >= v85)
          v81 = 9;
        v88 = v91;
        v85 = v89;
        --v82;
      }
      while (v82);
    }
    if (v80[*a3 - 2] >= v80[*a3 - 1])
      return 9;
    else
      return v81;
  }
  return result;
}

uint64_t sub_1D3DE3B58(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float *v6;
  float *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float *v29;
  float v30;
  int v31;
  float *v32;
  float v33;
  int v34;
  float v35;
  int v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  float *v61;
  float v62;
  int v63;
  float *v64;
  float v65;
  int v66;
  float v67;
  int v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  float *v74;
  float v75;
  float *v76;
  float v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;

  v6 = *(float **)(a5 + 8);
  v7 = *(float **)(a6 + 8);
  v8 = a2 - 1;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = a1 - 4;
    while (1)
    {
      v11 = *(int *)(a4 + 4 * v9);
      v12 = *(int *)(a3 + 4 * v9);
      v13 = (float)(*(float *)(a1 + 4 * v11) + *(float *)(a1 + 4 * v12)) * 0.5;
      if ((int)v11 <= (int)v12)
        v14 = *(_DWORD *)(a3 + 4 * v9);
      else
        v14 = *(_DWORD *)(a4 + 4 * v9);
      v15 = *(int *)(a4 + 4 * v9);
      do
      {
        if (v14 == v15)
          goto LABEL_10;
        v16 = v15++;
      }
      while (*(float *)(a1 + 4 + 4 * v16) >= v13);
      v14 = v16;
LABEL_10:
      if ((int)v12 >= (int)v11)
        v17 = *(_DWORD *)(a4 + 4 * v9);
      else
        v17 = *(_DWORD *)(a3 + 4 * v9);
      v18 = *(int *)(a3 + 4 * v9);
      do
      {
        if (v18 <= v11)
          goto LABEL_17;
        v19 = v18--;
      }
      while (*(float *)(v10 + 4 * v19) <= v13);
      v17 = v19;
LABEL_17:
      if (v14 == v17)
      {
        v20 = (float)v14;
      }
      else
      {
        v21 = v14 + 1;
        if ((_DWORD)v21 == v17)
        {
          v22 = (float)v14;
          v23 = *(float *)(a1 + 4 * v14);
          v24 = v13 - v23;
          v25 = *(float *)(a1 + 4 * v17);
        }
        else
        {
          v26 = 0.0;
          v27 = 0.0;
          if ((int)v21 < v17)
          {
            v28 = ~v14 + v17;
            v29 = (float *)(a1 + 4 * (int)v21);
            do
            {
              v30 = *v29++;
              v27 = v27 + v30;
              --v28;
            }
            while (v28);
          }
          if ((int)v11 <= v14)
          {
            v31 = v14 - v11 + 1;
            v32 = (float *)(a1 + 4 * v11);
            v26 = 0.0;
            do
            {
              v33 = *v32++;
              v26 = v26 + v33;
              --v31;
            }
            while (v31);
          }
          if (v17 <= (int)v12)
          {
            v34 = v12 + 1;
            v36 = v34 - v17;
            v37 = (float *)(a1 + 4 * v17);
            v35 = 0.0;
            do
            {
              v38 = *v37++;
              v35 = v35 + v38;
              --v36;
            }
            while (v36);
          }
          else
          {
            v34 = v12 + 1;
            v35 = 0.0;
          }
          v39 = v27 / (float)(v17 + ~v14);
          v40 = (float)((float)(v26 / (float)(v21 - v11)) + (float)(v35 / (float)(v34 - v17))) * 0.5;
          if (v39 >= v40)
          {
            if (v39 <= v40)
              v20 = (float)((float)v14 + (float)v17) * 0.5;
            else
              v20 = (float)((float)v17 + -1.0)
                  + (float)((float)(v13 - *(float *)(a1 + 4 * v17 - 4))
                          / (float)(*(float *)(a1 + 4 * v17) - *(float *)(a1 + 4 * v17 - 4)));
            goto LABEL_34;
          }
          v22 = (float)v14;
          v23 = *(float *)(a1 + 4 * v14);
          v24 = v13 - v23;
          v25 = *(float *)(a1 + 4 * v21);
        }
        v20 = (float)(v24 / (float)(v25 - v23)) + v22;
      }
LABEL_34:
      v6[v9++] = v20;
      if (v9 == a2)
      {
        v41 = 0;
        while (1)
        {
          v42 = v41;
          v43 = *(int *)(a3 + 4 * v41++);
          v44 = *(int *)(a4 + 4 * v41);
          v45 = (float)(*(float *)(a1 + 4 * v44) + *(float *)(a1 + 4 * v43)) * 0.5;
          if ((int)v43 <= (int)v44)
            v46 = *(_DWORD *)(a4 + 4 * v41);
          else
            v46 = v43;
          v47 = v43;
          while (v46 != v47)
          {
            v48 = v47++;
            if (*(float *)(a1 + 4 + 4 * v48) > v45)
            {
              v46 = v48;
              break;
            }
          }
          if ((int)v44 >= (int)v43)
            v49 = v43;
          else
            v49 = *(_DWORD *)(a4 + 4 * v41);
          v50 = *(int *)(a4 + 4 * v41);
          while (v50 > v43)
          {
            v51 = v50--;
            if (*(float *)(v10 + 4 * v51) < v45)
            {
              v49 = v51;
              break;
            }
          }
          if (v46 == v49)
          {
            v52 = (float)v46;
          }
          else
          {
            v53 = v46 + 1;
            if ((_DWORD)v53 == v49)
            {
              v54 = (float)v46;
              v55 = *(float *)(a1 + 4 * v46);
              v56 = v45 - v55;
              v57 = *(float *)(a1 + 4 * v49);
            }
            else
            {
              v58 = 0.0;
              v59 = 0.0;
              if ((int)v53 < v49)
              {
                v60 = ~v46 + v49;
                v61 = (float *)(a1 + 4 * (int)v53);
                do
                {
                  v62 = *v61++;
                  v59 = v59 + v62;
                  --v60;
                }
                while (v60);
              }
              if ((int)v43 <= v46)
              {
                v63 = v46 - v43 + 1;
                v64 = (float *)(a1 + 4 * v43);
                v58 = 0.0;
                do
                {
                  v65 = *v64++;
                  v58 = v58 + v65;
                  --v63;
                }
                while (v63);
              }
              if (v49 <= (int)v44)
              {
                v66 = v44 + 1;
                v68 = v66 - v49;
                v69 = (float *)(a1 + 4 * v49);
                v67 = 0.0;
                do
                {
                  v70 = *v69++;
                  v67 = v67 + v70;
                  --v68;
                }
                while (v68);
              }
              else
              {
                v66 = v44 + 1;
                v67 = 0.0;
              }
              v71 = v59 / (float)(v49 + ~v46);
              v72 = (float)((float)(v58 / (float)(v53 - v43)) + (float)(v67 / (float)(v66 - v49))) * 0.5;
              if (v71 <= v72)
              {
                if (v71 < v72)
                  v52 = (float)((float)v49 + -1.0)
                      + (float)((float)(v45 - *(float *)(a1 + 4 * v49 - 4))
                              / (float)(*(float *)(a1 + 4 * v49) - *(float *)(a1 + 4 * v49 - 4)));
                else
                  v52 = (float)((float)v46 + (float)v49) * 0.5;
                goto LABEL_70;
              }
              v54 = (float)v46;
              v55 = *(float *)(a1 + 4 * v46);
              v56 = v45 - v55;
              v57 = *(float *)(a1 + 4 * v53);
            }
            v52 = (float)(v56 / (float)(v57 - v55)) + v54;
          }
LABEL_70:
          v7[v42] = v52;
          if (v41 == a2)
          {
            *(_DWORD *)a5 = a2;
            *(_DWORD *)a6 = a2;
            if (a2 < 2)
            {
              v73 = 0;
            }
            else
            {
              v73 = 0;
              v74 = v6 + 1;
              v75 = *v6;
              v76 = v7 + 1;
              v77 = *v7;
              v78 = (a2 - 1);
              do
              {
                v79 = *v74++;
                v80 = v79;
                v83 = v75 <= v79;
                v81 = *v76++;
                v82 = v81;
                v83 = v83 && v77 <= v82;
                if (!v83 || v77 < v75)
                  v73 = 10;
                v77 = v82;
                v75 = v80;
                --v78;
              }
              while (v78);
            }
LABEL_91:
            if (v7[v8] >= v6[v8])
              return v73;
            else
              return 10;
          }
        }
      }
    }
  }
  *(_DWORD *)a5 = 0;
  *(_DWORD *)a6 = 0;
  if (!a2)
  {
    v73 = 0;
    v8 = -1;
    goto LABEL_91;
  }
  return 10;
}

uint64_t sub_1D3DE3FE4(int a1, float *a2, int a3, float *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  float *v18;
  float *v19;
  int v20;
  float *v21;
  unint64_t v22;
  float *v23;
  char *v24;
  uint64_t v25;
  unsigned int v27;
  float *v28;
  int v29;
  float v30;
  uint64_t i;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  uint64_t j;
  float v41;
  uint64_t k;
  int v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  unint64_t v64;
  int v65;
  _QWORD *v66;
  _DWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  void **v71;
  _QWORD *v72;
  unint64_t v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  int v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  char *v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  __int128 v120;
  __int128 v121;
  unsigned int *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  __int128 v132;
  __int128 v133;
  void *v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int *m;
  unsigned int v138;
  std::string::size_type size;
  char v140;
  unsigned int *v141;
  int8x8_t v142;
  unint64_t v143;
  uint8x8_t v144;
  unint64_t v145;
  uint64_t **v146;
  uint64_t *v147;
  unint64_t v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  int v153;
  std::string::size_type v154;
  char *v155;
  std::string::size_type v156;
  std::string *v157;
  float v158;
  float v159;
  uint64_t v160;
  float *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  char v166;
  unsigned int *v167;
  char *v168;
  int v169;
  void *v170;
  _BYTE *v171;
  void *__p;
  _BYTE *v173;
  void *v174;
  unsigned int *v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  std::string v181[3];

  v10 = **(_QWORD **)(a5 + 96);
  if (!v10)
  {
    v10 = operator new();
    *(_QWORD *)(v10 + 32) = 0;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_DWORD *)(v10 + 32) = 1065353216;
    v11 = *(uint64_t **)(a5 + 96);
    *v11 = v10;
    v11[1] = (uint64_t)sub_1D3DE501C;
    v11[2] = (uint64_t)sub_1D3DE5048;
  }
  v162 = a5;
  if (*(_BYTE *)(a5 + 88))
  {
    v12 = a2 + 1;
    v13 = a1 - 1;
    *(_BYTE *)(a5 + 88) = 0;
    a1 = a3;
    a2 = a4;
    a3 = v13;
    a4 = v12;
  }
  v14 = (a3 + a1 - 1);
  sub_1D3D8D5CC(&__p, (int)v14);
  if ((int)v14 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (float *)__p;
    do
    {
      v19 = &a4[v16];
      if ((v15 & 1) != 0)
        v20 = v16;
      else
        v20 = v17;
      if ((v15 & 1) != 0)
        v21 = a4;
      else
        v21 = a2;
      if ((v15 & 1) != 0)
        v19 = &a2[v17];
      else
        ++v17;
      if ((v15 & 1) != 0)
        ++v16;
      v18[v15++] = *v19 - v21[v20];
    }
    while (v14 != v15);
  }
  v23 = (float *)__p;
  v22 = (unint64_t)v173;
  v169 = 14;
  v170 = __p;
  v171 = v173;
  if (!__p)
    goto LABEL_21;
  v24 = (char *)__p + 4;
  v168 = (char *)__p + 4;
  if (v173 - (_BYTE *)__p < 60)
    goto LABEL_21;
  v27 = 0;
  v28 = (float *)((char *)__p + 56);
  v163 = 0xFFFFFFFFLL;
  v29 = 1;
  v165 = 0xFFFFFFFFLL;
  v161 = a2;
  do
  {
    if (sub_1D3DE5384(v23 + 9, 5))
    {
      v30 = 0.0;
      for (i = 9; i != 14; ++i)
        v30 = v30 + v23[i];
      v32 = 0;
      v33 = 0.0;
      do
      {
        v33 = v33 + *(float *)&v24[v32];
        v32 += 4;
      }
      while (v32 != 32);
      if (fabsf((float)((float)(v33 / 17.0) / (float)(v30 / 15.0)) + -1.0) < 0.1)
      {
        sub_1D3DE5440((uint64_t)&v174, (uint64_t)&v168, 1);
        v163 = (uint64_t)v174;
        v165 = (uint64_t)v175;
        v27 = v176;
        v29 = HIDWORD(v176);
        v179 = v177;
        v180 = v178;
        if ((_DWORD)v176)
        {
          if ((_DWORD)v176 != 1)
            goto LABEL_57;
          v34 = v23[12];
          if ((float)((float)(v34 * 0.75) + -2.0) < *v23 && (float)((float)(v34 * 1.25) + 2.0) > *v23)
            goto LABEL_55;
          v27 = 1;
        }
      }
    }
    v168 = (char *)(v23 + 2);
    if ((unint64_t)(v23 + 16) > v22)
      goto LABEL_53;
    sub_1D3D8D5CC(v181, 5uLL);
    v35 = 0;
    v36 = (float *)v181[0].__r_.__value_.__r.__words[0];
    v37 = v28;
    do
    {
      v38 = *v37--;
      v36[v35++] = v38;
    }
    while (v35 != 5);
    if (!sub_1D3DE5384(v36, (v181[0].__r_.__value_.__l.__size_ - (unint64_t)v36) >> 2))
      goto LABEL_48;
    v39 = 0.0;
    for (j = 10; j != 15; ++j)
      v39 = v39 + v23[j];
    v41 = 0.0;
    for (k = 2; k != 10; ++k)
      v41 = v41 + v23[k];
    if (fabsf((float)((float)(v41 / 17.0) / (float)(v39 / 15.0)) + -1.0) >= 0.1)
    {
LABEL_48:
      v43 = 0;
      if (!v36)
        goto LABEL_50;
LABEL_49:
      v181[0].__r_.__value_.__l.__size_ = (std::string::size_type)v36;
      operator delete(v36);
      goto LABEL_50;
    }
    v43 = 1;
    if (v36)
      goto LABEL_49;
LABEL_50:
    if (v43)
    {
      sub_1D3DE5440((uint64_t)&v174, (uint64_t)&v168, 0);
      v163 = (uint64_t)v174;
      v165 = (uint64_t)v175;
      v29 = HIDWORD(v176);
      v179 = v177;
      v180 = v178;
      if ((_DWORD)v176)
      {
        v24 = (char *)(v23 + 2);
        v27 = v176;
        goto LABEL_57;
      }
      v27 = 0;
    }
LABEL_53:
    v24 += 8;
    v168 = v24;
    v44 = v23 + 17;
    v28 += 2;
    v23 += 2;
  }
  while ((unint64_t)v44 <= v22);
  if (!v27)
  {
LABEL_21:
    v25 = 14;
    goto LABEL_22;
  }
LABEL_55:
  v27 = 1;
LABEL_57:
  v45 = 0;
  v46 = 0;
  v47 = 0;
  while (1)
  {
    if (v46 >= v47)
    {
      v49 = 0x8E38E38E38E38E39 * ((uint64_t)(v46 - v45) >> 2) + 1;
      if (v49 > 0x71C71C71C71C71CLL)
        sub_1D3D6D4F8();
      if (0x1C71C71C71C71C72 * ((uint64_t)(v47 - v45) >> 2) > v49)
        v49 = 0x1C71C71C71C71C72 * ((uint64_t)(v47 - v45) >> 2);
      if (0x8E38E38E38E38E39 * ((uint64_t)(v47 - v45) >> 2) >= 0x38E38E38E38E38ELL)
        v50 = 0x71C71C71C71C71CLL;
      else
        v50 = v49;
      if (v50)
        v50 = (unint64_t)sub_1D3DE5758(v50);
      else
        v51 = 0;
      v52 = v50 + 4 * ((uint64_t)(v46 - v45) >> 2);
      *(_QWORD *)&v53 = v163;
      *((_QWORD *)&v53 + 1) = v165;
      *(_OWORD *)v52 = v53;
      *(_DWORD *)(v52 + 16) = v27;
      *(_DWORD *)(v52 + 20) = v29;
      *(_QWORD *)(v52 + 24) = v179;
      *(_DWORD *)(v52 + 32) = v180;
      if (v46 == v45)
      {
        v57 = v50 + 4 * ((uint64_t)(v46 - v45) >> 2);
      }
      else
      {
        v54 = v50 + 4 * ((uint64_t)(v46 - v45) >> 2);
        do
        {
          v55 = *(_OWORD *)(v46 - 36);
          v56 = *(_OWORD *)(v46 - 20);
          v57 = v54 - 36;
          *(_DWORD *)(v54 - 4) = *(_DWORD *)(v46 - 4);
          *(_OWORD *)(v54 - 20) = v56;
          *(_OWORD *)(v54 - 36) = v55;
          v46 -= 36;
          v54 -= 36;
        }
        while (v46 != v45);
      }
      v47 = v50 + 36 * v51;
      v46 = v52 + 36;
      if (v45)
        operator delete((void *)v45);
      v45 = v57;
      v48 = v165;
    }
    else
    {
      v48 = v165;
      *(_QWORD *)v46 = v163;
      *(_QWORD *)(v46 + 8) = v165;
      *(_DWORD *)(v46 + 16) = v27;
      *(_DWORD *)(v46 + 20) = v29;
      *(_QWORD *)(v46 + 24) = v179;
      *(_DWORD *)(v46 + 32) = v180;
      v46 += 36;
    }
    if (v48 == -1)
      break;
    v168 = v24 + 84;
    if ((unint64_t)(v24 + 140) > v22)
      break;
    sub_1D3DE5440((uint64_t)&v174, (uint64_t)&v168, v27 >> 31);
    v163 = (uint64_t)v174;
    v27 = v176;
    v29 = HIDWORD(v176);
    v179 = v177;
    v180 = v178;
    if (!(_DWORD)v176)
      break;
    v165 = (uint64_t)v175;
    if ((_DWORD)v175 == -1)
    {
      v58 = 44;
      if ((v176 & 0x80000000) != 0)
        v58 = 36;
      v59 = *(float *)&v24[v58 + 84];
      v60 = *((float *)v24 + 34);
      v61 = (float)(v60 * 0.75) + -2.0;
      v62 = (float)(v60 * 1.25) + 2.0;
      v63 = v61 >= v59 || v62 <= v59;
      v24 += 84;
      if (v63)
        break;
    }
    else
    {
      v24 += 84;
    }
  }
  v25 = 14;
  if (v45 == v46)
    goto LABEL_197;
  v166 = 0;
  v64 = 0x8E38E38E38E38E39 * ((uint64_t)(v46 - v45) >> 2);
  if (v64 > 1)
    v65 = 1;
  else
    v65 = 14;
  v164 = v65;
  *(float *)(v162 + 24) = fminf((float)v64 * 0.5, 1.0);
  v66 = (_QWORD *)(v10 + 16);
  v67 = (_DWORD *)v45;
  while (2)
  {
    v68 = (int)v67[4];
    v69 = *(_QWORD *)(v10 + 8);
    if (v69)
    {
      v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
      v70.i16[0] = vaddlv_u8(v70);
      if (v70.u32[0] > 1uLL)
      {
        v47 = (int)v67[4];
        if (v69 <= v68)
          v47 = v68 % v69;
      }
      else
      {
        v47 = (v69 - 1) & v68;
      }
      v71 = *(void ***)(*(_QWORD *)v10 + 8 * v47);
      if (v71)
      {
        v72 = *v71;
        if (*v71)
        {
          do
          {
            v73 = v72[1];
            if (v73 == v68)
            {
              if (*((_DWORD *)v72 + 4) == (_DWORD)v68)
                goto LABEL_132;
            }
            else
            {
              if (v70.u32[0] > 1uLL)
              {
                if (v73 >= v69)
                  v73 %= v69;
              }
              else
              {
                v73 &= v69 - 1;
              }
              if (v73 != v47)
                break;
            }
            v72 = (_QWORD *)*v72;
          }
          while (v72);
        }
      }
    }
    v72 = operator new(0x30uLL);
    *v72 = 0;
    v72[1] = v68;
    *((_DWORD *)v72 + 4) = v67[4];
    v72[4] = 0;
    v72[5] = 0;
    v72[3] = 0;
    v74 = (float)(unint64_t)(*(_QWORD *)(v10 + 24) + 1);
    v75 = *(float *)(v10 + 32);
    if (!v69 || (float)(v75 * (float)v69) < v74)
    {
      v76 = (v69 & (v69 - 1)) != 0;
      if (v69 < 3)
        v76 = 1;
      v77 = v76 | (2 * v69);
      v78 = vcvtps_u32_f32(v74 / v75);
      if (v77 <= v78)
        v79 = v78;
      else
        v79 = v77;
      sub_1D3DE5C5C(v10, v79);
      v69 = *(_QWORD *)(v10 + 8);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v69 <= v68)
          v47 = v68 % v69;
        else
          v47 = v68;
      }
      else
      {
        v47 = (v69 - 1) & v68;
      }
    }
    v80 = *(_QWORD *)v10;
    v81 = *(_QWORD **)(*(_QWORD *)v10 + 8 * v47);
    if (v81)
    {
      *v72 = *v81;
      goto LABEL_130;
    }
    *v72 = *v66;
    *v66 = v72;
    *(_QWORD *)(v80 + 8 * v47) = v66;
    if (*v72)
    {
      v82 = *(_QWORD *)(*v72 + 8);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v82 >= v69)
          v82 %= v69;
      }
      else
      {
        v82 &= v69 - 1;
      }
      v81 = (_QWORD *)(*(_QWORD *)v10 + 8 * v82);
LABEL_130:
      *v81 = v72;
    }
    ++*(_QWORD *)(v10 + 24);
LABEL_132:
    v83 = v72[3];
    v47 = v72[4];
    if (v83 == v47)
    {
      v47 = v72[3];
      v84 = v47;
    }
    else
    {
      v84 = v72[3];
      while (!sub_1D3DE57A0((_DWORD *)v84, v67))
      {
        v84 += 36;
        if (v84 == v47)
        {
          v84 = v47;
          break;
        }
      }
    }
    if (v84 == v47)
    {
      v93 = v72[5];
      if (v47 >= v93)
      {
        v97 = 0x8E38E38E38E38E39 * ((uint64_t)(v47 - v83) >> 2) + 1;
        if (v97 > 0x71C71C71C71C71CLL)
          sub_1D3D6D4F8();
        v98 = 0x8E38E38E38E38E39 * ((uint64_t)(v93 - v83) >> 2);
        if (2 * v98 > v97)
          v97 = 2 * v98;
        if (v98 >= 0x38E38E38E38E38ELL)
          v99 = 0x71C71C71C71C71CLL;
        else
          v99 = v97;
        if (v99)
          v99 = (unint64_t)sub_1D3DE5758(v99);
        else
          v100 = 0;
        v101 = v99 + 4 * ((uint64_t)(v47 - v83) >> 2);
        v102 = *(_OWORD *)v67;
        v103 = *((_OWORD *)v67 + 1);
        *(_DWORD *)(v101 + 32) = v67[8];
        *(_OWORD *)v101 = v102;
        *(_OWORD *)(v101 + 16) = v103;
        v105 = (char *)v72[3];
        v104 = (char *)v72[4];
        v106 = v101;
        if (v104 != v105)
        {
          do
          {
            v107 = *(_OWORD *)(v104 - 36);
            v108 = *(_OWORD *)(v104 - 20);
            *(_DWORD *)(v106 - 4) = *((_DWORD *)v104 - 1);
            *(_OWORD *)(v106 - 20) = v108;
            *(_OWORD *)(v106 - 36) = v107;
            v106 -= 36;
            v104 -= 36;
          }
          while (v104 != v105);
          v104 = (char *)v72[3];
        }
        v96 = v101 + 36;
        v72[3] = v106;
        v72[4] = v101 + 36;
        v72[5] = v99 + 36 * v100;
        if (v104)
          operator delete(v104);
      }
      else
      {
        v94 = *(_OWORD *)v67;
        v95 = *((_OWORD *)v67 + 1);
        *(_DWORD *)(v47 + 32) = v67[8];
        *(_OWORD *)v47 = v94;
        *(_OWORD *)(v47 + 16) = v95;
        v96 = v47 + 36;
      }
      v72[4] = v96;
LABEL_161:
      v166 = 1;
    }
    else
    {
      v85 = v83 + 4 * ((uint64_t)(v84 - v83) >> 2);
      v86 = *(_DWORD *)(v85 + 20);
      *(_DWORD *)(v85 + 20) = v86 + 1;
      if (v84 != v83 && v86 >= *(_DWORD *)(v84 - 16))
      {
        do
        {
          v87 = *(_DWORD *)(v84 - 4);
          v88 = *(_OWORD *)(v84 - 36);
          v89 = *(_OWORD *)(v84 + 16);
          *(_OWORD *)(v84 - 36) = *(_OWORD *)v84;
          v90 = *(_OWORD *)(v84 - 20);
          *(_OWORD *)(v84 - 20) = v89;
          *(_DWORD *)(v84 - 4) = *(_DWORD *)(v84 + 32);
          *(_OWORD *)v84 = v88;
          *(_OWORD *)(v84 + 16) = v90;
          *(_DWORD *)(v84 + 32) = v87;
          if (v84 - 36 == v72[3])
            break;
          v91 = *(_DWORD *)(v84 - 16);
          v92 = *(_DWORD *)(v84 - 52);
          v84 -= 36;
        }
        while (v91 > v92);
        goto LABEL_161;
      }
    }
    v67 += 9;
    if (v67 != (_DWORD *)v46)
      continue;
    break;
  }
  if ((v166 & 1) == 0)
    goto LABEL_196;
  v25 = v164;
  if (*(_DWORD *)(v45 + 16) == 1)
  {
    v109 = *(_QWORD *)(v162 + 64);
    if (!*(_BYTE *)(v109 + 31))
    {
      *(_BYTE *)(v109 + 31) = 1;
      v110 = *(float *)(v45 + 32);
      *(float *)(v162 + 72) = v110;
      v111 = *(float *)(v46 - 4);
      *(float *)(v162 + 76) = v111;
      *(float *)(v109 + 48) = (float)(*v161 + *(float *)(v45 + 24)) - v110;
      *(float *)(v109 + 52) = v111 + (float)(*v161 + *(float *)(v46 - 8));
    }
  }
  v112 = sub_1D3DE57FC((_QWORD *)v10, 1);
  if (!v112)
    goto LABEL_198;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v113 = v112[3];
  v114 = v112[4];
  if (v113 == v114)
  {
LABEL_196:
    v25 = v164;
    goto LABEL_197;
  }
  v115 = 0;
  while (2)
  {
    v116 = *(_DWORD *)v113 / 211;
    v117 = v116 + 5;
    v63 = v116 < -5;
    v118 = v116 + 6;
    if (!v63)
      v118 = v117;
    v119 = v118 >> 1;
    if (*(_QWORD *)(v10 + 24) < (unint64_t)(v118 >> 1))
    {
LABEL_193:
      v113 += 36;
      if (v113 == v114)
      {
        if (v174)
          operator delete(v174);
        goto LABEL_196;
      }
      continue;
    }
    break;
  }
  if ((unint64_t)v115 >= v176)
  {
    v123 = (char *)v174;
    v124 = 0x8E38E38E38E38E39 * ((v115 - (_BYTE *)v174) >> 2);
    v125 = v124 + 1;
    if (v124 + 1 > 0x71C71C71C71C71CLL)
      sub_1D3D6D4F8();
    if (0x1C71C71C71C71C72 * ((uint64_t)(v176 - (_QWORD)v174) >> 2) > v125)
      v125 = 0x1C71C71C71C71C72 * ((uint64_t)(v176 - (_QWORD)v174) >> 2);
    if (0x8E38E38E38E38E39 * ((uint64_t)(v176 - (_QWORD)v174) >> 2) >= 0x38E38E38E38E38ELL)
      v126 = 0x71C71C71C71C71CLL;
    else
      v126 = v125;
    if (v126)
      v126 = (unint64_t)sub_1D3DE5758(v126);
    else
      v127 = 0;
    v128 = v126 + 36 * v124;
    v129 = *(_OWORD *)v113;
    v130 = *(_OWORD *)(v113 + 16);
    *(_DWORD *)(v128 + 32) = *(_DWORD *)(v113 + 32);
    *(_OWORD *)v128 = v129;
    *(_OWORD *)(v128 + 16) = v130;
    if (v115 == v123)
    {
      v134 = (void *)(v126 + 36 * v124);
    }
    else
    {
      v131 = v126 + 36 * v124;
      do
      {
        v132 = *(_OWORD *)(v115 - 36);
        v133 = *(_OWORD *)(v115 - 20);
        v134 = (void *)(v131 - 36);
        *(_DWORD *)(v131 - 4) = *((_DWORD *)v115 - 1);
        *(_OWORD *)(v131 - 20) = v133;
        *(_OWORD *)(v131 - 36) = v132;
        v115 -= 36;
        v131 -= 36;
      }
      while (v115 != v123);
    }
    v122 = (unsigned int *)(v128 + 36);
    v174 = v134;
    v176 = v126 + 36 * v127;
    if (v123)
      operator delete(v123);
  }
  else
  {
    v120 = *(_OWORD *)v113;
    v121 = *(_OWORD *)(v113 + 16);
    *((_DWORD *)v115 + 8) = *(_DWORD *)(v113 + 32);
    *(_OWORD *)v115 = v120;
    *((_OWORD *)v115 + 1) = v121;
    v122 = (unsigned int *)(v115 + 36);
  }
  v175 = v122;
  if ((sub_1D3DE58B0((_QWORD *)v10, (int *)*(&off_1E95B3688 + 2 * v119 - 4) + 1, (int *)*(&off_1E95B3688 + 2 * v119 - 4) + (_QWORD)*(&off_1E95B3688 + 2 * v119 - 3), (unint64_t *)&v174) & 1) == 0)
  {
    v115 = (char *)(v175 - 9);
    v175 -= 9;
    goto LABEL_193;
  }
  v136 = (unsigned int *)v174;
  v135 = v175;
  if (v174 == v175)
  {
    v25 = v164;
    goto LABEL_255;
  }
  v174 = 0;
  v175 = 0;
  v176 = 0;
  sub_1D3DE5B4C((unint64_t *)&v174, v136[2]);
  for (m = v136 + 9; m != v135; m += 9)
  {
    sub_1D3DE5B4C((unint64_t *)&v174, *m);
    v138 = m[2];
    if (v138 != -1)
      sub_1D3DE5B4C((unint64_t *)&v174, v138);
  }
  sub_1D3DB67C0(v181, (uint64_t *)&v174);
  size = HIBYTE(v181[0].__r_.__value_.__r.__words[2]);
  v140 = HIBYTE(v181[0].__r_.__value_.__r.__words[2]);
  if ((v181[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v181[0].__r_.__value_.__l.__size_;
  if (!size)
  {
    v25 = v164;
    goto LABEL_251;
  }
  v167 = v136;
  v141 = v136;
  while (2)
  {
    v142 = *(int8x8_t *)(v10 + 8);
    if (!*(_QWORD *)&v142)
      goto LABEL_225;
    v143 = (int)v141[4];
    v144 = (uint8x8_t)vcnt_s8(v142);
    v144.i16[0] = vaddlv_u8(v144);
    if (v144.u32[0] > 1uLL)
    {
      v145 = (int)v141[4];
      if (*(_QWORD *)&v142 <= v143)
        v145 = v143 % *(_QWORD *)&v142;
    }
    else
    {
      v145 = (*(_QWORD *)&v142 - 1) & v143;
    }
    v146 = *(uint64_t ***)(*(_QWORD *)v10 + 8 * v145);
    if (!v146)
      goto LABEL_225;
    v147 = *v146;
    if (!*v146)
      goto LABEL_225;
    while (2)
    {
      v148 = v147[1];
      if (v148 != v143)
      {
        if (v144.u32[0] > 1uLL)
        {
          if (v148 >= *(_QWORD *)&v142)
            v148 %= *(_QWORD *)&v142;
        }
        else
        {
          v148 &= *(_QWORD *)&v142 - 1;
        }
        if (v148 != v145)
          goto LABEL_225;
        goto LABEL_224;
      }
      if (*((_DWORD *)v147 + 4) != (_DWORD)v143)
      {
LABEL_224:
        v147 = (uint64_t *)*v147;
        if (!v147)
          goto LABEL_225;
        continue;
      }
      break;
    }
    v150 = (_DWORD *)v147[3];
    v149 = (_DWORD *)v147[4];
    if (v150 == v149)
    {
      v149 = (_DWORD *)v147[3];
      v151 = v149;
    }
    else
    {
      v151 = (_DWORD *)v147[3];
      while (!sub_1D3DE57A0(v151, v141))
      {
        v151 += 9;
        if (v151 == v149)
        {
          v151 = v149;
          break;
        }
      }
    }
    if (v151 != v149)
    {
      v152 = &v150[v151 - v150];
      v153 = v152[5] - 1;
      v152[5] = v153;
      if (!v153)
      {
        if (v149 != v151 + 9)
          memmove(v151, v151 + 9, (char *)v149 - (char *)(v151 + 9));
        v147[4] = (uint64_t)(v149 - 9);
      }
    }
LABEL_225:
    v141 += 9;
    if (v141 != v135)
      continue;
    break;
  }
  if (v175 == v174)
    sub_1D3DB6E04();
  v136 = v167;
  if (*(_BYTE *)v174)
    *(_DWORD *)(v162 + 4) = 4;
  v154 = HIBYTE(v181[0].__r_.__value_.__r.__words[2]);
  if ((v181[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v154 = v181[0].__r_.__value_.__l.__size_;
  *(_QWORD *)(v162 + 8) = v154;
  v155 = (char *)malloc_type_malloc(v154 + 1, 0xEADD3F3FuLL);
  *(_QWORD *)(v162 + 16) = v155;
  v156 = HIBYTE(v181[0].__r_.__value_.__r.__words[2]);
  if ((v181[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v157 = v181;
  else
    v157 = (std::string *)v181[0].__r_.__value_.__r.__words[0];
  if ((v181[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v156 = v181[0].__r_.__value_.__l.__size_;
  strlcpy(v155, (const char *)v157, v156 + 1);
  v25 = 0;
  *(_DWORD *)(v162 + 24) = 1065353216;
  v158 = *(float *)(v45 + 32);
  *(float *)(v162 + 72) = v158;
  v159 = *(float *)(v46 - 4);
  *(float *)(v162 + 76) = v159;
  v160 = *(_QWORD *)(v162 + 64);
  *(float *)(v160 + 48) = (float)(*v161 + *(float *)(v45 + 24)) - v158;
  *(float *)(v160 + 52) = v159 + (float)(*v161 + *(float *)(v46 - 8));
  v140 = HIBYTE(v181[0].__r_.__value_.__r.__words[2]);
LABEL_251:
  if (v140 < 0)
    operator delete(v181[0].__r_.__value_.__l.__data_);
  if (v174)
    operator delete(v174);
LABEL_255:
  if (v136)
    operator delete(v136);
LABEL_197:
  if (v45)
LABEL_198:
    operator delete((void *)v45);
LABEL_22:
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  return v25;
}

void sub_1D3DE4F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);
  if (v38)
    operator delete(v38);
  if (v37)
    operator delete(v37);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3DE501C(uint64_t result)
{
  if (result)
  {
    sub_1D3DE60F4(result);
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

uint64_t sub_1D3DE5048(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 32);
  v29 = v3;
  sub_1D3DE5C5C(v3, *(_QWORD *)(a1 + 8));
  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v28 = (_QWORD *)(v3 + 16);
    do
    {
      v5 = *((int *)v4 + 4);
      v6 = *(_QWORD *)(v3 + 8);
      if (v6)
      {
        v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v7.i16[0] = vaddlv_u8(v7);
        if (v7.u32[0] > 1uLL)
        {
          v1 = *((int *)v4 + 4);
          if (v6 <= v5)
            v1 = v5 % v6;
        }
        else
        {
          v1 = (v6 - 1) & v5;
        }
        v8 = *(uint64_t ***)(*(_QWORD *)v3 + 8 * v1);
        if (v8)
        {
          for (i = *v8; i; i = (uint64_t *)*i)
          {
            v10 = i[1];
            if (v10 == v5)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v5)
                goto LABEL_44;
            }
            else
            {
              if (v7.u32[0] > 1uLL)
              {
                if (v10 >= v6)
                  v10 %= v6;
              }
              else
              {
                v10 &= v6 - 1;
              }
              if (v10 != v1)
                break;
            }
          }
        }
      }
      v11 = operator new(0x30uLL);
      *v11 = 0;
      v11[1] = v5;
      v12 = *((_DWORD *)v4 + 4);
      v11[3] = 0;
      *((_DWORD *)v11 + 4) = v12;
      v11[4] = 0;
      v11[5] = 0;
      v14 = (_BYTE *)v4[3];
      v13 = (_BYTE *)v4[4];
      v15 = v13 - v14;
      if (v13 != v14)
      {
        if (0x8E38E38E38E38E39 * (v15 >> 2) >= 0x71C71C71C71C71DLL)
          sub_1D3D6D4F8();
        v16 = (char *)sub_1D3DE5758(0x8E38E38E38E38E39 * (v15 >> 2));
        v11[3] = v16;
        v11[4] = v16;
        v11[5] = &v16[36 * v17];
        memmove(v16, v14, v15);
        v11[4] = &v16[4 * (v15 >> 2)];
        v3 = v29;
      }
      v18 = (float)(unint64_t)(*(_QWORD *)(v3 + 24) + 1);
      v19 = *(float *)(v3 + 32);
      if (!v6 || (float)(v19 * (float)v6) < v18)
      {
        v20 = (v6 & (v6 - 1)) != 0;
        if (v6 < 3)
          v20 = 1;
        v21 = v20 | (2 * v6);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        sub_1D3DE5C5C(v3, v23);
        v6 = *(_QWORD *)(v3 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v6 <= v5)
            v1 = v5 % v6;
          else
            v1 = v5;
        }
        else
        {
          v1 = (v6 - 1) & v5;
        }
      }
      v24 = *(_QWORD *)v3;
      v25 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v1);
      if (v25)
      {
        *v11 = *v25;
      }
      else
      {
        *v11 = *v28;
        *v28 = v11;
        *(_QWORD *)(v24 + 8 * v1) = v28;
        if (!*v11)
          goto LABEL_43;
        v26 = *(_QWORD *)(*v11 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v26 >= v6)
            v26 %= v6;
        }
        else
        {
          v26 &= v6 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)v3 + 8 * v26);
      }
      *v25 = v11;
LABEL_43:
      ++*(_QWORD *)(v3 + 24);
LABEL_44:
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return v3;
}

void sub_1D3DE5324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = sub_1D3DE60F4(a10);
  MEMORY[0x1D8254C54](v11, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

BOOL sub_1D3DE5384(float *a1, int a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v13;

  v2 = 0.0;
  v3 = 0.0;
  if (a2)
  {
    v4 = 4 * a2;
    v5 = a1;
    do
    {
      v6 = *v5++;
      v3 = v3 + v6;
      v4 -= 4;
    }
    while (v4);
  }
  v7 = 0;
  v8 = v3 / 15.0;
  if (v8 < 4.0)
    v2 = 0.5;
  v9 = v2 + (float)(v8 * 0.5);
  v10 = (float *)&unk_1D3E6BB7C;
  do
  {
    v11 = a1[v7];
    if ((float)((float)(v8 * *(v10 - 1)) - v9) > v11 || (float)(v9 + (float)(v8 * *v10)) < v11)
      return 0;
    v10 += 2;
    ++v7;
  }
  while (v7 != 5);
  v13 = a1[1] + a1[2];
  return (float)((float)(v8 * 12.0) + v9) >= v13 && (float)((float)(v8 * 10.0) - v9) <= v13;
}

float *sub_1D3DE5440(uint64_t a1, uint64_t a2, int a3)
{
  float *result;
  float v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  unsigned int v17;
  float v18;
  float *v19;
  int v20;
  uint64_t v21;
  float *v22;
  float v23;
  unint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  float *v28;
  float v29;
  int v30;
  unint64_t v31;
  float *v32;
  __int128 v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;

  result = *(float **)a2;
  v6 = 0.0;
  for (i = 8; i != 13; ++i)
    v6 = v6 + result[i];
  if (v6 >= 15.0)
  {
    v9 = 0;
    v10 = v6 / 15.0;
    v11 = v6 * 0.2;
    v12 = -1;
    v13 = v11;
    do
    {
      v14 = 0;
      v15 = 0.0;
      v16 = 4;
      while (1)
      {
        v17 = a3 ? v14 : v16;
        v18 = fabsf(result[v14 + 8] - (float)((float)dword_1D3E6BBA0[5 * v9 + v17] * v10));
        if (v18 > (float)(v10 * 0.45))
          break;
        v15 = v15 + v18;
        ++v14;
        --v16;
        if (v14 == 5)
          goto LABEL_14;
      }
      v15 = v11;
LABEL_14:
      if (v15 < v13)
      {
        v12 = v9;
        v13 = v15;
      }
      ++v9;
    }
    while (v9 != 6);
    if (a3)
      v8 = v12 + 1;
    else
      v8 = ~v12;
    if (!v8)
      goto LABEL_40;
  }
  else
  {
    v8 = -1;
  }
  result = (float *)sub_1D3DE5EA0(result, 8, v8, 0);
  v19 = result;
  if ((_DWORD)result == -1)
    goto LABEL_40;
  if (v8 == 1)
  {
    v20 = (int)result / 211 + 6;
    if ((int)result / 211 >= -5)
      v20 = (int)result / 211 + 5;
    if ((int)result < -421 || ((v20 >> 1) - 2) > 9)
      goto LABEL_40;
  }
  v21 = 0;
  v22 = *(float **)a2;
  v23 = 0.0;
  do
  {
    v23 = v23 + *(float *)(*(_QWORD *)a2 + 32 + v21);
    v21 += 4;
  }
  while (v21 != 20);
  LODWORD(v24) = 0;
  v25 = v22 + 13;
  v26 = v23 / 15.0;
  if (*(_QWORD *)(a2 + 16) <= (unint64_t)(v22 + 13) && (unint64_t)(v22 + 21) <= *(_QWORD *)(a2 + 24))
  {
    v27 = 0;
    v28 = v22 + 13;
    v29 = 0.0;
    do
      v29 = v29 + v28[v27++];
    while (v27 != 8);
    if (fabsf((float)((float)(v29 / 17.0) / v26) + -1.0) >= 0.1)
    {
      LODWORD(v24) = 0;
    }
    else
    {
      v30 = 1;
      v31 = sub_1D3DE5EA0(v25, 8, v8, 1);
      v24 = HIDWORD(v31);
      if ((_DWORD)v31 != -1)
        goto LABEL_43;
    }
  }
  result = (float *)wmemchr(dword_1D3E6C01C, v8, 7uLL);
  v32 = (float *)&dword_1D3E6C01C[7];
  if (result)
    v32 = result;
  if ((char *)v32 - (char *)dword_1D3E6C01C == 28)
  {
LABEL_40:
    *(_QWORD *)&v33 = 0xFFFFFFFFLL;
    *((_QWORD *)&v33 + 1) = 0xFFFFFFFFLL;
    *(_OWORD *)a1 = v33;
    *(_QWORD *)(a1 + 16) = 0x100000000;
    *(_QWORD *)(a1 + 24) = 0;
    v26 = 0.0;
    goto LABEL_41;
  }
  v30 = 0;
  LODWORD(v31) = -1;
LABEL_43:
  result = (float *)(v31 | ((unint64_t)v24 << 32));
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = 1;
  v34 = *(float **)(a2 + 16);
  v35 = *(float **)a2;
  v36 = 0.0;
  v37 = 0.0;
  if (v34 != *(float **)a2)
  {
    v38 = *(float **)(a2 + 16);
    do
    {
      v39 = *v38++;
      v37 = v37 + v39;
    }
    while (v38 != v35);
  }
  *(float *)(a1 + 24) = v37;
  v40 = 5;
  v41 = 8;
  if (v30)
  {
    v40 = 8;
    v41 = 13;
  }
  v42 = &v35[v41 + v40];
  if (v34 != v42)
  {
    v36 = 0.0;
    do
    {
      v43 = *v34++;
      v36 = v36 + v43;
    }
    while (v34 != v42);
  }
  *(float *)(a1 + 28) = v36;
LABEL_41:
  *(float *)(a1 + 32) = v26;
  return result;
}

void *sub_1D3DE5758(unint64_t a1)
{
  if (a1 >= 0x71C71C71C71C71DLL)
    sub_1D3D6D50C();
  return operator new(36 * a1);
}

BOOL sub_1D3DE57A0(_DWORD *a1, _DWORD *a2)
{
  return a1[4] == a2[4] && *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t *sub_1D3DE57FC(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_1D3DE58B0(_QWORD *a1, int *a2, int *a3, unint64_t *a4)
{
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char v13;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  int v37;

  if (a2 == a3)
  {
    v34 = (_DWORD *)a4[1];
    if ((_DWORD *)*a4 == v34)
    {
      v37 = 0;
    }
    else
    {
      v35 = 0;
      v36 = (_DWORD *)*a4;
      do
      {
        v35 += v36[1] + v36[3];
        v36 += 9;
      }
      while (v36 != v34);
      v37 = v35 % 211;
    }
    return (uint64_t *)(*(_DWORD *)*a4 == v37
                                       + 211
                                       * (1908874354 * (((unint64_t)v34 - *a4) >> 2)
                                        - (*(v34 - 7) == -1))
                                       - 844);
  }
  else
  {
    result = sub_1D3DE57FC(a1, *a2);
    if (result)
    {
      v9 = result;
      v11 = result[3];
      v10 = result[4];
      if (v11 == v10)
        return 0;
      v12 = a2 + 1;
      v13 = 1;
      do
      {
        if (*(_DWORD *)(v11 + 8) != -1 || v12 == a3)
        {
          v15 = a4[1];
          v16 = a4[2];
          if (v15 >= v16)
          {
            v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - *a4) >> 2);
            v21 = v20 + 1;
            if (v20 + 1 > 0x71C71C71C71C71CLL)
              sub_1D3D6D4F8();
            v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - *a4) >> 2);
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x38E38E38E38E38ELL)
              v23 = 0x71C71C71C71C71CLL;
            else
              v23 = v21;
            if (v23)
              v23 = (unint64_t)sub_1D3DE5758(v23);
            else
              v24 = 0;
            v25 = v23 + 36 * v20;
            v26 = *(_OWORD *)v11;
            v27 = *(_OWORD *)(v11 + 16);
            *(_DWORD *)(v25 + 32) = *(_DWORD *)(v11 + 32);
            *(_OWORD *)v25 = v26;
            *(_OWORD *)(v25 + 16) = v27;
            v29 = (_DWORD *)*a4;
            v28 = (_DWORD *)a4[1];
            v30 = v25;
            if (v28 != (_DWORD *)*a4)
            {
              do
              {
                v31 = *(_OWORD *)(v28 - 9);
                v32 = *(_OWORD *)(v28 - 5);
                *(_DWORD *)(v30 - 4) = *(v28 - 1);
                *(_OWORD *)(v30 - 20) = v32;
                *(_OWORD *)(v30 - 36) = v31;
                v30 -= 36;
                v28 -= 9;
              }
              while (v28 != v29);
              v28 = (_DWORD *)*a4;
            }
            v19 = v25 + 36;
            *a4 = v30;
            a4[1] = v25 + 36;
            a4[2] = v23 + 36 * v24;
            if (v28)
              operator delete(v28);
          }
          else
          {
            v17 = *(_OWORD *)v11;
            v18 = *(_OWORD *)(v11 + 16);
            *(_DWORD *)(v15 + 32) = *(_DWORD *)(v11 + 32);
            *(_OWORD *)v15 = v17;
            *(_OWORD *)(v15 + 16) = v18;
            v19 = v15 + 36;
          }
          a4[1] = v19;
          if ((sub_1D3DE58B0(a1, v12, a3, a4) & 1) != 0)
            return (uint64_t *)1;
          a4[1] -= 36;
          v10 = v9[4];
        }
        result = 0;
        v11 += 36;
        v33 = (v11 != v10) & v13;
        v13 = 0;
      }
      while ((v33 & 1) != 0);
    }
  }
  return result;
}

void sub_1D3DE5B4C(unint64_t *a1, unsigned int a2)
{
  _BYTE *v4;
  int v5;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = (_BYTE *)a1[1];
  v5 = 12;
  do
  {
    v6 = (a2 >> --v5) & 1;
    v7 = a1[2];
    if ((unint64_t)v4 >= v7)
    {
      v9 = *a1;
      v10 = &v4[-*a1];
      v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0)
        sub_1D3D6D4F8();
      v12 = v7 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)operator new(v13);
      else
        v14 = 0;
      v15 = &v10[(_QWORD)v14];
      v16 = &v10[(_QWORD)v14];
      *v16 = v6;
      v8 = v16 + 1;
      if (v4 != (_BYTE *)v9)
      {
        v17 = &v4[~v9];
        do
        {
          v18 = *--v4;
          (v17--)[(_QWORD)v14] = v18;
        }
        while (v4 != (_BYTE *)v9);
        v4 = (_BYTE *)*a1;
        v15 = v14;
      }
      *a1 = (unint64_t)v15;
      a1[1] = (unint64_t)v8;
      a1[2] = (unint64_t)&v14[v13];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v4 = v6;
      v8 = v4 + 1;
    }
    a1[1] = (unint64_t)v8;
    v4 = v8;
  }
  while (v5);
}

void sub_1D3DE5C5C(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_1D3D6D50C();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_1D3DE5E54(char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1D3DE5EA0(float *a1, int a2, int a3, int a4)
{
  uint64_t v4;
  float v5;
  float *v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  int v30;
  int *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t v41;
  int32x4_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v43[0] = &v42;
  v43[1] = &v41;
  if (a2)
  {
    v4 = 4 * a2;
    v5 = 0.0;
    v6 = a1;
    do
    {
      v7 = *v6++;
      v5 = v5 + v7;
      v4 -= 4;
    }
    while (v4);
  }
  else
  {
    v5 = 0.0;
  }
  v8 = 0;
  v9 = 7;
  if (!a4)
    v9 = 0;
  v10 = &a1[v9];
  v11 = -4;
  if (!a4)
    v11 = 4;
  v12 = v5 / 17.0;
  do
  {
    *(_DWORD *)(v43[v8 & 1] + 4 * (v8 >> 1)) = (int)(float)((float)(*v10 / v12) + 0.5);
    ++v8;
    v10 = (float *)((char *)v10 + v11);
  }
  while (v8 != 8);
  v13 = vaddvq_s32(v42);
  v14 = vaddvq_s32(v41);
  v15 = vaddvq_s32(vaddq_s32(v41, v42));
  v16 = v13 - 4;
  if (v13 <= 13)
    v17 = 13;
  else
    v17 = v13;
  if (v14 >= 4)
    v18 = 4;
  else
    v18 = v14;
  v19 = v18 - 4;
  v22 = v15 == 17 && (v16 & (v16 >> 31)) == 13 - v17 && v19 == -((v14 - 13) & ~((v14 - 13) >> 31)) && (v13 & 1) == 0;
  if (!v22 || (v14 & 1) == 0)
    goto LABEL_39;
  v23 = 0;
  v24 = 0;
  v25 = a3 >= 0 ? a3 : -a3;
  v26 = (int)(((a3 >> 30) & 2 | (4 * v25) | a4) - 4);
  v27 = (int *)((char *)&unk_1D3E6BC18 + 32 * v26);
  do
  {
    v28 = *v27;
    v27 += 2;
    v24 += v28 * v42.i32[v23++];
  }
  while (v23 != 4);
  v29 = 0;
  v30 = 0;
  v31 = (int *)((char *)&unk_1D3E6BC18 + 32 * v26 + 4);
  do
  {
    v32 = *v31;
    v31 += 2;
    v30 += v32 * v41.i32[v29++];
  }
  while (v29 != 4);
  if (v16 <= 9)
  {
    v33 = (v30 + v24);
    v34 = (13 - v13) >> 1;
    v35 = dword_1D3E75B48[v34];
    v36 = 9 - v35;
    v37 = sub_1D3D7CD24(&v42, v35, 1);
    v38 = sub_1D3D7CD24(&v41, v36, 0) + dword_1D3E75B5C[v34] * v37 + dword_1D3E75B70[v34];
    v39 = v33 << 32;
  }
  else
  {
LABEL_39:
    v39 = 0;
    v38 = 0xFFFFFFFFLL;
  }
  return v39 | v38;
}

uint64_t sub_1D3DE60F4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void *sub_1D3DE6158(uint64_t a1, void *__dst, uint64_t a3, _QWORD *a4)
{
  void *result;

  result = memcpy(__dst, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 8));
  *a4 = *(_QWORD *)(a1 + 8);
  return result;
}

BOOL sub_1D3DE6190(int a1, uint64_t a2, int a3)
{
  return a1 > 11 && a3 < 233;
}

uint64_t MRCSampleGetTypeID()
{
  if (qword_1EDB893B0 != -1)
    dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
  return qword_1EDB893A8;
}

unint64_t MRCSampleCreateWithCVPixelBuffer(const void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  return MRCSampleCreateWithCVPixelBufferAndPyramid(a1, 0, a2, a3, a4, a5);
}

unint64_t MRCSampleCreateWithCVPixelBufferAndPyramid(const void *a1, const void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CFDictionaryRef DictionaryRepresentation;
  __CFDictionary *v13;
  __CFDictionary *v14;
  const __CFDictionary *v15;
  unint64_t v16;
  CFMutableDictionaryRef Mutable;
  char *v19;
  const __CFDictionary *v20;
  CFTypeRef v21;
  CGRect v22;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22.origin.x = a3;
  v22.origin.y = a4;
  v22.size.width = a5;
  v22.size.height = a6;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v22);
  v13 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionarySetValue(v13, CFSTR("MRCSampleAttributeRegionOfInterest"), DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  if (a2)
  {
    v14 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    CFDictionarySetValue(v14, CFSTR("MRCSampleAttributePyramid"), a2);
  }
  v15 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
  v20 = v15;
  v21 = a1;
  v19 = sub_1D3DE6310(&v21, &v20);
  do
    v16 = __ldaxr((unint64_t *)&v19);
  while (__stlxr(0, (unint64_t *)&v19));
  sub_1D3DE664C((unint64_t *)&v19);
  sub_1D3D740C8((unint64_t *)&Mutable);
  return v16;
}

void sub_1D3DE62FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D740C8(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D3DE6310(CFTypeRef *a1, const __CFDictionary **a2)
{
  const __CFAllocator *v4;
  char *Instance;
  char *v6;
  CFTypeID v7;
  CFTypeRef v8;
  const __CFDictionary *v9;
  uint64_t v10;
  CFDictionaryRef Copy;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  const __CFDictionary *v15;
  const __CFDictionary *Value;
  const __CFDictionary *v17;
  CFTypeID v18;
  CGSize v19;
  CGSize size;
  unint64_t v21;
  const __CFDictionary *v22;
  const void *v23;
  const void *v24;
  CFTypeID v25;
  CFTypeRef v26;
  uint64_t v27;
  int64x2_t *v28;
  CFTypeID v29;
  CGRect v31;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (qword_1EDB893B0 != -1)
    dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
  Instance = (char *)_CFRuntimeCreateInstance();
  v6 = Instance;
  if (Instance)
  {
    v7 = CFGetTypeID(Instance);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v7 != qword_1EDB893A8)
      _os_assumes_log();
    v8 = *a1;
    v9 = *a2;
    if (v8)
      v8 = CFRetain(v8);
    *(_QWORD *)&v31.origin.x = v8;
    v10 = operator new();
    sub_1D3DE6684(v10, (unint64_t *)&v31);
    *((_QWORD *)v6 + 2) = v10;
    sub_1D3D74EDC((unint64_t *)&v31);
    if (v9)
      Copy = CFDictionaryCreateCopy(v4, v9);
    else
      Copy = 0;
    v12 = (unint64_t *)(v6 + 24);
    *((_QWORD *)v6 + 3) = Copy;
    v13 = *((_QWORD *)v6 + 2);
    v14 = atomic_load((unint64_t *)v6 + 3);
    if (!v14
      || (v15 = (const __CFDictionary *)atomic_load(v12),
          Value = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("MRCSampleAttributeRegionOfInterest")),
          (v17 = Value) == 0)
      || (v18 = CFGetTypeID(Value), v18 != CFDictionaryGetTypeID())
      || !CGRectMakeWithDictionaryRepresentation(v17, &v31))
    {
      v19 = *(CGSize *)(v13 + 24);
      v31.origin = *(CGPoint *)(v13 + 8);
      v31.size = v19;
    }
    size = v31.size;
    *((_OWORD *)v6 + 2) = v31.origin;
    *((CGSize *)v6 + 3) = size;
    v21 = atomic_load((unint64_t *)v6 + 3);
    if (v21
      && (v22 = (const __CFDictionary *)atomic_load(v12),
          v23 = CFDictionaryGetValue(v22, CFSTR("MRCSampleAttributePyramid")),
          (v24 = v23) != 0)
      && (v25 = CFGetTypeID(v23), v25 == CFArrayGetTypeID()))
    {
      v26 = CFRetain(v24);
    }
    else
    {
      v26 = 0;
    }
    *((_QWORD *)v6 + 8) = v26;
    v27 = *((_QWORD *)v6 + 2);
    v28 = (int64x2_t *)operator new();
    sub_1D3DE677C(v28, (unint64_t *)v6 + 8, (CGRect *)v6 + 1, (_OWORD *)(v27 + 8));
    *((_QWORD *)v6 + 9) = v28;
    if (!*((_QWORD *)v6 + 2))
      _os_assumes_log();
    v29 = CFGetTypeID(v6);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v29 != qword_1EDB893A8)
      _os_assumes_log();
  }
  return v6;
}

void sub_1D3DE65B4(_Unwind_Exception *a1)
{
  unint64_t **v1;
  unint64_t *v2;
  unint64_t *v3;
  void ***v4;

  sub_1D3DDD060(v4, 0);
  sub_1D3D74138(v3);
  sub_1D3D8BAAC(v2);
  sub_1D3DDD0BC(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DE664C(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1D3DE6684(uint64_t a1, unint64_t *a2)
{
  CFTypeRef v3;
  __CVBuffer *v4;
  int IsPlanar;
  __CVBuffer *v6;
  size_t WidthOfPlane;
  __CVBuffer *v8;
  size_t HeightOfPlane;
  __CVBuffer *v10;
  __CVBuffer *v11;
  int v12;
  __CVBuffer *v13;
  size_t BytesPerRowOfPlane;

  v3 = (CFTypeRef)atomic_load(a2);
  if (v3)
    v3 = CFRetain(v3);
  *(_QWORD *)a1 = v3;
  v4 = (__CVBuffer *)atomic_load((unint64_t *)a1);
  if (!v4)
    _os_assumes_log();
  IsPlanar = CVPixelBufferIsPlanar(v4);
  v6 = (__CVBuffer *)atomic_load((unint64_t *)a1);
  if (IsPlanar)
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v6, 0);
    v8 = (__CVBuffer *)atomic_load((unint64_t *)a1);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v8, 0);
  }
  else
  {
    WidthOfPlane = CVPixelBufferGetWidth(v6);
    v10 = (__CVBuffer *)atomic_load((unint64_t *)a1);
    HeightOfPlane = CVPixelBufferGetHeight(v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = (double)WidthOfPlane;
  *(double *)(a1 + 32) = (double)HeightOfPlane;
  v11 = (__CVBuffer *)atomic_load((unint64_t *)a1);
  if (!v11)
    _os_assumes_log();
  v12 = CVPixelBufferIsPlanar(v11);
  v13 = (__CVBuffer *)atomic_load((unint64_t *)a1);
  if (v12)
  {
    if (!v13)
      _os_assumes_log();
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v13, 0);
  }
  else
  {
    if (!v13)
      _os_assumes_log();
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v13);
  }
  *(_QWORD *)(a1 + 40) = BytesPerRowOfPlane;
  return a1;
}

void sub_1D3DE6768(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1D3D74EDC(v1);
  _Unwind_Resume(a1);
}

int64x2_t *sub_1D3DE677C(int64x2_t *a1, unint64_t *a2, CGRect *a3, _OWORD *a4)
{
  unint64_t *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  const __CFArray *v12;
  const void *ValueAtIndex;
  unint64_t v14;
  const void *v15;
  CFTypeID v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  CFIndex v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int64x2_t v43;
  char *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v50;
  unint64_t *v51;
  CGAffineTransform v52;
  const void *v53;
  char *v54;
  int64x2_t v55;
  char *v56;
  int64x2_t *v57;
  CGRect v58;

  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  if (atomic_load(a2))
  {
    v8 = a2;
    v9 = (const __CFArray *)atomic_load(a2);
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = 0;
      v51 = v8;
      v50 = a4;
      do
      {
        v12 = (const __CFArray *)atomic_load(v8);
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v11);
        if (ValueAtIndex)
          ValueAtIndex = CFRetain(ValueAtIndex);
        v53 = ValueAtIndex;
        v14 = atomic_load((unint64_t *)&v53);
        if (!v14
          || (v15 = (const void *)atomic_load((unint64_t *)&v53),
              v16 = CFGetTypeID(v15),
              v16 != CVPixelBufferGetTypeID()))
        {
          _os_assumes_log();
        }
        v18 = a1->u64[1];
        v17 = a1[1].u64[0];
        if (v18 >= v17)
        {
          v20 = 0x84BDA12F684BDA13 * ((uint64_t)(v18 - a1->i64[0]) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0x12F684BDA12F684)
            sub_1D3D6D4F8();
          v22 = 0x84BDA12F684BDA13 * ((uint64_t)(v17 - a1->i64[0]) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x97B425ED097B42)
            v23 = 0x12F684BDA12F684;
          else
            v23 = v21;
          v57 = a1 + 1;
          if (v23)
          {
            if (v23 > 0x12F684BDA12F684)
              sub_1D3D6D50C();
            v24 = (char *)operator new(216 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = Count;
          v54 = v24;
          v55.i64[0] = (uint64_t)&v24[216 * v20];
          v55.i64[1] = v55.i64[0];
          v56 = &v24[216 * v23];
          v26 = a4;
          sub_1D3DE6B38(v55.i64[0], v11, (unint64_t *)&v53, a4);
          v27 = v55.i64[0];
          v19 = v55.i64[1] + 216;
          v55.i64[1] += 216;
          v28 = a1->i64[0];
          v29 = a1->u64[1];
          if (v29 == a1->i64[0])
          {
            v43 = vdupq_n_s64(v29);
            a4 = v26;
          }
          else
          {
            v30 = 0;
            do
            {
              v31 = v27 + v30;
              v32 = v29 + v30;
              *(_QWORD *)(v27 + v30 - 216) = *(_QWORD *)(v29 + v30 - 216);
              v33 = (CFTypeRef)atomic_load((unint64_t *)(v29 + v30 - 208));
              if (v33)
                v33 = CFRetain(v33);
              *(_QWORD *)(v31 - 208) = v33;
              v34 = *(_OWORD *)(v32 - 200);
              v35 = *(_OWORD *)(v32 - 184);
              *(_QWORD *)(v31 - 168) = *(_QWORD *)(v32 - 168);
              *(_OWORD *)(v31 - 184) = v35;
              *(_OWORD *)(v31 - 200) = v34;
              v36 = *(_OWORD *)(v32 - 80);
              v38 = *(_OWORD *)(v32 - 128);
              v37 = *(_OWORD *)(v32 - 112);
              *(_OWORD *)(v31 - 96) = *(_OWORD *)(v32 - 96);
              *(_OWORD *)(v31 - 80) = v36;
              *(_OWORD *)(v31 - 128) = v38;
              *(_OWORD *)(v31 - 112) = v37;
              v39 = *(_OWORD *)(v32 - 16);
              v41 = *(_OWORD *)(v32 - 64);
              v40 = *(_OWORD *)(v32 - 48);
              *(_OWORD *)(v31 - 32) = *(_OWORD *)(v32 - 32);
              *(_OWORD *)(v31 - 16) = v39;
              *(_OWORD *)(v31 - 64) = v41;
              *(_OWORD *)(v31 - 48) = v40;
              v42 = *(_OWORD *)(v32 - 144);
              *(_OWORD *)(v31 - 160) = *(_OWORD *)(v32 - 160);
              *(_OWORD *)(v31 - 144) = v42;
              v30 -= 216;
            }
            while (v29 + v30 != v28);
            v27 += v30;
            v43 = *a1;
            v19 = v55.i64[1];
            a4 = v50;
            v8 = v51;
          }
          a1->i64[0] = v27;
          a1->i64[1] = v19;
          v55 = v43;
          v44 = (char *)a1[1].i64[0];
          a1[1].i64[0] = (uint64_t)v56;
          v56 = v44;
          v54 = (char *)v43.i64[0];
          sub_1D3DE6D00((uint64_t)&v54);
          Count = v25;
        }
        else
        {
          sub_1D3DE6B38(a1->i64[1], v11, (unint64_t *)&v53, a4);
          v19 = v18 + 216;
          a1->i64[1] = v19;
        }
        a1->i64[1] = v19;
        if (CGRectIsNull(*a3))
        {
          v45 = (_OWORD *)MEMORY[0x1E0C9D628];
        }
        else
        {
          if (!CGRectIsInfinite(*a3))
          {
            v58 = *a3;
            v48 = *(_OWORD *)(v19 - 80);
            v47 = *(_OWORD *)(v19 - 64);
            *(_OWORD *)&v52.a = *(_OWORD *)(v19 - 96);
            *(_OWORD *)&v52.c = v48;
            *(_OWORD *)&v52.tx = v47;
            *(CGRect *)(v19 - 160) = CGRectApplyAffineTransform(v58, &v52);
            goto LABEL_35;
          }
          v45 = (_OWORD *)MEMORY[0x1E0C9D5E0];
        }
        v46 = v45[1];
        *(_OWORD *)(v19 - 160) = *v45;
        *(_OWORD *)(v19 - 144) = v46;
LABEL_35:
        sub_1D3D74EDC((unint64_t *)&v53);
        ++v11;
      }
      while (v11 != Count);
    }
  }
  return a1;
}

void sub_1D3DE6AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1D3D74D70((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DE6B38(uint64_t a1, uint64_t a2, unint64_t *a3, _OWORD *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  double MinX;
  CGFloat MinY;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double Width;
  double v19;
  double Height;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  CGFloat v28;
  __int128 v29;
  __int128 v30;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;

  *(_QWORD *)a1 = a2;
  sub_1D3DE6684(a1 + 8, a3);
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = a4[1];
  *(_OWORD *)(a1 + 88) = *a4;
  *(_OWORD *)(a1 + 104) = v7;
  v8 = (__int128 *)MEMORY[0x1E0C9BAA8];
  v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 120) = *MEMORY[0x1E0C9BAA8];
  v10 = *v8;
  *(_OWORD *)(a1 + 136) = v8[1];
  *(_OWORD *)(a1 + 152) = v8[2];
  *(_OWORD *)&v36.a = v10;
  *(_OWORD *)&v36.c = v9;
  *(_OWORD *)&v36.tx = v8[2];
  *(_QWORD *)&v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v9 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 112);
  MinX = CGRectGetMinX(*(CGRect *)&v7);
  MinY = CGRectGetMinY(*(CGRect *)(a1 + 88));
  CGAffineTransformTranslate((CGAffineTransform *)(a1 + 120), &v36, -MinX, -MinY);
  v14 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v34.a = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v34.c = v14;
  *(_OWORD *)&v34.tx = *(_OWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v14 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  Width = CGRectGetWidth(*(CGRect *)((char *)&v14 - 8));
  v19 = CGRectGetWidth(*(CGRect *)(a1 + 88));
  Height = CGRectGetHeight(*(CGRect *)(a1 + 16));
  v21 = CGRectGetHeight(*(CGRect *)(a1 + 88));
  CGAffineTransformScale(&v35, &v34, Width / v19, Height / v21);
  v22 = *(_OWORD *)&v35.c;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v35.a;
  *(_OWORD *)(a1 + 136) = v22;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v35.tx;
  v23 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v33.a = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v33.c = v23;
  *(_OWORD *)&v33.tx = *(_OWORD *)(a1 + 152);
  v24 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v23 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = CGRectGetMinX(*(CGRect *)((char *)&v23 - 8));
  v28 = CGRectGetMinY(*(CGRect *)(a1 + 16));
  CGAffineTransformTranslate(&v35, &v33, v27, v28);
  v29 = *(_OWORD *)&v35.c;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v35.a;
  *(_OWORD *)(a1 + 136) = v29;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v35.tx;
  v30 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v32.a = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v32.c = v30;
  *(_OWORD *)&v32.tx = *(_OWORD *)(a1 + 152);
  CGAffineTransformInvert((CGAffineTransform *)(a1 + 168), &v32);
  return a1;
}

void sub_1D3DE6CEC(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1D3D74EDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DE6D00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    sub_1D3D74EDC((unint64_t *)(i - 208));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t MRCSampleCreateWithCVPixelBufferAndAttributes(const void *a1, const __CFDictionary *a2)
{
  unint64_t v2;
  char *v4;
  const __CFDictionary *v5;
  CFTypeRef v6;

  v5 = a2;
  v6 = a1;
  v4 = sub_1D3DE6310(&v6, &v5);
  do
    v2 = __ldaxr((unint64_t *)&v4);
  while (__stlxr(0, (unint64_t *)&v4));
  sub_1D3DE664C((unint64_t *)&v4);
  return v2;
}

unint64_t MRCSampleGetCVPixelBuffer(unint64_t **cf)
{
  CFTypeID v2;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  return atomic_load(cf[2]);
}

double MRCSampleGetRegionOfInterest(CFTypeRef cf)
{
  CFTypeID v2;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  return *((double *)cf + 4);
}

unint64_t MRCSampleGetPyramid(unint64_t *cf)
{
  CFTypeID v2;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  return atomic_load(cf + 8);
}

unint64_t MRCSampleCopyAttribute(char *cf, CFTypeRef a2)
{
  CFTypeID v4;
  char *v5;
  CFTypeRef v6;
  unint64_t v7;
  CFTypeRef v9;
  unint64_t v10;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v4 != qword_1EDB893A8)
      _os_assumes_log();
  }
  v5 = cf + 16;
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  v9 = v6;
  sub_1D3DE7000(&v10, (uint64_t)v5, (unint64_t *)&v9);
  do
    v7 = __ldaxr(&v10);
  while (__stlxr(0, &v10));
  sub_1D3D8BA0C(&v10);
  sub_1D3D8C70C((unint64_t *)&v9);
  return v7;
}

void sub_1D3DE6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D8C70C(&a9);
  _Unwind_Resume(a1);
}

const void *sub_1D3DE7000(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *result;

  v4 = atomic_load((unint64_t *)(a2 + 8));
  if (v4 && (v5 = atomic_load(a3)) != 0)
  {
    v6 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 8));
    v7 = (const void *)atomic_load(a3);
    result = CFDictionaryGetValue(v6, v7);
    if (result)
      result = CFRetain(result);
  }
  else
  {
    result = 0;
  }
  *a1 = result;
  return result;
}

unint64_t MRCSampleCopyAttributes(CFTypeRef cf)
{
  CFTypeID v2;
  unint64_t v3;
  CFDictionaryRef v5;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  sub_1D3DE70F8(&v5, (uint64_t)cf + 16);
  do
    v3 = __ldaxr((unint64_t *)&v5);
  while (__stlxr(0, (unint64_t *)&v5));
  sub_1D3D8BAAC((unint64_t *)&v5);
  return v3;
}

CFDictionaryRef sub_1D3DE70F8(CFDictionaryRef *a1, uint64_t a2)
{
  unint64_t v3;
  const __CFAllocator *v4;
  const __CFDictionary *v5;
  CFDictionaryRef result;

  v3 = atomic_load((unint64_t *)(a2 + 8));
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v3)
  {
    v5 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 8));
    result = CFDictionaryCreateCopy(v4, v5);
  }
  else
  {
    result = CFDictionaryCreate(v4, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  *a1 = result;
  return result;
}

void MRCSampleGeneratePyramidIfNotPresent(char *cf)
{
  CFTypeID v2;
  unint64_t *v3;
  const void *v5;
  CFTypeID v6;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int64x2_t *v11;
  void **v12;
  unint64_t *v13;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893B0 != -1)
      dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
    if (v2 != qword_1EDB893A8)
      _os_assumes_log();
  }
  v3 = (unint64_t *)(cf + 64);
  if (!atomic_load((unint64_t *)cf + 8))
  {
    if (qword_1EFE319D0 != -1)
      dispatch_once_f(&qword_1EFE319D0, 0, (dispatch_function_t)sub_1D3E23EC0);
    v5 = (const void *)atomic_load((unint64_t *)qword_1EFE319C8);
    if (v5)
    {
      v6 = CFGetTypeID(v5);
      if (qword_1EDB893E0 != -1)
        dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
      if (v6 != qword_1EDB893D8)
        _os_assumes_log();
    }
    sub_1D3DE7350(&v13, (unint64_t)(cf + 16), (uint64_t)v5 + 16);
    if (atomic_load((unint64_t *)&v13))
    {
      do
        v8 = __ldaxr((unint64_t *)&v13);
      while (__stlxr(0, (unint64_t *)&v13));
      do
        v9 = (const void *)__ldaxr(v3);
      while (__stlxr(v8, v3));
      if (v9)
        CFRelease(v9);
      v10 = *((_QWORD *)cf + 2);
      v11 = (int64x2_t *)operator new();
      sub_1D3DE677C(v11, (unint64_t *)cf + 8, (CGRect *)cf + 1, (_OWORD *)(v10 + 8));
      v12 = 0;
      sub_1D3DDD060((void ***)cf + 9, (void **)v11);
      sub_1D3DDD060(&v12, 0);
    }
    sub_1D3D74138((unint64_t *)&v13);
  }
}

void sub_1D3DE7318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1D8254C54](v2, 0x20C40960023A9);
  sub_1D3D74138((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DE7350(unint64_t **a1, unint64_t a2, uint64_t a3)
{
  unint64_t *result;
  unint64_t *v8;
  uint64_t v9;
  os_signpost_id_t v10;
  char v11;
  _BYTE v12[40];
  unint64_t v13[12];
  char v14;
  _QWORD v15[3];
  unint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (atomic_load((unint64_t *)(a2 + 48)))
  {
    result = (unint64_t *)atomic_load((unint64_t *)(a2 + 48));
    if (result)
      result = (unint64_t *)CFRetain(result);
    *a1 = result;
    return result;
  }
  LOBYTE(v13[0]) = 0;
  v14 = 0;
  v12[0] = 0;
  v12[32] = 0;
  if (qword_1EDB89E30 != -1)
    dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
  v10 = os_signpost_id_generate((os_log_t)qword_1EDB89E38);
  v11 = 1;
  *a1 = 0;
  v8 = (unint64_t *)operator new(0x30uLL);
  *v8 = (unint64_t)&off_1E95B1AE0;
  v8[1] = (unint64_t)v13;
  v8[2] = (unint64_t)a1;
  v8[3] = a2;
  v8[4] = (unint64_t)v12;
  v8[5] = (unint64_t)&v10;
  v16 = v8;
  sub_1D3D9D608(a3, v15);
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_12;
    v9 = 5;
  }
  result = (unint64_t *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_12:
  if (v14)
    return sub_1D3DF4F24(v13);
  return result;
}

void sub_1D3DE74A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v31 - 48);
  if (v33 == v30)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 72);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  sub_1D3D74138(v29);
  if (a29)
    sub_1D3DF4F24(&a17);
  _Unwind_Resume(a1);
}

unint64_t MRCSampleCreateByGeneratingPyramid(void *cf, CFTypeRef a2)
{
  CFTypeRef v2;
  unint64_t v4;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;
  const __CFAllocator *v9;
  const __CFDictionary *v10;
  __CFDictionary *v11;
  const void *v12;
  const void *CVPixelBuffer;
  const __CFDictionary *v14;
  unint64_t v15;
  CFMutableDictionaryRef MutableCopy;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  const __CFDictionary *v21;
  CFTypeRef v22;

  v2 = a2;
  v19 = 0;
  if (a2)
    goto LABEL_7;
  v4 = MRCContextCreateWithOptions(0);
  do
    v5 = (const void *)__ldaxr(&v19);
  while (__stlxr(v4, &v19));
  if (v5)
    CFRelease(v5);
  v2 = (CFTypeRef)atomic_load(&v19);
  if (v2)
  {
LABEL_7:
    if (cf)
    {
      v6 = CFGetTypeID(cf);
      if (qword_1EDB893B0 != -1)
        dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
      if (v6 != qword_1EDB893A8)
        _os_assumes_log();
    }
    v7 = CFGetTypeID(v2);
    if (qword_1EDB893E0 != -1)
      dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
    if (v7 != qword_1EDB893D8)
      _os_assumes_log();
    sub_1D3DE7350(&v18, (unint64_t)cf + 16, (uint64_t)v2 + 16);
    if (atomic_load((unint64_t *)&v18))
    {
      sub_1D3DE70F8((CFDictionaryRef *)&v22, (uint64_t)cf + 16);
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = (const __CFDictionary *)atomic_load((unint64_t *)&v22);
      MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, v10);
      sub_1D3D8BAAC((unint64_t *)&v22);
      v11 = (__CFDictionary *)atomic_load((unint64_t *)&MutableCopy);
      v12 = (const void *)atomic_load((unint64_t *)&v18);
      CFDictionarySetValue(v11, CFSTR("MRCSampleAttributePyramid"), v12);
      CVPixelBuffer = (const void *)MRCSampleGetCVPixelBuffer((unint64_t **)cf);
      v14 = (const __CFDictionary *)atomic_load((unint64_t *)&MutableCopy);
      v21 = v14;
      v22 = CVPixelBuffer;
      v20 = sub_1D3DE6310(&v22, &v21);
      do
        v15 = __ldaxr((unint64_t *)&v20);
      while (__stlxr(0, (unint64_t *)&v20));
      sub_1D3DE664C((unint64_t *)&v20);
      sub_1D3D740C8((unint64_t *)&MutableCopy);
    }
    else
    {
      v15 = 0;
    }
    sub_1D3D74138((unint64_t *)&v18);
  }
  else
  {
    v15 = 0;
  }
  sub_1D3DBEEE4(&v19);
  return v15;
}

void sub_1D3DE76E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3;
  va_list va;
  unint64_t v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v5 = va_arg(va2, _QWORD);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_1D3D8BAAC((unint64_t *)va2);
  sub_1D3D74138((unint64_t *)va);
  sub_1D3DBEEE4((unint64_t *)va1);
  _Unwind_Resume(a1);
}

const __CFDictionary *sub_1D3DE772C(const __CFDictionary *result, uint64_t a2)
{
  const __CFDictionary *v2;
  unint64_t v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;
  CMTime v8;

  v2 = result;
  v3 = atomic_load((unint64_t *)(a2 + 8));
  if (v3
    && (v4 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 8)),
        (result = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("MRCSampleAttributePresentationTimeStamp"))) != 0)
    && (v5 = result,
        v6 = CFGetTypeID(result),
        result = (const __CFDictionary *)CFDictionaryGetTypeID(),
        (const __CFDictionary *)v6 == result))
  {
    memset(&v8, 0, sizeof(v8));
    result = (const __CFDictionary *)CMTimeMakeFromDictionary(&v8, v5);
    if ((v8.flags & 1) != 0)
    {
      *(CMTime *)v2 = v8;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_BYTE *)v2 = 0;
    }
    *((_BYTE *)v2 + 24) = v7;
  }
  else
  {
    *(_BYTE *)v2 = 0;
    *((_BYTE *)v2 + 24) = 0;
  }
  return result;
}

const __CFData *sub_1D3DE77DC(const __CFData *result, uint64_t a2)
{
  const __CFData *v2;
  unint64_t v3;
  const __CFDictionary *v4;
  const __CFData *v5;
  CFTypeID v6;
  __int128 v7;
  char v8;

  v2 = result;
  v3 = atomic_load((unint64_t *)(a2 + 8));
  if (v3
    && (v4 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 8)),
        (result = (const __CFData *)CFDictionaryGetValue(v4, CFSTR("MRCSampleAttributeCameraIntrinsicMatrix"))) != 0)
    && (v5 = result,
        v6 = CFGetTypeID(result),
        result = (const __CFData *)CFDataGetTypeID(),
        (const __CFData *)v6 == result)
    && (result = (const __CFData *)CFDataGetLength(v5), result == (const __CFData *)48))
  {
    result = (const __CFData *)CFDataGetBytePtr(v5);
    v7 = *((_OWORD *)result + 1);
    *(_OWORD *)v2 = *(_OWORD *)result;
    *((_OWORD *)v2 + 1) = v7;
    *((_OWORD *)v2 + 2) = *((_OWORD *)result + 2);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)v2 = 0;
  }
  *((_BYTE *)v2 + 48) = v8;
  return result;
}

uint64_t sub_1D3DE7874(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v3[12];
  char v4;

  LOBYTE(v3[0]) = 0;
  v4 = 0;
  v1 = sub_1D3DE79DC(a1, (uint64_t)v3);
  if (v4)
    sub_1D3DF4F24(v3);
  return v1;
}

void sub_1D3DE78BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
    sub_1D3DF4F24(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3DE78D8(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v3[12];
  char v4;

  LOBYTE(v3[0]) = 0;
  v4 = 0;
  v1 = sub_1D3DE793C(a1, (uint64_t)v3);
  if (v4)
    sub_1D3DF4F24(v3);
  return v1;
}

void sub_1D3DE7920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
    sub_1D3DF4F24(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3DE793C(unint64_t *a1, uint64_t a2)
{
  __CVBuffer *v4;
  uint64_t v5;
  CVReturn v6;
  CVReturn v7;
  const __CFString *v9;
  uint64_t v10;

  if (!atomic_load(a1))
  {
    v9 = CFSTR("Invalid pixel buffer.");
    v10 = -2002;
    sub_1D3D73E0C((unint64_t *)a2, &v10, (CFTypeRef *)&v9);
    return 0;
  }
  v4 = (__CVBuffer *)atomic_load(a1);
  v5 = 1;
  v6 = CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  if (v6)
  {
    v7 = v6;
    v9 = CFSTR("CVPixelBufferUnlockBaseAddress failed.");
    v10 = -2002;
    sub_1D3D73E0C((unint64_t *)a2, &v10, (CFTypeRef *)&v9);
    *(_DWORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 28) = 1;
    return 0;
  }
  return v5;
}

uint64_t sub_1D3DE79DC(unint64_t *a1, uint64_t a2)
{
  __CVBuffer *v4;
  uint64_t v5;
  CVReturn v6;
  CVReturn v7;
  const __CFString *v9;
  uint64_t v10;

  if (!atomic_load(a1))
  {
    v9 = CFSTR("Invalid pixel buffer.");
    v10 = -2002;
    sub_1D3D73E0C((unint64_t *)a2, &v10, (CFTypeRef *)&v9);
    return 0;
  }
  v4 = (__CVBuffer *)atomic_load(a1);
  v5 = 1;
  v6 = CVPixelBufferLockBaseAddress(v4, 1uLL);
  if (v6)
  {
    v7 = v6;
    v9 = CFSTR("CVPixelBufferLockBaseAddress failed.");
    v10 = -2002;
    sub_1D3D73E0C((unint64_t *)a2, &v10, (CFTypeRef *)&v9);
    *(_DWORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 28) = 1;
    return 0;
  }
  return v5;
}

CFStringRef sub_1D3DE7A7C(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  const __CFDictionary *v8;
  __CFString *v9;
  __CFString *v11;
  const __CFString *v12;
  CFStringRef Copy;
  BOOL IsInfinite;
  __CFString *v15;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  unint64_t v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  const __CFString *v38;
  CMTime time;
  CFStringRef v41;
  CFMutableStringRef Mutable;
  CMTime v43;
  float v44;
  float v45;
  float v46;
  float v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (atomic_load((unint64_t *)&Mutable))
  {
    v4 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v4, 0, CFSTR("<%s %p> {\n"), "MRCSample", a1 - 16);
    v5 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v5, CFSTR("    pixelBuffer "));
    sub_1D3E2D270((unint64_t *)&Mutable, *(unint64_t **)a1);
    v6 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v6, CFSTR("\n"));
    if (atomic_load((unint64_t *)(a1 + 8)))
    {
      v8 = (const __CFDictionary *)atomic_load((unint64_t *)(a1 + 8));
      if (CFDictionaryContainsKey(v8, CFSTR("MRCSampleAttributeRegionOfInterest")))
      {
        v9 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppend(v9, CFSTR("    regionOfInterest "));
        if (atomic_load((unint64_t *)&Mutable))
        {
          if (CGRectIsNull(*(CGRect *)(a1 + 16)))
          {
            v11 = (__CFString *)atomic_load((unint64_t *)&Mutable);
            v12 = CFSTR("<null>");
          }
          else
          {
            IsInfinite = CGRectIsInfinite(*(CGRect *)(a1 + 16));
            v11 = (__CFString *)atomic_load((unint64_t *)&Mutable);
            if (IsInfinite)
            {
              v12 = CFSTR("<infinite>");
            }
            else
            {
              CFStringAppend(v11, CFSTR("{origin="));
              sub_1D3E2D678((unint64_t *)&Mutable, (double *)(a1 + 16));
              v15 = (__CFString *)atomic_load((unint64_t *)&Mutable);
              CFStringAppend(v15, CFSTR(", size="));
              if (atomic_load((unint64_t *)&Mutable))
              {
                v17 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                CFStringAppend(v17, CFSTR("{width="));
                sub_1D3E2D5D0((unint64_t *)&Mutable, *(double *)(a1 + 32));
                v18 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                CFStringAppend(v18, CFSTR(", height="));
                sub_1D3E2D5D0((unint64_t *)&Mutable, *(double *)(a1 + 40));
                v19 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                CFStringAppend(v19, CFSTR("}"));
              }
              v11 = (__CFString *)atomic_load((unint64_t *)&Mutable);
              v12 = CFSTR("}");
            }
          }
          CFStringAppend(v11, v12);
        }
        v20 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppend(v20, CFSTR("\n"));
      }
    }
    if (*(_QWORD *)(a1 + 56))
    {
      v21 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v21, CFSTR("    pyramid {\n"));
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) - **(_QWORD **)(a1 + 56);
      if (v22)
      {
        v23 = 0;
        v24 = v22 / 216;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        v26 = 8;
        do
        {
          v27 = (__CFString *)atomic_load((unint64_t *)&Mutable);
          CFStringAppendFormat(v27, 0, CFSTR("        level%zuPixelBuffer "), v23);
          sub_1D3E2D270((unint64_t *)&Mutable, (unint64_t *)(**(_QWORD **)(a1 + 56) + v26));
          v28 = (__CFString *)atomic_load((unint64_t *)&Mutable);
          CFStringAppend(v28, CFSTR("\n"));
          ++v23;
          v26 += 216;
        }
        while (v25 != v23);
      }
      v29 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v29, CFSTR("    }\n"));
    }
    sub_1D3DE772C((const __CFDictionary *)&v43, a1);
    if (LOBYTE(v44))
    {
      v30 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      time = v43;
      v41 = CMTimeCopyDescription(v2, &time);
      v31 = atomic_load((unint64_t *)&v41);
      CFStringAppendFormat(v30, 0, CFSTR("    presentationTimeStamp %@\n"), v31);
      sub_1D3D8C70C((unint64_t *)&v41);
    }
    sub_1D3DE77DC((const __CFData *)&v43, a1);
    if (v48)
    {
      v32 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v32, CFSTR("    cameraIntrinsicMatrix {\n"));
      v33 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppendFormat(v33, 0, CFSTR("        {%f, %f, %f}\n"), *(float *)&v43.value, *(float *)&v43.epoch, v45);
      v34 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppendFormat(v34, 0, CFSTR("        {%f, %f, %f}\n"), *((float *)&v43.value + 1), *((float *)&v43.epoch + 1), v46);
      v35 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppendFormat(v35, 0, CFSTR("        {%f, %f, %f}\n"), *(float *)&v43.timescale, v44, v47);
      v36 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v36, CFSTR("    }\n"));
    }
    v37 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v37, CFSTR("}"));
    v38 = (const __CFString *)atomic_load((unint64_t *)&Mutable);
    Copy = CFStringCreateCopy(v2, v38);
  }
  else
  {
    Copy = 0;
  }
  sub_1D3D8FA0C((unint64_t *)&Mutable);
  return Copy;
}

void sub_1D3DE7ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unint64_t v10;
  va_list va;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  sub_1D3D8C70C((unint64_t *)va);
  sub_1D3D8FA0C((unint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1D3DE7F08(unint64_t *a1)
{
  __CVBuffer *v2;
  int IsPlanar;
  __CVBuffer *v4;

  v2 = (__CVBuffer *)atomic_load(a1);
  if (!v2)
    _os_assumes_log();
  IsPlanar = CVPixelBufferIsPlanar(v2);
  v4 = (__CVBuffer *)atomic_load(a1);
  if (IsPlanar)
  {
    if (!v4)
      _os_assumes_log();
    return CVPixelBufferGetBaseAddressOfPlane(v4, 0);
  }
  else
  {
    if (!v4)
      _os_assumes_log();
    return CVPixelBufferGetBaseAddress(v4);
  }
}

uint64_t sub_1D3DE7F80(uint64_t a1)
{
  unsigned int **v2;

  *(_QWORD *)a1 = &off_1E95AF948;
  v2 = (unsigned int **)(a1 + 16);
  sub_1D3D7FBF4((unsigned int **)(a1 + 24));
  sub_1D3D6D10C(v2);
  return a1;
}

void sub_1D3DE7FC0(uint64_t a1)
{
  unsigned int **v1;

  *(_QWORD *)a1 = &off_1E95AF948;
  v1 = (unsigned int **)(a1 + 16);
  sub_1D3D7FBF4((unsigned int **)(a1 + 24));
  sub_1D3D6D10C(v1);
  JUMPOUT(0x1D8254C54);
}

unsigned int **sub_1D3DE8010(_QWORD *a1, __int128 *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v17;
  char v18;
  unsigned int *v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  _BYTE v26[184];
  unsigned int *v27;
  void **v28;

  v4 = (unsigned int *)a1[2];
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
    v8 = v4;
  }
  else
  {
    v8 = 0;
  }
  v27 = v8;
  v25 = v4;
  v9 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v24 = v9;
  sub_1D3DF3474((uint64_t)v26, v4, (uint64_t *)&v24);
  sub_1D3D7FBF4(&v24);
  sub_1D3D6D10C(&v25);
  sub_1D3DEA794((uint64_t)v26, a2, (uint64_t)v20, v12);
  v17 = *a2;
  v18 = *((_BYTE *)a2 + 16);
  v13 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v19 = v13;
  (*(void (**)(_QWORD *, _BYTE *, __int128 *))(*a1 + 32))(a1, v20, &v17);
  sub_1D3D7FBF4(&v19);
  v28 = (void **)&v23;
  sub_1D3DE98F8(&v28);
  v28 = (void **)&v22;
  sub_1D3DE98F8(&v28);
  v28 = (void **)&v21;
  sub_1D3D7FB84(&v28);
  v28 = (void **)v20;
  sub_1D3DE9FC4(&v28);
  sub_1D3DF33C4((uint64_t)v26);
  return sub_1D3D6D10C(&v27);
}

void sub_1D3DE8184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  unsigned int **v28;
  uint64_t v29;

  sub_1D3D7FBF4(v28);
  sub_1D3DEA034(&a14);
  sub_1D3DF33C4((uint64_t)&a28);
  sub_1D3D6D10C((unsigned int **)(v29 - 64));
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DE81D0@<X0>(uint64_t a1@<X0>, unsigned int ***a2@<X1>, uint64_t a3@<X2>, unsigned int ***a4@<X8>)
{
  unsigned int ***v4;
  void **v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  unsigned int **v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  unsigned int v24;
  std::exception_vtbl *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  std::exception_vtbl *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  std::exception_vtbl *v38;
  unsigned int *v39;
  _QWORD *v40;
  _QWORD *v41;
  float v42;
  float v43;
  uint64_t *v44;
  int v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t **v48;
  int v49;
  uint64_t **v50;
  uint64_t *v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  _QWORD *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  float v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int **v76;
  unsigned int ***v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int **v86;
  unsigned int ***v87;
  unsigned int **v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int **v91;
  unint64_t v92;
  unsigned int **v93;
  uint64_t v94;
  unsigned int **v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  int64x2_t v100;
  char *v101;
  uint64_t i;
  float v103;
  float v104;
  float v105;
  int v106;
  uint64_t *v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t **v113;
  int v114;
  uint64_t *v115;
  int v116;
  uint64_t *v117;
  int v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  int v125;
  uint64_t *v126;
  uint64_t *v127;
  char *v128;
  _QWORD *v129;
  _QWORD *exception;
  unsigned int ***v132;
  void **v133;
  int v134;
  int v135;
  int v136;
  std::exception v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int ***v142;
  unsigned int *v143;
  unsigned int *v144;
  int v145;
  float v146;
  unsigned int *v147;
  _QWORD v148[3];
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int *v152;
  std::exception *v153;
  char *v154;
  int64x2_t v155;
  char *v156;
  _QWORD *v157;

  v4 = a2;
  v5 = (void **)a1;
  v7 = *(unsigned int **)(a1 + 16);
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a2;
  v11 = a2[1];
  v12 = 126 - 2 * __clz(v11 - *v4);
  v13 = v11 == *v4;
  v152 = v7;
  v136 = *(_DWORD *)(a3 + 8);
  v134 = *(_DWORD *)(a3 + 12);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v13)
    v14 = 0;
  else
    v14 = v12;
  sub_1D3DE8C54(v10, v11, v14, 1);
  v150 = 0;
  v151 = 0;
  v149 = &v150;
  sub_1D3DE971C(v148, 3uLL);
  v15 = 0;
  v135 = 0;
  v132 = v4;
  v133 = v5;
  do
  {
    if (v134 >= 1 && v15 >= v134)
      break;
    v16 = *v4;
    if (v15 >= (unint64_t)(v4[1] - *v4))
      break;
    v147 = 0;
    v17 = v16[v15];
    if (v17)
    {
      v18 = v17 + 2;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v147 = v17;
    v20 = *((_QWORD *)v17 + 2);
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v23 = (unsigned int **)v148[0];
      do
        v24 = __ldxr(v21);
      while (__stxr(v24 + 1, v21));
      v25 = (std::exception_vtbl *)v20;
    }
    else
    {
      v25 = 0;
      v23 = (unsigned int **)v148[0];
    }
    v137.__vftable = v25;
    if (*v23)
      sub_1D3D6D13C(*v23);
    *v23 = (unsigned int *)v20;
    sub_1D3DC2944((unsigned int **)&v137);
    v26 = *((_QWORD *)v147 + 3);
    if (v26)
    {
      v27 = (unsigned int *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = v148[0];
      do
        v30 = __ldxr(v27);
      while (__stxr(v30 + 1, v27));
      v31 = (std::exception_vtbl *)v26;
    }
    else
    {
      v31 = 0;
      v29 = v148[0];
    }
    v137.__vftable = v31;
    v32 = *(unsigned int **)(v29 + 8);
    if (v32)
      sub_1D3D6D13C(v32);
    *(_QWORD *)(v29 + 8) = v26;
    sub_1D3DC2944((unsigned int **)&v137);
    v33 = *((_QWORD *)v147 + 4);
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = v148[0];
      do
        v37 = __ldxr(v34);
      while (__stxr(v37 + 1, v34));
      v38 = (std::exception_vtbl *)v33;
    }
    else
    {
      v38 = 0;
      v36 = v148[0];
    }
    v137.__vftable = v38;
    v39 = *(unsigned int **)(v36 + 16);
    if (v39)
      sub_1D3D6D13C(v39);
    *(_QWORD *)(v36 + 16) = v33;
    sub_1D3DC2944((unsigned int **)&v137);
    v40 = (_QWORD *)v148[0];
    v41 = (_QWORD *)v148[1];
    while (v40 != v41)
    {
      v42 = (*(float (**)(_QWORD))(*(_QWORD *)*v40 + 16))(*v40);
      (*(void (**)(_QWORD))(*(_QWORD *)*v40 + 24))(*v40);
      v44 = v150;
      if (v150)
      {
        v45 = (int)v42;
        v46 = &v150;
        do
        {
          v47 = v44;
          v48 = v46;
          v49 = *((_DWORD *)v44 + 8);
          v50 = (uint64_t **)(v44 + 1);
          if (v49 >= v45)
          {
            v50 = (uint64_t **)v47;
            v46 = (uint64_t **)v47;
          }
          v44 = *v50;
        }
        while (v44);
        if (v46 != &v150)
        {
          v51 = v49 >= v45 ? v47 : (uint64_t *)v48;
          if (*((_DWORD *)v51 + 8) <= v45)
          {
            v52 = v49 < v45;
            v53 = v49 >= v45 ? v47 : (uint64_t *)v48;
            v54 = v52 ? (uint64_t)(v48 + 6) : (uint64_t)(v47 + 6);
            v55 = v53[6];
            if (v55)
            {
              v56 = (int)v43;
              v57 = v54;
              do
              {
                v58 = (uint64_t *)v55;
                v59 = v57;
                v60 = *(_DWORD *)(v55 + 28);
                v61 = (uint64_t *)(v55 + 8);
                if (v60 >= v56)
                {
                  v61 = v58;
                  v57 = (uint64_t)v58;
                }
                v55 = *v61;
              }
              while (v55);
              if (v57 != v54)
              {
                if (v60 >= v56)
                  v62 = v58;
                else
                  v62 = (_QWORD *)v59;
                if (*((_DWORD *)v62 + 7) <= v56)
                {
                  exception = __cxa_allocate_exception(0x20uLL);
                  sub_1D3DDE1A0(exception, "Candidate fiducial already assigned to a valid symbol");
                  *exception = &off_1E95AF388;
                  __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
                }
              }
            }
          }
        }
      }
      ++v40;
    }
    v145 = -1;
    v146 = 0.0;
    v63 = v147;
    if (v147)
    {
      v64 = v147 + 2;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v143 = v63;
    sub_1D3E048D0(&v144, v5, (uint64_t)&v143, &v146, &v145);
    sub_1D3DE9798(&v143);
    v66 = v145;
    v67 = v66 * v66;
    if (v136 <= 0)
      v67 = 0;
    v68 = v147;
    if (v147)
    {
      v69 = v147 + 2;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v141 = v68;
    v71 = v146;
    v72 = v144;
    if (v144)
    {
      v73 = v144 + 2;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v135 += v67;
    v140 = v72;
    sub_1D3E059B4(&v142, v5, (uint64_t)&v141, v66, &v140, v71);
    sub_1D3D6F2E0(&v140);
    sub_1D3DE9798(&v141);
    v76 = a4[1];
    v75 = (unint64_t)a4[2];
    if ((unint64_t)v76 >= v75)
    {
      v81 = v76 - *a4;
      if ((unint64_t)(v81 + 1) >> 61)
        sub_1D3D6D4F8();
      v82 = v75 - (_QWORD)*a4;
      v83 = v82 >> 2;
      if (v82 >> 2 <= (unint64_t)(v81 + 1))
        v83 = v81 + 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v84 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v84 = v83;
      v157 = a4 + 2;
      if (v84)
      {
        if (v84 >> 61)
          sub_1D3D6D50C();
        v85 = (char *)operator new(8 * v84);
      }
      else
      {
        v85 = 0;
      }
      v86 = (unsigned int **)&v85[8 * v81];
      v154 = v85;
      v155.i64[0] = (uint64_t)v86;
      v155.i64[1] = (uint64_t)v86;
      v156 = &v85[8 * v84];
      *v86 = 0;
      v87 = v142;
      v88 = v86;
      if (v142)
      {
        v89 = (unsigned int *)(v142 + 1);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
        v88 = v86;
        if (*v86)
        {
          sub_1D3D6D13C(*v86);
          v88 = (unsigned int **)v155.i64[1];
        }
      }
      *v86 = (unsigned int *)v87;
      v80 = v88 + 1;
      v155.i64[1] = (uint64_t)(v88 + 1);
      v91 = *a4;
      v92 = (unint64_t)a4[1];
      v93 = (unsigned int **)v155.i64[0];
      if ((unsigned int **)v92 == *a4)
      {
        v100 = vdupq_n_s64(v92);
      }
      else
      {
        v94 = 0;
        v95 = (unsigned int **)v155.i64[0];
        do
        {
          *--v95 = 0;
          v97 = *(unsigned int **)(v92 - 8);
          v92 -= 8;
          v96 = v97;
          if (v97)
          {
            v98 = v96 + 2;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
            if (*v95)
              sub_1D3D6D13C(*v95);
          }
          *v95 = v96;
          v94 -= 8;
        }
        while ((unsigned int **)v92 != v91);
        v100 = *(int64x2_t *)a4;
        v80 = (unsigned int **)v155.i64[1];
        v93 = v95;
        v4 = v132;
      }
      *a4 = v93;
      a4[1] = v80;
      v155 = v100;
      v101 = (char *)a4[2];
      a4[2] = (unsigned int **)v156;
      v156 = v101;
      v154 = (char *)v100.i64[0];
      sub_1D3DE9A3C((uint64_t)&v154);
      v5 = v133;
    }
    else
    {
      *v76 = 0;
      v77 = v142;
      if (v142)
      {
        v78 = (unsigned int *)(v142 + 1);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
        if (*v76)
          sub_1D3D6D13C(*v76);
      }
      *v76 = (unsigned int *)v77;
      v80 = v76 + 1;
      a4[1] = v80;
    }
    a4[1] = v80;
    v138 = 0;
    v139 = 0;
    v137.__vftable = 0;
    sub_1D3D6D6A8((unsigned int *)&v137, v142[2], v142[3], v142[3] - v142[2]);
    for (i = 0; i != 3; ++i)
    {
      v103 = (*(float (**)(_QWORD))(**((_QWORD **)&v137.~exception + i) + 16))(*((_QWORD *)&v137.~exception
                                                                                            + i));
      v104 = (*(float (**)(_QWORD))(**((_QWORD **)&v137.~exception + i) + 24))(*((_QWORD *)&v137.~exception
                                                                                            + i));
      v105 = v104;
      v106 = (int)v103;
      v107 = v150;
      v108 = &v150;
      v109 = &v150;
      if (v150)
      {
        v110 = &v150;
        v111 = v150;
        do
        {
          v112 = v111;
          v113 = v110;
          v114 = *((_DWORD *)v111 + 8);
          if (v114 >= v106)
            v110 = (uint64_t **)v111;
          else
            ++v111;
          v111 = (uint64_t *)*v111;
        }
        while (v111);
        if (v110 != &v150)
        {
          v115 = v114 >= v106 ? v112 : (uint64_t *)v113;
          if (*((_DWORD *)v115 + 8) <= v106)
          {
            v118 = (int)v104;
            if (v114 >= v106)
              v119 = v112 + 5;
            else
              v119 = (uint64_t *)(v113 + 5);
            v120 = (uint64_t *)(v113 + 6);
            if (v114 >= v106)
              v120 = v112 + 6;
            else
              v112 = (uint64_t *)v113;
            v121 = v112[6];
            if (v121)
            {
              v122 = v120;
              do
              {
                v123 = (uint64_t *)v121;
                v124 = v122;
                v125 = *(_DWORD *)(v121 + 28);
                v126 = (uint64_t *)(v121 + 8);
                if (v125 >= v118)
                {
                  v126 = v123;
                  v122 = v123;
                }
                v121 = *v126;
              }
              while (v121);
              if (v122 != v120)
              {
                v127 = v125 >= v118 ? v123 : v124;
                if (*((_DWORD *)v127 + 7) <= v118)
                {
                  v129 = __cxa_allocate_exception(0x20uLL);
                  sub_1D3DDE1A0(v129, "We assume the x and y of a fiducial in a valid QR code is unique.");
                  *v129 = &off_1E95AF6D0;
                  __cxa_throw(v129, (struct type_info *)&unk_1E95AE3D8, (void (*)(void *))sub_1D3DE987C);
                }
              }
            }
            sub_1D3DE97C8(v119, v118, (int)v104);
            continue;
          }
        }
        do
        {
          while (1)
          {
            v109 = (uint64_t **)v107;
            v116 = *((_DWORD *)v107 + 8);
            if (v116 <= v106)
              break;
            v107 = *v109;
            v108 = v109;
            if (!*v109)
              goto LABEL_133;
          }
          if (v116 >= v106)
          {
            v128 = (char *)v109;
            goto LABEL_136;
          }
          v107 = v109[1];
        }
        while (v107);
        v108 = v109 + 1;
      }
LABEL_133:
      v128 = (char *)operator new(0x40uLL);
      *((_DWORD *)v128 + 8) = v106;
      *((_QWORD *)v128 + 7) = 0;
      *((_QWORD *)v128 + 6) = 0;
      *((_QWORD *)v128 + 5) = v128 + 48;
      *(_QWORD *)v128 = 0;
      *((_QWORD *)v128 + 1) = 0;
      *((_QWORD *)v128 + 2) = v109;
      *v108 = (uint64_t *)v128;
      v117 = (uint64_t *)v128;
      if (*v149)
      {
        v149 = (uint64_t **)*v149;
        v117 = *v108;
      }
      sub_1D3D7F97C(v150, v117);
      ++v151;
LABEL_136:
      sub_1D3DE97C8((uint64_t *)v128 + 5, (int)v105, (int)v105);
    }
    v153 = &v137;
    sub_1D3D6D79C((void ***)&v153);
    sub_1D3DC6848((unsigned int **)&v142);
    sub_1D3D6F2E0(&v144);
    sub_1D3DE9798(&v147);
    ++v15;
  }
  while (v136 < 1 || v135 < v136);
  v137.__vftable = (std::exception_vtbl *)v148;
  sub_1D3DE98F8((void ***)&v137);
  sub_1D3DE9968(v150);
  return sub_1D3D6D10C(&v152);
}

void sub_1D3DE8C00()
{
  JUMPOUT(0x1D3DE8C0CLL);
}

unsigned int **sub_1D3DE8C54(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int **v22;
  unsigned int *v23;
  float v24;
  unsigned int *v25;
  unsigned int v26;
  float v27;
  unsigned int **v28;
  unsigned int **v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int **v33;
  float v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  BOOL v43;
  char v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int **v48;
  unsigned int **v49;
  uint64_t v50;
  float v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int **v60;
  uint64_t v61;
  unsigned int **v62;
  BOOL v64;
  unsigned int **v65;
  unsigned int **v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int **v71;
  unsigned int **v72;
  unsigned int *v73;
  unsigned int v74;
  float *v75;
  unsigned int *v76;
  unsigned int v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  unsigned int **v82;
  unsigned int **v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int **v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int **v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int **v102;
  unsigned int **v103;
  unsigned int **v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int **v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int **v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int **v126;
  unsigned int *v127;
  unsigned int v128;
  float *v129;
  unsigned int *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int **v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int **v141;
  unsigned int **v142;
  unsigned int *v143;
  unsigned int v144;
  float *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int **v148;
  unsigned int **v149;
  unsigned int **v150;
  unsigned int *v151;
  float *v152;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v148 = a2 - 3;
  v149 = a2 - 2;
  v9 = v7;
  v150 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v61 = (uint64_t)*(a2 - 1);
        v60 = a2 - 1;
        if (*(float *)(v61 + 48) > *((float *)*v7 + 12))
          return sub_1D3DE9A88(v7, v60);
        return result;
      case 3:
        return sub_1D3DE9B4C(v7, v7 + 1, v8);
      case 4:
        return sub_1D3DE9C14(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return sub_1D3DE9CC0(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v62 = v7 + 1;
          v64 = v7 == a2 || v62 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v64)
            {
              v65 = v7;
              do
              {
                v66 = v62;
                v67 = v65[1];
                if (*((float *)v67 + 12) > *((float *)*v65 + 12))
                {
                  v68 = v67 + 2;
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
                  v152 = (float *)v67;
                  v70 = *v65;
                  v71 = v66;
                  while (1)
                  {
                    v72 = v65;
                    if (v70)
                    {
                      v73 = v70 + 2;
                      do
                        v74 = __ldxr(v73);
                      while (__stxr(v74 + 1, v73));
                    }
                    if (*v71)
                      sub_1D3D6D13C(*v71);
                    *v71 = v70;
                    v75 = v152;
                    if (v72 == v7)
                      break;
                    v65 = v72 - 1;
                    v70 = *(v72 - 1);
                    v71 = v72;
                    if (v152[12] <= *((float *)v70 + 12))
                      goto LABEL_119;
                  }
                  v72 = v7;
                  if (!v152)
                    goto LABEL_121;
LABEL_119:
                  v76 = (unsigned int *)(v152 + 2);
                  do
                    v77 = __ldxr(v76);
                  while (__stxr(v77 + 1, v76));
LABEL_121:
                  if (*v72)
                    sub_1D3D6D13C(*v72);
                  *v72 = (unsigned int *)v75;
                  result = sub_1D3DE9798((unsigned int **)&v152);
                }
                v62 = v66 + 1;
                v65 = v66;
              }
              while (v66 + 1 != v150);
            }
          }
          else if (!v64)
          {
            do
            {
              v136 = v62;
              v137 = v7[1];
              if (*((float *)v137 + 12) > *((float *)*v7 + 12))
              {
                v138 = v137 + 2;
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
                v152 = (float *)v137;
                v140 = *v7;
                v141 = v136;
                do
                {
                  v142 = v7;
                  if (v140)
                  {
                    v143 = v140 + 2;
                    do
                      v144 = __ldxr(v143);
                    while (__stxr(v144 + 1, v143));
                  }
                  if (*v141)
                    sub_1D3D6D13C(*v141);
                  *v141 = v140;
                  --v7;
                  v140 = *(v142 - 1);
                  v145 = v152;
                  v141 = v142;
                }
                while (v152[12] > *((float *)v140 + 12));
                v146 = (unsigned int *)(v152 + 2);
                do
                  v147 = __ldxr(v146);
                while (__stxr(v147 + 1, v146));
                if (*v142)
                  sub_1D3D6D13C(*v142);
                *v142 = (unsigned int *)v145;
                result = sub_1D3DE9798((unsigned int **)&v152);
              }
              v62 = v136 + 1;
              v7 = v136;
            }
            while (v136 + 1 != v150);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v78 = (unint64_t)(v11 - 2) >> 1;
          v79 = v78;
          do
          {
            v80 = v79;
            if (v78 >= v79)
            {
              v81 = (2 * v79) | 1;
              v82 = &v7[v81];
              if (2 * v80 + 2 < v11 && *((float *)*v82 + 12) > *((float *)v82[1] + 12))
              {
                ++v82;
                v81 = 2 * v80 + 2;
              }
              v83 = &v7[v80];
              v84 = *v83;
              if (*((float *)*v82 + 12) <= *((float *)*v83 + 12))
              {
                v85 = v84 + 2;
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
                v152 = (float *)v84;
                v87 = *v82;
                while (1)
                {
                  v88 = v82;
                  if (v87)
                  {
                    v89 = v87 + 2;
                    do
                      v90 = __ldxr(v89);
                    while (__stxr(v90 + 1, v89));
                  }
                  if (*v83)
                    sub_1D3D6D13C(*v83);
                  *v83 = v87;
                  if (v78 < v81)
                    break;
                  v91 = 2 * v81;
                  v81 = (2 * v81) | 1;
                  v82 = &v7[v81];
                  v92 = v91 + 2;
                  if (v92 < v11 && *((float *)*v82 + 12) > *((float *)v82[1] + 12))
                  {
                    ++v82;
                    v81 = v92;
                  }
                  v87 = *v82;
                  v93 = v152;
                  v83 = v88;
                  if (*((float *)*v82 + 12) > v152[12])
                    goto LABEL_148;
                }
                v93 = v152;
                if (v152)
                {
LABEL_148:
                  v94 = (unsigned int *)(v93 + 2);
                  do
                    v95 = __ldxr(v94);
                  while (__stxr(v95 + 1, v94));
                }
                if (*v88)
                  sub_1D3D6D13C(*v88);
                *v88 = (unsigned int *)v93;
                sub_1D3DE9798((unsigned int **)&v152);
              }
            }
            v79 = v80 - 1;
          }
          while (v80);
          v96 = (unint64_t)v10 >> 3;
          v97 = v150;
          while (2)
          {
            v98 = *v7;
            if (*v7)
            {
              v99 = v98 + 2;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            v101 = 0;
            v151 = v98;
            v102 = v7;
LABEL_159:
            v103 = &v102[v101];
            v106 = v103[1];
            v104 = v103 + 1;
            v105 = v106;
            v107 = 2 * v101;
            v101 = (2 * v101) | 1;
            v108 = v107 + 2;
            if (v108 >= v96)
            {
              if (v105)
                goto LABEL_163;
            }
            else
            {
              v109 = v104[1];
              if (*((float *)v105 + 12) > *((float *)v109 + 12))
              {
                v101 = v108;
                ++v104;
                v105 = v109;
              }
LABEL_163:
              v110 = v105 + 2;
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            if (*v102)
              sub_1D3D6D13C(*v102);
            *v102 = v105;
            v102 = v104;
            if (v101 > (uint64_t)((unint64_t)(v96 - 2) >> 1))
            {
              if (v104 == --v97)
              {
                v130 = v151;
                if (v151)
                {
                  v131 = v151 + 2;
                  do
                    v132 = __ldxr(v131);
                  while (__stxr(v132 + 1, v131));
                }
                if (*v104)
                  sub_1D3D6D13C(*v104);
                *v104 = v130;
              }
              else
              {
                v112 = v97;
                v113 = *v97;
                if (*v97)
                {
                  v114 = v113 + 2;
                  do
                    v115 = __ldxr(v114);
                  while (__stxr(v115 + 1, v114));
                }
                if (*v104)
                  sub_1D3D6D13C(*v104);
                *v104 = v113;
                v116 = v151;
                if (v151)
                {
                  v117 = v151 + 2;
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                if (*v97)
                  sub_1D3D6D13C(*v97);
                *v97 = v116;
                v119 = (char *)v104 - (char *)v7 + 8;
                if (v119 >= 9)
                {
                  v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
                  v121 = &v7[v120];
                  v122 = *v104;
                  if (*((float *)*v121 + 12) > *((float *)*v104 + 12))
                  {
                    v123 = v122 + 2;
                    do
                      v124 = __ldxr(v123);
                    while (__stxr(v124 + 1, v123));
                    v152 = (float *)v122;
                    v125 = *v121;
                    while (1)
                    {
                      v126 = v121;
                      if (v125)
                      {
                        v127 = v125 + 2;
                        do
                          v128 = __ldxr(v127);
                        while (__stxr(v128 + 1, v127));
                      }
                      if (*v104)
                        sub_1D3D6D13C(*v104);
                      *v104 = v125;
                      if (!v120)
                        break;
                      v120 = (v120 - 1) >> 1;
                      v121 = &v7[v120];
                      v125 = *v121;
                      v129 = v152;
                      v104 = v126;
                      if (*((float *)*v121 + 12) <= v152[12])
                        goto LABEL_199;
                    }
                    v129 = v152;
                    if (!v152)
                      goto LABEL_201;
LABEL_199:
                    v133 = (unsigned int *)(v129 + 2);
                    do
                      v134 = __ldxr(v133);
                    while (__stxr(v134 + 1, v133));
LABEL_201:
                    if (*v126)
                      sub_1D3D6D13C(*v126);
                    *v126 = (unsigned int *)v129;
                    sub_1D3DE9798((unsigned int **)&v152);
                    v97 = v112;
                  }
                }
              }
              result = sub_1D3DE9798(&v151);
              if (v96-- <= 2)
                return result;
              continue;
            }
            goto LABEL_159;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1D3DE9B4C(v13, v7, v8);
        }
        else
        {
          sub_1D3DE9B4C(v7, v13, v8);
          sub_1D3DE9B4C(v7 + 1, v13 - 1, v149);
          sub_1D3DE9B4C(v7 + 2, &v7[v12 + 1], v148);
          sub_1D3DE9B4C(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          if (*v7)
          {
            v15 = v14 + 2;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v152 = (float *)v14;
          v17 = *v13;
          if (*v13)
          {
            v18 = v17 + 2;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          if (*v7)
          {
            sub_1D3D6D13C(*v7);
            v14 = (unsigned int *)v152;
          }
          *v7 = v17;
          if (v14)
          {
            v20 = v14 + 2;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          if (*v13)
            sub_1D3D6D13C(*v13);
          *v13 = v14;
          sub_1D3DE9798((unsigned int **)&v152);
        }
        --a3;
        v22 = v150;
        if ((a4 & 1) == 0)
        {
          v23 = *v7;
          v24 = *((float *)*v7 + 12);
          if (*((float *)*(v7 - 1) + 12) > v24)
            goto LABEL_26;
          v45 = v23 + 2;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
          v152 = (float *)v23;
          if (v24 <= *((float *)*v8 + 12))
          {
            v48 = v7 + 1;
            do
            {
              v9 = v48;
              if (v48 >= v150)
                break;
              ++v48;
            }
            while (v24 <= *((float *)*v9 + 12));
          }
          else
          {
            v9 = v7;
            do
            {
              v47 = v9[1];
              ++v9;
            }
            while (v24 <= *((float *)v47 + 12));
          }
          v49 = v150;
          if (v9 < v150)
          {
            v49 = v150;
            do
              v50 = (uint64_t)*--v49;
            while (v24 > *(float *)(v50 + 48));
          }
          while (v9 < v49)
          {
            sub_1D3DE9A88(v9, v49);
            v23 = (unsigned int *)v152;
            v51 = v152[12];
            do
            {
              v52 = v9[1];
              ++v9;
            }
            while (v51 <= *((float *)v52 + 12));
            do
              v53 = (uint64_t)*--v49;
            while (v51 > *(float *)(v53 + 48));
          }
          v54 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v55 = *v54;
            if (*v54)
            {
              v56 = v55 + 2;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            if (*v7)
              sub_1D3D6D13C(*v7);
            *v7 = v55;
            v23 = (unsigned int *)v152;
          }
          if (v23)
          {
            v58 = v23 + 2;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          if (*v54)
            sub_1D3D6D13C(*v54);
          *v54 = v23;
          result = sub_1D3DE9798((unsigned int **)&v152);
          a4 = 0;
          a2 = v150;
          continue;
        }
        v23 = *v7;
        if (*v7)
        {
LABEL_26:
          v25 = v23 + 2;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v152 = (float *)v23;
        v27 = *((float *)v23 + 12);
        v28 = v7;
        do
        {
          v29 = v28;
          v30 = v28[1];
          ++v28;
        }
        while (*((float *)v30 + 12) > v27);
        if (v29 == v7)
        {
          v22 = v150;
          do
          {
            if (v28 >= v22)
              break;
            v32 = (uint64_t)*--v22;
          }
          while (*(float *)(v32 + 48) <= v27);
        }
        else
        {
          do
            v31 = (uint64_t)*--v22;
          while (*(float *)(v31 + 48) <= v27);
        }
        v9 = v28;
        if (v28 < v22)
        {
          v33 = v22;
          do
          {
            sub_1D3DE9A88(v9, v33);
            v23 = (unsigned int *)v152;
            v34 = v152[12];
            do
            {
              v35 = v9[1];
              ++v9;
            }
            while (*((float *)v35 + 12) > v34);
            do
              v36 = (uint64_t)*--v33;
            while (*(float *)(v36 + 48) <= v34);
          }
          while (v9 < v33);
        }
        v37 = v9 - 1;
        if (v9 - 1 != v7)
        {
          v38 = *v37;
          if (*v37)
          {
            v39 = v38 + 2;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          if (*v7)
            sub_1D3D6D13C(*v7);
          *v7 = v38;
          v23 = (unsigned int *)v152;
        }
        if (v23)
        {
          v41 = v23 + 2;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        if (*v37)
          sub_1D3D6D13C(*v37);
        *v37 = v23;
        sub_1D3DE9798((unsigned int **)&v152);
        v43 = v28 >= v22;
        a2 = v150;
        if (!v43)
        {
LABEL_58:
          result = (unsigned int **)sub_1D3DE8C54(v7, v9 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = sub_1D3DE9DA0(v7, v9 - 1);
        result = (unsigned int **)sub_1D3DE9DA0(v9, v150);
        if (!(_DWORD)result)
        {
          if ((v44 & 1) != 0)
            continue;
          goto LABEL_58;
        }
        a2 = v9 - 1;
        if ((v44 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1D3DE96BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3DE9798((unsigned int **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3DE971C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D3D6D864(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D3DE9784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D3DE98F8(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DE9798(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

uint64_t *sub_1D3DE97C8(uint64_t *result, int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_1D3D7F97C((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

_QWORD *sub_1D3DE9880(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = &off_1E95AFA80;
  v3 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1D3D7FCC0(v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  *a1 = &off_1E95AF6D0;
  return a1;
}

void sub_1D3DE98E4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3DE98F8(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1D3DC2944(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D3DE9968(_QWORD *a1)
{
  if (a1)
  {
    sub_1D3DE9968(*a1);
    sub_1D3DE9968(a1[1]);
    sub_1D3D7F520((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void sub_1D3DE99A8(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1D3DC6848(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D3DE9A18(std::exception *a1)
{
  sub_1D3DDE164(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3DE9A3C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3DC6848((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int **sub_1D3DE9A88(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;

  v4 = *a1;
  if (*a1)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v14 = v4;
  v7 = *a2;
  if (*a2)
  {
    v8 = v7 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a1;
  if (*a1)
  {
    sub_1D3D6D13C(v10);
    v4 = v14;
  }
  *a1 = v7;
  if (v4)
  {
    v11 = v4 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*a2)
    sub_1D3D6D13C(*a2);
  *a2 = v4;
  return sub_1D3DE9798(&v14);
}

void sub_1D3DE9B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DE9798((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DE9B4C(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v5;
  float v6;
  float v7;
  unsigned int **v8;

  v5 = result;
  v6 = *((float *)*a2 + 12);
  v7 = *((float *)*a3 + 12);
  if (v6 > *((float *)*result + 12))
  {
    if (v7 <= v6)
    {
      result = sub_1D3DE9A88(result, a2);
      if (*((float *)*a3 + 12) <= *((float *)*a2 + 12))
        return result;
      result = a2;
    }
    v8 = a3;
    return sub_1D3DE9A88(result, v8);
  }
  if (v7 > v6)
  {
    result = sub_1D3DE9A88(a2, a3);
    if (*((float *)*a2 + 12) > *((float *)*v5 + 12))
    {
      result = v5;
      v8 = a2;
      return sub_1D3DE9A88(result, v8);
    }
  }
  return result;
}

unsigned int **sub_1D3DE9C14(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **result;

  result = sub_1D3DE9B4C(a1, a2, a3);
  if (*((float *)*a4 + 12) > *((float *)*a3 + 12))
  {
    result = sub_1D3DE9A88(a3, a4);
    if (*((float *)*a3 + 12) > *((float *)*a2 + 12))
    {
      result = sub_1D3DE9A88(a2, a3);
      if (*((float *)*a2 + 12) > *((float *)*a1 + 12))
        return sub_1D3DE9A88(a1, a2);
    }
  }
  return result;
}

unsigned int **sub_1D3DE9CC0(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **result;

  result = sub_1D3DE9C14(a1, a2, a3, a4);
  if (*((float *)*a5 + 12) > *((float *)*a4 + 12))
  {
    result = sub_1D3DE9A88(a4, a5);
    if (*((float *)*a4 + 12) > *((float *)*a3 + 12))
    {
      result = sub_1D3DE9A88(a3, a4);
      if (*((float *)*a3 + 12) > *((float *)*a2 + 12))
      {
        result = sub_1D3DE9A88(a2, a3);
        if (*((float *)*a2 + 12) > *((float *)*a1 + 12))
          return sub_1D3DE9A88(a1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_1D3DE9DA0(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  float *v20;

  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*((float *)*(a2 - 1) + 12) > *((float *)*a1 + 12))
        sub_1D3DE9A88(a1, a2 - 1);
      return v4;
    case 3:
      sub_1D3DE9B4C(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_1D3DE9C14(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_1D3DE9CC0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_1D3DE9B4C(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (1)
  {
    v8 = *v6;
    if (*((float *)*v6 + 12) > *((float *)*v5 + 12))
      break;
LABEL_25:
    v5 = v6++;
    if (v6 == a2)
      return 1;
  }
  v9 = v8 + 2;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v20 = (float *)v8;
  v11 = *v5;
  v12 = v6;
  while (1)
  {
    v13 = v5;
    if (v11)
    {
      v14 = v11 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (*v12)
      sub_1D3D6D13C(*v12);
    *v12 = v11;
    v16 = v20;
    if (v5 == a1)
      break;
    --v5;
    v11 = *(v13 - 1);
    v12 = v13;
    if (v20[12] <= *((float *)v11 + 12))
      goto LABEL_19;
  }
  v13 = a1;
  if (!v20)
    goto LABEL_21;
LABEL_19:
  v17 = (unsigned int *)(v20 + 2);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_21:
  if (*v13)
    sub_1D3D6D13C(*v13);
  *v13 = (unsigned int *)v16;
  if (++v7 != 8)
  {
    sub_1D3DE9798((unsigned int **)&v20);
    goto LABEL_25;
  }
  v4 = v6 + 1 == a2;
  sub_1D3DE9798((unsigned int **)&v20);
  return v4;
}

void sub_1D3DE9FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DE9798((unsigned int **)va);
  _Unwind_Resume(a1);
}

void sub_1D3DE9FC4(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1D3DE9798(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_1D3DEA034(void **a1)
{
  void **v2;
  void **v4;

  v2 = a1 + 6;
  v4 = a1 + 9;
  sub_1D3DE98F8(&v4);
  v4 = v2;
  sub_1D3DE98F8(&v4);
  v4 = a1 + 3;
  sub_1D3D7FB84(&v4);
  v4 = a1;
  sub_1D3DE9FC4(&v4);
  return a1;
}

uint64_t sub_1D3DEA098(const void *a1)
{
  CFTypeID v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFNumberGetTypeID()
    && !CFNumberIsFloatType((CFNumberRef)a1)
    && CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, v7))
  {
    v3 = v7[0];
    v5 = v7[0] & 0xFFFFFF00;
    if (HIDWORD(v7[0]))
    {
      v3 = 0;
      v4 = 0;
    }
    else
    {
      v4 = 0x100000000;
    }
    if (HIDWORD(v7[0]))
      v5 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  return v4 & 0x100000000 | v3 | v5 & 0xFFFFFF00;
}

unint64_t sub_1D3DEA15C(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  unint64_t v4;
  int Value;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = CFGetTypeID(a1);
  if (v2 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
  {
    Value = CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, v7);
    v4 = v7[0] & 0xFFFFFFFFFFFFFF00;
    v3 = LOBYTE(v7[0]);
    if (!Value)
    {
      v4 = 0;
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v4 | v3;
}

unint64_t sub_1D3DEA20C(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;

  v2 = CFGetTypeID(a1);
  if (v2 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
  {
    v5 = CFNumberGetValue((CFNumberRef)a1, kCFNumberMaxType|kCFNumberSInt8Type, &v9) != 0;
    v6 = v9 == 0;
    v7 = !v5 || !v6;
    if (v5 && v6)
      v4 = v10 & 0xFFFFFFFFFFFFFF00;
    else
      v4 = 0;
    if (v7)
      v3 = 0;
    else
      v3 = v10;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v4 | v3;
}

uint64_t sub_1D3DEA29C(const void *a1)
{
  double v1;
  CFTypeID v3;
  double v4;
  double v6[2];

  v6[1] = *(double *)MEMORY[0x1E0C80C00];
  v1 = 0.0;
  if (!a1)
    return *(_QWORD *)&v1;
  v3 = CFGetTypeID(a1);
  if (v3 != CFNumberGetTypeID())
    return *(_QWORD *)&v1;
  if ((const void *)*MEMORY[0x1E0C9B218] == a1
    || CFNumberCompare((CFNumberRef)a1, (CFNumberRef)*MEMORY[0x1E0C9B218], 0) == kCFCompareEqualTo)
  {
    v4 = INFINITY;
LABEL_17:
    v1 = v4;
    return *(_QWORD *)&v1;
  }
  if ((const void *)*MEMORY[0x1E0C9B210] == a1
    || CFNumberCompare((CFNumberRef)a1, (CFNumberRef)*MEMORY[0x1E0C9B210], 0) == kCFCompareEqualTo)
  {
    v4 = -INFINITY;
    goto LABEL_17;
  }
  if ((const void *)*MEMORY[0x1E0C9B208] == a1
    || CFNumberCompare((CFNumberRef)a1, (CFNumberRef)*MEMORY[0x1E0C9B208], 0) == kCFCompareEqualTo)
  {
    v4 = NAN;
    goto LABEL_17;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, v6))
  {
    if (v6[0] >= -1.79769313e308 && v6[0] <= 1.79769313e308)
      v1 = v6[0];
    else
      v1 = 0.0;
  }
  return *(_QWORD *)&v1;
}

CFStringRef sub_1D3DEA3F4(UInt8 *bytes, CFIndex numBytes)
{
  if (numBytes)
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, numBytes, 0x8000100u, 0);
  else
    return (CFStringRef)CFRetain(&stru_1E95B5208);
}

CFStringRef sub_1D3DEA428(const __CFString *a1)
{
  CFTypeID v2;

  if (a1 && (v2 = CFGetTypeID(a1), v2 == CFStringGetTypeID()))
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  else
    return 0;
}

CFDictionaryRef sub_1D3DEA47C(const __CFDictionary *a1)
{
  CFTypeID v2;

  if (a1
    && (v2 = CFGetTypeID(a1), v2 == CFDictionaryGetTypeID())
    && CFPropertyListIsValid(a1, kCFPropertyListBinaryFormat_v1_0))
  {
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  }
  else
  {
    return 0;
  }
}

CFDictionaryRef sub_1D3DEA4E0(const void *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (v2 == CFDictionaryGetTypeID())
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)a1);
  else
    return 0;
}

uint64_t sub_1D3DEA530(const void *a1)
{
  CFTypeID v2;
  _BOOL4 v3;
  int v4;

  v2 = CFGetTypeID(a1);
  if (v2 == CFBooleanGetTypeID())
  {
    v3 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
    v4 = 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v3 | (v4 << 8);
}

const void **sub_1D3DEA584(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1D3DEA5B4(CFDictionaryRef *a1, const __CFString *cf, const void *a3)
{
  CFTypeID v6;
  uint64_t result;

  if (!*a1)
    return 0;
  v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID())
    return 0;
  result = CFStringGetLength(cf);
  if (!result)
    return result;
  if (CFDictionaryContainsKey(*a1, cf))
    return 0;
  result = CFPropertyListIsValid(a3, kCFPropertyListBinaryFormat_v1_0);
  if ((_DWORD)result)
  {
    CFDictionarySetValue(*a1, cf, a3);
    return 1;
  }
  return result;
}

CFDictionaryRef *sub_1D3DEA648(CFDictionaryRef *a1, const __CFDictionary *cf)
{
  CFTypeID v4;
  CFDictionaryRef Copy;

  if (cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cf);
  else
    Copy = 0;
  *a1 = Copy;
  return a1;
}

const void **sub_1D3DEA6B0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFTypeRef sub_1D3DEA6E0(CFDictionaryRef *a1, const __CFString *cf)
{
  CFTypeID v4;
  const void *Value;
  const void *v6;

  if (*a1
    && (v4 = CFGetTypeID(cf), v4 == CFStringGetTypeID())
    && CFStringGetLength(cf)
    && (Value = CFDictionaryGetValue(*a1, cf)) != 0
    && (v6 = Value, CFPropertyListIsValid(Value, kCFPropertyListBinaryFormat_v1_0)))
  {
    return CFRetain(v6);
  }
  else
  {
    return 0;
  }
}

void sub_1D3DEA770(uint64_t a1)
{
  sub_1D3DF33C4(a1);
  JUMPOUT(0x1D8254C54);
}

unsigned int **sub_1D3DEA794@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __n128 v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  uint64_t v61;
  float v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  __n128 v71;
  float v72;
  float v73;
  int v74;
  uint64_t i;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int **v96;
  void **v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int **v100;
  uint64_t v101;
  void **v102;
  int v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  uint64_t v109;
  unsigned int *v110;
  float v111;
  float v112;
  char v113;
  unsigned int *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  unsigned int v123;
  unsigned int **v124;
  unsigned int v125;
  unsigned int *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  int v132;
  NSObject *v133;
  _BOOL4 v134;
  uint64_t v135;
  unsigned int **v136;
  unint64_t v137;
  unsigned int **v138;
  unint64_t v139;
  unsigned int **v140;
  unsigned int **v141;
  uint64_t v142;
  unsigned int **v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int **v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  void **v150;
  void **v151;
  uint64_t v152;
  unsigned int **v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int **v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int v159;
  uint64_t v161;
  uint64_t v162;
  _BYTE v163[500];
  uint64_t v164;
  int v165;
  _QWORD v166[2];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int *v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  __int128 v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _QWORD **v186;
  _BYTE *v187;
  uint64_t v188;
  int v189;
  void ***v190;
  void **v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  _BYTE v195[24];
  _BYTE v196[24];
  unsigned int *v197;
  unsigned int *v198;
  float *v199;
  float *v200;
  unsigned int *v201;
  unsigned int *v202;
  void ***v203;
  char v204;
  void **v205[4];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unsigned int v209;
  __int128 v210;
  __int128 v211;
  unsigned int v212;
  __int128 v213;
  __int128 v214;
  unsigned int v215;
  __int128 v216;
  __int128 v217;
  unsigned int v218;
  uint64_t v219;

  v4 = a2;
  v5 = a1;
  v167 = a3;
  v219 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 176) = (int)a2[1];
  v6 = *(unsigned int **)(a1 + 8);
  v186 = (_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v166[1] = v166;
  memset(v196, 0, sizeof(v196));
  v197 = v6;
  memset(v195, 0, sizeof(v195));
  MEMORY[0x1E0C80A78](a4);
  v13 = v163;
  v14 = v12 & v11 | v10 & v9;
  v16 = v15 < 0 || (int)(float)((float)((float)v14 / 228.0) * 3.0) < 3;
  v164 = 0;
  *(_QWORD *)&v163[492] = 0;
  v165 = 0;
  if (v16)
    v17 = 3;
  else
    v17 = (int)(float)((float)((float)v14 / 228.0) * 3.0);
  v180 = v4;
  if (v17 > v14)
    goto LABEL_126;
  v176 = v10 & v11 | v12 & v9;
  v18 = v17 - 1;
  v169 = v17;
  v168 = v14;
  v181 = (uint64_t)&v213 + 8;
  v182 = (int)v176;
  v170 = (unsigned int *)(v5 + 152);
  v171 = (unsigned int *)(v5 + 128);
  v19 = -0.9;
  v178 = xmmword_1D3E82070;
  v20 = -0.5;
  v21 = -0.3;
  v22 = -0.75;
  v187 = v163;
  v179 = v5;
  *(float *)&v172 = -0.3;
  *(float *)&v173 = -0.9;
  do
  {
    v23 = 0;
    v24 = *((_QWORD *)v197 + 6);
    v25 = ((*((_QWORD *)v197 + 2) + ~v18) & -*((_QWORD *)v197 + 7))
        + ((*((_QWORD *)v197 + 4) - 1) & -*((_QWORD *)v197 + 7) | (*((_QWORD *)v197 + 7) - 1) & v18)
        * *((_QWORD *)v197 + 3);
    *((_DWORD *)v13 + 2) = 0;
    v26 = *(_DWORD *)(v24 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFFCLL));
    *(_QWORD *)v13 = 0;
    v27 = ((1 << v25) & v26) == 0;
    v28 = 0;
    v29 = !v27;
    v185 = v29;
    if (v27)
      v30 = 3;
    else
      v30 = 2;
    v183 = v18;
    v184 = (int)v18;
    while (2)
    {
      if ((int)v28 < (int)v176)
      {
        v31 = v30;
        v32 = v197;
LABEL_21:
        v33 = 0;
        *(_DWORD *)&v13[4 * v31] = 0;
        v34 = (int)v28;
        while (1)
        {
          v35 = sub_1D3D6D4A0(v32, v34 + v33, v183);
          if ((v185 & 1) != 0)
          {
            if ((v35 & 1) == 0)
              goto LABEL_28;
          }
          else if ((v35 & 1) != 0)
          {
LABEL_28:
            v28 = v34 + v33;
            v185 ^= 1u;
            v30 = v31 + 1;
            v13 = v187;
            if (v31 <= 0x79)
            {
              ++v31;
              if ((int)v28 < (int)v176)
                goto LABEL_21;
            }
            v175 = v28;
            if ((int)v28 >= (int)v176)
              goto LABEL_37;
            v174 = 1;
            v37 = 114;
            goto LABEL_41;
          }
          *(_DWORD *)&v187[4 * v31] = ++v33;
          if (v34 + v33 >= v182)
          {
            if ((int)v34 + 1 > (int)v176)
              v38 = (v34 + 1);
            else
              v38 = v176;
            v175 = v38;
            v185 ^= 1u;
            v30 = v31 + 1;
            v13 = v187;
            goto LABEL_37;
          }
        }
      }
      v175 = v28;
LABEL_37:
      v39 = v30 + 4;
      if (__OFSUB__(v30, v30 + 4))
        v39 = v30;
      bzero(&v13[4 * v30], 4 * (v39 - v30) + 4);
      if (v30 < 7)
        break;
      v174 = 0;
      v37 = v30 - 4;
LABEL_41:
      v189 = *(_DWORD *)v13 + v23;
      v188 = v37;
      v40 = v13;
      v41 = 2;
      do
      {
        v189 += *(_DWORD *)&v13[4 * v41 - 4];
        if ((*(_WORD *)v4 & 0x802) != 0)
        {
          sub_1D3E09FC4((uint64_t)&v13[4 * v41], v36);
          if (v36.n128_f32[0] > v22)
          {
            v42 = 8;
            LODWORD(v43) = v189;
            do
            {
              v43 = *(int *)&v40[v42] + (uint64_t)(int)v43;
              v42 += 4;
            }
            while (v42 != 28);
            sub_1D3E0AEA0((unsigned int **)&v199, v186, (int *)&v13[4 * v41], v181, v184, v43, v41 & 1, -0.75, 2.5);
            v44 = (unsigned int *)v199;
            if (v199[5] > 0.0)
            {
              if (v199[6] <= v20)
              {
                if ((v41 & 1) != 0)
                {
                  v48 = *(_QWORD *)(v5 + 160);
                  if (v48 >= *(_QWORD *)(v5 + 168))
                  {
                    v49 = sub_1D3DF32B8((uint64_t)v170, (unsigned int **)&v199);
                  }
                  else
                  {
                    sub_1D3DF3254(v170, (unsigned int **)&v199);
                    v49 = v48 + 8;
                  }
                  *(_QWORD *)(v5 + 160) = v49;
                }
                else
                {
                  v50 = *(_QWORD *)(v5 + 136);
                  if (v50 >= *(_QWORD *)(v5 + 144))
                  {
                    v51 = sub_1D3DF32B8((uint64_t)v171, (unsigned int **)&v199);
                  }
                  else
                  {
                    sub_1D3DF3254(v171, (unsigned int **)&v199);
                    v51 = v50 + 8;
                  }
                  *(_QWORD *)(v5 + 136) = v51;
                }
              }
              else
              {
                v45 = (unsigned int *)(v199 + 2);
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
                v198 = v44;
                v47 = 16;
                if ((v41 & 1) != 0)
                  v47 = 64;
                sub_1D3E0B214((uint64_t)v186, &v198, (unsigned int *)(v5 + v47));
                sub_1D3DC2944(&v198);
              }
            }
            sub_1D3DC2944((unsigned int **)&v199);
          }
        }
        if ((*((_BYTE *)v4 + 1) & 4) == 0)
          goto LABEL_112;
        v36.n128_f32[0] = sub_1D3E0A1DC((uint64_t)&v13[4 * v41]);
        if (v36.n128_f32[0] <= v19)
          goto LABEL_112;
        v52 = 0;
        v53 = v189;
        do
        {
          v54 = *(_DWORD *)&v40[v52 + 8];
          *(_DWORD *)((char *)&v216 + v52) = v54;
          v53 += v54;
          v52 += 4;
        }
        while (v52 != 36);
        v55 = operator new();
        v56 = (unsigned int *)v55;
        *(_DWORD *)(v55 + 8) = 0;
        v57 = (unsigned int *)(v55 + 8);
        *(_OWORD *)(v55 + 12) = v178;
        *(_DWORD *)(v55 + 28) = 1;
        *(_BYTE *)(v55 + 32) = 0;
        *(_QWORD *)v55 = &off_1E95AF600;
        *(_BYTE *)(v55 + 180) = 0;
        *(_OWORD *)(v55 + 36) = v216;
        *(_OWORD *)(v55 + 52) = v217;
        *(_DWORD *)(v55 + 68) = v218;
        v58 = v214;
        *(_OWORD *)(v55 + 72) = v213;
        *(_OWORD *)(v55 + 88) = v58;
        *(_DWORD *)(v55 + 104) = v215;
        *(_OWORD *)(v55 + 108) = v210;
        *(_OWORD *)(v55 + 124) = v211;
        *(_DWORD *)(v55 + 140) = v212;
        v59 = v208;
        *(_OWORD *)(v55 + 144) = v207;
        *(_OWORD *)(v55 + 160) = v59;
        *(_DWORD *)(v55 + 176) = v209;
        do
          v60 = __ldxr(v57);
        while (__stxr(v60 + 1, v57));
        v202 = (unsigned int *)v55;
        v213 = 0u;
        v214 = 0u;
        v215 = 0;
        v61 = 20;
        v62 = (float)v53;
        do
        {
          v62 = v62 - (float)*(int *)((char *)&v216 + v61);
          v61 += 4;
        }
        while (v61 != 36);
        v63 = (unint64_t)(float)(v62 + (float)((float)(int)v217 * v20));
        v64 = 2 * (int)v217;
        v65 = *v186;
        v66 = sub_1D3E0A4C0(*v186, v184, v63, v64, (int *)&v213, 9u, v41 & 1);
        v67 = sub_1D3E0A1DC((uint64_t)&v213);
        if (v67 <= v21)
        {
          v5 = v179;
          v13 = v187;
        }
        else
        {
          v68 = v67;
          v69 = sub_1D3E0A728(v65, v63, (unint64_t)v66, v64, (int *)&v216, 9u, v41 & 1);
          v70 = sub_1D3E0A1DC((uint64_t)&v216);
          v5 = v179;
          v13 = v187;
          if (v70 > v21)
          {
            v72 = (float)(v68 + v70) + (float)(sub_1D3E0A424((uint64_t)&v216, (uint64_t)&v213) * 0.5);
            if (v72 > v21)
            {
              v71.n128_f32[0] = v21;
              v73 = sub_1D3E0A990((uint64_t)v186, (unint64_t)v66, (unint64_t)v69, 2 * (int)v217, (uint64_t)&v210, (uint64_t)&v207, 9, v41 & 1, v71, 1);
              if (v73 <= v21 || (float)(v73 + (float)(sub_1D3E0A424((uint64_t)&v210, (uint64_t)&v207) * 0.5)) <= v21)
              {
                v56 = v202;
                if (!v202)
                  goto LABEL_82;
              }
              else
              {
                v74 = 0;
                for (i = 4; i != 32; i += 4)
                  v74 += *(_DWORD *)((char *)&v216 + i) + *(_DWORD *)((char *)&v213 + i);
                v56 = (unsigned int *)operator new();
                v56[2] = 0;
                *((float *)v56 + 3) = v69;
                *((float *)v56 + 4) = v66;
                *((float *)v56 + 5) = (float)v74 / 14.0;
                *((float *)v56 + 6) = v72;
                v56[7] = 1;
                *((_BYTE *)v56 + 32) = 0;
                *(_QWORD *)v56 = &off_1E95AF600;
                *((_BYTE *)v56 + 180) = v41 & 1;
                *(_OWORD *)(v56 + 9) = v216;
                *(_OWORD *)(v56 + 13) = v217;
                v56[17] = v218;
                v76 = v213;
                v77 = v214;
                v56[26] = v215;
                *(_OWORD *)(v56 + 22) = v77;
                *(_OWORD *)(v56 + 18) = v76;
                *(_OWORD *)(v56 + 27) = v210;
                *(_OWORD *)(v56 + 31) = v211;
                v56[35] = v212;
                v78 = v208;
                *((_OWORD *)v56 + 9) = v207;
                *((_OWORD *)v56 + 10) = v78;
                v56[44] = v209;
              }
            }
          }
        }
        v79 = v56 + 2;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
LABEL_82:
        v4 = v180;
        v201 = v56;
        sub_1D3D7F2A8(&v202);
        if ((v41 & 1) != 0)
          v81 = 88;
        else
          v81 = 40;
        v82 = v201;
        if (v201)
        {
          v83 = v201 + 2;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v200 = (float *)v82;
        v85 = *((float *)v82 + 5);
        if (v85 > 0.0)
        {
          v86 = (*(float (**)(unsigned int *))(*(_QWORD *)v82 + 16))(v82);
          (*(void (**)(float *))(*(_QWORD *)v200 + 24))(v200);
          v88 = v5 + v81;
          v89 = *(_QWORD *)(v88 + 8);
          v90 = v89 - *(_QWORD *)v88;
          if (v89 == *(_QWORD *)v88)
          {
LABEL_99:
            if (v89 >= *(_QWORD *)(v88 + 16))
            {
              v100 = sub_1D3DED778((unsigned int ***)v88, (unsigned int **)&v200);
            }
            else
            {
              sub_1D3DED714((unsigned int *)v88, (unsigned int **)&v200);
              v100 = (unsigned int **)(v89 + 8);
            }
            *(_QWORD *)(v88 + 8) = v100;
            v101 = *(_QWORD *)(v5 + 120);
            if (v101)
              (*(void (**)(uint64_t, float *))(*(_QWORD *)v101 + 16))(v101, v200);
          }
          else
          {
            v91 = v87;
            v92 = 0;
            v93 = v200[6];
            v94 = v90 >> 3;
            if (v94 <= 1)
              v95 = 1;
            else
              v95 = v94;
            while (1)
            {
              v96 = *(unsigned int ***)v88;
              v205[0] = 0;
              v97 = (void **)v96[v92];
              if (v97)
              {
                v98 = (unsigned int *)(v97 + 1);
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              v205[0] = v97;
              if (sub_1D3DDE244((float *)v97, v85, v91, v86))
                break;
              sub_1D3D7F2A8((unsigned int **)v205);
              if (++v92 == v95)
              {
                v89 = *(_QWORD *)(v88 + 8);
                v13 = v187;
                v22 = -0.75;
                goto LABEL_99;
              }
            }
            v102 = v205[0];
            v103 = *((_DWORD *)v205[0] + 7);
            v104 = (*((float (**)(void **))*v205[0] + 2))(v205[0]);
            v177 = *((_DWORD *)v102 + 7);
            v105 = (*((float (**)(void **))*v102 + 3))(v102);
            v106 = *((_DWORD *)v102 + 7);
            v108 = *((float *)v102 + 5);
            v107 = *((float *)v102 + 6);
            v109 = operator new();
            v110 = (unsigned int *)v109;
            v111 = (float)(v103 + 1);
            v112 = (float)(v91 + (float)((float)v177 * v105)) / v111;
            v113 = *((_BYTE *)v102 + 180);
            *(_DWORD *)(v109 + 8) = 0;
            v114 = (unsigned int *)(v109 + 8);
            *(float *)(v109 + 12) = (float)(v86 + (float)((float)v103 * v104)) / v111;
            *(float *)(v109 + 16) = v112;
            *(float *)(v109 + 20) = (float)(v85 + (float)((float)v106 * v108)) / v111;
            *(float *)(v109 + 24) = (float)(v93 + (float)((float)v106 * v107)) / v111;
            *(_DWORD *)(v109 + 28) = v103 + 1;
            *(_BYTE *)(v109 + 32) = 0;
            *(_QWORD *)v109 = &off_1E95AF600;
            *(_BYTE *)(v109 + 180) = v113;
            v115 = *(_OWORD *)((char *)v102 + 36);
            v116 = *(_OWORD *)((char *)v102 + 52);
            *(_DWORD *)(v109 + 68) = *((_DWORD *)v102 + 17);
            *(_OWORD *)(v109 + 52) = v116;
            *(_OWORD *)(v109 + 36) = v115;
            v117 = *(_OWORD *)(v102 + 9);
            v118 = *(_OWORD *)(v102 + 11);
            *(_DWORD *)(v109 + 104) = *((_DWORD *)v102 + 26);
            *(_OWORD *)(v109 + 88) = v118;
            *(_OWORD *)(v109 + 72) = v117;
            v119 = *(_OWORD *)((char *)v102 + 108);
            v120 = *(_OWORD *)((char *)v102 + 124);
            *(_DWORD *)(v109 + 140) = *((_DWORD *)v102 + 35);
            *(_OWORD *)(v109 + 124) = v120;
            *(_OWORD *)(v109 + 108) = v119;
            v121 = *((_OWORD *)v102 + 9);
            v122 = *((_OWORD *)v102 + 10);
            *(_DWORD *)(v109 + 176) = *((_DWORD *)v102 + 44);
            *(_OWORD *)(v109 + 144) = v121;
            *(_OWORD *)(v109 + 160) = v122;
            do
              v123 = __ldxr(v114);
            while (__stxr(v123 + 1, v114));
            *(_QWORD *)&v193 = v109;
            v124 = *(unsigned int ***)v88;
            v5 = v179;
            v4 = v180;
            v13 = v187;
            v21 = *(float *)&v172;
            v19 = *(float *)&v173;
            v20 = -0.5;
            v22 = -0.75;
            do
              v125 = __ldxr(v114);
            while (__stxr(v125 + 1, v114));
            v126 = v124[v92];
            if (v126)
              sub_1D3D6D13C(v126);
            v124[v92] = v110;
            sub_1D3D7F2A8((unsigned int **)&v193);
            sub_1D3D7F2A8((unsigned int **)v205);
          }
        }
        sub_1D3D7F2A8((unsigned int **)&v200);
        sub_1D3D7F2A8(&v201);
LABEL_112:
        ++v41;
        v40 += 4;
      }
      while (v41 != v188);
      if ((v174 & 1) != 0)
      {
        v127 = 0;
        if ((v185 & 1) != 0)
          v128 = 12;
        else
          v128 = 11;
        v30 = v128;
        v129 = 111;
        if ((v185 & 1) == 0)
          v129 = 112;
        v130 = v13;
        do
        {
          v131 = v130[v129];
          *v130++ = v131;
          v127 += v131;
          --v128;
        }
        while (v128);
        v28 = v175;
        v23 = v175 - v127;
        continue;
      }
      break;
    }
    v18 = v183 + v169;
  }
  while (v183 + v169 < v168);
LABEL_126:
  v132 = *v4;
  if ((*v4 & 0x802) != 0)
  {
    if (qword_1EDB89E50 != -1)
      dispatch_once(&qword_1EDB89E50, &unk_1E95B3568);
    v133 = qword_1EDB89E58;
    v134 = os_log_type_enabled((os_log_t)qword_1EDB89E58, OS_LOG_TYPE_DEBUG);
    v135 = v167;
    if (v134)
    {
      v161 = (uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 3;
      v162 = (uint64_t)(*(_QWORD *)(v5 + 136) - *(_QWORD *)(v5 + 128)) >> 3;
      LODWORD(v205[0]) = 134349824;
      *(void ***)((char *)v205 + 4) = (void **)v161;
      WORD2(v205[1]) = 2050;
      *(void ***)((char *)&v205[1] + 6) = (void **)v162;
      HIWORD(v205[2]) = 2050;
      v205[3] = (void **)0xBFE0000000000000;
      LOWORD(v206) = 2050;
      *(_QWORD *)((char *)&v206 + 2) = 0xBFE8000000000000;
      _os_log_debug_impl(&dword_1D3D6B000, v133, OS_LOG_TYPE_DEBUG, "FPCentersNum=(%{public}lu, %{public}lu) for threshold=(%{public}.2f, %{public}.2f)", (uint8_t *)v205, 0x2Au);
    }
    sub_1D3DEB8B4(v5, (unsigned int ***)(v5 + 128), (unsigned int ***)(v5 + 16), *(_QWORD *)(v5 + 176));
    sub_1D3DEB8B4(v5, (unsigned int ***)(v5 + 152), (unsigned int ***)(v5 + 64), *(_QWORD *)(v5 + 176));
    v132 = *v180;
    v193 = 0uLL;
    v194 = 0;
    if ((v132 & 2) != 0)
    {
      sub_1D3DEBA28(v5, v5 + 16, &v193, 0);
      sub_1D3DEBA28(v5, v5 + 64, &v193, 1);
      v132 = *v180;
    }
  }
  else
  {
    v193 = 0uLL;
    v194 = 0;
    v135 = v167;
  }
  v206 = 0u;
  memset(v205, 0, sizeof(v205));
  if ((v132 & 0x800) != 0)
  {
    sub_1D3DED314((unsigned int **)v5, *(unsigned int ***)(v5 + 16), *(unsigned int ***)(v5 + 24), (uint64_t)v205, 0);
    sub_1D3DED314((unsigned int **)v5, *(unsigned int ***)(v5 + 64), *(unsigned int ***)(v5 + 72), (uint64_t)&v205[3], 1);
    v132 = *v180;
  }
  v190 = 0;
  v191 = 0;
  v192 = 0;
  if ((v132 & 0x400) != 0)
  {
    v136 = *(unsigned int ***)(v5 + 40);
    v137 = (uint64_t)(*(_QWORD *)(v5 + 48) - (_QWORD)v136) >> 3;
    if (v137 >= *(_QWORD *)(v5 + 176))
      v137 = *(_QWORD *)(v5 + 176);
    sub_1D3DED56C(v136, &v136[v137], (uint64_t)&v190);
    v138 = *(unsigned int ***)(v5 + 88);
    v139 = (uint64_t)(*(_QWORD *)(v5 + 96) - (_QWORD)v138) >> 3;
    if (v139 >= *(_QWORD *)(v5 + 176))
      v139 = *(_QWORD *)(v5 + 176);
    sub_1D3DED56C(v138, &v138[v139], (uint64_t)&v190);
  }
  *(_QWORD *)v135 = 0;
  *(_QWORD *)(v135 + 8) = 0;
  *(_QWORD *)(v135 + 16) = 0;
  v141 = (unsigned int **)*((_QWORD *)&v193 + 1);
  v140 = (unsigned int **)v193;
  v203 = (void ***)v135;
  v204 = 0;
  v142 = *((_QWORD *)&v193 + 1) - v193;
  if (*((_QWORD *)&v193 + 1) != (_QWORD)v193)
  {
    if (v142 < 0)
      sub_1D3D6D4F8();
    v143 = (unsigned int **)sub_1D3D6D8A0(v142 >> 3);
    v144 = 0;
    *(_QWORD *)v135 = v143;
    *(_QWORD *)(v135 + 8) = v143;
    *(_QWORD *)(v135 + 16) = &v143[v145];
    v146 = v143;
    do
    {
      *v146 = 0;
      v147 = *v140;
      if (*v140)
      {
        v148 = v147 + 2;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
        if (*v146)
          sub_1D3D6D13C(*v146);
      }
      *v146++ = v147;
      ++v140;
      v144 += 8;
    }
    while (v140 != v141);
    *(_QWORD *)(v135 + 8) = v146;
  }
  *(_QWORD *)(v135 + 24) = 0;
  *(_QWORD *)(v135 + 32) = 0;
  *(_QWORD *)(v135 + 40) = 0;
  v150 = (void **)v190;
  v151 = v191;
  v203 = (void ***)(v135 + 24);
  v204 = 0;
  v152 = (char *)v191 - (char *)v190;
  if (v191 != (void **)v190)
  {
    if (v152 < 0)
      sub_1D3D6D4F8();
    v153 = (unsigned int **)sub_1D3D6D8A0(v152 >> 3);
    v154 = 0;
    *(_QWORD *)(v135 + 24) = v153;
    *(_QWORD *)(v135 + 32) = v153;
    *(_QWORD *)(v135 + 40) = &v153[v155];
    v156 = v153;
    do
    {
      *v156 = 0;
      v157 = (unsigned int *)*v150;
      if (*v150)
      {
        v158 = v157 + 2;
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
        if (*v156)
          sub_1D3D6D13C(*v156);
      }
      *v156++ = v157;
      ++v150;
      v154 += 8;
    }
    while (v150 != v151);
    *(_QWORD *)(v135 + 32) = v156;
  }
  *(_QWORD *)(v135 + 48) = 0;
  *(_QWORD *)(v135 + 56) = 0;
  *(_QWORD *)(v135 + 64) = 0;
  sub_1D3DED620((unsigned int *)(v135 + 48), (unsigned int **)v205[0], (unsigned int **)v205[1], v205[1] - v205[0]);
  *(_QWORD *)(v135 + 72) = 0;
  *(_QWORD *)(v135 + 80) = 0;
  *(_QWORD *)(v135 + 88) = 0;
  sub_1D3DED620((unsigned int *)(v135 + 72), (unsigned int **)v205[3], (unsigned int **)v206, (uint64_t)(v206 - (unint64_t)v205[3]) >> 3);
  v203 = (void ***)&v190;
  sub_1D3D7FB84((void ***)&v203);
  v190 = &v205[3];
  sub_1D3DE98F8((void ***)&v190);
  v190 = v205;
  sub_1D3DE98F8((void ***)&v190);
  v205[0] = (void **)&v193;
  sub_1D3DE9FC4(v205);
  v205[0] = (void **)v195;
  sub_1D3D6D3BC(v205);
  v205[0] = (void **)v196;
  sub_1D3D6D3BC(v205);
  return sub_1D3D6D10C(&v197);
}

void sub_1D3DEB794(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 368) = v1 + 256;
  sub_1D3D6D3BC((void ***)(v1 + 368));
  *(_QWORD *)(v1 + 368) = v1 + 280;
  sub_1D3D6D3BC((void ***)(v1 + 368));
  sub_1D3D6D10C((unsigned int **)(v1 + 304));
  _Unwind_Resume(a1);
}

void sub_1D3DEB8B4(uint64_t a1, unsigned int ***a2, unsigned int ***a3, unint64_t a4)
{
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;

  v7 = *a3;
  v8 = a3[1];
  v9 = (char *)v8 - (char *)*a3;
  if ((unint64_t)v9 > 0x3F)
  {
    v22 = v9 >> 3;
    if (v22 > a4)
    {
      v23 = 126 - 2 * __clz(v22);
      if (v8 == v7)
        v24 = 0;
      else
        v24 = v23;
      sub_1D3DF23BC(v7, v8, v24, 1);
      sub_1D3DF22A0((unsigned int *)a3, a4);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = 126 - 2 * __clz(v10 - *a2);
    if (v10 == *a2)
      v12 = 0;
    else
      v12 = v11;
    sub_1D3DF1850(*a2, v10, v12, 1);
    v13 = a2[1] - *a2;
    v14 = *(_QWORD *)(a1 + 176);
    if (v13 > v14)
    {
      sub_1D3DF22A0((unsigned int *)a2, v14);
      v13 = *(_QWORD *)(a1 + 176);
    }
    if (v13)
    {
      v15 = 0;
      v16 = a1 + 8;
      do
      {
        if ((unint64_t)((char *)a3[1] - (char *)*a3) > 0x3F)
          break;
        v17 = *a2;
        if (v15 >= a2[1] - *a2)
          sub_1D3DB6E04();
        v25 = 0;
        v18 = v17[v15];
        if (v18)
        {
          v19 = v18 + 2;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v25 = v18;
        sub_1D3E0B214(v16, &v25, (unsigned int *)a3);
        sub_1D3DC2944(&v25);
        ++v15;
      }
      while (v15 != v13);
    }
  }
}

void sub_1D3DEBA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DEBA28(uint64_t a1, uint64_t a2, _OWORD *a3, char a4)
{
  unsigned int **v5;
  unsigned int **result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t i;
  uint64_t v46;
  float *v47;
  unsigned int **v48;
  float v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float *v62;
  float v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int v100;
  int v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  float *v106;
  float v107;
  float v111;
  uint64_t v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  int v123;
  unsigned int **v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  int v131;
  unsigned int **v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int **v145;
  unsigned int **v146;
  BOOL (**v147)(uint64_t, uint64_t);
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  int v151;
  int v152;
  uint64_t m;
  uint64_t v154;
  float v155;
  uint64_t v156;
  float v157;
  float v158;
  unsigned int ***v159;
  uint64_t v160;
  float v161;
  float v162;
  float v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  uint64_t v174;
  float v175;
  uint64_t v176;
  float v177;
  float *v178;
  float *v179;
  float *v180;
  float v181;
  float v182;
  float v183;
  float v184;
  unsigned int v185;
  float v186;
  float v187;
  uint64_t j;
  unsigned int *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int **k;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float *v198;
  float v199;
  uint64_t v200;
  _QWORD *v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int **v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int **v208;
  int64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int **v213;
  unsigned int *v214;
  unsigned int **v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int **v219;
  BOOL v220;
  BOOL v221;
  unsigned int *v222;
  unsigned int **v223;
  _QWORD *v224;
  uint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int **v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int **v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  float v240;
  unint64_t v241;
  unsigned int **v242;
  unsigned int v243;
  unsigned int **v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unsigned int **v250;
  unsigned int v251;
  unsigned int **v252;
  unsigned int **v253;
  unint64_t v254;
  unsigned int **v255;
  uint64_t v256;
  unsigned int **v257;
  unsigned int *v258;
  unsigned int *v259;
  unsigned int *v260;
  unsigned int v261;
  int64x2_t v262;
  unsigned int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int ***v268;
  unint64_t v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  uint64_t v297;
  int64x2_t *v298;
  uint64_t v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  int v307;
  float v308;
  int v309;
  uint64_t *v310;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int **v316;
  unsigned int **v317;
  unsigned int **v318;
  unsigned int *v319;
  float *v320;
  float *v321;
  unsigned int *v322;
  unsigned int *v323;
  unsigned int *v324;
  unsigned int *v325;
  unsigned int *v326;
  void *__p;
  void *v328;
  unsigned int *v329;
  int v330;
  _QWORD v331[4];
  int v332;
  _DWORD v333[3];
  float v334[3];
  float32x2_t v335[3];
  uint64_t v336;
  float v337;
  BOOL (*v338)(uint64_t, uint64_t);
  int64x2_t v339;
  unsigned int *v340;
  unsigned int ***v341;
  uint64_t v342;

  v342 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int ***)(a2 + 8);
  v310 = (uint64_t *)a2;
  result = *(unsigned int ***)a2;
  v7 = (uint64_t)v5 - *(_QWORD *)a2;
  v8 = v7 >> 3;
  if ((int)(v7 >> 3) >= 3 && *(_QWORD *)(a1 + 176) >= (unint64_t)((unint64_t)v7 >> 3))
  {
    v338 = sub_1D3DEEB78;
    v10 = 126 - 2 * __clz(v8);
    if (v5 == result)
      v11 = 0;
    else
      v11 = v10;
    sub_1D3DEEB98(result, v5, (uint64_t (**)(unsigned int **, unsigned int **))&v338, v11, 1);
    v12 = 0;
    v264 = (v8 - 2);
    v270 = (v8 - 1);
    v267 = 1;
    v268 = (unsigned int ***)(a3 + 1);
    v13 = 0.5;
    v14 = 3.0;
    v266 = 2;
    v298 = (int64x2_t *)a3;
    v309 = v8;
    do
    {
      v15 = *v310;
      v321 = 0;
      v16 = v12;
      v17 = *(unsigned int **)(v15 + 8 * v12);
      if (v17)
      {
        v18 = v17 + 2;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v321 = (float *)v17;
      v265 = v16 + 1;
      if (v16 + 1 >= v270)
        goto LABEL_260;
      v20 = v267;
      v299 = v266;
      do
      {
        v21 = *v310;
        v320 = 0;
        v22 = v20;
        v23 = *(_QWORD *)(v21 + 8 * v20);
        if (v23)
        {
          v24 = (unsigned int *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v320 = (float *)v23;
        v26 = v321[5];
        v27 = *(float *)(v23 + 20);
        if (v27 >= v26)
          v28 = v321[5];
        else
          v28 = *(float *)(v23 + 20);
        if (vabds_f32(v26, v27) > v13 && (float)((float)(v26 - v27) / v28) >= 0.05)
        {
          sub_1D3DC2944((unsigned int **)&v320);
          break;
        }
        v297 = v22 + 1;
        if ((int)v22 + 1 >= (int)v8)
          goto LABEL_257;
        v29 = v299;
        while (1)
        {
          v30 = *v310;
          v319 = 0;
          v31 = *(unsigned int **)(v30 + 8 * v29);
          if (v31)
          {
            v32 = v31 + 2;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v319 = v31;
          v34 = v320;
          v35 = v320[5];
          v36 = *((float *)v31 + 5);
          v37 = v36 >= v35 ? v320[5] : *((float *)v31 + 5);
          if (vabds_f32(v35, v36) > v13 && (float)((float)(v35 - v36) / v37) >= 0.05)
            break;
          v312 = v29;
          v38 = (unsigned int *)v321;
          if (v321)
          {
            v39 = (unsigned int *)(v321 + 2);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          v338 = (BOOL (*)(uint64_t, uint64_t))v38;
          v339.i64[0] = 0;
          v41 = (unsigned int *)(v34 + 2);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          if (v339.i64[0])
          {
            sub_1D3D6D13C((unsigned int *)v339.i64[0]);
            v31 = v319;
            v339 = (int64x2_t)(unint64_t)v34;
            if (!v319)
              goto LABEL_43;
          }
          else
          {
            v339 = (int64x2_t)(unint64_t)v34;
          }
          v43 = v31 + 2;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          if (v339.i64[1])
            sub_1D3D6D13C((unsigned int *)v339.i64[1]);
LABEL_43:
          v339.i64[1] = (uint64_t)v31;
          v317 = 0;
          v318 = 0;
          v316 = 0;
          v331[0] = &v316;
          LOBYTE(v331[1]) = 0;
          v316 = (unsigned int **)operator new(0x18uLL);
          v317 = v316;
          v318 = v316 + 3;
          v317 = sub_1D3DEFF70((unsigned int **)&v338, &v340, v316);
          for (i = 16; i != -8; i -= 8)
            sub_1D3DC2944((unsigned int **)((char *)&v338 + i));
          v46 = 0;
          v47 = (float *)v335;
          v48 = v316;
          do
          {
            *v47 = (*(float (**)(unsigned int *))(*(_QWORD *)v48[v46] + 16))(v48[v46]);
            v49 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v46] + 24))(v316[v46]);
            v48 = v316;
            v50 = v316[v46];
            v51 = v50[6];
            LODWORD(v334[v46]) = v50[5];
            v47[1] = v49;
            v333[v46++] = v51;
            v47 += 2;
          }
          while (v46 != 3);
          v52 = 0;
          v53 = *(_QWORD **)(a1 + 8);
          v54 = v53[7];
          v55 = -v54;
          v56 = v53[4];
          v57 = v56 & -v54--;
          v58 = v53[2];
          v59 = (float)(v334[0] + v334[1]) + v334[2];
          v60 = (float)(v58 & v54 | (unint64_t)v57) * v13;
          v61 = (float)(v56 & v54 | v58 & (unint64_t)v55) * v13;
          do
          {
            v62 = (float *)&v335[v52];
            v63 = v335[v52].f32[1] - v61;
            *v62 = v335[v52].f32[0] - v60;
            v62[1] = v63;
            ++v52;
          }
          while (v52 != 3);
          v64 = 0;
          v332 = 0;
          v65 = (float *)&v331[1];
          memset(v331, 0, sizeof(v331));
          v66 = v59 / v14;
          do
          {
            v67 = v66 / v334[v64];
            *((float32x2_t *)v65 - 1) = vmul_n_f32(v335[v64], v67);
            *v65 = v67;
            v65 += 3;
            ++v64;
          }
          while (v64 != 3);
          __p = (void *)0x100000000;
          LODWORD(v328) = 2;
          v68 = v48[1];
          if (v68)
          {
            v69 = v68 + 2;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          v329 = v68;
          v71 = v48[2];
          if (v71)
          {
            v72 = v71 + 2;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v326 = v71;
          v74 = (*(float (**)(unsigned int *))(*(_QWORD *)v68 + 16))(v68);
          v75 = (*(float (**)(unsigned int *))(*(_QWORD *)v329 + 24))(v329);
          v76 = (*(float (**)(unsigned int *))(*(_QWORD *)v326 + 16))(v326);
          v77 = (*(float (**)(unsigned int *))(*(_QWORD *)v326 + 24))(v326);
          LODWORD(v336) = sqrtf((float)((float)(v75 - v77) * (float)(v75 - v77))+ (float)((float)(v74 - v76) * (float)(v74 - v76)));
          v78 = v316;
          v79 = *v316;
          if (*v316)
          {
            v80 = v79 + 2;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          v325 = v79;
          v82 = v78[2];
          if (v82)
          {
            v83 = v82 + 2;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v324 = v82;
          v85 = (*(float (**)(unsigned int *))(*(_QWORD *)v79 + 16))(v79);
          v86 = (*(float (**)(unsigned int *))(*(_QWORD *)v325 + 24))(v325);
          v87 = (*(float (**)(unsigned int *))(*(_QWORD *)v324 + 16))(v324);
          v88 = (*(float (**)(unsigned int *))(*(_QWORD *)v324 + 24))(v324);
          HIDWORD(v336) = sqrtf((float)((float)(v86 - v88) * (float)(v86 - v88))+ (float)((float)(v85 - v87) * (float)(v85 - v87)));
          v89 = v316;
          v90 = *v316;
          if (*v316)
          {
            v91 = v90 + 2;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v323 = v90;
          v93 = v89[1];
          if (v93)
          {
            v94 = v93 + 2;
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          v322 = v93;
          v96 = (*(float (**)(unsigned int *))(*(_QWORD *)v90 + 16))(v90);
          v97 = (*(float (**)(unsigned int *))(*(_QWORD *)v323 + 24))(v323);
          v98 = (*(float (**)(unsigned int *))(*(_QWORD *)v322 + 16))(v322);
          v99 = (*(float (**)(unsigned int *))(*(_QWORD *)v322 + 24))(v322);
          v337 = sqrtf((float)((float)(v97 - v99) * (float)(v97 - v99)) + (float)((float)(v96 - v98) * (float)(v96 - v98)));
          sub_1D3D6D834(&v322);
          sub_1D3D6D834(&v323);
          sub_1D3D6D834(&v324);
          sub_1D3D6D834(&v325);
          sub_1D3D6D834(&v326);
          sub_1D3D6D834(&v329);
          v338 = (BOOL (*)(uint64_t, uint64_t))&v336;
          sub_1D3DF0074((int *)&__p, (int *)&v328 + 1, (uint64_t *)&v338, 2, 1);
          v100 = (int)__p;
          v101 = HIDWORD(__p);
          v102 = (int)v328;
          v103 = *((float *)&v336 + SHIDWORD(__p));
          v104 = *((float *)v316[(int)__p] + 5);
          v105 = (float)((float)(v103 + v103) / (float)(*((float *)v316[(int)v328] + 5) + v104)) + 7.0;
          v106 = (float *)v316[SHIDWORD(__p)];
          v107 = (float)((float)(*((float *)&v336 + (int)v328) + *((float *)&v336 + (int)v328)) / (float)(v106[5] + v104))
               + 7.0;
          if (v105 > 180.0 || v105 < 9.0 || v107 > 180.0 || v107 < 9.0)
            goto LABEL_254;
          v111 = vabds_f32(v105, v107);
          if (v107 < v105)
            v105 = v107;
          if (v111 > (float)(v105 * 0.8))
            goto LABEL_254;
          v112 = SHIDWORD(__p);
          if (*((float *)&v336 + (int)__p) >= (float)(v103 * 1.1))
            goto LABEL_85;
          v305 = (*(float (**)(float *))(*(_QWORD *)v106 + 16))(v106);
          v302 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 16))(v316[v102]);
          v300 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v100] + 16))(v316[v100]);
          v295 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v101] + 24))(v316[v101]);
          v293 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 24))(v316[v102]);
          v113 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v100] + 24))(v316[v100]);
          v291 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v100] + 16))(v316[v100]);
          v289 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 16))(v316[v102]);
          v287 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v101] + 16))(v316[v101]);
          v114 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v100] + 24))(v316[v100]);
          v115 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 24))(v316[v102]);
          v116 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v101] + 24))(v316[v101]);
          v117 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 16))(v316[v102]);
          v118 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 24))(v316[v102]);
          v119 = sub_1D3DF07C4(a1, (int)(float)((float)(v305 + v302) - v300), (int)(float)((float)(v295 + v293) - v113), (int)v117, (int)v118);
          v120 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 16))(v316[v102]);
          v121 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 24))(v316[v102]);
          if (v119 >= sub_1D3DF07C4(a1, (int)(float)((float)(v291 + v289) - v287), (int)(float)((float)(v114 + v115) - v116), (int)v120, (int)v121))
          {
LABEL_85:
            v122 = v101;
            v112 = v100;
            v123 = v101;
            v101 = v100;
          }
          else
          {
            v122 = v100;
            v123 = v100;
          }
          v124 = v316;
          v306 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[v102] + 16))(v316[v102]);
          v303 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v112] + 16))(v124[v112]);
          v125 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v122] + 24))(v124[v122]);
          v126 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v112] + 24))(v124[v112]);
          v127 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v102] + 24))(v124[v102]);
          v128 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v112] + 24))(v124[v112]);
          v129 = (*(float (**)(unsigned int *))(*(_QWORD *)v124[v122] + 16))(v124[v122]);
          v130 = (float)((float)(v306 - v303) * (float)(v125 - v126))
               - (float)((float)(v127 - v128)
                       * (float)(v129
                               - (*(float (**)(unsigned int *))(*(_QWORD *)v124[v112] + 16))(v124[v112])));
          if (v130 >= 0.0)
            v131 = v123;
          else
            v131 = v102;
          if (v130 >= 0.0)
            v123 = v102;
          v132 = v316;
          v133 = v316[v131];
          if (v133)
          {
            v134 = v133 + 2;
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          v338 = (BOOL (*)(uint64_t, uint64_t))v133;
          v136 = v132[v112];
          if (v136)
          {
            v137 = v136 + 2;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          v339 = (int64x2_t)(unint64_t)v136;
          v139 = v132[v123];
          v13 = 0.5;
          v14 = 3.0;
          if (v139)
          {
            v140 = v139 + 2;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
            if (v339.i64[1])
            {
              sub_1D3D6D13C((unsigned int *)v339.i64[1]);
              v132 = v316;
            }
          }
          v339.i64[1] = (uint64_t)v139;
          if ((unint64_t)((char *)v318 - (char *)v132) < 0x18)
          {
            sub_1D3DF0A18((void **)&v316);
            v142 = ((char *)v318 - (char *)v316) >> 2;
            if (v142 <= 3)
              v142 = 3;
            if ((unint64_t)((char *)v318 - (char *)v316) >= 0x7FFFFFFFFFFFFFF8)
              v143 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v143 = v142;
            if (v143 >> 61)
              sub_1D3D6D4F8();
            v316 = (unsigned int **)sub_1D3D6D8A0(v143);
            v317 = v316;
            v318 = &v316[v144];
            v145 = sub_1D3DEFF70((unsigned int **)&v338, &v340, v316);
LABEL_121:
            v132 = v145;
            goto LABEL_122;
          }
          if ((unint64_t)((char *)v317 - (char *)v132) < 0x18)
          {
            v146 = (unsigned int **)((char *)&v338 + (char *)v317 - (char *)v132);
            if (v317 != v132)
            {
              v307 = v131;
              v147 = &v338;
              do
              {
                v148 = (unsigned int *)*v147;
                if (*v147)
                {
                  v149 = v148 + 2;
                  do
                    v150 = __ldxr(v149);
                  while (__stxr(v150 + 1, v149));
                }
                if (*v132)
                  sub_1D3D6D13C(*v132);
                *v132++ = v148;
                ++v147;
              }
              while (v147 != (BOOL (**)(uint64_t, uint64_t))v146);
              v132 = v317;
              v131 = v307;
            }
            v145 = sub_1D3DEFF70(v146, &v340, v132);
            goto LABEL_121;
          }
          for (j = 0; j != 3; ++j)
          {
            v189 = (unsigned int *)*(&v338 + j);
            if (v189)
            {
              v190 = v189 + 2;
              do
                v191 = __ldxr(v190);
              while (__stxr(v191 + 1, v190));
            }
            if (*v132)
              sub_1D3D6D13C(*v132);
            *v132++ = v189;
          }
          for (k = v317; k != v132; k = sub_1D3DC2944(k - 1))
            ;
LABEL_122:
          v151 = v131;
          v152 = v123;
          v317 = v132;
          for (m = 16; m != -8; m -= 8)
            sub_1D3DC2944((unsigned int **)((char *)&v338 + m));
          v154 = 0;
          v337 = 0.0;
          v336 = 0;
          v330 = 0;
          v329 = 0;
          do
          {
            v155 = *(float *)((char *)v331 + 12 * v101 + v154);
            *(float *)((char *)&v336 + v154) = *(float *)((char *)v331 + 12 * v152 + v154) - v155;
            *(float *)((char *)&v329 + v154) = *(float *)((char *)v331 + 12 * v151 + v154) - v155;
            v154 += 4;
          }
          while (v154 != 12);
          v156 = 0;
          v304 = *((float *)&v329 + 1);
          v157 = fabsf(*((float *)&v329 + 1));
          v158 = 0.0;
          v159 = (unsigned int ***)v298;
          do
          {
            v158 = v158 + (float)(*(float *)((char *)&v329 + v156) * *(float *)((char *)&v329 + v156));
            v156 += 4;
          }
          while (v156 != 12);
          v160 = 0;
          v161 = fabsf(*(float *)&v329);
          v308 = *(float *)&v336;
          v162 = fabsf(*((float *)&v336 + 1));
          v163 = 0.0;
          do
          {
            v163 = v163 + (float)(*(float *)((char *)&v336 + v160) * *(float *)((char *)&v336 + v160));
            v160 += 4;
          }
          while (v160 != 12);
          v164 = 0;
          v165 = fabsf(*(float *)&v336);
          if (v161 < v157)
            v161 = v157;
          if (v165 >= v162)
            v166 = v165;
          else
            v166 = v162;
          v167 = v166 / sqrtf(v163);
          v168 = 0.0;
          do
          {
            v168 = v168 + (float)(*(float *)((char *)&v336 + v164) * *(float *)((char *)&v336 + v164));
            v164 += 4;
          }
          while (v164 != 12);
          v169 = 0;
          v170 = (float)(v161 / sqrtf(v158)) + v167;
          v171 = 0.0;
          do
          {
            v171 = v171 + (float)(*(float *)((char *)&v329 + v169) * *(float *)((char *)&v329 + v169));
            v169 += 4;
          }
          while (v169 != 12);
          v172 = (float)((float)(sqrtf(v168) + sqrtf(v171)) / (float)((float)(v66 + v66) * (float)(v170 * 0.5))) + 7.0;
          if (v172 > 180.0 || v172 < 9.0)
            goto LABEL_254;
          v174 = 0;
          v276 = -(float)(*((float *)&v336 + 1) * *(float *)&v329);
          v175 = 0.0;
          do
          {
            v175 = v175 + (float)(*(float *)((char *)&v336 + v174) * *(float *)((char *)&v336 + v174));
            v174 += 4;
          }
          while (v174 != 12);
          v176 = 0;
          v177 = 0.0;
          do
          {
            v177 = v177 + (float)(*(float *)((char *)&v329 + v176) * *(float *)((char *)&v329 + v176));
            v176 += 4;
          }
          while (v176 != 12);
          v274 = *(float *)&v333[1];
          v275 = *(float *)v333;
          v273 = *(float *)&v333[2];
          v178 = (float *)v331 + 3 * v152;
          v179 = (float *)v331 + 3 * v151;
          v180 = (float *)v331 + 3 * v101;
          v182 = *v178;
          v181 = v178[1];
          v285 = *v180;
          v286 = *v179;
          v294 = v180[1];
          v296 = v179[1];
          v290 = v179[2];
          v292 = v178[2];
          v288 = v180[2];
          v284 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[2] + 16))(v316[2]);
          v283 = (*(float (**)(unsigned int *))(*(_QWORD *)*v316 + 16))(*v316);
          v282 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[1] + 16))(v316[1]);
          v281 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[2] + 24))(v316[2]);
          v280 = (*(float (**)(unsigned int *))(*(_QWORD *)*v316 + 24))(*v316);
          v183 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[1] + 24))(v316[1]);
          v184 = roundf(v172);
          v185 = llroundf(v172) & 3;
          v278 = v183;
          v279 = v181;
          if (!v185)
          {
            v186 = v182;
            v187 = 1.0;
            goto LABEL_161;
          }
          if (v185 == 2)
          {
            v186 = v182;
            v187 = -1.0;
LABEL_161:
            v301 = v184 + v187;
            goto LABEL_163;
          }
          v301 = v184;
          v186 = v182;
LABEL_163:
          v277 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[1] + 16))(v316[1]);
          v272 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[1] + 24))(v316[1]);
          v271 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[2] + 16))(v316[2]);
          v193 = (*(float (**)(unsigned int *))(*(_QWORD *)v316[2] + 24))(v316[2]);
          v194 = (*(float (**)(unsigned int *))(*(_QWORD *)*v316 + 16))(*v316);
          v195 = (*(float (**)(unsigned int *))(*(_QWORD *)*v316 + 24))(*v316);
          v196 = (float)(v186 + v286) - v285;
          v197 = (float)(v292 + v290) - v288;
          sub_1D3DB93EC((uint64_t *)&v325, 3.5, 3.5, v301 + -3.5, 3.5, v301 + -3.5, v301 + -3.5, 3.5, v301 + -3.5, v277, v272, v271, v193, (float)((float)(v60 + (float)(v196 / v197)) + (float)((float)(v284 + v283) - v282)) * 0.5, (float)((float)(v61 + (float)((float)((float)(v279 + v296) - v294) / v197))+ (float)((float)(v281 + v280) - v278))* 0.5, v194, v195);
          sub_1D3D8D5CC(&__p, 2uLL);
          v198 = (float *)__p;
          *(float *)__p = (float)(v301 + -3.5) + -3.0;
          v198[1] = (float)(v301 + -3.5) + -3.0;
          (*(void (**)(unsigned int *, void **))(*(_QWORD *)v325 + 16))(v325, &__p);
          if (((int)v301 & 3) == 1)
          {
            v199 = v66 / v197;
            if (v199 >= 1.0)
            {
              v200 = operator new();
              v201 = __p;
              *(_DWORD *)(v200 + 8) = 0;
              v202 = (unsigned int *)(v200 + 8);
              *(_QWORD *)(v200 + 12) = *v201;
              *(_QWORD *)v200 = &off_1E95AF2C0;
              *(float *)(v200 + 20) = v199;
              *(_QWORD *)(v200 + 24) = 0x100000000;
              *(_BYTE *)(v200 + 32) = 0;
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
              v326 = (unsigned int *)v200;
              v204 = v317;
              if (v317 >= v318)
              {
                v209 = v317 - v316;
                if ((unint64_t)(v209 + 1) >> 61)
                  sub_1D3D6D4F8();
                v210 = ((char *)v318 - (char *)v316) >> 2;
                if (v210 <= v209 + 1)
                  v210 = v209 + 1;
                if ((unint64_t)((char *)v318 - (char *)v316) >= 0x7FFFFFFFFFFFFFF8)
                  v211 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v211 = v210;
                v341 = &v318;
                if (v211)
                  v211 = (unint64_t)sub_1D3D6D8A0(v211);
                else
                  v212 = 0;
                v213 = (unsigned int **)(v211 + 8 * v209);
                v338 = (BOOL (*)(uint64_t, uint64_t))v211;
                v339.i64[0] = (uint64_t)v213;
                v339.i64[1] = (uint64_t)v213;
                v340 = (unsigned int *)(v211 + 8 * v212);
                *v213 = 0;
                v214 = v326;
                v215 = v213;
                if (v326)
                {
                  v216 = v326 + 2;
                  do
                    v217 = __ldxr(v216);
                  while (__stxr(v217 + 1, v216));
                  v215 = v213;
                  if (*v213)
                  {
                    sub_1D3D6D13C(*v213);
                    v215 = (unsigned int **)v339.i64[1];
                  }
                }
                *v213 = v214;
                v339.i64[1] = (uint64_t)(v215 + 1);
                sub_1D3DEE430((unsigned int *)&v316, &v338);
                v208 = v317;
                sub_1D3DEE52C((uint64_t)&v338);
              }
              else
              {
                *v317 = 0;
                v205 = v326;
                if (v326)
                {
                  v206 = v326 + 2;
                  do
                    v207 = __ldxr(v206);
                  while (__stxr(v207 + 1, v206));
                  if (*v204)
                    sub_1D3D6D13C(*v204);
                }
                *v204 = v205;
                v208 = v204 + 1;
                v159 = (unsigned int ***)v298;
              }
              v317 = v208;
              sub_1D3DC2944(&v326);
            }
          }
          v218 = operator new();
          v313 = 0;
          v314 = 0;
          v315 = 0;
          sub_1D3DED620((unsigned int *)&v313, v316, v317, v317 - v316);
          if (v316 == v317)
          {
            v220 = 0;
          }
          else
          {
            v219 = v316 + 1;
            do
            {
              v220 = *((_BYTE *)*(v219 - 1) + 32) != 0;
              if (*((_BYTE *)*(v219 - 1) + 32))
                v221 = 1;
              else
                v221 = v219 == v317;
              ++v219;
            }
            while (!v221);
          }
          *(_DWORD *)(v218 + 8) = 0;
          v222 = (unsigned int *)(v218 + 8);
          *(_QWORD *)v218 = &off_1E95AF8C8;
          *(_QWORD *)(v218 + 16) = 0;
          v223 = (unsigned int **)(v218 + 16);
          v224 = v313;
          v225 = *v313;
          if (*v313)
          {
            v226 = (unsigned int *)(v225 + 8);
            do
              v227 = __ldxr(v226);
            while (__stxr(v227 + 1, v226));
            if (*v223)
            {
              sub_1D3D6D13C(*v223);
              v224 = v313;
            }
          }
          *(_QWORD *)(v218 + 24) = 0;
          v228 = (unsigned int **)(v218 + 24);
          *(_QWORD *)(v218 + 16) = v225;
          v229 = v224[1];
          if (v229)
          {
            v230 = (unsigned int *)(v229 + 8);
            do
              v231 = __ldxr(v230);
            while (__stxr(v231 + 1, v230));
            if (*v228)
            {
              sub_1D3D6D13C(*v228);
              v224 = v313;
            }
          }
          *(_QWORD *)(v218 + 32) = 0;
          v232 = (unsigned int **)(v218 + 32);
          *(_QWORD *)(v218 + 24) = v229;
          v233 = v224[2];
          if (v233)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldxr(v234);
            while (__stxr(v235 + 1, v234));
            if (*v232)
            {
              sub_1D3D6D13C(*v232);
              v224 = v313;
            }
          }
          *(_QWORD *)(v218 + 32) = v233;
          if ((unint64_t)(v314 - (_QWORD)v224) < 0x19)
          {
            v236 = 0;
          }
          else
          {
            *(_QWORD *)(v218 + 40) = 0;
            v236 = v224[3];
            if (v236)
            {
              v237 = (unsigned int *)(v236 + 8);
              do
                v238 = __ldxr(v237);
              while (__stxr(v238 + 1, v237));
              v239 = *(unsigned int **)(v218 + 40);
              if (v239)
                sub_1D3D6D13C(v239);
            }
          }
          v240 = (float)(fabsf(v276 + (float)(v308 * v304)) / (float)(v175 + v177)) + -0.5;
          v14 = 3.0;
          *(_QWORD *)(v218 + 40) = v236;
          *(float *)(v218 + 48) = v240 + (float)((float)((float)((float)(v275 + v274) + v273) * 0.2) / 3.0);
          *(_BYTE *)(v218 + 52) = a4;
          *(_BYTE *)(v218 + 53) = v220;
          v242 = v159[1];
          v241 = (unint64_t)v159[2];
          if ((unint64_t)v242 >= v241)
          {
            v245 = v242 - *v159;
            v13 = 0.5;
            if ((unint64_t)(v245 + 1) >> 61)
              sub_1D3D6D4F8();
            v246 = v241 - (_QWORD)*v159;
            v247 = v246 >> 2;
            if (v246 >> 2 <= (unint64_t)(v245 + 1))
              v247 = v245 + 1;
            if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8)
              v248 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v248 = v247;
            v341 = v268;
            if (v248)
              v248 = (unint64_t)sub_1D3D6D8A0(v248);
            else
              v249 = 0;
            v250 = (unsigned int **)(v248 + 8 * v245);
            v338 = (BOOL (*)(uint64_t, uint64_t))v248;
            v339.i64[0] = (uint64_t)v250;
            v339.i64[1] = (uint64_t)v250;
            v340 = (unsigned int *)(v248 + 8 * v249);
            *v250 = 0;
            do
              v251 = __ldxr(v222);
            while (__stxr(v251 + 1, v222));
            v252 = v250;
            v253 = v250;
            if (*v250)
            {
              sub_1D3D6D13C(*v250);
              v253 = (unsigned int **)v339.i64[1];
              v252 = (unsigned int **)v339.i64[0];
            }
            *v250 = (unsigned int *)v218;
            v244 = v253 + 1;
            v339.i64[1] = (uint64_t)(v253 + 1);
            v255 = *v159;
            v254 = (unint64_t)v159[1];
            if ((unsigned int **)v254 == *v159)
            {
              v262 = vdupq_n_s64(v254);
              v257 = v252;
            }
            else
            {
              v256 = 0;
              v257 = v252;
              do
              {
                *--v257 = 0;
                v259 = *(unsigned int **)(v254 - 8);
                v254 -= 8;
                v258 = v259;
                if (v259)
                {
                  v260 = v258 + 2;
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                  if (*v257)
                    sub_1D3D6D13C(*v257);
                }
                *v257 = v258;
                v256 -= 8;
              }
              while ((unsigned int **)v254 != v255);
              v159 = (unsigned int ***)v298;
              v262 = *v298;
              v244 = (unsigned int **)v339.i64[1];
            }
            *v159 = v257;
            v159[1] = v244;
            v339 = v262;
            v263 = (unsigned int *)v159[2];
            v159[2] = (unsigned int **)v340;
            v340 = v263;
            v338 = (BOOL (*)(uint64_t, uint64_t))v262.i64[0];
            sub_1D3DF0028((uint64_t)&v338);
          }
          else
          {
            *v242 = 0;
            v13 = 0.5;
            do
              v243 = __ldxr(v222);
            while (__stxr(v243 + 1, v222));
            if (*v242)
              sub_1D3D6D13C(*v242);
            *v242 = (unsigned int *)v218;
            v244 = v242 + 1;
            v159[1] = v244;
          }
          v159[1] = v244;
          v338 = (BOOL (*)(uint64_t, uint64_t))&v313;
          sub_1D3DE98F8((void ***)&v338);
          if (__p)
          {
            v328 = __p;
            operator delete(__p);
          }
          sub_1D3D6F2E0(&v325);
LABEL_254:
          v338 = (BOOL (*)(uint64_t, uint64_t))&v316;
          sub_1D3DE98F8((void ***)&v338);
          sub_1D3DC2944(&v319);
          v29 = v312 + 1;
          LODWORD(v8) = v309;
          if ((int)v312 + 1 >= v309)
            goto LABEL_257;
        }
        sub_1D3DC2944(&v319);
LABEL_257:
        sub_1D3DC2944((unsigned int **)&v320);
        ++v299;
        v20 = v297;
      }
      while ((int)v270 > (int)v297);
LABEL_260:
      result = sub_1D3DC2944((unsigned int **)&v321);
      v12 = v265;
      ++v266;
      ++v267;
    }
    while (v265 != v264);
  }
  return result;
}

void sub_1D3DED098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DED314(unsigned int **result, unsigned int **a2, unsigned int **a3, uint64_t a4, int a5)
{
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  __n128 v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int **v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  unsigned int **v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE v35[20];
  _BYTE v36[20];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v8 = a2;
    v9 = (uint64_t)(result + 1);
    v10 = a4 + 16;
    do
    {
      if (!*((_BYTE *)*v8 + 32))
      {
        v11 = (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8);
        v12.n128_f64[0] = (*(double (**)(unsigned int *))(*(_QWORD *)*v8 + 16))(*v8);
        v13 = (unint64_t)v12.n128_f32[0];
        v12.n128_u32[0] = -0.75;
        v14 = sub_1D3E0A990(v9, (unint64_t)v11, v13, (unint64_t)(float)((float)(*((float *)*v8 + 5) * 2.0) + 0.5), (uint64_t)v36, (uint64_t)v35, 5, a5, v12, 0);
        if (v14 > -0.75)
        {
          *((float *)*v8 + 6) = v14 + *((float *)*v8 + 6);
          v16 = *(_QWORD *)(a4 + 8);
          v15 = *(_QWORD *)(a4 + 16);
          if (v16 >= v15)
          {
            v18 = (uint64_t)(v16 - *(_QWORD *)a4) >> 3;
            if ((unint64_t)(v18 + 1) >> 61)
              sub_1D3D6D4F8();
            v19 = v15 - *(_QWORD *)a4;
            v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1))
              v20 = v18 + 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            v34 = v10;
            if (v21)
              v21 = (unint64_t)sub_1D3D6D8A0(v21);
            else
              v22 = 0;
            v23 = (unsigned int **)(v21 + 8 * v18);
            v31[0] = v21;
            v31[1] = v23;
            v32 = v23;
            v33 = v21 + 8 * v22;
            *v23 = 0;
            v24 = *v8;
            v25 = v23;
            if (*v8)
            {
              v26 = v24 + 2;
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
              v25 = v23;
              if (*v23)
              {
                sub_1D3D6D13C(*v23);
                v25 = v32;
              }
            }
            *v23 = v24;
            v32 = v25 + 1;
            sub_1D3DEE430((unsigned int *)a4, v31);
            v17 = *(_QWORD *)(a4 + 8);
            sub_1D3DEE52C((uint64_t)v31);
          }
          else
          {
            sub_1D3DEE3CC((unsigned int *)a4, v8);
            v17 = v16 + 8;
          }
          *(_QWORD *)(a4 + 8) = v17;
        }
      }
      ++v8;
    }
    while (v8 != a3);
    v28 = *(unsigned int ***)(a4 + 8);
    v29 = 126 - 2 * __clz(((uint64_t)v28 - *(_QWORD *)a4) >> 3);
    if (v28 == *(unsigned int ***)a4)
      v30 = 0;
    else
      v30 = v29;
    return sub_1D3DED97C(*(unsigned int ***)a4, v28, v30, 1);
  }
  return result;
}

void sub_1D3DED550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DEE52C((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DED56C(unsigned int **result, unsigned int **a2, uint64_t a3)
{
  unsigned int **v5;
  unsigned int **v6;

  if (result != a2)
  {
    v5 = result;
    v6 = *(unsigned int ***)(a3 + 8);
    do
    {
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        result = sub_1D3DED778((unsigned int ***)a3, v5);
        v6 = result;
      }
      else
      {
        result = (unsigned int **)sub_1D3DED714((unsigned int *)a3, v5);
        ++v6;
      }
      *(_QWORD *)(a3 + 8) = v6;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void **sub_1D3DED5DC(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_1D3DE98F8(&v3);
  v3 = a1;
  sub_1D3DE98F8(&v3);
  return a1;
}

unsigned int *sub_1D3DED620(unsigned int *result, unsigned int **a2, unsigned int **a3, unint64_t a4)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;

  if (a4)
  {
    v6 = result;
    result = (unsigned int *)sub_1D3D6D864(result, a4);
    if (a2 == a3)
    {
      v8 = (unsigned int **)*((_QWORD *)v6 + 1);
    }
    else
    {
      v7 = 0;
      v8 = (unsigned int **)*((_QWORD *)v6 + 1);
      do
      {
        *v8 = 0;
        v9 = *a2;
        if (*a2)
        {
          v10 = v9 + 2;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          result = *v8;
          if (*v8)
            result = sub_1D3D6D13C(result);
        }
        *v8++ = v9;
        ++a2;
        v7 += 8;
      }
      while (a2 != a3);
    }
    *((_QWORD *)v6 + 1) = v8;
  }
  return result;
}

void sub_1D3DED6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D3DE98F8(&a9);
  _Unwind_Resume(a1);
}

unsigned int *sub_1D3DED714(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3DED770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DED778(unsigned int ***a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  unint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  int64x2_t v25;
  unint64_t v26;
  unint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  _QWORD *v31;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_1D3D6D4F8();
  v6 = a1 + 2;
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v3)
    v3 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v31 = v6;
  if (v8)
    v8 = (unint64_t)sub_1D3D6D8A0(v8);
  else
    v9 = 0;
  v10 = (unsigned int **)(v8 + 8 * v2);
  v28 = v8;
  v29.i64[0] = (uint64_t)v10;
  v29.i64[1] = (uint64_t)v10;
  v30 = v8 + 8 * v9;
  *v10 = 0;
  v11 = *a2;
  v12 = v10;
  v13 = v10;
  if (v11)
  {
    v14 = v11 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v12 = v10;
    v13 = v10;
    if (*v10)
    {
      sub_1D3D6D13C(*v10);
      v13 = (unsigned int **)v29.i64[1];
      v12 = (unsigned int **)v29.i64[0];
    }
  }
  *v10 = v11;
  v16 = v13 + 1;
  v29.i64[1] = (uint64_t)(v13 + 1);
  v18 = *a1;
  v17 = (unint64_t)a1[1];
  if ((unsigned int **)v17 == *a1)
  {
    v25 = vdupq_n_s64(v17);
  }
  else
  {
    v19 = 0;
    v20 = v12;
    do
    {
      *--v20 = 0;
      v22 = *(unsigned int **)(v17 - 8);
      v17 -= 8;
      v21 = v22;
      if (v22)
      {
        v23 = v21 + 2;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        if (*v20)
          sub_1D3D6D13C(*v20);
      }
      *v20 = v21;
      v19 -= 8;
    }
    while ((unsigned int **)v17 != v18);
    v25 = *(int64x2_t *)a1;
    v16 = (unsigned int **)v29.i64[1];
    v12 = v20;
  }
  *a1 = v12;
  a1[1] = v16;
  v29 = v25;
  v26 = (unint64_t)a1[2];
  a1[2] = (unsigned int **)v30;
  v30 = v26;
  v28 = v25.i64[0];
  sub_1D3DED930((uint64_t)&v28);
  return v16;
}

void sub_1D3DED8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DED930((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DED930(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3D7F2A8((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int **sub_1D3DED97C(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  float v16;
  unsigned int *v17;
  unsigned int v18;
  float v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  float v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int **v41;
  uint64_t v42;
  float v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  uint64_t v53;
  unsigned int **v54;
  BOOL v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int **v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int v66;
  float *v67;
  unsigned int *v68;
  unsigned int v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int **v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int **v94;
  unsigned int **v95;
  unsigned int **v96;
  unsigned int *v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int **v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int **v118;
  unsigned int *v119;
  unsigned int v120;
  float *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int **v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int **v133;
  unsigned int **v134;
  unsigned int *v135;
  unsigned int v136;
  float *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int **v140;
  unsigned int **v141;
  unsigned int **v142;
  unsigned int *v143;
  float *v144;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v140 = a2 - 3;
  v141 = a2 - 2;
  v9 = v7;
  v142 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v53 = (uint64_t)*(a2 - 1);
        v52 = a2 - 1;
        if (*(float *)(v53 + 24) > *((float *)*v7 + 6))
          return sub_1D3DEE578(v7, v52);
        return result;
      case 3:
        return sub_1D3DEE63C(v7, v7 + 1, v8);
      case 4:
        return sub_1D3DEE704(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return sub_1D3DEE7B0(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v54 = v7 + 1;
          v56 = v7 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = v7;
              do
              {
                v58 = v54;
                v59 = v57[1];
                if (*((float *)v59 + 6) > *((float *)*v57 + 6))
                {
                  v60 = v59 + 2;
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                  v144 = (float *)v59;
                  v62 = *v57;
                  v63 = v58;
                  while (1)
                  {
                    v64 = v57;
                    if (v62)
                    {
                      v65 = v62 + 2;
                      do
                        v66 = __ldxr(v65);
                      while (__stxr(v66 + 1, v65));
                    }
                    if (*v63)
                      sub_1D3D6D13C(*v63);
                    *v63 = v62;
                    v67 = v144;
                    if (v64 == v7)
                      break;
                    v57 = v64 - 1;
                    v62 = *(v64 - 1);
                    v63 = v64;
                    if (v144[6] <= *((float *)v62 + 6))
                      goto LABEL_106;
                  }
                  v64 = v7;
                  if (!v144)
                    goto LABEL_108;
LABEL_106:
                  v68 = (unsigned int *)(v144 + 2);
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
LABEL_108:
                  if (*v64)
                    sub_1D3D6D13C(*v64);
                  *v64 = (unsigned int *)v67;
                  result = sub_1D3DC2944((unsigned int **)&v144);
                }
                v54 = v58 + 1;
                v57 = v58;
              }
              while (v58 + 1 != v142);
            }
          }
          else if (!v56)
          {
            do
            {
              v128 = v54;
              v129 = v7[1];
              if (*((float *)v129 + 6) > *((float *)*v7 + 6))
              {
                v130 = v129 + 2;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
                v144 = (float *)v129;
                v132 = *v7;
                v133 = v128;
                do
                {
                  v134 = v7;
                  if (v132)
                  {
                    v135 = v132 + 2;
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                  }
                  if (*v133)
                    sub_1D3D6D13C(*v133);
                  *v133 = v132;
                  --v7;
                  v132 = *(v134 - 1);
                  v137 = v144;
                  v133 = v134;
                }
                while (v144[6] > *((float *)v132 + 6));
                v138 = (unsigned int *)(v144 + 2);
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
                if (*v134)
                  sub_1D3D6D13C(*v134);
                *v134 = (unsigned int *)v137;
                result = sub_1D3DC2944((unsigned int **)&v144);
              }
              v54 = v128 + 1;
              v7 = v128;
            }
            while (v128 + 1 != v142);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v70 = (unint64_t)(v11 - 2) >> 1;
          v71 = v70;
          do
          {
            v72 = v71;
            if (v70 >= v71)
            {
              v73 = (2 * v71) | 1;
              v74 = &v7[v73];
              if (2 * v72 + 2 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
              {
                ++v74;
                v73 = 2 * v72 + 2;
              }
              v75 = &v7[v72];
              v76 = *v75;
              if (*((float *)*v74 + 6) <= *((float *)*v75 + 6))
              {
                v77 = v76 + 2;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
                v144 = (float *)v76;
                v79 = *v74;
                while (1)
                {
                  v80 = v74;
                  if (v79)
                  {
                    v81 = v79 + 2;
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                  }
                  if (*v75)
                    sub_1D3D6D13C(*v75);
                  *v75 = v79;
                  if (v70 < v73)
                    break;
                  v83 = 2 * v73;
                  v73 = (2 * v73) | 1;
                  v74 = &v7[v73];
                  v84 = v83 + 2;
                  if (v84 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
                  {
                    ++v74;
                    v73 = v84;
                  }
                  v79 = *v74;
                  v85 = v144;
                  v75 = v80;
                  if (*((float *)*v74 + 6) > v144[6])
                    goto LABEL_135;
                }
                v85 = v144;
                if (v144)
                {
LABEL_135:
                  v86 = (unsigned int *)(v85 + 2);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                if (*v80)
                  sub_1D3D6D13C(*v80);
                *v80 = (unsigned int *)v85;
                sub_1D3DC2944((unsigned int **)&v144);
              }
            }
            v71 = v72 - 1;
          }
          while (v72);
          v88 = (unint64_t)v10 >> 3;
          v89 = v142;
          while (2)
          {
            v90 = *v7;
            if (*v7)
            {
              v91 = v90 + 2;
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            v93 = 0;
            v143 = v90;
            v94 = v7;
LABEL_146:
            v95 = &v94[v93];
            v98 = v95[1];
            v96 = v95 + 1;
            v97 = v98;
            v99 = 2 * v93;
            v93 = (2 * v93) | 1;
            v100 = v99 + 2;
            if (v100 >= v88)
            {
              if (v97)
                goto LABEL_150;
            }
            else
            {
              v101 = v96[1];
              if (*((float *)v97 + 6) > *((float *)v101 + 6))
              {
                v93 = v100;
                ++v96;
                v97 = v101;
              }
LABEL_150:
              v102 = v97 + 2;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            if (*v94)
              sub_1D3D6D13C(*v94);
            *v94 = v97;
            v94 = v96;
            if (v93 > (uint64_t)((unint64_t)(v88 - 2) >> 1))
            {
              if (v96 == --v89)
              {
                v122 = v143;
                if (v143)
                {
                  v123 = v143 + 2;
                  do
                    v124 = __ldxr(v123);
                  while (__stxr(v124 + 1, v123));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v122;
              }
              else
              {
                v104 = v89;
                v105 = *v89;
                if (*v89)
                {
                  v106 = v105 + 2;
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v105;
                v108 = v143;
                if (v143)
                {
                  v109 = v143 + 2;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                }
                if (*v89)
                  sub_1D3D6D13C(*v89);
                *v89 = v108;
                v111 = (char *)v96 - (char *)v7 + 8;
                if (v111 >= 9)
                {
                  v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                  v113 = &v7[v112];
                  v114 = *v96;
                  if (*((float *)*v113 + 6) > *((float *)*v96 + 6))
                  {
                    v115 = v114 + 2;
                    do
                      v116 = __ldxr(v115);
                    while (__stxr(v116 + 1, v115));
                    v144 = (float *)v114;
                    v117 = *v113;
                    while (1)
                    {
                      v118 = v113;
                      if (v117)
                      {
                        v119 = v117 + 2;
                        do
                          v120 = __ldxr(v119);
                        while (__stxr(v120 + 1, v119));
                      }
                      if (*v96)
                        sub_1D3D6D13C(*v96);
                      *v96 = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = &v7[v112];
                      v117 = *v113;
                      v121 = v144;
                      v96 = v118;
                      if (*((float *)*v113 + 6) <= v144[6])
                        goto LABEL_186;
                    }
                    v121 = v144;
                    if (!v144)
                      goto LABEL_188;
LABEL_186:
                    v125 = (unsigned int *)(v121 + 2);
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
LABEL_188:
                    if (*v118)
                      sub_1D3D6D13C(*v118);
                    *v118 = (unsigned int *)v121;
                    sub_1D3DC2944((unsigned int **)&v144);
                    v89 = v104;
                  }
                }
              }
              result = sub_1D3DC2944(&v143);
              if (v88-- <= 2)
                return result;
              continue;
            }
            goto LABEL_146;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1D3DEE63C(v13, v7, v8);
        }
        else
        {
          sub_1D3DEE63C(v7, v13, v8);
          sub_1D3DEE63C(v7 + 1, v13 - 1, v141);
          sub_1D3DEE63C(v7 + 2, &v7[v12 + 1], v140);
          sub_1D3DEE63C(v13 - 1, v13, &v7[v12 + 1]);
          sub_1D3DEE890(v7, v13);
        }
        --a3;
        v14 = v142;
        if ((a4 & 1) == 0)
        {
          v15 = *v7;
          v16 = *((float *)*v7 + 6);
          if (*((float *)*(v7 - 1) + 6) > v16)
            goto LABEL_13;
          v37 = v15 + 2;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v144 = (float *)v15;
          if (v16 <= *((float *)*v8 + 6))
          {
            v40 = v7 + 1;
            do
            {
              v9 = v40;
              if (v40 >= v142)
                break;
              ++v40;
            }
            while (v16 <= *((float *)*v9 + 6));
          }
          else
          {
            v9 = v7;
            do
            {
              v39 = v9[1];
              ++v9;
            }
            while (v16 <= *((float *)v39 + 6));
          }
          v41 = v142;
          if (v9 < v142)
          {
            v41 = v142;
            do
              v42 = (uint64_t)*--v41;
            while (v16 > *(float *)(v42 + 24));
          }
          while (v9 < v41)
          {
            sub_1D3DEE578(v9, v41);
            v15 = (unsigned int *)v144;
            v43 = v144[6];
            do
            {
              v44 = v9[1];
              ++v9;
            }
            while (v43 <= *((float *)v44 + 6));
            do
              v45 = (uint64_t)*--v41;
            while (v43 > *(float *)(v45 + 24));
          }
          v46 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v47 = *v46;
            if (*v46)
            {
              v48 = v47 + 2;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            if (*v7)
              sub_1D3D6D13C(*v7);
            *v7 = v47;
            v15 = (unsigned int *)v144;
          }
          if (v15)
          {
            v50 = v15 + 2;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          if (*v46)
            sub_1D3D6D13C(*v46);
          *v46 = v15;
          result = sub_1D3DC2944((unsigned int **)&v144);
          a4 = 0;
          a2 = v142;
          continue;
        }
        v15 = *v7;
        if (*v7)
        {
LABEL_13:
          v17 = v15 + 2;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v144 = (float *)v15;
        v19 = *((float *)v15 + 6);
        v20 = v7;
        do
        {
          v21 = v20;
          v22 = v20[1];
          ++v20;
        }
        while (*((float *)v22 + 6) > v19);
        if (v21 == v7)
        {
          v14 = v142;
          do
          {
            if (v20 >= v14)
              break;
            v24 = (uint64_t)*--v14;
          }
          while (*(float *)(v24 + 24) <= v19);
        }
        else
        {
          do
            v23 = (uint64_t)*--v14;
          while (*(float *)(v23 + 24) <= v19);
        }
        v9 = v20;
        if (v20 < v14)
        {
          v25 = v14;
          do
          {
            sub_1D3DEE578(v9, v25);
            v15 = (unsigned int *)v144;
            v26 = v144[6];
            do
            {
              v27 = v9[1];
              ++v9;
            }
            while (*((float *)v27 + 6) > v26);
            do
              v28 = (uint64_t)*--v25;
            while (*(float *)(v28 + 24) <= v26);
          }
          while (v9 < v25);
        }
        v29 = v9 - 1;
        if (v9 - 1 != v7)
        {
          v30 = *v29;
          if (*v29)
          {
            v31 = v30 + 2;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          if (*v7)
            sub_1D3D6D13C(*v7);
          *v7 = v30;
          v15 = (unsigned int *)v144;
        }
        if (v15)
        {
          v33 = v15 + 2;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        if (*v29)
          sub_1D3D6D13C(*v29);
        *v29 = v15;
        sub_1D3DC2944((unsigned int **)&v144);
        v35 = v20 >= v14;
        a2 = v142;
        if (!v35)
        {
LABEL_45:
          result = (unsigned int **)sub_1D3DED97C(v7, v9 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = sub_1D3DEE954(v7, v9 - 1);
        result = (unsigned int **)sub_1D3DEE954(v9, v142);
        if (!(_DWORD)result)
        {
          if ((v36 & 1) != 0)
            continue;
          goto LABEL_45;
        }
        a2 = v9 - 1;
        if ((v36 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1D3DEE370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_1D3DEE3CC(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3DEE428(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int *sub_1D3DEE430(unsigned int *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (uint64_t *)result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  if (v4 == *(_QWORD *)result)
  {
    v7 = (unsigned int **)a2[1];
  }
  else
  {
    v6 = 0;
    v7 = (unsigned int **)a2[1];
    do
    {
      *--v7 = 0;
      v9 = *(unsigned int **)(v4 - 8);
      v4 -= 8;
      v8 = v9;
      if (v9)
      {
        v10 = v8 + 2;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        result = *v7;
        if (*v7)
          result = sub_1D3D6D13C(result);
      }
      *v7 = v8;
      v6 -= 8;
    }
    while (v4 != v5);
  }
  a2[1] = v7;
  v12 = *v3;
  *v3 = (uint64_t)v7;
  a2[1] = v12;
  v13 = v3[1];
  v3[1] = a2[2];
  a2[2] = v13;
  v14 = v3[2];
  v3[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D3DEE52C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3DC2944((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int **sub_1D3DEE578(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;

  v4 = *a1;
  if (*a1)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v14 = v4;
  v7 = *a2;
  if (*a2)
  {
    v8 = v7 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a1;
  if (*a1)
  {
    sub_1D3D6D13C(v10);
    v4 = v14;
  }
  *a1 = v7;
  if (v4)
  {
    v11 = v4 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*a2)
    sub_1D3D6D13C(*a2);
  *a2 = v4;
  return sub_1D3DC2944(&v14);
}

void sub_1D3DEE628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DEE63C(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v5;
  float v6;
  float v7;
  unsigned int **v8;

  v5 = result;
  v6 = *((float *)*a2 + 6);
  v7 = *((float *)*a3 + 6);
  if (v6 > *((float *)*result + 6))
  {
    if (v7 <= v6)
    {
      result = sub_1D3DEE578(result, a2);
      if (*((float *)*a3 + 6) <= *((float *)*a2 + 6))
        return result;
      result = a2;
    }
    v8 = a3;
    return sub_1D3DEE578(result, v8);
  }
  if (v7 > v6)
  {
    result = sub_1D3DEE578(a2, a3);
    if (*((float *)*a2 + 6) > *((float *)*v5 + 6))
    {
      result = v5;
      v8 = a2;
      return sub_1D3DEE578(result, v8);
    }
  }
  return result;
}

unsigned int **sub_1D3DEE704(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **result;

  result = sub_1D3DEE63C(a1, a2, a3);
  if (*((float *)*a4 + 6) > *((float *)*a3 + 6))
  {
    result = sub_1D3DEE578(a3, a4);
    if (*((float *)*a3 + 6) > *((float *)*a2 + 6))
    {
      result = sub_1D3DEE578(a2, a3);
      if (*((float *)*a2 + 6) > *((float *)*a1 + 6))
        return sub_1D3DEE578(a1, a2);
    }
  }
  return result;
}

unsigned int **sub_1D3DEE7B0(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **result;

  result = sub_1D3DEE704(a1, a2, a3, a4);
  if (*((float *)*a5 + 6) > *((float *)*a4 + 6))
  {
    result = sub_1D3DEE578(a4, a5);
    if (*((float *)*a4 + 6) > *((float *)*a3 + 6))
    {
      result = sub_1D3DEE578(a3, a4);
      if (*((float *)*a3 + 6) > *((float *)*a2 + 6))
      {
        result = sub_1D3DEE578(a2, a3);
        if (*((float *)*a2 + 6) > *((float *)*a1 + 6))
          return sub_1D3DEE578(a1, a2);
      }
    }
  }
  return result;
}

unsigned int **sub_1D3DEE890(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;

  v4 = *a1;
  if (*a1)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v14 = v4;
  v7 = *a2;
  if (*a2)
  {
    v8 = v7 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a1;
  if (*a1)
  {
    sub_1D3D6D13C(v10);
    v4 = v14;
  }
  *a1 = v7;
  if (v4)
  {
    v11 = v4 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (*a2)
    sub_1D3D6D13C(*a2);
  *a2 = v4;
  return sub_1D3DC2944(&v14);
}

void sub_1D3DEE940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DEE954(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  float *v20;

  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*((float *)*(a2 - 1) + 6) > *((float *)*a1 + 6))
        sub_1D3DEE578(a1, a2 - 1);
      return v4;
    case 3:
      sub_1D3DEE63C(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_1D3DEE704(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_1D3DEE7B0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_1D3DEE63C(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (1)
  {
    v8 = *v6;
    if (*((float *)*v6 + 6) > *((float *)*v5 + 6))
      break;
LABEL_25:
    v5 = v6++;
    if (v6 == a2)
      return 1;
  }
  v9 = v8 + 2;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v20 = (float *)v8;
  v11 = *v5;
  v12 = v6;
  while (1)
  {
    v13 = v5;
    if (v11)
    {
      v14 = v11 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (*v12)
      sub_1D3D6D13C(*v12);
    *v12 = v11;
    v16 = v20;
    if (v5 == a1)
      break;
    --v5;
    v11 = *(v13 - 1);
    v12 = v13;
    if (v20[6] <= *((float *)v11 + 6))
      goto LABEL_19;
  }
  v13 = a1;
  if (!v20)
    goto LABEL_21;
LABEL_19:
  v17 = (unsigned int *)(v20 + 2);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_21:
  if (*v13)
    sub_1D3D6D13C(*v13);
  *v13 = (unsigned int *)v16;
  if (++v7 != 8)
  {
    sub_1D3DC2944((unsigned int **)&v20);
    goto LABEL_25;
  }
  v4 = v6 + 1 == a2;
  sub_1D3DC2944((unsigned int **)&v20);
  return v4;
}

void sub_1D3DEEB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D3DEEB78(uint64_t a1, uint64_t a2)
{
  return (float)(*(float *)(*(_QWORD *)a1 + 20) - *(float *)(*(_QWORD *)a2 + 20)) < 0.0;
}

unsigned int **sub_1D3DEEB98(unsigned int **result, unsigned int **a2, uint64_t (**a3)(unsigned int **, unsigned int **), uint64_t a4, char a5)
{
  unsigned int **v9;
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  uint64_t (*v15)(unsigned int **, unsigned int **);
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  char v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t (*v30)(unsigned int **, unsigned int **);
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  char v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t (*v40)(unsigned int **, unsigned int **);
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  char v46;
  uint64_t (*v47)(unsigned int **, unsigned int **);
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  char v55;
  unsigned int **v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t (*v59)(unsigned int **, unsigned int **);
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  char v65;
  unsigned int *v66;
  unsigned int *v67;
  uint64_t (*v68)(unsigned int **, unsigned int **);
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  char v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t (*v87)(unsigned int **, unsigned int **);
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  char v92;
  uint64_t (*v93)(unsigned int **, unsigned int **);
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  char v101;
  uint64_t (*v102)(unsigned int **, unsigned int **);
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  char v109;
  unsigned int **v110;
  uint64_t (*v111)(unsigned int **, unsigned int **);
  unsigned int *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  char v119;
  uint64_t (*v120)(unsigned int **, unsigned int **);
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  int v128;
  uint64_t (*v129)(unsigned int **, unsigned int **);
  unsigned int *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  char v137;
  unsigned int **v138;
  unsigned int **v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t (*v146)(unsigned int **, unsigned int **);
  unsigned int *v147;
  unsigned int **v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int v154;
  int v155;
  unsigned int **v156;
  BOOL v158;
  unsigned int **v159;
  unsigned int **v160;
  unsigned int **v161;
  uint64_t (*v162)(unsigned int **, unsigned int **);
  unsigned int *v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int *v167;
  unsigned int v168;
  int v169;
  unsigned int *v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int **v173;
  unsigned int **v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t (*v178)(unsigned int **, unsigned int **);
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int v184;
  char v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  int64_t v189;
  int64_t v190;
  uint64_t v191;
  unsigned int **v192;
  uint64_t (*v193)(unsigned int **, unsigned int **);
  unsigned int *v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t (*v201)(unsigned int **, unsigned int **);
  unsigned int *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int **v205;
  unsigned int *v206;
  unsigned int *v207;
  unsigned int v208;
  char v209;
  unsigned int *v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int **v213;
  unsigned int *v214;
  unsigned int *v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t (*v218)(unsigned int **, unsigned int **);
  unsigned int *v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t (*v226)(unsigned int **, unsigned int **);
  unsigned int *v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int *v231;
  unsigned int v232;
  int v233;
  unsigned int *v234;
  unsigned int *v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int **v238;
  unsigned int *v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int **v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t (*v247)(unsigned int **, unsigned int **);
  unsigned int *v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int **v258;
  unsigned int *v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  unsigned int **v267;
  uint64_t (*v268)(unsigned int **, unsigned int **);
  unsigned int *v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int *v273;
  unsigned int v274;
  int v275;
  unsigned int *v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int **v279;
  unsigned int *v280;
  unsigned int *v281;
  unsigned int v282;
  uint64_t (*v283)(unsigned int **, unsigned int **);
  unsigned int *v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int *v287;
  unsigned int *v288;
  unsigned int v289;
  char v290;
  unsigned int *v291;
  unsigned int *v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int **v298;
  unsigned int **v299;
  uint64_t (*v300)(unsigned int **, unsigned int **);
  unsigned int *v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int *v305;
  unsigned int v306;
  int v307;
  unsigned int *v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int **v311;
  unsigned int **v312;
  unsigned int *v313;
  unsigned int *v314;
  unsigned int v315;
  uint64_t (*v316)(unsigned int **, unsigned int **);
  unsigned int *v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int *v321;
  unsigned int v322;
  char v323;
  unsigned int *v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int **v327;
  unsigned int **v328;
  unsigned int **v329;
  int64_t v330;
  unsigned int *v331;
  unsigned int *v332;
  unsigned int *v333;
  unsigned int *v334;
  unsigned int *v335;
  unsigned int *v336;
  unsigned int *v337;
  unsigned int *v338;
  unsigned int *v339;
  unsigned int *v340;
  unsigned int *v341;
  unsigned int *v342;
  unsigned int *v343;
  unsigned int *v344;
  unsigned int *v345;

  v9 = result;
  while (2)
  {
    v10 = v9;
    v327 = v9 + 2;
    v329 = v9 + 1;
LABEL_3:
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v146 = *a3;
        v334 = 0;
        v149 = *(a2 - 1);
        v148 = a2 - 1;
        v147 = v149;
        if (v149)
        {
          v150 = v147 + 2;
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v333 = 0;
        v334 = v147;
        v152 = *v10;
        if (*v10)
        {
          v153 = v152 + 2;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
        v333 = v152;
        v155 = v146(&v334, &v333);
        sub_1D3DC2944(&v333);
        result = sub_1D3DC2944(&v334);
        if (v155)
          return sub_1D3DEE578(v10, v148);
        return result;
      case 3:
        return sub_1D3DF0DAC(v10, v10 + 1, a2 - 1, a3);
      case 4:
        return sub_1D3DF107C(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        return sub_1D3DF1264(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 191)
        {
          v156 = v10 + 1;
          v158 = v10 == a2 || v156 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v158)
            {
              v159 = v10;
              do
              {
                v160 = a2;
                v161 = v156;
                v162 = *a3;
                v163 = v159[1];
                if (v163)
                {
                  v164 = v163 + 2;
                  do
                    v165 = __ldxr(v164);
                  while (__stxr(v165 + 1, v164));
                }
                v344 = 0;
                v345 = v163;
                v166 = *v159;
                if (*v159)
                {
                  v167 = v166 + 2;
                  do
                    v168 = __ldxr(v167);
                  while (__stxr(v168 + 1, v167));
                }
                v344 = v166;
                v169 = v162(&v345, &v344);
                sub_1D3DC2944(&v344);
                result = sub_1D3DC2944(&v345);
                if (v169)
                {
                  v170 = *v161;
                  if (*v161)
                  {
                    v171 = v170 + 2;
                    do
                      v172 = __ldxr(v171);
                    while (__stxr(v172 + 1, v171));
                  }
                  v343 = v170;
                  v173 = v161;
                  while (1)
                  {
                    v174 = v159;
                    v175 = *v159;
                    if (*v159)
                    {
                      v176 = v175 + 2;
                      do
                        v177 = __ldxr(v176);
                      while (__stxr(v177 + 1, v176));
                    }
                    if (*v173)
                      sub_1D3D6D13C(*v173);
                    *v173 = v175;
                    if (v159 == v10)
                      break;
                    v178 = *a3;
                    v179 = v343;
                    if (v343)
                    {
                      v180 = v343 + 2;
                      do
                        v181 = __ldxr(v180);
                      while (__stxr(v181 + 1, v180));
                    }
                    v341 = 0;
                    v342 = v179;
                    --v159;
                    v182 = *(v174 - 1);
                    if (v182)
                    {
                      v183 = v182 + 2;
                      do
                        v184 = __ldxr(v183);
                      while (__stxr(v184 + 1, v183));
                    }
                    v341 = v182;
                    v185 = v178(&v342, &v341);
                    sub_1D3DC2944(&v341);
                    sub_1D3DC2944(&v342);
                    v173 = v174;
                    if ((v185 & 1) == 0)
                      goto LABEL_196;
                  }
                  v174 = v10;
LABEL_196:
                  v186 = v343;
                  if (v343)
                  {
                    v187 = v343 + 2;
                    do
                      v188 = __ldxr(v187);
                    while (__stxr(v188 + 1, v187));
                  }
                  if (*v174)
                    sub_1D3D6D13C(*v174);
                  *v174 = v186;
                  result = sub_1D3DC2944(&v343);
                }
                v156 = v161 + 1;
                v159 = v161;
                a2 = v160;
              }
              while (v156 != v160);
            }
          }
          else if (!v158)
          {
            do
            {
              v298 = a2;
              v299 = v156;
              v300 = *a3;
              v301 = v10[1];
              if (v301)
              {
                v302 = v301 + 2;
                do
                  v303 = __ldxr(v302);
                while (__stxr(v303 + 1, v302));
              }
              v344 = 0;
              v345 = v301;
              v304 = *v10;
              if (*v10)
              {
                v305 = v304 + 2;
                do
                  v306 = __ldxr(v305);
                while (__stxr(v306 + 1, v305));
              }
              v344 = v304;
              v307 = v300(&v345, &v344);
              sub_1D3DC2944(&v344);
              result = sub_1D3DC2944(&v345);
              if (v307)
              {
                v308 = *v299;
                if (*v299)
                {
                  v309 = v308 + 2;
                  do
                    v310 = __ldxr(v309);
                  while (__stxr(v310 + 1, v309));
                }
                v343 = v308;
                v311 = v299;
                do
                {
                  v312 = v10;
                  v313 = *v10;
                  if (v313)
                  {
                    v314 = v313 + 2;
                    do
                      v315 = __ldxr(v314);
                    while (__stxr(v315 + 1, v314));
                  }
                  if (*v311)
                    sub_1D3D6D13C(*v311);
                  *v311 = v313;
                  v316 = *a3;
                  v317 = v343;
                  if (v343)
                  {
                    v318 = v343 + 2;
                    do
                      v319 = __ldxr(v318);
                    while (__stxr(v319 + 1, v318));
                  }
                  v341 = 0;
                  v342 = v317;
                  v10 = v312 - 1;
                  v320 = *(v312 - 1);
                  if (v320)
                  {
                    v321 = v320 + 2;
                    do
                      v322 = __ldxr(v321);
                    while (__stxr(v322 + 1, v321));
                  }
                  v341 = v320;
                  v323 = v316(&v342, &v341);
                  sub_1D3DC2944(&v341);
                  sub_1D3DC2944(&v342);
                  v311 = v312;
                }
                while ((v323 & 1) != 0);
                v324 = v343;
                if (v343)
                {
                  v325 = v343 + 2;
                  do
                    v326 = __ldxr(v325);
                  while (__stxr(v326 + 1, v325));
                }
                if (*v312)
                  sub_1D3D6D13C(*v312);
                *v312 = v324;
                result = sub_1D3DC2944(&v343);
              }
              v156 = v299 + 1;
              v10 = v299;
              a2 = v298;
            }
            while (v156 != v298);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v189 = (unint64_t)(v12 - 2) >> 1;
            v328 = a2;
            v330 = v189;
            do
            {
              v190 = v189;
              if (v330 >= v189)
              {
                v191 = (2 * v189) | 1;
                v192 = &v10[v191];
                if (2 * v189 + 2 < v12)
                {
                  v193 = *a3;
                  v194 = *v192;
                  if (*v192)
                  {
                    v195 = v194 + 2;
                    do
                      v196 = __ldxr(v195);
                    while (__stxr(v196 + 1, v195));
                  }
                  v345 = v194;
                  v197 = v192[1];
                  if (v197)
                  {
                    v198 = v197 + 2;
                    do
                      v199 = __ldxr(v198);
                    while (__stxr(v199 + 1, v198));
                  }
                  v344 = v197;
                  v200 = v193(&v345, &v344);
                  sub_1D3DC2944(&v344);
                  sub_1D3DC2944(&v345);
                  v192 += v200;
                  if (v200)
                    v191 = 2 * v190 + 2;
                }
                v201 = *a3;
                v202 = *v192;
                if (*v192)
                {
                  v203 = v202 + 2;
                  do
                    v204 = __ldxr(v203);
                  while (__stxr(v204 + 1, v203));
                }
                v205 = &v10[v190];
                v343 = v202;
                v206 = *v205;
                if (*v205)
                {
                  v207 = v206 + 2;
                  do
                    v208 = __ldxr(v207);
                  while (__stxr(v208 + 1, v207));
                }
                v342 = v206;
                v209 = v201(&v343, &v342);
                sub_1D3DC2944(&v342);
                result = sub_1D3DC2944(&v343);
                if ((v209 & 1) == 0)
                {
                  v210 = *v205;
                  if (*v205)
                  {
                    v211 = v210 + 2;
                    do
                      v212 = __ldxr(v211);
                    while (__stxr(v212 + 1, v211));
                  }
                  v341 = v210;
                  do
                  {
                    v213 = v192;
                    v214 = *v192;
                    if (v214)
                    {
                      v215 = v214 + 2;
                      do
                        v216 = __ldxr(v215);
                      while (__stxr(v216 + 1, v215));
                    }
                    if (*v205)
                      sub_1D3D6D13C(*v205);
                    *v205 = v214;
                    if (v330 < v191)
                      break;
                    v217 = (2 * v191) | 1;
                    v192 = &v10[v217];
                    v191 = 2 * v191 + 2;
                    if (v191 >= v12)
                    {
                      v191 = v217;
                    }
                    else
                    {
                      v218 = *a3;
                      v219 = *v192;
                      if (*v192)
                      {
                        v220 = v219 + 2;
                        do
                          v221 = __ldxr(v220);
                        while (__stxr(v221 + 1, v220));
                      }
                      v340 = v219;
                      v222 = v192[1];
                      if (v222)
                      {
                        v223 = v222 + 2;
                        do
                          v224 = __ldxr(v223);
                        while (__stxr(v224 + 1, v223));
                      }
                      v339 = v222;
                      v225 = v218(&v340, &v339);
                      sub_1D3DC2944(&v339);
                      sub_1D3DC2944(&v340);
                      v192 += v225;
                      if (!v225)
                        v191 = v217;
                    }
                    v226 = *a3;
                    v227 = *v192;
                    if (*v192)
                    {
                      v228 = v227 + 2;
                      do
                        v229 = __ldxr(v228);
                      while (__stxr(v229 + 1, v228));
                    }
                    v338 = v227;
                    v230 = v341;
                    if (v341)
                    {
                      v231 = v341 + 2;
                      do
                        v232 = __ldxr(v231);
                      while (__stxr(v232 + 1, v231));
                    }
                    v337 = v230;
                    v233 = v226(&v338, &v337);
                    sub_1D3DC2944(&v337);
                    sub_1D3DC2944(&v338);
                    v205 = v213;
                  }
                  while (!v233);
                  v234 = v341;
                  if (v341)
                  {
                    v235 = v341 + 2;
                    do
                      v236 = __ldxr(v235);
                    while (__stxr(v236 + 1, v235));
                  }
                  if (*v213)
                    sub_1D3D6D13C(*v213);
                  *v213 = v234;
                  result = sub_1D3DC2944(&v341);
                }
              }
              v189 = v190 - 1;
            }
            while (v190);
            v237 = (unint64_t)v11 >> 3;
            v238 = v328;
            do
            {
              if (v237 >= 2)
              {
                v239 = *v10;
                if (*v10)
                {
                  v240 = v239 + 2;
                  do
                    v241 = __ldxr(v240);
                  while (__stxr(v241 + 1, v240));
                }
                v242 = 0;
                v340 = v239;
                v243 = v10;
                do
                {
                  v244 = (uint64_t)&v243[v242 + 1];
                  v245 = 2 * v242;
                  v242 = (2 * v242) | 1;
                  v246 = v245 + 2;
                  if (v245 + 2 < v237)
                  {
                    v247 = *a3;
                    v345 = 0;
                    v248 = *(unsigned int **)v244;
                    if (*(_QWORD *)v244)
                    {
                      v249 = v248 + 2;
                      do
                        v250 = __ldxr(v249);
                      while (__stxr(v250 + 1, v249));
                    }
                    v344 = 0;
                    v345 = v248;
                    v251 = *(unsigned int **)(v244 + 8);
                    if (v251)
                    {
                      v252 = v251 + 2;
                      do
                        v253 = __ldxr(v252);
                      while (__stxr(v253 + 1, v252));
                    }
                    v344 = v251;
                    v254 = v247(&v345, &v344);
                    sub_1D3DC2944(&v344);
                    sub_1D3DC2944(&v345);
                    v244 += 8 * v254;
                    if (v254)
                      v242 = v246;
                  }
                  v255 = *(unsigned int **)v244;
                  if (*(_QWORD *)v244)
                  {
                    v256 = v255 + 2;
                    do
                      v257 = __ldxr(v256);
                    while (__stxr(v257 + 1, v256));
                  }
                  if (*v243)
                    sub_1D3D6D13C(*v243);
                  *v243 = v255;
                  v243 = (unsigned int **)v244;
                }
                while (v242 <= (uint64_t)((unint64_t)(v237 - 2) >> 1));
                v258 = v238 - 1;
                if ((unsigned int **)v244 == v238 - 1)
                {
                  v294 = v340;
                  if (v340)
                  {
                    v295 = v340 + 2;
                    do
                      v296 = __ldxr(v295);
                    while (__stxr(v296 + 1, v295));
                  }
                  if (*(_QWORD *)v244)
                    sub_1D3D6D13C(*(unsigned int **)v244);
                  *(_QWORD *)v244 = v294;
                }
                else
                {
                  v259 = *v258;
                  if (*v258)
                  {
                    v260 = v259 + 2;
                    do
                      v261 = __ldxr(v260);
                    while (__stxr(v261 + 1, v260));
                  }
                  if (*(_QWORD *)v244)
                    sub_1D3D6D13C(*(unsigned int **)v244);
                  *(_QWORD *)v244 = v259;
                  v262 = v340;
                  if (v340)
                  {
                    v263 = v340 + 2;
                    do
                      v264 = __ldxr(v263);
                    while (__stxr(v264 + 1, v263));
                  }
                  if (*v258)
                    sub_1D3D6D13C(*v258);
                  *v258 = v262;
                  v265 = v244 - (_QWORD)v10 + 8;
                  if (v265 >= 9)
                  {
                    v266 = (unint64_t)((v265 >> 3) - 2) >> 1;
                    v267 = &v10[v266];
                    v268 = *a3;
                    v269 = *v267;
                    if (*v267)
                    {
                      v270 = v269 + 2;
                      do
                        v271 = __ldxr(v270);
                      while (__stxr(v271 + 1, v270));
                    }
                    v345 = v269;
                    v272 = *(unsigned int **)v244;
                    if (*(_QWORD *)v244)
                    {
                      v273 = v272 + 2;
                      do
                        v274 = __ldxr(v273);
                      while (__stxr(v274 + 1, v273));
                    }
                    v344 = v272;
                    v275 = v268(&v345, &v344);
                    sub_1D3DC2944(&v344);
                    sub_1D3DC2944(&v345);
                    if (v275)
                    {
                      v276 = *(unsigned int **)v244;
                      if (*(_QWORD *)v244)
                      {
                        v277 = v276 + 2;
                        do
                          v278 = __ldxr(v277);
                        while (__stxr(v278 + 1, v277));
                      }
                      v343 = v276;
                      do
                      {
                        v279 = v267;
                        v280 = *v267;
                        if (*v267)
                        {
                          v281 = v280 + 2;
                          do
                            v282 = __ldxr(v281);
                          while (__stxr(v282 + 1, v281));
                        }
                        if (*(_QWORD *)v244)
                          sub_1D3D6D13C(*(unsigned int **)v244);
                        *(_QWORD *)v244 = v280;
                        if (!v266)
                          break;
                        v266 = (v266 - 1) >> 1;
                        v267 = &v10[v266];
                        v283 = *a3;
                        v284 = *v267;
                        if (*v267)
                        {
                          v285 = v284 + 2;
                          do
                            v286 = __ldxr(v285);
                          while (__stxr(v286 + 1, v285));
                        }
                        v342 = v284;
                        v287 = v343;
                        if (v343)
                        {
                          v288 = v343 + 2;
                          do
                            v289 = __ldxr(v288);
                          while (__stxr(v289 + 1, v288));
                        }
                        v341 = v287;
                        v290 = v283(&v342, &v341);
                        sub_1D3DC2944(&v341);
                        sub_1D3DC2944(&v342);
                        v244 = (uint64_t)v279;
                      }
                      while ((v290 & 1) != 0);
                      v291 = v343;
                      if (v343)
                      {
                        v292 = v343 + 2;
                        do
                          v293 = __ldxr(v292);
                        while (__stxr(v293 + 1, v292));
                      }
                      if (*v279)
                        sub_1D3D6D13C(*v279);
                      *v279 = v291;
                      sub_1D3DC2944(&v343);
                    }
                  }
                }
                result = sub_1D3DC2944(&v340);
              }
              --v238;
            }
            while ((unint64_t)v237-- > 2);
          }
          return result;
        }
        v13 = &v10[(unint64_t)v12 >> 1];
        v14 = a2 - 1;
        if ((unint64_t)v11 < 0x401)
        {
          sub_1D3DF0DAC(v13, v10, a2 - 1, a3);
        }
        else
        {
          sub_1D3DF0DAC(v10, v13, a2 - 1, a3);
          sub_1D3DF0DAC(v329, v13 - 1, a2 - 2, a3);
          sub_1D3DF0DAC(v327, v13 + 1, a2 - 3, a3);
          sub_1D3DF0DAC(v13 - 1, v13, v13 + 1, a3);
          sub_1D3DEE890(v10, v13);
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *a3;
          v332 = 0;
          v16 = *(v10 - 1);
          if (v16)
          {
            v17 = v16 + 2;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v331 = 0;
          v332 = v16;
          v19 = *v10;
          if (*v10)
          {
            v20 = v19 + 2;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v331 = v19;
          v22 = v15(&v332, &v331);
          sub_1D3DC2944(&v331);
          sub_1D3DC2944(&v332);
          if ((v22 & 1) == 0)
          {
            v84 = *v10;
            if (*v10)
            {
              v85 = v84 + 2;
              do
                v86 = __ldxr(v85);
              while (__stxr(v86 + 1, v85));
              v87 = *a3;
              do
                v88 = __ldxr(v85);
              while (__stxr(v88 + 1, v85));
            }
            else
            {
              v87 = *a3;
            }
            v344 = v84;
            v345 = v84;
            v89 = *v14;
            if (*v14)
            {
              v90 = v89 + 2;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            v343 = v89;
            v92 = v87(&v344, &v343);
            sub_1D3DC2944(&v343);
            sub_1D3DC2944(&v344);
            v9 = v10;
            if ((v92 & 1) != 0)
            {
              v9 = v10;
              do
              {
                v93 = *a3;
                v94 = v345;
                if (v345)
                {
                  v95 = v345 + 2;
                  do
                    v96 = __ldxr(v95);
                  while (__stxr(v96 + 1, v95));
                }
                v342 = v94;
                v98 = v9[1];
                ++v9;
                v97 = v98;
                if (v98)
                {
                  v99 = v97 + 2;
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
                v341 = v97;
                v101 = v93(&v342, &v341);
                sub_1D3DC2944(&v341);
                sub_1D3DC2944(&v342);
              }
              while ((v101 & 1) == 0);
            }
            else
            {
              do
              {
                if (++v9 >= a2)
                  break;
                v102 = *a3;
                v103 = v345;
                if (v345)
                {
                  v104 = v345 + 2;
                  do
                    v105 = __ldxr(v104);
                  while (__stxr(v105 + 1, v104));
                }
                v342 = v103;
                v106 = *v9;
                if (*v9)
                {
                  v107 = v106 + 2;
                  do
                    v108 = __ldxr(v107);
                  while (__stxr(v108 + 1, v107));
                }
                v341 = v106;
                v109 = v102(&v342, &v341);
                sub_1D3DC2944(&v341);
                sub_1D3DC2944(&v342);
              }
              while ((v109 & 1) == 0);
            }
            v110 = a2;
            if (v9 < a2)
            {
              v110 = a2;
              do
              {
                v111 = *a3;
                v112 = v345;
                if (v345)
                {
                  v113 = v345 + 2;
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
                v339 = 0;
                v340 = v112;
                v116 = *--v110;
                v115 = v116;
                if (v116)
                {
                  v117 = v115 + 2;
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                v339 = v115;
                v119 = v111(&v340, &v339);
                sub_1D3DC2944(&v339);
                sub_1D3DC2944(&v340);
              }
              while ((v119 & 1) != 0);
            }
            while (v9 < v110)
            {
              sub_1D3DEE578(v9, v110);
              do
              {
                v120 = *a3;
                v121 = v345;
                if (v345)
                {
                  v122 = v345 + 2;
                  do
                    v123 = __ldxr(v122);
                  while (__stxr(v123 + 1, v122));
                }
                v338 = v121;
                v125 = v9[1];
                ++v9;
                v124 = v125;
                if (v125)
                {
                  v126 = v124 + 2;
                  do
                    v127 = __ldxr(v126);
                  while (__stxr(v127 + 1, v126));
                }
                v337 = v124;
                v128 = v120(&v338, &v337);
                sub_1D3DC2944(&v337);
                sub_1D3DC2944(&v338);
              }
              while (!v128);
              do
              {
                v129 = *a3;
                v130 = v345;
                if (v345)
                {
                  v131 = v345 + 2;
                  do
                    v132 = __ldxr(v131);
                  while (__stxr(v132 + 1, v131));
                }
                v335 = 0;
                v336 = v130;
                v134 = *--v110;
                v133 = v134;
                if (v134)
                {
                  v135 = v133 + 2;
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                }
                v335 = v133;
                v137 = v129(&v336, &v335);
                sub_1D3DC2944(&v335);
                sub_1D3DC2944(&v336);
              }
              while ((v137 & 1) != 0);
            }
            v138 = a2;
            v139 = v9 - 1;
            if (v9 - 1 != v10)
            {
              v140 = *v139;
              if (*v139)
              {
                v141 = v140 + 2;
                do
                  v142 = __ldxr(v141);
                while (__stxr(v142 + 1, v141));
              }
              if (*v10)
                sub_1D3D6D13C(*v10);
              *v10 = v140;
            }
            v143 = v345;
            if (v345)
            {
              v144 = v345 + 2;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            if (*v139)
              sub_1D3D6D13C(*v139);
            *v139 = v143;
            result = sub_1D3DC2944(&v345);
            a5 = 0;
            a2 = v138;
            continue;
          }
        }
        v23 = *v10;
        if (*v10)
        {
          v24 = v23 + 2;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v345 = v23;
        v26 = v10;
        do
        {
          v27 = v26;
          v29 = v26[1];
          ++v26;
          v28 = v29;
          v30 = *a3;
          if (v29)
          {
            v31 = v28 + 2;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v344 = v28;
          v33 = v345;
          if (v345)
          {
            v34 = v345 + 2;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v343 = v33;
          v36 = v30(&v344, &v343);
          sub_1D3DC2944(&v343);
          sub_1D3DC2944(&v344);
        }
        while ((v36 & 1) != 0);
        v37 = a2;
        if (v27 == v10)
        {
          do
          {
            if (v26 >= a2)
              break;
            v47 = *a3;
            v342 = 0;
            v49 = *--a2;
            v48 = v49;
            if (v49)
            {
              v50 = v48 + 2;
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            v342 = v48;
            v52 = v345;
            if (v345)
            {
              v53 = v345 + 2;
              do
                v54 = __ldxr(v53);
              while (__stxr(v54 + 1, v53));
            }
            v341 = v52;
            v55 = v47(&v342, &v341);
            sub_1D3DC2944(&v341);
            sub_1D3DC2944(&v342);
          }
          while ((v55 & 1) == 0);
        }
        else
        {
          do
          {
            v342 = 0;
            v39 = *--a2;
            v38 = v39;
            v40 = *a3;
            if (v39)
            {
              v41 = v38 + 2;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v342 = v38;
            v43 = v345;
            if (v345)
            {
              v44 = v345 + 2;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v341 = v43;
            v46 = v40(&v342, &v341);
            sub_1D3DC2944(&v341);
            sub_1D3DC2944(&v342);
          }
          while ((v46 & 1) == 0);
        }
        v9 = v26;
        if (v26 < a2)
        {
          v56 = a2;
          do
          {
            sub_1D3DEE578(v9, v56);
            do
            {
              v58 = v9[1];
              ++v9;
              v57 = v58;
              v59 = *a3;
              if (v58)
              {
                v60 = v57 + 2;
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              v340 = v57;
              v62 = v345;
              if (v345)
              {
                v63 = v345 + 2;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
              }
              v339 = v62;
              v65 = v59(&v340, &v339);
              sub_1D3DC2944(&v339);
              sub_1D3DC2944(&v340);
            }
            while ((v65 & 1) != 0);
            do
            {
              v338 = 0;
              v67 = *--v56;
              v66 = v67;
              v68 = *a3;
              if (v67)
              {
                v69 = v66 + 2;
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
              }
              v338 = v66;
              v71 = v345;
              if (v345)
              {
                v72 = v345 + 2;
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              v337 = v71;
              v74 = v68(&v338, &v337);
              sub_1D3DC2944(&v337);
              sub_1D3DC2944(&v338);
            }
            while (!v74);
          }
          while (v9 < v56);
        }
        v75 = v9 - 1;
        if (v9 - 1 != v10)
        {
          v76 = *v75;
          if (*v75)
          {
            v77 = v76 + 2;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          if (*v10)
            sub_1D3D6D13C(*v10);
          *v10 = v76;
        }
        v79 = v345;
        if (v345)
        {
          v80 = v345 + 2;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        if (*v75)
          sub_1D3D6D13C(*v75);
        *v75 = v79;
        sub_1D3DC2944(&v345);
        v82 = v26 >= a2;
        a2 = v37;
        if (!v82)
        {
LABEL_81:
          result = (unsigned int **)sub_1D3DEEB98(v10, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v83 = sub_1D3DF14DC(v10, v9 - 1, a3);
        result = (unsigned int **)sub_1D3DF14DC(v9, v37, a3);
        if (!(_DWORD)result)
        {
          if ((v83 & 1) != 0)
            continue;
          goto LABEL_81;
        }
        a2 = v9 - 1;
        if ((v83 & 1) == 0)
          goto LABEL_3;
        return result;
    }
  }
}

void sub_1D3DEFDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3DC2944((unsigned int **)(v1 - 88));
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DEFF70(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;

  if (a1 == a2)
    return a3;
  v4 = a1;
  v5 = 0;
  v6 = a3;
  do
  {
    *v6 = 0;
    v7 = *v4;
    if (*v4)
    {
      v8 = v7 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      if (*v6)
        sub_1D3D6D13C(*v6);
    }
    *v6++ = v7;
    ++v4;
    v5 += 8;
  }
  while (v4 != a2);
  return v6;
}

uint64_t sub_1D3DF0028(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3DE9798((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

int *sub_1D3DF0074(int *result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  float v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  int *v71;
  int *v72;
  uint64_t v73;
  float v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int *v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  int *v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;

  v9 = result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v44 = *v10;
        v45 = *v11;
        if (*(float *)(*a3 + 4 * v44) > *(float *)(*a3 + 4 * v45))
        {
          *v11 = v44;
          *v10 = v45;
        }
        return result;
      case 3uLL:
        return sub_1D3DF0A74(v11, v11 + 1, a2 - 1, *a3);
      case 4uLL:
        return sub_1D3DF0AFC(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5uLL:
        v46 = v11 + 2;
        v47 = v11 + 3;
        result = sub_1D3DF0AFC(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v48 = *v10;
        v49 = v11[3];
        v50 = *a3;
        if (*(float *)(*a3 + 4 * v48) > *(float *)(*a3 + 4 * v49))
        {
          *v47 = v48;
          *v10 = v49;
          v51 = *v47;
          v52 = *v46;
          v53 = *(float *)(v50 + 4 * v51);
          if (v53 > *(float *)(v50 + 4 * v52))
          {
            *v46 = v51;
            *v47 = v52;
            v54 = v11[1];
            if (v53 > *(float *)(v50 + 4 * v54))
            {
              v11[1] = v51;
              v11[2] = v54;
              v55 = *v11;
              if (v53 > *(float *)(v50 + 4 * v55))
              {
                *v11 = v51;
                v11[1] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v56 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v57 = *a3;
                v58 = 4;
                v59 = v11;
                do
                {
                  v61 = *v59;
                  v60 = v59[1];
                  v59 = v56;
                  v62 = *(float *)(v57 + 4 * v60);
                  if (v62 > *(float *)(v57 + 4 * v61))
                  {
                    v63 = v58;
                    while (1)
                    {
                      *(int *)((char *)v11 + v63) = v61;
                      v64 = v63 - 4;
                      if (v63 == 4)
                        break;
                      v61 = *(int *)((char *)v11 + v63 - 8);
                      v63 -= 4;
                      if (v62 <= *(float *)(v57 + 4 * v61))
                      {
                        v65 = (int *)((char *)v11 + v64);
                        goto LABEL_73;
                      }
                    }
                    v65 = v11;
LABEL_73:
                    *v65 = v60;
                  }
                  v56 = v59 + 1;
                  v58 += 4;
                }
                while (v59 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v94 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v95 = *a3;
              do
              {
                v97 = *v9;
                v96 = v9[1];
                v9 = v94;
                v98 = *(float *)(v95 + 4 * v96);
                if (v98 > *(float *)(v95 + 4 * v97))
                {
                  do
                  {
                    *v94 = v97;
                    v97 = *(v94 - 2);
                    --v94;
                  }
                  while (v98 > *(float *)(v95 + 4 * v97));
                  *v94 = v96;
                }
                v94 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v66 = (v13 - 2) >> 1;
            v67 = *a3;
            v68 = v66;
            do
            {
              v69 = v68;
              if (v66 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &v11[v70];
                if (2 * v69 + 2 < (uint64_t)v13 && *(float *)(v67 + 4 * *v71) > *(float *)(v67 + 4 * v71[1]))
                {
                  ++v71;
                  v70 = 2 * v69 + 2;
                }
                v72 = &v11[v69];
                result = (int *)*v71;
                v73 = *v72;
                v74 = *(float *)(v67 + 4 * v73);
                if (*(float *)(v67 + 4 * (_QWORD)result) <= v74)
                {
                  do
                  {
                    v75 = v71;
                    *v72 = (int)result;
                    if (v66 < v70)
                      break;
                    v76 = 2 * v70;
                    v70 = (2 * v70) | 1;
                    v71 = &v11[v70];
                    v77 = v76 + 2;
                    if (v77 < (uint64_t)v13 && *(float *)(v67 + 4 * *v71) > *(float *)(v67 + 4 * v71[1]))
                    {
                      ++v71;
                      v70 = v77;
                    }
                    result = (int *)*v71;
                    v72 = v75;
                  }
                  while (*(float *)(v67 + 4 * (_QWORD)result) <= v74);
                  *v75 = v73;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v78 = (unint64_t)v12 >> 2;
            do
            {
              v79 = 0;
              v80 = *v11;
              v81 = *a3;
              v82 = v11;
              do
              {
                v83 = v82;
                v82 += v79 + 1;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78)
                {
                  result = (int *)*v82;
                  if (*(float *)(v81 + 4 * (_QWORD)result) > *(float *)(v81 + 4 * v82[1]))
                  {
                    ++v82;
                    v79 = v85;
                  }
                }
                *v83 = *v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v80;
              }
              else
              {
                *v82 = *a2;
                *a2 = v80;
                v86 = (char *)v82 - (char *)v11 + 4;
                if (v86 >= 5)
                {
                  v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                  v88 = &v11[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *(float *)(v81 + 4 * v90);
                  if (*(float *)(v81 + 4 * v89) > v91)
                  {
                    do
                    {
                      v92 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v11[v87];
                      v89 = *v88;
                      v82 = v92;
                    }
                    while (*(float *)(v81 + 4 * v89) > v91);
                    *v92 = v90;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return result;
        }
        v14 = v13 >> 1;
        v15 = &v11[v13 >> 1];
        v16 = *a3;
        if ((unint64_t)v12 < 0x201)
        {
          result = sub_1D3DF0A74(&v9[v13 >> 1], v9, a2 - 1, v16);
        }
        else
        {
          sub_1D3DF0A74(v9, &v9[v13 >> 1], a2 - 1, v16);
          sub_1D3DF0A74(v9 + 1, v15 - 1, a2 - 2, *a3);
          sub_1D3DF0A74(v9 + 2, &v9[v14 + 1], a2 - 3, *a3);
          result = sub_1D3DF0A74(v15 - 1, v15, &v9[v14 + 1], *a3);
          v17 = *v9;
          *v9 = *v15;
          *v15 = v17;
        }
        --a4;
        v18 = *v9;
        v19 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v9 - 1)) > v20)
            goto LABEL_12;
          if (v20 <= *(float *)(v19 + 4 * *v10))
          {
            v36 = v9 + 1;
            do
            {
              v11 = v36;
              if (v36 >= a2)
                break;
              ++v36;
            }
            while (v20 <= *(float *)(v19 + 4 * *v11));
          }
          else
          {
            v11 = v9;
            do
            {
              v35 = v11[1];
              ++v11;
            }
            while (v20 <= *(float *)(v19 + 4 * v35));
          }
          v37 = a2;
          if (v11 < a2)
          {
            v37 = a2;
            do
              v38 = *--v37;
            while (v20 > *(float *)(v19 + 4 * v38));
          }
          if (v11 < v37)
          {
            v39 = *v11;
            v40 = *v37;
            do
            {
              *v11 = v40;
              *v37 = v39;
              do
              {
                v41 = v11[1];
                ++v11;
                v39 = v41;
              }
              while (v20 <= *(float *)(v19 + 4 * v41));
              do
              {
                v42 = *--v37;
                v40 = v42;
              }
              while (v20 > *(float *)(v19 + 4 * v42));
            }
            while (v11 < v37);
          }
          v43 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v43;
          a5 = 0;
          *v43 = v18;
          continue;
        }
        v20 = *(float *)(v19 + 4 * v18);
LABEL_12:
        v21 = v9;
        do
        {
          v22 = v21;
          v24 = v21[1];
          ++v21;
          v23 = v24;
        }
        while (*(float *)(v19 + 4 * v24) > v20);
        v25 = a2;
        if (v22 == v9)
        {
          v25 = a2;
          do
          {
            if (v21 >= v25)
              break;
            v27 = *--v25;
          }
          while (*(float *)(v19 + 4 * v27) <= v20);
        }
        else
        {
          do
            v26 = *--v25;
          while (*(float *)(v19 + 4 * v26) <= v20);
        }
        if (v21 < v25)
        {
          v28 = *v25;
          v29 = v23;
          v30 = v21;
          v31 = v25;
          do
          {
            *v30 = v28;
            *v31 = v29;
            do
            {
              v22 = v30;
              v32 = v30[1];
              ++v30;
              v29 = v32;
            }
            while (*(float *)(v19 + 4 * v32) > v20);
            do
            {
              v33 = *--v31;
              v28 = v33;
            }
            while (*(float *)(v19 + 4 * v33) <= v20);
          }
          while (v30 < v31);
        }
        if (v22 != v9)
          *v9 = *v22;
        *v22 = v18;
        if (v21 < v25)
        {
LABEL_31:
          result = (int *)sub_1D3DF0074(v9, v22, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v22 + 1;
          continue;
        }
        v34 = sub_1D3DF0BA4(v9, v22, a3);
        v11 = v22 + 1;
        result = (int *)sub_1D3DF0BA4(v22 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_31;
        }
        a2 = v22;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

float sub_1D3DF07C4(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  float result;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  float v37;
  float v38;
  BOOL v39;
  int v41;
  int v42;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
    return -3.4028e38;
  v5 = a3;
  result = -3.4028e38;
  if ((a3 & 0x80000000) == 0)
  {
    v7 = a2;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = v8[7];
    v10 = -v9;
    v11 = v8[4];
    v12 = v9 - 1;
    v13 = v8[2];
    v14 = v13 & (v9 - 1) | v11 & -v9;
    if (v14 > a2)
    {
      result = -3.4028e38;
      if ((a4 & 0x80000000) == 0)
      {
        v15 = v11 & v12 | v13 & v10;
        if (v15 > a3)
        {
          result = -3.4028e38;
          if ((a5 & 0x80000000) == 0 && v14 > a4 && v15 > a5)
          {
            v17 = a4 > a2 ? 1 : -1;
            v42 = v17;
            v18 = (int)(a4 - a2) >= 0 ? a4 - a2 : a2 - a4;
            v19 = a5 > a3 ? 1 : -1;
            v41 = v19;
            v20 = (int)(a5 - a3) >= 0 ? a5 - a3 : a3 - a5;
            v21 = v18 <= v20 ? -v20 : v18;
            v22 = v21 / 2;
            v44[0] = 0;
            v23 = sub_1D3D6D4A0(v8, a2, a3);
            v24 = 0;
            v25 = 0;
            v26 = -v18;
            while (1)
            {
              v27 = sub_1D3D6D4A0(v8, (int)v7, (int)v5);
              v28 = (_DWORD *)((unint64_t)v44 | (4 * v27));
              v29 = *v28 + 1;
              *v28 = v29;
              v30 = v25 <= v24 ? v24 : v25;
              if (((v23 ^ v27) & 1) != 0)
              {
                v24 = v30;
                v25 = 1;
              }
              else
              {
                ++v25;
              }
              if (v5 == a5 && v7 == a4)
                break;
              if (((v23 ^ v27) & 1) != 0)
                v23 = v27;
              if (v22 <= v26)
                v31 = 0;
              else
                v31 = v20;
              v32 = v42;
              if (v22 <= v26)
                v32 = 0;
              v33 = v22 - v31;
              v7 += v32;
              v34 = v22 < v20;
              if (v22 >= v20)
                v35 = 0;
              else
                v35 = v18;
              v22 = v33 + v35;
              v36 = v41;
              if (!v34)
                v36 = 0;
              v5 += v36;
            }
            *(_DWORD *)((unint64_t)v44 | (4 * v27)) = v29 - v25;
            v37 = fabsf((float)((float)SLODWORD(v44[0]) / (float)(HIDWORD(v44[0]) + LODWORD(v44[0]))) + -0.5);
            v38 = (float)v24 / (float)(HIDWORD(v44[0]) + LODWORD(v44[0]));
            v39 = v37 <= 0.3 && v38 <= 0.4;
            result = -(float)(v37 - (float)(v38 * -4.0));
            if (!v39)
              return -3.4028e38;
          }
        }
      }
    }
  }
  return result;
}

void sub_1D3DF0A18(void **a1)
{
  unsigned int **v1;
  unsigned int **v3;
  void *v4;

  v1 = (unsigned int **)*a1;
  if (*a1)
  {
    v3 = (unsigned int **)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = sub_1D3DC2944(v3 - 1);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

int *sub_1D3DF0A74(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(float *)(a4 + 4 * v4);
  v7 = *(float *)(a4 + 4 * v5);
  v8 = *a3;
  v9 = *(float *)(a4 + 4 * v8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(float *)(a4 + 4 * v10) > *(float *)(a4 + 4 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(float *)(a4 + 4 * v12) <= v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

int *sub_1D3DF0AFC(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1D3DF0A74(a1, a2, a3, *a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) > *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

BOOL sub_1D3DF0BA4(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) > *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1D3DF0A74(a1, a1 + 1, a2 - 1, *a3);
      return 1;
    case 4:
      sub_1D3DF0AFC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      sub_1D3DF0AFC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = *a3;
      if (*(float *)(*a3 + 4 * v23) > *(float *)(*a3 + 4 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(float *)(v25 + 4 * v26);
        if (v28 > *(float *)(v25 + 4 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 > *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 > *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1D3DF0A74(a1, a1 + 1, a1 + 2, *a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 > *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 4 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

unsigned int **sub_1D3DF0DAC(unsigned int **a1, unsigned int **a2, unsigned int **a3, uint64_t (**a4)(unsigned int **, unsigned int **))
{
  uint64_t (*v8)(unsigned int **, unsigned int **);
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  uint64_t (*v16)(unsigned int **, unsigned int **);
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int **v24;
  uint64_t (*v25)(unsigned int **, unsigned int **);
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unsigned int **result;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  char v40;
  uint64_t (*v41)(unsigned int **, unsigned int **);
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;

  v8 = *a4;
  v9 = *a2;
  if (*a2)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v58 = v9;
  v12 = *a1;
  if (*a1)
  {
    v13 = v12 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v57 = v12;
  v15 = v8(&v58, &v57);
  sub_1D3DC2944(&v57);
  sub_1D3DC2944(&v58);
  v16 = *a4;
  v17 = *a3;
  if ((v15 & 1) != 0)
  {
    if (v17)
    {
      v18 = v17 + 2;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v52 = v17;
    v20 = *a2;
    if (*a2)
    {
      v21 = v20 + 2;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v51 = v20;
    v23 = v16(&v52, &v51);
    sub_1D3DC2944(&v51);
    sub_1D3DC2944(&v52);
    v24 = a1;
    if (v23)
      goto LABEL_23;
    sub_1D3DEE578(a1, a2);
    v25 = *a4;
    v26 = *a3;
    if (*a3)
    {
      v27 = v26 + 2;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v50 = v26;
    v29 = *a2;
    if (*a2)
    {
      v30 = v29 + 2;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v49 = v29;
    v32 = v25(&v50, &v49);
    sub_1D3DC2944(&v49);
    result = sub_1D3DC2944(&v50);
    if (v32)
    {
      v24 = a2;
LABEL_23:
      v34 = a3;
      return sub_1D3DEE578(v24, v34);
    }
  }
  else
  {
    if (v17)
    {
      v35 = v17 + 2;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v56 = v17;
    v37 = *a2;
    if (*a2)
    {
      v38 = v37 + 2;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v55 = v37;
    v40 = v16(&v56, &v55);
    sub_1D3DC2944(&v55);
    result = sub_1D3DC2944(&v56);
    if ((v40 & 1) != 0)
    {
      sub_1D3DEE578(a2, a3);
      v41 = *a4;
      v42 = *a2;
      if (*a2)
      {
        v43 = v42 + 2;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v54 = v42;
      v45 = *a1;
      if (*a1)
      {
        v46 = v45 + 2;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v53 = v45;
      v48 = v41(&v54, &v53);
      sub_1D3DC2944(&v53);
      result = sub_1D3DC2944(&v54);
      if (v48)
      {
        v24 = a1;
        v34 = a2;
        return sub_1D3DEE578(v24, v34);
      }
    }
  }
  return result;
}

void sub_1D3DF101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, unsigned int *);
  sub_1D3DC2944((unsigned int **)va);
  sub_1D3DC2944((unsigned int **)va1);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DF107C(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, uint64_t (**a5)(unsigned int **, unsigned int **))
{
  uint64_t (*v10)(unsigned int **, unsigned int **);
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  unsigned int **result;
  uint64_t (*v19)(unsigned int **, unsigned int **);
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  uint64_t (*v27)(unsigned int **, unsigned int **);
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;

  sub_1D3DF0DAC(a1, a2, a3, a5);
  v10 = *a5;
  v11 = *a4;
  if (*a4)
  {
    v12 = v11 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v40 = v11;
  v14 = *a3;
  if (*a3)
  {
    v15 = v14 + 2;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v39 = v14;
  v17 = v10(&v40, &v39);
  sub_1D3DC2944(&v39);
  result = sub_1D3DC2944(&v40);
  if (v17)
  {
    sub_1D3DEE578(a3, a4);
    v19 = *a5;
    v20 = *a3;
    if (*a3)
    {
      v21 = v20 + 2;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v38 = v20;
    v23 = *a2;
    if (*a2)
    {
      v24 = v23 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v37 = v23;
    v26 = v19(&v38, &v37);
    sub_1D3DC2944(&v37);
    result = sub_1D3DC2944(&v38);
    if (v26)
    {
      sub_1D3DEE578(a2, a3);
      v27 = *a5;
      v28 = *a2;
      if (*a2)
      {
        v29 = v28 + 2;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v36 = v28;
      v31 = *a1;
      if (*a1)
      {
        v32 = v31 + 2;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v35 = v31;
      v34 = v27(&v36, &v35);
      sub_1D3DC2944(&v35);
      result = sub_1D3DC2944(&v36);
      if (v34)
        return sub_1D3DEE578(a1, a2);
    }
  }
  return result;
}

void sub_1D3DF1224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  sub_1D3DC2944(&a9);
  sub_1D3DC2944(&a10);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DF1264(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5, uint64_t (**a6)(unsigned int **, unsigned int **))
{
  uint64_t (*v12)(unsigned int **, unsigned int **);
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int **result;
  uint64_t (*v21)(unsigned int **, unsigned int **);
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  uint64_t (*v29)(unsigned int **, unsigned int **);
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  uint64_t (*v37)(unsigned int **, unsigned int **);
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;

  sub_1D3DF107C(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = *a5;
  if (*a5)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v52 = v13;
  v16 = *a4;
  if (*a4)
  {
    v17 = v16 + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v51 = v16;
  v19 = v12(&v52, &v51);
  sub_1D3DC2944(&v51);
  result = sub_1D3DC2944(&v52);
  if (v19)
  {
    sub_1D3DEE578(a4, a5);
    v21 = *a6;
    v22 = *a4;
    if (*a4)
    {
      v23 = v22 + 2;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v50 = v22;
    v25 = *a3;
    if (*a3)
    {
      v26 = v25 + 2;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v49 = v25;
    v28 = v21(&v50, &v49);
    sub_1D3DC2944(&v49);
    result = sub_1D3DC2944(&v50);
    if (v28)
    {
      sub_1D3DEE578(a3, a4);
      v29 = *a6;
      v30 = *a3;
      if (*a3)
      {
        v31 = v30 + 2;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v48 = v30;
      v33 = *a2;
      if (*a2)
      {
        v34 = v33 + 2;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v47 = v33;
      v36 = v29(&v48, &v47);
      sub_1D3DC2944(&v47);
      result = sub_1D3DC2944(&v48);
      if (v36)
      {
        sub_1D3DEE578(a2, a3);
        v37 = *a6;
        v38 = *a2;
        if (*a2)
        {
          v39 = v38 + 2;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v46 = v38;
        v41 = *a1;
        if (*a1)
        {
          v42 = v41 + 2;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v45 = v41;
        v44 = v37(&v46, &v45);
        sub_1D3DC2944(&v45);
        result = sub_1D3DC2944(&v46);
        if (v44)
          return sub_1D3DEE578(a1, a2);
      }
    }
  }
  return result;
}

void sub_1D3DF148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  sub_1D3DC2944(&a9);
  sub_1D3DC2944(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF14DC(unsigned int **a1, unsigned int **a2, uint64_t (**a3)(unsigned int **, unsigned int **))
{
  _BOOL8 v6;
  uint64_t (*v7)(unsigned int **, unsigned int **);
  unsigned int *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int **v16;
  unsigned int **v17;
  int v18;
  uint64_t (*v19)(unsigned int **, unsigned int **);
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t (*v35)(unsigned int **, unsigned int **);
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  char v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;

  v6 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = *a3;
      v9 = a2 - 1;
      v8 = *(a2 - 1);
      if (v8)
      {
        v10 = v8 + 2;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v53 = v8;
      v12 = *a1;
      if (*a1)
      {
        v13 = v12 + 2;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v52 = v12;
      v15 = v7(&v53, &v52);
      sub_1D3DC2944(&v52);
      sub_1D3DC2944(&v53);
      if (v15)
        sub_1D3DEE578(a1, v9);
      return 1;
    case 3:
      sub_1D3DF0DAC(a1, a1 + 1, a2 - 1, a3);
      return v6;
    case 4:
      sub_1D3DF107C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return v6;
    case 5:
      sub_1D3DF1264(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return v6;
    default:
      v16 = a1 + 2;
      sub_1D3DF0DAC(a1, a1 + 1, a1 + 2, a3);
      v17 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *a3;
    v20 = *v17;
    if (*v17)
    {
      v21 = v20 + 2;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v50 = 0;
    v51 = v20;
    v23 = *v16;
    if (*v16)
    {
      v24 = v23 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v50 = v23;
    v26 = v19(&v51, &v50);
    sub_1D3DC2944(&v50);
    sub_1D3DC2944(&v51);
    if (!v26)
      goto LABEL_46;
    v27 = *v17;
    if (*v17)
    {
      v28 = v27 + 2;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v49 = v27;
    v30 = v17;
    while (1)
    {
      v31 = v16;
      v32 = *v16;
      if (v32)
      {
        v33 = v32 + 2;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (*v30)
        sub_1D3D6D13C(*v30);
      *v30 = v32;
      if (v31 == a1)
        break;
      v35 = *a3;
      v36 = v49;
      if (v49)
      {
        v37 = v49 + 2;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v47 = 0;
      v48 = v36;
      v16 = v31 - 1;
      v39 = *(v31 - 1);
      if (v39)
      {
        v40 = v39 + 2;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v47 = v39;
      v42 = v35(&v48, &v47);
      sub_1D3DC2944(&v47);
      sub_1D3DC2944(&v48);
      v30 = v31;
      if ((v42 & 1) == 0)
        goto LABEL_39;
    }
    v31 = a1;
LABEL_39:
    v43 = v49;
    if (v49)
    {
      v44 = v49 + 2;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    if (*v31)
      sub_1D3D6D13C(*v31);
    *v31 = v43;
    if (++v18 == 8)
      break;
    sub_1D3DC2944(&v49);
LABEL_46:
    v16 = v17++;
    if (v17 == a2)
      return 1;
  }
  v6 = v17 + 1 == a2;
  sub_1D3DC2944(&v49);
  return v6;
}

void sub_1D3DF17F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unsigned int *v8;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, unsigned int *);
  sub_1D3DC2944((unsigned int **)va);
  sub_1D3DC2944((unsigned int **)va1);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DF1850(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  float v16;
  unsigned int *v17;
  unsigned int v18;
  float v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  float v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int **v41;
  uint64_t v42;
  float v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  uint64_t v53;
  unsigned int **v54;
  BOOL v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int **v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int v66;
  float *v67;
  unsigned int *v68;
  unsigned int v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int **v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int **v94;
  unsigned int **v95;
  unsigned int **v96;
  unsigned int *v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int **v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int **v118;
  unsigned int *v119;
  unsigned int v120;
  float *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int **v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int **v133;
  unsigned int **v134;
  unsigned int *v135;
  unsigned int v136;
  float *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int **v140;
  unsigned int **v141;
  unsigned int **v142;
  unsigned int *v143;
  float *v144;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v140 = a2 - 3;
  v141 = a2 - 2;
  v9 = v7;
  v142 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v53 = (uint64_t)*(a2 - 1);
        v52 = a2 - 1;
        if (*(float *)(v53 + 24) > *((float *)*v7 + 6))
          return sub_1D3DEE578(v7, v52);
        return result;
      case 3:
        return sub_1D3DEE63C(v7, v7 + 1, v8);
      case 4:
        return sub_1D3DEE704(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return sub_1D3DEE7B0(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v54 = v7 + 1;
          v56 = v7 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = v7;
              do
              {
                v58 = v54;
                v59 = v57[1];
                if (*((float *)v59 + 6) > *((float *)*v57 + 6))
                {
                  v60 = v59 + 2;
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                  v144 = (float *)v59;
                  v62 = *v57;
                  v63 = v58;
                  while (1)
                  {
                    v64 = v57;
                    if (v62)
                    {
                      v65 = v62 + 2;
                      do
                        v66 = __ldxr(v65);
                      while (__stxr(v66 + 1, v65));
                    }
                    if (*v63)
                      sub_1D3D6D13C(*v63);
                    *v63 = v62;
                    v67 = v144;
                    if (v64 == v7)
                      break;
                    v57 = v64 - 1;
                    v62 = *(v64 - 1);
                    v63 = v64;
                    if (v144[6] <= *((float *)v62 + 6))
                      goto LABEL_106;
                  }
                  v64 = v7;
                  if (!v144)
                    goto LABEL_108;
LABEL_106:
                  v68 = (unsigned int *)(v144 + 2);
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
LABEL_108:
                  if (*v64)
                    sub_1D3D6D13C(*v64);
                  *v64 = (unsigned int *)v67;
                  result = sub_1D3DC2944((unsigned int **)&v144);
                }
                v54 = v58 + 1;
                v57 = v58;
              }
              while (v58 + 1 != v142);
            }
          }
          else if (!v56)
          {
            do
            {
              v128 = v54;
              v129 = v7[1];
              if (*((float *)v129 + 6) > *((float *)*v7 + 6))
              {
                v130 = v129 + 2;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
                v144 = (float *)v129;
                v132 = *v7;
                v133 = v128;
                do
                {
                  v134 = v7;
                  if (v132)
                  {
                    v135 = v132 + 2;
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                  }
                  if (*v133)
                    sub_1D3D6D13C(*v133);
                  *v133 = v132;
                  --v7;
                  v132 = *(v134 - 1);
                  v137 = v144;
                  v133 = v134;
                }
                while (v144[6] > *((float *)v132 + 6));
                v138 = (unsigned int *)(v144 + 2);
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
                if (*v134)
                  sub_1D3D6D13C(*v134);
                *v134 = (unsigned int *)v137;
                result = sub_1D3DC2944((unsigned int **)&v144);
              }
              v54 = v128 + 1;
              v7 = v128;
            }
            while (v128 + 1 != v142);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v70 = (unint64_t)(v11 - 2) >> 1;
          v71 = v70;
          do
          {
            v72 = v71;
            if (v70 >= v71)
            {
              v73 = (2 * v71) | 1;
              v74 = &v7[v73];
              if (2 * v72 + 2 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
              {
                ++v74;
                v73 = 2 * v72 + 2;
              }
              v75 = &v7[v72];
              v76 = *v75;
              if (*((float *)*v74 + 6) <= *((float *)*v75 + 6))
              {
                v77 = v76 + 2;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
                v144 = (float *)v76;
                v79 = *v74;
                while (1)
                {
                  v80 = v74;
                  if (v79)
                  {
                    v81 = v79 + 2;
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                  }
                  if (*v75)
                    sub_1D3D6D13C(*v75);
                  *v75 = v79;
                  if (v70 < v73)
                    break;
                  v83 = 2 * v73;
                  v73 = (2 * v73) | 1;
                  v74 = &v7[v73];
                  v84 = v83 + 2;
                  if (v84 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
                  {
                    ++v74;
                    v73 = v84;
                  }
                  v79 = *v74;
                  v85 = v144;
                  v75 = v80;
                  if (*((float *)*v74 + 6) > v144[6])
                    goto LABEL_135;
                }
                v85 = v144;
                if (v144)
                {
LABEL_135:
                  v86 = (unsigned int *)(v85 + 2);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                if (*v80)
                  sub_1D3D6D13C(*v80);
                *v80 = (unsigned int *)v85;
                sub_1D3DC2944((unsigned int **)&v144);
              }
            }
            v71 = v72 - 1;
          }
          while (v72);
          v88 = (unint64_t)v10 >> 3;
          v89 = v142;
          while (2)
          {
            v90 = *v7;
            if (*v7)
            {
              v91 = v90 + 2;
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            v93 = 0;
            v143 = v90;
            v94 = v7;
LABEL_146:
            v95 = &v94[v93];
            v98 = v95[1];
            v96 = v95 + 1;
            v97 = v98;
            v99 = 2 * v93;
            v93 = (2 * v93) | 1;
            v100 = v99 + 2;
            if (v100 >= v88)
            {
              if (v97)
                goto LABEL_150;
            }
            else
            {
              v101 = v96[1];
              if (*((float *)v97 + 6) > *((float *)v101 + 6))
              {
                v93 = v100;
                ++v96;
                v97 = v101;
              }
LABEL_150:
              v102 = v97 + 2;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            if (*v94)
              sub_1D3D6D13C(*v94);
            *v94 = v97;
            v94 = v96;
            if (v93 > (uint64_t)((unint64_t)(v88 - 2) >> 1))
            {
              if (v96 == --v89)
              {
                v122 = v143;
                if (v143)
                {
                  v123 = v143 + 2;
                  do
                    v124 = __ldxr(v123);
                  while (__stxr(v124 + 1, v123));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v122;
              }
              else
              {
                v104 = v89;
                v105 = *v89;
                if (*v89)
                {
                  v106 = v105 + 2;
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v105;
                v108 = v143;
                if (v143)
                {
                  v109 = v143 + 2;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                }
                if (*v89)
                  sub_1D3D6D13C(*v89);
                *v89 = v108;
                v111 = (char *)v96 - (char *)v7 + 8;
                if (v111 >= 9)
                {
                  v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                  v113 = &v7[v112];
                  v114 = *v96;
                  if (*((float *)*v113 + 6) > *((float *)*v96 + 6))
                  {
                    v115 = v114 + 2;
                    do
                      v116 = __ldxr(v115);
                    while (__stxr(v116 + 1, v115));
                    v144 = (float *)v114;
                    v117 = *v113;
                    while (1)
                    {
                      v118 = v113;
                      if (v117)
                      {
                        v119 = v117 + 2;
                        do
                          v120 = __ldxr(v119);
                        while (__stxr(v120 + 1, v119));
                      }
                      if (*v96)
                        sub_1D3D6D13C(*v96);
                      *v96 = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = &v7[v112];
                      v117 = *v113;
                      v121 = v144;
                      v96 = v118;
                      if (*((float *)*v113 + 6) <= v144[6])
                        goto LABEL_186;
                    }
                    v121 = v144;
                    if (!v144)
                      goto LABEL_188;
LABEL_186:
                    v125 = (unsigned int *)(v121 + 2);
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
LABEL_188:
                    if (*v118)
                      sub_1D3D6D13C(*v118);
                    *v118 = (unsigned int *)v121;
                    sub_1D3DC2944((unsigned int **)&v144);
                    v89 = v104;
                  }
                }
              }
              result = sub_1D3DC2944(&v143);
              if (v88-- <= 2)
                return result;
              continue;
            }
            goto LABEL_146;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1D3DEE63C(v13, v7, v8);
        }
        else
        {
          sub_1D3DEE63C(v7, v13, v8);
          sub_1D3DEE63C(v7 + 1, v13 - 1, v141);
          sub_1D3DEE63C(v7 + 2, &v7[v12 + 1], v140);
          sub_1D3DEE63C(v13 - 1, v13, &v7[v12 + 1]);
          sub_1D3DEE890(v7, v13);
        }
        --a3;
        v14 = v142;
        if ((a4 & 1) == 0)
        {
          v15 = *v7;
          v16 = *((float *)*v7 + 6);
          if (*((float *)*(v7 - 1) + 6) > v16)
            goto LABEL_13;
          v37 = v15 + 2;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v144 = (float *)v15;
          if (v16 <= *((float *)*v8 + 6))
          {
            v40 = v7 + 1;
            do
            {
              v9 = v40;
              if (v40 >= v142)
                break;
              ++v40;
            }
            while (v16 <= *((float *)*v9 + 6));
          }
          else
          {
            v9 = v7;
            do
            {
              v39 = v9[1];
              ++v9;
            }
            while (v16 <= *((float *)v39 + 6));
          }
          v41 = v142;
          if (v9 < v142)
          {
            v41 = v142;
            do
              v42 = (uint64_t)*--v41;
            while (v16 > *(float *)(v42 + 24));
          }
          while (v9 < v41)
          {
            sub_1D3DEE578(v9, v41);
            v15 = (unsigned int *)v144;
            v43 = v144[6];
            do
            {
              v44 = v9[1];
              ++v9;
            }
            while (v43 <= *((float *)v44 + 6));
            do
              v45 = (uint64_t)*--v41;
            while (v43 > *(float *)(v45 + 24));
          }
          v46 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v47 = *v46;
            if (*v46)
            {
              v48 = v47 + 2;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            if (*v7)
              sub_1D3D6D13C(*v7);
            *v7 = v47;
            v15 = (unsigned int *)v144;
          }
          if (v15)
          {
            v50 = v15 + 2;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          if (*v46)
            sub_1D3D6D13C(*v46);
          *v46 = v15;
          result = sub_1D3DC2944((unsigned int **)&v144);
          a4 = 0;
          a2 = v142;
          continue;
        }
        v15 = *v7;
        if (*v7)
        {
LABEL_13:
          v17 = v15 + 2;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v144 = (float *)v15;
        v19 = *((float *)v15 + 6);
        v20 = v7;
        do
        {
          v21 = v20;
          v22 = v20[1];
          ++v20;
        }
        while (*((float *)v22 + 6) > v19);
        if (v21 == v7)
        {
          v14 = v142;
          do
          {
            if (v20 >= v14)
              break;
            v24 = (uint64_t)*--v14;
          }
          while (*(float *)(v24 + 24) <= v19);
        }
        else
        {
          do
            v23 = (uint64_t)*--v14;
          while (*(float *)(v23 + 24) <= v19);
        }
        v9 = v20;
        if (v20 < v14)
        {
          v25 = v14;
          do
          {
            sub_1D3DEE578(v9, v25);
            v15 = (unsigned int *)v144;
            v26 = v144[6];
            do
            {
              v27 = v9[1];
              ++v9;
            }
            while (*((float *)v27 + 6) > v26);
            do
              v28 = (uint64_t)*--v25;
            while (*(float *)(v28 + 24) <= v26);
          }
          while (v9 < v25);
        }
        v29 = v9 - 1;
        if (v9 - 1 != v7)
        {
          v30 = *v29;
          if (*v29)
          {
            v31 = v30 + 2;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          if (*v7)
            sub_1D3D6D13C(*v7);
          *v7 = v30;
          v15 = (unsigned int *)v144;
        }
        if (v15)
        {
          v33 = v15 + 2;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        if (*v29)
          sub_1D3D6D13C(*v29);
        *v29 = v15;
        sub_1D3DC2944((unsigned int **)&v144);
        v35 = v20 >= v14;
        a2 = v142;
        if (!v35)
        {
LABEL_45:
          result = (unsigned int **)sub_1D3DF1850(v7, v9 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = sub_1D3DF3030(v7, v9 - 1);
        result = (unsigned int **)sub_1D3DF3030(v9, v142);
        if (!(_DWORD)result)
        {
          if ((v36 & 1) != 0)
            continue;
          goto LABEL_45;
        }
        a2 = v9 - 1;
        if ((v36 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1D3DF2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

void sub_1D3DF22A0(unsigned int *a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int **v14;
  _QWORD v15[5];

  v3 = *(_QWORD *)a1;
  v4 = (unsigned int **)*((_QWORD *)a1 + 1);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v14 = (unsigned int **)(v3 + 8 * a2);
      while (v4 != v14)
        sub_1D3DC2944(--v4);
      *((_QWORD *)a1 + 1) = v14;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = *((_QWORD *)a1 + 2);
    if (a2 - v5 <= (v7 - (uint64_t)v4) >> 3)
    {
      bzero(*((void **)a1 + 1), 8 * v6);
      *((_QWORD *)a1 + 1) = &v4[v6];
    }
    else
    {
      if (a2 >> 61)
        sub_1D3D6D4F8();
      v15[4] = a1 + 4;
      v8 = v7 - v3;
      v9 = v8 >> 2;
      if (v8 >> 2 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)sub_1D3D6D8A0(v10);
      v12 = &v11[8 * v5];
      v15[0] = v11;
      v15[1] = v12;
      v15[3] = &v11[8 * v13];
      bzero(v12, 8 * v6);
      v15[2] = &v12[8 * v6];
      sub_1D3DEE430(a1, v15);
      sub_1D3DEE52C((uint64_t)v15);
    }
  }
}

void sub_1D3DF23A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DEE52C((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DF23BC(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  float v16;
  unsigned int *v17;
  unsigned int v18;
  float v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  float v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int **v40;
  unsigned int **v41;
  uint64_t v42;
  float v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int **v52;
  uint64_t v53;
  unsigned int **v54;
  BOOL v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int **v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int v66;
  float *v67;
  unsigned int *v68;
  unsigned int v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unsigned int **v74;
  unsigned int **v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int **v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int **v94;
  unsigned int **v95;
  unsigned int **v96;
  unsigned int *v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int **v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int **v118;
  unsigned int *v119;
  unsigned int v120;
  float *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int **v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int **v133;
  unsigned int **v134;
  unsigned int *v135;
  unsigned int v136;
  float *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int **v140;
  unsigned int **v141;
  unsigned int **v142;
  unsigned int *v143;
  float *v144;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v140 = a2 - 3;
  v141 = a2 - 2;
  v9 = v7;
  v142 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v53 = (uint64_t)*(a2 - 1);
        v52 = a2 - 1;
        if (*(float *)(v53 + 24) > *((float *)*v7 + 6))
          return sub_1D3DEE578(v7, v52);
        return result;
      case 3:
        return sub_1D3DEE63C(v7, v7 + 1, v8);
      case 4:
        return sub_1D3DEE704(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return sub_1D3DEE7B0(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v54 = v7 + 1;
          v56 = v7 == a2 || v54 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = v7;
              do
              {
                v58 = v54;
                v59 = v57[1];
                if (*((float *)v59 + 6) > *((float *)*v57 + 6))
                {
                  v60 = v59 + 2;
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                  v144 = (float *)v59;
                  v62 = *v57;
                  v63 = v58;
                  while (1)
                  {
                    v64 = v57;
                    if (v62)
                    {
                      v65 = v62 + 2;
                      do
                        v66 = __ldxr(v65);
                      while (__stxr(v66 + 1, v65));
                    }
                    if (*v63)
                      sub_1D3D6D13C(*v63);
                    *v63 = v62;
                    v67 = v144;
                    if (v64 == v7)
                      break;
                    v57 = v64 - 1;
                    v62 = *(v64 - 1);
                    v63 = v64;
                    if (v144[6] <= *((float *)v62 + 6))
                      goto LABEL_106;
                  }
                  v64 = v7;
                  if (!v144)
                    goto LABEL_108;
LABEL_106:
                  v68 = (unsigned int *)(v144 + 2);
                  do
                    v69 = __ldxr(v68);
                  while (__stxr(v69 + 1, v68));
LABEL_108:
                  if (*v64)
                    sub_1D3D6D13C(*v64);
                  *v64 = (unsigned int *)v67;
                  result = sub_1D3DC2944((unsigned int **)&v144);
                }
                v54 = v58 + 1;
                v57 = v58;
              }
              while (v58 + 1 != v142);
            }
          }
          else if (!v56)
          {
            do
            {
              v128 = v54;
              v129 = v7[1];
              if (*((float *)v129 + 6) > *((float *)*v7 + 6))
              {
                v130 = v129 + 2;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
                v144 = (float *)v129;
                v132 = *v7;
                v133 = v128;
                do
                {
                  v134 = v7;
                  if (v132)
                  {
                    v135 = v132 + 2;
                    do
                      v136 = __ldxr(v135);
                    while (__stxr(v136 + 1, v135));
                  }
                  if (*v133)
                    sub_1D3D6D13C(*v133);
                  *v133 = v132;
                  --v7;
                  v132 = *(v134 - 1);
                  v137 = v144;
                  v133 = v134;
                }
                while (v144[6] > *((float *)v132 + 6));
                v138 = (unsigned int *)(v144 + 2);
                do
                  v139 = __ldxr(v138);
                while (__stxr(v139 + 1, v138));
                if (*v134)
                  sub_1D3D6D13C(*v134);
                *v134 = (unsigned int *)v137;
                result = sub_1D3DC2944((unsigned int **)&v144);
              }
              v54 = v128 + 1;
              v7 = v128;
            }
            while (v128 + 1 != v142);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 == a2)
            return result;
          v70 = (unint64_t)(v11 - 2) >> 1;
          v71 = v70;
          do
          {
            v72 = v71;
            if (v70 >= v71)
            {
              v73 = (2 * v71) | 1;
              v74 = &v7[v73];
              if (2 * v72 + 2 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
              {
                ++v74;
                v73 = 2 * v72 + 2;
              }
              v75 = &v7[v72];
              v76 = *v75;
              if (*((float *)*v74 + 6) <= *((float *)*v75 + 6))
              {
                v77 = v76 + 2;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
                v144 = (float *)v76;
                v79 = *v74;
                while (1)
                {
                  v80 = v74;
                  if (v79)
                  {
                    v81 = v79 + 2;
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                  }
                  if (*v75)
                    sub_1D3D6D13C(*v75);
                  *v75 = v79;
                  if (v70 < v73)
                    break;
                  v83 = 2 * v73;
                  v73 = (2 * v73) | 1;
                  v74 = &v7[v73];
                  v84 = v83 + 2;
                  if (v84 < v11 && *((float *)*v74 + 6) > *((float *)v74[1] + 6))
                  {
                    ++v74;
                    v73 = v84;
                  }
                  v79 = *v74;
                  v85 = v144;
                  v75 = v80;
                  if (*((float *)*v74 + 6) > v144[6])
                    goto LABEL_135;
                }
                v85 = v144;
                if (v144)
                {
LABEL_135:
                  v86 = (unsigned int *)(v85 + 2);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                if (*v80)
                  sub_1D3D6D13C(*v80);
                *v80 = (unsigned int *)v85;
                sub_1D3DC2944((unsigned int **)&v144);
              }
            }
            v71 = v72 - 1;
          }
          while (v72);
          v88 = (unint64_t)v10 >> 3;
          v89 = v142;
          while (2)
          {
            v90 = *v7;
            if (*v7)
            {
              v91 = v90 + 2;
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            v93 = 0;
            v143 = v90;
            v94 = v7;
LABEL_146:
            v95 = &v94[v93];
            v98 = v95[1];
            v96 = v95 + 1;
            v97 = v98;
            v99 = 2 * v93;
            v93 = (2 * v93) | 1;
            v100 = v99 + 2;
            if (v100 >= v88)
            {
              if (v97)
                goto LABEL_150;
            }
            else
            {
              v101 = v96[1];
              if (*((float *)v97 + 6) > *((float *)v101 + 6))
              {
                v93 = v100;
                ++v96;
                v97 = v101;
              }
LABEL_150:
              v102 = v97 + 2;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            if (*v94)
              sub_1D3D6D13C(*v94);
            *v94 = v97;
            v94 = v96;
            if (v93 > (uint64_t)((unint64_t)(v88 - 2) >> 1))
            {
              if (v96 == --v89)
              {
                v122 = v143;
                if (v143)
                {
                  v123 = v143 + 2;
                  do
                    v124 = __ldxr(v123);
                  while (__stxr(v124 + 1, v123));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v122;
              }
              else
              {
                v104 = v89;
                v105 = *v89;
                if (*v89)
                {
                  v106 = v105 + 2;
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                if (*v96)
                  sub_1D3D6D13C(*v96);
                *v96 = v105;
                v108 = v143;
                if (v143)
                {
                  v109 = v143 + 2;
                  do
                    v110 = __ldxr(v109);
                  while (__stxr(v110 + 1, v109));
                }
                if (*v89)
                  sub_1D3D6D13C(*v89);
                *v89 = v108;
                v111 = (char *)v96 - (char *)v7 + 8;
                if (v111 >= 9)
                {
                  v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                  v113 = &v7[v112];
                  v114 = *v96;
                  if (*((float *)*v113 + 6) > *((float *)*v96 + 6))
                  {
                    v115 = v114 + 2;
                    do
                      v116 = __ldxr(v115);
                    while (__stxr(v116 + 1, v115));
                    v144 = (float *)v114;
                    v117 = *v113;
                    while (1)
                    {
                      v118 = v113;
                      if (v117)
                      {
                        v119 = v117 + 2;
                        do
                          v120 = __ldxr(v119);
                        while (__stxr(v120 + 1, v119));
                      }
                      if (*v96)
                        sub_1D3D6D13C(*v96);
                      *v96 = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = &v7[v112];
                      v117 = *v113;
                      v121 = v144;
                      v96 = v118;
                      if (*((float *)*v113 + 6) <= v144[6])
                        goto LABEL_186;
                    }
                    v121 = v144;
                    if (!v144)
                      goto LABEL_188;
LABEL_186:
                    v125 = (unsigned int *)(v121 + 2);
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
LABEL_188:
                    if (*v118)
                      sub_1D3D6D13C(*v118);
                    *v118 = (unsigned int *)v121;
                    sub_1D3DC2944((unsigned int **)&v144);
                    v89 = v104;
                  }
                }
              }
              result = sub_1D3DC2944(&v143);
              if (v88-- <= 2)
                return result;
              continue;
            }
            goto LABEL_146;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1D3DEE63C(v13, v7, v8);
        }
        else
        {
          sub_1D3DEE63C(v7, v13, v8);
          sub_1D3DEE63C(v7 + 1, v13 - 1, v141);
          sub_1D3DEE63C(v7 + 2, &v7[v12 + 1], v140);
          sub_1D3DEE63C(v13 - 1, v13, &v7[v12 + 1]);
          sub_1D3DEE890(v7, v13);
        }
        --a3;
        v14 = v142;
        if ((a4 & 1) == 0)
        {
          v15 = *v7;
          v16 = *((float *)*v7 + 6);
          if (*((float *)*(v7 - 1) + 6) > v16)
            goto LABEL_13;
          v37 = v15 + 2;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v144 = (float *)v15;
          if (v16 <= *((float *)*v8 + 6))
          {
            v40 = v7 + 1;
            do
            {
              v9 = v40;
              if (v40 >= v142)
                break;
              ++v40;
            }
            while (v16 <= *((float *)*v9 + 6));
          }
          else
          {
            v9 = v7;
            do
            {
              v39 = v9[1];
              ++v9;
            }
            while (v16 <= *((float *)v39 + 6));
          }
          v41 = v142;
          if (v9 < v142)
          {
            v41 = v142;
            do
              v42 = (uint64_t)*--v41;
            while (v16 > *(float *)(v42 + 24));
          }
          while (v9 < v41)
          {
            sub_1D3DEE578(v9, v41);
            v15 = (unsigned int *)v144;
            v43 = v144[6];
            do
            {
              v44 = v9[1];
              ++v9;
            }
            while (v43 <= *((float *)v44 + 6));
            do
              v45 = (uint64_t)*--v41;
            while (v43 > *(float *)(v45 + 24));
          }
          v46 = v9 - 1;
          if (v9 - 1 != v7)
          {
            v47 = *v46;
            if (*v46)
            {
              v48 = v47 + 2;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            if (*v7)
              sub_1D3D6D13C(*v7);
            *v7 = v47;
            v15 = (unsigned int *)v144;
          }
          if (v15)
          {
            v50 = v15 + 2;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          if (*v46)
            sub_1D3D6D13C(*v46);
          *v46 = v15;
          result = sub_1D3DC2944((unsigned int **)&v144);
          a4 = 0;
          a2 = v142;
          continue;
        }
        v15 = *v7;
        if (*v7)
        {
LABEL_13:
          v17 = v15 + 2;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v144 = (float *)v15;
        v19 = *((float *)v15 + 6);
        v20 = v7;
        do
        {
          v21 = v20;
          v22 = v20[1];
          ++v20;
        }
        while (*((float *)v22 + 6) > v19);
        if (v21 == v7)
        {
          v14 = v142;
          do
          {
            if (v20 >= v14)
              break;
            v24 = (uint64_t)*--v14;
          }
          while (*(float *)(v24 + 24) <= v19);
        }
        else
        {
          do
            v23 = (uint64_t)*--v14;
          while (*(float *)(v23 + 24) <= v19);
        }
        v9 = v20;
        if (v20 < v14)
        {
          v25 = v14;
          do
          {
            sub_1D3DEE578(v9, v25);
            v15 = (unsigned int *)v144;
            v26 = v144[6];
            do
            {
              v27 = v9[1];
              ++v9;
            }
            while (*((float *)v27 + 6) > v26);
            do
              v28 = (uint64_t)*--v25;
            while (*(float *)(v28 + 24) <= v26);
          }
          while (v9 < v25);
        }
        v29 = v9 - 1;
        if (v9 - 1 != v7)
        {
          v30 = *v29;
          if (*v29)
          {
            v31 = v30 + 2;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          if (*v7)
            sub_1D3D6D13C(*v7);
          *v7 = v30;
          v15 = (unsigned int *)v144;
        }
        if (v15)
        {
          v33 = v15 + 2;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        if (*v29)
          sub_1D3D6D13C(*v29);
        *v29 = v15;
        sub_1D3DC2944((unsigned int **)&v144);
        v35 = v20 >= v14;
        a2 = v142;
        if (!v35)
        {
LABEL_45:
          result = (unsigned int **)sub_1D3DF23BC(v7, v9 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = sub_1D3DF2E0C(v7, v9 - 1);
        result = (unsigned int **)sub_1D3DF2E0C(v9, v142);
        if (!(_DWORD)result)
        {
          if ((v36 & 1) != 0)
            continue;
          goto LABEL_45;
        }
        a2 = v9 - 1;
        if ((v36 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1D3DF2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF2E0C(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  float *v20;

  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*((float *)*(a2 - 1) + 6) > *((float *)*a1 + 6))
        sub_1D3DEE578(a1, a2 - 1);
      return v4;
    case 3:
      sub_1D3DEE63C(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_1D3DEE704(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_1D3DEE7B0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_1D3DEE63C(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (1)
  {
    v8 = *v6;
    if (*((float *)*v6 + 6) > *((float *)*v5 + 6))
      break;
LABEL_25:
    v5 = v6++;
    if (v6 == a2)
      return 1;
  }
  v9 = v8 + 2;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v20 = (float *)v8;
  v11 = *v5;
  v12 = v6;
  while (1)
  {
    v13 = v5;
    if (v11)
    {
      v14 = v11 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (*v12)
      sub_1D3D6D13C(*v12);
    *v12 = v11;
    v16 = v20;
    if (v5 == a1)
      break;
    --v5;
    v11 = *(v13 - 1);
    v12 = v13;
    if (v20[6] <= *((float *)v11 + 6))
      goto LABEL_19;
  }
  v13 = a1;
  if (!v20)
    goto LABEL_21;
LABEL_19:
  v17 = (unsigned int *)(v20 + 2);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_21:
  if (*v13)
    sub_1D3D6D13C(*v13);
  *v13 = (unsigned int *)v16;
  if (++v7 != 8)
  {
    sub_1D3DC2944((unsigned int **)&v20);
    goto LABEL_25;
  }
  v4 = v6 + 1 == a2;
  sub_1D3DC2944((unsigned int **)&v20);
  return v4;
}

void sub_1D3DF3018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF3030(unsigned int **a1, unsigned int **a2)
{
  _BOOL8 v4;
  unsigned int **v5;
  unsigned int **v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  float *v20;

  v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*((float *)*(a2 - 1) + 6) > *((float *)*a1 + 6))
        sub_1D3DEE578(a1, a2 - 1);
      return v4;
    case 3:
      sub_1D3DEE63C(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_1D3DEE704(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_1D3DEE7B0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      v5 = a1 + 2;
      sub_1D3DEE63C(a1, a1 + 1, a1 + 2);
      v6 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v7 = 0;
      break;
  }
  while (1)
  {
    v8 = *v6;
    if (*((float *)*v6 + 6) > *((float *)*v5 + 6))
      break;
LABEL_25:
    v5 = v6++;
    if (v6 == a2)
      return 1;
  }
  v9 = v8 + 2;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v20 = (float *)v8;
  v11 = *v5;
  v12 = v6;
  while (1)
  {
    v13 = v5;
    if (v11)
    {
      v14 = v11 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (*v12)
      sub_1D3D6D13C(*v12);
    *v12 = v11;
    v16 = v20;
    if (v5 == a1)
      break;
    --v5;
    v11 = *(v13 - 1);
    v12 = v13;
    if (v20[6] <= *((float *)v11 + 6))
      goto LABEL_19;
  }
  v13 = a1;
  if (!v20)
    goto LABEL_21;
LABEL_19:
  v17 = (unsigned int *)(v20 + 2);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_21:
  if (*v13)
    sub_1D3D6D13C(*v13);
  *v13 = (unsigned int *)v16;
  if (++v7 != 8)
  {
    sub_1D3DC2944((unsigned int **)&v20);
    goto LABEL_25;
  }
  v4 = v6 + 1 == a2;
  sub_1D3DC2944((unsigned int **)&v20);
  return v4;
}

void sub_1D3DF323C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DC2944((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_1D3DF3254(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3DF32B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF32B8(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[2];
  unsigned int **v18;
  unint64_t v19;
  uint64_t v20;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_1D3D6D4F8();
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v7 >> 2 > v3)
    v3 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v20 = v6;
  if (v8)
    v8 = (unint64_t)sub_1D3D6D8A0(v8);
  else
    v9 = 0;
  v10 = (unsigned int **)(v8 + 8 * v2);
  v17[0] = v8;
  v17[1] = v10;
  v18 = v10;
  v19 = v8 + 8 * v9;
  *v10 = 0;
  v11 = *a2;
  v12 = v10;
  if (v11)
  {
    v13 = v11 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v12 = v10;
    if (*v10)
    {
      sub_1D3D6D13C(*v10);
      v12 = v18;
    }
  }
  *v10 = v11;
  v18 = v12 + 1;
  sub_1D3DEE430((unsigned int *)a1, v17);
  v15 = *(_QWORD *)(a1 + 8);
  sub_1D3DEE52C((uint64_t)v17);
  return v15;
}

void sub_1D3DF33B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DEE52C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF33C4(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E95AF6A8;
  v2 = (void **)(a1 + 16);
  v4 = (void **)(a1 + 152);
  sub_1D3DE98F8(&v4);
  v4 = (void **)(a1 + 128);
  sub_1D3DE98F8(&v4);
  sub_1D3D7FBF4((unsigned int **)(a1 + 120));
  v4 = (void **)(a1 + 88);
  sub_1D3D7FB84(&v4);
  v4 = (void **)(a1 + 64);
  sub_1D3DE98F8(&v4);
  v4 = (void **)(a1 + 40);
  sub_1D3D7FB84(&v4);
  v4 = v2;
  sub_1D3DE98F8(&v4);
  sub_1D3D6D10C((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t sub_1D3DF3474(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v8;

  v4 = a1 + 8;
  if (a2)
  {
    v5 = a2 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v8 = a2;
  sub_1D3E0B568(v4, (uint64_t *)&v8, a3);
  sub_1D3D6D10C(&v8);
  *(_QWORD *)a1 = &off_1E95AF6A8;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 100;
  return a1;
}

void sub_1D3DF34EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D6D10C((unsigned int **)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DF3500(CVPixelBufferPoolRef *a1, uint64_t a2, unint64_t *a3)
{
  int v5;
  int v6;
  NSObject *v7;
  unint64_t *result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  int v20;
  __int16 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int16 v31;
  const __CFString *v32;

  if (*(_DWORD *)a2 != 4)
    goto LABEL_4;
  v5 = 1278226534;
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 3)
  {
    v5 = 1278226536;
  }
  else if (v6 != 6)
  {
LABEL_4:
    if (qword_1EDB89F90 != -1)
      dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
    v7 = qword_1EDB89F98;
    if (os_log_type_enabled((os_log_t)qword_1EDB89F98, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl(&dword_1D3D6B000, v7, OS_LOG_TYPE_ERROR, "Unsupported input tensor data type", (uint8_t *)&v10, 2u);
    }
    v10 = -2001;
    v32 = CFSTR("Unsupported input tensor data type.");
    result = (unint64_t *)sub_1D3D73E0C(a3, &v10, (CFTypeRef *)&v32);
    *a1 = 0;
    return result;
  }
  v18 = 0;
  v19 = 0;
  v31 = 0;
  v20 = 0;
  v21 = 0;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = 1;
  v12 = *(_QWORD *)(a2 + 48) * v9;
  v13 = 1;
  v14 = v5;
  v15 = 1;
  v17 = 1;
  v16 = 64;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 1;
  result = sub_1D3DD5EF4(a1, &v10, (uint64_t)a3);
  if (v30)
    return sub_1D3D8C70C((unint64_t *)&v29 + 1);
  return result;
}

void sub_1D3DF3678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a35)
    sub_1D3D8C70C((unint64_t *)&a34);
  _Unwind_Resume(exception_object);
}

void sub_1D3DF3698(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "createNetworkInputPixelBufferFrom32BGRA", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DF3738(uint64_t *a1)
{
  size_t v1;
  uint64_t v2;
  _QWORD block[6];
  __int16 v4;

  v2 = *a1;
  v1 = a1[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_1D3DF37E4;
  block[3] = &unk_1E95B3728;
  block[4] = v2;
  block[5] = a1;
  v4 = 23544;
  dispatch_apply(v1, 0, block);
}

unint64_t *sub_1D3DF37A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    *(_BYTE *)(a1 + 16) = sub_1D3DD4A58((unint64_t *)a1, 0, *(_QWORD *)(a1 + 8)) ^ 1;
  return sub_1D3D74EDC((unint64_t *)a1);
}

__int16 sub_1D3DF37E4@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  __int16 result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (__int16 *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v2 + 24) * a2);
    do
    {
      _H0 = *v4;
      _H1 = *(_WORD *)(a1 + 48);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 * _S1;
      __asm { FCVT            H0, S0 }
      *v4++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1D3DF3828()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF383C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AC670;
  return result;
}

void sub_1D3DF3860(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AC670;
}

void sub_1D3DF3878(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "createNetworkInputPixelBufferFrom32BGRA", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF3918(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers39createNetworkInputPixelBufferFrom32BGRAERKNS0_4e5rt20E5RTTensorDescriptorERK13vImage_BufferRKNS_5CFRefIP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSG_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF3950()
{
  return &unk_1E95ABD58;
}

void sub_1D3DF3960()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF3974()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AC618;
  return result;
}

void sub_1D3DF3998(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AC618;
}

uint64_t sub_1D3DF39B0(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers39createNetworkInputPixelBufferFrom32BGRAERKNS0_4e5rt20E5RTTensorDescriptorERK13vImage_BufferRKNS_5CFRefIP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSG_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF39E8()
{
  return &unk_1E95ABD48;
}

void sub_1D3DF39F4(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "createNetworkInputPixelBufferFromInterleaved", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF3A94(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  CFTypeRef v5;

  v5 = (CFTypeRef)atomic_load(a2);
  if (v5)
    v5 = CFRetain(v5);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = sub_1D3DD48A0((unint64_t *)a1, 0, a3);
  return a1;
}

void sub_1D3DF3ADC(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1D3D74EDC(v1);
  _Unwind_Resume(a1);
}

void sub_1D3DF3AF0(const vImage_Buffer *a1, const vImage_Buffer *a2, const vImage_Buffer *a3, const vImage_Buffer *a4)
{
  char *data;
  char *v9;
  char *v10;
  char *v11;
  vImagePixelCount v12;
  unint64_t width;
  size_t rowBytes;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  const __int16 *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  const __int16 *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  size_t v35;
  void *v36;
  vImage_Error v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  vImage_Error v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  size_t v47;
  void *v48;
  vImage_Buffer v49;
  _BYTE block[24];
  void *height;
  _BYTE v52[20];
  uint64_t v53;
  int16x4x4_t v54;
  int16x8x4_t v55;

  v53 = *MEMORY[0x1E0C80C00];
  data = (char *)a1->data;
  if (((uint64_t)a1->data & 0xF) != 0
    || (a1->rowBytes & 0xF) != 0
    || (v9 = (char *)a2->data, ((uint64_t)a2->data & 0xF) != 0)
    || (a2->rowBytes & 0xF) != 0
    || (v10 = (char *)a3->data, ((uint64_t)a3->data & 0xF) != 0)
    || (a3->rowBytes & 0xF) != 0
    || (v11 = (char *)a4->data, ((uint64_t)a4->data & 0xF) != 0)
    || (a4->rowBytes & 0xF) != 0)
  {
    v37 = vImageBuffer_Init(&v49, a1->height, a1->width, 0x10u, 0);
    if (v37)
    {
      if (qword_1EDB89F90 != -1)
        dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
      v38 = qword_1EDB89F98;
      if (os_log_type_enabled((os_log_t)qword_1EDB89F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)block = 134349056;
        *(_QWORD *)&block[4] = v37;
        _os_log_fault_impl(&dword_1D3D6B000, v38, OS_LOG_TYPE_FAULT, "vImageBuffer_Init failed: %{public}zd", block, 0xCu);
      }
    }
    else
    {
      v39 = v49.data;
      if (qword_1EDB89F90 != -1)
        dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
      v40 = qword_1EDB89F98;
      if (os_log_type_enabled((os_log_t)qword_1EDB89F98, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)block = 136447234;
        *(_QWORD *)&block[4] = "temporaryAlpha";
        *(_WORD *)&block[12] = 2050;
        *(_QWORD *)&block[14] = v39;
        *(_WORD *)&block[22] = 2050;
        height = (void *)v49.height;
        *(_WORD *)v52 = 2050;
        *(_QWORD *)&v52[2] = v49.width;
        *(_WORD *)&v52[10] = 2050;
        *(_QWORD *)&v52[12] = v49.rowBytes;
        _os_log_debug_impl(&dword_1D3D6B000, v40, OS_LOG_TYPE_DEBUG, "Allocated %{public}s image buffer: data=%{public}p, height=%{public}zu, width=%{public}zu, rowBytes=%{public}zu", block, 0x34u);
      }
      v41 = vImageConvert_ARGB16UtoPlanar16U(a1, a2, a3, a4, &v49, 0);
      if (v41)
      {
        if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)block = 134349056;
          *(_QWORD *)&block[4] = v41;
          _os_log_fault_impl(&dword_1D3D6B000, v40, OS_LOG_TYPE_FAULT, "vImageConvert_ARGB16UtoPlanar16U failed: %{public}zd", block, 0xCu);
        }
      }
      else
      {
        v43 = a2->data;
        v42 = a2->height;
        v44 = MEMORY[0x1E0C809B0];
        *(_QWORD *)block = MEMORY[0x1E0C809B0];
        *(_QWORD *)&block[8] = 0x40000000;
        *(_QWORD *)&block[16] = sub_1D3DF37E4;
        height = &unk_1E95B3728;
        *(_QWORD *)v52 = v43;
        *(_QWORD *)&v52[8] = a2;
        *(_WORD *)&v52[16] = 23544;
        dispatch_apply(v42, 0, block);
        v46 = a3->data;
        v45 = a3->height;
        *(_QWORD *)block = v44;
        *(_QWORD *)&block[8] = 0x40000000;
        *(_QWORD *)&block[16] = sub_1D3DF37E4;
        height = &unk_1E95B3728;
        *(_QWORD *)v52 = v46;
        *(_QWORD *)&v52[8] = a3;
        *(_WORD *)&v52[16] = 23544;
        dispatch_apply(v45, 0, block);
        v48 = a4->data;
        v47 = a4->height;
        *(_QWORD *)block = v44;
        *(_QWORD *)&block[8] = 0x40000000;
        *(_QWORD *)&block[16] = sub_1D3DF37E4;
        height = &unk_1E95B3728;
        *(_QWORD *)v52 = v48;
        *(_QWORD *)&v52[8] = a4;
        *(_WORD *)&v52[16] = 23544;
        dispatch_apply(v47, 0, block);
      }
      if (v39)
        free(v39);
    }
  }
  else
  {
    if (a1->height)
    {
      v12 = 0;
      width = a1->width;
      do
      {
        rowBytes = a1->rowBytes;
        v15 = a2->rowBytes;
        v16 = a3->rowBytes;
        v17 = a4->rowBytes;
        if (width >= 8)
        {
          v18 = 0;
          v19 = (const __int16 *)&data[rowBytes * v12];
          v20 = (int16x8_t *)&v9[v15 * v12];
          v21 = (int16x8_t *)&v10[v16 * v12];
          v22 = (int16x8_t *)&v11[v17 * v12];
          do
          {
            v55 = vld4q_s16(v19);
            v19 += 32;
            *v20++ = v55.val[0];
            *v21++ = v55.val[1];
            *v22++ = v55.val[2];
            v18 += 8;
            width = a1->width;
          }
          while (v18 < (width & 0xFFFFFFFFFFFFFFF8));
        }
        else
        {
          v18 = 0;
        }
        if (v18 < (width & 0xFFFFFFFFFFFFFFFCLL))
        {
          v23 = (const __int16 *)&data[8 * v18 + rowBytes * v12];
          v54 = vld4_s16(v23);
          v24 = 2 * v18;
          *(int16x4_t *)&v9[v15 * v12 + v24] = v54.val[0];
          *(int16x4_t *)&v10[v16 * v12 + v24] = v54.val[1];
          *(int16x4_t *)&v11[v17 * v12 + v24] = v54.val[2];
          v18 |= 4uLL;
          width = a1->width;
        }
        v25 = width - v18;
        if (width > v18)
        {
          v26 = &v11[2 * v18 + v17 * v12];
          v27 = &v10[2 * v18 + v16 * v12];
          v28 = &v9[2 * v18 + v15 * v12];
          v29 = &data[8 * v18 + rowBytes * v12];
          do
          {
            v30 = *(_QWORD *)v29;
            v29 += 8;
            *(_WORD *)v28 = v30;
            v28 += 2;
            *(_WORD *)v27 = WORD1(v30);
            v27 += 2;
            *(_WORD *)v26 = WORD2(v30);
            v26 += 2;
            --v25;
          }
          while (v25);
        }
        ++v12;
      }
      while (v12 < a1->height);
      v9 = (char *)a2->data;
    }
    v31 = a2->height;
    v32 = MEMORY[0x1E0C809B0];
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_1D3DF37E4;
    height = &unk_1E95B3728;
    *(_QWORD *)v52 = v9;
    *(_QWORD *)&v52[8] = a2;
    *(_WORD *)&v52[16] = 23544;
    dispatch_apply(v31, 0, block);
    v34 = a3->data;
    v33 = a3->height;
    *(_QWORD *)block = v32;
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_1D3DF37E4;
    height = &unk_1E95B3728;
    *(_QWORD *)v52 = v34;
    *(_QWORD *)&v52[8] = a3;
    *(_WORD *)&v52[16] = 23544;
    dispatch_apply(v33, 0, block);
    v36 = a4->data;
    v35 = a4->height;
    *(_QWORD *)block = v32;
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_1D3DF37E4;
    height = &unk_1E95B3728;
    *(_QWORD *)v52 = v36;
    *(_QWORD *)&v52[8] = a4;
    *(_WORD *)&v52[16] = 23544;
    dispatch_apply(v35, 0, block);
  }
}

void sub_1D3DF3FBC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D3DF3FDC(uint64_t a1)
{
  unint64_t v1;
  size_t v2;
  const float *v3;
  _QWORD block[6];
  int v5;
  float __B;

  __B = 255.0;
  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 & 3) != 0 || v1 >= 4 * *(_QWORD *)(a1 + 16) + 64)
  {
    v3 = *(const float **)a1;
    v2 = *(_QWORD *)(a1 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_1D3DF40CC;
    block[3] = &unk_1E95B3748;
    block[4] = v3;
    block[5] = a1;
    v5 = 1132396544;
    dispatch_apply(v2, 0, block);
  }
  else
  {
    vDSP_vsmul(*(const float **)a1, 1, &__B, *(float **)a1, 1, *(_QWORD *)(a1 + 8) * (v1 >> 2));
  }
}

unint64_t *sub_1D3DF4088(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    *(_BYTE *)(a1 + 16) = sub_1D3DD4A58((unint64_t *)a1, 1, *(_QWORD *)(a1 + 8)) ^ 1;
  return sub_1D3D74EDC((unint64_t *)a1);
}

void sub_1D3DF40CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const float *v3;
  float *v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (const float *)(a1 + 48);
  v4 = (float *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v2 + 24) * a2);
  vDSP_vsmul(v4, 1, v3, v4, 1, *(_QWORD *)(v2 + 16));
}

void sub_1D3DF40F0()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF4104()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95B37F8;
  return result;
}

void sub_1D3DF4128(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95B37F8;
}

void sub_1D3DF4140(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "createNetworkInputPixelBufferFromInterleaved", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF41E0(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers44createNetworkInputPixelBufferFromInterleavedERKNS0_4e5rt20E5RTTensorDescriptorERKNS_5CFRefIP10__CVBufferEERKNS6_IP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSI_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF4218()
{
  return &unk_1E95B3858;
}

void sub_1D3DF4228()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF423C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95B3778;
  return result;
}

void sub_1D3DF4260(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95B3778;
}

uint64_t sub_1D3DF4278(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers44createNetworkInputPixelBufferFromInterleavedERKNS0_4e5rt20E5RTTensorDescriptorERKNS_5CFRefIP10__CVBufferEERKNS6_IP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSI_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF42B0()
{
  return &unk_1E95B37D8;
}

void sub_1D3DF42BC(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "createNetworkInputPixelBufferFromOneComponent8", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DF4360()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF4374()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AC720;
  return result;
}

void sub_1D3DF4398(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AC720;
}

void sub_1D3DF43B0(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "createNetworkInputPixelBufferFromOneComponent8", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF4450(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers46createNetworkInputPixelBufferFromOneComponent8ERKNS0_4e5rt20E5RTTensorDescriptorERK13vImage_BufferRKNS_5CFRefIP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSG_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF4488()
{
  return &unk_1E95ABD78;
}

void sub_1D3DF4498()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF44AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AC6C8;
  return result;
}

void sub_1D3DF44D0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AC6C8;
}

uint64_t sub_1D3DF44E8(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference7helpers46createNetworkInputPixelBufferFromOneComponent8ERKNS0_4e5rt20E5RTTensorDescriptorERK13vImage_BufferRKNS_5CFRefIP19__CVPixelBufferPoolEERNSt3__18optionalINS_5ErrorEEERKNSG_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF4520()
{
  return &unk_1E95ABD68;
}

unsigned int **sub_1D3DF452C(uint64_t a1, uint64_t a2, unsigned int ***a3, __int128 *a4)
{
  std::exception_vtbl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  std::exception_vtbl *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  char *v29;
  int32x2_t v30;
  uint64_t i;
  uint64_t v32;
  std::exception_vtbl *v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  std::exception *v37;
  unsigned int v38;
  unsigned int *v39;
  std::exception_vtbl *v40;
  std::exception *v41;
  void (__cdecl *v42)(std::exception *__hidden);
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  std::exception *v46;
  void (__cdecl *v47)(std::exception *__hidden);
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  std::exception *v51;
  const char *(__cdecl *what)(const std::exception *__hidden);
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  std::exception *v56;
  void (__cdecl *v57)(std::exception *__hidden);
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int **v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  int v66;
  std::exception *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  std::exception_vtbl *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  std::exception *v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  std::exception_vtbl *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  unsigned int **v96;
  std::exception v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  unsigned int **v102[3];
  uint64_t (**v103)(_QWORD);
  int v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t **v108;
  void *__p[3];
  std::exception *v110;
  unsigned int **v111;
  unsigned int *v112;
  unsigned int *v113;
  __int128 v114;
  char v115;
  unsigned int *v116;
  unsigned int **v117;
  unsigned int **v118;
  unsigned int *v119;
  uint64_t (**v120)();
  int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(unsigned int **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v119, a2);
  v7 = (std::exception_vtbl *)v119;
  if (v119)
  {
    v8 = v119 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v98.__vftable = v7;
    v121 = 0;
    v122 = 0;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
    if (v122)
      sub_1D3D6D13C(v122);
  }
  else
  {
    v98.__vftable = 0;
    v121 = 0;
    v122 = 0;
  }
  v122 = (unsigned int *)v7;
  v123 = 0;
  sub_1D3D6D10C((unsigned int **)&v98);
  v120 = &off_1E95AF670;
  sub_1D3D6D10C(&v119);
  v114 = *a4;
  v115 = *((_BYTE *)a4 + 16);
  v116 = 0;
  v11 = (unsigned int *)*((_QWORD *)a4 + 3);
  if (v11)
  {
    v12 = v11 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v116)
      sub_1D3D6D13C(v116);
  }
  v116 = v11;
  sub_1D3DE81D0((uint64_t)&v120, a3, (uint64_t)&v114, &v117);
  sub_1D3D7FBF4(&v116);
  v14 = v117;
  if (v118 != v117)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v14[v15];
      v98.__vftable = 0;
      v99 = 0;
      v100 = 0;
      sub_1D3D6D6A8((unsigned int *)&v98, *((unsigned int ***)v17 + 2), *((unsigned int ***)v17 + 3), (uint64_t)(*((_QWORD *)v17 + 3) - *((_QWORD *)v17 + 2)) >> 3);
      v18 = *((_QWORD *)v117[v15] + 8);
      if (v18)
      {
        v19 = (unsigned int *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v110 = (std::exception *)v18;
      v21 = *(_QWORD *)(v18 + 16);
      sub_1D3D6D10C((unsigned int **)&v110);
      v113 = 0;
      v22 = v98.__vftable;
      if (v99 - (unint64_t)v98.__vftable >= 0x19)
      {
        v23 = (unsigned int *)v98.__vftable[1].~exception;
        if (v23)
        {
          v24 = v23 + 2;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v113 = v23;
      }
      v26 = (unsigned int *)*((_QWORD *)v117[v15] + 9);
      if (v26)
      {
        v27 = v26 + 2;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v112 = v26;
      sub_1D3DB0904(&v110, ((v99 - (uint64_t)v22) >> 3) + 4);
      sub_1D3D8D5CC(__p, 8uLL);
      v29 = (char *)__p[0];
      *(_QWORD *)__p[0] = 0;
      *(float *)v30.i32 = (float)v21;
      *((_DWORD *)v29 + 2) = 0;
      *(int32x4_t *)(v29 + 12) = vdupq_lane_s32(v30, 0);
      *((_DWORD *)v29 + 7) = 0;
      (*(void (**)(unsigned int *, void **))(*(_QWORD *)v112 + 16))(v112, __p);
      for (i = 0; i != 4; ++i)
      {
        v32 = operator new();
        v33 = (std::exception_vtbl *)v32;
        v34 = __p[0];
        *(_DWORD *)(v32 + 8) = 0;
        v35 = (unsigned int *)(v32 + 8);
        *(_QWORD *)v32 = &off_1E95AF250;
        *(_QWORD *)(v32 + 12) = v34[i];
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v124[0] = (unsigned int *)v32;
        v37 = v110;
        do
          v38 = __ldxr(v35);
        while (__stxr(v38 + 1, v35));
        v39 = (unsigned int *)v37[i].__vftable;
        if (v39)
          sub_1D3D6D13C(v39);
        v37[i].__vftable = v33;
        sub_1D3D6D834(v124);
      }
      v40 = v98.__vftable;
      v41 = v110;
      v42 = v98.~exception;
      if (v98.~exception)
      {
        v43 = (unsigned int *)((char *)v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (unsigned int *)v41[4].__vftable;
      if (v45)
      {
        sub_1D3D6D13C(v45);
        v40 = v98.__vftable;
        v46 = v110;
      }
      else
      {
        v46 = v41;
      }
      v41[4].__vftable = (std::exception_vtbl *)v42;
      v47 = v40->~exception_0;
      if (v47)
      {
        v48 = (unsigned int *)((char *)v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = (unsigned int *)v46[5].__vftable;
      v51 = v46;
      if (v50)
      {
        sub_1D3D6D13C(v50);
        v40 = v98.__vftable;
        v51 = v110;
      }
      v46[5].__vftable = (std::exception_vtbl *)v47;
      what = v40->what;
      if (what)
      {
        v53 = (unsigned int *)((char *)what + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (unsigned int *)v51[6].__vftable;
      if (v55)
      {
        sub_1D3D6D13C(v55);
        v40 = v98.__vftable;
      }
      v51[6].__vftable = (std::exception_vtbl *)what;
      if ((unint64_t)(v99 - (_QWORD)v40) >= 0x19)
      {
        v56 = v110;
        v57 = v40[1].~exception;
        if (v57)
        {
          v58 = (unsigned int *)((char *)v57 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v60 = (unsigned int *)v56[7].__vftable;
        if (v60)
          sub_1D3D6D13C(v60);
        v56[7].__vftable = (std::exception_vtbl *)v57;
      }
      v61 = v117;
      v62 = v117[v15];
      v63 = *((_QWORD *)v62 + 10);
      if (v63)
      {
        v64 = (unsigned int *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v62 = v61[v15];
      }
      v108 = (uint64_t **)v63;
      v66 = *((unsigned __int8 *)v62 + 12);
      *((_DWORD *)sub_1D3D7F308((uint64_t **)(v63 + 96), 9, (unsigned int *)&unk_1D3E80D00) + 8) = v66;
      if (*((_DWORD *)sub_1D3D7F308(v108 + 12, 14, &dword_1D3E75664) + 8))
      {
        v67 = v110;
        v68 = (unsigned int *)v110[1].__vftable;
        if (v68)
        {
          v69 = v68 + 2;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v124[0] = v68;
        v71 = v67[3].__vftable;
        if (v71)
        {
          v72 = (unsigned int *)&v71->~exception_0;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        v74 = (unsigned int *)v67[1].__vftable;
        if (v74)
        {
          sub_1D3D6D13C(v74);
          v68 = v124[0];
        }
        v67[1].__vftable = v71;
        if (v68)
        {
          v75 = v68 + 2;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = (unsigned int *)v67[3].__vftable;
        if (v77)
          sub_1D3D6D13C(v77);
        v67[3].__vftable = (std::exception_vtbl *)v68;
        sub_1D3D6D834(v124);
        v78 = v110;
        v79 = (unsigned int *)v110[4].__vftable;
        if (v79)
        {
          v80 = v79 + 2;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        v124[0] = v79;
        v82 = v78[6].__vftable;
        if (v82)
        {
          v83 = (unsigned int *)&v82->~exception_0;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v85 = (unsigned int *)v78[4].__vftable;
        if (v85)
        {
          sub_1D3D6D13C(v85);
          v79 = v124[0];
        }
        v78[4].__vftable = v82;
        if (v79)
        {
          v86 = v79 + 2;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        v88 = (unsigned int *)v78[6].__vftable;
        if (v88)
          sub_1D3D6D13C(v88);
        v78[6].__vftable = (std::exception_vtbl *)v79;
        sub_1D3D6D834(v124);
      }
      v89 = (unsigned int *)operator new();
      v105 = 0;
      v106 = 0;
      v104 = 0;
      v103 = &off_1E95AF9B0;
      v90 = (unsigned int *)v108[4];
      if (v90)
      {
        v91 = v90 + 2;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        if (v105)
          sub_1D3D6D13C(v105);
      }
      v105 = v90;
      memset(v102, 0, sizeof(v102));
      sub_1D3D6D6A8((unsigned int *)v102, (unsigned int **)v110, v111, ((char *)v111 - (char *)v110) >> 3);
      sub_1D3D7F3AC((uint64_t)v101, v108 + 12);
      sub_1D3E17B10((uint64_t)v89, (uint64_t *)&v106, (uint64_t)&v103, v102, 1, v101);
      v93 = v89 + 2;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v107 = v89;
      sub_1D3D7F520((_QWORD *)v101[1]);
      v124[0] = (unsigned int *)v102;
      sub_1D3D6D79C((void ***)v124);
      sub_1D3D7F558(&v103);
      sub_1D3D7F598(&v106);
      v95 = *(_QWORD *)(a1 + 8);
      if (v95 >= *(_QWORD *)(a1 + 16))
      {
        v96 = sub_1D3D7F62C((unsigned int ***)a1, &v107);
      }
      else
      {
        sub_1D3D7F5C8((unsigned int *)a1, &v107);
        v96 = (unsigned int **)(v95 + 8);
      }
      *(_QWORD *)(a1 + 8) = v96;
      sub_1D3D7F7E4(&v107);
      sub_1D3D7F814((unsigned int **)&v108);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v110;
      sub_1D3D6D79C((void ***)__p);
      sub_1D3DB45E8(&v112);
      sub_1D3D6D834(&v113);
      v110 = &v98;
      sub_1D3D6D79C((void ***)&v110);
      v14 = v117;
      v15 = ++v16;
    }
    while (v16 < (unint64_t)(v118 - v117));
  }
  v98.__vftable = (std::exception_vtbl *)&v117;
  sub_1D3DE99A8((void ***)&v98);
  v120 = &off_1E95AF948;
  sub_1D3D7FBF4(&v123);
  return sub_1D3D6D10C(&v122);
}

void sub_1D3DF4DE4()
{
  JUMPOUT(0x1D3DF4DECLL);
}

void sub_1D3DF4E04()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = &off_1E95AF948;
  ((void (*)())sub_1D3D7FBF4)();
  sub_1D3D6D10C(v0 - 112);
  JUMPOUT(0x1D3DF4E54);
}

void sub_1D3DF4E0C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D6D10C((unsigned int **)va);
  JUMPOUT(0x1D3DF4E48);
}

void sub_1D3DF4E20()
{
  unsigned int **v0;

  sub_1D3D7FBF4(v0);
  JUMPOUT(0x1D3DF4E2CLL);
}

uint64_t sub_1D3DF4E68(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  CFTypeRef v4;
  const __CFAllocator *v6;
  const __CFString *v7;
  CFStringRef Copy;
  CFTypeRef v10;

  *(_QWORD *)a1 = a2;
  if (cf)
    v4 = CFRetain(cf);
  else
    v4 = 0;
  v10 = v4;
  if (atomic_load((unint64_t *)&v10))
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = (const __CFString *)atomic_load((unint64_t *)&v10);
    Copy = CFStringCreateCopy(v6, v7);
  }
  else
  {
    Copy = 0;
  }
  *(_QWORD *)(a1 + 8) = Copy;
  sub_1D3D8C70C((unint64_t *)&v10);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return a1;
}

void sub_1D3DF4F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DF4F24(unint64_t *a1)
{
  sub_1D3D8BAAC(a1 + 11);
  sub_1D3D8C70C(a1 + 10);
  sub_1D3DDCCEC(a1 + 9);
  sub_1D3D7448C(a1 + 8);
  sub_1D3D8C70C(a1 + 1);
  return a1;
}

uint64_t sub_1D3DF4F6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const __CFAllocator **v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  CFStringRef Copy;
  CFTypeRef v9;
  CFTypeRef v10;
  const __CFAllocator *v12;
  const __CFString *v13;
  CFStringRef v14;
  const __CFAllocator *v16;
  const __CFDictionary *v17;
  CFDictionaryRef v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = atomic_load((unint64_t *)(a2 + 8));
  v5 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v4)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = (const __CFString *)atomic_load((unint64_t *)(a2 + 8));
    Copy = CFStringCreateCopy(v6, v7);
  }
  else
  {
    Copy = 0;
  }
  *(_QWORD *)(a1 + 8) = Copy;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = (CFTypeRef)atomic_load((unint64_t *)(a2 + 64));
  if (v9)
    v9 = CFRetain(v9);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = (CFTypeRef)atomic_load((unint64_t *)(a2 + 72));
  if (v10)
    v10 = CFRetain(v10);
  *(_QWORD *)(a1 + 72) = v10;
  if (atomic_load((unint64_t *)(a2 + 80)))
  {
    v12 = *v5;
    v13 = (const __CFString *)atomic_load((unint64_t *)(a2 + 80));
    v14 = CFStringCreateCopy(v12, v13);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(a1 + 80) = v14;
  if (atomic_load((unint64_t *)(a2 + 88)))
  {
    v16 = *v5;
    v17 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 88));
    v18 = CFDictionaryCreateCopy(v16, v17);
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(a1 + 88) = v18;
  return a1;
}

void sub_1D3DF5078(_Unwind_Exception *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;

  sub_1D3D8C70C(v3);
  sub_1D3DDCCEC((unint64_t *)(v2 + 72));
  sub_1D3D7448C((unint64_t *)(v2 + 64));
  sub_1D3D8C70C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3DF50BC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = *a2;
  *a2 = -1;
  v3 = (unint64_t *)(a2 + 1);
  *result = v2;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(0, v3));
  result[1] = v4;
  v5 = a2[2];
  if ((v5 & 0xFF00000000) != 0)
    *((_BYTE *)a2 + 20) = 0;
  result[2] = v5;
  v6 = a2[3];
  if ((v6 & 0xFF00000000) != 0)
    *((_BYTE *)a2 + 28) = 0;
  result[3] = v6;
  v8 = a2[4];
  v7 = a2[5];
  if ((_BYTE)v7)
    *((_BYTE *)a2 + 40) = 0;
  result[4] = v8;
  result[5] = v7;
  v9 = a2[6];
  if ((v9 & 0xFF00000000) != 0)
    *((_BYTE *)a2 + 52) = 0;
  result[6] = v9;
  v10 = a2[7];
  if ((v10 & 0xFF00000000) != 0)
    *((_BYTE *)a2 + 60) = 0;
  result[7] = v10;
  v11 = (unint64_t *)(a2 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(0, v11));
  result[8] = v12;
  v13 = (unint64_t *)(a2 + 9);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(0, v13));
  result[9] = v14;
  v15 = (unint64_t *)(a2 + 10);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(0, v15));
  result[10] = v16;
  v17 = (unint64_t *)(a2 + 11);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(0, v17));
  result[11] = v18;
  return result;
}

void sub_1D3DF5198(uint64_t a1, int a2)
{
  unint64_t *v3;
  unint64_t v4;
  const void *v5;
  unint64_t *v6;
  const void *v7;
  CFErrorRef v8;

  if (a2)
  {
    v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFErrorDomain)*MEMORY[0x1E0C9AFD0], a2, 0);
    v3 = (unint64_t *)(a1 + 64);
    do
      v4 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    do
      v5 = (const void *)__ldaxr(v3);
    while (__stlxr(v4, v3));
    if (v5)
      CFRelease(v5);
    sub_1D3D7448C((unint64_t *)&v8);
  }
  else
  {
    v6 = (unint64_t *)(a1 + 64);
    do
      v7 = (const void *)__ldaxr(v6);
    while (__stlxr(0, v6));
    if (v7)
      CFRelease(v7);
  }
}

void sub_1D3DF5240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D7448C((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3DF5254(uint64_t a1, int a2)
{
  unint64_t *v3;
  unint64_t v4;
  const void *v5;
  unint64_t *v6;
  const void *v7;
  CFErrorRef v8;

  if (a2)
  {
    v8 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFErrorDomain)*MEMORY[0x1E0C9AFC8], a2, 0);
    v3 = (unint64_t *)(a1 + 64);
    do
      v4 = __ldaxr((unint64_t *)&v8);
    while (__stlxr(0, (unint64_t *)&v8));
    do
      v5 = (const void *)__ldaxr(v3);
    while (__stlxr(v4, v3));
    if (v5)
      CFRelease(v5);
    sub_1D3D7448C((unint64_t *)&v8);
  }
  else
  {
    v6 = (unint64_t *)(a1 + 64);
    do
      v7 = (const void *)__ldaxr(v6);
    while (__stlxr(0, v6));
    if (v7)
      CFRelease(v7);
  }
}

void sub_1D3DF52FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D7448C((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3DF5310(uint64_t a1, uint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  const void *v5;
  unint64_t *v6;
  const void *v7;
  CFStringRef v8;

  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      goto LABEL_13;
    a2 = (uint64_t *)*a2;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
LABEL_13:
    v6 = (unint64_t *)(a1 + 80);
    do
      v7 = (const void *)__ldaxr(v6);
    while (__stlxr(0, v6));
    if (v7)
      CFRelease(v7);
    return;
  }
  v8 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)a2);
  v3 = (unint64_t *)(a1 + 80);
  do
    v4 = __ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));
  do
    v5 = (const void *)__ldaxr(v3);
  while (__stlxr(v4, v3));
  if (v5)
    CFRelease(v5);
  sub_1D3D8C70C((unint64_t *)&v8);
}

void sub_1D3DF53B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3DF53CC(CFErrorRef *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *v6;
  const void *v7;
  const void *v8;
  __CFDictionary *v9;
  const void *v10;
  __CFDictionary *v11;
  const void *v12;
  __CFDictionary *v13;
  const void *v14;
  __CFDictionary *v15;
  const void *v16;
  __CFDictionary *v17;
  const char *v18;
  const void *v19;
  __CFDictionary *v20;
  const void *v21;
  __CFDictionary *v23;
  const void *v24;
  const void *v25;
  __CFDictionary *v27;
  const void *v28;
  const void *v29;
  __CFDictionary *v31;
  const void *v32;
  const void *v33;
  const __CFDictionary *v35;
  void *v36;
  CFIndex v37;
  const __CFDictionary *v38;
  CFNumberRef v40;
  CFMutableDictionaryRef Mutable;
  void *valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (atomic_load((unint64_t *)(a2 + 8)))
  {
    v6 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v7 = (const void *)*MEMORY[0x1E0C9AFB0];
    v8 = (const void *)atomic_load((unint64_t *)(a2 + 8));
    CFDictionarySetValue(v6, v7, v8);
  }
  if (*(_BYTE *)(a2 + 20) && *(_DWORD *)(a2 + 16))
  {
    valuePtr = CFNumberCreate(v4, kCFNumberIntType, (const void *)(a2 + 16));
    v9 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v10 = (const void *)atomic_load((unint64_t *)&valuePtr);
    CFDictionarySetValue(v9, CFSTR("MRCErrorACBSReturnKey"), v10);
    sub_1D3D74100((unint64_t *)&valuePtr);
  }
  if (*(_BYTE *)(a2 + 28) && *(_DWORD *)(a2 + 24))
  {
    valuePtr = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 24));
    v11 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v12 = (const void *)atomic_load((unint64_t *)&valuePtr);
    CFDictionarySetValue(v11, CFSTR("MRCErrorCVReturnKey"), v12);
    sub_1D3D74100((unint64_t *)&valuePtr);
  }
  if (*(_BYTE *)(a2 + 40) && *(_QWORD *)(a2 + 32))
  {
    valuePtr = CFNumberCreate(v4, kCFNumberCFIndexType, (const void *)(a2 + 32));
    v13 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v14 = (const void *)atomic_load((unint64_t *)&valuePtr);
    CFDictionarySetValue(v13, CFSTR("MRCErrorvImaggeErrorKey"), v14);
    sub_1D3D74100((unint64_t *)&valuePtr);
  }
  if (*(_BYTE *)(a2 + 52) && *(_DWORD *)(a2 + 48))
  {
    v15 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    valuePtr = (void *)*(unsigned int *)(a2 + 48);
    v40 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
    v16 = (const void *)atomic_load((unint64_t *)&v40);
    CFDictionarySetValue(v15, CFSTR("MRCErrorE5RTErrorCodeKey"), v16);
    sub_1D3D74100((unint64_t *)&v40);
    v17 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    LODWORD(v40) = *(_DWORD *)(a2 + 48);
    v18 = sub_1D3D82AEC((unsigned int *)&v40);
    valuePtr = (void *)CFStringCreateWithCStringNoCopy(v4, v18, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v19 = (const void *)atomic_load((unint64_t *)&valuePtr);
    CFDictionarySetValue(v17, CFSTR("MRCErrorE5RTErrorCodeStringKey"), v19);
    sub_1D3D8C70C((unint64_t *)&valuePtr);
  }
  if (*(_BYTE *)(a2 + 60) && *(_DWORD *)(a2 + 56))
  {
    v20 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    LODWORD(v40) = *(_DWORD *)(a2 + 56);
    valuePtr = CFNumberCreate(v4, kCFNumberSInt32Type, &v40);
    v21 = (const void *)atomic_load((unint64_t *)&valuePtr);
    CFDictionarySetValue(v20, CFSTR("MRCErrorKernReturnKey"), v21);
    sub_1D3D74100((unint64_t *)&valuePtr);
  }
  if (atomic_load((unint64_t *)(a2 + 64)))
  {
    v23 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v24 = (const void *)*MEMORY[0x1E0C9B000];
    v25 = (const void *)atomic_load((unint64_t *)(a2 + 64));
    CFDictionarySetValue(v23, v24, v25);
  }
  if (atomic_load((unint64_t *)(a2 + 72)))
  {
    v27 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v28 = (const void *)*MEMORY[0x1E0C9AFF8];
    v29 = (const void *)atomic_load((unint64_t *)(a2 + 72));
    CFDictionarySetValue(v27, v28, v29);
  }
  if (atomic_load((unint64_t *)(a2 + 80)))
  {
    v31 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v32 = (const void *)*MEMORY[0x1E0C9AFD8];
    v33 = (const void *)atomic_load((unint64_t *)(a2 + 80));
    CFDictionarySetValue(v31, v32, v33);
  }
  if (atomic_load((unint64_t *)(a2 + 88)))
  {
    v35 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 88));
    v36 = (void *)atomic_load((unint64_t *)&Mutable);
    CFDictionaryApplyFunction(v35, (CFDictionaryApplierFunction)sub_1D3DF5758, v36);
  }
  v37 = *(_QWORD *)a2;
  v38 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
  *a1 = CFErrorCreate(v4, CFSTR("MRCErrorDomain"), v37, v38);
  return sub_1D3D740C8((unint64_t *)&Mutable);
}

void sub_1D3DF56F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  sub_1D3D74100((unint64_t *)va1);
  sub_1D3D740C8((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3DF5758(void *key, const void *a2, CFDictionaryRef theDict)
{
  NSObject *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (CFDictionaryGetValue(theDict, key))
  {
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v6 = qword_1EDB89E38;
    if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_DEBUG))
    {
      v7 = 138543362;
      v8 = key;
      _os_log_debug_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_DEBUG, "MRCError: extraUserInfo: key \"%{public}@\" already exists, skipping...", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    CFDictionarySetValue(theDict, key, a2);
  }
}

unsigned int **sub_1D3DF5878(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

uint64_t sub_1D3DF58A8(uint64_t a1)
{
  unsigned int **v2;

  *(_QWORD *)a1 = &off_1E95AF878;
  v2 = (unsigned int **)(a1 + 16);
  sub_1D3DF5878((unsigned int **)(a1 + 32));
  sub_1D3D6D10C(v2);
  return a1;
}

void sub_1D3DF58E8(uint64_t a1)
{
  unsigned int **v1;

  *(_QWORD *)a1 = &off_1E95AF878;
  v1 = (unsigned int **)(a1 + 16);
  sub_1D3DF5878((unsigned int **)(a1 + 32));
  sub_1D3D6D10C(v1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3DF5938(uint64_t a1, uint64_t *a2)
{
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *exception;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E95AF878;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (unsigned int **)(a1 + 16);
  v5 = *a2;
  if (*a2)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    if (*v4)
      sub_1D3D6D13C(*v4);
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_QWORD *)(*a2 + 16) < 0x15uLL || (*(_QWORD *)(*a2 + 16) & 3) != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "Dimension must be 1 mod 4 and >= 21");
    *exception = &off_1E95AF388;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  return a1;
}

void sub_1D3DF5A08(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;

  sub_1D3DF5878((unsigned int **)(v1 + 32));
  sub_1D3D6D10C(v2);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DF5A34(unsigned int **result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t i;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  _QWORD *exception;
  unsigned int **v57;
  unsigned int v58;
  unsigned int *v59;
  int v60;
  unsigned int *v61;
  int v62;
  unsigned int *v63;
  int v64;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    v3 = v2 + 2;
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    *result = v2;
  }
  else
  {
    v57 = result;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD **)(a2 + 16);
    do
      v7 = sub_1D3D6D4A0(v8, v6++, 8) | (2 * v7);
    while (v6 != 6);
    v10 = v8[3];
    v9 = v8[4];
    v11 = v8[6];
    v12 = v8[7];
    v13 = -v12;
    v14 = (v9 - 8) & -v12;
    LOBYTE(v12) = v12 - 1;
    v15 = v8[2];
    v16 = (v15 - 9) & v13;
    v17 = (v16 | v12 & 7) + (v14 | v12 & 8) * v10;
    v18 = (4 * v7) | (2 * ((*(_DWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v17) & 1));
    v19 = (v9 - 9) & v13;
    v20 = (v16 | v12 & 8) + (v19 | v12 & 8) * v10;
    v21 = v18 & 0xFFFFFFFE | (*(_DWORD *)(v11 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v20) & 1;
    v22 = ((v15 - 8) & v13 | v12 & 8) + (v19 | v12 & 7) * v10;
    v23 = (*(_DWORD *)(v11 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v22) & 1 | (2 * v21);
    v24 = ((v15 - 6) & v13 | v12 & 8) + (v19 | v12 & 5) * v10;
    v25 = (*(_DWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v24) & 1;
    for (i = 4; ; --i)
    {
      v27 = v25 & 1 | (2 * v23);
      if (i == -1)
        break;
      LOBYTE(v25) = sub_1D3D6D4A0(v8, 8, i);
      v23 = v27;
    }
    v28 = 0;
    v29 = 65793
        * (((2 * ((unsigned __int16)v23 >> 7)) | ((2 * v23) >> 8 << 11)) & 0x22110 | ((32 * ((unsigned __int16)v23 >> 7)) | ((2 * v23) >> 8 << 15)) & 0x88440);
    v58 = (65793
         * (((2 * (v25 & 1 | (2 * v23))) | ((v25 & 1 | (2 * v23)) << 11)) & 0x22110 | ((32 * (v25 & 1 | (2 * v23))) | ((v25 & 1 | (2 * v23)) << 15)) & 0x88440u)) >> 9;
    v30 = v15 << 32;
    v31 = ((v15 << 32) - 0x100000000) >> 32;
    v32 = (v15 << 32) - 0x700000000;
    v33 = v31;
    v34 = v32 >> 32;
    do
    {
      v28 = sub_1D3D6D4A0(v8, 8, v33) | (2 * v28);
      v35 = v33-- <= v34;
    }
    while (!v35);
    v36 = (v29 >> 17) & 0x7F;
    v37 = (v30 - 0x800000000) >> 32;
    v38 = v30 >> 32;
    v39 = v37;
    do
      v28 = sub_1D3D6D4A0(v8, v39++, 8) | (2 * v28);
    while (v39 < v38);
    v40 = 0;
    do
    {
      v40 = sub_1D3D6D4A0(v8, v31, 8) | (2 * v40);
      v35 = v31-- <= v34;
    }
    while (!v35);
    do
      v40 = sub_1D3D6D4A0(v8, 8, v37++) | (2 * v40);
    while (v37 < v38);
    v63 = 0;
    v64 = 0;
    v61 = 0;
    v62 = 0;
    sub_1D3E0D420((uint64_t)&v59, v27, v28);
    v41 = v59;
    if (v59)
    {
      v42 = v59 + 2;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    if (v63)
      sub_1D3D6D13C(v63);
    v63 = v41;
    v64 = v60;
    sub_1D3DF5878(&v59);
    sub_1D3E0D420((uint64_t)&v59, v36 | v58 & 0x7F80, v40);
    v44 = v59;
    if (v59)
    {
      v45 = v59 + 2;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    if (v61)
      sub_1D3D6D13C(v61);
    v61 = v44;
    v62 = v60;
    sub_1D3DF5878(&v59);
    v47 = v63;
    if (v63)
    {
      v48 = v63 + 2;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = *(unsigned int **)(a2 + 32);
    if (v50)
      sub_1D3D6D13C(v50);
    *(_QWORD *)(a2 + 32) = v47;
    if (v62 < v64)
    {
      v51 = v61;
      if (v61)
      {
        v52 = v61 + 2;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        v47 = *(unsigned int **)(a2 + 32);
      }
      if (v47)
        sub_1D3D6D13C(v47);
      *(_QWORD *)(a2 + 32) = v51;
      *(_BYTE *)(a2 + 40) = 1;
      v47 = v51;
    }
    if (!v47)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_1D3DDE1A0(exception, "Could not decode format information");
      *exception = &off_1E95AF388;
      __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
    }
    v54 = v47 + 2;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    *v57 = v47;
    sub_1D3DF5878(&v61);
    return sub_1D3DF5878(&v63);
  }
  return result;
}

void sub_1D3DF5EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned int *a13, uint64_t a14, unsigned int *a15)
{
  void *v15;

  __cxa_free_exception(v15);
  sub_1D3DF5878(&a13);
  sub_1D3DF5878(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF5EEC(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *exception;

  result = *(_QWORD *)(a1 + 24);
  if (!result)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = v3[2];
    if ((int)v4 >= 45)
    {
      v5 = 0;
      v6 = ((v4 << 32) - 0xB00000000) >> 32;
      v7 = 5;
      do
      {
        v8 = v7;
        v9 = ((v4 << 32) - 0x900000000) >> 32;
        do
        {
          v5 = sub_1D3D6D4A0(v3, v9, v8) | (2 * v5);
          v10 = v9-- <= v6;
        }
        while (!v10);
        v7 = v8 - 1;
      }
      while (v8);
      result = sub_1D3E16240(v5);
      *(_QWORD *)(a1 + 24) = result;
      if (!result || 4 * *(_DWORD *)(result + 12) + 17 != (_DWORD)v4)
      {
        v11 = 0;
        v12 = *(_QWORD **)(a1 + 16);
        v13 = 5;
        do
        {
          v14 = v13;
          v15 = ((v4 << 32) - 0x900000000) >> 32;
          do
          {
            v11 = sub_1D3D6D4A0(v12, v14, v15) | (2 * v11);
            v10 = v15-- <= v6;
          }
          while (!v10);
          v13 = v14 - 1;
        }
        while (v14);
        result = sub_1D3E16240(v11);
        *(_QWORD *)(a1 + 24) = result;
        if (!result || 4 * *(_DWORD *)(result + 12) + 17 != (_DWORD)v4)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          sub_1D3E17508(exception, "Could not decode version");
          __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
        }
      }
    }
    else
    {
      return sub_1D3E0F438(((int)v4 - 17) >> 2);
    }
  }
  return result;
}

void sub_1D3DF606C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF6080(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
    free(*(void **)(a1 + 32));
  return a1;
}

void sub_1D3DF60B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
    free(*(void **)(a1 + 32));
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DF60F0(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  __CVBuffer *v3;
  OSType PixelFormatType;
  BOOL v5;
  _BOOL8 result;

  v2 = atomic_load(a2);
  result = 0;
  if (v2)
  {
    v3 = (__CVBuffer *)atomic_load(a2);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v3);
    v5 = PixelFormatType == 875704422 || PixelFormatType == 1278226488;
    if (v5 || PixelFormatType == 875704438)
      return 1;
  }
  return result;
}

uint64_t sub_1D3DF6144(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_1D3DF614C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  vImagePixelCount v10;
  vImagePixelCount v11;
  int v12;
  vImage_Error v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v19;
  NSObject *v20;
  vImagePixelCount v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  _BYTE buf[12];
  __int16 v27;
  vImagePixelCount v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 64))
  {
    v38 = v37;
    v35[0] = &off_1E95AD578;
    v36 = v35;
    v37[0] = &off_1E95AD520;
    v41 = v40;
    v39 = a3;
    v40[0] = &off_1E95AD578;
    if (!*(_BYTE *)(a3 + 8)
      || (*(_QWORD *)buf = *(_QWORD *)a3, sub_1D3DF75A8(a1, (os_signpost_id_t *)buf), v6 = v36, v36 == v35))
    {
      v7 = 4;
      v6 = v35;
    }
    else
    {
      if (!v36)
        goto LABEL_9;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
    v8 = v38;
    if (v38 == v37)
    {
      v9 = 4;
      v8 = v37;
    }
    else
    {
      if (!v38)
      {
LABEL_14:
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        if (!v10 || (v10 & 0xF) != 0 || !v11 || (v11 & 0xF) != 0)
        {
          if (qword_1EFE31860 != -1)
            dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
          v15 = qword_1EFE31858;
          if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v10;
            v27 = 2050;
            v28 = v11;
            _os_log_error_impl(&dword_1D3D6B000, v15, OS_LOG_TYPE_ERROR, "Invalid image size: width=%{public}zu, height=%{public}zu", buf, 0x16u);
          }
          v25 = CFSTR("Invalid image size.");
          *(_QWORD *)buf = -6008;
          sub_1D3D73E0C((unint64_t *)a2, (uint64_t *)buf, (CFTypeRef *)&v25);
        }
        else
        {
          v12 = *(_DWORD *)(a1 + 24);
          if (v12 == 1278226488)
          {
            v3 = 1;
            if (!*(_BYTE *)(a1 + 64))
            {
              *(_OWORD *)(a1 + 32) = 0u;
              *(_OWORD *)(a1 + 48) = 0u;
              *(_BYTE *)(a1 + 64) = 1;
              v13 = vImageBuffer_Init((vImage_Buffer *)(a1 + 32), v11, v10, 8u, 0);
              if (v13)
              {
                if (*(_BYTE *)(a1 + 64))
                  *(_BYTE *)(a1 + 64) = 0;
                if (qword_1EFE31860 != -1)
                  dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
                v14 = qword_1EFE31858;
                if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v13;
                  _os_log_error_impl(&dword_1D3D6B000, v14, OS_LOG_TYPE_ERROR, "vImageBuffer_Init failed: %{public}zd", buf, 0xCu);
                }
                v25 = CFSTR("vImageBuffer_Init failed.");
                *(_QWORD *)buf = -2003;
                sub_1D3D73E0C((unint64_t *)a2, (uint64_t *)buf, (CFTypeRef *)&v25);
                v3 = 0;
                *(_QWORD *)(a2 + 32) = v13;
                *(_BYTE *)(a2 + 40) = 1;
              }
              else
              {
                if (qword_1EFE31860 != -1)
                  dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
                v20 = qword_1EFE31858;
                if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG))
                {
                  v21 = *(_QWORD *)(a1 + 32);
                  v22 = *(_QWORD *)(a1 + 40);
                  v23 = *(_QWORD *)(a1 + 48);
                  v24 = *(_QWORD *)(a1 + 56);
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "420Yp8";
                  v27 = 2050;
                  v28 = v21;
                  v29 = 2050;
                  v30 = v22;
                  v31 = 2050;
                  v32 = v23;
                  v33 = 2050;
                  v34 = v24;
                  _os_log_debug_impl(&dword_1D3D6B000, v20, OS_LOG_TYPE_DEBUG, "Allocated %{public}s image buffer: data=%{public}p, height=%{public}zu, width=%{public}zu, rowBytes=%{public}zu", buf, 0x34u);
                }
              }
            }
LABEL_34:
            v16 = v41;
            if (*(_BYTE *)(v39 + 8))
            {
              if (!v41)
                return v3;
              *(_QWORD *)buf = *(_QWORD *)v39;
              (*(void (**)(_QWORD *, _BYTE *))(*v41 + 48))(v41, buf);
              v16 = v41;
            }
            if (v16 == v40)
            {
              v17 = 4;
              v16 = v40;
            }
            else
            {
              if (!v16)
                return v3;
              v17 = 5;
            }
            (*(void (**)(void))(*v16 + 8 * v17))();
            return v3;
          }
          if (qword_1EFE31860 != -1)
            dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
          v19 = qword_1EFE31858;
          if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v12;
            _os_log_error_impl(&dword_1D3D6B000, v19, OS_LOG_TYPE_ERROR, "Unsupported pixel format type: %{public}u", buf, 8u);
          }
          v25 = CFSTR("Unsupported pixel format type.");
          *(_QWORD *)buf = -6008;
          sub_1D3D73E0C((unint64_t *)a2, (uint64_t *)buf, (CFTypeRef *)&v25);
        }
        v3 = 0;
        goto LABEL_34;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_14;
  }
  return 1;
}

void sub_1D3DF65D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3D87C3C((_QWORD *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DF6604(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  __CVBuffer *v15;
  OSType PixelFormatType;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  __CVBuffer *v26;
  __CVBuffer *v27;
  int IsPlanar;
  __CVBuffer *v29;
  void *BaseAddressOfPlane;
  __CVBuffer *v31;
  vImagePixelCount HeightOfPlane;
  __CVBuffer *v33;
  vImagePixelCount WidthOfPlane;
  __CVBuffer *v35;
  size_t BytesPerRowOfPlane;
  __CVBuffer *v37;
  __CVBuffer *v38;
  __CVBuffer *v39;
  size_t v40;
  vImagePixelCount v41;
  char *v42;
  vImagePixelCount v43;
  size_t v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  __int128 v48;
  unint64_t height;
  unint64_t width;
  vImage_Error v51;
  NSObject *v52;
  NSObject *v53;
  vImagePixelCount v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __CVBuffer *v60;
  OSType v61;
  size_t v62;
  vImagePixelCount v63;
  void *v64;
  const __CFString *v65;
  vImage_Buffer src;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[3];
  _QWORD *v73;
  _BYTE v74[12];
  vImage_Buffer buf;
  __int16 v76;
  vImagePixelCount v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  const __CFString *v82;
  _QWORD v83[3];
  _QWORD *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 64))
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v12 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.data) = 0;
      _os_log_error_impl(&dword_1D3D6B000, v12, OS_LOG_TYPE_ERROR, "IIEImagePreprocessor is not ready.", (uint8_t *)&buf, 2u);
    }
    buf.data = (void *)-6008;
    v82 = CFSTR("IIEImagePreprocessor is not ready.");
    sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)&buf, (CFTypeRef *)&v82);
    return 0;
  }
  v70 = v69;
  v71 = a4;
  v67[0] = &off_1E95AD4C8;
  v68 = v67;
  v69[0] = &off_1E95AD470;
  v73 = v72;
  v72[0] = &off_1E95AD4C8;
  if (!*(_BYTE *)(a4 + 8)
    || (buf.data = *(void **)a4, sub_1D3DF70C8(a1, (os_signpost_id_t *)&buf), v8 = v68, v68 == v67))
  {
    v9 = 4;
    v8 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  v10 = v70;
  if (v70 == v69)
  {
    v11 = 4;
    v10 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_18;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
  if (atomic_load(a2))
  {
    v15 = (__CVBuffer *)atomic_load(a2);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v15);
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438 || PixelFormatType == 1278226488)
    {
      v17 = sub_1D3DE79DC(a2, a3);
      if ((v17 & 1) != 0)
      {
        v81 = v80;
        v82 = (const __CFString *)a4;
        v78[0] = &off_1E95AD418;
        v79 = v78;
        v80[0] = &off_1E95AD3C0;
        v84 = v83;
        v83[0] = &off_1E95AD418;
        if (!*(_BYTE *)(a4 + 8)
          || (buf.data = *(void **)a4, sub_1D3DF7168(v17, (os_signpost_id_t *)&buf), v18 = v79, v79 == v78))
        {
          v19 = 4;
          v18 = v78;
        }
        else
        {
          if (!v79)
            goto LABEL_44;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_44:
        v24 = v81;
        if (v81 == v80)
        {
          v25 = 4;
          v24 = v80;
        }
        else
        {
          if (!v81)
            goto LABEL_49;
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_49:
        v26 = (__CVBuffer *)atomic_load(a2);
        CVPixelBufferGetPixelFormatType(v26);
        v27 = (__CVBuffer *)atomic_load(a2);
        IsPlanar = CVPixelBufferIsPlanar(v27);
        v29 = (__CVBuffer *)atomic_load(a2);
        if (IsPlanar)
        {
          BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v29, 0);
          v31 = (__CVBuffer *)atomic_load(a2);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(v31, 0);
          v33 = (__CVBuffer *)atomic_load(a2);
          WidthOfPlane = CVPixelBufferGetWidthOfPlane(v33, 0);
          v35 = (__CVBuffer *)atomic_load(a2);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v35, 0);
        }
        else
        {
          BaseAddressOfPlane = CVPixelBufferGetBaseAddress(v29);
          v37 = (__CVBuffer *)atomic_load(a2);
          HeightOfPlane = CVPixelBufferGetHeight(v37);
          v38 = (__CVBuffer *)atomic_load(a2);
          WidthOfPlane = CVPixelBufferGetWidth(v38);
          v39 = (__CVBuffer *)atomic_load(a2);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v39);
        }
        v40 = BytesPerRowOfPlane;
        if (*(_BYTE *)(a1 + 104))
        {
          v64 = BaseAddressOfPlane;
          v42 = *(char **)(a1 + 72);
          v41 = *(_QWORD *)(a1 + 80);
          if ((unint64_t)v42 > v41
            || v41 > WidthOfPlane
            || (v44 = *(_QWORD *)(a1 + 88), v43 = *(_QWORD *)(a1 + 96), v44 > v43)
            || v43 > HeightOfPlane)
          {
            if (qword_1EFE31860 != -1)
              dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
            v46 = qword_1EFE31858;
            if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
            {
              v62 = *(_QWORD *)(a1 + 88);
              v63 = *(_QWORD *)(a1 + 96);
              LODWORD(buf.data) = 134349824;
              *(void **)((char *)&buf.data + 4) = v42;
              WORD2(buf.height) = 2050;
              *(vImagePixelCount *)((char *)&buf.height + 6) = v41;
              HIWORD(buf.width) = 2050;
              buf.rowBytes = v62;
              v76 = 2050;
              v77 = v63;
              _os_log_error_impl(&dword_1D3D6B000, v46, OS_LOG_TYPE_ERROR, "Invalid cropRect: xStart=%{public}zu, xEnd=%{public}zu, yStart=%{public}zu, yEnd=%{public}zu", (uint8_t *)&buf, 0x2Au);
            }
            buf.data = (void *)-6008;
            *(_QWORD *)v74 = CFSTR("Invalid cropRect.");
            sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)&buf, (CFTypeRef *)v74);
            v13 = 0;
            goto LABEL_97;
          }
          if (qword_1EFE31860 != -1)
            dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
          v45 = qword_1EFE31858;
          if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.data) = 134349824;
            *(void **)((char *)&buf.data + 4) = v42;
            WORD2(buf.height) = 2050;
            *(vImagePixelCount *)((char *)&buf.height + 6) = v41;
            HIWORD(buf.width) = 2050;
            buf.rowBytes = v44;
            v76 = 2050;
            v77 = v43;
            _os_log_debug_impl(&dword_1D3D6B000, v45, OS_LOG_TYPE_DEBUG, "cropRect: xStart=%{public}zu, xEnd=%{public}zu, yStart=%{public}zu, yEnd=%{public}zu", (uint8_t *)&buf, 0x2Au);
            v44 = *(_QWORD *)(a1 + 88);
            v43 = *(_QWORD *)(a1 + 96);
            v42 = *(char **)(a1 + 72);
            v41 = *(_QWORD *)(a1 + 80);
          }
          HeightOfPlane = v43 - v44;
          src.data = &v42[v44 * v40 + (_QWORD)v64];
          src.height = v43 - v44;
          WidthOfPlane = v41 - (_QWORD)v42;
          src.width = v41 - (_QWORD)v42;
        }
        else
        {
          if (qword_1EFE31860 != -1)
            dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
          v47 = qword_1EFE31858;
          if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.data) = 0;
            _os_log_debug_impl(&dword_1D3D6B000, v47, OS_LOG_TYPE_DEBUG, "cropRect: not set", (uint8_t *)&buf, 2u);
          }
          src.data = BaseAddressOfPlane;
          src.height = HeightOfPlane;
          src.width = WidthOfPlane;
        }
        src.rowBytes = v40;
        v48 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&buf.data = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&buf.width = v48;
        if (HeightOfPlane <= WidthOfPlane)
        {
          width = buf.width;
          height = vcvtas_u32_f32((float)((float)buf.width / (float)WidthOfPlane) * (float)HeightOfPlane);
          buf.height = height;
        }
        else
        {
          height = buf.height;
          width = vcvtas_u32_f32((float)((float)buf.height / (float)HeightOfPlane) * (float)WidthOfPlane);
          buf.width = width;
        }
        if (WidthOfPlane == width && HeightOfPlane == height)
        {
          v51 = vImageCopyBuffer(&src, &buf, 1uLL, 0);
          if (v51)
          {
            if (qword_1EFE31860 != -1)
              dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
            v52 = qword_1EFE31858;
            if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v74 = 134349056;
              *(_QWORD *)&v74[4] = v51;
              _os_log_error_impl(&dword_1D3D6B000, v52, OS_LOG_TYPE_ERROR, "vImageCopyBuffer failed: %{public}zd", v74, 0xCu);
            }
            *(_QWORD *)v74 = -6008;
            v65 = CFSTR("vImageCopyBuffer failed.");
            sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)v74, (CFTypeRef *)&v65);
LABEL_89:
            v13 = 0;
            *(_QWORD *)(a3 + 32) = v51;
            *(_BYTE *)(a3 + 40) = 1;
            goto LABEL_97;
          }
        }
        else
        {
          v51 = vImageScale_Planar8(&src, &buf, 0, 0);
          if (v51)
          {
            if (qword_1EFE31860 != -1)
              dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
            v53 = qword_1EFE31858;
            if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v74 = 134349056;
              *(_QWORD *)&v74[4] = v51;
              _os_log_error_impl(&dword_1D3D6B000, v53, OS_LOG_TYPE_ERROR, "vImageScale_Planar8 failed: %{public}zd", v74, 0xCu);
            }
            *(_QWORD *)v74 = -2004;
            v65 = CFSTR("vImageScale_Planar8 failed.");
            sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)v74, (CFTypeRef *)&v65);
            goto LABEL_89;
          }
          if (HeightOfPlane <= WidthOfPlane)
          {
            bzero((char *)buf.data + buf.rowBytes * buf.height, (*(_QWORD *)(a1 + 40) - buf.height) * buf.rowBytes);
          }
          else if (buf.height)
          {
            v54 = 0;
            do
              bzero((char *)buf.data + buf.width + buf.rowBytes * v54++, *(_QWORD *)(a1 + 48) - buf.width);
            while (v54 < buf.height);
          }
        }
        v13 = 1;
LABEL_97:
        v55 = v84;
        if (LOBYTE(v82->info))
        {
          if (!v84)
            goto LABEL_105;
          buf.data = v82->isa;
          (*(void (**)(_QWORD *, vImage_Buffer *))(*v84 + 48))(v84, &buf);
          v55 = v84;
        }
        if (v55 == v83)
        {
          v56 = 4;
          v55 = v83;
          goto LABEL_104;
        }
        if (v55)
        {
          v56 = 5;
LABEL_104:
          (*(void (**)(void))(*v55 + 8 * v56))();
        }
LABEL_105:
        sub_1D3DE793C(a2, a3);
        goto LABEL_106;
      }
      if (qword_1EFE31860 != -1)
        dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
      v21 = qword_1EFE31858;
      if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
      {
        v22 = *(_DWORD *)(a3 + 24);
        LODWORD(buf.data) = 67240192;
        HIDWORD(buf.data) = v22;
        _os_log_error_impl(&dword_1D3D6B000, v21, OS_LOG_TYPE_ERROR, "CVPixelBufferLockBaseAddress failed: %{public}d", (uint8_t *)&buf, 8u);
      }
    }
    else
    {
      if (qword_1EFE31860 != -1)
        dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
      v23 = qword_1EFE31858;
      if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
      {
        v60 = (__CVBuffer *)atomic_load(a2);
        v61 = CVPixelBufferGetPixelFormatType(v60);
        LODWORD(buf.data) = 67240192;
        HIDWORD(buf.data) = v61;
        _os_log_error_impl(&dword_1D3D6B000, v23, OS_LOG_TYPE_ERROR, "Unsupported pixel format: %{public}u", (uint8_t *)&buf, 8u);
      }
      buf.data = (void *)-2001;
      v82 = CFSTR("Unsupported pixel format.");
      sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)&buf, (CFTypeRef *)&v82);
    }
  }
  else
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v20 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.data) = 0;
      _os_log_error_impl(&dword_1D3D6B000, v20, OS_LOG_TYPE_ERROR, "Missing pixel buffer.", (uint8_t *)&buf, 2u);
    }
    buf.data = (void *)-6008;
    v82 = CFSTR("Missing pixel buffer.");
    sub_1D3D73E0C((unint64_t *)a3, (uint64_t *)&buf, (CFTypeRef *)&v82);
  }
  v13 = 0;
LABEL_106:
  v57 = v73;
  if (*(_BYTE *)(v71 + 8))
  {
    if (!v73)
      return v13;
    buf.data = *(void **)v71;
    (*(void (**)(void))(*v73 + 48))();
    v57 = v73;
  }
  if (v57 == v72)
  {
    v58 = 4;
    v57 = v72;
    goto LABEL_113;
  }
  if (v57)
  {
    v58 = 5;
LABEL_113:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  return v13;
}

void sub_1D3DF7058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  sub_1D3D87C3C((_QWORD *)(v28 - 144));
  sub_1D3D95674((uint64_t)&a12);
  sub_1D3D87C3C(&a28);
  _Unwind_Resume(a1);
}

void sub_1D3DF70C8(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEImagePreprocessor::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DF7168(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEImagePreprocessor::resampleIfNeeded_", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DF720C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF7220()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD418;
  return result;
}

void sub_1D3DF7244(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD418;
}

void sub_1D3DF725C(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEImagePreprocessor::resampleIfNeeded_", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF72FC(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor17resampleIfNeeded_ERKNS_6Sample11PixelBufferERKNS3_21ScopedPixelBufferLockILb1EEERNSt3__18optionalINS_5ErrorEEERKNSC_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF7334()
{
  return &unk_1E95ACF28;
}

void sub_1D3DF7344()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF7358()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD3C0;
  return result;
}

void sub_1D3DF737C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD3C0;
}

uint64_t sub_1D3DF7394(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor17resampleIfNeeded_ERKNS_6Sample11PixelBufferERKNS3_21ScopedPixelBufferLockILb1EEERNSt3__18optionalINS_5ErrorEEERKNSC_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF73CC()
{
  return &unk_1E95ACF18;
}

void sub_1D3DF73DC()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF73F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD4C8;
  return result;
}

void sub_1D3DF7414(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD4C8;
}

void sub_1D3DF742C(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEImagePreprocessor::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF74CC(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor3runERKNS_6Sample11PixelBufferERNSt3__18optionalINS_5ErrorEEERKNS8_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF7504()
{
  return &unk_1E95ACF48;
}

void sub_1D3DF7514()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF7528()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD470;
  return result;
}

void sub_1D3DF754C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD470;
}

uint64_t sub_1D3DF7564(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor3runERKNS_6Sample11PixelBufferERNSt3__18optionalINS_5ErrorEEERKNS8_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF759C()
{
  return &unk_1E95ACF38;
}

void sub_1D3DF75A8(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEImagePreprocessor::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DF764C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF7660()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD578;
  return result;
}

void sub_1D3DF7684(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD578;
}

void sub_1D3DF769C(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEImagePreprocessor::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DF773C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor7prepareERNSt3__18optionalINS_5ErrorEEERKNS4_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF7774()
{
  return &unk_1E95ACF68;
}

void sub_1D3DF7784()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DF7798()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD520;
  return result;
}

void sub_1D3DF77BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD520;
}

uint64_t sub_1D3DF77D4(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie20IIEImagePreprocessor7prepareERNSt3__18optionalINS_5ErrorEEERKNS4_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DF780C()
{
  return &unk_1E95ACF58;
}

uint64_t sub_1D3DF7818(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  if (v2)
    free(v2);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1D3DF7854(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEPostprocessor::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

BOOL sub_1D3DF78F4(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, uint64_t a12, uint64_t a13)
{
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  int v28;
  __IOSurface *v29;
  __IOSurface *v30;
  _WORD *v31;
  __IOSurface *v32;
  __IOSurface *v33;
  __IOSurface *v34;
  _WORD *v35;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BOOL4 v58;
  __int16 v64;
  NSObject *v65;
  NSObject *v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v70;
  int v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t i;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int v116;
  unint64_t v117;
  float16x4_t v118;
  __int32 *v119;
  __int32 v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  unint64_t j;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  int v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  float *v162;
  vImagePixelCount v163;
  float32x4_t v164;
  __int32 *v165;
  float v170;
  vImagePixelCount v171;
  float *data;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  float *v176;
  int v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  size_t v189;
  char *v190;
  vImagePixelCount v191;
  void *v192;
  char *v193;
  NSObject *v194;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  vImage_Error v201;
  NSObject *v202;
  vImagePixelCount v203;
  float16x4_t v206;
  char *v207;
  __int32 *v208;
  vImagePixelCount v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  int64_t v213;
  unint64_t v214;
  uint64_t v215;
  float16x4_t *v216;
  float16x4_t v217;
  int v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *BaseAddress;
  vImagePixelCount width;
  unint64_t v232;
  vImagePixelCount height;
  unint64_t v234;
  uint64_t v235;
  int v236;
  char *v237;
  char *v238;
  unint64_t v239;
  _WORD *v240;
  uint64_t v241;
  _WORD *v242;
  float32x4_t v243;
  float16x4_t v244;
  BOOL v245;
  __int16 v246;
  CFTypeRef v247;
  char v248;
  _BYTE v249[7];
  char v250;
  _BYTE v251[7];
  uint64_t v252;
  char v253;
  CFTypeRef v254;
  char v255;
  _BYTE v256[7];
  char v257;
  _BYTE v258[7];
  uint64_t v259;
  char v260;
  CFTypeRef v261;
  char v262;
  _BYTE v263[7];
  char v264;
  _BYTE v265[7];
  uint64_t v266;
  char v267;
  CFTypeRef v268;
  char v269;
  _BYTE v270[7];
  char v271;
  _BYTE v272[7];
  uint64_t v273;
  char v274;
  CFTypeRef v275;
  char v276;
  _BYTE v277[7];
  char v278;
  _BYTE v279[7];
  uint64_t v280;
  char v281;
  vImage_Buffer dest;
  vImage_Buffer src;
  __int16 v284;
  vImagePixelCount v285;
  __int16 v286;
  size_t rowBytes;
  vImage_Buffer __src;
  int buf;
  vImage_Error v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  v23 = (CFTypeRef)atomic_load(a3);
  if (v23)
    v23 = CFRetain(v23);
  v275 = v23;
  v276 = 0;
  *(_DWORD *)v277 = src.data;
  *(_DWORD *)&v277[3] = *(_DWORD *)((char *)&src.data + 3);
  v278 = 0;
  *(_DWORD *)v279 = (_DWORD)v268;
  *(_DWORD *)&v279[3] = *(_DWORD *)((char *)&v268 + 3);
  v280 = a13;
  v281 = sub_1D3DD4C10((unint64_t *)&v275, (uint64_t)&v276, 1, a13);
  v24 = (CFTypeRef)atomic_load(a4);
  v228 = a1;
  if (v24)
    v24 = CFRetain(v24);
  v268 = v24;
  v269 = 0;
  *(_DWORD *)v270 = src.data;
  *(_DWORD *)&v270[3] = *(_DWORD *)((char *)&src.data + 3);
  v271 = 0;
  *(_DWORD *)v272 = (_DWORD)v261;
  *(_DWORD *)&v272[3] = *(_DWORD *)((char *)&v261 + 3);
  v273 = a13;
  v274 = sub_1D3DD4C10((unint64_t *)&v268, (uint64_t)&v269, 0, a13);
  v25 = (CFTypeRef)atomic_load(a5);
  if (v25)
    v25 = CFRetain(v25);
  v261 = v25;
  v262 = 0;
  *(_DWORD *)v263 = src.data;
  *(_DWORD *)&v263[3] = *(_DWORD *)((char *)&src.data + 3);
  v264 = 0;
  *(_DWORD *)v265 = (_DWORD)v254;
  *(_DWORD *)&v265[3] = *(_DWORD *)((char *)&v254 + 3);
  v266 = a13;
  v267 = sub_1D3DD4C10((unint64_t *)&v261, (uint64_t)&v262, 1, a13);
  v26 = (CFTypeRef)atomic_load(a6);
  if (v26)
    v26 = CFRetain(v26);
  v254 = v26;
  v255 = 0;
  *(_DWORD *)v256 = src.data;
  *(_DWORD *)&v256[3] = *(_DWORD *)((char *)&src.data + 3);
  v257 = 0;
  *(_DWORD *)v258 = (_DWORD)v247;
  *(_DWORD *)&v258[3] = *(_DWORD *)((char *)&v247 + 3);
  v259 = a13;
  v260 = sub_1D3DD4C10((unint64_t *)&v254, (uint64_t)&v255, 1, a13);
  v27 = (CFTypeRef)atomic_load(a7);
  if (v27)
    v27 = CFRetain(v27);
  v247 = v27;
  v248 = 0;
  *(_DWORD *)v249 = src.data;
  *(_DWORD *)&v249[3] = *(_DWORD *)((char *)&src.data + 3);
  v250 = 0;
  *(_DWORD *)v251 = dest.data;
  *(_DWORD *)&v251[3] = *(_DWORD *)((char *)&dest.data + 3);
  v252 = a13;
  v28 = sub_1D3DD4C10((unint64_t *)&v247, (uint64_t)&v248, 1, a13);
  v253 = v28;
  if (!v281 || !v274 || !v267 || !v260 || v28 != 1)
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v66 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      v223 = *(_DWORD *)(a13 + 56);
      LODWORD(src.data) = 67240192;
      HIDWORD(src.data) = v223;
      _os_log_error_impl(&dword_1D3D6B000, v66, OS_LOG_TYPE_ERROR, "IOSurfaceLock failed: %{public}d", (uint8_t *)&src, 8u);
    }
    goto LABEL_34;
  }
  v29 = (__IOSurface *)atomic_load(a3);
  BaseAddress = (char *)IOSurfaceGetBaseAddress(v29);
  v30 = (__IOSurface *)atomic_load(a4);
  v31 = IOSurfaceGetBaseAddress(v30);
  v32 = (__IOSurface *)atomic_load(a5);
  v242 = IOSurfaceGetBaseAddress(v32);
  v33 = (__IOSurface *)atomic_load(a6);
  v240 = IOSurfaceGetBaseAddress(v33);
  v34 = (__IOSurface *)atomic_load(a7);
  v35 = IOSurfaceGetBaseAddress(v34);
  v38 = 0;
  v39 = 0;
  width = a8[8];
  height = a8[7];
  v40 = a8[2];
  v41 = a8[12];
  v42 = a8[13];
  v44 = a9[7];
  v43 = a9[8];
  v45 = a9[6];
  v46 = a9[2];
  v48 = a9[11];
  v47 = a9[12];
  v49 = a10[2];
  _Q0.i16[0] = 0;
  v52 = a10[11];
  v51 = a10[12];
  v53 = a11[2];
  v54 = a11[11];
  v55 = a11[12];
  v56 = *(_QWORD *)(a12 + 88) / *(_QWORD *)(a12 + 16);
  v57 = -1;
  do
  {
    LOWORD(_S1) = v35[v38 * v56];
    v58 = v39 == 0;
    __asm
    {
      FCVT            S2, H1
      FCVT            S3, H0
    }
    if (_S2 > _S3)
      v58 = 1;
    if (v58)
    {
      _Q0.f32[0] = _S1;
      v39 = 1;
      v57 = v38;
    }
    ++v38;
  }
  while (v38 != 6);
  v64 = v57 | 0x100;
  if (v57 > 5)
    v64 = 0;
  v246 = v64;
  if (v57 >= 6)
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v65 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      LOWORD(src.data) = 0;
      _os_log_error_impl(&dword_1D3D6B000, v65, OS_LOG_TYPE_ERROR, "Invalid category yielded from attributes.", (uint8_t *)&src, 2u);
    }
    src.data = (void *)-6009;
    dest.data = CFSTR("Invalid category yielded from attributes.");
    sub_1D3D73E0C((unint64_t *)a13, (uint64_t *)&src, (CFTypeRef *)&dest.data);
LABEL_34:
    v67 = 0;
    goto LABEL_179;
  }
  v224 = v42;
  v225 = v41;
  v226 = v40;
  v68 = v47 / v46;
  v239 = v51 / v49;
  _H8 = v35[6 * v56];
  v70 = *(_QWORD *)(a2 + 8);
  _H0 = v35[7 * v56];
  __asm { FCVT            S0, H0 }
  v245 = _S0 > 0.0;
  v73 = v57 & 0xFE;
  v74 = v55 / v53;
  v234 = v55 / v53;
  v227 = v70;
  if (v73 == 4)
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = v44 - 1;
    _Q0.f32[0] = (float)v43;
    __asm { FCVT            H0, S0 }
    _S1 = (float)v44;
    __asm
    {
      FCVT            H1, S1
      FCVT            S9, H0
      FCVT            S10, H1
    }
    do
    {
      LOWORD(_S12) &= 0xFF00u;
      if (v44)
      {
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        do
        {
          if (v43)
          {
            for (i = 0; i != v43; ++i)
            {
              _Q0.i16[0] = v31[i + v83 * v68];
              __asm
              {
                FCVT            S1, H0
                FCVT            S2, H12
              }
              if (_S1 > _S2 || v86 == 0)
              {
                _S12 = _Q0.f32[0];
                v85 = v83;
                v84 = i;
              }
              v86 = 1;
            }
          }
          ++v83;
        }
        while (v83 != v44);
      }
      else
      {
        v85 = 0;
        v84 = 0;
      }
      if (v85 <= 1)
        v91 = 1;
      else
        v91 = v85;
      v92 = v91 - 1;
      if (v79 >= v85 + 1)
        v93 = v85 + 1;
      else
        v93 = v79;
      if (v84 <= 1)
        v94 = 1;
      else
        v94 = v84;
      if ((uint64_t)(v43 - 1) >= v84 + 1)
        v95 = v84 + 1;
      else
        v95 = v43 - 1;
      if (v92 <= v93)
      {
        v96 = v94 - 1;
        do
        {
          if (v96 <= v95)
          {
            v97 = v96;
            do
            {
              v31[v97 + v92 * v68] = -1024;
              ++v97;
            }
            while (v97 <= v95);
          }
          ++v92;
        }
        while (v92 <= v93);
      }
      _S0 = (float)(unint64_t)v84;
      _H1 = v242[v84 + v85 * v239];
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S1 + _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = _S0 / _S9;
      __asm { FCVT            H2, S0 }
      _S0 = (float)(unint64_t)v85;
      __asm { FCVT            H0, S0 }
      LOWORD(_S1) = v240[v84 + v85 * v74];
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S1 + _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _Q0.f32[0] = _S0 / _S10;
      __asm { FCVT            H0, S0 }
      WORD1(_D2) = _Q0.i16[0];
      if ((unint64_t)v76 >= v77)
      {
        v235 = _D2;
        v110 = (v76 - v75) >> 2;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 62)
          sub_1D3D6D4F8();
        if ((uint64_t)(v77 - (_QWORD)v75) >> 1 > v111)
          v111 = (uint64_t)(v77 - (_QWORD)v75) >> 1;
        if (v77 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
          v112 = (unint64_t)sub_1D3D82278(v112);
        else
          v113 = 0;
        v114 = (char *)(v112 + 4 * v110);
        _Q0.i64[0] = v235;
        *(_DWORD *)v114 = v235;
        v115 = v114 + 4;
        while (v76 != v75)
        {
          v116 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *((_DWORD *)v114 - 1) = v116;
          v114 -= 4;
        }
        v77 = v112 + 4 * v113;
        if (v75)
        {
          v117 = v77;
          operator delete(v75);
          v77 = v117;
        }
        v75 = v114;
        v76 = v115;
        v74 = v234;
        v79 = v44 - 1;
      }
      else
      {
        *(_DWORD *)v76 = _D2;
        v76 += 4;
      }
      ++v78;
    }
    while (v78 != 4);
    if (v75 == v76)
    {
      v241 = v77;
      v118 = (float16x4_t)0x3800380038003800;
    }
    else
    {
      v241 = v77;
      v118 = (float16x4_t)0x3800380038003800;
      v119 = (__int32 *)v75;
      do
      {
        v120 = *v119++;
        _Q0.i32[0] = v120;
        _Q0 = vaddq_f32(vcvtq_f32_f16(v118), vcvtq_f32_f16(*(float16x4_t *)_Q0.f32));
        v118 = vcvt_f16_f32(_Q0);
      }
      while (v119 != (__int32 *)v76);
    }
    memset(&src, 0, 24);
    v160 = v76 - v75;
    sub_1D3DE2750(&src.data, (v76 - v75) >> 2);
    if (v75 == v76)
    {
      v171 = src.height;
    }
    else
    {
      __asm { FMOV            V1.4S, #0.25 }
      v162 = (float *)src.height;
      v163 = src.width;
      v164 = vcvtq_f32_f16(vcvt_f16_f32(vmulq_f32(vcvtq_f32_f16(v118), _Q1)));
      v243 = v164;
      v165 = (__int32 *)v75;
      do
      {
        v164.i32[0] = *v165;
        _S1 = vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*(float16x4_t *)v164.f32), v243)).u32[0];
        _H0 = HIWORD(_S1);
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S1, H1; float
        }
        v170 = atan2f(_S0, _S1) + 2.3562;
        if ((unint64_t)v162 >= v163)
        {
          data = (float *)src.data;
          v173 = ((char *)v162 - (char *)src.data) >> 2;
          v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(v163 - (unint64_t)src.data) >> 1 > v174)
            v174 = (uint64_t)(v163 - (unint64_t)src.data) >> 1;
          if (v163 - (unint64_t)src.data >= 0x7FFFFFFFFFFFFFFCLL)
            v174 = 0x3FFFFFFFFFFFFFFFLL;
          if (v174)
          {
            v174 = (unint64_t)sub_1D3D82278(v174);
            data = (float *)src.data;
            v162 = (float *)src.height;
          }
          else
          {
            v175 = 0;
          }
          v176 = (float *)(v174 + 4 * v173);
          *v176 = v170;
          v171 = (vImagePixelCount)(v176 + 1);
          while (v162 != data)
          {
            v177 = *((_DWORD *)v162-- - 1);
            *((_DWORD *)v176-- - 1) = v177;
          }
          v163 = v174 + 4 * v175;
          src.data = v176;
          src.width = v163;
          if (data)
            operator delete(data);
        }
        else
        {
          *v162 = v170;
          v171 = (vImagePixelCount)(v162 + 1);
        }
        src.height = v171;
        ++v165;
        v162 = (float *)v171;
      }
      while (v165 != (__int32 *)v76);
    }
    sub_1D3DF9BF0(&dest, (uint64_t)(v171 - (unint64_t)src.data) >> 2);
    v178 = (uint64_t *)dest.data;
    v179 = (uint64_t *)dest.height;
    if (dest.data != (void *)dest.height)
    {
      v180 = 0;
      v181 = (uint64_t *)dest.data;
      do
        *v181++ = v180++;
      while (v181 != v179);
    }
    v182 = 126 - 2 * __clz(v179 - v178);
    __src.data = &src;
    if (v179 == v178)
      v183 = 0;
    else
      v183 = v182;
    sub_1D3DFA820((uint64_t)v178, v179, (uint64_t **)&__src, v183, 1);
    LODWORD(__src.data) = *(_DWORD *)&v75[4 * *(_QWORD *)dest.data];
    v184 = *((_QWORD *)dest.data + 2);
    HIDWORD(__src.data) = *(_DWORD *)&v75[4 * *((_QWORD *)dest.data + 3)];
    LODWORD(__src.height) = *(_DWORD *)&v75[4 * v184];
    HIDWORD(__src.height) = *(_DWORD *)&v75[4 * *((_QWORD *)dest.data + 1)];
    v185 = v241;
    if ((unint64_t)(v241 - (_QWORD)v75) >= 0x10)
    {
      if (v160 <= 0xF)
      {
        v188 = v75;
        if (v75 != v76)
        {
          memmove(v75, &__src, v76 - v75);
          v188 = v76;
        }
        v189 = 16 - v160;
        memmove(v188, (char *)&__src + 4 * ((v76 - v75) >> 2), v189);
        goto LABEL_167;
      }
    }
    else
    {
      if (v75)
      {
        operator delete(v75);
        v185 = 0;
      }
      v186 = v185 >> 1;
      if ((unint64_t)(v185 >> 1) <= 4)
        v186 = 4;
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
        v187 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v187 = v186;
      if (v187 >> 62)
        sub_1D3D6D4F8();
      v75 = (char *)sub_1D3D82278(v187);
    }
    *(_OWORD *)v75 = *(_OWORD *)&__src.data;
    v189 = 16;
    v188 = v75;
LABEL_167:
    if (dest.data)
    {
      dest.height = (vImagePixelCount)dest.data;
      operator delete(dest.data);
    }
    v190 = &v188[v189];
    if (src.data)
    {
      src.height = (vImagePixelCount)src.data;
      operator delete(src.data);
    }
    v151 = v190;
    goto LABEL_172;
  }
  v75 = 0;
  if (v45)
  {
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v232 = v48 / v46;
    v124 = v52 / v49;
    _S0 = (float)v43;
    __asm { FCVT            H0, S0 }
    _S1 = (float)v44;
    __asm
    {
      FCVT            H1, S1
      FCVT            S9, H0
      FCVT            S10, H1
    }
    v129 = v54 / v53;
    v229 = v45;
    do
    {
      LOWORD(_S11) &= 0xFF00u;
      if (v44)
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v133 = 0;
        do
        {
          if (v43)
          {
            for (j = 0; j != v43; ++j)
            {
              LOWORD(_S0) = v31[v123 * v232 + v130 * v68 + j];
              __asm
              {
                FCVT            S1, H0
                FCVT            S2, H11
              }
              if (_S1 > _S2 || v133 == 0)
              {
                _S11 = _S0;
                v132 = v130;
                v131 = j;
              }
              v133 = 1;
            }
          }
          ++v130;
        }
        while (v130 != v44);
      }
      else
      {
        v132 = 0;
        v131 = 0;
      }
      _S0 = (float)v131;
      __asm { FCVT            H0, S0 }
      _H1 = v242[v123 * v124 + v132 * v239 + v131];
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S1 + _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = _S0 / _S9;
      __asm { FCVT            H2, S0 }
      _S0 = (float)v132;
      __asm { FCVT            H0, S0 }
      LOWORD(_S1) = v240[v123 * v129 + v132 * v74 + v131];
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S1 + _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      _S0 = _S0 / _S10;
      __asm { FCVT            H0, S0 }
      HIWORD(_S2) = LOWORD(_S0);
      if ((unint64_t)v121 >= v122)
      {
        v236 = _S2;
        v152 = (v121 - v75) >> 2;
        v153 = v152 + 1;
        if ((unint64_t)(v152 + 1) >> 62)
          sub_1D3D6D4F8();
        if ((uint64_t)(v122 - (_QWORD)v75) >> 1 > v153)
          v153 = (uint64_t)(v122 - (_QWORD)v75) >> 1;
        if (v122 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v154 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154)
          v154 = (unint64_t)sub_1D3D82278(v154);
        else
          v155 = 0;
        v156 = (char *)(v154 + 4 * v152);
        HIWORD(_S0) = HIWORD(v236);
        *(_DWORD *)v156 = v236;
        v237 = v156 + 4;
        while (v121 != v75)
        {
          v157 = *((_DWORD *)v121 - 1);
          v121 -= 4;
          *((_DWORD *)v156 - 1) = v157;
          v156 -= 4;
        }
        v122 = v154 + 4 * v155;
        if (v75)
        {
          v158 = v75;
          v159 = v122;
          operator delete(v158);
          v122 = v159;
        }
        v75 = v156;
        v74 = v234;
        v151 = v237;
        v45 = v229;
      }
      else
      {
        *(_DWORD *)v121 = _S2;
        v151 = v121 + 4;
      }
      ++v123;
      v121 = v151;
    }
    while (v123 != v45);
  }
  else
  {
    v151 = 0;
  }
LABEL_172:
  v238 = v151;
  v191 = width;
  v192 = (void *)vImageBuffer_Init(&__src, height, width, 8u, 0);
  v67 = v192 == 0;
  v193 = BaseAddress;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  v194 = qword_1EFE31858;
  if (!v192)
  {
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(src.data) = 136447234;
      *(void **)((char *)&src.data + 4) = "thresmap";
      WORD2(src.height) = 2050;
      *(vImagePixelCount *)((char *)&src.height + 6) = (vImagePixelCount)__src.data;
      HIWORD(src.width) = 2050;
      src.rowBytes = __src.height;
      v284 = 2050;
      v285 = __src.width;
      v286 = 2050;
      rowBytes = __src.rowBytes;
      _os_log_debug_impl(&dword_1D3D6B000, v194, OS_LOG_TYPE_DEBUG, "Allocated %{public}s image buffer: data=%{public}p, height=%{public}zu, width=%{public}zu, rowBytes=%{public}zu", (uint8_t *)&src, 0x34u);
    }
    if (!height)
    {
LABEL_207:
      memset(&src, 0, 24);
      sub_1D3D6E838(&src.data, (v238 - v75) >> 2);
      if (v75 != v238)
      {
        v207 = (char *)src.height;
        v208 = (__int32 *)v75;
        do
        {
          v206.i32[0] = *v208;
          v206 = (float16x4_t)vcvtq_f32_f16(v206).u64[0];
          if ((unint64_t)v207 >= src.width)
          {
            v244 = v206;
            v210 = (char *)src.data;
            v211 = (v207 - (char *)src.data) >> 3;
            v212 = v211 + 1;
            if ((unint64_t)(v211 + 1) >> 61)
              sub_1D3D6D4F8();
            v213 = src.width - (unint64_t)src.data;
            if ((uint64_t)(src.width - (unint64_t)src.data) >> 2 > v212)
              v212 = v213 >> 2;
            if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
              v214 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v214 = v212;
            if (v214)
              v214 = (unint64_t)sub_1D3D6D8A0(v214);
            else
              v215 = 0;
            v216 = (float16x4_t *)(v214 + 8 * v211);
            v206.i32[1] = v244.i32[1];
            *v216 = v244;
            v209 = (vImagePixelCount)&v216[1];
            if (v207 != v210)
            {
              do
              {
                v217 = *(float16x4_t *)(v207 - 8);
                v207 -= 8;
                v206.i32[1] = v217.i32[1];
                v216[-1] = v217;
                --v216;
              }
              while (v207 != v210);
              v207 = (char *)src.data;
            }
            src.data = v216;
            src.height = v209;
            src.width = v214 + 8 * v215;
            if (v207)
              operator delete(v207);
          }
          else
          {
            *(float16x4_t *)v207 = v206;
            v209 = (vImagePixelCount)(v207 + 8);
          }
          src.height = v209;
          ++v208;
          v207 = (char *)v209;
        }
        while (v208 != (__int32 *)v238);
      }
      _S0 = (float)v227;
      __asm
      {
        FCVT            H0, S0
        FCVT            S1, H8
        FCVT            S0, H0
      }
      _S0 = _S1 / _S0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      LODWORD(dest.data) = _S0;
      sub_1D3DF9C64(v228, (uint64_t *)&__src, (uint64_t)&src, (char *)&v246, (float *)&dest, (char *)&v245);
      if (src.data)
        operator delete(src.data);
      v67 = 1;
      if (v75)
        goto LABEL_178;
      goto LABEL_179;
    }
    v196 = 0;
    v197 = v224 / v226;
    v198 = v225 / v226;
    while (1)
    {
      v199 = &v193[2 * v196 * v198];
      v200 = (char *)__src.data + __src.rowBytes * v196;
      if (v197 != 1)
        goto LABEL_201;
      src.data = &v193[2 * v196 * v198];
      src.height = 1;
      src.width = v191;
      src.rowBytes = 2 * width;
      dest.data = (char *)__src.data + __src.rowBytes * v196;
      dest.height = 1;
      dest.width = v191;
      dest.rowBytes = v191;
      v201 = vImageConvert_Planar16FtoPlanar8(&src, &dest, 0);
      if (v201)
        break;
      v191 = width;
LABEL_206:
      if (++v196 == height)
        goto LABEL_207;
    }
    if (qword_1EDB89F90 != -1)
      dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
    v202 = qword_1EDB89F98;
    if (os_log_type_enabled((os_log_t)qword_1EDB89F98, OS_LOG_TYPE_ERROR))
    {
      buf = 134349056;
      v290 = v201;
      _os_log_error_impl(&dword_1D3D6B000, v202, OS_LOG_TYPE_ERROR, "vImageConvert_Planar16FtoPlanar8 failed: %{public}zd", (uint8_t *)&buf, 0xCu);
    }
    v193 = BaseAddress;
    v191 = width;
LABEL_201:
    if (v191)
    {
      v203 = v191;
      do
      {
        _H0 = *(_WORD *)v199;
        __asm { FCVT            S0, H0 }
        *v200++ = (int)_S0;
        v199 += 2 * v197;
        --v203;
      }
      while (v203);
    }
    goto LABEL_206;
  }
  if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
  {
    LODWORD(src.data) = 134349056;
    *(void **)((char *)&src.data + 4) = v192;
    _os_log_error_impl(&dword_1D3D6B000, v194, OS_LOG_TYPE_ERROR, "vImageBuffer_Init failed: %{public}zd", (uint8_t *)&src, 0xCu);
  }
  src.data = (void *)-2003;
  dest.data = CFSTR("vImageBuffer_Init failed.");
  sub_1D3D73E0C((unint64_t *)a13, (uint64_t *)&src, (CFTypeRef *)&dest.data);
  *(_QWORD *)(a13 + 32) = v192;
  *(_BYTE *)(a13 + 40) = 1;
  if (v75)
LABEL_178:
    operator delete(v75);
LABEL_179:
  if (v253)
    v253 = sub_1D3DD4E7C((unint64_t *)&v247, (uint64_t)&v248, 1, v252) ^ 1;
  sub_1D3D82B54((unint64_t *)&v247);
  if (v260)
    v260 = sub_1D3DD4E7C((unint64_t *)&v254, (uint64_t)&v255, 1, v259) ^ 1;
  sub_1D3D82B54((unint64_t *)&v254);
  if (v267)
    v267 = sub_1D3DD4E7C((unint64_t *)&v261, (uint64_t)&v262, 1, v266) ^ 1;
  sub_1D3D82B54((unint64_t *)&v261);
  if (v274)
    v274 = sub_1D3DD4E7C((unint64_t *)&v268, (uint64_t)&v269, 0, v273) ^ 1;
  sub_1D3D82B54((unint64_t *)&v268);
  if (v281)
    v281 = sub_1D3DD4E7C((unint64_t *)&v275, (uint64_t)&v276, 1, v280) ^ 1;
  sub_1D3D82B54((unint64_t *)&v275);
  return v67;
}

void sub_1D3DF8A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;
  uint64_t v55;

  if (*(_QWORD *)(v55 + 112))
    operator delete(*(void **)(v55 + 112));
  if (v54)
    operator delete(v54);
  sub_1D3DACB24((uint64_t)&a34);
  sub_1D3DACB24((uint64_t)&a39);
  sub_1D3DACB24((uint64_t)&a44);
  sub_1D3DF9D08((uint64_t)&a49);
  sub_1D3DACB24((uint64_t)&a54);
  _Unwind_Resume(a1);
}

BOOL sub_1D3DF8BB8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, uint64_t a12, uint64_t a13)
{
  float v13;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  int v27;
  __IOSurface *v28;
  const float *BaseAddress;
  __IOSurface *v30;
  float *v31;
  __IOSurface *v32;
  __IOSurface *v33;
  __IOSurface *v34;
  float *v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  __int16 v56;
  NSObject *v57;
  NSObject *v58;
  _BOOL8 v59;
  unint64_t v61;
  float v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float32x2_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  float32x2_t v83;
  float32x2_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  float32x2_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t *v94;
  float32x2_t v95;
  unint64_t v96;
  float32x2_t v101;
  float *v102;
  vImagePixelCount width;
  float32x2_t *v104;
  float32x2_t v105;
  float v106;
  vImagePixelCount height;
  float *data;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  float *v112;
  int v113;
  float32x2_t *v114;
  float32x2_t *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  float32x2_t *v132;
  float32x2_t v133;
  __int128 v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  size_t v144;
  __int128 v145;
  char *v146;
  vImage_Error v147;
  NSObject *v148;
  uint64_t v149;
  void *v150;
  uint64_t i;
  int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  const float *v157;
  vImagePixelCount v158;
  vImagePixelCount v159;
  uint64_t v160;
  unint64_t v161;
  float32x2_t v162;
  unint64_t v163;
  uint64_t v164;
  float32x2_t v165;
  unint64_t v166;
  float *v167;
  float *v168;
  float32x2_t *v169;
  float32x2_t *v170;
  float32x2_t *v171;
  __int128 v172;
  uint64_t v173;
  vImage_Buffer __p;
  void *v175;
  uint64_t *v176;
  BOOL v177;
  __int16 v178;
  CFTypeRef v179;
  char v180;
  _BYTE v181[7];
  char v182;
  _BYTE v183[7];
  uint64_t v184;
  char v185;
  CFTypeRef v186;
  char v187;
  _BYTE v188[7];
  char v189;
  _BYTE v190[7];
  uint64_t v191;
  char v192;
  CFTypeRef v193;
  char v194;
  _BYTE v195[7];
  char v196;
  _BYTE v197[7];
  uint64_t v198;
  char v199;
  CFTypeRef v200;
  char v201;
  _BYTE v202[7];
  char v203;
  _BYTE v204[7];
  uint64_t v205;
  char v206;
  CFTypeRef v207;
  char v208;
  _BYTE v209[7];
  char v210;
  _BYTE v211[7];
  uint64_t v212;
  char v213;
  _BYTE __src[32];
  __int16 v215;
  vImagePixelCount v216;
  __int16 v217;
  size_t rowBytes;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v22 = (CFTypeRef)atomic_load(a3);
  if (v22)
    v22 = CFRetain(v22);
  v207 = v22;
  v208 = 0;
  *(_DWORD *)v209 = *(_DWORD *)__src;
  *(_DWORD *)&v209[3] = *(_DWORD *)&__src[3];
  v210 = 0;
  *(_DWORD *)v211 = (_DWORD)v200;
  *(_DWORD *)&v211[3] = *(_DWORD *)((char *)&v200 + 3);
  v212 = a13;
  v213 = sub_1D3DD4C10((unint64_t *)&v207, (uint64_t)&v208, 1, a13);
  v23 = (CFTypeRef)atomic_load(a4);
  v160 = a1;
  if (v23)
    v23 = CFRetain(v23);
  v200 = v23;
  v201 = 0;
  *(_DWORD *)v202 = *(_DWORD *)__src;
  *(_DWORD *)&v202[3] = *(_DWORD *)&__src[3];
  v203 = 0;
  *(_DWORD *)v204 = (_DWORD)v193;
  *(_DWORD *)&v204[3] = *(_DWORD *)((char *)&v193 + 3);
  v205 = a13;
  v206 = sub_1D3DD4C10((unint64_t *)&v200, (uint64_t)&v201, 0, a13);
  v24 = (CFTypeRef)atomic_load(a5);
  if (v24)
    v24 = CFRetain(v24);
  v193 = v24;
  v194 = 0;
  *(_DWORD *)v195 = *(_DWORD *)__src;
  *(_DWORD *)&v195[3] = *(_DWORD *)&__src[3];
  v196 = 0;
  *(_DWORD *)v197 = (_DWORD)v186;
  *(_DWORD *)&v197[3] = *(_DWORD *)((char *)&v186 + 3);
  v198 = a13;
  v199 = sub_1D3DD4C10((unint64_t *)&v193, (uint64_t)&v194, 1, a13);
  v25 = (CFTypeRef)atomic_load(a6);
  if (v25)
    v25 = CFRetain(v25);
  v186 = v25;
  v187 = 0;
  *(_DWORD *)v188 = *(_DWORD *)__src;
  *(_DWORD *)&v188[3] = *(_DWORD *)&__src[3];
  v189 = 0;
  *(_DWORD *)v190 = (_DWORD)v179;
  *(_DWORD *)&v190[3] = *(_DWORD *)((char *)&v179 + 3);
  v191 = a13;
  v192 = sub_1D3DD4C10((unint64_t *)&v186, (uint64_t)&v187, 1, a13);
  v26 = (CFTypeRef)atomic_load(a7);
  if (v26)
    v26 = CFRetain(v26);
  v179 = v26;
  v180 = 0;
  *(_DWORD *)v181 = *(_DWORD *)__src;
  *(_DWORD *)&v181[3] = *(_DWORD *)&__src[3];
  v182 = 0;
  *(_DWORD *)v183 = __p.data;
  *(_DWORD *)&v183[3] = *(_DWORD *)((char *)&__p.data + 3);
  v184 = a13;
  v27 = sub_1D3DD4C10((unint64_t *)&v179, (uint64_t)&v180, 1, a13);
  v185 = v27;
  if (!v213 || !v206 || !v199 || !v192 || v27 != 1)
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v58 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      v152 = *(_DWORD *)(a13 + 56);
      *(_DWORD *)__src = 67240192;
      *(_DWORD *)&__src[4] = v152;
      _os_log_error_impl(&dword_1D3D6B000, v58, OS_LOG_TYPE_ERROR, "IOSurfaceLock failed: %{public}d", __src, 8u);
    }
    goto LABEL_34;
  }
  v28 = (__IOSurface *)atomic_load(a3);
  BaseAddress = (const float *)IOSurfaceGetBaseAddress(v28);
  v30 = (__IOSurface *)atomic_load(a4);
  v31 = (float *)IOSurfaceGetBaseAddress(v30);
  v32 = (__IOSurface *)atomic_load(a5);
  v168 = (float *)IOSurfaceGetBaseAddress(v32);
  v33 = (__IOSurface *)atomic_load(a6);
  v167 = (float *)IOSurfaceGetBaseAddress(v33);
  v34 = (__IOSurface *)atomic_load(a7);
  v35 = (float *)IOSurfaceGetBaseAddress(v34);
  v36 = 0;
  v37 = 0;
  v159 = a8[8];
  v158 = a8[7];
  v38 = a8[2];
  v39 = a8[12];
  v40 = a8[13];
  v42 = a9[7];
  v41 = a9[8];
  v164 = a9[6];
  v43 = a9[2];
  v44 = a9[11];
  v45 = a9[12];
  v46 = a10[2];
  v47 = 0.0;
  v49 = a10[11];
  v48 = a10[12];
  v50 = a11[2];
  v51 = a11[11];
  v52 = a11[12];
  v53 = *(_QWORD *)(a12 + 88) / *(_QWORD *)(a12 + 16);
  v54 = -1;
  do
  {
    v55 = v37 == 0;
    if (v35[v36 * v53] > v47)
      v55 = 1;
    if (v55)
    {
      v47 = v35[v36 * v53];
      v37 = 1;
      v54 = v36;
    }
    ++v36;
  }
  while (v36 != 6);
  v56 = v54 | 0x100;
  if (v54 > 5)
    v56 = 0;
  v178 = v56;
  if (v54 >= 6)
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v57 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__src = 0;
      _os_log_error_impl(&dword_1D3D6B000, v57, OS_LOG_TYPE_ERROR, "Invalid category yielded from attributes.", __src, 2u);
    }
    *(_QWORD *)__src = -6009;
    __p.data = CFSTR("Invalid category yielded from attributes.");
    sub_1D3D73E0C((unint64_t *)a13, (uint64_t *)__src, (CFTypeRef *)&__p.data);
LABEL_34:
    v59 = 0;
    goto LABEL_35;
  }
  v61 = v45 / v43;
  v62 = v35[6 * v53];
  v166 = v48 / v46;
  v63 = *(_QWORD *)(a2 + 8);
  v177 = v35[7 * v53] > 0.0;
  v64 = v52 / v50;
  v163 = v52 / v50;
  v156 = v63;
  v157 = BaseAddress;
  v154 = v39;
  v155 = v38;
  v153 = v40;
  if ((v54 & 0xFE) == 4)
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = v41 - 1;
    v170 = 0;
    do
    {
      LODWORD(v13) &= 0xFFFFFF00;
      if (v42)
      {
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        do
        {
          if (v41)
          {
            v73 = 0;
            v74 = v69 * v61;
            do
            {
              if (v31[v73 + v74] > v13 || v72 == 0)
              {
                v13 = v31[v73 + v74];
                v71 = v69;
                v70 = v73;
              }
              ++v73;
              v72 = 1;
            }
            while (v41 != v73);
          }
          ++v69;
        }
        while (v69 != v42);
      }
      else
      {
        v71 = 0;
        v70 = 0;
      }
      if (v71 <= 1)
        v76 = 1;
      else
        v76 = v71;
      v77 = v76 - 1;
      if ((uint64_t)(v42 - 1) >= v71 + 1)
        v78 = v71 + 1;
      else
        v78 = v42 - 1;
      if (v70 <= 1)
        v79 = 1;
      else
        v79 = v70;
      if (v68 >= v70 + 1)
        v80 = v70 + 1;
      else
        v80 = v68;
      if (v77 <= v78)
      {
        v81 = v79 - 1;
        do
        {
          if (v81 <= v80)
          {
            v82 = v81;
            do
            {
              v31[v82 + v77 * v61] = -INFINITY;
              ++v82;
            }
            while (v82 <= v80);
          }
          ++v77;
        }
        while (v77 <= v78);
      }
      v83.f32[0] = (float)(v168[v70 + v71 * v166] + (float)(unint64_t)v70) / (float)v41;
      v83.f32[1] = (float)(v167[v70 + v71 * v64] + (float)(unint64_t)v71) / (float)v42;
      if ((unint64_t)v66 >= v65)
      {
        v165 = v83;
        v85 = v66 - v170;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
          sub_1D3D6D4F8();
        if ((uint64_t)(v65 - (_QWORD)v170) >> 2 > v86)
          v86 = (uint64_t)(v65 - (_QWORD)v170) >> 2;
        if (v65 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
          v87 = (unint64_t)sub_1D3D6D8A0(v87);
        else
          v88 = 0;
        v89 = (float32x2_t *)(v87 + 8 * v85);
        *v89 = v165;
        v90 = v89 + 1;
        if (v66 != v170)
        {
          do
          {
            v91 = v66[-1];
            --v66;
            v89[-1] = v91;
            --v89;
          }
          while (v66 != v170);
          v66 = v170;
        }
        v65 = v87 + 8 * v88;
        v84 = v89;
        if (v66)
        {
          v171 = v89;
          operator delete(v66);
          v84 = v171;
        }
        v66 = v90;
        v64 = v163;
        v68 = v41 - 1;
      }
      else
      {
        *v66++ = v83;
        v84 = v170;
      }
      v170 = v84;
      ++v67;
    }
    while (v67 != 4);
    v169 = (float32x2_t *)v65;
    v92 = v84;
    v93 = (float32x2_t)0x3F0000003F000000;
    if (v84 != v66)
    {
      v94 = v84;
      do
      {
        v95 = *v94++;
        v93 = vadd_f32(v93, v95);
      }
      while (v94 != v66);
    }
    memset(&__p, 0, 24);
    v96 = (char *)v66 - (char *)v84;
    sub_1D3DE2750(&__p.data, v66 - v84);
    if (v92 == v66)
    {
      height = __p.height;
    }
    else
    {
      __asm { FMOV            V0.2S, #0.25 }
      v101 = vmul_f32(v93, _D0);
      v102 = (float *)__p.height;
      width = __p.width;
      v104 = v92;
      do
      {
        v105 = vsub_f32(*v104, v101);
        v106 = atan2f(v105.f32[1], v105.f32[0]) + 2.3562;
        if ((unint64_t)v102 >= width)
        {
          data = (float *)__p.data;
          v109 = ((char *)v102 - (char *)__p.data) >> 2;
          v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 62)
            sub_1D3D6D4F8();
          if ((uint64_t)(width - (unint64_t)__p.data) >> 1 > v110)
            v110 = (uint64_t)(width - (unint64_t)__p.data) >> 1;
          if (width - (unint64_t)__p.data >= 0x7FFFFFFFFFFFFFFCLL)
            v110 = 0x3FFFFFFFFFFFFFFFLL;
          if (v110)
          {
            v110 = (unint64_t)sub_1D3D82278(v110);
            data = (float *)__p.data;
            v102 = (float *)__p.height;
          }
          else
          {
            v111 = 0;
          }
          v112 = (float *)(v110 + 4 * v109);
          *v112 = v106;
          height = (vImagePixelCount)(v112 + 1);
          while (v102 != data)
          {
            v113 = *((_DWORD *)v102-- - 1);
            *((_DWORD *)v112-- - 1) = v113;
          }
          width = v110 + 4 * v111;
          __p.data = v112;
          __p.width = width;
          if (data)
            operator delete(data);
        }
        else
        {
          *v102 = v106;
          height = (vImagePixelCount)(v102 + 1);
        }
        __p.height = height;
        ++v104;
        v102 = (float *)height;
      }
      while (v104 != v66);
    }
    sub_1D3DF9BF0(&v175, (uint64_t)(height - (unint64_t)__p.data) >> 2);
    v135 = (uint64_t *)v175;
    v136 = v176;
    if (v175 != v176)
    {
      v137 = 0;
      v138 = (uint64_t *)v175;
      do
        *v138++ = v137++;
      while (v138 != v136);
    }
    v139 = 126 - 2 * __clz(v136 - v135);
    *(_QWORD *)__src = &__p;
    if (v136 == v135)
      v140 = 0;
    else
      v140 = v139;
    sub_1D3DF9D50((uint64_t)v135, v136, (uint64_t **)__src, v140, 1);
    *(float32x2_t *)__src = v92[*(_QWORD *)v175];
    v141 = *((_QWORD *)v175 + 2);
    *(float32x2_t *)&__src[8] = v92[*((_QWORD *)v175 + 3)];
    *(float32x2_t *)&__src[16] = v92[v141];
    *(float32x2_t *)&__src[24] = v92[*((_QWORD *)v175 + 1)];
    if ((unint64_t)((char *)v169 - (char *)v92) >= 0x20)
    {
      if (v96 > 0x1F)
      {
        v145 = *(_OWORD *)&__src[16];
        *(_OWORD *)v92->f32 = *(_OWORD *)__src;
        *(_OWORD *)v92[2].f32 = v145;
        v144 = 32;
        v66 = v92;
      }
      else
      {
        if (v92 != v66)
          memcpy(v92, __src, (char *)v66 - (char *)v92);
        v144 = 32 - v96;
        memmove(v66, &__src[8 * (v66 - v92)], v144);
      }
      *(_QWORD *)&v142 = v170;
      v114 = v169;
    }
    else
    {
      operator delete(v92);
      v66 = (float32x2_t *)sub_1D3D6D8A0(4uLL);
      *(_QWORD *)&v142 = v66;
      v114 = &v66[v143];
      *(_OWORD *)v66->f32 = *(_OWORD *)__src;
      *(_OWORD *)v66[2].f32 = *(_OWORD *)&__src[16];
      v144 = 32;
    }
    v173 = v142;
    if (v175)
    {
      v176 = (uint64_t *)v175;
      operator delete(v175);
      *(_QWORD *)&v142 = v173;
    }
    v146 = (char *)v66 + v144;
    if (__p.data)
    {
      __p.height = (vImagePixelCount)__p.data;
      operator delete(__p.data);
      *(_QWORD *)&v142 = v173;
    }
    *((_QWORD *)&v142 + 1) = v146;
    v172 = v142;
  }
  else if (v164)
  {
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v161 = v44 / v43;
    v117 = v49 / v46;
    *(_QWORD *)&v172 = 0;
    v118 = v51 / v50;
    do
    {
      LODWORD(v13) &= 0xFFFFFF00;
      if (v42)
      {
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v122 = 0;
        do
        {
          if (v41)
          {
            v123 = 0;
            v124 = v116 * v161 + v119 * v61;
            do
            {
              if (v31[v124 + v123] > v13 || v122 == 0)
              {
                v13 = v31[v124 + v123];
                v121 = v119;
                v120 = v123;
              }
              ++v123;
              v122 = 1;
            }
            while (v41 != v123);
          }
          ++v119;
        }
        while (v119 != v42);
      }
      else
      {
        v121 = 0;
        v120 = 0;
      }
      v126.f32[0] = (float)(v168[v116 * v117 + v121 * v166 + v120] + (float)v120) / (float)v41;
      v126.f32[1] = (float)(v167[v116 * v118 + v121 * v64 + v120] + (float)v121) / (float)v42;
      if (v115 >= v114)
      {
        v162 = v126;
        v128 = (uint64_t)((uint64_t)v115 - v172) >> 3;
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 61)
          sub_1D3D6D4F8();
        if ((uint64_t)((uint64_t)v114 - v172) >> 2 > v129)
          v129 = (uint64_t)((uint64_t)v114 - v172) >> 2;
        if ((unint64_t)((unint64_t)v114 - v172) >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
          v130 = (unint64_t)sub_1D3D6D8A0(v130);
        else
          v131 = 0;
        v132 = (float32x2_t *)(v130 + 8 * v128);
        *v132 = v162;
        v127 = v132 + 1;
        if (v115 != (float32x2_t *)v172)
        {
          do
          {
            v133 = v115[-1];
            --v115;
            v132[-1] = v133;
            --v132;
          }
          while (v115 != (float32x2_t *)v172);
          v115 = (float32x2_t *)v172;
        }
        v114 = (float32x2_t *)(v130 + 8 * v131);
        *(_QWORD *)&v172 = v132;
        if (v115)
          operator delete(v115);
        v64 = v163;
      }
      else
      {
        *v115 = v126;
        v127 = v115 + 1;
      }
      *(_QWORD *)&v134 = v172;
      *((_QWORD *)&v134 + 1) = v127;
      v172 = v134;
      ++v116;
      v115 = v127;
    }
    while (v116 != v164);
  }
  else
  {
    v114 = 0;
    v172 = 0u;
  }
  v147 = vImageBuffer_Init(&__p, v158, v159, 8u, 0);
  v59 = v147 == 0;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  v148 = qword_1EFE31858;
  if (!v147)
  {
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__src = 136447234;
      *(_QWORD *)&__src[4] = "thresmap";
      *(_WORD *)&__src[12] = 2050;
      *(_QWORD *)&__src[14] = __p.data;
      *(_WORD *)&__src[22] = 2050;
      *(_QWORD *)&__src[24] = __p.height;
      v215 = 2050;
      v216 = __p.width;
      v217 = 2050;
      rowBytes = __p.rowBytes;
      _os_log_debug_impl(&dword_1D3D6B000, v148, OS_LOG_TYPE_DEBUG, "Allocated %{public}s image buffer: data=%{public}p, height=%{public}zu, width=%{public}zu, rowBytes=%{public}zu", __src, 0x34u);
      if (!v158)
        goto LABEL_185;
    }
    else if (!v158)
    {
      goto LABEL_185;
    }
    for (i = 0; i != v158; ++i)
      vDSP_vfixu8(&v157[i * (v154 / v155)], v153 / v155, (unsigned __int8 *)__p.data + __p.rowBytes * i, 1, v159);
LABEL_185:
    *(_OWORD *)__src = v172;
    *(_QWORD *)&__src[16] = v114;
    *(float *)&v175 = v62 / (float)v156;
    sub_1D3DF9C64(v160, (uint64_t *)&__p, (uint64_t)__src, (char *)&v178, (float *)&v175, (char *)&v177);
    v150 = *(void **)__src;
    if (!*(_QWORD *)__src)
      goto LABEL_35;
    goto LABEL_186;
  }
  if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__src = 134349056;
    *(_QWORD *)&__src[4] = v147;
    _os_log_error_impl(&dword_1D3D6B000, v148, OS_LOG_TYPE_ERROR, "vImageBuffer_Init failed: %{public}zd", __src, 0xCu);
  }
  *(_QWORD *)__src = -2003;
  v175 = CFSTR("vImageBuffer_Init failed.");
  v149 = sub_1D3D73E0C((unint64_t *)a13, (uint64_t *)__src, (CFTypeRef *)&v175);
  *(_QWORD *)(v149 + 32) = v147;
  *(_BYTE *)(v149 + 40) = 1;
  v150 = (void *)v172;
  if ((_QWORD)v172)
LABEL_186:
    operator delete(v150);
LABEL_35:
  if (v185)
    v185 = sub_1D3DD4E7C((unint64_t *)&v179, (uint64_t)&v180, 1, v184) ^ 1;
  sub_1D3D82B54((unint64_t *)&v179);
  if (v192)
    v192 = sub_1D3DD4E7C((unint64_t *)&v186, (uint64_t)&v187, 1, v191) ^ 1;
  sub_1D3D82B54((unint64_t *)&v186);
  if (v199)
    v199 = sub_1D3DD4E7C((unint64_t *)&v193, (uint64_t)&v194, 1, v198) ^ 1;
  sub_1D3D82B54((unint64_t *)&v193);
  if (v206)
    v206 = sub_1D3DD4E7C((unint64_t *)&v200, (uint64_t)&v201, 0, v205) ^ 1;
  sub_1D3D82B54((unint64_t *)&v200);
  if (v213)
    v213 = sub_1D3DD4E7C((unint64_t *)&v207, (uint64_t)&v208, 1, v212) ^ 1;
  sub_1D3D82B54((unint64_t *)&v207);
  return v59;
}

void sub_1D3DF9AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  if (__p)
    operator delete(__p);
  if (a35)
    operator delete(a35);
  sub_1D3DACB24((uint64_t)&a43);
  sub_1D3DACB24((uint64_t)&a48);
  sub_1D3DACB24((uint64_t)&a53);
  sub_1D3DF9D08((uint64_t)&a58);
  sub_1D3DACB24(v58 - 232);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3DF9BF0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D3D6D864(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D3DF9C48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1D3DF9C64(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, float *a5, char *a6)
{
  char v11;
  float result;
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 72))
  {
    a1 = sub_1D3DF7818(a1);
    *(_BYTE *)(a1 + 72) = 0;
  }
  v11 = *a4;
  result = *a5;
  v13 = *a6;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v14;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v15 = a2[3];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a1 + 56) = v11;
  *(float *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

unint64_t *sub_1D3DF9D08(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    *(_BYTE *)(a1 + 32) = sub_1D3DD4E7C((unint64_t *)a1, a1 + 8, 0, *(_QWORD *)(a1 + 24)) ^ 1;
  return sub_1D3D82B54((unint64_t *)a1);
}

uint64_t sub_1D3DF9D50(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int64_t v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  float v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t *v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v43 = *v11;
        if (*(float *)(**a3 + 4 * *v10) < *(float *)(**a3 + 4 * *v11))
        {
          *v11 = *v10;
          *v10 = v43;
        }
        return result;
      case 3:
        return (uint64_t)sub_1D3DFA4CC(v11, v11 + 1, a2 - 1, **a3);
      case 4:
        return (uint64_t)sub_1D3DFA554(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v44 = v11 + 1;
        v45 = v11 + 2;
        v46 = v11 + 3;
        result = (uint64_t)sub_1D3DFA554(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v47 = v11[3];
        v48 = **a3;
        if (*(float *)(v48 + 4 * *v10) < *(float *)(v48 + 4 * v47))
        {
          *v46 = *v10;
          *v10 = v47;
          v49 = *v46;
          v50 = *v45;
          v51 = *(float *)(v48 + 4 * *v46);
          if (v51 < *(float *)(v48 + 4 * *v45))
          {
            *v45 = v49;
            *v46 = v50;
            v52 = *v44;
            if (v51 < *(float *)(v48 + 4 * *v44))
            {
              v11[1] = v49;
              v11[2] = v52;
              v53 = *v11;
              if (v51 < *(float *)(v48 + 4 * *v11))
              {
                *v11 = v49;
                v11[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v54 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v55 = **a3;
                v56 = 8;
                v57 = v11;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(float *)(v55 + 4 * v58);
                  if (v60 < *(float *)(v55 + 4 * v59))
                  {
                    v61 = v56;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v61) = v59;
                      v62 = v61 - 8;
                      if (v61 == 8)
                        break;
                      v59 = *(uint64_t *)((char *)v11 + v61 - 16);
                      v61 -= 8;
                      if (v60 >= *(float *)(v55 + 4 * v59))
                      {
                        v63 = (uint64_t *)((char *)v11 + v62);
                        goto LABEL_73;
                      }
                    }
                    v63 = v11;
LABEL_73:
                    *v63 = v58;
                  }
                  v54 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v95 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v96 = **a3;
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                v99 = *(float *)(v96 + 4 * v97);
                if (v99 < *(float *)(v96 + 4 * v98))
                {
                  do
                  {
                    *v95 = v98;
                    v98 = *(v95 - 2);
                    --v95;
                  }
                  while (v99 < *(float *)(v96 + 4 * v98));
                  *v95 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v64 = (unint64_t)(v13 - 2) >> 1;
            v65 = *a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v11[v68];
                v70 = 2 * v66 + 2;
                v71 = *v65;
                if (v70 < v13 && *(float *)(v71 + 4 * *v69) < *(float *)(v71 + 4 * v69[1]))
                {
                  ++v69;
                  v68 = 2 * v67 + 2;
                }
                v72 = &v11[v67];
                result = *v69;
                v73 = *v72;
                v74 = *(float *)(v71 + 4 * *v72);
                if (*(float *)(v71 + 4 * *v69) >= v74)
                {
                  do
                  {
                    v75 = v69;
                    *v72 = result;
                    if (v64 < v68)
                      break;
                    v76 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = &v11[v68];
                    v77 = v76 + 2;
                    if (v77 < v13 && *(float *)(v71 + 4 * *v69) < *(float *)(v71 + 4 * v69[1]))
                    {
                      ++v69;
                      v68 = v77;
                    }
                    result = *v69;
                    v72 = v75;
                  }
                  while (*(float *)(v71 + 4 * *v69) >= v74);
                  *v75 = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v78 = (unint64_t)v12 >> 3;
            do
            {
              v79 = 0;
              v80 = *v11;
              v81 = *a3;
              v82 = v11;
              do
              {
                v83 = v82;
                v82 += v79 + 1;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78)
                {
                  result = v82[1];
                  if (*(float *)(*v81 + 4 * *v82) < *(float *)(*v81 + 4 * result))
                  {
                    ++v82;
                    v79 = v85;
                  }
                }
                *v83 = *v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v80;
              }
              else
              {
                *v82 = *a2;
                *a2 = v80;
                v86 = (char *)v82 - (char *)v11 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v11[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *v81;
                  v92 = *(float *)(v91 + 4 * *v82);
                  if (*(float *)(v91 + 4 * *v88) < v92)
                  {
                    do
                    {
                      v93 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v11[v87];
                      v89 = *v88;
                      v82 = v93;
                    }
                    while (*(float *)(v91 + 4 * *v88) < v92);
                    *v93 = v90;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        v16 = **a3;
        if ((unint64_t)v12 < 0x401)
        {
          result = (uint64_t)sub_1D3DFA4CC(v15, v9, a2 - 1, v16);
        }
        else
        {
          sub_1D3DFA4CC(v9, v15, a2 - 1, v16);
          sub_1D3DFA4CC(v9 + 1, v15 - 1, a2 - 2, **a3);
          sub_1D3DFA4CC(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
          result = (uint64_t)sub_1D3DFA4CC(v15 - 1, v15, &v9[v14 + 1], **a3);
          v17 = *v9;
          *v9 = *v15;
          *v15 = v17;
        }
        --a4;
        v18 = *v9;
        v19 = **a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v9 - 1)) < v20)
            goto LABEL_12;
          if (v20 >= *(float *)(v19 + 4 * *v10))
          {
            v35 = v9 + 1;
            do
            {
              v11 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v20 >= *(float *)(v19 + 4 * *v11));
          }
          else
          {
            v11 = v9;
            do
            {
              v34 = v11[1];
              ++v11;
            }
            while (v20 >= *(float *)(v19 + 4 * v34));
          }
          v36 = a2;
          if (v11 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v20 < *(float *)(v19 + 4 * v37));
          }
          if (v11 < v36)
          {
            v38 = *v11;
            v39 = *v36;
            do
            {
              *v11 = v39;
              *v36 = v38;
              do
              {
                v40 = v11[1];
                ++v11;
                v38 = v40;
              }
              while (v20 >= *(float *)(v19 + 4 * v40));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v20 < *(float *)(v19 + 4 * v41));
            }
            while (v11 < v36);
          }
          v42 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v18;
          continue;
        }
        v20 = *(float *)(v19 + 4 * v18);
LABEL_12:
        v21 = v9;
        do
        {
          v22 = v21;
          v24 = v21[1];
          ++v21;
          v23 = v24;
        }
        while (*(float *)(v19 + 4 * v24) < v20);
        v25 = a2;
        if (v22 == v9)
        {
          v25 = a2;
          do
          {
            if (v21 >= v25)
              break;
            v27 = *--v25;
          }
          while (*(float *)(v19 + 4 * v27) >= v20);
        }
        else
        {
          do
            v26 = *--v25;
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        if (v21 < v25)
        {
          v28 = *v25;
          v29 = v21;
          v30 = v25;
          do
          {
            *v29 = v28;
            *v30 = v23;
            do
            {
              v22 = v29;
              v31 = v29[1];
              ++v29;
              v23 = v31;
            }
            while (*(float *)(v19 + 4 * v31) < v20);
            do
            {
              v32 = *--v30;
              v28 = v32;
            }
            while (*(float *)(v19 + 4 * v32) >= v20);
          }
          while (v29 < v30);
        }
        if (v22 != v9)
          *v9 = *v22;
        *v22 = v18;
        if (v21 < v25)
        {
LABEL_31:
          result = sub_1D3DF9D50(v9, v22, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v22 + 1;
          continue;
        }
        v33 = sub_1D3DFA604(v9, v22, a3);
        v11 = v22 + 1;
        result = sub_1D3DFA604(v22 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_31;
        }
        a2 = v22;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1D3DFA4CC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *result;
  v6 = *(float *)(a4 + 4 * *a2);
  v7 = *(float *)(a4 + 4 * *result);
  v8 = *a3;
  v9 = *(float *)(a4 + 4 * *a3);
  if (v6 >= v7)
  {
    if (v9 < v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *result;
      if (*(float *)(a4 + 4 * *a2) < *(float *)(a4 + 4 * *result))
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(a4 + 4 * *a3) >= v7)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *sub_1D3DFA554(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1D3DFA4CC(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  if (*(float *)(v12 + 4 * *a4) < *(float *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(v12 + 4 * *a3) < *(float *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(v12 + 4 * *a2) < *(float *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL sub_1D3DFA604(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1D3DFA4CC(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1D3DFA554(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 1;
      v22 = a1 + 2;
      v23 = a1 + 3;
      sub_1D3DFA554(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v24 = *(a2 - 1);
      v25 = a1[3];
      v26 = **a3;
      if (*(float *)(v26 + 4 * v24) < *(float *)(v26 + 4 * v25))
      {
        *v23 = v24;
        *(a2 - 1) = v25;
        v27 = *v23;
        v28 = *v22;
        v29 = *(float *)(v26 + 4 * *v23);
        if (v29 < *(float *)(v26 + 4 * *v22))
        {
          *v22 = v27;
          *v23 = v28;
          v30 = *v21;
          if (v29 < *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            v31 = *a1;
            if (v29 < *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1D3DFA4CC(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t sub_1D3DFA820(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int64_t v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  float v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t *v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v43 = *v11;
        if (*(float *)(**a3 + 4 * *v10) < *(float *)(**a3 + 4 * *v11))
        {
          *v11 = *v10;
          *v10 = v43;
        }
        return result;
      case 3:
        return (uint64_t)sub_1D3DFA4CC(v11, v11 + 1, a2 - 1, **a3);
      case 4:
        return (uint64_t)sub_1D3DFA554(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v44 = v11 + 1;
        v45 = v11 + 2;
        v46 = v11 + 3;
        result = (uint64_t)sub_1D3DFA554(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v47 = v11[3];
        v48 = **a3;
        if (*(float *)(v48 + 4 * *v10) < *(float *)(v48 + 4 * v47))
        {
          *v46 = *v10;
          *v10 = v47;
          v49 = *v46;
          v50 = *v45;
          v51 = *(float *)(v48 + 4 * *v46);
          if (v51 < *(float *)(v48 + 4 * *v45))
          {
            *v45 = v49;
            *v46 = v50;
            v52 = *v44;
            if (v51 < *(float *)(v48 + 4 * *v44))
            {
              v11[1] = v49;
              v11[2] = v52;
              v53 = *v11;
              if (v51 < *(float *)(v48 + 4 * *v11))
              {
                *v11 = v49;
                v11[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v54 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v55 = **a3;
                v56 = 8;
                v57 = v11;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(float *)(v55 + 4 * v58);
                  if (v60 < *(float *)(v55 + 4 * v59))
                  {
                    v61 = v56;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v61) = v59;
                      v62 = v61 - 8;
                      if (v61 == 8)
                        break;
                      v59 = *(uint64_t *)((char *)v11 + v61 - 16);
                      v61 -= 8;
                      if (v60 >= *(float *)(v55 + 4 * v59))
                      {
                        v63 = (uint64_t *)((char *)v11 + v62);
                        goto LABEL_73;
                      }
                    }
                    v63 = v11;
LABEL_73:
                    *v63 = v58;
                  }
                  v54 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v95 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v96 = **a3;
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                v99 = *(float *)(v96 + 4 * v97);
                if (v99 < *(float *)(v96 + 4 * v98))
                {
                  do
                  {
                    *v95 = v98;
                    v98 = *(v95 - 2);
                    --v95;
                  }
                  while (v99 < *(float *)(v96 + 4 * v98));
                  *v95 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v64 = (unint64_t)(v13 - 2) >> 1;
            v65 = *a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v11[v68];
                v70 = 2 * v66 + 2;
                v71 = *v65;
                if (v70 < v13 && *(float *)(v71 + 4 * *v69) < *(float *)(v71 + 4 * v69[1]))
                {
                  ++v69;
                  v68 = 2 * v67 + 2;
                }
                v72 = &v11[v67];
                result = *v69;
                v73 = *v72;
                v74 = *(float *)(v71 + 4 * *v72);
                if (*(float *)(v71 + 4 * *v69) >= v74)
                {
                  do
                  {
                    v75 = v69;
                    *v72 = result;
                    if (v64 < v68)
                      break;
                    v76 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = &v11[v68];
                    v77 = v76 + 2;
                    if (v77 < v13 && *(float *)(v71 + 4 * *v69) < *(float *)(v71 + 4 * v69[1]))
                    {
                      ++v69;
                      v68 = v77;
                    }
                    result = *v69;
                    v72 = v75;
                  }
                  while (*(float *)(v71 + 4 * *v69) >= v74);
                  *v75 = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v78 = (unint64_t)v12 >> 3;
            do
            {
              v79 = 0;
              v80 = *v11;
              v81 = *a3;
              v82 = v11;
              do
              {
                v83 = v82;
                v82 += v79 + 1;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78)
                {
                  result = v82[1];
                  if (*(float *)(*v81 + 4 * *v82) < *(float *)(*v81 + 4 * result))
                  {
                    ++v82;
                    v79 = v85;
                  }
                }
                *v83 = *v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v80;
              }
              else
              {
                *v82 = *a2;
                *a2 = v80;
                v86 = (char *)v82 - (char *)v11 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v11[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *v81;
                  v92 = *(float *)(v91 + 4 * *v82);
                  if (*(float *)(v91 + 4 * *v88) < v92)
                  {
                    do
                    {
                      v93 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v11[v87];
                      v89 = *v88;
                      v82 = v93;
                    }
                    while (*(float *)(v91 + 4 * *v88) < v92);
                    *v93 = v90;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        v16 = **a3;
        if ((unint64_t)v12 < 0x401)
        {
          result = (uint64_t)sub_1D3DFA4CC(v15, v9, a2 - 1, v16);
        }
        else
        {
          sub_1D3DFA4CC(v9, v15, a2 - 1, v16);
          sub_1D3DFA4CC(v9 + 1, v15 - 1, a2 - 2, **a3);
          sub_1D3DFA4CC(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
          result = (uint64_t)sub_1D3DFA4CC(v15 - 1, v15, &v9[v14 + 1], **a3);
          v17 = *v9;
          *v9 = *v15;
          *v15 = v17;
        }
        --a4;
        v18 = *v9;
        v19 = **a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v9 - 1)) < v20)
            goto LABEL_12;
          if (v20 >= *(float *)(v19 + 4 * *v10))
          {
            v35 = v9 + 1;
            do
            {
              v11 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v20 >= *(float *)(v19 + 4 * *v11));
          }
          else
          {
            v11 = v9;
            do
            {
              v34 = v11[1];
              ++v11;
            }
            while (v20 >= *(float *)(v19 + 4 * v34));
          }
          v36 = a2;
          if (v11 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v20 < *(float *)(v19 + 4 * v37));
          }
          if (v11 < v36)
          {
            v38 = *v11;
            v39 = *v36;
            do
            {
              *v11 = v39;
              *v36 = v38;
              do
              {
                v40 = v11[1];
                ++v11;
                v38 = v40;
              }
              while (v20 >= *(float *)(v19 + 4 * v40));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v20 < *(float *)(v19 + 4 * v41));
            }
            while (v11 < v36);
          }
          v42 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v18;
          continue;
        }
        v20 = *(float *)(v19 + 4 * v18);
LABEL_12:
        v21 = v9;
        do
        {
          v22 = v21;
          v24 = v21[1];
          ++v21;
          v23 = v24;
        }
        while (*(float *)(v19 + 4 * v24) < v20);
        v25 = a2;
        if (v22 == v9)
        {
          v25 = a2;
          do
          {
            if (v21 >= v25)
              break;
            v27 = *--v25;
          }
          while (*(float *)(v19 + 4 * v27) >= v20);
        }
        else
        {
          do
            v26 = *--v25;
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        if (v21 < v25)
        {
          v28 = *v25;
          v29 = v21;
          v30 = v25;
          do
          {
            *v29 = v28;
            *v30 = v23;
            do
            {
              v22 = v29;
              v31 = v29[1];
              ++v29;
              v23 = v31;
            }
            while (*(float *)(v19 + 4 * v31) < v20);
            do
            {
              v32 = *--v30;
              v28 = v32;
            }
            while (*(float *)(v19 + 4 * v32) >= v20);
          }
          while (v29 < v30);
        }
        if (v22 != v9)
          *v9 = *v22;
        *v22 = v18;
        if (v21 < v25)
        {
LABEL_31:
          result = sub_1D3DFA820(v9, v22, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v22 + 1;
          continue;
        }
        v33 = sub_1D3DFAF9C(v9, v22, a3);
        v11 = v22 + 1;
        result = sub_1D3DFAF9C(v22 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_31;
        }
        a2 = v22;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1D3DFAF9C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1D3DFA4CC(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1D3DFA554(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 1;
      v22 = a1 + 2;
      v23 = a1 + 3;
      sub_1D3DFA554(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v24 = *(a2 - 1);
      v25 = a1[3];
      v26 = **a3;
      if (*(float *)(v26 + 4 * v24) < *(float *)(v26 + 4 * v25))
      {
        *v23 = v24;
        *(a2 - 1) = v25;
        v27 = *v23;
        v28 = *v22;
        v29 = *(float *)(v26 + 4 * *v23);
        if (v29 < *(float *)(v26 + 4 * *v22))
        {
          *v22 = v27;
          *v23 = v28;
          v30 = *v21;
          if (v29 < *(float *)(v26 + 4 * *v21))
          {
            a1[1] = v27;
            a1[2] = v30;
            v31 = *a1;
            if (v29 < *(float *)(v26 + 4 * *a1))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1D3DFA4CC(a1, a1 + 1, a1 + 2, **a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * *v11);
    if (v17 < *(float *)(v13 + 4 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void sub_1D3DFB1BC()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFB1D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95ADAF8;
  return result;
}

void sub_1D3DFB1F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95ADAF8;
}

void sub_1D3DFB20C(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEPostprocessor::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DFB2AC(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc9inference3iie16IIEPostprocessor3runERKNS1_20IIEImagePreprocessorERKNS_6Sample11PixelBufferERNSt3__18optionalINS_5ErrorEEERKNSB_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFB2E4()
{
  return &unk_1E95AD068;
}

void sub_1D3DFB2F4()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFB308()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AC930;
  return result;
}

void sub_1D3DFB32C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AC930;
}

uint64_t sub_1D3DFB344(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc9inference3iie16IIEPostprocessor3runERKNS1_20IIEImagePreprocessorERKNS_6Sample11PixelBufferERNSt3__18optionalINS_5ErrorEEERKNSB_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFB37C()
{
  return &unk_1E95ABDD8;
}

uint64_t sub_1D3DFB388(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (unint64_t *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(0, v4));
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (unint64_t *)(a2 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(0, v6));
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v11 = a1 + 72;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_1D3D860F0(v11, (__int128 *)(a2 + 72));
    *(_BYTE *)(a1 + 200) = 1;
    if (*(_BYTE *)(a2 + 200))
    {
      sub_1D3D85FD8(a2 + 72);
      *(_BYTE *)(a2 + 200) = 0;
    }
  }
  v12 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v12;
  v13 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 216) = v13;
  v14 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 224) = v14;
  v15 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 232) = v15;
  v16 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v16;
  v17 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v17;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    *(_QWORD *)(a1 + 280) = off_1E95AEEC0;
    v18 = *(_OWORD *)(a2 + 288);
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v18;
    *(_QWORD *)(a1 + 280) = &off_1E95AEF20;
    v19 = *(_OWORD *)(a2 + 312);
    v20 = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 312) = v19;
    *(_OWORD *)(a1 + 328) = v20;
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    v21 = *(_OWORD *)(a2 + 352);
    v22 = *(_OWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 352) = v21;
    *(_OWORD *)(a1 + 368) = v22;
    if (*(_BYTE *)(a2 + 384))
      *(_BYTE *)(a2 + 384) = 0;
    *(_BYTE *)(a1 + 392) = 1;
    if (*(_BYTE *)(a2 + 392))
    {
      if (*(_BYTE *)(a2 + 344))
        free(*(void **)(a2 + 312));
      *(_BYTE *)(a2 + 392) = 0;
    }
  }
  v23 = (unint64_t *)(a2 + 400);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(0, v23));
  *(_QWORD *)(a1 + 400) = v24;
  return a1;
}

uint64_t sub_1D3DFB558(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  sub_1D3D982CC((unint64_t *)(a1 + 400));
  if (*(_BYTE *)(a1 + 392) && *(_BYTE *)(a1 + 344))
    free(*(void **)(a1 + 312));
  v4 = (void **)(a1 + 256);
  sub_1D3DACF04(&v4);
  sub_1D3DACF78((uint64_t *)(a1 + 248), 0);
  sub_1D3DACF78((uint64_t *)(a1 + 240), 0);
  sub_1D3DACF78((uint64_t *)(a1 + 232), 0);
  sub_1D3DACF78((uint64_t *)(a1 + 224), 0);
  sub_1D3DACF78((uint64_t *)(a1 + 216), 0);
  sub_1D3DACF78((uint64_t *)(a1 + 208), 0);
  if (*(_BYTE *)(a1 + 200))
    sub_1D3D85FD8(a1 + 72);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D3D8BA0C((unint64_t *)(a1 + 16));
  sub_1D3D8BA0C((unint64_t *)(a1 + 8));
  return a1;
}

void sub_1D3DFB630(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEModel::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DFB6D4()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFB6E8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD730;
  return result;
}

void sub_1D3DFB70C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD730;
}

void sub_1D3DFB724(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEModel::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DFB7C4(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel7prepareERNSt3__18optionalINS_5ErrorEEERKNS4_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFB7FC()
{
  return &unk_1E95ACFB8;
}

void sub_1D3DFB80C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFB820()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD6D8;
  return result;
}

void sub_1D3DFB844(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD6D8;
}

uint64_t sub_1D3DFB85C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel7prepareERNSt3__18optionalINS_5ErrorEEERKNS4_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFB894()
{
  return &unk_1E95ACFA8;
}

void sub_1D3DFB8A0(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEModel::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DFB944()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFB958()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD680;
  return result;
}

void sub_1D3DFB97C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD680;
}

void sub_1D3DFB994(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEModel::run", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DFBA34(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel3runERKNS_6SampleERKNSt3__18optionalINS1_11IIECropRectEEERNS7_INS_5ErrorEEERKNS7_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFBA6C()
{
  return &unk_1E95ACF98;
}

void sub_1D3DFBA7C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFBA90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD628;
  return result;
}

void sub_1D3DFBAB4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD628;
}

uint64_t sub_1D3DFBACC(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel3runERKNS_6SampleERKNSt3__18optionalINS1_11IIECropRectEEERNS7_INS_5ErrorEEERKNS7_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFBB04()
{
  return &unk_1E95ACF88;
}

void sub_1D3DFBB10(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "IIEModel::create", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3DFBBB4()
{
  JUMPOUT(0x1D8254C54);
}

const char *sub_1D3DFBBC8()
{
  return "model_0099999_3sym_noidle2-10_nodivide";
}

uint64_t sub_1D3DFBBD8()
{
  return 1;
}

uint64_t sub_1D3DFBBE0()
{
  return 0;
}

const char *sub_1D3DFBBE8()
{
  return "MRCIIE";
}

const char *sub_1D3DFBBF4()
{
  return "main";
}

const char *sub_1D3DFBC00()
{
  return "input";
}

const char *sub_1D3DFBC14()
{
  return "thresmap";
}

const char *sub_1D3DFBC28()
{
  return "heatmap";
}

const char *sub_1D3DFBC3C()
{
  return "offset_x";
}

const char *sub_1D3DFBC50()
{
  return "offset_y";
}

const char *sub_1D3DFBC64()
{
  return "attributes";
}

char **sub_1D3DFBC78()
{
  return &off_1E95B38B0;
}

void sub_1D3DFBC8C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFBCA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95ABF90;
  return result;
}

void sub_1D3DFBCC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95ABF90;
}

void sub_1D3DFBCDC(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31860 != -1)
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31858;
    if (os_signpost_enabled((os_log_t)qword_1EFE31858))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "IIEModel::create", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3DFBD7C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel6createERKNS_7Context7OptionsEbRNSt3__18optionalINS_5ErrorEEERKNS8_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFBDB4()
{
  return &unk_1E95ABC18;
}

void sub_1D3DFBDC4()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFBDD8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95ABF38;
  return result;
}

void sub_1D3DFBDFC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95ABF38;
}

uint64_t sub_1D3DFBE14(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel6createERKNS_7Context7OptionsEbRNSt3__18optionalINS_5ErrorEEERKNS8_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFBE4C()
{
  return &unk_1E95ABC08;
}

void sub_1D3DFBE58(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *shared_weak_owners;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  dispatch_queue_t v12;
  uint64_t (*v13)(_QWORD);
  CFTypeRef v14;
  CFTypeRef v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  dispatch_time_t v27;
  NSObject *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t (**v39)();
  char v40;
  uint64_t (***v41)();
  _QWORD *v42;
  uint64_t v43;
  uint64_t context[3];
  uint64_t *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 3;
  if (!a2[3])
    return;
  v4 = (std::__shared_weak_count *)a1;
  v5 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock_with_options();
  v6 = sub_1D3D967F4(&v4[1].__vftable, (unint64_t)&unk_1D3E6E210);
  if (!v6)
  {
    v7 = (uint64_t)v4->__vftable;
    shared_weak_owners = v4->__shared_weak_owners_;
    v35 = &unk_1D3E6E210;
    *(_QWORD *)&v36 = "IIEContext";
    *((_QWORD *)&v36 + 1) = 10;
    v9 = (_QWORD *)operator new();
    v10 = operator new();
    v11 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v12 = dispatch_queue_create_with_target_V2("mrc::Context::ConcreteBase<mrc::inference::iie::(anonymous namespace)::IIEContext>::ConcreteBase(const Options &, dispatch_queue_t _Nonnull) [_Derived = mrc::inference::iie::(anonymous namespace)::IIEContext]", v11, shared_weak_owners);
    v13 = MEMORY[0x1E0C82E98];
    *(_QWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 16) = v13;
    *(_QWORD *)v10 = &off_1E95AEF00;
    *(_QWORD *)(v10 + 24) = *(_QWORD *)v7;
    v14 = (CFTypeRef)atomic_load((unint64_t *)(v7 + 8));
    if (v14)
      v14 = CFRetain(v14);
    *(_QWORD *)(v10 + 32) = v14;
    v15 = (CFTypeRef)atomic_load((unint64_t *)(v7 + 16));
    if (v15)
      v15 = CFRetain(v15);
    *(_QWORD *)(v10 + 40) = v15;
    v16 = *(_OWORD *)(v7 + 24);
    v17 = *(_OWORD *)(v7 + 40);
    *(_WORD *)(v10 + 80) = *(_WORD *)(v7 + 56);
    *(_OWORD *)(v10 + 48) = v16;
    *(_OWORD *)(v10 + 64) = v17;
    *(_BYTE *)(v10 + 88) = 0;
    *(_BYTE *)(v10 + 496) = 0;
    *(_BYTE *)(v10 + 504) = 0;
    *(_BYTE *)(v10 + 600) = 0;
    *(_QWORD *)(v10 + 608) = dispatch_group_create();
    *(_QWORD *)(v10 + 616) = MEMORY[0x1E0C82E98];
    *v9 = v10;
    v18 = (_QWORD *)operator new();
    *v18 = &off_1E95B03F8;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v10;
    v9[1] = v18;
    v39 = &off_1E95AFCD0;
    v41 = &v39;
    v42 = v9;
    sub_1D3D96968((uint64_t)&v43, (uint64_t)&v39);
    sub_1D3E23E40((uint64_t)context, (uint64_t)&unk_1D3E6E210, &v36, (uint64_t *)&v42);
    sub_1D3D969CC((uint64_t *)&v42);
    v19 = v41;
    if (v41 == &v39)
    {
      v20 = 4;
      v19 = &v39;
    }
    else
    {
      if (!v41)
      {
LABEL_12:
        v6 = sub_1D3D96A58((uint64_t *)&v4[1], &v35, context);
        sub_1D3D969CC((uint64_t *)&v45);
        sub_1D3E23B04((uint64_t *)v4);
        goto LABEL_13;
      }
      v20 = 5;
    }
    (*v19)[v20]();
    goto LABEL_12;
  }
LABEL_13:
  if ((_UNKNOWN *)v6[3] != &unk_1D3E6E210)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_59;
  }
  v21 = (uint64_t *)v6[6];
  if (!v21)
  {
LABEL_59:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_60;
  }
  v22 = *v21;
  v4 = (std::__shared_weak_count *)v21[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  os_unfair_lock_unlock(v5);
  if (!v22)
  {
    if (qword_1EFE31860 == -1)
    {
LABEL_23:
      v25 = qword_1EFE31858;
      if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
      {
        LOWORD(context[0]) = 0;
        _os_log_error_impl(&dword_1D3D6B000, v25, OS_LOG_TYPE_ERROR, "Unable to retrieve or instantiate concrete IIE context.", (uint8_t *)context, 2u);
      }
      LOBYTE(v39) = 0;
      v40 = 0;
      sub_1D3DF4E68((uint64_t)&v42, -1, 0);
      sub_1D3DF50BC(context, (uint64_t *)&v42);
      v46 = 1;
      if (!*v2)
        sub_1D3D75A24();
      (*(void (**)(_QWORD, uint64_t (***)(), uint64_t *))(*(_QWORD *)*v2 + 48))(*v2, &v39, context);
      if (v46)
        sub_1D3DF4F24((unint64_t *)context);
      sub_1D3DF4F24((unint64_t *)&v42);
      goto LABEL_52;
    }
LABEL_60:
    dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    goto LABEL_23;
  }
  if (!*v2)
  {
    v2 = &v38;
    goto LABEL_30;
  }
  if ((_QWORD *)*v2 != a2)
  {
    v38 = (_BYTE *)*v2;
LABEL_30:
    *v2 = 0;
    goto LABEL_32;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v37);
LABEL_32:
  if (!v38)
    goto LABEL_52;
  v26 = *(NSObject **)(v22 + 608);
  v27 = dispatch_time(0, 3000000000);
  if (dispatch_group_wait(v26, v27))
  {
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v28 = qword_1EFE31858;
    if (os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_ERROR))
    {
      LOWORD(context[0]) = 0;
      _os_log_error_impl(&dword_1D3D6B000, v28, OS_LOG_TYPE_ERROR, "Timed out waiting for model to be loaded.", (uint8_t *)context, 2u);
    }
    LOBYTE(v39) = 0;
    v40 = 0;
    sub_1D3DF4E68((uint64_t)&v42, -6010, CFSTR("Timed out waiting for model to be loaded."));
    sub_1D3DF50BC(context, (uint64_t *)&v42);
    v46 = 1;
    if (!v38)
      sub_1D3D75A24();
    (*(void (**)(_BYTE *, uint64_t (***)(), uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v39, context);
    if (v46)
      sub_1D3DF4F24((unint64_t *)context);
    sub_1D3DF4F24((unint64_t *)&v42);
  }
  else
  {
    context[0] = (uint64_t)&off_1E95AFD80;
    context[1] = v22;
    context[2] = (uint64_t)v37;
    v45 = context;
    dispatch_barrier_async_and_wait_f(*(dispatch_queue_t *)(v22 + 8), context, (dispatch_function_t)sub_1D3DFC61C);
    v29 = v45;
    if (v45 == context)
    {
      v30 = 4;
      v29 = context;
    }
    else
    {
      if (!v45)
        goto LABEL_47;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
LABEL_47:
  v31 = v38;
  if (v38 == v37)
  {
    v32 = 4;
    v31 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_52;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_52:
  if (v4)
  {
    v33 = (unint64_t *)&v4->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D3DFC40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
    sub_1D3D6D5A8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3DFC584(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 608);
    *(_QWORD *)(v1 + 608) = 0;
    if (v2)
      (*(void (**)(void))(v1 + 616))();
    if (*(_BYTE *)(v1 + 600))
      sub_1D3DF4F24((unint64_t *)(v1 + 504));
    if (*(_BYTE *)(v1 + 496))
      sub_1D3DFB558(v1 + 88);
    sub_1D3D8BA0C((unint64_t *)(v1 + 40));
    sub_1D3D8BA0C((unint64_t *)(v1 + 32));
    v3 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)v1 = &off_1E95AEE80;
    *(_QWORD *)(v1 + 8) = 0;
    if (v3)
      (*(void (**)(void))(v1 + 16))();
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

uint64_t sub_1D3DFC61C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    sub_1D3D75A24();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1D3DFC644()
{
  JUMPOUT(0x1D8254C54);
}

__n128 sub_1D3DFC658(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E95AFD80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1D3DFC690(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E95AFD80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t *sub_1D3DFC6B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *result;
  unint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  CFTypeRef v12;
  CFTypeRef v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  _BOOL8 v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v54;
  const void *v55;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  char **v103;
  os_signpost_id_t v104;
  char v105;
  unint64_t v106[3];
  __int128 v107;
  __int128 v108;
  __int16 v109;
  _QWORD *v110;
  _BYTE v111[24];
  char v112;
  char v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[48];
  uint64_t v117;
  uint64_t v118;
  int v119;
  void *v120;
  char v121;
  char v122;
  char v123;
  char v124;
  unint64_t v125;
  char v126;
  uint64_t v127[2];
  _BYTE __p[24];
  unint64_t v129;
  _BYTE *v130;
  char v131;
  unsigned __int8 v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  os_signpost_id_t *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  os_signpost_id_t *v144;
  _QWORD v145[3];
  _QWORD *v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 600))
  {
    v3 = *(_QWORD *)(a1 + 16);
    __p[0] = 0;
    __p[8] = 0;
    sub_1D3DF4F6C((uint64_t)v106, v2 + 504);
    v112 = 1;
    v4 = *(_QWORD *)(v3 + 24);
    if (!v4)
      sub_1D3D75A24();
    result = (unint64_t *)(*(uint64_t (**)(uint64_t, _BYTE *, unint64_t *))(*(_QWORD *)v4 + 48))(v4, __p, v106);
LABEL_4:
    if (!v112)
      return result;
    v6 = v106;
    return sub_1D3DF4F24(v6);
  }
  if (!*(_BYTE *)(v2 + 496))
  {
    dispatch_group_enter(*(dispatch_group_t *)(v2 + 608));
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v104 = os_signpost_id_make_with_pointer((os_log_t)qword_1EFE31858, (const void *)v2);
    v105 = 1;
    v135[0] = &off_1E95ABF38;
    v136 = v135;
    v133[0] = &off_1E95ABF90;
    v134 = v133;
    v139 = v138;
    v137 = &v104;
    v138[0] = &off_1E95ABF90;
    v106[0] = v104;
    sub_1D3DFBB10(v104, v106);
    v7 = v134;
    if (v134 == v133)
    {
      v8 = 4;
      v7 = v133;
    }
    else
    {
      if (!v134)
        goto LABEL_14;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
    v9 = v136;
    if (v136 == v135)
    {
      v10 = 4;
      v9 = v135;
    }
    else
    {
      if (!v136)
        goto LABEL_19;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
    v11 = (_QWORD *)operator new();
    *v11 = &off_1E95ABE48;
    v106[0] = *(_QWORD *)(v2 + 24);
    v12 = (CFTypeRef)atomic_load((unint64_t *)(v2 + 32));
    if (v12)
      v12 = CFRetain(v12);
    v106[1] = (unint64_t)v12;
    v13 = (CFTypeRef)atomic_load((unint64_t *)(v2 + 40));
    if (v13)
      v13 = CFRetain(v13);
    v106[2] = (unint64_t)v13;
    v14 = *(_OWORD *)(v2 + 48);
    v15 = *(_OWORD *)(v2 + 64);
    v109 = *(_WORD *)(v2 + 80);
    v108 = v15;
    v107 = v14;
    v110 = v11;
    v111[0] = 0;
    v113 = 0;
    v124 = 0;
    v125 = 0;
    v114 = 0u;
    v115 = 0u;
    memset(v116, 0, 41);
    v126 = 1;
    if (qword_1EFE31860 != -1)
      dispatch_once(&qword_1EFE31860, &unk_1E95B04F0);
    v16 = qword_1EFE31858;
    v17 = os_log_type_enabled((os_log_t)qword_1EFE31858, OS_LOG_TYPE_DEBUG);
    if (v17)
    {
      *(_WORD *)__p = 0;
      _os_log_debug_impl(&dword_1D3D6B000, v16, OS_LOG_TYPE_DEBUG, "IIEModel::create: shouldMakeReadyImmediately is set to true", __p, 2u);
    }
    if (v113)
    {
      if (v124)
      {
        if (v121)
        {
          if (atomic_load(&v125))
          {
LABEL_164:
            __p[0] = 0;
            v132 = 0;
            if (v126)
            {
              sub_1D3DFB388((uint64_t)__p, (uint64_t)v106);
              v132 = 1;
              if (v126)
                sub_1D3DFB558((uint64_t)v106);
            }
            v93 = v139;
            if (*((_BYTE *)v137 + 8))
            {
              if (!v139)
                goto LABEL_175;
              v106[0] = *v137;
              (*(void (**)(void))(*v139 + 48))();
              v93 = v139;
            }
            if (v93 == v138)
            {
              v94 = 4;
              v93 = v138;
            }
            else
            {
              if (!v93)
                goto LABEL_175;
              v94 = 5;
            }
            (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_175:
            v95 = v132;
            if (*(unsigned __int8 *)(v2 + 496) == v132)
            {
              if (!*(_BYTE *)(v2 + 496))
                goto LABEL_182;
              v96 = sub_1D3DFB558(v2 + 88);
              sub_1D3DFB388(v96, (uint64_t)__p);
            }
            else if (*(_BYTE *)(v2 + 496))
            {
              sub_1D3DFB558(v2 + 88);
              *(_BYTE *)(v2 + 496) = 0;
            }
            else
            {
              sub_1D3DFB388(v2 + 88, (uint64_t)__p);
              *(_BYTE *)(v2 + 496) = 1;
            }
            v95 = v132;
LABEL_182:
            if (v95)
              sub_1D3DFB558((uint64_t)__p);
            dispatch_group_leave(*(dispatch_group_t *)(v2 + 608));
            if (!*(_BYTE *)(v2 + 496))
              goto LABEL_191;
            goto LABEL_185;
          }
        }
      }
    }
    v143 = v142;
    v140[0] = &off_1E95AD730;
    v141 = v140;
    v142[0] = &off_1E95AD6D8;
    v146 = v145;
    v144 = &v104;
    v145[0] = &off_1E95AD730;
    if (!v105 || (*(_QWORD *)__p = v104, sub_1D3DFB630(v17, (os_signpost_id_t *)__p), v19 = v141, v141 == v140))
    {
      v20 = 4;
      v19 = v140;
    }
    else
    {
      if (!v141)
        goto LABEL_37;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_37:
    v21 = v143;
    if (v143 == v142)
    {
      v22 = 4;
      v21 = v142;
    }
    else
    {
      if (!v143)
        goto LABEL_42;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_42:
    v127[0] = (*(uint64_t (**)(_QWORD *))(*v110 + 16))(v110);
    v127[1] = v23;
    v24 = (*(uint64_t (**)(_QWORD *))(*v110 + 24))(v110);
    v25 = (*(uint64_t (**)(_QWORD *))(*v110 + 32))(v110);
    v26 = (*(uint64_t (**)(_QWORD *))(*v110 + 40))(v110);
    v27 = (*(uint64_t (**)(_QWORD *))(*v110 + 48))(v110);
    sub_1D3D88124(__p, (uint64_t)v127, v24, v25, v26, v27, v106, v2 + 504, (uint64_t)&v104);
    sub_1D3DAD064((uint64_t)v111, (uint64_t)__p);
    if (v131)
      sub_1D3D85FD8((uint64_t)__p);
    if (!v113)
      goto LABEL_152;
    if (!v124)
    {
      (*(void (**)(_QWORD *))(*v110 + 56))(v110);
      v29 = v28;
      (*(void (**)(_QWORD *))(*v110 + 56))(v110);
      v31 = v30;
      if (v124 && v121)
        free(v120);
      v32 = *(_QWORD *)(v31 + 56);
      v117 = *(_QWORD *)(v29 + 64);
      v118 = v32;
      v119 = 1278226488;
      *(_QWORD *)&v116[40] = &off_1E95AEF20;
      LOBYTE(v120) = 0;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v124 = 1;
    }
    if ((sub_1D3DF614C((uint64_t)&v116[40], v2 + 504, (uint64_t)&v104) & 1) == 0)
      goto LABEL_152;
    v33 = v110;
    if ((_QWORD)v114)
      goto LABEL_52;
    v58 = (char *)(*(uint64_t (**)(_QWORD *))(*v110 + 56))(v110);
    sub_1D3D81D4C(__p, v58);
    sub_1D3D862A0(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
    v59 = (_QWORD *)v127[0];
    v127[0] = 0;
    v60 = v114;
    *(_QWORD *)&v114 = v59;
    if (v60)
    {
      sub_1D3D82720(v60 + 16);
      MEMORY[0x1D8254C54](v60, 0x1062C40434092AELL);
      v59 = (_QWORD *)v114;
    }
    if (v59)
    {
      (*(void (**)(_QWORD *))(*v110 + 56))(v110);
      v62 = sub_1D3D823D4(v59, v61, (unint64_t *)(v2 + 504));
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v62)
      {
        v33 = v110;
LABEL_52:
        if (*((_QWORD *)&v114 + 1))
        {
LABEL_53:
          if ((_QWORD)v115)
            goto LABEL_54;
          v68 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 72))(v33);
          sub_1D3D81D4C(__p, v68);
          sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
          v69 = (_QWORD *)v127[0];
          v127[0] = 0;
          v70 = v115;
          *(_QWORD *)&v115 = v69;
          if (v70)
          {
            sub_1D3D82720(v70 + 16);
            MEMORY[0x1D8254C54](v70, 0x1062C40434092AELL);
            v69 = (_QWORD *)v115;
          }
          if (v69
            && ((*(void (**)(_QWORD *))(*v110 + 72))(v110),
                sub_1D3D82524(v69, v71, (unint64_t *)(v2 + 504))))
          {
            v72 = sub_1D3D831A4(v115, v2 + 504);
            sub_1D3DACF78(v127, 0);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (v72)
            {
              v33 = v110;
LABEL_54:
              if (*((_QWORD *)&v115 + 1))
                goto LABEL_55;
              v73 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 80))(v33);
              sub_1D3D81D4C(__p, v73);
              sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
              v74 = (_QWORD *)v127[0];
              v127[0] = 0;
              v75 = *((_QWORD *)&v115 + 1);
              *((_QWORD *)&v115 + 1) = v74;
              if (v75)
              {
                sub_1D3D82720(v75 + 16);
                MEMORY[0x1D8254C54](v75, 0x1062C40434092AELL);
                v74 = (_QWORD *)*((_QWORD *)&v115 + 1);
              }
              if (v74
                && ((*(void (**)(_QWORD *))(*v110 + 80))(v110),
                    sub_1D3D82524(v74, v76, (unint64_t *)(v2 + 504))))
              {
                v77 = sub_1D3D831A4(*((uint64_t *)&v115 + 1), v2 + 504);
                sub_1D3DACF78(v127, 0);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                if (v77)
                {
                  v33 = v110;
LABEL_55:
                  if (!*(_QWORD *)v116)
                  {
                    v79 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 88))(v33);
                    sub_1D3D81D4C(__p, v79);
                    sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
                    v80 = (uint64_t *)v116;
                    v81 = v127[0];
                    v127[0] = 0;
                    sub_1D3DACF78((uint64_t *)v116, v81);
                    v82 = *(_QWORD **)v116;
                    if (!*(_QWORD *)v116
                      || ((*(void (**)(_QWORD *))(*v110 + 88))(v110),
                          !sub_1D3D82524(v82, v83, (unint64_t *)(v2 + 504))))
                    {
LABEL_147:
                      sub_1D3DACF78(v127, 0);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
LABEL_149:
                      v78 = v80;
                      goto LABEL_151;
                    }
                    v84 = sub_1D3D831A4(*(uint64_t *)v116, v2 + 504);
                    sub_1D3DACF78(v127, 0);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    if (!v84)
                      goto LABEL_149;
                    v33 = v110;
                  }
                  if (*(_QWORD *)&v116[8])
                  {
LABEL_57:
                    v34 = (*(uint64_t (**)(_QWORD *))(*v33 + 104))(v33);
                    if (!v35)
                    {
LABEL_81:
                      if (atomic_load(&v125))
                        goto LABEL_88;
                      sub_1D3DF3500((CVPixelBufferPoolRef *)__p, *(_QWORD *)(v114 + 8) + 16, (unint64_t *)(v2 + 504));
                      do
                        v54 = __ldaxr((unint64_t *)__p);
                      while (__stlxr(0, (unint64_t *)__p));
                      do
                        v55 = (const void *)__ldaxr(&v125);
                      while (__stlxr(v54, &v125));
                      if (v55)
                        CFRelease(v55);
                      sub_1D3D982CC((unint64_t *)__p);
                      if (atomic_load(&v125))
                      {
LABEL_88:
                        LOBYTE(v57) = 1;
                        goto LABEL_153;
                      }
                      goto LABEL_152;
                    }
                    v36 = (char **)v34;
                    v103 = (char **)(v34 + 8 * v35);
                    while (1)
                    {
                      sub_1D3D81D4C(__p, *v36);
                      sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      v37 = v127[0];
                      if (!v127[0] || (sub_1D3D831A4(v127[0], v2 + 504) & 1) == 0)
                        break;
                      v38 = *(_QWORD *)&v116[24];
                      if (*(_QWORD *)&v116[24] >= *(_QWORD *)&v116[32])
                      {
                        v39 = (uint64_t)(*(_QWORD *)&v116[24] - *(_QWORD *)&v116[16]) >> 3;
                        v40 = v39 + 1;
                        if ((unint64_t)(v39 + 1) >> 61)
                          sub_1D3D6D4F8();
                        v41 = *(_QWORD *)&v116[32] - *(_QWORD *)&v116[16];
                        if ((uint64_t)(*(_QWORD *)&v116[32] - *(_QWORD *)&v116[16]) >> 2 > v40)
                          v40 = v41 >> 2;
                        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                          v42 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v42 = v40;
                        v130 = &v116[32];
                        if (v42)
                          v42 = (unint64_t)sub_1D3D6D8A0(v42);
                        else
                          v43 = 0;
                        v44 = (uint64_t *)(v42 + 8 * v39);
                        v45 = v42 + 8 * v43;
                        v129 = v45;
                        v127[0] = 0;
                        *v44 = v37;
                        v46 = v44 + 1;
                        *(_QWORD *)&__p[16] = v44 + 1;
                        v47 = *(_QWORD **)&v116[24];
                        v48 = *(_QWORD **)&v116[16];
                        if (*(_QWORD *)&v116[24] == *(_QWORD *)&v116[16])
                        {
                          v51 = 0;
                          v50 = vdupq_n_s64(*(unint64_t *)&v116[24]);
                        }
                        else
                        {
                          do
                          {
                            v49 = *--v47;
                            *v47 = 0;
                            *--v44 = v49;
                          }
                          while (v47 != v48);
                          v50 = *(int64x2_t *)&v116[16];
                          v46 = *(_QWORD **)&__p[16];
                          v45 = v129;
                          v51 = v127[0];
                        }
                        *(_QWORD *)&v116[16] = v44;
                        *(_QWORD *)&v116[24] = v46;
                        *(int64x2_t *)&__p[8] = v50;
                        v52 = *(_QWORD *)&v116[32];
                        *(_QWORD *)&v116[32] = v45;
                        v129 = v52;
                        *(_QWORD *)__p = v50.i64[0];
                        sub_1D3DAD13C((uint64_t)__p);
                        *(_QWORD *)&v116[24] = v46;
                        v127[0] = 0;
                        if (v51)
                        {
                          sub_1D3D82720(v51 + 16);
                          MEMORY[0x1D8254C54](v51, 0x1062C40434092AELL);
                        }
                      }
                      else
                      {
                        **(_QWORD **)&v116[24] = v37;
                        *(_QWORD *)&v116[24] = v38 + 8;
                      }
                      if (++v36 == v103)
                        goto LABEL_81;
                    }
                    v78 = v127;
                    goto LABEL_151;
                  }
                  v85 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 96))(v33);
                  sub_1D3D81D4C(__p, v85);
                  sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
                  v80 = (uint64_t *)&v116[8];
                  v86 = v127[0];
                  v127[0] = 0;
                  sub_1D3DACF78((uint64_t *)&v116[8], v86);
                  v87 = *(_QWORD **)&v116[8];
                  if (*(_QWORD *)&v116[8])
                  {
                    (*(void (**)(_QWORD *))(*v110 + 96))(v110);
                    if (sub_1D3D82524(v87, v88, (unint64_t *)(v2 + 504)))
                    {
                      v89 = sub_1D3D831A4(*(uint64_t *)&v116[8], v2 + 504);
                      sub_1D3DACF78(v127, 0);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      if (v89)
                      {
                        v33 = v110;
                        goto LABEL_57;
                      }
                      goto LABEL_149;
                    }
                  }
                  goto LABEL_147;
                }
              }
              else
              {
                sub_1D3DACF78(v127, 0);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              v78 = (uint64_t *)&v115 + 1;
LABEL_151:
              sub_1D3DACF78(v78, 0);
              goto LABEL_152;
            }
          }
          else if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
          }
          v57 = v115;
          *(_QWORD *)&v115 = 0;
          if (!v57)
            goto LABEL_153;
LABEL_123:
          sub_1D3D82720(v57 + 16);
          MEMORY[0x1D8254C54](v57, 0x1062C40434092AELL);
LABEL_152:
          LOBYTE(v57) = 0;
          goto LABEL_153;
        }
        v63 = (char *)(*(uint64_t (**)(_QWORD *))(*v33 + 64))(v33);
        sub_1D3D81D4C(__p, v63);
        sub_1D3D86FC8(v127, (uint64_t)v111, (uint64_t)__p, v2 + 504);
        v64 = (_QWORD *)v127[0];
        v127[0] = 0;
        v65 = *((_QWORD *)&v114 + 1);
        *((_QWORD *)&v114 + 1) = v64;
        if (v65)
        {
          sub_1D3D82720(v65 + 16);
          MEMORY[0x1D8254C54](v65, 0x1062C40434092AELL);
          v64 = (_QWORD *)*((_QWORD *)&v114 + 1);
        }
        if (v64
          && ((*(void (**)(_QWORD *))(*v110 + 64))(v110),
              sub_1D3D82524(v64, v66, (unint64_t *)(v2 + 504))))
        {
          v67 = sub_1D3D831A4(*((uint64_t *)&v114 + 1), v2 + 504);
          sub_1D3DACF78(v127, 0);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (v67)
          {
            v33 = v110;
            goto LABEL_53;
          }
        }
        else if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
        }
        v57 = *((_QWORD *)&v114 + 1);
        *((_QWORD *)&v114 + 1) = 0;
        if (v57)
          goto LABEL_123;
LABEL_153:
        v90 = v146;
        if (*((_BYTE *)v144 + 8))
        {
          if (!v146)
            goto LABEL_161;
          *(_QWORD *)__p = *v144;
          (*(void (**)(void))(*v146 + 48))();
          v90 = v146;
        }
        if (v90 == v145)
        {
          v91 = 4;
          v90 = v145;
          goto LABEL_160;
        }
        if (v90)
        {
          v91 = 5;
LABEL_160:
          (*(void (**)(void))(*v90 + 8 * v91))();
        }
LABEL_161:
        if ((v57 & 1) == 0 && os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          sub_1D3DF53CC((CFErrorRef *)&v144, v2 + 504);
          v92 = atomic_load((unint64_t *)&v144);
          *(_DWORD *)__p = 138543362;
          *(_QWORD *)&__p[4] = v92;
          _os_log_impl(&dword_1D3D6B000, v16, OS_LOG_TYPE_INFO, "Failed to prepare model: %{public}@", __p, 0xCu);
          sub_1D3D7448C((unint64_t *)&v144);
        }
        goto LABEL_164;
      }
    }
    else if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
    }
    v57 = v114;
    *(_QWORD *)&v114 = 0;
    if (v57)
      goto LABEL_123;
    goto LABEL_153;
  }
LABEL_185:
  if (*(_BYTE *)(v2 + 288))
  {
    if (*(_BYTE *)(v2 + 480))
    {
      if (*(_BYTE *)(v2 + 432))
      {
        if (atomic_load((unint64_t *)(v2 + 488)))
        {
          v98 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)__p = v2 + 88;
          __p[8] = 1;
          LOBYTE(v106[0]) = 0;
          v112 = 0;
          v99 = *(_QWORD *)(v98 + 24);
          if (!v99)
            sub_1D3D75A24();
          result = (unint64_t *)(*(uint64_t (**)(uint64_t, _BYTE *, unint64_t *))(*(_QWORD *)v99 + 48))(v99, __p, v106);
          goto LABEL_4;
        }
      }
    }
  }
LABEL_191:
  v100 = *(_QWORD *)(a1 + 16);
  LOBYTE(v144) = 0;
  LOBYTE(v145[0]) = 0;
  v101 = *(unsigned __int8 *)(v2 + 600);
  if (*(_BYTE *)(v2 + 600))
  {
    sub_1D3DF4F6C((uint64_t)v106, v2 + 504);
  }
  else
  {
    sub_1D3DF4E68((uint64_t)__p, -1, 0);
    sub_1D3DF50BC(v106, (uint64_t *)__p);
  }
  v112 = 1;
  v102 = *(_QWORD *)(v100 + 24);
  if (!v102)
    sub_1D3D75A24();
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, os_signpost_id_t **, unint64_t *))(*(_QWORD *)v102 + 48))(v102, &v144, v106);
  if (v112)
    result = sub_1D3DF4F24(v106);
  if (!v101)
  {
    v6 = (unint64_t *)__p;
    return sub_1D3DF4F24(v6);
  }
  return result;
}

void sub_1D3DFD5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *__p;
  uint64_t v69;

  sub_1D3D982CC((unint64_t *)&__p);
  sub_1D3D87C3C((_QWORD *)(v69 - 144));
  if (a66)
    sub_1D3DFB558((uint64_t)&a15);
  sub_1D3D87C3C((_QWORD *)(v69 - 248));
  _Unwind_Resume(a1);
}

uint64_t sub_1D3DFD71C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie12_GLOBAL__N_110IIEContext7performENSt3__18functionIFvONS4_8optionalINS4_17reference_wrapperINS1_8IIEModelEEEEEONS6_INS_5ErrorEEEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFD754()
{
  return &unk_1E95AEB40;
}

void sub_1D3DFD764()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFD778()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AFCD0;
  return result;
}

void sub_1D3DFD79C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AFCD0;
}

uint64_t sub_1D3DFD7B4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
  {
    sub_1D3D96F10(result);
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

uint64_t sub_1D3DFD7E8(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc7Context3Any4makeINS_9inference3iie12_GLOBAL__N_110IIEContextEvEES1_RKNS0_7OptionsEP16dispatch_queue_sEUlPvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFD820()
{
  return &unk_1E95AEB20;
}

void sub_1D3DFD830(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3DFD854(uint64_t a1)
{
  return sub_1D3DFC584(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1D3DFD85C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN3mrc9inference3iie12_GLOBAL__N_110IIEContextEE27__shared_ptr_default_deleteIS5_S5_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1D3DFD898(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E95AEE80;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_1D3DFD8D4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E95AEE80;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3DFD920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 616))();
  if (*(_BYTE *)(a1 + 600))
    sub_1D3DF4F24((unint64_t *)(a1 + 504));
  if (*(_BYTE *)(a1 + 496))
    sub_1D3DFB558(a1 + 88);
  sub_1D3D8BA0C((unint64_t *)(a1 + 40));
  sub_1D3D8BA0C((unint64_t *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E95AEE80;
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_1D3DFD9A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 616))();
  if (*(_BYTE *)(a1 + 600))
    sub_1D3DF4F24((unint64_t *)(a1 + 504));
  if (*(_BYTE *)(a1 + 496))
    sub_1D3DFB558(a1 + 88);
  sub_1D3D8BA0C((unint64_t *)(a1 + 40));
  sub_1D3D8BA0C((unint64_t *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E95AEE80;
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x1D8254C54);
}

unint64_t *sub_1D3DFDA30@<X0>(uint64_t a1@<X0>, CFErrorRef *a2@<X8>)
{
  unint64_t *result;
  uint64_t v4;
  unint64_t v5[12];
  char v6;
  _QWORD v7[3];
  unint64_t *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  LOBYTE(v5[0]) = 0;
  v6 = 0;
  v7[0] = &off_1E95AD5D0;
  v7[1] = v5;
  v8 = v7;
  sub_1D3DFBE58(a1, v7);
  result = v8;
  if (v8 == v7)
  {
    v4 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  result = (unint64_t *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_6:
  if (v6)
  {
    result = sub_1D3DF53CC(a2, (uint64_t)v5);
    if (v6)
      return sub_1D3DF4F24(v5);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_1D3DFDB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
    sub_1D3DF4F24((unint64_t *)&a9);
  _Unwind_Resume(exception_object);
}

void sub_1D3DFDB54()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3DFDB68(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95AD5D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1D3DFDB9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95AD5D0;
  a2[1] = v2;
  return result;
}

unint64_t *sub_1D3DFDBB8(unint64_t *result, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;

  if (!a2[8])
    return sub_1D3D74C98((unint64_t *)result[1], a3);
  v3 = *(_QWORD *)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 200))
    return sub_1D3D74C98((unint64_t *)result[1], a3);
  if (!*(_BYTE *)(v3 + 392))
    return sub_1D3D74C98((unint64_t *)result[1], a3);
  if (!*(_BYTE *)(v3 + 344))
    return sub_1D3D74C98((unint64_t *)result[1], a3);
  if (!atomic_load((unint64_t *)(v3 + 400)))
    return sub_1D3D74C98((unint64_t *)result[1], a3);
  return result;
}

uint64_t sub_1D3DFDBF8(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference3iie8IIEModel19preflightForContextERNS_7ContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3DFDC30()
{
  return &unk_1E95ACF78;
}

uint64_t sub_1D3DFDC3C(int *a1, unsigned int a2, int a3, char a4)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  int *v28;
  uint64_t v30;
  int v31;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v4 = a4;
  LODWORD(v6) = 0;
  v7 = 4 * a2;
  v8 = a1;
  do
  {
    v9 = *v8++;
    v6 = (v9 + v6);
    v7 -= 4;
  }
  while (v7);
  v10 = 0;
  v36 = 0;
  v11 = 0;
  v12 = a2 - 1;
  v31 = a2 - 3;
  v27 = v12;
  v28 = a1;
  do
  {
    v13 = 1 << v10;
    v14 = a1[v10];
    if (v14 < 2)
    {
      v36 |= v13;
      v14 = 1;
    }
    else
    {
      v34 = a2 - v10 - 1;
      v35 = a2 - v10;
      v15 = a2 - v10 - 3;
      v30 = v10;
      v33 = v10 - v12;
      v36 &= ~v13;
      v37 = a2 - v10 - 2;
      v16 = 1;
      v17 = 1;
      do
      {
        v18 = v6;
        v19 = v6 - v16;
        v20 = sub_1D3D7CF00((int)v6 - v16 - 1, v37);
        if ((v4 & 1) != 0 || v17)
        {
          v21 = v35;
        }
        else
        {
          v21 = v35;
          if (v19 - v34 >= v34)
            v20 -= sub_1D3D7CF00(v19 - v35, v37);
        }
        if (v21 < 3)
        {
          v25 = v20 - (v19 > a3);
        }
        else
        {
          v22 = v19 - v37;
          if (v19 - v37 <= a3)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            v24 = v31;
            do
            {
              v23 += sub_1D3D7CF00(v24, v15);
              --v22;
              ++v24;
            }
            while (v22 > a3);
          }
          v25 = v20 + v23 * v33;
          v4 = a4;
        }
        v6 = v18;
        v11 = (v25 + v11);
        ++v16;
        v17 = v36;
      }
      while (v16 != v14);
      v12 = v27;
      a1 = v28;
      v10 = v30;
    }
    v6 = (v6 - v14);
    ++v10;
    --v31;
  }
  while (v10 != v12);
  return v11;
}

_QWORD *sub_1D3DFDE10(_QWORD *a1)
{
  *a1 = &off_1E95AF970;
  sub_1D3D7F558(a1 + 2);
  return a1;
}

void sub_1D3DFDE40(_QWORD *a1)
{
  *a1 = &off_1E95AF970;
  sub_1D3D7F558(a1 + 2);
  JUMPOUT(0x1D8254C54);
}

unsigned int **sub_1D3DFDE80(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

void sub_1D3DFDEB0(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1D3DFDE80(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D3DFDF20()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int **v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int **v47;
  unsigned int *v49;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = 0;
  qword_1EDB89E60 = v0;
  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  v2 = (unsigned int *)(v1 + 8);
  *(_QWORD *)v1 = &off_1E95AF738;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v49 = (unsigned int *)v1;
  v4 = *(_QWORD *)(v0 + 8);
  if (v4 >= *(_QWORD *)(v0 + 16))
  {
    v5 = sub_1D3DFE3F4((unsigned int ***)v0, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v0, &v49);
    v5 = (unsigned int **)(v4 + 8);
  }
  *(_QWORD *)(v0 + 8) = v5;
  sub_1D3DFE5BC(&v49);
  v6 = qword_1EDB89E60;
  v7 = operator new();
  *(_QWORD *)(v7 + 8) = 0;
  v8 = (unsigned int *)(v7 + 8);
  *(_QWORD *)v7 = &off_1E95AF760;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v49 = (unsigned int *)v7;
  v10 = *(_QWORD *)(v6 + 8);
  if (v10 >= *(_QWORD *)(v6 + 16))
  {
    v11 = sub_1D3DFE3F4((unsigned int ***)v6, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v6, &v49);
    v11 = (unsigned int **)(v10 + 8);
  }
  *(_QWORD *)(v6 + 8) = v11;
  sub_1D3DFE5BC(&v49);
  v12 = qword_1EDB89E60;
  v13 = operator new();
  *(_QWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)v13 = &off_1E95AF788;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v49 = (unsigned int *)v13;
  v16 = *(_QWORD *)(v12 + 8);
  if (v16 >= *(_QWORD *)(v12 + 16))
  {
    v17 = sub_1D3DFE3F4((unsigned int ***)v12, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v12, &v49);
    v17 = (unsigned int **)(v16 + 8);
  }
  *(_QWORD *)(v12 + 8) = v17;
  sub_1D3DFE5BC(&v49);
  v18 = qword_1EDB89E60;
  v19 = operator new();
  *(_QWORD *)(v19 + 8) = 0;
  v20 = (unsigned int *)(v19 + 8);
  *(_QWORD *)v19 = &off_1E95AF7B0;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v49 = (unsigned int *)v19;
  v22 = *(_QWORD *)(v18 + 8);
  if (v22 >= *(_QWORD *)(v18 + 16))
  {
    v23 = sub_1D3DFE3F4((unsigned int ***)v18, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v18, &v49);
    v23 = (unsigned int **)(v22 + 8);
  }
  *(_QWORD *)(v18 + 8) = v23;
  sub_1D3DFE5BC(&v49);
  v24 = qword_1EDB89E60;
  v25 = operator new();
  *(_QWORD *)(v25 + 8) = 0;
  v26 = (unsigned int *)(v25 + 8);
  *(_QWORD *)v25 = &off_1E95AF7D8;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  v49 = (unsigned int *)v25;
  v28 = *(_QWORD *)(v24 + 8);
  if (v28 >= *(_QWORD *)(v24 + 16))
  {
    v29 = sub_1D3DFE3F4((unsigned int ***)v24, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v24, &v49);
    v29 = (unsigned int **)(v28 + 8);
  }
  *(_QWORD *)(v24 + 8) = v29;
  sub_1D3DFE5BC(&v49);
  v30 = qword_1EDB89E60;
  v31 = operator new();
  *(_QWORD *)(v31 + 8) = 0;
  v32 = (unsigned int *)(v31 + 8);
  *(_QWORD *)v31 = &off_1E95AF800;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  v49 = (unsigned int *)v31;
  v34 = *(_QWORD *)(v30 + 8);
  if (v34 >= *(_QWORD *)(v30 + 16))
  {
    v35 = sub_1D3DFE3F4((unsigned int ***)v30, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v30, &v49);
    v35 = (unsigned int **)(v34 + 8);
  }
  *(_QWORD *)(v30 + 8) = v35;
  sub_1D3DFE5BC(&v49);
  v36 = qword_1EDB89E60;
  v37 = operator new();
  *(_QWORD *)(v37 + 8) = 0;
  v38 = (unsigned int *)(v37 + 8);
  *(_QWORD *)v37 = &off_1E95AF828;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v49 = (unsigned int *)v37;
  v40 = *(_QWORD *)(v36 + 8);
  if (v40 >= *(_QWORD *)(v36 + 16))
  {
    v41 = sub_1D3DFE3F4((unsigned int ***)v36, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v36, &v49);
    v41 = (unsigned int **)(v40 + 8);
  }
  *(_QWORD *)(v36 + 8) = v41;
  sub_1D3DFE5BC(&v49);
  v42 = qword_1EDB89E60;
  v43 = operator new();
  *(_QWORD *)(v43 + 8) = 0;
  v44 = (unsigned int *)(v43 + 8);
  *(_QWORD *)v43 = &off_1E95AF850;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v49 = (unsigned int *)v43;
  v46 = *(_QWORD *)(v42 + 8);
  if (v46 >= *(_QWORD *)(v42 + 16))
  {
    v47 = sub_1D3DFE3F4((unsigned int ***)v42, &v49);
  }
  else
  {
    sub_1D3DFE390((unsigned int *)v42, &v49);
    v47 = (unsigned int **)(v46 + 8);
  }
  *(_QWORD *)(v42 + 8) = v47;
  sub_1D3DFE5BC(&v49);
  return (*(_QWORD *)(qword_1EDB89E60 + 8) - *(_QWORD *)qword_1EDB89E60) >> 3;
}

void sub_1D3DFE360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DFE5BC((unsigned int **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_1D3DFE390(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3DFE3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DFE3F4(unsigned int ***a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  unint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  int64x2_t v24;
  char *v25;
  char *v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_1D3D6D4F8();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v30 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61)
      sub_1D3D6D50C();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned int **)&v8[8 * v2];
  v27 = v8;
  v28.i64[0] = (uint64_t)v9;
  v28.i64[1] = (uint64_t)v9;
  v29 = &v8[8 * v7];
  *v9 = 0;
  v10 = *a2;
  v11 = v9;
  v12 = v9;
  if (v10)
  {
    v13 = v10 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = v9;
    v12 = v9;
    if (*v9)
    {
      sub_1D3D6D13C(*v9);
      v12 = (unsigned int **)v28.i64[1];
      v11 = (unsigned int **)v28.i64[0];
    }
  }
  *v9 = v10;
  v15 = v12 + 1;
  v28.i64[1] = (uint64_t)(v12 + 1);
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((unsigned int **)v16 == *a1)
  {
    v24 = vdupq_n_s64(v16);
  }
  else
  {
    v18 = 0;
    v19 = v11;
    do
    {
      *--v19 = 0;
      v21 = *(unsigned int **)(v16 - 8);
      v16 -= 8;
      v20 = v21;
      if (v21)
      {
        v22 = v20 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        if (*v19)
          sub_1D3D6D13C(*v19);
      }
      *v19 = v20;
      v18 -= 8;
    }
    while ((unsigned int **)v16 != v17);
    v24 = *(int64x2_t *)a1;
    v15 = (unsigned int **)v28.i64[1];
    v11 = v19;
  }
  *a1 = v11;
  a1[1] = v15;
  v28 = v24;
  v25 = (char *)a1[2];
  a1[2] = (unsigned int **)v29;
  v29 = v25;
  v27 = (char *)v24.i64[0];
  sub_1D3DFE780((uint64_t)&v27);
  return v15;
}

void sub_1D3DFE588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DFE780((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DFE5BC(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

void sub_1D3DFE5F0()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (((_DWORD)a3
         + (_DWORD)a2
         + (_DWORD)a3 * (_DWORD)a2
         - ((((unint64_t)(a3 * a2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) >> 1)) & 1) == 0;
}

void sub_1D3DFE630()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (((_DWORD)a3 * (_DWORD)a2
         - ((((unint64_t)(a3 * a2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) >> 1)
         + (_DWORD)a3 * (_DWORD)a2) & 1) == 0;
}

void sub_1D3DFE66C()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * a2) & 1) == 3 * (a3 * a2 / 3uLL) - a3 * a2;
}

void sub_1D3DFE6B4()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE6C8(uint64_t a1, unsigned int a2, unint64_t a3)
{
  return ((((a3 / 3) & 0x7FFFFFFF) + (a2 >> 1)) & 1) == 0;
}

void sub_1D3DFE6EC()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0xAAAAAAAAAAAAAAABLL * (a3 + a2) < 0x5555555555555556;
}

void sub_1D3DFE728()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0xAAAAAAAAAAAAAAABLL * a3 < 0x5555555555555556;
}

void sub_1D3DFE760()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE774(uint64_t a1, char a2)
{
  return (a2 & 1) == 0;
}

uint64_t sub_1D3DFE780(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3DFE5BC((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D3DFE7D0()
{
  JUMPOUT(0x1D8254C54);
}

BOOL sub_1D3DFE7E4(uint64_t a1, int a2, int a3)
{
  return ((a3 + a2) & 1) == 0;
}

std::string *sub_1D3DFE7F4(std::string *result, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  std::string::size_type v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  _QWORD *exception;
  int v17;
  uint64_t v18;
  const char *v19;
  std::string::size_type v20;
  uint8_t buf[4];
  int v22;
  _BYTE v23[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = result;
    v8 = MEMORY[0x1D8255020]("UTF-8", a4);
    if (v8 == -1)
    {
      if (qword_1EFE31880 != -1)
        dispatch_once(&qword_1EFE31880, &unk_1E95B3648);
      v13 = qword_1EFE31878;
      if (os_log_type_enabled((os_log_t)qword_1EFE31878, OS_LOG_TYPE_ERROR))
      {
        v17 = *__error();
        *(_DWORD *)v23 = 136446722;
        *(_QWORD *)&v23[4] = "UTF-8";
        v24 = 2082;
        v25 = a4;
        v26 = 1026;
        v27 = v17;
        _os_log_error_impl(&dword_1D3D6B000, v13, OS_LOG_TYPE_ERROR, "[QR] iconv_open(\"%{public}s\", \"%{public}s\") failed: %{public, errno}d", v23, 0x1Cu);
      }
      return std::string::append(v7, a2, a3);
    }
    else
    {
      v9 = v8;
      v10 = (4 * a3) | 1;
      v11 = (const char *)operator new[]();
      *(_QWORD *)v23 = a2;
      v19 = v11;
      v20 = a3;
      v18 = v10;
      do
      {
        if (MEMORY[0x1D8255008](v9, v23, &v20, &v19, &v18) == -1)
        {
          if (qword_1EFE31880 != -1)
            dispatch_once(&qword_1EFE31880, &unk_1E95B3648);
          v14 = qword_1EFE31878;
          if (os_log_type_enabled((os_log_t)qword_1EFE31878, OS_LOG_TYPE_ERROR))
          {
            v15 = *__error();
            *(_DWORD *)buf = 67240192;
            v22 = v15;
            _os_log_error_impl(&dword_1D3D6B000, v14, OS_LOG_TYPE_ERROR, "[QR] iconv failed: %{public, errno}d", buf, 8u);
          }
          MEMORY[0x1D8255014](v9);
          MEMORY[0x1D8254C3C](v11, 0x1000C8077774924);
          exception = __cxa_allocate_exception(0x20uLL);
          sub_1D3E17508(exception, "error converting characters");
          __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
        }
      }
      while (v20);
      MEMORY[0x1D8255014](v9);
      v11[v10 - (int)v18] = 0;
      v12 = strlen(v11);
      std::string::append(v7, v11, v12);
      return (std::string *)MEMORY[0x1D8254C3C](v11, 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1D3DFEAA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3DFEAC4(uint64_t *a1, std::string *a2, int a3)
{
  std::string::size_type v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;

  v5 = 2 * a3;
  v6 = operator new[]();
  v7 = (const std::string::value_type *)v6;
  if (a3 >= 1)
  {
    v8 = v6 + 1;
    v9 = a3 + 1;
    do
    {
      v10 = sub_1D3DA34C8(*a1, 13);
      v11 = (v10 % 192) | ((v10 / 192) << 8);
      if (v11 >= 7936)
        v12 = 49472;
      else
        v12 = 33088;
      *(_WORD *)(v8 - 1) = bswap32(v12 + v11) >> 16;
      v8 += 2;
      --v9;
    }
    while (v9 > 1);
  }
  sub_1D3DFE7F4(a2, v7, v5, (uint64_t)"SHIFT_JISX0213");
  JUMPOUT(0x1D8254C3CLL);
}

_QWORD *sub_1D3DFEBD4(uint64_t a1, std::string *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string::size_type v12;
  uint64_t v13;
  const std::string::value_type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  const std::string::value_type *v34;
  int v35;
  char v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v41;
  char v42;
  char *v44;
  const char *v45;
  const char *v47;
  const char *v48;
  std::string *p_p;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  std::string::size_type v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  std::string::size_type size;
  unsigned int **v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  std::string::size_type v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t i;
  std::string::size_type v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  _QWORD *exception;
  std::string __p;
  _QWORD v80[2];
  uint64_t v81;
  std::string __dst;
  char *v83;
  _QWORD *v84;

  if (8 * (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) - *(_DWORD *)(a1 + 40))
     - *(_DWORD *)(a1 + 44) < 8 * a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = &off_1E95AF330;
    exception[1] = 0;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
  }
  v12 = a3;
  sub_1D3D81C50((uint64_t)v80, a3);
  if (a3 < 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = *(const std::string::value_type **)(v81 + 16);
    do
      v14[v13++] = sub_1D3DA34C8(a1, 8);
    while (a3 != v13);
  }
  memset(&__p, 0, sizeof(__p));
  if (a4)
  {
    sub_1D3DFF314(&__p, **(char ***)(a4 + 8));
    goto LABEL_116;
  }
  v17 = *(_QWORD *)(a6 + 8);
  v16 = a6 + 8;
  v15 = v17;
  if (!v17)
    goto LABEL_21;
  v18 = v16;
  do
  {
    v19 = *(_DWORD *)(v15 + 32) >> 30;
    v20 = v19 == 0;
    if (v19)
      v21 = (uint64_t *)v15;
    else
      v21 = (uint64_t *)(v15 + 8);
    if (!v20)
      v18 = v15;
    v15 = *v21;
  }
  while (*v21);
  if (v18 == v16 || *(_DWORD *)(v18 + 32) > 0x40000000u)
  {
LABEL_21:
    if (a3 < 4)
    {
      if (a3 < 1)
      {
        v22 = 0;
        v33 = 0;
        v32 = 0;
        v31 = 0;
        v30 = 0;
        v29 = 0;
        v28 = 0;
        v25 = 0;
        v24 = 0;
        v23 = 0;
        LOBYTE(v37) = 1;
        v36 = 1;
        LOBYTE(v35) = 1;
LABEL_85:
        if ((v35 & 1) != 0
          && v33 < 1
          && (v22 || !((v31 + v32 + v30 < 0) ^ __OFADD__(v31 + v32, v30) | (v31 + v32 + v30 == 0))))
        {
          v44 = "UTF-8";
        }
        else if ((v36 & 1) != 0 && v29 <= 0)
        {
          if (10 * v23 >= a3)
            v45 = "SHIFT_JISX0213";
          else
            v45 = "ISO8859-1";
          if (v28 == 2 && v25 == 2)
            v47 = "SHIFT_JISX0213";
          else
            v47 = v45;
          if (((v37 ^ 1) & 1) != 0)
            v47 = "SHIFT_JISX0213";
          if (v24 <= 2)
            v48 = v47;
          else
            v48 = "SHIFT_JISX0213";
          if (v25 <= 2)
            v44 = (char *)v48;
          else
            v44 = "SHIFT_JISX0213";
        }
        else if ((v37 & 1) != 0)
        {
          v44 = "ISO8859-1";
        }
        else
        {
          v44 = "UTF-8";
        }
        sub_1D3D81D4C(&__dst, v44);
        goto LABEL_113;
      }
    }
    else if (*(unsigned __int8 *)v14 == 239 && *((unsigned __int8 *)v14 + 1) == 187)
    {
      v22 = *((unsigned __int8 *)v14 + 2) == 191;
LABEL_27:
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = v14;
      v35 = 1;
      v36 = 1;
      LOBYTE(v37) = 1;
      v38 = a3;
      while (1)
      {
        if ((v37 & 1) == 0 && (v36 & 1) == 0 && (v35 & 1) == 0)
          goto LABEL_85;
        v39 = *(unsigned __int8 *)v34;
        if ((v35 & 1) == 0)
          goto LABEL_34;
        if (v33 >= 1)
          break;
        if ((v39 & 0x80) != 0)
        {
          if ((v39 & 0x40) != 0)
          {
            if ((v39 & 0x20) != 0)
            {
              if ((v39 & 0x10) != 0)
              {
                if ((v39 & 8) != 0)
                  v35 = 0;
                v30 += ((v39 & 8) >> 3) ^ 1;
                v33 = 3;
              }
              else
              {
                ++v31;
                v33 = 2;
              }
            }
            else
            {
              ++v32;
              v33 = 1;
            }
          }
          else
          {
            v35 = 0;
            v33 = 0;
          }
LABEL_34:
          v37 = v37 & ((char)v39 > -97);
          if (v39 < 0xC0 || (v39 & 0xFFFFFFDF) == 215)
            v41 = v23 + 1;
          else
            v41 = v23;
          if (v39 >= 0xA0)
            v42 = 1;
          else
            v42 = v37;
          if (v39 < 0xA0)
            v41 = v23;
          if (v37 == 1)
          {
            LOBYTE(v37) = v42;
            v23 = v41;
          }
          if ((v36 & 1) == 0)
            goto LABEL_79;
LABEL_48:
          if (v29 < 1)
          {
            v29 = 0;
            if (v39 > 0xEF || (v39 & 0xDF) == 0x80)
            {
              v36 = 0;
            }
            else if ((v39 + 95) > 0x3Eu)
            {
              if ((v39 & 0x80) != 0)
              {
                v27 = 0;
                if (v26 >= v24)
                  v24 = v26 + 1;
                ++v26;
                v29 = 1;
              }
              else
              {
                v29 = 0;
                v27 = 0;
                v26 = 0;
              }
            }
            else
            {
              v29 = 0;
              v26 = 0;
              ++v28;
              if (v27 >= v25)
                v25 = v27 + 1;
              ++v27;
            }
          }
          else
          {
            v29 = v39 == 127 || (v39 + 3) < 0x43u;
            if (v29)
              v36 = 0;
          }
          goto LABEL_79;
        }
        v33 = 0;
        if ((v36 & 1) != 0)
          goto LABEL_48;
LABEL_79:
        ++v34;
        if (!--v38)
          goto LABEL_85;
      }
      v35 &= (char)v39 >> 7;
      v33 += (char)v39 >> 7;
      goto LABEL_34;
    }
    v22 = 0;
    goto LABEL_27;
  }
  if (*(char *)(v18 + 63) < 0)
    sub_1D3D7FCC0(&__dst, *(void **)(v18 + 40), *(_QWORD *)(v18 + 48));
  else
    __dst = *(std::string *)(v18 + 40);
LABEL_113:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __dst;
LABEL_116:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_1D3DFE7F4(a2, v14, v12, (uint64_t)p_p);
  v50 = *(_QWORD **)(a5 + 16);
  v51 = v50[3];
  v52 = v50[4];
  if (v51 >= v52)
  {
    v58 = v50[2];
    v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v58) >> 3);
    if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D3D6D4F8();
    v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v58) >> 3);
    v61 = 2 * v60;
    if (2 * v60 <= v59 + 1)
      v61 = v59 + 1;
    if (v60 >= 0x555555555555555)
      v62 = 0xAAAAAAAAAAAAAAALL;
    else
      v62 = v61;
    v84 = v50 + 4;
    if (v62)
    {
      if (v62 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D50C();
      v63 = (char *)operator new(24 * v62);
    }
    else
    {
      v63 = 0;
    }
    size = (std::string::size_type)&v63[24 * v59];
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    __dst.__r_.__value_.__l.__size_ = size;
    __dst.__r_.__value_.__r.__words[2] = size;
    v83 = &v63[24 * v62];
    *(_DWORD *)(size + 8) = 0;
    *(_QWORD *)size = &off_1E95AF9B0;
    *(_QWORD *)(size + 16) = 0;
    v65 = (unsigned int **)(size + 16);
    v66 = (unsigned int *)v81;
    if (v81)
    {
      v67 = (unsigned int *)(v81 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      v69 = size;
      if (*v65)
      {
        sub_1D3D6D13C(*v65);
        v69 = __dst.__r_.__value_.__r.__words[2];
        size = __dst.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      v69 = size;
    }
    *v65 = v66;
    __dst.__r_.__value_.__r.__words[2] = v69 + 24;
    v71 = v50[2];
    v70 = v50[3];
    for (i = 24; ; i -= 24)
    {
      v73 = size + i;
      if (v70 + i - 24 == v71)
        break;
      v74 = v70 + i - 48;
      sub_1D3DAF780(v73 - 48, v74);
    }
    v75 = *((_OWORD *)v50 + 1);
    v50[2] = v73 - 24;
    v57 = __dst.__r_.__value_.__r.__words[2];
    v50[3] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = v75;
    v76 = (char *)v50[4];
    v50[4] = v83;
    v83 = v76;
    __dst.__r_.__value_.__r.__words[0] = v75;
    sub_1D3DFF348((uint64_t)&__dst);
  }
  else
  {
    *(_DWORD *)(v51 + 8) = 0;
    *(_QWORD *)v51 = &off_1E95AF9B0;
    *(_QWORD *)(v51 + 16) = 0;
    v53 = v81;
    if (v81)
    {
      v54 = (unsigned int *)(v81 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = *(unsigned int **)(v51 + 16);
      if (v56)
        sub_1D3D6D13C(v56);
    }
    *(_QWORD *)(v51 + 16) = v53;
    v57 = v51 + 24;
    v50[3] = v51 + 24;
  }
  v50[3] = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_1D3D7F558(v80);
}

void sub_1D3DFF24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_1D3DFF348((uint64_t)&a18);
  if (a14 < 0)
    operator delete(__p);
  sub_1D3D7F558(&a15);
  _Unwind_Resume(a1);
}

void sub_1D3DFF254()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 24) = v1;
  JUMPOUT(0x1D3DFF2ECLL);
}

void sub_1D3DFF2A8()
{
  __cxa_end_catch();
  JUMPOUT(0x1D3DFF2ECLL);
}

void sub_1D3DFF2B8()
{
  JUMPOUT(0x1D3DFF2ECLL);
}

std::string *sub_1D3DFF314(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_1D3DFF398(a1, __s, v4);
}

uint64_t sub_1D3DFF348(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *sub_1D3DFF398(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

void sub_1D3DFF454(uint64_t *a1, std::string *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v7;
  std::string::size_type v10;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  std::string::value_type *v22;
  char v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  const char *v28;
  _QWORD *v29;
  _QWORD *exception;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD __dst[2];
  char v37;
  uint64_t v38;
  _BYTE v39[264];

  v7 = a3;
  v10 = a3;
  v11 = (const std::string::value_type *)operator new[]();
  v14 = *(_QWORD *)(a5 + 8);
  v13 = a5 + 8;
  v12 = v14;
  if (!v14)
    goto LABEL_11;
  v15 = v13;
  do
  {
    v16 = *(_DWORD *)(v12 + 32) >> 30;
    v17 = v16 == 0;
    if (v16)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == v13 || *(_DWORD *)(v15 + 32) >= 0x40000001u)
LABEL_11:
    v15 = v13;
  if (a4)
  {
    v19 = *(const char **)(a4 + 8);
LABEL_14:
    v19 = *(const char **)v19;
    goto LABEL_15;
  }
  if (v15 == v13)
  {
    v19 = 0;
  }
  else
  {
    v19 = (const char *)(v15 + 40);
    if (*(char *)(v15 + 63) < 0)
      goto LABEL_14;
  }
LABEL_15:
  if (v7 < 3)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      if (8
         * (*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 16) - *(_DWORD *)(*a1 + 40))
         - *(_DWORD *)(*a1 + 44) <= 9)
        goto LABEL_39;
      v21 = sub_1D3DA34C8(*a1, 10);
      if (v21 >= 1000)
      {
        sub_1D3D93A78((uint64_t)&v38);
        sub_1D3D8C900(&v38, (uint64_t)"Illegal value for 3-digit unit: ", 32);
        std::ostream::operator<<();
        MEMORY[0x1D8254C3C](v11, 0x1000C8077774924);
        exception = __cxa_allocate_exception(0x20uLL);
        sub_1D3D93B64(__dst, (uint64_t)v39);
        if (v37 >= 0)
          v31 = (char *)__dst;
        else
          v31 = (char *)__dst[0];
        sub_1D3DDE1A0(exception, v31);
        *exception = &off_1E95AF388;
        __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      v22 = (std::string::value_type *)&v11[v20];
      *v22 = a0123456789abcd[v21 / 100];
      v23 = a0123456789abcd[v21 % 10];
      v22[1] = a0123456789abcd[v21 / 10 % 10];
      v20 += 3;
      v22[2] = v23;
      v24 = v7 - 3;
      v25 = v7 <= 5;
      v7 -= 3;
    }
    while (!v25);
    v7 = v24;
  }
  if (v7 == 1)
  {
    if (8
       * (*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 16) - *(_DWORD *)(*a1 + 40))
       - *(_DWORD *)(*a1 + 44) > 3)
    {
      v27 = sub_1D3DA34C8(*a1, 4);
      if (v27 >= 10)
      {
        sub_1D3D93A78((uint64_t)&v38);
        sub_1D3D8C900(&v38, (uint64_t)"Illegal value for digit unit: ", 30);
        std::ostream::operator<<();
        MEMORY[0x1D8254C3C](v11, 0x1000C8077774924);
        v34 = __cxa_allocate_exception(0x20uLL);
        sub_1D3D93B64(__dst, (uint64_t)v39);
        if (v37 >= 0)
          v35 = (char *)__dst;
        else
          v35 = (char *)__dst[0];
        sub_1D3DDE1A0(v34, v35);
        *v34 = &off_1E95AF388;
        __cxa_throw(v34, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      goto LABEL_33;
    }
  }
  else
  {
    if (v7 != 2)
      goto LABEL_34;
    if (8
       * (*(_DWORD *)(*(_QWORD *)(*a1 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 16) - *(_DWORD *)(*a1 + 40))
       - *(_DWORD *)(*a1 + 44) > 6)
    {
      v26 = sub_1D3DA34C8(*a1, 7);
      if (v26 >= 100)
      {
        sub_1D3D93A78((uint64_t)&v38);
        sub_1D3D8C900(&v38, (uint64_t)"Illegal value for 2-digit unit: ", 32);
        std::ostream::operator<<();
        MEMORY[0x1D8254C3C](v11, 0x1000C8077774924);
        v32 = __cxa_allocate_exception(0x20uLL);
        sub_1D3D93B64(__dst, (uint64_t)v39);
        if (v37 >= 0)
          v33 = (char *)__dst;
        else
          v33 = (char *)__dst[0];
        sub_1D3DDE1A0(v32, v33);
        *v32 = &off_1E95AF388;
        __cxa_throw(v32, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      v11[v20] = a0123456789abcd[v26 / 10];
      v27 = v26 % 10;
      LODWORD(v20) = v20 + 1;
LABEL_33:
      v11[v20] = a0123456789abcd[v27];
LABEL_34:
      if (v19)
        v28 = v19;
      else
        v28 = "ASCII";
      sub_1D3DFE7F4(a2, v11, v10, (uint64_t)v28);
      JUMPOUT(0x1D8254C3CLL);
    }
  }
LABEL_39:
  v29 = __cxa_allocate_exception(0x20uLL);
  sub_1D3E17508(v29, "format exception");
  __cxa_throw(v29, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
}

void sub_1D3DFF9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  int v17;
  int v18;

  if (v17 < 0)
  {
    operator delete(v16);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_1D3D93C38((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1D3DFFA14(unint64_t a1)
{
  _QWORD *exception;

  if (a1 >= 0x2D)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = &off_1E95AF330;
    exception[1] = 0;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
  }
  return a0123456789abcd[a1];
}

uint64_t sub_1D3DFFA64(uint64_t a1, std::string *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  unint64_t i;
  int v29;
  char *v30;
  void **v31;
  void **v32;
  std::string::size_type v33;
  _QWORD *exception;
  __int128 __dst;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[10];
  char v46;
  uint64_t v47;

  v12 = *(_QWORD *)(a6 + 8);
  v10 = a6 + 8;
  v11 = v12;
  if (!v12)
    goto LABEL_11;
  v13 = v10;
  do
  {
    v14 = *(_DWORD *)(v11 + 32) >> 30;
    v15 = v14 == 0;
    if (v14)
      v16 = (uint64_t *)v11;
    else
      v16 = (uint64_t *)(v11 + 8);
    if (!v15)
      v13 = v11;
    v11 = *v16;
  }
  while (*v16);
  if (v13 == v10 || *(_DWORD *)(v13 + 32) >= 0x40000001u)
LABEL_11:
    v13 = v10;
  if (a5)
  {
    v17 = *(const char **)(a5 + 8);
LABEL_14:
    v17 = *(const char **)v17;
    goto LABEL_15;
  }
  if (v13 == v10)
  {
    v17 = 0;
  }
  else
  {
    v17 = (const char *)(v13 + 40);
    if (*(char *)(v13 + 63) < 0)
      goto LABEL_14;
  }
LABEL_15:
  if (v17)
    v18 = v17;
  else
    v18 = "ASCII";
  sub_1D3D93A78((uint64_t)&v44);
  if (a3 < 2)
  {
    v20 = a3;
  }
  else
  {
    do
    {
      if (8
         * (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) - *(_DWORD *)(a1 + 40))
         - *(_DWORD *)(a1 + 44) <= 10)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        exception[2] = 0;
        exception[3] = 0;
        *exception = &off_1E95AF330;
        exception[1] = 0;
        __cxa_throw(exception, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
      }
      v19 = sub_1D3DA34C8(a1, 11);
      LOBYTE(v38) = sub_1D3DFFA14(v19 / 45);
      sub_1D3D8C900(&v44, (uint64_t)&v38, 1);
      LOBYTE(v38) = sub_1D3DFFA14(v19 % 45);
      sub_1D3D8C900(&v44, (uint64_t)&v38, 1);
      v20 = a3 - 2;
      v21 = a3 <= 3;
      a3 -= 2;
    }
    while (!v21);
  }
  if (v20 == 1)
  {
    v22 = sub_1D3DA34C8(a1, 6);
    LOBYTE(v38) = sub_1D3DFFA14(v22);
    sub_1D3D8C900(&v44, (uint64_t)&v38, 1);
  }
  sub_1D3D93B64(__p, (uint64_t)v45);
  v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v24 = MEMORY[0x1E0DE4FB8];
  if (a4)
  {
    sub_1D3D93A78((uint64_t)&v38);
    v25 = (char *)HIBYTE(v43);
    v26 = (char *)__p[1];
    if (v43 >= 0)
      v27 = (void *)HIBYTE(v43);
    else
      v27 = __p[1];
    if (v27)
    {
      for (i = 0; i < (unint64_t)v27; ++i)
      {
        if ((v25 & 0x80) != 0)
        {
          v29 = *((unsigned __int8 *)__p[0] + i);
          v30 = v26;
        }
        else
        {
          v29 = *((unsigned __int8 *)__p + i);
          v30 = v25;
        }
        if (v29 == 37)
        {
          if (i < (unint64_t)(v30 - 1)
            && ((char)v25 >= 0 ? (v31 = __p) : (v31 = (void **)__p[0]), *((_BYTE *)v31 + i + 1) == 37))
          {
            LOBYTE(__dst) = *((_BYTE *)v31 + i);
            sub_1D3D8C900(&v38, (uint64_t)&__dst, 1);
            ++i;
          }
          else
          {
            LOBYTE(__dst) = 29;
            sub_1D3D8C900(&v38, (uint64_t)&__dst, 1);
          }
        }
        else
        {
          LOBYTE(__dst) = v29;
          sub_1D3D8C900(&v38, (uint64_t)&__dst, 1);
        }
      }
    }
    sub_1D3D93B64(&__dst, (uint64_t)v39);
    if ((v25 & 0x80) != 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = __dst;
    v43 = v37;
    v38 = *v23;
    *(_QWORD *)((char *)&v39[-1] + *(_QWORD *)(v38 - 24)) = v23[3];
    v24 = MEMORY[0x1E0DE4FB8];
    v39[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v40 < 0)
      operator delete((void *)v39[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1D8254BF4](&v41);
  }
  if (v43 >= 0)
    v32 = __p;
  else
    v32 = (void **)__p[0];
  if (v43 >= 0)
    v33 = HIBYTE(v43);
  else
    v33 = (std::string::size_type)__p[1];
  sub_1D3DFE7F4(a2, (const std::string::value_type *)v32, v33, (uint64_t)v18);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  v44 = *v23;
  *(_QWORD *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24)) = v23[3];
  v45[0] = v24 + 16;
  if (v46 < 0)
    operator delete((void *)v45[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D8254BF4](&v47);
}

void sub_1D3DFFE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54)
{
  sub_1D3D93C38((uint64_t)&a14);
  if (a52 < 0)
    operator delete(__p);
  sub_1D3D93C38((uint64_t)&a54);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DFFEB8()
{
  unsigned int **v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  unsigned int *v8;

  v0 = (unsigned int **)operator new();
  sub_1D3DBAE60();
  v1 = *(unsigned int **)qword_1EDB89E20;
  if (*(_QWORD *)qword_1EDB89E20)
  {
    v2 = v1 + 2;
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    v7 = v1;
    do
      v4 = __ldxr(v2);
    while (__stxr(v4 + 1, v2));
    v8 = v1;
    *v0 = 0;
    do
      v5 = __ldxr(v2);
    while (__stxr(v5 + 1, v2));
    if (*v0)
      sub_1D3D6D13C(*v0);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *v0 = 0;
  }
  *v0 = v1;
  qword_1EDB89E78 = (uint64_t)v0;
  sub_1D3D82034(&v8);
  return sub_1D3D81F38(&v7);
}

void sub_1D3DFFF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  uint64_t v10;

  sub_1D3D82034(&a10);
  sub_1D3D81F38(&a9);
  MEMORY[0x1D8254C54](v10, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3DFFFB8(uint64_t *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  char v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  int *v46;
  const void *v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  int v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  int v127;
  unsigned int *v128;
  unsigned int v129;
  int v130;
  unsigned __int8 *v131;
  _DWORD *v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t *v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t i;
  uint64_t j;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int *v151;
  _BYTE *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  _QWORD *exception;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t *v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  char *__p;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[3];
  unsigned int *v170;
  uint64_t (**v171)(_QWORD);
  int v172;
  uint64_t v173;
  uint64_t (**v174)(_QWORD);
  int v175;
  unsigned int *v176;
  uint64_t (**v177)(_QWORD);
  int v178;
  unsigned int *v179;
  unsigned int *v180;
  _QWORD v181[2];
  uint64_t v182;
  uint64_t (**v183)(_QWORD);
  int v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  _QWORD v189[2];
  uint64_t v190;
  unsigned int *v191;
  _QWORD v192[2];
  unsigned int *v193;
  unsigned int *v194;
  unsigned __int8 v195;
  uint64_t (*v196)();
  _QWORD *v197;
  unsigned int *v198;
  unsigned int *v199;
  int v200;
  unsigned int *v201;
  __int128 v202;
  unsigned int *v203;
  char v204;
  char **v205;
  char *v206;

  if (a2)
  {
    v3 = a2 + 2;
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v191 = a2;
  sub_1D3DF5938((uint64_t)v192, (uint64_t *)&v191);
  sub_1D3D6D10C(&v191);
  v162 = sub_1D3DF5EEC((uint64_t)v192);
  sub_1D3DF5A34((unsigned int **)&v196, (uint64_t)v192);
  v161 = (int *)*((_QWORD *)v196 + 2);
  sub_1D3DF5878((unsigned int **)&v196);
  sub_1D3DF5A34(&v199, (uint64_t)v192);
  v5 = sub_1D3DF5EEC((uint64_t)v192);
  v6 = *((unsigned __int8 *)v199 + 24);
  if (v6 >= 8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "reference must be between 0 and 7");
    *exception = &off_1E95AF510;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
  }
  v7 = v5;
  v8 = atomic_load(qword_1EDB89E88);
  if (v8 != -1)
  {
    v196 = sub_1D3DFDF20;
    *(_QWORD *)&v202 = &v196;
    std::__call_once(qword_1EDB89E88, &v202, (void (__cdecl *)(void *))sub_1D3DD8A78);
  }
  v9 = v193;
  v167 = *((_QWORD *)v193 + 2);
  if (v167 << 32)
  {
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)qword_1EDB89E60 + 8 * v6);
    v12 = v195;
    do
    {
      v13 = 0;
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10, v13))
        {
          if (v12)
            v14 = v13;
          else
            v14 = v10;
          if (v12)
            v15 = v10;
          else
            v15 = v13;
          *(_DWORD *)(*((_QWORD *)v9 + 6)
                    + (((unint64_t)(v15 + *((_QWORD *)v9 + 3) * v14) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) ^= 1 << (v15 + *((_BYTE *)v9 + 24) * v14);
        }
        ++v13;
      }
      while ((int)v167 != v13);
      ++v10;
    }
    while (v10 != (int)v167);
  }
  v16 = *(int *)(v7 + 12);
  v17 = (uint64_t *)operator new();
  v18 = 4 * v16;
  sub_1D3D93838((uint64_t)v17, v18 + 17);
  v19 = (unsigned int *)(v17 + 1);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v196 = (uint64_t (*)())v17;
  sub_1D3D93950(v17, 0, 0, 9, 9);
  sub_1D3D93950(v17, (int)v18 + 9, 0, 8, 9);
  sub_1D3D93950(v17, 0, (int)v18 + 9, 9, 8);
  v21 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) - **(_QWORD **)(v7 + 16);
  if (!v21)
    goto LABEL_36;
  v22 = 0;
  v23 = v21 >> 2;
  v24 = v23 - 1;
  if (v23 <= 1)
    v25 = 1;
  else
    v25 = v23;
  do
  {
    v26 = 0;
    v27 = *(int *)(**(_QWORD **)(v7 + 16) + 4 * v22) - 2;
    do
    {
      if (v22)
      {
        if (v22 != v24 || v26)
          goto LABEL_33;
      }
      else if (v26 && v24 != v26)
      {
LABEL_33:
        sub_1D3D93950(v17, *(int *)(**(_QWORD **)(v7 + 16) + 4 * v26) - 2, v27, 5, 5);
      }
      ++v26;
    }
    while (v25 != v26);
    ++v22;
  }
  while (v22 != v25);
LABEL_36:
  sub_1D3D93950(v17, 6uLL, 9uLL, 1, (int)v18);
  sub_1D3D93950(v17, 9uLL, 6uLL, (int)v18, 1);
  if (*(int *)(v7 + 12) >= 7)
  {
    sub_1D3D93950(v17, (int)v18 + 6, 0, 3, 6);
    sub_1D3D93950(v17, 0, (int)v18 + 6, 6, 3);
  }
  sub_1D3D81C50((uint64_t)v189, *(int *)(v7 + 48));
  v163 = v7;
  v160 = a1;
  if ((int)v167 < 2)
  {
    v30 = 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v167 - 1;
    v32 = 1;
    do
    {
      v33 = 0;
      if (v31 == 6)
        v34 = 5;
      else
        v34 = v31;
      do
      {
        v35 = 0;
        if ((v32 & 1) != 0)
          v36 = v167 - 1 - v33;
        else
          v36 = v33;
        v37 = 1;
        do
        {
          v38 = v37;
          v39 = v35 + v34;
          if (v195)
            v40 = v36;
          else
            v40 = v39;
          if (!v195)
            v39 = v36;
          v41 = v40;
          v42 = v39;
          if ((sub_1D3D6D4A0(v196, v40, v39) & 1) == 0)
          {
            ++v28;
            v29 = sub_1D3D6D4A0(v193, v41, v42) | (2 * v29);
            if (v28 == 8)
            {
              v28 = 0;
              *(_BYTE *)(*(_QWORD *)(v190 + 16) + v30++) = v29;
              v29 = 0;
            }
          }
          v37 = 0;
          v35 = -1;
        }
        while ((v38 & 1) != 0);
        ++v33;
      }
      while (v33 != (_DWORD)v167);
      v32 ^= 1u;
      v31 = v34 - 2;
    }
    while (v34 > 2);
  }
  if (v30 != *(_DWORD *)(v163 + 48))
  {
    v158 = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(v158, "Did not read all codewords");
    *v158 = &off_1E95AF388;
    __cxa_throw(v158, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  sub_1D3D6D10C((unsigned int **)&v196);
  sub_1D3DF5878(&v199);
  v184 = 0;
  v183 = &off_1E95AF9B0;
  v185 = 0;
  v43 = v190;
  if (v190)
  {
    v44 = (unsigned int *)(v190 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v185 = v43;
  v46 = *(int **)(*(_QWORD *)(v162 + 24) + 8 * *v161);
  v47 = (const void *)*((_QWORD *)v46 + 1);
  v48 = *((_QWORD *)v46 + 2) - (_QWORD)v47;
  if (v48 < 0)
    sub_1D3D6D4F8();
  v49 = (char *)sub_1D3D6D8A0(v48 >> 3);
  memmove(v49, v47, v48);
  v50 = 0;
  v51 = 0;
  v52 = &v49[8 * (v48 >> 3)];
  if ((unint64_t)(v48 >> 3) <= 1)
    v53 = 1;
  else
    v53 = v48 >> 3;
  do
    v51 += **(_DWORD **)&v49[8 * v50++];
  while (v53 != v50);
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v196 = (uint64_t (*)())&v186;
  LOBYTE(v197) = 0;
  __p = v49;
  if (!v51)
    goto LABEL_72;
  if (v51 < 0)
    sub_1D3D6D4F8();
  v54 = v51;
  v55 = 8 * v51;
  v56 = (char *)operator new(v55);
  v186 = v56;
  v188 = &v56[8 * v54];
  bzero(v56, v55);
  v187 = &v56[v55];
  v49 = __p;
  if (v52 == __p)
  {
    LODWORD(v58) = 0;
  }
  else
  {
LABEL_72:
    v57 = 0;
    LODWORD(v58) = 0;
    v59 = (v52 - v49) >> 3;
    if (v59 <= 1)
      v59 = 1;
    v164 = v59;
    do
    {
      v60 = 0;
      v168 = v57;
      v61 = *(_DWORD **)&__p[8 * v57];
      v58 = (int)v58;
      while (v60 < *v61)
      {
        v62 = (int)v61[1];
        sub_1D3D81C50((uint64_t)&v196, *v46 + v62);
        v63 = operator new();
        DWORD2(v202) = 0;
        *(_QWORD *)&v202 = &off_1E95AF9B0;
        v203 = 0;
        v64 = v198;
        if (v198)
        {
          v65 = v198 + 2;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
          if (v203)
            sub_1D3D6D13C(v203);
        }
        *(_DWORD *)(v63 + 8) = 0;
        v67 = (unsigned int *)(v63 + 8);
        v203 = v64;
        *(_QWORD *)v63 = &off_1E95AF970;
        *(_DWORD *)(v63 + 12) = v62;
        *(_DWORD *)(v63 + 24) = 0;
        *(_QWORD *)(v63 + 16) = &off_1E95AF9B0;
        *(_QWORD *)(v63 + 32) = 0;
        if (v64)
        {
          v68 = v64 + 2;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
          v70 = *(unsigned int **)(v63 + 32);
          if (v70)
            sub_1D3D6D13C(v70);
        }
        *(_QWORD *)(v63 + 32) = v64;
        do
          v71 = __ldxr(v67);
        while (__stxr(v71 + 1, v67));
        v199 = (unsigned int *)v63;
        sub_1D3D7F558(&v202);
        v72 = v186;
        v73 = v199;
        if (v199)
        {
          v74 = v199 + 2;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v76 = *(unsigned int **)&v72[8 * v58];
        if (v76)
          sub_1D3D6D13C(v76);
        *(_QWORD *)&v72[8 * v58++] = v73;
        sub_1D3DFDE80(&v199);
        sub_1D3D7F558(&v196);
        ++v60;
      }
      v57 = v168 + 1;
    }
    while (v168 + 1 != v164);
    v56 = v186;
  }
  v77 = *(_QWORD *)v56;
  LODWORD(v197) = 0;
  v196 = (uint64_t (*)())&off_1E95AF9B0;
  v198 = 0;
  v78 = *(unsigned int **)(v77 + 32);
  if (v78)
  {
    v79 = v78 + 2;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    if (v198)
      sub_1D3D6D13C(v198);
  }
  v198 = v78;
  v81 = v78[6] - v78[4];
  sub_1D3D7F558(&v196);
  v82 = (unint64_t)(v187 - v186) >> 3;
  if ((int)v82 - 1 >= -1)
    v83 = -1;
  else
    v83 = v82 - 1;
  while (1)
  {
    if ((int)v82 - 1 < 0)
    {
      v165 = v83;
      LODWORD(v82) = v83 + 1;
      goto LABEL_112;
    }
    v84 = *(_QWORD *)(*(_QWORD *)&v186[8 * (v82 - 1)] + 32);
    v85 = *(_DWORD *)(v84 + 24) - *(_DWORD *)(v84 + 16);
    if (v85 == v81)
      break;
    LODWORD(v82) = v82 - 1;
    if (v81 + 1 != v85)
    {
      v86 = __cxa_allocate_exception(0x20uLL);
      sub_1D3DDE1A0(v86, "Data block sizes differ by more than 1");
      *v86 = &off_1E95AF510;
      __cxa_throw(v86, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
    }
  }
  v165 = v82 - 1;
LABEL_112:
  v87 = v81 - (uint64_t)*v46;
  if ((int)v87 < 1)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v88 = 0;
    LODWORD(v89) = 0;
    do
    {
      if ((int)v58 >= 1)
      {
        v90 = 0;
        v89 = (int)v89;
        do
        {
          v91 = *(_BYTE *)(*(_QWORD *)(v185 + 16) + v89);
          v92 = *(_QWORD *)&v186[8 * v90];
          LODWORD(v197) = 0;
          v196 = (uint64_t (*)())&off_1E95AF9B0;
          v198 = 0;
          v93 = *(_QWORD *)(v92 + 32);
          if (v93)
          {
            v94 = (unsigned int *)(v93 + 8);
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
            if (v198)
              sub_1D3D6D13C(v198);
          }
          ++v89;
          v198 = (unsigned int *)v93;
          *(_BYTE *)(*(_QWORD *)(v93 + 16) + v88) = v91;
          sub_1D3D7F558(&v196);
          ++v90;
        }
        while (v90 != v58);
      }
      ++v88;
    }
    while (v88 != v87);
  }
  if ((int)v82 >= (int)v58)
  {
    LODWORD(v96) = v89;
  }
  else
  {
    v82 = (int)v82;
    v96 = (int)v89;
    do
    {
      v97 = *(_BYTE *)(*(_QWORD *)(v185 + 16) + v96);
      v98 = *(_QWORD *)&v186[8 * v82];
      LODWORD(v197) = 0;
      v196 = (uint64_t (*)())&off_1E95AF9B0;
      v198 = 0;
      v99 = *(_QWORD *)(v98 + 32);
      if (v99)
      {
        v100 = (unsigned int *)(v99 + 8);
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
        if (v198)
          sub_1D3D6D13C(v198);
      }
      ++v96;
      v198 = (unsigned int *)v99;
      *(_BYTE *)(*(_QWORD *)(v99 + 16) + v87) = v97;
      sub_1D3D7F558(&v196);
      ++v82;
    }
    while ((_DWORD)v58 != (_DWORD)v82);
  }
  v102 = *(_QWORD *)v186;
  LODWORD(v197) = 0;
  v196 = (uint64_t (*)())&off_1E95AF9B0;
  v103 = *(unsigned int **)(v102 + 32);
  if (v103)
  {
    v104 = v103 + 2;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  v198 = v103;
  v106 = v103[6] - v103[4];
  sub_1D3D7F558(&v196);
  for (; (int)v87 < v106; LODWORD(v87) = v87 + 1)
  {
    if ((int)v58 >= 1)
    {
      v107 = 0;
      v96 = (int)v96;
      do
      {
        if (v107 <= v165)
          v108 = v87;
        else
          v108 = v87 + 1;
        v109 = *(_BYTE *)(*(_QWORD *)(v185 + 16) + v96);
        v110 = *(_QWORD *)&v186[8 * v107];
        LODWORD(v197) = 0;
        v196 = (uint64_t (*)())&off_1E95AF9B0;
        v198 = 0;
        v111 = *(_QWORD *)(v110 + 32);
        if (v111)
        {
          v112 = (unsigned int *)(v111 + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
          if (v198)
            sub_1D3D6D13C(v198);
        }
        ++v96;
        v198 = (unsigned int *)v111;
        *(_BYTE *)(*(_QWORD *)(v111 + 16) + v108) = v109;
        sub_1D3D7F558(&v196);
        ++v107;
      }
      while (v107 != v58);
    }
  }
  if (*(_QWORD *)(v185 + 24) - *(_QWORD *)(v185 + 16) != (int)v96)
  {
    v159 = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(v159, "rawCodewordsOffset != rawCodewords.length");
    *v159 = &off_1E95AF510;
    __cxa_throw(v159, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
  }
  if (__p)
    operator delete(__p);
  sub_1D3D7F558(&v183);
  v114 = (uint64_t *)v186;
  if (v187 == v186)
  {
    v115 = 0;
  }
  else
  {
    v115 = 0;
    v116 = (v187 - v186) >> 3;
    if (v116 <= 1)
      v116 = 1;
    do
    {
      v117 = *v114++;
      v115 += *(_DWORD *)(v117 + 12);
      --v116;
    }
    while (v116);
  }
  sub_1D3D81C50((uint64_t)v181, v115);
  v118 = v186;
  if (v187 != v186)
  {
    v119 = 0;
    v120 = 0;
    do
    {
      v180 = 0;
      v121 = *(unsigned int **)&v118[8 * v119];
      if (v121)
      {
        v122 = v121 + 2;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v179 = 0;
      v180 = v121;
      v178 = 0;
      v177 = &off_1E95AF9B0;
      v124 = *((_QWORD *)v121 + 4);
      if (v124)
      {
        v125 = (unsigned int *)(v124 + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
        if (v179)
        {
          sub_1D3D6D13C(v179);
          v121 = v180;
        }
        v179 = (unsigned int *)v124;
        v127 = v121[3];
        v175 = 0;
        v174 = &off_1E95AF9B0;
        v128 = (unsigned int *)(v124 + 8);
        v176 = 0;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
        if (v176)
          sub_1D3D6D13C(v176);
      }
      else
      {
        v179 = 0;
        v127 = v121[3];
        v175 = 0;
        v174 = &off_1E95AF9B0;
        v176 = 0;
      }
      v176 = (unsigned int *)v124;
      v130 = *(_QWORD *)(v124 + 24) - *(_QWORD *)(v124 + 16);
      sub_1D3D81F68((uint64_t)&v202, v130);
      if (v130 >= 1)
      {
        v131 = (unsigned __int8 *)*((_QWORD *)v176 + 2);
        v132 = (_DWORD *)*((_QWORD *)v203 + 2);
        v133 = v130;
        do
        {
          v134 = *v131++;
          *v132++ = v134;
          --v133;
        }
        while (v133);
      }
      v204 = 0;
      v135 = atomic_load(&qword_1EDB89E70);
      if (v135 != -1)
      {
        v205 = &v206;
        v206 = &v204;
        std::__call_once(&qword_1EDB89E70, &v205, (void (__cdecl *)(void *))sub_1D3DFFEB8);
      }
      v136 = (uint64_t *)qword_1EDB89E78;
      v200 = 0;
      v199 = (unsigned int *)&off_1E95AF9D0;
      v137 = v203;
      if (v203)
      {
        v138 = v203 + 2;
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      v201 = v137;
      sub_1D3DBC050(v136, (uint64_t)&v199, v130 - v127);
      sub_1D3D82064(&v199);
      if (v127 < 1)
      {
        sub_1D3D82064(&v202);
        sub_1D3D7F558(&v174);
      }
      else
      {
        for (i = 0; i != v127; ++i)
          *(_BYTE *)(*((_QWORD *)v176 + 2) + i) = *(_DWORD *)(*((_QWORD *)v203 + 2) + 4 * i);
        sub_1D3D82064(&v202);
        sub_1D3D7F558(&v174);
        for (j = 0; j != v127; ++j)
          *(_BYTE *)(*(_QWORD *)(v182 + 16) + v120 + j) = *(_BYTE *)(*((_QWORD *)v179 + 2) + j);
        v120 += j;
      }
      sub_1D3D7F558(&v177);
      sub_1D3DFDE80(&v180);
      ++v119;
      v118 = v186;
    }
    while (v119 < (v187 - v186) >> 3);
  }
  v197 = 0;
  v198 = 0;
  v196 = (uint64_t (*)())&v197;
  v142 = *(_DWORD *)(v162 + 12);
  *((_DWORD *)sub_1D3D7F308((uint64_t **)&v196, 12, &dword_1D3E7565C) + 8) = v142;
  v143 = v161[1];
  *((_DWORD *)sub_1D3D7F308((uint64_t **)&v196, 13, &dword_1D3E75660) + 8) = v143;
  sub_1D3DF5A34((unsigned int **)&v202, (uint64_t)v192);
  v144 = *(unsigned __int8 *)(v202 + 24);
  *((_DWORD *)sub_1D3D7F308((uint64_t **)&v196, 8, (unsigned int *)"\b") + 8) = v144;
  sub_1D3DF5878((unsigned int **)&v202);
  v145 = v195;
  *((_DWORD *)sub_1D3D7F308((uint64_t **)&v196, 14, &dword_1D3E75664) + 8) = v145;
  v146 = operator new();
  v172 = 0;
  v171 = &off_1E95AF9B0;
  v147 = v182;
  if (v182)
  {
    v148 = (unsigned int *)(v182 + 8);
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  v173 = v147;
  v150 = operator new();
  sub_1D3D81D4C(&v202, "");
  *(_DWORD *)(v150 + 8) = 0;
  v151 = (unsigned int *)(v150 + 8);
  *(_QWORD *)v150 = off_1E95AF718;
  v152 = (_BYTE *)(v150 + 16);
  if (SHIBYTE(v203) < 0)
  {
    sub_1D3D7FCC0(v152, (void *)v202, *((unint64_t *)&v202 + 1));
  }
  else
  {
    *(_OWORD *)v152 = v202;
    *(_QWORD *)(v150 + 32) = v203;
  }
  do
    v153 = __ldxr(v151);
  while (__stxr(v153 + 1, v151));
  v170 = (unsigned int *)v150;
  sub_1D3D7F3AC((uint64_t)v169, &v196);
  sub_1D3DAFA54(v146, (uint64_t)&v171, (uint64_t *)&v170, v169);
  v154 = (unsigned int *)(v146 + 8);
  do
    v155 = __ldxr(v154);
  while (__stxr(v155 + 1, v154));
  *v160 = v146;
  sub_1D3D7F520((_QWORD *)v169[1]);
  sub_1D3D7F598(&v170);
  if (SHIBYTE(v203) < 0)
    operator delete((void *)v202);
  sub_1D3D7F558(&v171);
  sub_1D3D7F520(v197);
  sub_1D3D7F558(v181);
  v196 = (uint64_t (*)())&v186;
  sub_1D3DFDEB0((void ***)&v196);
  sub_1D3D7F558(v189);
  v192[0] = &off_1E95AF878;
  sub_1D3DF5878(&v194);
  return sub_1D3D6D10C(&v193);
}

void sub_1D3E00F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(char *)(v42 - 113) < 0)
    operator delete(*(void **)(v42 - 136));
  MEMORY[0x1D8254C54](v41, 0x1093C40E92185C3);
  sub_1D3D7F558(&a21);
  MEMORY[0x1D8254C54](v40, 0x10B3C40E71DBE67);
  sub_1D3D7F520(*(_QWORD **)(v42 - 184));
  sub_1D3D7F558(&a31);
  *(_QWORD *)(v42 - 192) = &a37;
  sub_1D3DFDEB0((void ***)(v42 - 192));
  sub_1D3D7F558(&a40);
  *(_QWORD *)(v42 - 240) = &off_1E95AF878;
  sub_1D3DF5878((unsigned int **)(v42 - 208));
  sub_1D3D6D10C((unsigned int **)(v42 - 224));
  _Unwind_Resume(a1);
}

void sub_1D3E010C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned int *a29)
{
  sub_1D3DFDE80(&a29);
  JUMPOUT(0x1D3E011A4);
}

void sub_1D3E010C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1D3D7F558(&a26);
  JUMPOUT(0x1D3E0119CLL);
}

void sub_1D3E010D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v24;
  char *v25;
  _QWORD *exception;

  if (a2 == 1)
  {
    v24 = __cxa_begin_catch(a1);
    v25 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
    sub_1D3DDE1A0((_QWORD *)(v23 - 192), v25);
    *(_QWORD *)(v23 - 192) = &off_1E95AF388;
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE384(exception, v23 - 192);
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  sub_1D3D82064((_QWORD *)(v23 - 136));
  sub_1D3D7F558(&a23);
  JUMPOUT(0x1D3E01194);
}

void sub_1D3E01150()
{
  uint64_t v0;

  sub_1D3DDE164((std::exception *)(v0 - 192));
  __cxa_end_catch();
  JUMPOUT(0x1D3E01178);
}

void sub_1D3E011C8()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x1D8254C54](v0, 0x10A1C40FB604211);
  sub_1D3D7F558((_QWORD *)(v1 - 192));
  JUMPOUT(0x1D3E0123CLL);
}

void sub_1D3E01208()
{
  uint64_t v0;

  sub_1D3DFDE80((unsigned int **)(v0 - 160));
  sub_1D3D7F558((_QWORD *)(v0 - 192));
  JUMPOUT(0x1D3E0123CLL);
}

void sub_1D3E01228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  *(_QWORD *)(v39 - 192) = &a36;
  sub_1D3DFDEB0(v39 - 192);
  if (a14)
    operator delete(a14);
  sub_1D3D7F558(&a33);
  sub_1D3D7F558(&a39);
  *(_QWORD *)(v39 - 240) = &off_1E95AF878;
  sub_1D3DF5878(v39 - 208);
  sub_1D3D6D10C(v39 - 224);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E01290(uint64_t **a1, _DWORD *a2)
{
  unsigned int *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = (unsigned int *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[8];
        if (v7 < 0x40000001)
          break;
        v4 = (unsigned int *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 == 0x40000000)
        break;
      v4 = (unsigned int *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = v6;
    v6 = operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = *a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_1D3D7F97C(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void sub_1D3E01370(char *a1)
{
  if (a1)
  {
    sub_1D3E01370(*(_QWORD *)a1);
    sub_1D3E01370(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

_QWORD *sub_1D3E013B8(uint64_t *a1, uint64_t a2, uint64_t **a3, char *a4)
{
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  const char *v22;
  uint64_t *v23;
  unsigned int v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  char v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  std::string::size_type v53;
  uint64_t v54;
  const std::string::value_type *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  std::string::size_type v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  _BYTE *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  _QWORD *exception;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t (**v84)(_QWORD);
  int v85;
  uint64_t v86;
  uint64_t (**v87)(_QWORD);
  int v88;
  uint64_t v89;
  char **v90;
  char *v91[2];
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int *v97;
  _QWORD v98[3];
  std::string v99;
  unsigned int *v100;
  void *__p[2];
  uint64_t v102;
  uint64_t (**v103)(_QWORD);
  int v104;
  uint64_t v105;

  v85 = 0;
  v84 = &off_1E95AF9B0;
  if (a2)
  {
    v7 = (unsigned int *)(a2 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v86 = a2;
  v9 = *((_DWORD *)sub_1D3D7F308(a3, 12, &dword_1D3E7565C) + 8);
  v10 = *((_DWORD *)sub_1D3D7F308(a3, 13, &dword_1D3E75660) + 8);
  v91[0] = 0;
  v91[1] = 0;
  v90 = v91;
  if (a4)
  {
    v11 = sub_1D3E01290((uint64_t **)&v90, dword_1D3E6F538);
    sub_1D3DFF314((std::string *)(v11 + 5), a4);
  }
  v88 = 0;
  v87 = &off_1E95AF9B0;
  if (v86)
  {
    v12 = (unsigned int *)(v86 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v89 = v86;
  v82 = sub_1D3E0F438(v9);
  v81 = sub_1D3E0D188(v10);
  v14 = operator new();
  v15 = v14;
  *(_DWORD *)(v14 + 8) = 0;
  v16 = (unsigned int *)(v14 + 8);
  *(_QWORD *)v14 = &off_1E95AFA60;
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = &off_1E95AF9B0;
  *(_QWORD *)(v14 + 32) = 0;
  if (v89)
  {
    v17 = (unsigned int *)(v89 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(unsigned int **)(v14 + 32);
    if (v19)
      sub_1D3D6D13C(v19);
  }
  *(_QWORD *)(v15 + 32) = v89;
  *(_QWORD *)(v15 + 40) = 0;
  do
    v20 = __ldxr(v16);
  while (__stxr(v20 + 1, v16));
  v80 = a1;
  v100 = (unsigned int *)v15;
  memset(&v99, 0, sizeof(v99));
  sub_1D3DB48A0((uint64_t)v98);
  v21 = 0;
  v83 = 0;
  v22 = "GBK";
  do
  {
    if (8
       * (*(_DWORD *)(*(_QWORD *)(v15 + 32) + 24) - *(_DWORD *)(*(_QWORD *)(v15 + 32) + 16) - *(_DWORD *)(v15 + 40))
       - *(_DWORD *)(v15 + 44) > 3)
    {
      v24 = sub_1D3DA34C8(v15, 4);
      if (v24 >= 0xE || ((0x23BFu >> v24) & 1) == 0)
      {
        sub_1D3D93A78((uint64_t)&v103);
        sub_1D3D8C900(&v103, (uint64_t)"Illegal mode bits: ", 19);
        std::ostream::operator<<();
        exception = __cxa_allocate_exception(0x20uLL);
        sub_1D3D93B64(__p, (uint64_t)&v104);
        if (v102 >= 0)
          v76 = (char *)__p;
        else
          v76 = (char *)__p[0];
        sub_1D3DDE1A0(exception, v76);
        *exception = &off_1E95AF388;
        __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      v23 = (uint64_t *)off_1E95B3950[v24];
      sub_1D3E028AC();
    }
    else
    {
      sub_1D3E028AC();
      v23 = &qword_1EFE31898;
    }
    v25 = (int *)*v23;
    sub_1D3E028AC();
    if (v25 != (int *)qword_1EFE31898)
    {
      sub_1D3E028AC();
      if (v25 == (int *)qword_1EFE318D0 || (sub_1D3E028AC(), v25 == (int *)qword_1EFE318D8))
      {
        v83 = 1;
        goto LABEL_40;
      }
      sub_1D3E028AC();
      if (v25 == (int *)qword_1EFE318B0)
      {
        sub_1D3DA34C8(v15, 16);
        goto LABEL_40;
      }
      sub_1D3E028AC();
      if (v25 == (int *)qword_1EFE318C0)
      {
        v32 = sub_1D3DA34C8(v15, 8);
        v33 = v32;
        if (v32 < 0)
        {
          if ((v32 & 0xC0) == 0x80)
          {
            v38 = sub_1D3DA34C8(v15, 8);
            v39 = (v33 & 0x3F) << 8;
          }
          else
          {
            if ((v32 & 0xE0) != 0xC0)
              goto LABEL_102;
            v38 = sub_1D3DA34C8(v15, 16);
            v39 = (v33 & 0x1F) << 16;
          }
          v34 = v38 | v39;
        }
        else
        {
          v34 = v32 & 0x7F;
        }
        v21 = sub_1D3DA51B4(v34);
        if (!v21)
        {
LABEL_102:
          v77 = __cxa_allocate_exception(0x20uLL);
          v77[2] = 0;
          v77[3] = 0;
          *v77 = &off_1E95AF330;
          v77[1] = 0;
          __cxa_throw(v77, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
        }
      }
      else
      {
        sub_1D3E028AC();
        if (v25 != (int *)qword_1EFE318E0)
        {
          v26 = *(_DWORD *)(v82 + 12);
          v27 = v25;
          if (v26 >= 10)
          {
            v27 = v25 + 2;
            if (v26 <= 0x1A)
              v27 = v25 + 1;
          }
          v28 = sub_1D3DA34C8(v15, *v27);
          sub_1D3E028AC();
          if (v25 == (int *)qword_1EFE318A0)
          {
            v40 = v100;
            if (v100)
            {
              v41 = v100 + 2;
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v96 = v40;
            v43 = &v96;
            sub_1D3DFF454((uint64_t *)&v96, &v99, v28, (uint64_t)v21, (uint64_t)&v90);
          }
          else
          {
            sub_1D3E028AC();
            if (v25 == (int *)qword_1EFE318A8)
            {
              v44 = v100;
              if (v100)
              {
                v45 = v100 + 2;
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 1, v45));
              }
              v95 = v44;
              sub_1D3DFFA64((uint64_t)v44, &v99, v28, v83 & 1, (uint64_t)v21, (uint64_t)&v90);
              v43 = &v95;
            }
            else
            {
              sub_1D3E028AC();
              if (v25 != (int *)qword_1EFE318B8)
              {
                sub_1D3E028AC();
                if (v25 == (int *)qword_1EFE318C8)
                {
                  v29 = v100;
                  if (v100)
                  {
                    v30 = v100 + 2;
                    do
                      v31 = __ldxr(v30);
                    while (__stxr(v31 + 1, v30));
                  }
                  v93 = v29;
                  sub_1D3DFEAC4((uint64_t *)&v93, &v99, v28);
                }
                v79 = __cxa_allocate_exception(0x20uLL);
                v79[2] = 0;
                v79[3] = 0;
                *v79 = &off_1E95AF330;
                v79[1] = 0;
                __cxa_throw(v79, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
              }
              v62 = v100;
              if (v100)
              {
                v63 = v100 + 2;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
              }
              v94 = v62;
              sub_1D3DFEBD4((uint64_t)v62, &v99, v28, (uint64_t)v21, (uint64_t)v98, (uint64_t)&v90);
              v43 = &v94;
            }
          }
LABEL_80:
          sub_1D3DB4958(v43);
          goto LABEL_40;
        }
        v35 = sub_1D3DA34C8(v15, 4);
        v36 = *(_DWORD *)(v82 + 12);
        v37 = v25;
        if (v36 >= 10)
        {
          if (v36 > 0x1A)
            v37 = v25 + 2;
          else
            v37 = v25 + 1;
        }
        v47 = sub_1D3DA34C8(v15, *v37);
        if (v35 == 1)
        {
          v48 = v47;
          v49 = v100;
          if (v100)
          {
            v50 = v100 + 2;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          v97 = v49;
          if (13 * v47 > (int)(8
                              * (*(_DWORD *)(*((_QWORD *)v49 + 4) + 24)
                               - *(_DWORD *)(*((_QWORD *)v49 + 4) + 16)
                               - v49[10])
                              - v49[11]))
          {
            v78 = __cxa_allocate_exception(0x20uLL);
            v78[2] = 0;
            v78[3] = 0;
            *v78 = &off_1E95AF330;
            v78[1] = 0;
            __cxa_throw(v78, (struct type_info *)&unk_1E95AE1A0, (void (*)(void *))sub_1D3DDE1E4);
          }
          v52 = (uint64_t)v22;
          v53 = 2 * v47;
          v54 = operator new[]();
          v55 = (const std::string::value_type *)v54;
          if (v48 >= 1)
          {
            v56 = v54 + 1;
            v57 = v48 + 1;
            do
            {
              v58 = sub_1D3DA34C8((uint64_t)v49, 13);
              v59 = (v58 % 96) | ((v58 / 96) << 8);
              if (v59 >= 2560)
                v60 = 42657;
              else
                v60 = 41377;
              *(_WORD *)(v56 - 1) = bswap32(v60 + v59) >> 16;
              v56 += 2;
              --v57;
            }
            while (v57 > 1);
          }
          v61 = v53;
          v22 = (const char *)v52;
          sub_1D3DFE7F4(&v99, v55, v61, v52);
          MEMORY[0x1D8254C3C](v55, 0x1000C8077774924);
          v43 = &v97;
          goto LABEL_80;
        }
      }
    }
LABEL_40:
    sub_1D3E028AC();
  }
  while (v25 != (int *)qword_1EFE31898);
  v65 = operator new();
  v104 = 0;
  v103 = &off_1E95AF9B0;
  if (v89)
  {
    v66 = (unsigned int *)(v89 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v105 = v89;
  v68 = operator new();
  *(_DWORD *)(v68 + 8) = 0;
  v69 = (unsigned int *)(v68 + 8);
  *(_QWORD *)v68 = off_1E95AF718;
  v70 = (_BYTE *)(v68 + 16);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1D3D7FCC0(v70, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v70 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
    *(_QWORD *)(v68 + 32) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
  }
  do
    v71 = __ldxr(v69);
  while (__stxr(v71 + 1, v69));
  v92 = (unsigned int *)v68;
  if (*(char *)(v81 + 31) < 0)
  {
    sub_1D3D7FCC0(__p, *(void **)(v81 + 8), *(_QWORD *)(v81 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v81 + 8);
    v102 = *(_QWORD *)(v81 + 24);
  }
  sub_1D3DAF910(v65, (uint64_t)&v103, (uint64_t *)&v92, (uint64_t)v98, (__int128 *)__p);
  v72 = (unsigned int *)(v65 + 8);
  do
    v73 = __ldxr(v72);
  while (__stxr(v73 + 1, v72));
  *v80 = v65;
  if (SHIBYTE(v102) < 0)
    operator delete(__p[0]);
  sub_1D3D7F598(&v92);
  sub_1D3D7F558(&v103);
  sub_1D3DAF7E0(v98);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  sub_1D3DB4958(&v100);
  sub_1D3D7F558(&v87);
  sub_1D3E01370(v91[0]);
  return sub_1D3D7F558(&v84);
}

void sub_1D3E01C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,unsigned int *a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,unsigned int *a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,char a58)
{
  sub_1D3DB4958(&a28);
  sub_1D3DAF7E0(&a41);
  if (a49 < 0)
    operator delete(__p);
  sub_1D3DB4958(&a50);
  sub_1D3D7F558(&a16);
  sub_1D3E01370(a20);
  sub_1D3D7F558(&a13);
  _Unwind_Resume(a1);
}

void sub_1D3E01E38()
{
  JUMPOUT(0x1D3E01E40);
}

void sub_1D3E01E4C()
{
  JUMPOUT(0x1D3E01E58);
}

void sub_1D3E01E9C()
{
  __cxa_end_catch();
  JUMPOUT(0x1D3E01EC0);
}

uint64_t MRCDecoderResultGetTypeID()
{
  if (qword_1EDB89338[0] != -1)
    dispatch_once_f(qword_1EDB89338, 0, (dispatch_function_t)sub_1D3D7C440);
  return qword_1EDB89310;
}

uint64_t MRCDecoderResultGetDescriptorCount(CFTypeRef cf)
{
  CFTypeID v2;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB89338[0] != -1)
      dispatch_once_f(qword_1EDB89338, 0, (dispatch_function_t)sub_1D3D7C440);
    if (v2 != qword_1EDB89310)
      _os_assumes_log();
  }
  return (uint64_t)(*((_QWORD *)cf + 3) - *((_QWORD *)cf + 2)) >> 3;
}

unint64_t MRCDecoderResultGetDescriptorAtIndex(CFTypeRef cf, unint64_t a2)
{
  CFTypeID v4;
  uint64_t v5;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (qword_1EDB89338[0] != -1)
      dispatch_once_f(qword_1EDB89338, 0, (dispatch_function_t)sub_1D3D7C440);
    if (v4 != qword_1EDB89310)
      _os_assumes_log();
  }
  v5 = *((_QWORD *)cf + 2);
  if (a2 >= (*((_QWORD *)cf + 3) - v5) >> 3)
  {
    _os_assumes_log();
    v5 = *((_QWORD *)cf + 2);
  }
  return atomic_load((unint64_t *)(v5 + 8 * a2));
}

CFDictionaryRef MRCDecoderResultCopyAttributes(unint64_t *cf)
{
  const __CFAllocator *v2;
  CFTypeID v3;
  CFTypeRef v4;
  const __CFDictionary *v5;
  CFDictionaryRef Copy;
  CFTypeRef v8;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (qword_1EDB89338[0] != -1)
      dispatch_once_f(qword_1EDB89338, 0, (dispatch_function_t)sub_1D3D7C440);
    if (v3 != qword_1EDB89310)
      _os_assumes_log();
  }
  v4 = (CFTypeRef)atomic_load(cf + 5);
  if (v4)
    v4 = CFRetain(v4);
  v8 = v4;
  v5 = (const __CFDictionary *)atomic_load((unint64_t *)&v8);
  Copy = CFDictionaryCreateCopy(v2, v5);
  sub_1D3D740C8((unint64_t *)&v8);
  return Copy;
}

void sub_1D3E02130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D740C8((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t MRCDecoderResultCopyAttribute(unint64_t *cf, void *key)
{
  CFTypeID v4;
  CFTypeRef v5;
  const __CFDictionary *v6;
  const void *Value;
  unint64_t v8;
  CFTypeRef v10;
  const void *v11;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (qword_1EDB89338[0] != -1)
      dispatch_once_f(qword_1EDB89338, 0, (dispatch_function_t)sub_1D3D7C440);
    if (v4 != qword_1EDB89310)
      _os_assumes_log();
  }
  v5 = (CFTypeRef)atomic_load(cf + 5);
  if (v5)
    v5 = CFRetain(v5);
  v10 = v5;
  v6 = (const __CFDictionary *)atomic_load((unint64_t *)&v10);
  Value = CFDictionaryGetValue(v6, key);
  if (Value)
    Value = CFRetain(Value);
  v11 = Value;
  do
    v8 = __ldaxr((unint64_t *)&v11);
  while (__stlxr(0, (unint64_t *)&v11));
  sub_1D3D8BA0C((unint64_t *)&v11);
  sub_1D3D740C8((unint64_t *)&v10);
  return v8;
}

void sub_1D3E02220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D740C8(&a9);
  _Unwind_Resume(a1);
}

CFStringRef sub_1D3E02234(_QWORD *a1, int a2)
{
  const __CFAllocator *v4;
  __CFString *v6;
  __CFString *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  const __CFString *v12;
  const __CFArray *v14;
  __CFString *v16;
  unint64_t v17;
  __CFString *v18;
  const __CFDictionary *v20;
  __CFString *v21;
  const __CFDictionary *v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  const __CFString *v26;
  CFStringRef Copy;
  CFStringRef v29;
  CFArrayRef ArrayBySeparatingStrings;
  CFStringRef v31;
  CFMutableStringRef Mutable;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (atomic_load((unint64_t *)&Mutable))
  {
    v6 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v6, 0, CFSTR("<%s %p> {\n"), "MRCDecoderResult", a1 - 2);
    v7 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v7, 0, CFSTR("    descriptors [%zu] {\n"), (uint64_t)(a1[1] - *a1) >> 3);
    v8 = (unint64_t *)*a1;
    v9 = (unint64_t *)a1[1];
    if ((unint64_t *)*a1 != v9)
    {
      do
      {
        v10 = atomic_load(v8);
        v31 = sub_1D3E274F0(v10 + 16, a2);
        if (atomic_load((unint64_t *)&v31))
        {
          v12 = (const __CFString *)atomic_load((unint64_t *)&v31);
          ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v4, v12, CFSTR("\n"));
          if (atomic_load((unint64_t *)&ArrayBySeparatingStrings))
          {
            v14 = (const __CFArray *)atomic_load((unint64_t *)&ArrayBySeparatingStrings);
            v29 = CFStringCreateByCombiningStrings(v4, v14, CFSTR("\n        "));
            if (atomic_load((unint64_t *)&v29))
            {
              v16 = (__CFString *)atomic_load((unint64_t *)&Mutable);
              v17 = atomic_load((unint64_t *)&v29);
              CFStringAppendFormat(v16, 0, CFSTR("        %@\n"), v17);
            }
            sub_1D3D8C70C((unint64_t *)&v29);
          }
          sub_1D3D74138((unint64_t *)&ArrayBySeparatingStrings);
        }
        sub_1D3D8C70C((unint64_t *)&v31);
        ++v8;
      }
      while (v8 != v9);
    }
    v18 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v18, CFSTR("    }\n"));
    if (atomic_load(a1 + 3))
    {
      v20 = (const __CFDictionary *)atomic_load(a1 + 3);
      if (CFDictionaryGetCount(v20) >= 1)
      {
        v21 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppend(v21, CFSTR("    attributes {\n"));
        v22 = (const __CFDictionary *)atomic_load(a1 + 3);
        v23 = (void *)atomic_load((unint64_t *)&Mutable);
        CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)sub_1D3E024A4, v23);
        v24 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppend(v24, CFSTR("    }\n"));
      }
    }
    v25 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v25, CFSTR("}"));
    v26 = (const __CFString *)atomic_load((unint64_t *)&Mutable);
    Copy = CFStringCreateCopy(v4, v26);
  }
  else
  {
    Copy = 0;
  }
  sub_1D3D8FA0C((unint64_t *)&Mutable);
  return Copy;
}

void sub_1D3E02458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3D8FA0C((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3E024A4(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("        %@ %@\n"), a1, a2);
}

void sub_1D3E024D8(void *key, const void *a2, CFDictionaryRef theDict)
{
  NSObject *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (CFDictionaryGetValue(theDict, key))
  {
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v6 = qword_1EDB89E38;
    if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_DEBUG))
    {
      v7 = 138543362;
      v8 = key;
      _os_log_debug_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_DEBUG, "MRCDecoderResult: consolidation: attribute key \"%{public}@\" already exists, skipping...", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    CFDictionarySetValue(theDict, key, a2);
  }
}

_QWORD *sub_1D3E025F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v0 = (_QWORD *)operator new();
  *v0 = 0;
  v0[1] = 0;
  sub_1D3D81D4C(v0 + 2, "TERMINATOR");
  qword_1EFE31898 = (uint64_t)v0;
  v1 = operator new();
  *(_OWORD *)v1 = xmmword_1D3E82080;
  sub_1D3D81D4C((_QWORD *)(v1 + 16), "NUMERIC");
  qword_1EFE318A0 = v1;
  v2 = operator new();
  *(_OWORD *)v2 = xmmword_1D3E82090;
  sub_1D3D81D4C((_QWORD *)(v2 + 16), "ALPHANUMERIC");
  qword_1EFE318A8 = v2;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1D3E820A0;
  sub_1D3D81D4C((_QWORD *)(v3 + 16), "STRUCTURED_APPEND");
  qword_1EFE318B0 = v3;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_1D3E820B0;
  sub_1D3D81D4C((_QWORD *)(v4 + 16), "BYTE");
  qword_1EFE318B8 = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_1D3E820C0;
  sub_1D3D81D4C((_QWORD *)(v5 + 16), "ECI");
  qword_1EFE318C0 = v5;
  v6 = operator new();
  *(_OWORD *)v6 = xmmword_1D3E820D0;
  sub_1D3D81D4C((_QWORD *)(v6 + 16), "KANJI");
  qword_1EFE318C8 = v6;
  v7 = operator new();
  *(_OWORD *)v7 = xmmword_1D3E820E0;
  sub_1D3D81D4C((_QWORD *)(v7 + 16), "FNC1_FIRST_POSITION");
  qword_1EFE318D0 = v7;
  v8 = operator new();
  *(_OWORD *)v8 = xmmword_1D3E820F0;
  sub_1D3D81D4C((_QWORD *)(v8 + 16), "FNC1_SECOND_POSITION");
  qword_1EFE318D8 = v8;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_1D3E82100;
  result = sub_1D3D81D4C((_QWORD *)(v9 + 16), "HANZI");
  qword_1EFE318E0 = v9;
  return result;
}

void sub_1D3E02864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x1012C407D69FF4CLL);
  _Unwind_Resume(a1);
}

void sub_1D3E028AC()
{
  unint64_t v0;
  _QWORD *(**v1)();
  _QWORD *(*v2)();

  v0 = atomic_load(&qword_1EFE318E8);
  if (v0 != -1)
  {
    v1 = &v2;
    v2 = sub_1D3E025F8;
    std::__call_once(&qword_1EFE318E8, &v1, (void (__cdecl *)(void *))sub_1D3DA51A8);
  }
}

void sub_1D3E02904()
{
  JUMPOUT(0x1D8254C54);
}

__int128 *sub_1D3E02918(int a1)
{
  unsigned __int8 v2;
  int v3;
  int v4;

  if ((a1 - 5) < 0xFFFFFFFC)
    return 0;
  v2 = atomic_load((unsigned __int8 *)qword_1EFE31970);
  if ((v2 & 1) == 0)
  {
    v4 = a1;
    v3 = __cxa_guard_acquire(qword_1EFE31970);
    a1 = v4;
    if (v3)
    {
      xmmword_1EFE318F0[0] = xmmword_1D3E82110;
      qword_1EFE31900 = 0;
      unk_1EFE31908 = 0;
      xmmword_1EFE31910 = xmmword_1D3E82120;
      unk_1EFE31920 = xmmword_1D3E6EA64;
      xmmword_1EFE31930 = xmmword_1D3E82130;
      unk_1EFE31940 = xmmword_1D3E6EA7C;
      xmmword_1EFE31950 = xmmword_1D3E82140;
      unk_1EFE31960 = xmmword_1D3E6EA94;
      __cxa_guard_release(qword_1EFE31970);
      a1 = v4;
    }
  }
  return &xmmword_1EFE318F0[2 * (a1 - 1)];
}

void sub_1D3E02A04(uint64_t a1)
{
  sub_1D3E02A28(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E02A28(uint64_t a1)
{
  unsigned int ***v2;
  unsigned int **v3;
  unint64_t v4;

  *(_QWORD *)a1 = &off_1E95AF908;
  v2 = *(unsigned int ****)(a1 + 24);
  v3 = v2[1];
  if (v3 != *v2)
  {
    v4 = 0;
    v3 = *v2;
    do
    {
      sub_1D3D6D13C(v3[v4]);
      *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v4++) = 0;
      v2 = *(unsigned int ****)(a1 + 24);
      v3 = *v2;
    }
    while (v4 < v2[1] - *v2);
  }
  if (v3)
  {
    v2[1] = v3;
    operator delete(v3);
  }
  MEMORY[0x1D8254C54](v2, 0x80C40D6874129);
  sub_1D3D7FBF4((unsigned int **)(a1 + 72));
  sub_1D3D6D10C((unsigned int **)(a1 + 16));
  return a1;
}

float sub_1D3E02AD8(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  float v8;
  _DWORD v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return NAN;
  v3 = a2[1];
  if (!v3)
    return NAN;
  v4 = a2[2];
  if (!v4)
    return NAN;
  v5 = 0;
  v6 = 0;
  v10[0] = *a2;
  v10[1] = v3;
  v10[2] = v4;
  do
  {
    v6 += v10[v5] * v10[v5];
    ++v5;
  }
  while (v5 != 3);
  v7 = v4 + v3 + v2;
  v8 = vabds_f32((float)v6 / (float)v7, *(float *)(a1 + 64)) / *(float *)(a1 + 64);
  if (v8 > 0.5)
    v8 = NAN;
  return (float)((float)(-3 * v6 + v7 * v7) / (float)((float)v6 + (float)v6)) + (float)(v8 * -0.1);
}

unsigned int **sub_1D3E02BD4(unsigned int **a1, uint64_t a2, int **a3, unint64_t a4, int a5, int a6)
{
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  unsigned int **v28;
  int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  float v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  float v45;
  float v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  int32x2_t v50;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  int *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char v85;
  unsigned int v86;
  uint64_t i;
  int v88;
  uint64_t v89;
  char v90;
  float v91;
  char *v92;
  float v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  float v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  BOOL v108;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  void **v114;
  unint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unsigned int *v123;
  float v124;
  float v125;
  float32x2_t v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  float32x2_t v140;
  __int32 v141;
  int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unsigned int **v148;
  int v150;
  unsigned int *v151;
  char *v152[3];
  void *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  void *__p;
  int *v158;
  uint64_t v159;

  v155 = 0;
  v156 = 0;
  v153 = 0;
  v154 = 0;
  v11 = **a3;
  v10 = (*a3)[1];
  v12 = (*a3)[2];
  v13 = *(_DWORD **)(a2 + 16);
  v14 = v13[14];
  v15 = v13[4];
  v16 = v13[8];
  LODWORD(v152[0]) = 0;
  sub_1D3D821BC(&__p, 3uLL, v152);
  v17 = a4;
  if ((a4 & 0x80000000) != 0)
  {
    v24 = (int *)__p;
    v28 = a1;
LABEL_9:
    if (v24)
    {
LABEL_19:
      v158 = v24;
      operator delete(v24);
    }
    goto LABEL_20;
  }
  v148 = a1;
  v18 = a2;
  v19 = 0;
  v141 = v10 + v11 + v12;
  v20 = (float)(a5 - v12) + (float)((float)v10 * -0.5);
  v143 = (int)v20;
  v144 = v18;
  v21 = 2 * v10;
  v150 = v16 & (v14 - 1) | v15 & -v14;
  v22 = v17;
  v23 = *(_QWORD **)(v18 + 16);
  v24 = (int *)__p;
  v25 = *((_DWORD *)__p + 1);
  v145 = v17;
  v26 = v17 + 1;
  while (1)
  {
    v27 = v25 + v19;
    if (sub_1D3D6D4A0(v23, v143, v22) == a6 || v27 > v21)
      break;
    v24[1] = v25 + v19++ + 1;
    v108 = v22-- <= 0;
    if (v108)
      goto LABEL_18;
  }
  if (v27 > v21)
    goto LABEL_18;
  if ((v22 & 0x80000000) == 0)
  {
    v29 = v26 - v19;
    do
    {
      if (sub_1D3D6D4A0(v23, v143, v22) != a6)
        break;
      if (*v24 > v21)
        break;
      ++*v24;
      --v22;
      --v29;
    }
    while (v29 > 0);
  }
  if (*v24 > v21)
    goto LABEL_18;
  LODWORD(v34) = v145 + 1;
  v35 = v150;
  if ((int)v145 + 1 < v150)
  {
    v36 = 0;
    v34 = (int)v34;
    v37 = v25 + v19;
    while (1)
    {
      v27 = v37 + v36;
      if (sub_1D3D6D4A0(v23, v143, v34) == a6 || v27 > v21)
        break;
      v24[1] = v37 + v36 + 1;
      ++v34;
      if (~(_DWORD)v145 + v150 == ++v36)
        goto LABEL_18;
    }
    v35 = v150;
  }
  if (v35 == (_DWORD)v34 || v27 > v21)
    goto LABEL_18;
  v38 = v35 - v34;
  if (v35 > (int)v34)
  {
    v34 = (int)v34;
    while (sub_1D3D6D4A0(v23, v143, v34) == a6)
    {
      v39 = v24[2];
      if (v39 > v21)
        break;
      v24[2] = v39 + 1;
      ++v34;
      if (!--v38)
      {
        LODWORD(v34) = v150;
        break;
      }
    }
  }
  if (v24[2] > v21)
  {
LABEL_18:
    v28 = v148;
    goto LABEL_19;
  }
  v154 = 0;
  sub_1D3DC6DD0((uint64_t)&v153, v24);
  v28 = v148;
  sub_1D3DC6DD0((uint64_t)&v153, (_DWORD *)__p + 1);
  sub_1D3DC6DD0((uint64_t)&v153, (_DWORD *)__p + 2);
  v24 = (int *)__p;
  if (sub_1D3E02AD8(v144, (int *)__p) <= -0.5)
    goto LABEL_9;
  v40 = (float)(v34 - v24[2]) + (float)((float)v24[1] * -0.5);
  v158 = v24;
  operator delete(v24);
  if (vabds_f32(v40, (float)v145) > *(float *)(v144 + 64))
  {
LABEL_20:
    *v28 = 0;
    v30 = v156;
    if (v156)
    {
      v31 = v156 + 2;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
LABEL_23:
    *v28 = v30;
    goto LABEL_24;
  }
  v41 = (int *)v153;
  v42 = *(_DWORD *)v153;
  v43 = *((_DWORD *)v153 + 1);
  v44 = *((_DWORD *)v153 + 2);
  v45 = sub_1D3E02AD8(v144, *a3);
  v46 = v45 + sub_1D3E02AD8(v144, v41);
  if (v46 < -0.5)
  {
    *v148 = 0;
    v30 = v156;
    if (v156)
    {
      v47 = v156 + 2;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    goto LABEL_23;
  }
  __p = 0;
  v158 = 0;
  v159 = 0;
  memset(v152, 0, sizeof(v152));
  sub_1D3DBAD60((char **)&__p, 3uLL);
  sub_1D3DBAD60(v152, 3uLL);
  v49 = 0;
  v50.i32[0] = v141;
  v50.i32[1] = v43 + v42 + v44;
  __asm { FMOV            V1.2S, #3.0 }
  v140 = vdiv_f32(vcvt_f32_s32(v50), _D1);
  v56 = *(_QWORD **)(v144 + 16);
  v57 = v56[7];
  v58 = -v57;
  v59 = v56[2];
  v60 = v59 & -v57;
  LODWORD(v57) = v57 - 1;
  v61 = v56[4];
  v146 = v61 & v57 | v60;
  LODWORD(v62) = (int)v40;
  v63 = a6 ^ 1;
  v142 = v59 & v57 | v61 & v58;
  v64 = (int *)__p;
  v65 = (int *)v152[0];
  do
  {
    v64[v49] = 0;
    v65[v49++] = 0;
  }
  while (v49 != 3);
  v66 = 1;
  v67 = (int)v20;
  LODWORD(v68) = (int)v40;
  do
  {
    v69 = v66;
    if ((v68 & 0x80000000) == 0 && (v67 & 0x80000000) == 0)
    {
      v70 = v66 & 1;
      if ((int)v69 >= 0)
        v71 = v70;
      else
        v71 = -v70;
      v72 = v67;
      v68 = v68;
      while (1)
      {
        v73 = sub_1D3D6D4A0(v56, v72, v68);
        if (v71 == v63)
        {
          if ((v73 & 1) == 0)
            goto LABEL_68;
        }
        else if ((v73 & 1) != 0)
        {
LABEL_68:
          v67 = v72;
          break;
        }
        ++v64[v69];
        v67 = v72 - 1;
        v108 = v68-- < 1;
        if (!v108)
        {
          v108 = v72-- <= 0;
          if (!v108)
            continue;
        }
        break;
      }
    }
    v66 = v69 - 1;
  }
  while (v69);
  LODWORD(v74) = v62 + 1;
  LODWORD(v75) = v143 + 1;
  v76 = 1;
  LODWORD(v77) = v62 + 1;
  do
  {
    if ((int)v77 < v146 && (int)v75 < v142)
    {
      if ((int)v76 >= 0)
        v78 = v76 & 1;
      else
        v78 = -(v76 & 1);
      v75 = (int)v75;
      v77 = (int)v77;
      do
      {
        v79 = sub_1D3D6D4A0(v56, v75, v77);
        if (v78 == v63)
        {
          if ((v79 & 1) == 0)
            break;
        }
        else if ((v79 & 1) != 0)
        {
          break;
        }
        ++v64[v76];
        ++v77;
        ++v75;
      }
      while (v77 < v146 && v75 < v142);
    }
    ++v76;
  }
  while (v76 != 3);
  if (sub_1D3E02AD8(v144, v64) >= -0.5)
  {
    v80 = 1;
    LODWORD(v81) = (int)v20;
    do
    {
      v82 = v80;
      if ((v62 & 0x80000000) == 0 && (int)v81 < v142)
      {
        v83 = v80 & 1;
        if ((int)v82 >= 0)
          v84 = v82 & 1;
        else
          v84 = -v83;
        v81 = (int)v81;
        v62 = v62;
        do
        {
          v85 = sub_1D3D6D4A0(v56, v81, v62);
          if (v84 == v63)
          {
            if ((v85 & 1) == 0)
              break;
          }
          else if ((v85 & 1) != 0)
          {
            break;
          }
          ++v65[v82];
          ++v81;
          v108 = v62-- < 1;
        }
        while (!v108 && v81 < v142);
      }
      v80 = v82 - 1;
    }
    while (v82);
    v86 = v143 - 1;
    for (i = 1; i != 3; ++i)
    {
      if ((int)v74 < v146 && (v86 & 0x80000000) == 0)
      {
        if ((int)i >= 0)
          v88 = i & 1;
        else
          v88 = -(i & 1);
        v89 = v86;
        v74 = (int)v74;
        while (1)
        {
          v90 = sub_1D3D6D4A0(v56, v89, v74);
          if (v88 == v63)
          {
            if ((v90 & 1) == 0)
              goto LABEL_114;
          }
          else if ((v90 & 1) != 0)
          {
LABEL_114:
            v86 = v89;
            break;
          }
          ++v65[i];
          ++v74;
          v86 = v89 - 1;
          if (v74 < v146)
          {
            v108 = v89-- <= 0;
            if (!v108)
              continue;
          }
          break;
        }
      }
    }
  }
  v91 = sub_1D3E02AD8(v144, v64);
  v92 = (char *)v65;
  v93 = (float)(v91 + sub_1D3E02AD8(v144, v65)) * 0.6;
  if (v93 >= -0.5)
  {
    v97 = v46 + v93;
    v98 = *(_QWORD *)(*(_QWORD *)(v144 + 24) + 8) - **(_QWORD **)(v144 + 24);
    if ((int)(v98 >> 3) < 1)
    {
LABEL_139:
      v110 = operator new();
      v111 = v110;
      *(_DWORD *)(v110 + 8) = 0;
      v112 = (unsigned int *)(v110 + 8);
      *(float *)(v110 + 12) = v20;
      *(float *)(v110 + 16) = v40;
      *(_QWORD *)v110 = &off_1E95AF898;
      *(float32x2_t *)(v110 + 20) = v140;
      *(float *)(v110 + 28) = v97;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
      v114 = *(void ***)(v144 + 24);
      v116 = (uint64_t *)v114[1];
      v115 = (unint64_t)v114[2];
      if ((unint64_t)v116 >= v115)
      {
        v118 = ((char *)v116 - (_BYTE *)*v114) >> 3;
        if ((unint64_t)(v118 + 1) >> 61)
          sub_1D3D6D4F8();
        v119 = v115 - (_QWORD)*v114;
        v120 = v119 >> 2;
        if (v119 >> 2 <= (unint64_t)(v118 + 1))
          v120 = v118 + 1;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
          v121 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v121 = v120;
        if (v121)
        {
          if (v121 >> 61)
            sub_1D3D6D50C();
          v122 = (char *)operator new(8 * v121);
        }
        else
        {
          v122 = 0;
        }
        v133 = (uint64_t *)&v122[8 * v118];
        v134 = &v122[8 * v121];
        *v133 = v111;
        v117 = v133 + 1;
        v136 = (char *)*v114;
        v135 = (char *)v114[1];
        if (v135 != *v114)
        {
          do
          {
            v137 = *((_QWORD *)v135 - 1);
            v135 -= 8;
            *--v133 = v137;
          }
          while (v135 != v136);
          v135 = (char *)*v114;
        }
        *v114 = v133;
        v114[1] = v117;
        v114[2] = v134;
        if (v135)
          operator delete(v135);
      }
      else
      {
        *v116 = v110;
        v117 = v116 + 1;
      }
      v114[1] = v117;
      v138 = *(_QWORD *)(v144 + 72);
      if (v138)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v111);
      do
        v139 = __ldxr(v112);
      while (__stxr(v139 + 1, v112));
      *v148 = (unsigned int *)v111;
      v92 = v152[0];
    }
    else
    {
      v99 = 0;
      v100 = (v98 >> 3);
      while (1)
      {
        v101 = *(_QWORD *)(**(_QWORD **)(v144 + 24) + 8 * v99);
        if (v101)
        {
          v102 = (unsigned int *)(v101 + 8);
          do
            v103 = __ldxr(v102);
          while (__stxr(v103 + 1, v102));
        }
        v151 = (unsigned int *)v101;
        if (vabds_f32(v40, (*(float (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101)) <= v140.f32[1]
          && vabds_f32(v20, (*(float (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101)) <= v140.f32[0])
        {
          v104 = *(float *)(v101 + 20);
          v105 = *(float *)(v101 + 24);
          v106 = vabds_f32(v140.f32[0], v104);
          v107 = vabds_f32(v140.f32[1], v105);
          v108 = v106 > 1.0 || v107 > 1.0;
          if (!v108)
            break;
          if (v106 <= v104 && v107 <= v105)
            break;
        }
        sub_1D3E036F4(&v151);
        if (++v99 == v100)
          goto LABEL_139;
      }
      v123 = v151;
      v124 = (*(float (**)(unsigned int *))(*(_QWORD *)v151 + 16))(v151);
      v125 = (*(float (**)(unsigned int *))(*(_QWORD *)v123 + 24))(v123);
      v126 = *(float32x2_t *)(v123 + 5);
      v127 = *((float *)v123 + 7);
      v128 = operator new();
      v129 = v128;
      *(_DWORD *)(v128 + 8) = 0;
      v130 = (unsigned int *)(v128 + 8);
      *(float *)(v128 + 12) = (float)(v124 + v20) * 0.5;
      *(float *)(v128 + 16) = (float)(v125 + v40) * 0.5;
      *(_QWORD *)v128 = &off_1E95AF898;
      *(float32x2_t *)(v128 + 20) = vmul_f32(vadd_f32(v126, v140), (float32x2_t)0x3F0000003F000000);
      *(float *)(v128 + 28) = (float)(v127 + v97) * 0.5;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
      *v148 = (unsigned int *)v128;
      do
        v132 = __ldxr(v130);
      while (__stxr(v132 + 1, v130));
      sub_1D3D6D13C(*(unsigned int **)(**(_QWORD **)(v144 + 24) + 8 * v99));
      *(_QWORD *)(**(_QWORD **)(v144 + 24) + 8 * v99) = v129;
      sub_1D3E036F4(&v151);
    }
  }
  else
  {
    *v148 = 0;
    v94 = v156;
    if (v156)
    {
      v95 = v156 + 2;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    *v148 = v94;
  }
  if (v92)
    operator delete(v92);
  if (__p)
    operator delete(__p);
LABEL_24:
  if (v153)
    operator delete(v153);
  return sub_1D3E036F4(&v156);
}

void sub_1D3E03678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,unsigned int *a26,void *a27,uint64_t a28)
{
  unsigned int **v28;

  sub_1D3E036F4(v28);
  sub_1D3E036F4(&a19);
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a23)
    operator delete(a23);
  sub_1D3E036F4(&a26);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E036F4(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

uint64_t sub_1D3E03724(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  uint64_t *v85;
  uint64_t v87;
  uint64_t v88;
  float v89;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v39 = *v9;
        if (*(float *)(*v8 + 28) > *(float *)(*v9 + 28))
        {
          *v9 = *v8;
          *v8 = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1D3E03E88(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)sub_1D3E03F10(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v40 = v9 + 1;
        v41 = v9 + 2;
        v42 = v9 + 3;
        result = (uint64_t)sub_1D3E03F10(v9, v9 + 1, v9 + 2, v9 + 3);
        v43 = v9[3];
        if (*(float *)(*v8 + 28) > *(float *)(v43 + 28))
        {
          *v42 = *v8;
          *v8 = v43;
          v44 = *v42;
          v45 = *v41;
          v46 = *(float *)(*v42 + 28);
          if (v46 > *(float *)(*v41 + 28))
          {
            *v41 = v44;
            *v42 = v45;
            v47 = *v40;
            if (v46 > *(float *)(*v40 + 28))
            {
              v9[1] = v44;
              v9[2] = v47;
              v48 = *v9;
              if (v46 > *(float *)(*v9 + 28))
              {
                *v9 = v44;
                v9[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v49 = v9 + 1;
          v51 = v9 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v9;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(float *)(v54 + 28);
                if (v56 > *(float *)(v55 + 28))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v9 + v57 - 16);
                    v57 -= 8;
                    if (v56 <= *(float *)(v55 + 28))
                    {
                      v59 = (uint64_t *)((char *)v9 + v58);
                      goto LABEL_78;
                    }
                  }
                  v59 = v9;
LABEL_78:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v88 = *v7;
              v87 = v7[1];
              v7 = v49;
              v89 = *(float *)(v87 + 28);
              if (v89 > *(float *)(v88 + 28))
              {
                do
                {
                  *v49 = v88;
                  v88 = *(v49 - 2);
                  --v49;
                }
                while (v89 > *(float *)(v88 + 28));
                *v49 = v87;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v9[v63];
                if (2 * v62 + 2 < (uint64_t)v11 && *(float *)(*v64 + 28) > *(float *)(v64[1] + 28))
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v9[v62];
                v66 = *v64;
                v67 = *v65;
                v68 = *(float *)(*v65 + 28);
                if (*(float *)(*v64 + 28) <= v68)
                {
                  do
                  {
                    v69 = v64;
                    *v65 = v66;
                    if (v60 < v63)
                      break;
                    v70 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = &v9[v63];
                    v71 = v70 + 2;
                    if (v71 < (uint64_t)v11)
                    {
                      result = *v64;
                      if (*(float *)(*v64 + 28) > *(float *)(v64[1] + 28))
                      {
                        ++v64;
                        v63 = v71;
                      }
                    }
                    v66 = *v64;
                    v65 = v69;
                  }
                  while (*(float *)(*v64 + 28) <= v68);
                  *v69 = v67;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v72 = (unint64_t)v10 >> 3;
            do
            {
              v73 = 0;
              v74 = *v9;
              v75 = v9;
              do
              {
                v76 = v75;
                v75 += v73 + 1;
                v77 = 2 * v73;
                v73 = (2 * v73) | 1;
                v78 = v77 + 2;
                if (v78 < v72 && *(float *)(*v75 + 28) > *(float *)(v75[1] + 28))
                {
                  ++v75;
                  v73 = v78;
                }
                *v76 = *v75;
              }
              while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v74;
              }
              else
              {
                *v75 = *a2;
                *a2 = v74;
                v79 = (char *)v75 - (char *)v9 + 8;
                if (v79 >= 9)
                {
                  v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                  v81 = &v9[v80];
                  v82 = *v81;
                  v83 = *v75;
                  v84 = *(float *)(*v75 + 28);
                  if (*(float *)(*v81 + 28) > v84)
                  {
                    do
                    {
                      v85 = v81;
                      *v75 = v82;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v9[v80];
                      v82 = *v81;
                      v75 = v85;
                    }
                    while (*(float *)(*v81 + 28) > v84);
                    *v85 = v83;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (uint64_t)sub_1D3E03E88(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1D3E03E88(v7, &v7[v11 >> 1], a2 - 1);
          sub_1D3E03E88(v7 + 1, v13 - 1, a2 - 2);
          sub_1D3E03E88(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (uint64_t)sub_1D3E03E88(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(float *)(v15 + 28);
          if (*(float *)(*(v7 - 1) + 28) > v16)
            goto LABEL_12;
          if (v16 <= *(float *)(*v8 + 28))
          {
            v31 = v7 + 1;
            do
            {
              v9 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v16 <= *(float *)(*v9 + 28));
          }
          else
          {
            v9 = v7;
            do
            {
              v30 = v9[1];
              ++v9;
            }
            while (v16 <= *(float *)(v30 + 28));
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v16 > *(float *)(v33 + 28));
          }
          if (v9 < v32)
          {
            v34 = *v9;
            v35 = *v32;
            do
            {
              *v9 = v35;
              *v32 = v34;
              do
              {
                v36 = v9[1];
                ++v9;
                v34 = v36;
              }
              while (v16 <= *(float *)(v36 + 28));
              do
              {
                v37 = *--v32;
                v35 = v37;
              }
              while (v16 > *(float *)(v37 + 28));
            }
            while (v9 < v32);
          }
          v38 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v38;
          a4 = 0;
          *v38 = v15;
          continue;
        }
        v16 = *(float *)(v15 + 28);
LABEL_12:
        v17 = v7;
        do
        {
          v18 = v17;
          v20 = v17[1];
          ++v17;
          v19 = v20;
        }
        while (*(float *)(v20 + 28) > v16);
        v21 = a2;
        if (v18 == v7)
        {
          v21 = a2;
          do
          {
            if (v17 >= v21)
              break;
            v23 = *--v21;
          }
          while (*(float *)(v23 + 28) <= v16);
        }
        else
        {
          do
            v22 = *--v21;
          while (*(float *)(v22 + 28) <= v16);
        }
        if (v17 < v21)
        {
          v24 = *v21;
          v25 = v17;
          v26 = v21;
          do
          {
            *v25 = v24;
            *v26 = v19;
            do
            {
              v18 = v25;
              v27 = v25[1];
              ++v25;
              v19 = v27;
            }
            while (*(float *)(v27 + 28) > v16);
            do
            {
              v28 = *--v26;
              v24 = v28;
            }
            while (*(float *)(v28 + 28) <= v16);
          }
          while (v25 < v26);
        }
        if (v18 != v7)
          *v7 = *v18;
        *v18 = v15;
        if (v17 < v21)
        {
LABEL_31:
          result = sub_1D3E03724(v7, v18, a3, a4 & 1);
          a4 = 0;
          v9 = v18 + 1;
          continue;
        }
        v29 = sub_1D3E03FA4(v7, v18);
        v9 = v18 + 1;
        result = sub_1D3E03FA4(v18 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_31;
        }
        a2 = v18;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1D3E03E18(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1D3E036F4(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1D3E03E88(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(float *)(*a2 + 28);
  v6 = *(float *)(*result + 28);
  v7 = *a3;
  v8 = *(float *)(*a3 + 28);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(float *)(*a2 + 28) > *(float *)(*result + 28))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(float *)(*a3 + 28) <= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *sub_1D3E03F10(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1D3E03E88(a1, a2, a3);
  v9 = *a3;
  if (*(float *)(*a4 + 28) > *(float *)(*a3 + 28))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(float *)(*a3 + 28) > *(float *)(*a2 + 28))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(float *)(*a2 + 28) > *(float *)(*a1 + 28))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL sub_1D3E03FA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(float *)(v6 + 28) > *(float *)(*a1 + 28))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1D3E03E88(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1D3E03F10(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1D3E03F10(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(float *)(v21 + 28) > *(float *)(v22 + 28))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(float *)(*v20 + 28);
        if (v25 > *(float *)(*v19 + 28))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 > *(float *)(*v18 + 28))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 > *(float *)(*a1 + 28))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1D3E03E88(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(float *)(*v9 + 28);
    if (v14 > *(float *)(*v8 + 28))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(float *)(v13 + 28))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_1D3E0418C(uint64_t a1, float *a2, int a3, float a4)
{
  size_t v8;
  float *v9;
  uint64_t v10;
  uint64_t result;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v8 = 4 * a3;
  *(_QWORD *)(a1 + 48) = malloc_type_malloc(v8, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 16) = malloc_type_malloc(v8, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1D3E042A0((uint64_t)a2, a3, 0, 0, *(_QWORD *)(a1 + 48));
  if (fabsf(a4 + -0.5) <= 0.001)
  {
    v9 = *(float **)(a1 + 48);
  }
  else
  {
    v9 = *(float **)(a1 + 48);
    if (a3 >= 1)
    {
      v10 = 0;
      do
      {
        v9[v10] = (float)(0.5 / (float)(1.0 - a4)) * v9[v10];
        ++v10;
      }
      while (a3 != v10);
    }
  }
  result = sub_1D3E0432C(a3, a2, v9, *(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1D3E042A0(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float *v17;

  if ((a4 & 0x80000000) == 0)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (float)a2;
      if (v5 != a4)
        v7 = ceilf(*(float *)(a3 + 4 * v5));
      v8 = (int)v7;
      v9 = (int)v7 - v6;
      if ((int)v7 > v6)
      {
        v10 = v8 - (uint64_t)v6;
        v11 = 4 * v6;
        v12 = (float *)(result + v11);
        v13 = 0.0;
        v14 = v10;
        do
        {
          v15 = *v12++;
          v13 = v13 + v15;
          --v14;
        }
        while (v14);
        v16 = v13 / (float)v9;
        v17 = (float *)(a5 + v11);
        do
        {
          *v17++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v5;
      v6 = v8;
    }
    while (v5 != a4 + 1);
  }
  return result;
}

uint64_t sub_1D3E0432C(int a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t result;
  float v6;
  BOOL v7;
  uint64_t i;
  float v9;

  if (a1 < 2)
    return 0;
  result = 0;
  v6 = *a2 - *a3;
  v7 = v6 > 0.0;
  for (i = 1; i != a1; ++i)
  {
    v9 = a2[i] - a3[i];
    if (v7 != v9 > 0.0)
    {
      *(float *)(a4 + 4 * (int)result) = (float)((float)(v9 / (float)(v6 - v9)) + (float)(int)i) + 0.5;
      result = (result + 1);
      v7 = v9 > 0.0;
    }
    v6 = v9;
  }
  return result;
}

uint64_t sub_1D3E043B8(uint64_t a1, float a2)
{
  uint64_t result;
  float v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  float *v9;
  float *v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  float *v16;
  float v17;
  uint64_t v18;
  int v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 < 0.5)
    return 0xFFFFFFFFLL;
  v4 = a2 * 0.4;
  v5 = (int)(float)((float)(a2 * 0.4) * 6.0);
  v6 = v5 | 1;
  if (*(_DWORD *)(a1 + 8) < (v5 | 1))
    return 0xFFFFFFFFLL;
  v7 = *(void **)(a1 + 32);
  if (v7 && (*(_DWORD *)(a1 + 40) == v6 || (free(v7), *(_QWORD *)(a1 + 32))))
  {
    v8 = *(void **)(a1 + 56);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = v6;
    v9 = (float *)malloc_type_malloc(4 * v6, 0x100004052888210uLL);
    v10 = v9;
    *(_QWORD *)(a1 + 32) = v9;
    if (v5 >= 0)
      v11 = v5 | 1;
    else
      v11 = v6 + 1;
    v12 = (v11 >> 1);
    v9[(int)v12] = 1.0;
    v13 = 1.0;
    if (v6 >= 2)
    {
      v14 = (float)(v4 * v4) + (float)(v4 * v4);
      v15 = v6 - 1;
      v16 = v9;
      do
      {
        v17 = expf((float)-(float)((float)(int)v12 * (float)(int)v12) / v14);
        v10[v15] = v17;
        *v16++ = v17;
        v13 = v13 + (float)(v17 + v17);
        --v15;
        --v12;
      }
      while (v12);
    }
    if ((v5 & 0x80000000) == 0)
    {
      v18 = v5 | 1u;
      do
      {
        *v10 = *v10 / v13;
        ++v10;
        --v18;
      }
      while (v18);
    }
    v8 = malloc_type_malloc(4 * *(int *)(a1 + 8), 0x100004052888210uLL);
    *(_QWORD *)(a1 + 56) = v8;
  }
  sub_1D3E042A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24), (uint64_t)v8);
  v19 = *(_DWORD *)(a1 + 8);
  v20 = *(float **)(a1 + 48);
  if (v19 >= 1)
  {
    v21 = *(float **)(a1 + 56);
    v22 = *(float **)(a1 + 48);
    v23 = *(unsigned int *)(a1 + 8);
    do
    {
      v24 = *v21++;
      *v22 = (float)(v24 * 0.4) + (float)(*v22 * 0.6);
      ++v22;
      --v23;
    }
    while (v23);
  }
  if (v6 >= 0)
    v25 = v6;
  else
    v25 = v6 + 1;
  vDSP_conv(v20, 1, *(const float **)(a1 + 32), 1, v20, 1, v19 - v6 + 1, v6);
  LODWORD(v26) = v19 + ~(v25 >> 1);
  if ((int)v26 >= v25 >> 1)
  {
    v26 = (int)v26;
    v27 = v25 >> 1;
    do
      v20[v26] = v20[v26 - v27];
    while (v26-- > v27);
  }
  result = sub_1D3E0432C(*(_DWORD *)(a1 + 8), *(float **)a1, *(float **)(a1 + 48), *(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1D3E04604(void **a1)
{
  free(a1[6]);
  free(a1[2]);
  free(a1[4]);
  free(a1[7]);
}

std::logic_error *sub_1D3E0463C(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "Unsupported rotation");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

uint64_t sub_1D3E04668(uint64_t a1)
{
  unsigned int **v2;

  *(_QWORD *)a1 = &off_1E95AF948;
  v2 = (unsigned int **)(a1 + 16);
  sub_1D3D7FBF4((unsigned int **)(a1 + 24));
  sub_1D3D6D10C(v2);
  return a1;
}

void sub_1D3E046A8(uint64_t a1)
{
  unsigned int **v1;

  *(_QWORD *)a1 = &off_1E95AF948;
  v1 = (unsigned int **)(a1 + 16);
  sub_1D3D7FBF4((unsigned int **)(a1 + 24));
  sub_1D3D6D10C(v1);
  JUMPOUT(0x1D8254C54);
}

unsigned int **sub_1D3E046F8@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, int a5@<W5>, uint64_t *a6@<X8>)
{
  float v10;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v25;

  v10 = (float)a5 + -3.5;
  if (*a4)
  {
    v25 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4);
    v12 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
    v13 = v10 + -3.0;
  }
  else
  {
    v14 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    v15 = v14 - (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    v25 = v15 + (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    v16 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    v17 = v16 - (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    v12 = v17 + (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
    v13 = v10;
  }
  v18 = (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v19 = (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v20 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v21 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v22 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v23 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  return sub_1D3DB93EC(a6, 3.5, 3.5, v10, 3.5, v13, v13, 3.5, v10, v18, v19, v20, v21, v25, v12, v22, v23);
}

unsigned int **sub_1D3E048D0(unsigned int **a1, _QWORD *a2, uint64_t a3, float *a4, _DWORD *a5)
{
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  float v33;
  float v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  float v41;
  float v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  int v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  uint64_t v101;
  float v102;
  int v103;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  float v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  float v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  BOOL v121;
  char v122;
  int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  float v127;
  float v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  _DWORD *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  int v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int *v193;
  unsigned int v194;
  NSObject *v195;
  _QWORD *exception;
  _QWORD *v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  unsigned int **v205;
  float v206;
  float v207;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int *v211;
  unsigned int *v212;
  unsigned int *v213;
  unsigned int *v214;
  unsigned int *v215[2];
  unsigned int *v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int *v219;
  unsigned int *v220;
  unsigned int *v221;
  unsigned int *v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int *v225;
  unsigned int *v226;
  unsigned int *v227;
  unsigned int *v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned int *v231;
  unsigned int *v232;
  unsigned int *v233;
  unsigned int *v234;
  unsigned int *v235;
  unsigned int *v236;
  unsigned int *v237;
  unsigned int *v238;
  unsigned int *v239;
  unsigned int *v240;
  uint8_t buf[8];
  unsigned int *v242;
  unsigned int *v243[2];

  v8 = *(_QWORD **)a3;
  v9 = *(unsigned __int8 *)(*(_QWORD *)a3 + 52);
  v10 = *(unsigned __int8 *)(*(_QWORD *)a3 + 53);
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v8 = *(_QWORD **)a3;
  }
  v234 = (unsigned int *)v11;
  v14 = v8[4];
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v8 = *(_QWORD **)a3;
  }
  v233 = (unsigned int *)v14;
  v17 = v8[2];
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v8 = *(_QWORD **)a3;
  }
  v232 = (unsigned int *)v17;
  v20 = (unsigned int *)v8[5];
  if (v20)
  {
    v21 = v20 + 2;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v231 = v20;
  if (*(float *)(v11 + 20) < 1.0 || *(float *)(v14 + 20) < 1.0 || *(float *)(v17 + 20) < 1.0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "bad module size");
    *exception = &off_1E95AF388;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  v23 = (unsigned int *)(v11 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v230 = (unsigned int *)v11;
  v25 = (unsigned int *)(v14 + 8);
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  v229 = (unsigned int *)v14;
  v27 = (unsigned int *)(v17 + 8);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v228 = (unsigned int *)v17;
  v29 = (unsigned int *)(v11 + 8);
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v215[0] = (unsigned int *)v11;
  v31 = (unsigned int *)(v14 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  v243[0] = (unsigned int *)v14;
  sub_1D3E09AA4((uint64_t)a2, v215, v243, v9 != 0, v10 != 0);
  v34 = v33;
  sub_1D3D6D834(v243);
  sub_1D3D6D834(v215);
  v35 = v230;
  if (v230)
  {
    v36 = v230 + 2;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v242 = v35;
  v38 = v228;
  if (v228)
  {
    v39 = v228 + 2;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)buf = v38;
  sub_1D3E09AA4((uint64_t)a2, &v242, buf, v9 != 0, v10 != 0);
  v42 = v41;
  sub_1D3D6D834((unsigned int **)buf);
  sub_1D3D6D834(&v242);
  sub_1D3D6D834(&v228);
  sub_1D3D6D834(&v229);
  sub_1D3D6D834(&v230);
  v43 = v234;
  if (v234)
  {
    v44 = v234 + 2;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v227 = v43;
  v46 = v233;
  if (v233)
  {
    v47 = v233 + 2;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v226 = v46;
  v49 = v232;
  if (v232)
  {
    v50 = v232 + 2;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v225 = v49;
  v207 = v34;
  if (v43)
  {
    v52 = v43 + 2;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v215[0] = v43;
  if (v46)
  {
    v54 = v46 + 2;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v243[0] = v46;
  v56 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
  v57 = (*(float (**)(unsigned int *))(*(_QWORD *)v243[0] + 16))(v243[0]);
  v58 = (*(float (**)(unsigned int *))(*(_QWORD *)v215[0] + 24))(v215[0]);
  v59 = (*(float (**)(unsigned int *))(*(_QWORD *)v243[0] + 24))(v243[0]);
  sub_1D3D6D834(v243);
  sub_1D3D6D834(v215);
  v60 = v227;
  if (v227)
  {
    v61 = v227 + 2;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v206 = (float)(v34 + v42) * 0.5;
  v242 = v60;
  v63 = v225;
  if (v225)
  {
    v64 = v225 + 2;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  *(_QWORD *)buf = v63;
  v66 = (*(float (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
  v67 = (*(float (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
  v68 = (*(float (**)(unsigned int *))(*(_QWORD *)v242 + 24))(v242);
  v69 = (*(float (**)(_QWORD))(**(_QWORD **)buf + 24))(*(_QWORD *)buf);
  v70 = sqrtf((float)((float)(v58 - v59) * (float)(v58 - v59)) + (float)((float)(v56 - v57) * (float)(v56 - v57)));
  v71 = sqrtf((float)((float)(v68 - v69) * (float)(v68 - v69)) + (float)((float)(v66 - v67) * (float)(v66 - v67)));
  sub_1D3D6D834((unsigned int **)buf);
  sub_1D3D6D834(&v242);
  v72 = llroundf(v70 / v207);
  v73 = llroundf(v71 / v42);
  if ((int)(v72 - v73) >= 0)
    v74 = v72 - v73;
  else
    v74 = v73 - v72;
  if (v74 > 8)
    goto LABEL_75;
  v204 = v70;
  v75 = __OFADD__(v73, v72);
  v76 = v73 + v72;
  v77 = v76 < 0 != v75 ? v76 + 1 : v76;
  v78 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 16))(v227);
  v79 = v77 >> 1;
  v80 = (float)(v77 >> 1);
  if (vabds_f32(v78, (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 16))(v226)) < v80)
  {
    v81 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 16))(v227);
    if (vabds_f32(v81, (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 16))(v225)) < v80)
      goto LABEL_75;
  }
  v82 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 24))(v227);
  if (vabds_f32(v82, (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 24))(v226)) < v80)
  {
    v83 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 24))(v227);
    if (vabds_f32(v83, (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 24))(v225)) < v80)
      goto LABEL_75;
  }
  v84 = v226;
  if (v226)
  {
    v85 = v226 + 2;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v240 = v84;
  v87 = v225;
  if (v225)
  {
    v88 = v225 + 2;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  v239 = v87;
  v90 = (*(float (**)(unsigned int *))(*(_QWORD *)v84 + 16))(v84);
  v91 = (*(float (**)(unsigned int *))(*(_QWORD *)v239 + 16))(v239);
  v92 = (*(float (**)(unsigned int *))(*(_QWORD *)v240 + 24))(v240);
  v93 = (*(float (**)(unsigned int *))(*(_QWORD *)v239 + 24))(v239);
  v94 = sqrtf((float)((float)(v92 - v93) * (float)(v92 - v93)) + (float)((float)(v90 - v91) * (float)(v90 - v91)));
  sub_1D3D6D834(&v239);
  sub_1D3D6D834(&v240);
  if (v94 < v80)
    goto LABEL_75;
  v203 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 16))(v227);
  v202 = (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 24))(v226);
  v201 = (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 16))(v226);
  v200 = (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 24))(v225);
  v199 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 24))(v227);
  v95 = (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 16))(v225);
  v96 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 16))(v227);
  v97 = (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 24))(v225);
  v98 = (*(float (**)(unsigned int *))(*(_QWORD *)v227 + 24))(v227);
  v99 = (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 16))(v226);
  v100 = (*(float (**)(unsigned int *))(*(_QWORD *)v226 + 24))(v226);
  if (fabsf((float)((float)((float)((float)((float)(v201 * v200) + (float)(v203 * v202)) + (float)(v199 * v95))- (float)(v96 * v97))- (float)(v98 * v99))- (float)(v100 * (*(float (**)(unsigned int *))(*(_QWORD *)v225 + 16))(v225))) < (float)(v79 * v79))
  {
LABEL_75:
    v101 = 0xFFFFFFFFLL;
    v102 = v206;
    goto LABEL_111;
  }
  v101 = (v79 + 7);
  v103 = v101 & 3;
  if (v74 > 4 || v103 == 3)
  {
    v104 = v227;
    if (v227)
    {
      v105 = v227 + 2;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v238 = v104;
    v107 = v226;
    if (v226)
    {
      v108 = v226 + 2;
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    v237 = v107;
    v110 = sub_1D3E092D8((uint64_t)a2, &v238, &v237, v207);
    sub_1D3D6D834(&v237);
    sub_1D3D6D834(&v238);
    v111 = v227;
    if (v227)
    {
      v112 = v227 + 2;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    v236 = v111;
    v114 = v225;
    if (v225)
    {
      v115 = v225 + 2;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    v235 = v114;
    v117 = sub_1D3E092D8((uint64_t)a2, &v236, &v235, v42);
    sub_1D3D6D834(&v235);
    sub_1D3D6D834(&v236);
    v118 = llroundf(v204 / v110);
    v119 = llroundf(v71 / v117);
    if ((int)(v118 - v119) >= 0)
      v120 = v118 - v119;
    else
      v120 = v119 - v118;
    v121 = v74 > 4 && v120 > 8;
    v122 = v121;
    v75 = __OFADD__(v119, v118);
    v123 = v119 + v118;
    if (v123 < 0 != v75)
      ++v123;
    v124 = (v123 >> 1) + 7;
    v125 = v124 & 3;
    if (v120 > v74)
    {
      v124 = v101;
      v125 = v101 & 3;
    }
    if ((v122 & 1) != 0)
      v101 = v101;
    else
      v101 = v124;
    if ((v122 & 1) == 0)
      v103 = v125;
    v102 = v206;
    if ((v122 & 1) != 0)
    {
      v101 = 0xFFFFFFFFLL;
      goto LABEL_111;
    }
  }
  else
  {
    v102 = v206;
  }
  switch(v103)
  {
    case 3:
      v101 = (v101 - 2);
      break;
    case 2:
      v101 = (v101 - 1);
      break;
    case 0:
      v101 = (v101 + 1);
      break;
  }
LABEL_111:
  sub_1D3D6D834(&v225);
  sub_1D3D6D834(&v226);
  sub_1D3D6D834(&v227);
  sub_1D3E0F438(((int)v101 - 17) >> 2);
  *a1 = 0;
  v243[0] = 0;
  if (v231)
  {
    v126 = operator new();
    v127 = (*(float (**)(unsigned int *))(*(_QWORD *)v231 + 16))(v231);
    v128 = (*(float (**)(unsigned int *))(*(_QWORD *)v231 + 24))(v231);
    v129 = v231[5];
    *(_DWORD *)(v126 + 8) = 0;
    v130 = (unsigned int *)(v126 + 8);
    *(float *)(v126 + 12) = v127;
    *(float *)(v126 + 16) = v128;
    *(_QWORD *)v126 = &off_1E95AF898;
    *(_DWORD *)(v126 + 20) = v129;
    *(_DWORD *)(v126 + 24) = v129;
    *(_DWORD *)(v126 + 28) = 0;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    v215[0] = (unsigned int *)v126;
    do
      v132 = __ldxr(v130);
    while (__stxr(v132 + 1, v130));
    if (v243[0])
      sub_1D3D6D13C(v243[0]);
    v243[0] = (unsigned int *)v126;
    sub_1D3E036F4(v215);
    v133 = v234;
    if (v234)
    {
      v134 = v234 + 2;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    v224 = v133;
    v136 = v233;
    if (v233)
    {
      v137 = v233 + 2;
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    v223 = v136;
    v139 = v232;
    if (v232)
    {
      v140 = v232 + 2;
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    v222 = v139;
    v142 = v243[0];
    if (v243[0])
    {
      v143 = v243[0] + 2;
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
    }
    v221 = v142;
    (*(void (**)(unsigned int **__return_ptr, _QWORD *, unsigned int **, unsigned int **, unsigned int **, unsigned int **, uint64_t))(*a2 + 16))(v215, a2, &v224, &v223, &v222, &v221, v101);
    v145 = v215[0];
    if (v215[0])
    {
      v146 = v215[0] + 2;
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    *a1 = v145;
    sub_1D3D6F2E0(v215);
    sub_1D3D6D834(&v221);
    sub_1D3D6D834(&v222);
    sub_1D3D6D834(&v223);
    sub_1D3D6D834(&v224);
    v148 = (unsigned int *)a2[2];
    if (v148)
    {
      v149 = v148 + 2;
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
    v220 = v148;
    if (v145)
    {
      v151 = v145 + 2;
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
    v219 = v145;
    sub_1D3E09210((uint64_t *)&v242, &v220, v101, &v219, v9 != 0);
    sub_1D3DB45E8(&v219);
    sub_1D3D6D10C(&v220);
    v153 = v242;
    if (v242)
    {
      v154 = v242 + 2;
      do
        v155 = __ldxr(v154);
      while (__stxr(v155 + 1, v154));
    }
    v214 = v153;
    sub_1D3DF5938((uint64_t)v215, (uint64_t *)&v214);
    sub_1D3D6D10C(&v214);
    v156 = v216;
    v157 = *((_QWORD *)v216 + 2);
    v158 = ((int)v157 - 17) >> 2;
    if ((int)v157 >= 45)
    {
      v160 = a5;
      v205 = a1;
      v161 = 0;
      v162 = ((v157 << 32) - 0x900000000) >> 32;
      v163 = ((v157 << 32) - 0xB00000000) >> 32;
      v164 = 5;
      do
      {
        v165 = v164;
        v166 = v162;
        do
        {
          v161 = sub_1D3D6D4A0(v156, v166, v165) | (2 * v161);
          v121 = v166-- <= v163;
        }
        while (!v121);
        v164 = v165 - 1;
      }
      while (v165);
      v167 = v161;
      a1 = v205;
      v168 = sub_1D3E16240(v167);
      v217 = v168;
      if (!v168)
        goto LABEL_153;
      a5 = v160;
      v169 = *(_DWORD *)(v168 + 12);
      v170 = v169 - v158;
      if (v169 - v158 < 0)
        v170 = v158 - v169;
      if (v170 >= 2)
      {
LABEL_153:
        v171 = 0;
        v172 = v216;
        v173 = 5;
        do
        {
          v174 = v173;
          v175 = v162;
          do
          {
            v171 = sub_1D3D6D4A0(v172, v174, v175) | (2 * v171);
            v121 = v175-- <= v163;
          }
          while (!v121);
          v173 = v174 - 1;
        }
        while (v174);
        a1 = v205;
        v176 = sub_1D3E16240(v171);
        v217 = v176;
        if (!v176)
          goto LABEL_193;
        a5 = v160;
        v169 = *(_DWORD *)(v176 + 12);
        v177 = v169 - v158;
        if (v169 - v158 < 0)
          v177 = v158 - v169;
        if (v177 >= 2)
        {
LABEL_193:
          v198 = __cxa_allocate_exception(0x20uLL);
          sub_1D3DDE1A0(v198, "Could not decode version");
          *v198 = &off_1E95AF388;
          __cxa_throw(v198, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
        }
      }
      v159 = sub_1D3E0F438(v169);
      v217 = v159;
    }
    else
    {
      v159 = sub_1D3E0F438(((int)v157 - 17) >> 2);
    }
    v178 = *(_DWORD *)(v159 + 12);
    v179 = v234;
    if (v234)
    {
      v180 = v234 + 2;
      do
        v181 = __ldxr(v180);
      while (__stxr(v181 + 1, v180));
    }
    v182 = 4 * v178;
    v213 = v179;
    v183 = v233;
    if (v233)
    {
      v184 = v233 + 2;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
    }
    v101 = (v182 + 17);
    v212 = v183;
    v186 = v232;
    if (v232)
    {
      v187 = v232 + 2;
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    v211 = v186;
    v189 = v243[0];
    if (v243[0])
    {
      v190 = v243[0] + 2;
      do
        v191 = __ldxr(v190);
      while (__stxr(v191 + 1, v190));
    }
    v210 = v189;
    (*(void (**)(uint8_t *__return_ptr, _QWORD *, unsigned int **, unsigned int **, unsigned int **, unsigned int **, uint64_t))(*a2 + 16))(buf, a2, &v213, &v212, &v211, &v210, v101);
    v192 = *(unsigned int **)buf;
    if (*(_QWORD *)buf)
    {
      v193 = (unsigned int *)(*(_QWORD *)buf + 8);
      do
        v194 = __ldxr(v193);
      while (__stxr(v194 + 1, v193));
    }
    if (v145)
      sub_1D3D6D13C(v145);
    *a1 = v192;
    sub_1D3D6F2E0((unsigned int **)buf);
    sub_1D3D6D834(&v210);
    sub_1D3D6D834(&v211);
    sub_1D3D6D834(&v212);
    sub_1D3D6D834(&v213);
    sub_1D3DF5A34(&v209, (uint64_t)v215);
    sub_1D3DF5878(&v209);
    if (qword_1EDB89DE0 != -1)
      dispatch_once(&qword_1EDB89DE0, &unk_1E95B35A8);
    v195 = qword_1EDB89E48;
    if (os_log_type_enabled((os_log_t)qword_1EDB89E48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1D3D6B000, v195, OS_LOG_TYPE_DEBUG, "Successfully read version and format info.", buf, 2u);
    }
    v215[0] = (unsigned int *)&off_1E95AF878;
    sub_1D3DF5878(&v218);
    sub_1D3D6D10C(&v216);
    sub_1D3D6D10C(&v242);
  }
  sub_1D3E036F4(v243);
  *a4 = v102;
  *a5 = v101;
  sub_1D3DC2944(&v231);
  sub_1D3DC2944(&v232);
  sub_1D3DC2944(&v233);
  return sub_1D3DC2944(&v234);
}

void sub_1D3E05788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned int *a35,unsigned int *a36,unsigned int *a37,uint64_t a38,uint64_t a39,uint64_t a40,unsigned int *a41)
{
  uint64_t v41;

  sub_1D3D6D834((unsigned int **)(v41 - 224));
  sub_1D3D6D834((unsigned int **)(v41 - 216));
  sub_1D3D6D834(&a35);
  sub_1D3D6D834(&a36);
  sub_1D3D6D834(&a37);
  sub_1D3DC2944(&a41);
  sub_1D3DC2944((unsigned int **)(v41 - 248));
  sub_1D3DC2944((unsigned int **)(v41 - 240));
  sub_1D3DC2944((unsigned int **)(v41 - 232));
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E059B4(_QWORD *a1, void **a2, uint64_t a3, unsigned int a4, unsigned int **a5, float a6)
{
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  int v47;
  int v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int *v82;
  unint64_t v83;
  int v84;
  unsigned int *v85;
  int v86;
  int v87;
  uint64_t *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  float v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  unint64_t v99;
  unsigned int **v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int **v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int **v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int **v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  _QWORD *exception;
  _QWORD *v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  void **v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int *v162;
  unsigned int *v163;
  unsigned int *v164;
  void **v165[2];
  int v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int **v171;
  unsigned int **v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int *v179;
  unsigned int *v180;
  void *__p;
  _BYTE *v182;
  void *v183[3];
  void *v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int *v191;
  unsigned int *v192;
  unsigned int *v193;
  unsigned int *v194;
  unsigned int *v195;
  unsigned int **v196;
  unsigned int **v197;
  unsigned int *v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  float v204;
  unsigned __int8 v205;
  unsigned int *v206;
  unsigned int *v207;
  unsigned int *v208;
  unsigned int ***v209;
  _QWORD *v210;
  unint64_t v211;
  int v212;
  int *v213[3];
  unsigned int *v214[6];

  v214[4] = *(unsigned int **)MEMORY[0x1E0C80C00];
  v11 = *(_QWORD **)a3;
  v156 = *(unsigned __int8 *)(*(_QWORD *)a3 + 52);
  v12 = *(unsigned int **)(*(_QWORD *)a3 + 24);
  if (v12)
  {
    v13 = v12 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = *(_QWORD **)a3;
  }
  v194 = v12;
  v15 = (unsigned int *)v11[4];
  if (v15)
  {
    v16 = v15 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v11 = *(_QWORD **)a3;
  }
  v193 = v15;
  v18 = (unsigned int *)v11[2];
  if (v18)
  {
    v19 = v18 + 2;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v11 = *(_QWORD **)a3;
  }
  v192 = v18;
  v21 = (unsigned int *)v11[5];
  if (v21)
  {
    v22 = v21 + 2;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v190 = 0;
  v191 = v21;
  if ((a4 & 0x80000003) != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "Dimension must be 1 mod 4");
    *exception = &off_1E95AF388;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  v24 = *(_QWORD *)(sub_1D3E0F438((int)(a4 - 17) >> 2) + 16);
  v188 = 0;
  v189 = 0;
  v187 = 0;
  sub_1D3D8D760(&v187, *(const void **)v24, *(_QWORD *)(v24 + 8), (uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 2);
  v153 = a1;
  v25 = (unint64_t)(v188 - (_QWORD)v187) >> 2;
  if ((int)v25 <= 0)
    v26 = 0;
  else
    v26 = (v25 * v25 - 3);
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v27 = 2 * (int)v26;
  sub_1D3DE2750(&v184, v27);
  LODWORD(v196) = -1082130432;
  sub_1D3D8CDDC(v183, v27, &v196);
  LODWORD(v196) = -1082130432;
  sub_1D3D8CDDC(&__p, v27, &v196);
  v154 = a4;
  v157 = a2;
  v155 = v26;
  if ((int)v26 >= 1)
  {
    v28 = *a5;
    if (*a5)
    {
      v29 = v28 + 2;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v180 = v28;
      sub_1D3E06FA0(&v187, (uint64_t)&v184, &v180, (char *)v183);
      sub_1D3DB45E8(&v180);
    }
    else
    {
      v196 = 0;
      v31 = v194;
      if (v194)
      {
        v32 = v194 + 2;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v179 = v31;
      v34 = v193;
      if (v193)
      {
        v35 = v193 + 2;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v178 = v34;
      v37 = v192;
      if (v192)
      {
        v38 = v192 + 2;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v176 = 0;
      v177 = v37;
      (*((void (**)(int **__return_ptr, void **, unsigned int **, unsigned int **, unsigned int **, unsigned int **, _QWORD))*a2
       + 2))(v213, a2, &v179, &v178, &v177, &v176, a4);
      sub_1D3D6D834(&v176);
      sub_1D3D6D834(&v177);
      sub_1D3D6D834(&v178);
      sub_1D3D6D834(&v179);
      v40 = (unsigned int *)v213[0];
      if (v213[0])
      {
        v41 = (unsigned int *)(v213[0] + 2);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v175 = v40;
      sub_1D3E06FA0(&v187, (uint64_t)&v184, &v175, (char *)v183);
      sub_1D3DB45E8(&v175);
      sub_1D3D6F2E0((unsigned int **)v213);
      sub_1D3E036F4((unsigned int **)&v196);
    }
    v43 = 0;
    v44 = a6 * 3.0;
    while (1)
    {
      v45 = *((float *)v183[0] + 2 * v43);
      v46 = *((float *)v183[0] + ((2 * v43) | 1));
      v214[0] = (unsigned int *)0x500000003;
      v47 = (int)v46;
      v48 = (int)(float)((float)3 * a6);
      v49 = ((int)v45 - v48) & ~(((int)v45 - v48) >> 31);
      v50 = (char *)a2[2];
      v51 = *((_QWORD *)v50 + 7);
      v52 = -v51;
      v53 = *((_QWORD *)v50 + 4);
      v54 = v51 - 1;
      v55 = *((_QWORD *)v50 + 2);
      v56 = (v55 & (v51 - 1) | v53 & -(int)v51) - 1;
      if (v48 + (int)v45 < v56)
        v56 = v48 + (int)v45;
      v57 = v56 - v49;
      if (v44 > (float)v57)
        goto LABEL_97;
      v58 = (v47 - v48) & ~((v47 - v48) >> 31);
      v59 = (v53 & v54 | v55 & v52) - 1;
      v60 = v48 + v47;
      if (v60 >= v59)
        v60 = v59;
      v61 = v60 - v58;
      if (v44 > (float)v61)
      {
LABEL_97:
        v96 = __cxa_allocate_exception(0x20uLL);
        sub_1D3DDE1A0(v96, "region too small to hold alignment pattern");
        *v96 = &off_1E95AF388;
        __cxa_throw(v96, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      v62 = (unsigned int *)(v50 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      v195 = (unsigned int *)v50;
      v64 = v57;
      LODWORD(v197) = 0;
      v65 = v61;
      v196 = (unsigned int **)&off_1E95AF908;
      v66 = (unsigned int *)(v50 + 8);
      v198 = 0;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      if (v198)
        sub_1D3D6D13C(v198);
      v198 = (unsigned int *)v50;
      v68 = (uint64_t *)operator new();
      *v68 = 0;
      v68[1] = 0;
      v68[2] = 0;
      v199 = v68;
      v200 = v49;
      v201 = v58;
      v202 = v64;
      v203 = v65;
      v204 = a6;
      v205 = v156;
      v206 = 0;
      v69 = (unsigned int *)v157[3];
      if (v69)
      {
        v70 = v69 + 2;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
        if (v206)
          sub_1D3D6D13C(v206);
      }
      v206 = v69;
      sub_1D3D6D10C(&v195);
      v72 = v200;
      v73 = v201;
      v74 = v202;
      v75 = v203;
      v212 = 0;
      sub_1D3D821BC(v213, 3uLL, &v212);
      v209 = 0;
      v210 = 0;
      v211 = 0;
      if (v203)
        break;
LABEL_85:
      v88 = (uint64_t *)v199[1];
      if (v88 == (uint64_t *)*v199)
      {
        v97 = __cxa_allocate_exception(0x20uLL);
        sub_1D3DDE1A0(v97, "Could not find alignment pattern");
        *v97 = &off_1E95AF388;
        __cxa_throw(v97, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
      }
      sub_1D3E03724(*v199, v88, 126 - 2 * __clz(((uint64_t)v88 - *v199) >> 3), 1);
      v89 = *(unsigned int **)*v199;
      a2 = v157;
      if (v89)
      {
        v90 = v89 + 2;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v158 = v89;
      v165[0] = (void **)&v209;
      sub_1D3E03E18(v165);
      if (v213[0])
      {
        v213[1] = v213[0];
        operator delete(v213[0]);
      }
      sub_1D3E02A28((uint64_t)&v196);
      v92 = v158;
      if (v158)
      {
        v93 = v158 + 2;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      if (v190)
        sub_1D3D6D13C(v190);
      v190 = v92;
      sub_1D3E036F4(&v158);
      v95 = (*(float (**)(unsigned int *))(*(_QWORD *)v190 + 16))(v190);
      *((float *)__p + 2 * v43) = v95;
      (*(void (**)(unsigned int *))(*(_QWORD *)v190 + 24))(v190);
      *((_DWORD *)__p + ((2 * v43++) | 1)) = v98;
      if (v43 == v155)
        goto LABEL_100;
    }
    v76 = 0;
    v77 = v74 + v72;
    v78 = v73 + (v75 >> 1);
    while (1)
    {
      v79 = v76 + 1;
      if ((v76 & 1) != 0)
        v80 = -(uint64_t)((v76 + 1) >> 1);
      else
        v80 = (v76 + 1) >> 1;
      v81 = v78 + v80;
      v82 = v213[0];
      *(_QWORD *)v213[0] = 0;
      v82[2] = 0;
      v83 = v200;
      if (v200 < v77)
      {
        v84 = v205;
        v85 = v198;
        while (v84 == sub_1D3D6D4A0(v85, v83, v81))
        {
          if (v77 == ++v83)
            goto LABEL_82;
        }
      }
      if (v83 < v77)
        break;
LABEL_82:
      if (sub_1D3E02AD8((uint64_t)&v196, v213[0]) > -1.0)
      {
        sub_1D3E02BD4(&v207, (uint64_t)&v196, v213, v81, v77, v205);
        sub_1D3E036F4(&v207);
      }
      v76 = v79;
      if (v79 >= v203)
        goto LABEL_85;
    }
    v86 = 0;
    while (1)
    {
      v87 = v205;
      if (v87 == sub_1D3D6D4A0(v198, v83, v81))
        break;
      if (v86 == 2)
      {
        v82 = v213[0];
        if (sub_1D3E02AD8((uint64_t)&v196, v213[0]) > -1.0)
        {
          sub_1D3E02BD4(&v208, (uint64_t)&v196, v213, v81, v83, v87 != 0);
          sub_1D3E036F4(&v208);
          v82 = v213[0];
        }
        *v82 = v82[2];
        *(_QWORD *)(v82 + 1) = 1;
        v86 = 1;
        goto LABEL_81;
      }
      if (v86 != 1)
      {
        ++v86;
LABEL_80:
        ++v82[v86];
        goto LABEL_81;
      }
      ++v82[1];
LABEL_81:
      if (v77 == ++v83)
        goto LABEL_82;
    }
    if (v86 == 1)
      v86 = 2;
    goto LABEL_80;
  }
LABEL_100:
  if (v190)
    v99 = 4;
  else
    v99 = 3;
  sub_1D3DB0904(&v196, v99);
  v100 = v196;
  v101 = v192;
  if (v192)
  {
    v102 = v192 + 2;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = v100;
  if (*v100)
  {
    sub_1D3D6D13C(*v100);
    v104 = v196;
  }
  *v100 = v101;
  v105 = v194;
  if (v194)
  {
    v106 = v194 + 2;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = v104[1];
  v109 = v104;
  if (v108)
  {
    sub_1D3D6D13C(v108);
    v109 = v196;
  }
  v104[1] = v105;
  v110 = v193;
  if (v193)
  {
    v111 = v193 + 2;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = v109[2];
  if (v113)
    sub_1D3D6D13C(v113);
  v109[2] = v110;
  v114 = v190;
  if (v190)
  {
    v115 = v196;
    v116 = v190 + 2;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
    v118 = v115[3];
    if (v118)
      sub_1D3D6D13C(v118);
    v115[3] = v114;
    v119 = v154;
  }
  else
  {
    v119 = v154;
    if (v191)
    {
      v120 = operator new();
      v121 = (*(float (**)(unsigned int *))(*(_QWORD *)v191 + 16))(v191);
      v122 = (*(float (**)(unsigned int *))(*(_QWORD *)v191 + 24))(v191);
      v123 = v191[5];
      *(_DWORD *)(v120 + 8) = 0;
      v124 = (unsigned int *)(v120 + 8);
      *(float *)(v120 + 12) = v121;
      *(float *)(v120 + 16) = v122;
      *(_QWORD *)v120 = &off_1E95AF898;
      *(_DWORD *)(v120 + 20) = v123;
      *(_DWORD *)(v120 + 24) = v123;
      *(_DWORD *)(v120 + 28) = 0;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
      v209 = (unsigned int ***)v120;
      do
        v126 = __ldxr(v124);
      while (__stxr(v126 + 1, v124));
      if (v190)
        sub_1D3D6D13C(v190);
      v190 = (unsigned int *)v120;
      sub_1D3E036F4((unsigned int **)&v209);
    }
  }
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v127 = (_QWORD *)sub_1D3E071F0(&v209, (uint64_t)&v184);
  v128 = v127;
  v210 = v127;
  if ((unint64_t)v127 >= v211)
  {
    v129 = sub_1D3E071F0(&v209, (uint64_t)&__p);
  }
  else
  {
    *v127 = 0;
    v127[1] = 0;
    v127[2] = 0;
    sub_1D3D8E528(v127, __p, (uint64_t)v182, (v182 - (_BYTE *)__p) >> 2);
    v129 = (uint64_t)(v128 + 3);
  }
  v210 = (_QWORD *)v129;
  v130 = operator new();
  v171 = 0;
  v172 = 0;
  v173 = 0;
  sub_1D3D6D6A8((unsigned int *)&v171, v196, v197, v197 - v196);
  v168 = 0;
  v169 = 0;
  v170 = 0;
  sub_1D3DB46E4((uint64_t)&v168, (uint64_t)v209, (uint64_t)v210, 0xAAAAAAAAAAAAAAABLL * ((unsigned int ***)v210 - v209));
  *(_DWORD *)(v130 + 8) = 0;
  v131 = (unsigned int *)(v130 + 8);
  *(_QWORD *)v130 = &off_1E95AF310;
  *(_BYTE *)(v130 + 12) = v156;
  *(_QWORD *)(v130 + 16) = 0;
  *(_QWORD *)(v130 + 24) = 0;
  *(_QWORD *)(v130 + 32) = 0;
  sub_1D3D6D6A8((unsigned int *)(v130 + 16), v171, v172, v172 - v171);
  *(_QWORD *)(v130 + 40) = 0;
  *(_QWORD *)(v130 + 48) = 0;
  *(_QWORD *)(v130 + 56) = 0;
  sub_1D3DB46E4(v130 + 40, v168, v169, 0xAAAAAAAAAAAAAAABLL * ((v169 - v168) >> 3));
  *(_QWORD *)(v130 + 64) = 0;
  *(_QWORD *)(v130 + 72) = 0;
  *(_QWORD *)(v130 + 80) = 0;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
  v174 = (unsigned int *)v130;
  v165[0] = (void **)&v168;
  sub_1D3D6D3BC(v165);
  v165[0] = (void **)&v171;
  sub_1D3D6D79C(v165);
  v165[0] = a2;
  v165[1] = (void **)&v174;
  v166 = v119;
  v167 = v156;
  v133 = v174;
  if (v174)
  {
    v134 = v174 + 2;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v164 = v133;
  v136 = v194;
  if (v194)
  {
    v137 = v194 + 2;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  v162 = v136;
  v139 = v193;
  if (v193)
  {
    v140 = v193 + 2;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v161 = v139;
  v142 = v192;
  if (v192)
  {
    v143 = v192 + 2;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  v160 = v142;
  v145 = v190;
  if (v190)
  {
    v146 = v190 + 2;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  v159 = v145;
  (*((void (**)(unsigned int **__return_ptr, void **, unsigned int **, unsigned int **, unsigned int **, unsigned int **, uint64_t))*a2
   + 2))(v214, a2, &v162, &v161, &v160, &v159, v119);
  v148 = v214[0];
  if (v214[0])
  {
    v149 = v214[0] + 2;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  v163 = v148;
  sub_1D3E07300(v153, (unsigned int *)a2[2], (uint64_t *)&v164, &v163, v119, v156 != 0);
  sub_1D3DB45E8(&v163);
  sub_1D3D6F2E0(v214);
  sub_1D3D6D834(&v159);
  sub_1D3D6D834(&v160);
  sub_1D3D6D834(&v161);
  sub_1D3D6D834(&v162);
  sub_1D3DC6848(&v164);
  sub_1D3DC6848(&v174);
  v165[0] = (void **)&v209;
  sub_1D3D6D3BC(v165);
  v209 = &v196;
  sub_1D3D6D79C((void ***)&v209);
  if (__p)
  {
    v182 = __p;
    operator delete(__p);
  }
  if (v183[0])
  {
    v183[1] = v183[0];
    operator delete(v183[0]);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (v187)
    operator delete(v187);
  sub_1D3E036F4(&v190);
  sub_1D3DC2944(&v191);
  sub_1D3DC2944(&v192);
  sub_1D3DC2944(&v193);
  return sub_1D3DC2944(&v194);
}

void sub_1D3E06840()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  __cxa_end_catch();
  if (v0)
    operator delete(v0);
  if (v1)
    operator delete(v1);
  if (v2)
    operator delete(v2);
  if (v3)
    operator delete(v3);
  JUMPOUT(0x1D3E06F70);
}

void sub_1D3E0684C()
{
  uint64_t v0;

  sub_1D3E036F4((unsigned int **)(v0 - 232));
  *(_QWORD *)(v0 - 232) = &STACK[0x208];
  sub_1D3D6D79C((void ***)(v0 - 232));
  JUMPOUT(0x1D3E06F2CLL);
}

void sub_1D3E06860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,unsigned int *a50)
{
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  sub_1D3DB45E8(&a50);
  sub_1D3D6F2E0((unsigned int **)(v50 - 200));
  sub_1D3E036F4((unsigned int **)&STACK[0x208]);
  if (v51)
    operator delete(v51);
  if (v52)
    operator delete(v52);
  if (v53)
    operator delete(v53);
  if (v54)
    operator delete(v54);
  JUMPOUT(0x1D3E06F70);
}

void sub_1D3E068A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,unsigned int *a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  sub_1D3DB45E8(&a55);
  if (v55)
    operator delete(v55);
  if (v56)
    operator delete(v56);
  if (v57)
    operator delete(v57);
  if (v58)
    operator delete(v58);
  JUMPOUT(0x1D3E06F70);
}

void sub_1D3E068B8()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x1D8254C54](v0, 0x1081C40ABB4582ELL);
  *(_QWORD *)(v1 - 232) = &STACK[0x208];
  sub_1D3D6D79C(v1 - 232);
  JUMPOUT(0x1D3E06F2CLL);
}

void sub_1D3E068D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40)
{
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v41 - 224) = v40;
  a40 = (void **)(v41 - 232);
  sub_1D3D6D3BC(&a40);
  *(_QWORD *)(v41 - 232) = &STACK[0x208];
  sub_1D3D6D79C((void ***)(v41 - 232));
  JUMPOUT(0x1D3E06F2CLL);
}

void sub_1D3E068E4(_Unwind_Exception *a1)
{
  void *v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;

  __cxa_free_exception(v1);
  sub_1D3E036F4(&v3);
  sub_1D3DC2944(&v4);
  sub_1D3DC2944(&v5);
  sub_1D3DC2944(&v6);
  sub_1D3DC2944(&v7);
  _Unwind_Resume(a1);
}

void sub_1D3E068F4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,unsigned int *a34,unsigned int *a35,unsigned int *a36,unsigned int *a37,unsigned int *a38,unsigned int *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,const void *a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  float v73;
  int v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  void *v97;
  NSObject *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  _QWORD *exception;

  if (a2)
  {
    sub_1D3DB45E8(&a38);
    sub_1D3D6F2E0((unsigned int **)(v72 - 176));
    sub_1D3D6D834(&a34);
    sub_1D3D6D834(&a35);
    sub_1D3D6D834(&a36);
    sub_1D3D6D834(&a37);
    sub_1D3DC6848(&a39);
    __cxa_begin_catch(a1);
    v75 = sub_1D3E07540((uint64_t)&a62, &a56);
    v76 = v75;
    if (v73 <= 2.5 || a14 > 1)
    {
      if (a14 == 6 && v75 >= 4)
      {
        if (qword_1EDB89DE0 != -1)
          dispatch_once(&qword_1EDB89DE0, &unk_1E95B35A8);
        v98 = qword_1EDB89E48;
        if (os_log_type_enabled((os_log_t)qword_1EDB89E48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)(v72 - 176) = 67240192;
          *(_DWORD *)(v72 - 172) = v76;
          _os_log_debug_impl(&dword_1D3D6B000, v98, OS_LOG_TYPE_DEBUG, "QR with 6 algiment patterns: try estimate polynomial transform using %{public}d valid alignment patterns.", (uint8_t *)(v72 - 176), 8u);
        }
        v99 = a72;
        if (a72)
        {
          v100 = (unsigned int *)(a72 + 8);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        a24 = v99;
        v102 = a71;
        if (a71)
        {
          v103 = (unsigned int *)(a71 + 8);
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        a23 = v102;
        v105 = a70;
        if (a70)
        {
          v106 = (unsigned int *)(a70 + 8);
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        a22 = v105;
        v108 = &a24;
        v109 = &a23;
        v110 = &a22;
        sub_1D3E0879C((uint64_t)&a62, (uint64_t)&a56, &a24, &a23, &a22, a12);
      }
      else
      {
        if (a14 < 13 || v75 < 6)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          sub_1D3DDE1A0(exception, "transform for this case not implemented.");
          *exception = &off_1E95AF388;
          __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
        }
        v111 = a72;
        if (a72)
        {
          v112 = (unsigned int *)(a72 + 8);
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        a21 = v111;
        v114 = a71;
        if (a71)
        {
          v115 = (unsigned int *)(a71 + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        a20 = v114;
        v117 = a70;
        if (a70)
        {
          v118 = (unsigned int *)(a70 + 8);
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        a19 = v117;
        v108 = &a21;
        v109 = &a20;
        v110 = &a19;
        sub_1D3E0879C((uint64_t)&a62, (uint64_t)&a56, &a21, &a20, &a19, a12);
      }
      sub_1D3D6D834((unsigned int **)v110);
      sub_1D3D6D834((unsigned int **)v109);
      sub_1D3D6D834((unsigned int **)v108);
      sub_1D3E08BE4(a11, &a40, &a62, (uint64_t)&a56);
    }
    else
    {
      if (qword_1EDB89DE0 != -1)
        dispatch_once(&qword_1EDB89DE0, &unk_1E95B35A8);
      v77 = qword_1EDB89E48;
      if (os_log_type_enabled((os_log_t)qword_1EDB89E48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v72 - 176) = 0;
        _os_log_debug_impl(&dword_1D3D6B000, v77, OS_LOG_TYPE_DEBUG, "QR with 0 or 1 alignment pattern: try to search 12 finder pattern corners and estimate polynomial transform.", (uint8_t *)(v72 - 176), 2u);
      }
      *(_QWORD *)(v72 - 176) = 0;
      *(_QWORD *)(v72 - 168) = 0;
      *(_QWORD *)(v72 - 160) = 0;
      __p = 0;
      a32 = 0;
      a33 = 0;
      v78 = *(_QWORD *)(a18 + 16);
      if (v78)
      {
        v79 = (unsigned int *)(v78 + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      a30 = v78;
      v81 = *a10;
      if (*a10)
      {
        v82 = (unsigned int *)(v81 + 8);
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      a29 = v81;
      v84 = sub_1D3E0797C(&a30, &a29, a12, v72 - 176, (uint64_t)&__p, v73);
      sub_1D3DE9798((unsigned int **)&a29);
      sub_1D3D6D10C((unsigned int **)&a30);
      if (v84 <= 8)
      {
        v85 = a72;
        if (a72)
        {
          v86 = (unsigned int *)(a72 + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        a28 = v85;
        v88 = a71;
        if (a71)
        {
          v89 = (unsigned int *)(a71 + 8);
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        a27 = v88;
        v91 = a70;
        if (a70)
        {
          v92 = (unsigned int *)(a70 + 8);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        a26 = v91;
        sub_1D3E0879C(v72 - 176, (uint64_t)&__p, &a28, &a27, &a26, a12);
        sub_1D3D6D834((unsigned int **)&a26);
        sub_1D3D6D834((unsigned int **)&a27);
        sub_1D3D6D834((unsigned int **)&a28);
      }
      if (v76 == 1)
      {
        v94 = a68;
        if (a68)
        {
          v95 = (unsigned int *)(a68 + 8);
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        a25 = v94;
        sub_1D3E088D8(v72 - 176, (uint64_t)&__p, &a25, a12);
        sub_1D3E036F4((unsigned int **)&a25);
      }
      sub_1D3E08BE4(a11, &a40, (const void **)(v72 - 176), (uint64_t)&__p);
      if (__p)
        operator delete(__p);
      v97 = *(void **)(v72 - 176);
      if (v97)
        operator delete(v97);
    }
    __cxa_end_catch();
    JUMPOUT(0x1D3E06728);
  }
  JUMPOUT(0x1D3E06F98);
}

void sub_1D3E06D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unsigned int *a49)
{
  void *v49;
  uint64_t v50;

  __cxa_free_exception(v49);
  __cxa_end_catch();
  sub_1D3DC6848(&a49);
  a40 = (void **)(v50 - 232);
  sub_1D3D6D3BC(&a40);
  JUMPOUT(0x1D3E06F1CLL);
}

void sub_1D3E06E6C(void *a1, int a2)
{
  if (a2)
    sub_1D3D6D5A8(a1);
  JUMPOUT(0x1D3E06F98);
}

void sub_1D3E06E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  sub_1D3D6D79C(&a40);
  a40 = (void **)&a43;
  sub_1D3D6D3BC(&a40);
  a40 = (void **)&a46;
  sub_1D3D6D79C(&a40);
  MEMORY[0x1D8254C54](v46, 0x10A1C400C341749);
  a40 = (void **)(v47 - 232);
  sub_1D3D6D3BC(&a40);
  JUMPOUT(0x1D3E06F1CLL);
}

void sub_1D3E06EE4()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  if (v0)
    operator delete(v0);
  if (v1)
    operator delete(v1);
  if (v2)
    operator delete(v2);
  if (v3)
    operator delete(v3);
  JUMPOUT(0x1D3E06F70);
}

void sub_1D3E06EEC()
{
  JUMPOUT(0x1D3E06F3CLL);
}

void sub_1D3E06EF4()
{
  JUMPOUT(0x1D3E06F4CLL);
}

uint64_t sub_1D3E06FA0(_QWORD *a1, uint64_t a2, _QWORD *a3, char *a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  float v14;
  unint64_t v15;
  float *v16;
  float *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  int v25;
  float v26;
  float *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float *v34;
  int v35;

  v5 = a1[1] - *a1;
  if ((int)(v5 >> 2) >= 1)
  {
    v7 = 0;
    v8 = (v5 >> 2) - 1;
    v9 = (v5 >> 2);
    do
    {
      v10 = 0;
      do
      {
        if (v10 | v7)
        {
          v11 = v7 == v8 && v10 == 0;
          v12 = v11;
          v13 = v10 == v8 && v7 == 0;
          if (!v13 && !v12)
          {
            v14 = (float)*(int *)(*a1 + 4 * v10) + 0.5;
            v16 = *(float **)(a2 + 8);
            v15 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v16 >= v15)
            {
              v18 = *(char **)a2;
              v19 = ((uint64_t)v16 - *(_QWORD *)a2) >> 2;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62)
                goto LABEL_54;
              v21 = v15 - (_QWORD)v18;
              if (v21 >> 1 > v20)
                v20 = v21 >> 1;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                v22 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              if (v22)
              {
                v22 = (unint64_t)sub_1D3D82278(v22);
                v18 = *(char **)a2;
                v16 = *(float **)(a2 + 8);
              }
              else
              {
                v23 = 0;
              }
              v24 = (float *)(v22 + 4 * v19);
              *v24 = v14;
              v17 = v24 + 1;
              while (v16 != (float *)v18)
              {
                v25 = *((_DWORD *)v16-- - 1);
                *((_DWORD *)v24-- - 1) = v25;
              }
              v15 = v22 + 4 * v23;
              *(_QWORD *)a2 = v24;
              *(_QWORD *)(a2 + 8) = v17;
              *(_QWORD *)(a2 + 16) = v15;
              if (v18)
              {
                operator delete(v18);
                v15 = *(_QWORD *)(a2 + 16);
              }
            }
            else
            {
              *v16 = v14;
              v17 = v16 + 1;
            }
            *(_QWORD *)(a2 + 8) = v17;
            v26 = (float)*(int *)(*a1 + 4 * v7) + 0.5;
            if ((unint64_t)v17 >= v15)
            {
              v28 = *(char **)a2;
              v29 = ((uint64_t)v17 - *(_QWORD *)a2) >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
LABEL_54:
                sub_1D3D6D4F8();
              v31 = v15 - (_QWORD)v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v32 = (unint64_t)sub_1D3D82278(v32);
                v28 = *(char **)a2;
                v17 = *(float **)(a2 + 8);
              }
              else
              {
                v33 = 0;
              }
              v34 = (float *)(v32 + 4 * v29);
              *v34 = v26;
              v27 = v34 + 1;
              while (v17 != (float *)v28)
              {
                v35 = *((_DWORD *)v17-- - 1);
                *((_DWORD *)v34-- - 1) = v35;
              }
              *(_QWORD *)a2 = v34;
              *(_QWORD *)(a2 + 8) = v27;
              *(_QWORD *)(a2 + 16) = v32 + 4 * v33;
              if (v28)
                operator delete(v28);
            }
            else
            {
              *v17 = v26;
              v27 = v17 + 1;
            }
            *(_QWORD *)(a2 + 8) = v27;
          }
        }
        ++v10;
      }
      while (v10 != v9);
      ++v7;
    }
    while (v7 != v9);
  }
  if (a4 != (char *)a2)
    sub_1D3DD0324(a4, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*a3 + 16))(*a3, a4);
}

uint64_t sub_1D3E071F0(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D3D6D4F8();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)sub_1D3DB485C(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  sub_1D3D8E528(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v13 += 3;
  sub_1D3E09140(a1, v12);
  v10 = a1[1];
  sub_1D3E091B0((uint64_t)v12);
  return v10;
}

void sub_1D3E072EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3E091B0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E07300(_QWORD *a1, unsigned int *a2, uint64_t *a3, unsigned int **a4, int a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;

  if (a2)
  {
    v9 = a2 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v45 = a2;
  v11 = *a4;
  if (*a4)
  {
    v12 = v11 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v44 = v11;
  sub_1D3E09210((uint64_t *)&v46, &v45, a5, &v44, a6);
  sub_1D3DB45E8(&v44);
  sub_1D3D6D10C(&v45);
  v14 = *a3;
  v15 = v46;
  if (v46)
  {
    v16 = v46 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v19 = v15;
  }
  else
  {
    v19 = 0;
  }
  v43 = v19;
  v20 = *(unsigned int **)(v14 + 64);
  if (v20)
    sub_1D3D6D13C(v20);
  *(_QWORD *)(v14 + 64) = v15;
  sub_1D3D6D10C(&v43);
  v21 = *a3;
  v22 = *a4;
  if (v22)
  {
    v23 = v22 + 2;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    v26 = v22;
  }
  else
  {
    v26 = 0;
  }
  v42 = v26;
  v27 = *(unsigned int **)(v21 + 72);
  if (v27)
    sub_1D3D6D13C(v27);
  *(_QWORD *)(v21 + 72) = v22;
  sub_1D3DB45E8(&v42);
  v28 = *a3;
  v29 = v46;
  if (v46)
  {
    v30 = v46 + 2;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v40 = v29;
  sub_1D3DFFFB8((uint64_t *)&v41, v29);
  v32 = v41;
  if (v41)
  {
    v33 = v41 + 2;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(unsigned int **)(v28 + 80);
  if (v35)
    sub_1D3D6D13C(v35);
  *(_QWORD *)(v28 + 80) = v32;
  sub_1D3D7F814(&v41);
  sub_1D3D6D10C(&v40);
  *a1 = 0;
  v36 = *a3;
  if (*a3)
  {
    v37 = (unsigned int *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *a1 = v36;
  return sub_1D3D6D10C(&v46);
}

void sub_1D3E074E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  va_list va;
  unsigned int *v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, unsigned int *);
  va_copy(va2, va1);
  v5 = va_arg(va2, unsigned int *);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_1D3D7F814((unsigned int **)va1);
  sub_1D3D6D10C((unsigned int **)va);
  sub_1D3D6D10C((unsigned int **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E07540(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  _QWORD *v59;
  void *v60;
  int v62;
  uint64_t v63;
  __int128 v65;
  _DWORD *v66;
  _DWORD *v67;

  v2 = *(_DWORD **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return 0;
  v4 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  if ((unint64_t)(v3 - v4) >= 8)
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v5 = 0;
    v9 = 0;
    v11 = 0;
    v65 = 0u;
    v63 = a1;
    do
    {
      if (*(float *)(v4 + 8 * v11) >= 0.0)
      {
        v12 = (2 * v11) | 1;
        if (*(float *)(v4 + 4 * v12) >= 0.0)
        {
          v62 = v9;
          v13 = *(_DWORD **)a1;
          v14 = *((_QWORD *)&v65 + 1);
          v15 = (_DWORD *)v65;
          if (*((_QWORD *)&v65 + 1) >= v8)
          {
            v17 = v8;
            v18 = v5;
            v19 = (void *)v65;
            v20 = (uint64_t)(*((_QWORD *)&v65 + 1) - v65) >> 2;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62)
              goto LABEL_87;
            v22 = v17 - v65;
            v23 = (uint64_t)(v17 - v65) >> 1;
            if (v23 > v21)
              v21 = v23;
            if (v22 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v21;
            if (v24)
              v24 = (unint64_t)sub_1D3D82278(v24);
            else
              v25 = 0;
            v26 = (_DWORD *)(v24 + 4 * v20);
            *v26 = v13[2 * v11];
            v16 = v26 + 1;
            v5 = v18;
            while (v14 != (_QWORD)v65)
            {
              v27 = *(_DWORD *)(v14 - 4);
              v14 -= 4;
              *--v26 = v27;
            }
            v8 = v24 + 4 * v25;
            v15 = v26;
            if ((_QWORD)v65)
            {
              v66 = v26;
              operator delete(v19);
              v15 = v66;
            }
            a1 = v63;
          }
          else
          {
            **((_DWORD **)&v65 + 1) = v13[2 * v11];
            v16 = (_DWORD *)(*((_QWORD *)&v65 + 1) + 4);
          }
          v67 = v15;
          v28 = *(_DWORD **)a1;
          if ((unint64_t)v16 >= v8)
          {
            v30 = v8;
            v31 = v5;
            v32 = v15;
            v33 = v16 - v15;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              goto LABEL_87;
            v35 = v30 - (_QWORD)v15;
            v36 = (uint64_t)(v30 - (_QWORD)v15) >> 1;
            if (v36 > v34)
              v34 = v36;
            if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v34;
            if (v37)
              v37 = (unint64_t)sub_1D3D82278(v37);
            else
              v38 = 0;
            v39 = (_DWORD *)(v37 + 4 * v33);
            *v39 = v28[v12];
            v29 = v39 + 1;
            v5 = v31;
            while (v16 != v32)
            {
              v40 = *--v16;
              *--v39 = v40;
            }
            v8 = v37 + 4 * v38;
            v67 = v39;
            if (v32)
              operator delete(v32);
            a1 = v63;
          }
          else
          {
            *v16 = v28[v12];
            v29 = v16 + 1;
          }
          v41 = a2;
          *(_QWORD *)&v42 = v67;
          *((_QWORD *)&v42 + 1) = v29;
          v65 = v42;
          v43 = *a2;
          if ((unint64_t)v6 >= v5)
          {
            v45 = v6 - v7;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              goto LABEL_87;
            if ((uint64_t)(v5 - (_QWORD)v7) >> 1 > v46)
              v46 = (uint64_t)(v5 - (_QWORD)v7) >> 1;
            if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v46;
            if (v47)
              v47 = (unint64_t)sub_1D3D82278(v47);
            else
              v48 = 0;
            v49 = (_DWORD *)(v47 + 4 * v45);
            *v49 = *(_DWORD *)(v43 + 8 * v11);
            v44 = v49 + 1;
            while (v6 != v7)
            {
              v50 = *--v6;
              *--v49 = v50;
            }
            v5 = v47 + 4 * v48;
            if (v7)
              operator delete(v7);
            v7 = v49;
            a1 = v63;
            v41 = a2;
          }
          else
          {
            *v6 = *(_DWORD *)(v43 + 8 * v11);
            v44 = v6 + 1;
          }
          v51 = *v41;
          if ((unint64_t)v44 >= v5)
          {
            v53 = v44 - v7;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
LABEL_87:
              sub_1D3D6D4F8();
            if ((uint64_t)(v5 - (_QWORD)v7) >> 1 > v54)
              v54 = (uint64_t)(v5 - (_QWORD)v7) >> 1;
            if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v55 = (unint64_t)sub_1D3D82278(v55);
            else
              v56 = 0;
            v57 = (_DWORD *)(v55 + 4 * v53);
            *v57 = *(_DWORD *)(v51 + 4 * v12);
            v6 = v57 + 1;
            if (v44 == v7)
            {
              v52 = v62;
            }
            else
            {
              v52 = v62;
              do
              {
                v58 = *--v44;
                *--v57 = v58;
              }
              while (v44 != v7);
            }
            v5 = v55 + 4 * v56;
            if (v7)
              operator delete(v7);
            v7 = v57;
            a1 = v63;
            v41 = a2;
          }
          else
          {
            *v44 = *(_DWORD *)(v51 + 4 * v12);
            v6 = v44 + 1;
            v52 = v62;
          }
          v9 = (v52 + 1);
          v59 = v41;
          v4 = *v41;
          v3 = v59[1];
        }
      }
      ++v11;
    }
    while (v11 < (unint64_t)((v3 - v4) >> 2) >> 1);
    v2 = *(_DWORD **)a1;
    v10 = v65;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0uLL;
  }
  *(_OWORD *)a1 = v10;
  *(_QWORD *)(a1 + 16) = v8;
  v60 = (void *)*a2;
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v5;
  if (v60)
    operator delete(v60);
  if (v2)
    operator delete(v2);
  return v9;
}

void sub_1D3E07950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D3E0797C(uint64_t *a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  int v39;
  int v40;
  float v41;
  float v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  float v47;
  float v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  __int128 v59;
  _OWORD *v60;
  _OWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  float v68;
  float v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  _DWORD *v78;
  float v79;
  float v80;
  char *v81;
  __int128 v82;
  _OWORD *v83;
  _OWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  float v91;
  float v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  float *v101;
  char *v102;
  __int128 v103;
  _OWORD *v104;
  _OWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  int v129;
  _DWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  int v138;
  unint64_t v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  int v149;
  _DWORD *v150;
  _DWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  int v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  void *__p[2];
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int *v178;
  _BYTE v179[24];
  unsigned int *v180;
  void *v181;
  char *v182;
  _QWORD *v183;
  char *v184;
  unint64_t *v185;

  sub_1D3DCFF78((uint64_t)v179, a1, *(_BYTE *)(*a2 + 52));
  v12 = *a2;
  v13 = *(unsigned int **)(*a2 + 24);
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v12 = *a2;
  }
  v178 = v13;
  v16 = *(unsigned int **)(v12 + 32);
  if (v16)
  {
    v17 = v16 + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v12 = *a2;
  }
  v177 = v16;
  v19 = *(unsigned int **)(v12 + 16);
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v176 = v19;
  v22 = (*(float (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
  v23 = (*(float (**)(unsigned int *))(*(_QWORD *)v177 + 16))(v177);
  v24 = (*(float (**)(unsigned int *))(*(_QWORD *)v178 + 16))(v178);
  v25 = (*(float (**)(unsigned int *))(*(_QWORD *)v176 + 16))(v176);
  v26 = (*(float (**)(unsigned int *))(*(_QWORD *)v178 + 24))(v178);
  v27 = (*(float (**)(unsigned int *))(*(_QWORD *)v177 + 24))(v177);
  v28 = (*(float (**)(unsigned int *))(*(_QWORD *)v178 + 24))(v178);
  v29 = (float)((float)(v22 - v23) + v24) - v25;
  v30 = (float)((float)(v26 - v27) + v28) - (*(float (**)(unsigned int *))(*(_QWORD *)v176 + 24))(v176);
  v31 = sqrtf((float)(v30 * v30) + (float)(v29 * v29));
  if (v31 >= 0.00000011921)
  {
    v33 = *a1;
    v34 = *(_QWORD *)(*a1 + 56);
    v35 = *(_QWORD *)(*a1 + 32);
    v36 = *(_QWORD *)(v33 + 16);
    v37 = operator new();
    v38 = v29 / v31;
    if ((float)(v30 / v31) <= 0.0)
      v39 = 1;
    else
      v39 = 2;
    if ((float)(v30 / v31) <= 0.0)
      v40 = 0;
    else
      v40 = 3;
    if (v38 <= 0.0)
      v39 = v40;
    v41 = fabsf(v38);
    v42 = fabsf(v30 / v31);
    v43 = v41 < (float)(v42 * 0.414);
    if (v42 < (float)(v41 * 0.414))
      v43 = 1;
    *(_BYTE *)v37 = 1;
    *(_BYTE *)(v37 + 1) = v43;
    *(_WORD *)(v37 + 12) = 256;
    *(float *)(v37 + 28) = a6;
    *(_QWORD *)(v37 + 32) = v179;
    *(_QWORD *)(v37 + 40) = v36 & (v34 - 1) | v35 & -v34;
    *(_QWORD *)(v37 + 48) = v35 & (v34 - 1) | v36 & -v34;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *(_OWORD *)(v37 + 88) = 0u;
    *(_OWORD *)(v37 + 104) = 0u;
    *(_QWORD *)(v37 + 120) = 0;
    *(_DWORD *)(v37 + 144) = v39;
    v44 = (int)(float)(a6 * 0.25);
    if (v44 <= 1)
      v44 = 1;
    v45 = v44 >> 2;
    if (v44 >> 2 <= 1)
      v45 = 1;
    *(_DWORD *)(v37 + 4) = v44;
    *(_DWORD *)(v37 + 8) = v45;
    v46 = (int)(float)(a6 / 5.0);
    if (v46 <= 1)
      v46 = 1;
    *(_DWORD *)(v37 + 16) = 2;
    v163 = v37;
    *(_DWORD *)(v37 + 20) = v46;
    *(_DWORD *)(v37 + 24) = 1084751872;
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v47 = (*(float (**)(unsigned int *))(*(_QWORD *)v178 + 16))(v178);
    v48 = (*(float (**)(unsigned int *))(*(_QWORD *)v178 + 24))(v178);
    sub_1D3DD3A98(__p, v163, (int)v47, (int)v48);
    v49 = v174;
    if ((unint64_t)v174 >= v175)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v174 - v173) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3) > v51)
        v51 = 0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - v173) >> 3) >= 0x555555555555555)
        v52 = 0xAAAAAAAAAAAAAAALL;
      else
        v52 = v51;
      v185 = &v175;
      v53 = (char *)sub_1D3DB485C(v52);
      v54 = &v53[24 * v50];
      v181 = v53;
      v182 = v54;
      v184 = &v53[24 * v55];
      *(_QWORD *)v54 = 0;
      *((_QWORD *)v54 + 1) = 0;
      *((_QWORD *)v54 + 2) = 0;
      *(_OWORD *)v54 = *(_OWORD *)__p;
      *((_QWORD *)v54 + 2) = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v183 = v54 + 24;
      sub_1D3E09140(&v173, &v181);
      v56 = v174;
      sub_1D3E091B0((uint64_t)&v181);
      v174 = v56;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *v174 = 0;
      v49[1] = 0;
      v49[2] = 0;
      *(_OWORD *)v49 = *(_OWORD *)__p;
      v49[2] = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v174 = v49 + 3;
    }
    v57 = operator new(0x20uLL);
    v58 = v57 + 2;
    *(_QWORD *)&v59 = v57;
    *((_QWORD *)&v59 + 1) = v57 + 2;
    *v57 = xmmword_1D3E82150;
    v57[1] = xmmword_1D3E82160;
    v60 = v171;
    if ((unint64_t)v171 >= v172)
    {
      v164 = v59;
      v62 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v171 - v170) >> 3);
      v63 = v62 + 1;
      if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3) > v63)
        v63 = 0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - v170) >> 3) >= 0x555555555555555)
        v64 = 0xAAAAAAAAAAAAAAALL;
      else
        v64 = v63;
      v185 = &v172;
      v65 = (char *)sub_1D3DB485C(v64);
      v66 = &v65[24 * v62];
      v181 = v65;
      v182 = v66;
      v184 = &v65[24 * v67];
      *(_OWORD *)v66 = v164;
      *((_QWORD *)v66 + 2) = v58;
      v183 = v66 + 24;
      sub_1D3E09140(&v170, &v181);
      v61 = v171;
      sub_1D3E091B0((uint64_t)&v181);
    }
    else
    {
      *v171 = v59;
      *((_QWORD *)v60 + 2) = v58;
      v61 = (_OWORD *)((char *)v60 + 24);
    }
    v171 = v61;
    v68 = (*(float (**)(unsigned int *))(*(_QWORD *)v177 + 16))(v177);
    v69 = (*(float (**)(unsigned int *))(*(_QWORD *)v177 + 24))(v177);
    sub_1D3DD3A98(__p, v163, (int)v68, (int)v69);
    v70 = v174;
    if ((unint64_t)v174 >= v175)
    {
      v71 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v174 - v173) >> 3);
      v72 = v71 + 1;
      if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3) > v72)
        v72 = 0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - v173) >> 3) >= 0x555555555555555)
        v73 = 0xAAAAAAAAAAAAAAALL;
      else
        v73 = v72;
      v185 = &v175;
      v74 = (char *)sub_1D3DB485C(v73);
      v75 = &v74[24 * v71];
      v181 = v74;
      v182 = v75;
      v184 = &v74[24 * v76];
      *(_QWORD *)v75 = 0;
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = 0;
      *(_OWORD *)v75 = *(_OWORD *)__p;
      *((_QWORD *)v75 + 2) = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v183 = v75 + 24;
      sub_1D3E09140(&v173, &v181);
      v77 = v174;
      sub_1D3E091B0((uint64_t)&v181);
      v174 = v77;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *v174 = 0;
      v70[1] = 0;
      v70[2] = 0;
      *(_OWORD *)v70 = *(_OWORD *)__p;
      v70[2] = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v174 = v70 + 3;
    }
    v78 = operator new(0x20uLL);
    v79 = (float)(a3 - 7);
    v80 = v79 + 7.0;
    v81 = (char *)(v78 + 8);
    *(float *)v78 = v79;
    v78[1] = 0;
    *((float *)v78 + 2) = v79 + 7.0;
    v78[3] = 0;
    *((float *)v78 + 4) = v79 + 7.0;
    v78[5] = 1088421888;
    *((float *)v78 + 6) = v79;
    v78[7] = 1088421888;
    *(_QWORD *)&v82 = v78;
    *((_QWORD *)&v82 + 1) = v78 + 8;
    v83 = v171;
    if ((unint64_t)v171 >= v172)
    {
      v165 = v82;
      v85 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v171 - v170) >> 3);
      v86 = v85 + 1;
      if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3) > v86)
        v86 = 0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - v170) >> 3) >= 0x555555555555555)
        v87 = 0xAAAAAAAAAAAAAAALL;
      else
        v87 = v86;
      v185 = &v172;
      v88 = (char *)sub_1D3DB485C(v87);
      v89 = &v88[24 * v85];
      v181 = v88;
      v182 = v89;
      v184 = &v88[24 * v90];
      *(_OWORD *)v89 = v165;
      *((_QWORD *)v89 + 2) = v81;
      v183 = v89 + 24;
      sub_1D3E09140(&v170, &v181);
      v84 = v171;
      sub_1D3E091B0((uint64_t)&v181);
    }
    else
    {
      *v171 = v82;
      *((_QWORD *)v83 + 2) = v81;
      v84 = (_OWORD *)((char *)v83 + 24);
    }
    v171 = v84;
    v91 = (*(float (**)(unsigned int *))(*(_QWORD *)v176 + 16))(v176);
    v92 = (*(float (**)(unsigned int *))(*(_QWORD *)v176 + 24))(v176);
    sub_1D3DD3A98(__p, v163, (int)v91, (int)v92);
    v93 = v174;
    if ((unint64_t)v174 >= v175)
    {
      v94 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v174 - v173) >> 3);
      v95 = v94 + 1;
      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3) > v95)
        v95 = 0x5555555555555556 * ((uint64_t)(v175 - v173) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - v173) >> 3) >= 0x555555555555555)
        v96 = 0xAAAAAAAAAAAAAAALL;
      else
        v96 = v95;
      v185 = &v175;
      v97 = (char *)sub_1D3DB485C(v96);
      v98 = &v97[24 * v94];
      v181 = v97;
      v182 = v98;
      v184 = &v97[24 * v99];
      *(_QWORD *)v98 = 0;
      *((_QWORD *)v98 + 1) = 0;
      *((_QWORD *)v98 + 2) = 0;
      *(_OWORD *)v98 = *(_OWORD *)__p;
      *((_QWORD *)v98 + 2) = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v183 = v98 + 24;
      sub_1D3E09140(&v173, &v181);
      v100 = v174;
      sub_1D3E091B0((uint64_t)&v181);
      v174 = v100;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *v174 = 0;
      v93[1] = 0;
      v93[2] = 0;
      *(_OWORD *)v93 = *(_OWORD *)__p;
      v93[2] = v169;
      __p[0] = 0;
      __p[1] = 0;
      v169 = 0;
      v174 = v93 + 3;
    }
    v101 = (float *)operator new(0x20uLL);
    v102 = (char *)(v101 + 8);
    *v101 = 0.0;
    v101[1] = v79;
    v101[2] = 7.0;
    v101[3] = v79;
    v101[4] = 7.0;
    v101[5] = v80;
    v101[6] = 0.0;
    v101[7] = v80;
    *(_QWORD *)&v103 = v101;
    *((_QWORD *)&v103 + 1) = v101 + 8;
    v104 = v171;
    if ((unint64_t)v171 >= v172)
    {
      v166 = v103;
      v106 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v171 - v170) >> 3);
      v107 = v106 + 1;
      if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D3D6D4F8();
      if (0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3) > v107)
        v107 = 0x5555555555555556 * ((uint64_t)(v172 - v170) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - v170) >> 3) >= 0x555555555555555)
        v108 = 0xAAAAAAAAAAAAAAALL;
      else
        v108 = v107;
      v185 = &v172;
      v109 = (char *)sub_1D3DB485C(v108);
      v110 = &v109[24 * v106];
      v181 = v109;
      v182 = v110;
      v184 = &v109[24 * v111];
      *(_OWORD *)v110 = v166;
      *((_QWORD *)v110 + 2) = v102;
      v183 = v110 + 24;
      sub_1D3E09140(&v170, &v181);
      v105 = v171;
      sub_1D3E091B0((uint64_t)&v181);
    }
    else
    {
      *v171 = v103;
      *((_QWORD *)v104 + 2) = v102;
      v105 = (_OWORD *)((char *)v104 + 24);
    }
    v112 = 0;
    v171 = v105;
    do
    {
      v182 = 0;
      v183 = 0;
      v181 = 0;
      sub_1D3D8E528(&v181, *(const void **)(v173 + 24 * v112), *(_QWORD *)(v173 + 24 * v112 + 8), (uint64_t)(*(_QWORD *)(v173 + 24 * v112 + 8) - *(_QWORD *)(v173 + 24 * v112)) >> 2);
      v167 = v112;
      __p[1] = 0;
      v169 = 0;
      __p[0] = 0;
      sub_1D3D8E528(__p, *(const void **)(v170 + 24 * v112), *(_QWORD *)(v170 + 24 * v112 + 8), (uint64_t)(*(_QWORD *)(v170 + 24 * v112 + 8) - *(_QWORD *)(v170 + 24 * v112)) >> 2);
      v113 = 0;
      v114 = v181;
      v115 = __p[0];
      do
      {
        v116 = v114[2 * v113];
        v117 = (2 * v113) | 1;
        v118 = v114[v117];
        v120 = *(_DWORD **)(a5 + 8);
        v119 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v120 >= v119)
        {
          v122 = *(_DWORD **)a5;
          v123 = ((uint64_t)v120 - *(_QWORD *)a5) >> 2;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 62)
            goto LABEL_161;
          v125 = v119 - (_QWORD)v122;
          if (v125 >> 1 > v124)
            v124 = v125 >> 1;
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
            v126 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v126 = v124;
          if (v126)
          {
            v126 = (unint64_t)sub_1D3D82278(v126);
            v122 = *(_DWORD **)a5;
            v120 = *(_DWORD **)(a5 + 8);
          }
          else
          {
            v127 = 0;
          }
          v128 = (_DWORD *)(v126 + 4 * v123);
          *v128 = v116;
          v121 = v128 + 1;
          while (v120 != v122)
          {
            v129 = *--v120;
            *--v128 = v129;
          }
          v119 = v126 + 4 * v127;
          *(_QWORD *)a5 = v128;
          *(_QWORD *)(a5 + 8) = v121;
          *(_QWORD *)(a5 + 16) = v119;
          if (v122)
          {
            operator delete(v122);
            v119 = *(_QWORD *)(a5 + 16);
          }
        }
        else
        {
          *v120 = v116;
          v121 = v120 + 1;
        }
        *(_QWORD *)(a5 + 8) = v121;
        if ((unint64_t)v121 >= v119)
        {
          v131 = *(_DWORD **)a5;
          v132 = ((uint64_t)v121 - *(_QWORD *)a5) >> 2;
          v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 62)
            goto LABEL_161;
          v134 = v119 - (_QWORD)v131;
          if (v134 >> 1 > v133)
            v133 = v134 >> 1;
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
            v135 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v135 = v133;
          if (v135)
          {
            v135 = (unint64_t)sub_1D3D82278(v135);
            v131 = *(_DWORD **)a5;
            v121 = *(_DWORD **)(a5 + 8);
          }
          else
          {
            v136 = 0;
          }
          v137 = (_DWORD *)(v135 + 4 * v132);
          *v137 = v118;
          v130 = v137 + 1;
          while (v121 != v131)
          {
            v138 = *--v121;
            *--v137 = v138;
          }
          *(_QWORD *)a5 = v137;
          *(_QWORD *)(a5 + 8) = v130;
          *(_QWORD *)(a5 + 16) = v135 + 4 * v136;
          if (v131)
            operator delete(v131);
        }
        else
        {
          *v121 = v118;
          v130 = v121 + 1;
        }
        *(_QWORD *)(a5 + 8) = v130;
        v140 = *(_DWORD **)(a4 + 8);
        v139 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v140 >= v139)
        {
          v142 = *(_DWORD **)a4;
          v143 = ((uint64_t)v140 - *(_QWORD *)a4) >> 2;
          v144 = v143 + 1;
          if ((unint64_t)(v143 + 1) >> 62)
            goto LABEL_161;
          v145 = v139 - (_QWORD)v142;
          if (v145 >> 1 > v144)
            v144 = v145 >> 1;
          if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
            v146 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v146 = v144;
          if (v146)
          {
            v146 = (unint64_t)sub_1D3D82278(v146);
            v142 = *(_DWORD **)a4;
            v140 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v147 = 0;
          }
          v148 = (_DWORD *)(v146 + 4 * v143);
          *v148 = v115[2 * v113];
          v141 = v148 + 1;
          while (v140 != v142)
          {
            v149 = *--v140;
            *--v148 = v149;
          }
          v139 = v146 + 4 * v147;
          *(_QWORD *)a4 = v148;
          *(_QWORD *)(a4 + 8) = v141;
          *(_QWORD *)(a4 + 16) = v139;
          if (v142)
          {
            operator delete(v142);
            v139 = *(_QWORD *)(a4 + 16);
          }
        }
        else
        {
          *v140 = v115[2 * v113];
          v141 = v140 + 1;
        }
        *(_QWORD *)(a4 + 8) = v141;
        if ((unint64_t)v141 >= v139)
        {
          v151 = *(_DWORD **)a4;
          v152 = ((uint64_t)v141 - *(_QWORD *)a4) >> 2;
          v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 62)
LABEL_161:
            sub_1D3D6D4F8();
          v154 = v139 - (_QWORD)v151;
          if (v154 >> 1 > v153)
            v153 = v154 >> 1;
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
            v155 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v155 = v153;
          if (v155)
          {
            v155 = (unint64_t)sub_1D3D82278(v155);
            v151 = *(_DWORD **)a4;
            v141 = *(_DWORD **)(a4 + 8);
          }
          else
          {
            v156 = 0;
          }
          v157 = (_DWORD *)(v155 + 4 * v152);
          *v157 = v115[v117];
          v150 = v157 + 1;
          while (v141 != v151)
          {
            v158 = *--v141;
            *--v157 = v158;
          }
          *(_QWORD *)a4 = v157;
          *(_QWORD *)(a4 + 8) = v150;
          *(_QWORD *)(a4 + 16) = v155 + 4 * v156;
          if (v151)
            operator delete(v151);
        }
        else
        {
          *v141 = v115[v117];
          v150 = v141 + 1;
        }
        *(_QWORD *)(a4 + 8) = v150;
        ++v113;
      }
      while (v113 != 4);
      if (__p[0])
        operator delete(__p[0]);
      if (v114)
        operator delete(v114);
      v112 = v167 + 1;
    }
    while (v167 != 2);
    v161 = a4;
    v160 = *(_DWORD **)a4;
    v159 = *(_QWORD *)(v161 + 8);
    v181 = &v170;
    sub_1D3D6D3BC((void ***)&v181);
    v181 = &v173;
    sub_1D3D6D3BC((void ***)&v181);
    v32 = (unint64_t)(v159 - (_QWORD)v160) >> 3;
    MEMORY[0x1D8254C54](v163, 0x1060C40B96495EDLL);
  }
  else
  {
    v32 = 0;
  }
  sub_1D3DC2944(&v176);
  sub_1D3DC2944(&v177);
  sub_1D3DC2944(&v178);
  sub_1D3D6D10C(&v180);
  return v32;
}

void sub_1D3E086A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char **__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,unsigned int *a22,unsigned int *a23,unsigned int *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;

  operator delete(v31);
  __p = &a16;
  sub_1D3D6D3BC((void ***)&__p);
  a16 = &a19;
  sub_1D3D6D3BC((void ***)&a16);
  MEMORY[0x1D8254C54](a10, 0x1060C40B96495EDLL);
  sub_1D3DC2944(&a22);
  sub_1D3DC2944(&a23);
  sub_1D3DC2944(&a24);
  sub_1D3D6D10C((unsigned int **)&a30);
  _Unwind_Resume(a1);
}

void sub_1D3E0879C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  char *v10;
  char *v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = *(char **)(a1 + 8);
  v17 = 3.5;
  v18 = (float)a6 + -3.5;
  __asm { FMOV            V1.2S, #3.5 }
  v19 = _D1;
  v20 = v18;
  v21 = 3.5;
  sub_1D3E08F54(a1, v10, (char *)&v17, (char *)&v22);
  v16 = *(char **)(a2 + 8);
  v17 = (*(float (**)(_QWORD))(*(_QWORD *)*a5 + 16))(*a5);
  v18 = (*(float (**)(_QWORD))(*(_QWORD *)*a5 + 24))(*a5);
  LODWORD(v19) = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  HIDWORD(v19) = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v20 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4);
  v21 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
  sub_1D3E08F54(a2, v16, (char *)&v17, (char *)&v22);
}

void sub_1D3E088D8(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  float v7;
  unint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  float *v18;
  int v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  int v29;
  float v30;
  float v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float *v41;
  unint64_t v42;
  int v43;
  float v44;
  float v45;
  unint64_t v46;
  float *v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  float *v55;
  unint64_t v56;
  int v57;

  if (*a3)
  {
    v7 = (float)a4 + -6.5;
    v9 = *(float **)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v9 >= v8)
    {
      v11 = *(float **)a1;
      v12 = ((uint64_t)v9 - *(_QWORD *)a1) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        goto LABEL_64;
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
      v16 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v13;
      if (v16)
      {
        v16 = (unint64_t)sub_1D3D82278(v16);
        v11 = *(float **)a1;
        v9 = *(float **)(a1 + 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (float *)(v16 + 4 * v12);
      v8 = v16 + 4 * v17;
      *v18 = v7;
      v10 = v18 + 1;
      while (v9 != v11)
      {
        v19 = *((_DWORD *)v9-- - 1);
        *((_DWORD *)v18-- - 1) = v19;
      }
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v8;
      if (v11)
      {
        operator delete(v11);
        v8 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if ((unint64_t)v10 >= v8)
    {
      v21 = *(float **)a1;
      v22 = ((uint64_t)v10 - *(_QWORD *)a1) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_64;
      v24 = v8 - (_QWORD)v21;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      v15 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
      v25 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v25 = v23;
      if (v25)
      {
        v25 = (unint64_t)sub_1D3D82278(v25);
        v21 = *(float **)a1;
        v10 = *(float **)(a1 + 8);
      }
      else
      {
        v26 = 0;
      }
      v27 = (float *)(v25 + 4 * v22);
      v28 = v25 + 4 * v26;
      *v27 = v7;
      v20 = v27 + 1;
      while (v10 != v21)
      {
        v29 = *((_DWORD *)v10-- - 1);
        *((_DWORD *)v27-- - 1) = v29;
      }
      *(_QWORD *)a1 = v27;
      *(_QWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 16) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v10 = v7;
      v20 = v10 + 1;
    }
    *(_QWORD *)(a1 + 8) = v20;
    v30 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    v31 = v30;
    v33 = *(float **)(a2 + 8);
    v32 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v33 >= v32)
    {
      v35 = *(float **)a2;
      v36 = ((uint64_t)v33 - *(_QWORD *)a2) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
        goto LABEL_64;
      v38 = v32 - (_QWORD)v35;
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      v15 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
      v39 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v39 = v37;
      if (v39)
      {
        v39 = (unint64_t)sub_1D3D82278(v39);
        v35 = *(float **)a2;
        v33 = *(float **)(a2 + 8);
      }
      else
      {
        v40 = 0;
      }
      v41 = (float *)(v39 + 4 * v36);
      v42 = v39 + 4 * v40;
      *v41 = v31;
      v34 = v41 + 1;
      while (v33 != v35)
      {
        v43 = *((_DWORD *)v33-- - 1);
        *((_DWORD *)v41-- - 1) = v43;
      }
      *(_QWORD *)a2 = v41;
      *(_QWORD *)(a2 + 8) = v34;
      *(_QWORD *)(a2 + 16) = v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v33 = v30;
      v34 = v33 + 1;
    }
    *(_QWORD *)(a2 + 8) = v34;
    v44 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
    v45 = v44;
    v47 = *(float **)(a2 + 8);
    v46 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v47 < v46)
    {
      *v47 = v44;
      v48 = v47 + 1;
LABEL_62:
      *(_QWORD *)(a2 + 8) = v48;
      return;
    }
    v49 = *(float **)a2;
    v50 = ((uint64_t)v47 - *(_QWORD *)a2) >> 2;
    v51 = v50 + 1;
    if (!((unint64_t)(v50 + 1) >> 62))
    {
      v52 = v46 - (_QWORD)v49;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      v15 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
      v53 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v53 = v51;
      if (v53)
      {
        v53 = (unint64_t)sub_1D3D82278(v53);
        v49 = *(float **)a2;
        v47 = *(float **)(a2 + 8);
      }
      else
      {
        v54 = 0;
      }
      v55 = (float *)(v53 + 4 * v50);
      v56 = v53 + 4 * v54;
      *v55 = v45;
      v48 = v55 + 1;
      while (v47 != v49)
      {
        v57 = *((_DWORD *)v47-- - 1);
        *((_DWORD *)v55-- - 1) = v57;
      }
      *(_QWORD *)a2 = v55;
      *(_QWORD *)(a2 + 8) = v48;
      *(_QWORD *)(a2 + 16) = v56;
      if (v49)
        operator delete(v49);
      goto LABEL_62;
    }
LABEL_64:
    sub_1D3D6D4F8();
  }
}

unsigned int **sub_1D3E08BE4(_QWORD *a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *exception;
  unsigned int *v21;
  unsigned int *v22;
  float *v23;
  unsigned int *v24;

  v8 = *a2;
  v9 = operator new();
  v10 = (unsigned int *)v9;
  *(_QWORD *)(v9 + 8) = 0;
  v11 = (unsigned int *)(v9 + 8);
  *(_QWORD *)v9 = &off_1E95AF428;
  *(_OWORD *)(v9 + 12) = xmmword_1D3E82060;
  *(_OWORD *)(v9 + 28) = xmmword_1D3E82060;
  *(_DWORD *)(v9 + 44) = 1065353216;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v24 = (unsigned int *)v9;
  do
    v13 = __ldxr(v11);
  while (__stxr(v13 + 1, v11));
  v23 = (float *)v9;
  v14 = sub_1D3DB9928(&v23, a3, a4);
  sub_1D3D6F2E0((unsigned int **)&v23);
  if (!v14)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "can not estimate transform.");
    *exception = &off_1E95AF388;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  v15 = *(unsigned int **)a2[1];
  if (v15)
  {
    v16 = v15 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v22 = v15;
  do
    v18 = __ldxr(v11);
  while (__stxr(v18 + 1, v11));
  v21 = v10;
  sub_1D3E07300(a1, *(unsigned int **)(v8 + 16), (uint64_t *)&v22, &v21, *((_DWORD *)a2 + 4), *((unsigned __int8 *)a2 + 20));
  sub_1D3DB45E8(&v21);
  sub_1D3DC6848(&v22);
  return sub_1D3D6F2E0(&v24);
}

void sub_1D3E08D68()
{
  __break(1u);
}

void sub_1D3E08F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D3DBE3CC((unsigned int **)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D3E08F54(uint64_t a1, char *__dst, char *__src, char *a4)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  int v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;

  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(v7 - v8) < 24)
  {
    v9 = *(char **)a1;
    v10 = ((uint64_t)(v8 - *(_QWORD *)a1) >> 2) + 6;
    if (v10 >> 62)
      sub_1D3D6D4F8();
    v11 = (__dst - v9) >> 2;
    v12 = v7 - (_QWORD)v9;
    v13 = v12 >> 1;
    if (v12 >> 1 <= v10)
      v13 = ((uint64_t)(v8 - *(_QWORD *)a1) >> 2) + 6;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v14 = (unint64_t)sub_1D3D82278(v14);
    else
      v15 = 0;
    v24 = 0;
    v25 = v14 + 4 * v11;
    v26 = v14 + 4 * v15;
    do
    {
      *(_DWORD *)(v25 + v24) = *(_DWORD *)&__src[v24];
      v24 += 4;
    }
    while (v24 != 24);
    v27 = *(char **)a1;
    if (*(char **)a1 == __dst)
    {
      v29 = v14 + 4 * v11;
    }
    else
    {
      v28 = __dst;
      v29 = v14 + 4 * v11;
      do
      {
        v30 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *(_DWORD *)(v29 - 4) = v30;
        v29 -= 4;
      }
      while (v28 != v27);
    }
    v31 = (char *)(v25 + 24);
    v32 = *(_BYTE **)(a1 + 8);
    v33 = v32 - __dst;
    if (v32 != __dst)
      memmove(v31, __dst, v32 - __dst);
    v34 = *(char **)a1;
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = &v31[v33];
    *(_QWORD *)(a1 + 16) = v26;
    if (v34)
      operator delete(v34);
    return;
  }
  v16 = v8 - (_QWORD)__dst;
  if ((uint64_t)(v8 - (_QWORD)__dst) > 23)
  {
    v17 = __src + 24;
    v19 = *(char **)(a1 + 8);
LABEL_16:
    v20 = __dst + 24;
    v21 = v19 - 24;
    v22 = v19;
    if ((unint64_t)(v19 - 24) < v8)
    {
      v22 = v19;
      do
      {
        v23 = *(_DWORD *)v21;
        v21 += 4;
        *(_DWORD *)v22 = v23;
        v22 += 4;
      }
      while ((unint64_t)v21 < v8);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(&v19[-4 * ((v19 - v20) >> 2)], __dst, v19 - v20);
    if (v17 != __src)
      memmove(__dst, __src, v17 - __src);
    return;
  }
  v17 = &__src[v16];
  v18 = a4 - &__src[v16];
  if (a4 != &__src[v16])
    memmove(*(void **)(a1 + 8), &__src[v16], a4 - &__src[v16]);
  v19 = (char *)(v8 + v18);
  *(_QWORD *)(a1 + 8) = v8 + v18;
  if (v16 >= 1)
    goto LABEL_16;
}

_QWORD *sub_1D3E09140(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D3E091B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int **sub_1D3E09210(uint64_t *a1, unsigned int **a2, int a3, unsigned int **a4, int a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v17;
  unsigned int *v18;

  sub_1D3DB5FF8();
  v10 = *a2;
  if (*a2)
  {
    v11 = v10 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v18 = v10;
  v13 = *a4;
  if (*a4)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = v13;
  sub_1D3DB5B40(a1, v10, a3, &v17, a5);
  sub_1D3DB45E8(&v17);
  return sub_1D3D6D10C(&v18);
}

void sub_1D3E092BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  sub_1D3DB45E8(&a9);
  sub_1D3D6D10C(&a10);
  _Unwind_Resume(a1);
}

float sub_1D3E092D8(uint64_t a1, _QWORD *a2, _QWORD *a3, float a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  int v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int *v53;
  int v54;
  float *v55;
  unint64_t v56;
  float *v57;
  float v58;
  int v59;
  uint64_t v60;
  int v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  float *v67;
  int v68;
  float *v69;
  float *v70;
  float *v71;
  unint64_t v72;
  float *v73;
  float *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  int v89;
  float *v90;
  float *v91;
  int v92;
  float v93;
  float *v94;
  float v95;
  unint64_t v96;
  float *v97;
  float v98;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int *v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int __p;
  float *__pa;

  v8 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v9 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v10 = sub_1D3D6D4A0(*(_QWORD **)(a1 + 16), v8, v9);
  v11 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v12 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v13 = v12 - v9;
  if (v12 - v9 >= 0)
    v14 = v12 - v9;
  else
    v14 = v9 - v12;
  if (v11 - v8 >= 0)
    v15 = v11 - v8;
  else
    v15 = v8 - v11;
  if (v14 > v15)
    v16 = v15;
  else
    v16 = v14;
  v109 = v16;
  if (v14 > v15)
    v17 = v11 - v8;
  else
    v17 = v12 - v9;
  __p = v15;
  if (v14 > v15)
    v18 = v14;
  else
    v18 = v15;
  if (v14 <= v15)
    v13 = v11 - v8;
  v100 = v13;
  v101 = v17;
  if (v14 > v15)
    v19 = v11;
  else
    v19 = v12;
  if (v14 <= v15)
  {
    v20 = v9;
  }
  else
  {
    v11 = v12;
    v20 = v8;
  }
  if (v14 > v15)
    v8 = v9;
  if (v8 < v11)
    v21 = 1;
  else
    v21 = -1;
  if (v20 < v19)
    v22 = 1;
  else
    v22 = -1;
  v104 = v22;
  v105 = v19;
  v23 = (int *)operator new(4uLL);
  v24 = v23;
  *v23 = 0x7FFFFFFF;
  v25 = v23 + 1;
  v107 = v21;
  v108 = v11;
  if (v8 == v21 + v11)
  {
    v26 = 0;
    v27 = (unint64_t)(v23 + 1);
LABEL_68:
    v41 = v25 - v24;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 62)
      sub_1D3D6D4F8();
    if ((uint64_t)(v27 - (_QWORD)v24) >> 1 > v42)
      v42 = (uint64_t)(v27 - (_QWORD)v24) >> 1;
    if (v27 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    if (v43)
      v43 = (unint64_t)sub_1D3D82278(v43);
    else
      v44 = 0;
    v45 = (int *)(v43 + 4 * v41);
    v27 = v43 + 4 * v44;
    *v45 = v26;
    v46 = v45;
    if (v25 != v24)
    {
      v46 = v45;
      do
      {
        v47 = *--v25;
        *--v46 = v47;
      }
      while (v25 != v24);
    }
    if (v24)
      operator delete(v24);
    v24 = v46;
    v25 = v45;
    goto LABEL_83;
  }
  v26 = 0;
  v28 = -(int)v18 >> 1;
  v106 = v23 + 1;
  v103 = v14;
  do
  {
    if (v14 <= __p)
      v29 = v8;
    else
      v29 = v20;
    if (v14 <= __p)
      v30 = v20;
    else
      v30 = v8;
    if (((v10 ^ sub_1D3D6D4A0(*(_QWORD **)(a1 + 16), v29, v30)) & 1) != 0)
    {
      if (v25 >= v106)
      {
        v102 = v10;
        v32 = a1;
        v33 = v18;
        v34 = v25 - v24;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          sub_1D3D6D4F8();
        if (((char *)v106 - (char *)v24) >> 1 > v35)
          v35 = ((char *)v106 - (char *)v24) >> 1;
        if ((unint64_t)((char *)v106 - (char *)v24) >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v36 = (unint64_t)sub_1D3D82278(v36);
        else
          v37 = 0;
        v38 = (int *)(v36 + 4 * v34);
        *v38 = v26;
        v31 = v38 + 1;
        while (v25 != v24)
        {
          v39 = *--v25;
          *--v38 = v39;
        }
        v106 = (int *)(v36 + 4 * v37);
        if (v24)
          operator delete(v24);
        v24 = v38;
        v18 = v33;
        a1 = v32;
        v10 = v102;
      }
      else
      {
        *v25 = v26;
        v31 = v25 + 1;
      }
      v10 ^= 1u;
      v26 = 1;
      v25 = v31;
      v14 = v103;
    }
    else
    {
      ++v26;
    }
    v28 += v109;
    if (v28 >= 1)
    {
      if (v20 == v105)
        break;
      v20 += v104;
      v28 -= v18;
    }
    v40 = v8 == v108;
    v8 += v107;
  }
  while (!v40);
  v27 = (unint64_t)v106;
  if (v25 >= v106)
    goto LABEL_68;
  *v25 = v26;
LABEL_83:
  v48 = v25 + 1;
  if ((unint64_t)(v25 + 1) >= v27)
  {
    v50 = v48 - v24;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 62)
      sub_1D3D6D4F8();
    if ((uint64_t)(v27 - (_QWORD)v24) >> 1 > v51)
      v51 = (uint64_t)(v27 - (_QWORD)v24) >> 1;
    if (v27 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v52 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
      v52 = (unint64_t)sub_1D3D82278(v52);
    v53 = (int *)(v52 + 4 * v50);
    *v53 = 0x7FFFFFFF;
    v49 = (char *)(v53 + 1);
    while (v48 != v24)
    {
      v54 = *--v48;
      *--v53 = v54;
    }
    if (v24)
      operator delete(v24);
    v24 = v53;
  }
  else
  {
    v25[1] = 0x7FFFFFFF;
    v49 = (char *)(v25 + 2);
  }
  if ((int)((unint64_t)(v49 - (char *)v24) >> 2) < 3)
  {
    __pa = 0;
    v55 = 0;
    v57 = 0;
  }
  else
  {
    __pa = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = (double)(int)v18 / sqrt((double)(v101 * v101 + v100 * v100));
    v59 = (int)(float)((float)(v58 * a4) * 0.5);
    v60 = 1;
    do
    {
      if (v24[v60 - 1] > v59)
      {
        v61 = v24[v60];
        if (v61 > v59 && v24[v60 + 1] > v59)
        {
          v62 = (float)v61 / v58;
          if ((unint64_t)v57 >= v56)
          {
            v63 = v57 - __pa;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              sub_1D3D6D4F8();
            if ((uint64_t)(v56 - (_QWORD)__pa) >> 1 > v64)
              v64 = (uint64_t)(v56 - (_QWORD)__pa) >> 1;
            if (v56 - (unint64_t)__pa >= 0x7FFFFFFFFFFFFFFCLL)
              v65 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            if (v65)
            {
              v65 = (unint64_t)sub_1D3D82278(v65);
              v57 = v55;
            }
            else
            {
              v66 = 0;
            }
            v67 = (float *)(v65 + 4 * v63);
            *v67 = v62;
            v55 = v67 + 1;
            while (v57 != __pa)
            {
              v68 = *((_DWORD *)v57-- - 1);
              *((_DWORD *)v67-- - 1) = v68;
            }
            v56 = v65 + 4 * v66;
            if (__pa)
              operator delete(__pa);
            __pa = v67;
            v57 = v55;
          }
          else
          {
            *v57++ = v62;
            v55 = v57;
          }
        }
      }
      ++v60;
    }
    while (v60 < (((v49 - (char *)v24) << 30) - 0x100000000) >> 32);
  }
  v69 = __pa;
  if ((int)((unint64_t)((char *)v57 - (char *)__pa) >> 2) < 3)
    goto LABEL_176;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 2;
  if (((((char *)v55 - (char *)__pa) << 30) - 0x100000000) >> 32 > 2)
    v76 = ((((char *)v55 - (char *)__pa) << 30) - 0x100000000) >> 32;
  v77 = 1;
  v110 = v76;
  do
  {
    v78 = __pa[v77];
    if (v78 >= (float)(a4 * 1.5))
    {
      if ((unint64_t)v74 < v75)
      {
        *v74++ = v78;
        goto LABEL_164;
      }
      v83 = v74 - v73;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 62)
LABEL_183:
        sub_1D3D6D4F8();
      if ((uint64_t)(v75 - (_QWORD)v73) >> 1 > v84)
        v84 = (uint64_t)(v75 - (_QWORD)v73) >> 1;
      if (v75 - (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
        v85 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      if (v85)
        v85 = (unint64_t)sub_1D3D82278(v85);
      else
        v86 = 0;
      v90 = (float *)(v85 + 4 * v83);
      *v90 = v78;
      v91 = v90 + 1;
      while (v74 != v73)
      {
        v92 = *((_DWORD *)v74-- - 1);
        *((_DWORD *)v90-- - 1) = v92;
      }
      v75 = v85 + 4 * v86;
      if (v73)
        operator delete(v73);
      v73 = v90;
      v74 = v91;
    }
    else
    {
      if ((unint64_t)v70 < v72)
      {
        *v70++ = v78;
        goto LABEL_164;
      }
      v79 = v70 - v71;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 62)
        goto LABEL_183;
      if ((uint64_t)(v72 - (_QWORD)v71) >> 1 > v80)
        v80 = (uint64_t)(v72 - (_QWORD)v71) >> 1;
      if (v72 - (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      if (v81)
        v81 = (unint64_t)sub_1D3D82278(v81);
      else
        v82 = 0;
      v87 = (float *)(v81 + 4 * v79);
      *v87 = v78;
      v88 = v87 + 1;
      while (v70 != v71)
      {
        v89 = *((_DWORD *)v70-- - 1);
        *((_DWORD *)v87-- - 1) = v89;
      }
      v72 = v81 + 4 * v82;
      if (v71)
        operator delete(v71);
      v70 = v88;
      v71 = v87;
    }
    v76 = v110;
LABEL_164:
    ++v77;
  }
  while (v77 != v76);
  if (v70 == v71)
  {
    v71 = v70;
    v69 = __pa;
    if (v73)
      goto LABEL_173;
  }
  else
  {
    v93 = 0.0;
    v94 = v71;
    do
    {
      v95 = *v94++;
      v93 = v93 + v95;
    }
    while (v94 != v70);
    v96 = (unint64_t)((char *)v70 - (char *)v71) >> 2;
    a4 = v93 / (float)(int)v96;
    v69 = __pa;
    if (v73 != v74)
    {
      v97 = v73;
      do
      {
        v98 = *v97++;
        LODWORD(v96) = (int)(float)(roundf(v98 / a4) + (float)(int)v96);
        v93 = v93 + v98;
      }
      while (v97 != v74);
      a4 = v93 / (float)(int)v96;
    }
    if (v73)
LABEL_173:
      operator delete(v73);
  }
  if (v71)
    operator delete(v71);
LABEL_176:
  if (v69)
    operator delete(v69);
  if (v24)
    operator delete(v24);
  return a4;
}

void sub_1D3E09A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  void *v16;

  if (__p)
    operator delete(__p);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_1D3E09AA4(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, int a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  float (*v15)(uint64_t);
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  int v21;
  int v22;
  float v23;

  v10 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v11 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v12 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v13 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v14 = *a3;
  v15 = *(float (**)(uint64_t))(*(_QWORD *)*a3 + 16);
  if (a5)
  {
    sub_1D3E09C7C(a1, v10, v11, v12, v13, a4);
    v16 = (int)v15(v14);
    v17 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
    v18 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    v19 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    sub_1D3E09C7C(a1, v16, v17, v18, (int)v19, a4);
  }
  else
  {
    sub_1D3E09DE4(a1, v10, v11, v12, v13, a4);
    v20 = (int)v15(v14);
    v21 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
    v22 = (int)(*(float (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
    v23 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    sub_1D3E09DE4(a1, v20, v21, v22, (int)v23, a4);
  }
}

float sub_1D3E09C7C(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;

  if (a5 - a3 >= 0)
    v6 = a5 - a3;
  else
    v6 = a3 - a5;
  if (a4 - a2 >= 0)
    v7 = a4 - a2;
  else
    v7 = a2 - a4;
  if (v6 > v7)
    v8 = v7;
  else
    v8 = v6;
  v34 = v8;
  if (v6 > v7)
    v9 = a4 - a2;
  else
    v9 = a5 - a3;
  if (v6 > v7)
    v10 = v6;
  else
    v10 = v7;
  if (v6 > v7)
    v11 = a4;
  else
    v11 = a5;
  if (v6 > v7)
    v12 = a5;
  else
    v12 = a4;
  if (v6 > v7)
    v13 = a2;
  else
    v13 = a3;
  if (v6 > v7)
    v14 = a3;
  else
    v14 = a2;
  if (v14 < v12)
    v15 = 1;
  else
    v15 = -1;
  if (v13 < v11)
    v16 = 1;
  else
    v16 = -1;
  v32 = v16;
  v33 = v11;
  v17 = v15 + v12;
  v18 = v15 + v12 - v14;
  if (v17 == v14)
    return NAN;
  v29 = v18;
  v30 = v9;
  v19 = 0;
  v31 = v10;
  v20 = (signed int)-v10 >> 1;
  v21 = *(_QWORD **)(a1 + 16);
  v27 = v14;
  v28 = v13;
  do
  {
    if (v6 <= v7)
      v22 = v14;
    else
      v22 = v13;
    if (v6 <= v7)
      v23 = v13;
    else
      v23 = v14;
    if ((((v19 == 1) ^ a6 ^ sub_1D3D6D4A0(v21, v22, v23)) & 1) == 0)
    {
      if (v19 == 2)
      {
        v24 = v14 - v27;
        v25 = v13 - v28;
        return sqrt((double)(v24 * v24 + v25 * v25));
      }
      ++v19;
    }
    v20 += v34;
    if (v20 >= 1)
    {
      if (v13 == v33)
        break;
      v13 += v32;
      v20 -= v31;
    }
    v14 += v15;
  }
  while (v17 != v14);
  if (v19 != 2)
    return NAN;
  v25 = v29;
  v24 = v30;
  return sqrt((double)(v24 * v24 + v25 * v25));
}

void sub_1D3E09DE4(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  int v26;

  if (sub_1D3E09C7C(a1, a2, a3, a4, a5, a6) > 0.0)
  {
    v12 = a2 - a4 + a2;
    v13 = *(_DWORD **)(a1 + 16);
    v14 = v13[14];
    v15 = -v14;
    v16 = v13[8];
    v17 = v14 - 1;
    v18 = v13[4];
    v19 = (float)a2;
    if (v12 < 0)
    {
      v12 = 0;
      v21 = v19 / (float)(a4 - a2);
    }
    else
    {
      v20 = v18 & v17 | v16 & v15;
      if (v12 >= v20)
      {
        v12 = v20 - 1;
        v21 = (float)(v20 - 1 - a2) / (float)(a2 - a4);
      }
      else
      {
        v21 = 1.0;
      }
    }
    v22 = (int)(float)((float)a3 + (float)((float)(a3 - a5) * v21));
    if (v22 < 0)
    {
      v25 = a3 - v22;
      v22 = 0;
      v24 = (float)a3 / (float)v25;
    }
    else
    {
      v23 = v16 & v17 | v18 & v15;
      if (v22 >= v23)
      {
        v26 = v22 - a3;
        v22 = v23 - 1;
        v24 = (float)(v23 - 1 - a3) / (float)v26;
      }
      else
      {
        v24 = 1.0;
      }
    }
    sub_1D3E09C7C(a1, a2, a3, (int)(float)(v19 + (float)((float)(v12 - a2) * v24)), v22, a6);
  }
}

float sub_1D3E09F5C(uint64_t a1, int a2, signed int a3)
{
  unint64_t v3;
  unsigned int v4;
  float result;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int v9;

  v3 = (a3 - 1);
  v4 = v3 >> 1;
  result = (float)a2;
  if ((int)((v3 >> 1) + 1) < a3)
  {
    v6 = v3 >> 1;
    v7 = ~(v3 >> 1) + a3;
    v8 = (int *)(a1 + 4 * v6 + 4);
    do
    {
      v9 = *v8++;
      result = result - (float)v9;
      --v7;
    }
    while (v7);
  }
  if ((a3 & 0x80000001) == 1)
    return result + (float)((float)*(int *)(a1 + 4 * v4) * -0.5);
  return result;
}

uint64_t sub_1D3E09FC4(uint64_t result, __n128 a2)
{
  uint64_t v2;
  int v3;
  int v4;
  float *v5;
  char v6;
  int v7;
  uint64_t i;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;

  v2 = 0;
  v3 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  a2.n128_u32[0] = -10.0;
  while (1)
  {
    v4 = *(_DWORD *)(result + v2);
    if (!v4)
      break;
    v3 += v4;
    v2 += 4;
    if (v2 == 20)
    {
      if (v3 >= 5)
      {
        result = MEMORY[0x1E0C80A78](a2);
        for (i = 0; i != 20; i += 4)
          *(float *)((char *)&v21 + i) = (float)*(int *)(result + i);
        v9 = (float)v7;
        if ((v6 & 1) != 0
          && ((v10 = (float)(v9 - v21) / 6.0, v21 >= (float)(v10 + v10))
           && (v11 = v10 * 0.5, vabds_f32(v10, v22) < (float)(v10 * 0.5))
           && fabsf(-(float)(v23 - (float)(v10 * 3.0))) < (float)(v11 + v11)
           && vabds_f32(v10, v24) < v11
           && vabds_f32(v10, v25) < v11
           || (v10 = (float)(v9 - v25) / 6.0, v12 = v10 * 0.5, vabds_f32(v10, v21) < (float)(v10 * 0.5))
           && vabds_f32(v10, v22) < v12
           && fabsf(-(float)(v23 - (float)(v10 * 3.0))) < (float)(v12 + v12)
           && ((v13 = vabds_f32(v10, v24), v25 >= (float)(v10 + v10)) ? (v14 = v13 < v12) : (v14 = 0), v14)))
        {
          if (v5)
            *v5 = v10;
        }
        else
        {
          v15 = 0;
          v16 = 0.0;
          do
          {
            v16 = v16 + (float)(*(float *)((char *)&v21 + v15 * 4) * *(float *)&dword_1D3E6EB08[v15]);
            ++v15;
          }
          while (v15 != 5);
          v17 = 0;
          v18 = 0.0;
          do
          {
            v18 = v18 + (float)(*(float *)((char *)&v21 + v17) * *(float *)((char *)&v21 + v17));
            v17 += 4;
          }
          while (v17 != 20);
          v19 = 0;
          v20 = 0.0;
          do
          {
            v20 = v20 + (float)(*(float *)&dword_1D3E6EB08[v19] * *(float *)&dword_1D3E6EB08[v19]);
            ++v19;
          }
          while (v19 != 5);
          if (v5)
            *v5 = v9 / 7.0;
        }
      }
      return result;
    }
  }
  return result;
}

float sub_1D3E0A1DC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  float result;
  int v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t i;
  float v14;
  uint64_t j;
  float v16;
  uint64_t k;
  float v19;
  uint64_t m;
  float v21;
  uint64_t n;
  float v23;
  uint64_t ii;
  uint64_t v25;
  float v26;
  float v27;
  _BYTE v28[36];
  _OWORD v29[2];
  int v30;
  uint64_t v31;

  v1 = 0;
  v2 = 0;
  v31 = *MEMORY[0x1E0C80C00];
  result = -10.0;
  while (1)
  {
    v4 = *(_DWORD *)(a1 + v1);
    if (!v4)
      break;
    v2 += v4;
    v1 += 4;
    if (v1 == 36)
    {
      if (v2 >= 9)
      {
        v5 = 0;
        v30 = 1065353216;
        v29[0] = xmmword_1D3E6EB1C;
        v29[1] = unk_1D3E6EB2C;
        do
        {
          *(float *)&v28[v5] = (float)*(int *)(a1 + v5);
          v5 += 4;
        }
        while (v5 != 36);
        v6 = 0.0;
        v7 = 1u;
        do
        {
          v6 = v6 + (float)(*(float *)&dword_1D3E6EB40[v7] * *(float *)&dword_1D3E6EB40[v7]);
          ++v7;
        }
        while (v7 != 8);
        v8 = 0.0;
        v9 = 1u;
        do
        {
          v8 = v8 + (float)(*(float *)((char *)v29 + v9 * 4) * *(float *)&dword_1D3E6EB40[v9]);
          ++v9;
        }
        while (v9 != 8);
        v10 = 0.0;
        v11 = 1u;
        do
        {
          v10 = v10 + (float)(*(float *)&v28[v11 * 4] * *(float *)&dword_1D3E6EB40[v11]);
          ++v11;
        }
        while (v11 != 8);
        v12 = 0.0;
        for (i = 4; i != 32; i += 4)
          v12 = v12 + (float)(*(float *)&v28[i] * *(float *)&v28[i]);
        v14 = 0.0;
        for (j = 4; j != 32; j += 4)
          v14 = v14 + (float)(*(float *)&v28[j] * *(float *)((char *)v29 + j));
        v16 = (float)((float)(v10 * v14) - (float)(v8 * v12)) / (float)((float)(v6 * v12) - (float)(v10 * v10));
        result = -10.0;
        if (v16 >= -0.5 && v16 <= 0.5)
        {
          for (k = 0; k != 9; ++k)
            *(float *)((char *)v29 + k * 4) = *(float *)((char *)v29 + k * 4)
                                            + (float)(v16 * *(float *)&dword_1D3E6EB40[k]);
          v19 = 0.0;
          for (m = 4; m != 32; m += 4)
            v19 = v19 + (float)(*(float *)&v28[m] * *(float *)((char *)v29 + m));
          v21 = 0.0;
          for (n = 4; n != 32; n += 4)
            v21 = v21 + (float)(*(float *)&v28[n] * *(float *)&v28[n]);
          v23 = 0.0;
          for (ii = 4; ii != 32; ii += 4)
            v23 = v23 + (float)(*(float *)((char *)v29 + ii) * *(float *)((char *)v29 + ii));
          v25 = 0;
          v26 = -v21;
          v27 = 0.0;
          do
          {
            v27 = v27 + (float)(*(float *)&v28[v25] * *(float *)&v28[v25]);
            v25 += 4;
          }
          while (v25 != 36);
          return (float)((float)(v23 * v26) + (float)(v19 * v19)) / (float)(v27 + v27);
        }
      }
      return result;
    }
  }
  return result;
}

float sub_1D3E0A424(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t i;
  int v4;
  uint64_t j;
  int v6;
  uint64_t k;
  int v8;
  uint64_t m;
  float result;

  v2 = 0;
  for (i = 4; i != 32; i += 4)
    v2 += *(_DWORD *)(a1 + i) * *(_DWORD *)(a1 + i);
  v4 = 0;
  for (j = 4; j != 32; j += 4)
    v4 += *(_DWORD *)(a2 + j);
  v6 = 0;
  for (k = 4; k != 32; k += 4)
    v6 += *(_DWORD *)(a2 + k) * *(_DWORD *)(a2 + k);
  v8 = 0;
  for (m = 4; m != 32; m += 4)
    v8 += *(_DWORD *)(a1 + m);
  result = (float)((float)(v4 * v2) - (float)(v8 * v6)) / (float)((float)(v4 * v2) + (float)(v8 * v6));
  if (result > 0.0)
    return -result;
  return result;
}

float sub_1D3E0A4C0(_QWORD *a1, int a2, uint64_t a3, unint64_t a4, int *a5, unsigned int a6, int a7)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v12 = (a6 - 1) >> 1;
  v35 = a6 - 1;
  v13 = a7 ^ (((a6 - 1) & 2) >> 1);
  v36 = a1[4] & (a1[7] - 1) | a1[2] & -a1[7];
  bzero(a5, 4 * a6);
  v14 = v12;
  LODWORD(v15) = a2;
  v37 = v12;
  while (1)
  {
    if ((v15 & 0x80000000) != 0)
    {
LABEL_24:
      if (v14 > 1)
        return NAN;
    }
    else
    {
      v16 = (int)v14 >= 0 ? v14 & 1 : -(v14 & 1);
      v17 = v14 == v12 || v14 == 0;
      v18 = !v17;
      v15 = v15;
      while (1)
      {
        v19 = sub_1D3D6D4A0(a1, a3, v15);
        if (v16 == v13)
        {
          if ((v19 & 1) == 0)
            break;
        }
        else if ((v19 & 1) != 0)
        {
          break;
        }
        v20 = a5[v14];
        if (v20 > a4 && v18)
          break;
        a5[v14] = v20 + 1;
        v22 = v15-- <= 0;
        if (v22)
        {
          LODWORD(v15) = -1;
          v12 = v37;
          goto LABEL_24;
        }
      }
      v12 = v37;
    }
    if (v14 >= 1 && v14 < v12 && a5[v14] > a4)
      return NAN;
    v22 = v14-- <= 0;
    if (v22)
    {
      v23 = a2 + 1;
      v24 = a6 - 2;
      v25 = v12;
      while (1)
      {
        if (v23 < (int)v36)
        {
          if ((v25 & 0x80000000) == 0)
            v26 = v25 & 1;
          else
            v26 = -(v25 & 1);
          v28 = v25 != v12 && v25 != v35;
          v29 = v23;
          while (1)
          {
            v30 = sub_1D3D6D4A0(a1, a3, v29);
            if (v26 == v13)
            {
              if ((v30 & 1) == 0)
                break;
            }
            else if ((v30 & 1) != 0)
            {
              break;
            }
            v31 = a5[v25];
            if (v31 > a4 && v28)
              break;
            a5[v25] = v31 + 1;
            if ((int)v36 == ++v29)
            {
              v23 = v36;
              goto LABEL_55;
            }
          }
          v23 = v29;
LABEL_55:
          v12 = v37;
          v24 = a6 - 2;
        }
        if (v25 < v24 && v23 == (_DWORD)v36 || v25 > v12 && v25 < v35 && a5[v25] > a4)
          return NAN;
        if ((_DWORD)++v25 == a6)
          return sub_1D3E09F5C((uint64_t)a5, v23, a6);
      }
    }
  }
}

float sub_1D3E0A728(_QWORD *a1, int a2, uint64_t a3, unint64_t a4, int *a5, unsigned int a6, int a7)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v12 = (a6 - 1) >> 1;
  v35 = a6 - 1;
  v13 = a7 ^ (((a6 - 1) & 2) >> 1);
  v36 = a1[2] & (a1[7] - 1) | a1[4] & -a1[7];
  bzero(a5, 4 * a6);
  v14 = v12;
  LODWORD(v15) = a2;
  v37 = v12;
  while (1)
  {
    if ((v15 & 0x80000000) != 0)
    {
LABEL_24:
      if (v14 > 1)
        return NAN;
    }
    else
    {
      v16 = (int)v14 >= 0 ? v14 & 1 : -(v14 & 1);
      v17 = v14 == v12 || v14 == 0;
      v18 = !v17;
      v15 = v15;
      while (1)
      {
        v19 = sub_1D3D6D4A0(a1, v15, a3);
        if (v16 == v13)
        {
          if ((v19 & 1) == 0)
            break;
        }
        else if ((v19 & 1) != 0)
        {
          break;
        }
        v20 = a5[v14];
        if (v20 > a4 && v18)
          break;
        a5[v14] = v20 + 1;
        v22 = v15-- <= 0;
        if (v22)
        {
          LODWORD(v15) = -1;
          v12 = v37;
          goto LABEL_24;
        }
      }
      v12 = v37;
    }
    if (v14 >= 1 && v14 < v12 && a5[v14] > a4)
      return NAN;
    v22 = v14-- <= 0;
    if (v22)
    {
      v23 = a2 + 1;
      v24 = a6 - 2;
      v25 = v12;
      while (1)
      {
        if (v23 < (int)v36)
        {
          if ((v25 & 0x80000000) == 0)
            v26 = v25 & 1;
          else
            v26 = -(v25 & 1);
          v28 = v25 != v12 && v25 != v35;
          v29 = v23;
          while (1)
          {
            v30 = sub_1D3D6D4A0(a1, v29, a3);
            if (v26 == v13)
            {
              if ((v30 & 1) == 0)
                break;
            }
            else if ((v30 & 1) != 0)
            {
              break;
            }
            v31 = a5[v25];
            if (v31 > a4 && v28)
              break;
            a5[v25] = v31 + 1;
            if ((int)v36 == ++v29)
            {
              v23 = v36;
              goto LABEL_55;
            }
          }
          v23 = v29;
LABEL_55:
          v12 = v37;
          v24 = a6 - 2;
        }
        if (v25 < v24 && v23 == (_DWORD)v36 || v25 > v12 && v25 < v35 && a5[v25] > a4)
          return NAN;
        if ((_DWORD)++v25 == a6)
          return sub_1D3E09F5C((uint64_t)a5, v23, a6);
      }
    }
  }
}

float sub_1D3E0A990(uint64_t a1, int a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __n128 a9, char a10)
{
  uint64_t v10;
  float v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  BOOL v40;
  char v41;
  unint64_t v42;
  __n128 v44;
  float v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v52;
  _QWORD *v53;
  char v54;
  unint64_t v55;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  unint64_t v66;
  float v68;
  uint64_t v69;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v77;
  uint64_t v78;

  v10 = a6;
  v13 = a9.n128_f32[0];
  v14 = 0;
  v77 = (a7 - 1);
  v15 = a8 ^ (((a7 - 1) & 2) >> 1);
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v18 = -v17;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v20 = v19 & -v17;
  LODWORD(v17) = v17 - 1;
  v21 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v74 = v21 & v17 | v20;
  v73 = v19 & v17 | v21 & v18;
  do
  {
    *(_DWORD *)(a5 + 4 * v14) = 0;
    *(_DWORD *)(a6 + 4 * v14++) = 0;
  }
  while (a7 != v14);
  a9.n128_u32[0] = -1.0;
  v22 = v13 + -1.0;
  v23 = v77 >> 1;
  v78 = v23;
  v24 = a3;
  LODWORD(v25) = a2;
  while (1)
  {
    if ((v25 & 0x80000000) == 0 && (v24 & 0x80000000) == 0)
    {
      if ((int)v23 >= 0)
        v26 = v23 & 1;
      else
        v26 = -(v23 & 1);
      v28 = v23 != v78 && v23 != 0;
      v29 = v24;
      v25 = v25;
      while (1)
      {
        v30 = sub_1D3D6D4A0(v16, v29, v25);
        if (v26 == v15)
        {
          if ((v30 & 1) == 0)
            break;
        }
        else if ((v30 & 1) != 0)
        {
          break;
        }
        v31 = *(int *)(a5 + 4 * v23);
        if (v31 > a4 && v28)
          break;
        *(_DWORD *)(a5 + 4 * v23) = v31 + 1;
        v24 = v29 - 1;
        v33 = v25-- < 1;
        if (!v33)
        {
          v33 = v29-- <= 0;
          if (!v33)
            continue;
        }
        goto LABEL_29;
      }
      v24 = v29;
    }
LABEL_29:
    if (v23 > 1 && ((v24 | v25) & 0x80000000) != 0
      || v23 >= 1 && v23 < v78 && *(int *)(a5 + 4 * v23) > a4)
    {
      return v22;
    }
    v33 = v23-- <= 0;
    if (v33)
    {
      v69 = v10;
      LODWORD(v34) = a2 + 1;
      LODWORD(v10) = a3 + 1;
      v75 = (a7 - 2);
      v36 = v73;
      v35 = v74;
      v37 = v77 >> 1;
      while (1)
      {
        if ((int)v34 < v35 && (int)v10 < v36)
        {
          if ((v37 & 0x80000000) == 0)
            v38 = v37 & 1;
          else
            v38 = -(v37 & 1);
          v40 = v37 != v78 && v37 != v77;
          v10 = (int)v10;
          v34 = (int)v34;
          do
          {
            v41 = sub_1D3D6D4A0(v16, v10, v34);
            if (v38 == v15)
            {
              if ((v41 & 1) == 0)
                break;
            }
            else if ((v41 & 1) != 0)
            {
              break;
            }
            v42 = *(int *)(a5 + 4 * v37);
            if (v42 > a4 && v40)
              break;
            *(_DWORD *)(a5 + 4 * v37) = v42 + 1;
            ++v34;
            ++v10;
            if (v34 >= v74)
              break;
          }
          while (v10 < v73);
          v36 = v73;
          v35 = v74;
        }
        if (v37 < v75 && ((_DWORD)v34 == v35 || (_DWORD)v10 == v36)
          || v37 > v78 && v37 < v77 && *(int *)(a5 + 4 * v37) > a4)
        {
          return v22;
        }
        if ((_DWORD)++v37 == a7)
        {
          if (a10)
            v44.n128_f32[0] = sub_1D3E0A1DC(a5);
          else
            sub_1D3E09FC4(a5, a9);
          v45 = v44.n128_f32[0];
          if (v44.n128_f32[0] >= v13)
          {
            v47 = v77 >> 1;
            LODWORD(v49) = a2;
            LODWORD(v48) = a3;
            while (1)
            {
              if ((v49 & 0x80000000) == 0 && (int)v48 < v36)
              {
                if ((int)v47 >= 0)
                  v50 = v47 & 1;
                else
                  v50 = -(v47 & 1);
                v52 = v47 != v78 && v47 != 0;
                v48 = (int)v48;
                v49 = v49;
                v53 = *(_QWORD **)a1;
                do
                {
                  v54 = sub_1D3D6D4A0(v53, v48, v49);
                  if (v50 == v15)
                  {
                    if ((v54 & 1) == 0)
                      break;
                  }
                  else if ((v54 & 1) != 0)
                  {
                    break;
                  }
                  v55 = *(int *)(v69 + 4 * v47);
                  if (v55 > a4 && v52)
                    break;
                  *(_DWORD *)(v69 + 4 * v47) = v55 + 1;
                  ++v48;
                  v33 = v49-- < 1;
                  if (v33)
                    break;
                }
                while (v48 < v73);
                v36 = v73;
                v35 = v74;
              }
              if (v47 > 1 && ((v49 & 0x80000000) != 0 || (_DWORD)v48 == v36)
                || v47 >= 1 && v47 < v78 && *(int *)(v69 + 4 * v47) > a4)
              {
                break;
              }
              v33 = v47-- <= 0;
              if (v33)
              {
                v57 = a3 - 1;
                v58 = v77 >> 1;
                LODWORD(v59) = a2 + 1;
                while (1)
                {
                  if ((int)v59 < v35 && (v57 & 0x80000000) == 0)
                  {
                    if ((v58 & 0x80000000) == 0)
                      v60 = v58 & 1;
                    else
                      v60 = -(v58 & 1);
                    v62 = v58 != v78 && v58 != v77;
                    v63 = v57;
                    v59 = (int)v59;
                    v64 = *(_QWORD **)a1;
                    while (1)
                    {
                      v65 = sub_1D3D6D4A0(v64, v63, v59);
                      if (v60 == v15)
                      {
                        if ((v65 & 1) == 0)
                          break;
                      }
                      else if ((v65 & 1) != 0)
                      {
                        break;
                      }
                      v66 = *(int *)(v69 + 4 * v58);
                      if (v66 > a4 && v62)
                        break;
                      *(_DWORD *)(v69 + 4 * v58) = v66 + 1;
                      ++v59;
                      v57 = v63 - 1;
                      if (v59 < v74)
                      {
                        v33 = v63-- <= 0;
                        if (!v33)
                          continue;
                      }
                      goto LABEL_130;
                    }
                    v57 = v63;
LABEL_130:
                    v35 = v74;
                  }
                  if (v58 < v75 && ((_DWORD)v59 == v35 || (v57 & 0x80000000) != 0)
                    || v58 > v78 && v58 < v77 && *(int *)(v69 + 4 * v58) > a4)
                  {
                    return v22;
                  }
                  if ((_DWORD)++v58 == a7)
                  {
                    if (a10)
                      v68 = sub_1D3E0A1DC(v69);
                    else
                      sub_1D3E09FC4(v69, v44);
                    return v45 + v68;
                  }
                }
              }
            }
          }
          return v22;
        }
      }
    }
  }
}

unsigned int **sub_1D3E0AEA0(unsigned int **a1, _QWORD **a2, int *a3, uint64_t a4, int a5, unint64_t a6, int a7, float a8, float a9)
{
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  float v22;
  __n128 v23;
  float v24;
  __n128 v25;
  BOOL v26;
  float v27;
  float v28;
  __n128 v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  float v33;
  unsigned int *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  int v43[10];
  float v44;
  float v45;
  unsigned int *v46[2];

  v46[1] = *(unsigned int **)MEMORY[0x1E0C80C00];
  v18 = operator new();
  *(_DWORD *)(v18 + 8) = 0;
  v19 = (unsigned int *)(v18 + 8);
  *(_QWORD *)v18 = &off_1E95AF2C0;
  *(_OWORD *)(v18 + 12) = xmmword_1D3E82070;
  *(_DWORD *)(v18 + 28) = 1;
  *(_BYTE *)(v18 + 32) = 0;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v46[0] = (unsigned int *)v18;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v21 = a3[2];
  if (*a3 >= 0)
    v22 = (float)((float)((float)(int)a6 - (float)a3[3]) - (float)a3[4]) + (float)((float)(int)v21 * -0.5);
  else
    v22 = (float)a6;
  v23.n128_f32[0] = sub_1D3E0A4C0(*a2, a5, (unint64_t)v22, v21, (int *)a4, 5u, a7);
  v24 = v23.n128_f32[0];
  v45 = 0.0;
  sub_1D3E09FC4(a4, v23);
  v26 = v25.n128_f32[0] == 1.0e10;
  if (v25.n128_f32[0] == 1.0e10)
  {
    v25.n128_u32[0] = 2.5;
    v27 = a8 / 2.5;
    goto LABEL_9;
  }
  v27 = v25.n128_f32[0];
  if (v25.n128_f32[0] > a8)
  {
LABEL_9:
    MEMORY[0x1E0C80A78](v25);
    v28 = sub_1D3E0A728(*a2, (unint64_t)v22, (unint64_t)v24, a3[2], v43, 5u, a7);
    v29.n128_f32[0] = vabds_f32(v28, v22);
    if (v29.n128_f32[0] > (float)(v45 * 1.5))
    {
      *a1 = 0;
      v30 = v46[0];
      if (v46[0])
      {
        v31 = v46[0] + 2;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      *a1 = v30;
      return sub_1D3DC2944(v46);
    }
    v44 = 0.0;
    sub_1D3E09FC4((uint64_t)v43, v29);
    if (v33 == 1.0e10)
    {
      v26 = 1;
      v33 = a8 / 2.5;
    }
    else if (v33 <= a8)
    {
      goto LABEL_23;
    }
    v36 = v27 + v33;
    v37 = v45 + v44;
    v38 = v36
        + (float)(a9
                * (float)((float)((float)(v37 * v37)
                                / (float)((float)((float)(v44 * v44) + (float)(v45 * v45))
                                        + (float)((float)(v44 * v44) + (float)(v45 * v45))))
                        + -1.0));
    if (v38 > a8)
    {
      v39 = (unsigned int *)operator new();
      v39[2] = 0;
      *((float *)v39 + 3) = v28;
      *((float *)v39 + 4) = v24;
      *(_QWORD *)v39 = &off_1E95AF2C0;
      *((float *)v39 + 5) = v37 * 0.5;
      *((float *)v39 + 6) = v38;
      v39[7] = 1;
      *((_BYTE *)v39 + 32) = v26;
      goto LABEL_24;
    }
LABEL_23:
    *a1 = 0;
    v39 = v46[0];
    if (!v46[0])
    {
LABEL_26:
      *a1 = v39;
      return sub_1D3DC2944(v46);
    }
LABEL_24:
    v40 = v39 + 2;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    goto LABEL_26;
  }
  *a1 = 0;
  if (v46[0])
  {
    v34 = v46[0] + 2;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *a1 = v46[0];
  return sub_1D3DC2944(v46);
}

void sub_1D3E0B200(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3DC2944((unsigned int **)(v1 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_1D3E0B214(uint64_t a1, unsigned int **a2, unsigned int *a3)
{
  float v4;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  float v30;
  int v31;
  float v32;
  int v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v51;
  unsigned int *v52[2];
  unsigned int *v53;
  unint64_t v54;
  uint64_t *v55;

  v4 = *((float *)*a2 + 5);
  if (v4 > 0.0)
  {
    v7 = (*(float (**)(unsigned int *))(*(_QWORD *)*a2 + 16))(*a2);
    (*(void (**)(unsigned int *))(*(_QWORD *)*a2 + 24))(*a2);
    v9 = *((_QWORD *)a3 + 1);
    v10 = v9 - *(_QWORD *)a3;
    if (v9 == *(_QWORD *)a3)
    {
LABEL_12:
      v21 = *((_QWORD *)a3 + 2);
      if (v9 >= v21)
      {
        v23 = (uint64_t)(v9 - *(_QWORD *)a3) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          sub_1D3D6D4F8();
        v24 = v21 - *(_QWORD *)a3;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v55 = (uint64_t *)(a3 + 4);
        if (v26)
          v26 = (unint64_t)sub_1D3D6D8A0(v26);
        else
          v27 = 0;
        v44 = (unsigned int *)(v26 + 8 * v23);
        v52[0] = (unsigned int *)v26;
        v52[1] = v44;
        v53 = v44;
        v54 = v26 + 8 * v27;
        *(_QWORD *)v44 = 0;
        v45 = *a2;
        v46 = v44;
        if (*a2)
        {
          v47 = v45 + 2;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v46 = v44;
          if (*(_QWORD *)v44)
          {
            sub_1D3D6D13C(*(unsigned int **)v44);
            v46 = v53;
          }
        }
        *(_QWORD *)v44 = v45;
        v53 = v46 + 2;
        sub_1D3DEE430(a3, v52);
        v22 = *((_QWORD *)a3 + 1);
        sub_1D3DEE52C((uint64_t)v52);
      }
      else
      {
        sub_1D3DEE3CC(a3, a2);
        v22 = v9 + 8;
      }
      *((_QWORD *)a3 + 1) = v22;
      v49 = *(_QWORD *)(a1 + 112);
      if (v49)
        (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v49 + 16))(v49, *a2);
    }
    else
    {
      v11 = v8;
      v12 = 0;
      v13 = *((float *)*a2 + 6);
      v14 = *((_BYTE *)*a2 + 32);
      v15 = v10 >> 3;
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      while (1)
      {
        v17 = *(_QWORD *)a3;
        v52[0] = 0;
        v18 = *(unsigned int **)(v17 + 8 * v12);
        if (v18)
        {
          v19 = v18 + 2;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v52[0] = v18;
        if (sub_1D3DDE244((float *)v18, v4, v11, v7))
          break;
        sub_1D3DC2944(v52);
        if (++v12 == v16)
        {
          v9 = *((_QWORD *)a3 + 1);
          goto LABEL_12;
        }
      }
      v28 = v52[0];
      v29 = v52[0][7];
      v30 = (*(float (**)(unsigned int *))(*(_QWORD *)v52[0] + 16))(v52[0]);
      v31 = v28[7];
      v32 = (*(float (**)(unsigned int *))(*(_QWORD *)v28 + 24))(v28);
      v33 = v28[7];
      v34 = *((float *)v28 + 5);
      v35 = *((float *)v28 + 6);
      v36 = operator new();
      v37 = v36;
      v38 = *((_BYTE *)v28 + 32);
      *(_DWORD *)(v36 + 8) = 0;
      v39 = (unsigned int *)(v36 + 8);
      *(float *)(v36 + 12) = (float)(v7 + (float)((float)v29 * v30)) / (float)(v29 + 1);
      *(float *)(v36 + 16) = (float)(v11 + (float)((float)v31 * v32)) / (float)(v29 + 1);
      *(_QWORD *)v36 = &off_1E95AF2C0;
      *(float *)(v36 + 20) = (float)(v4 + (float)((float)v33 * v34)) / (float)(v29 + 1);
      *(float *)(v36 + 24) = (float)(v13 + (float)((float)v33 * v35)) / (float)(v29 + 1);
      *(_DWORD *)(v36 + 28) = v29 + 1;
      *(_BYTE *)(v36 + 32) = v38 | v14;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v51 = (unsigned int *)v36;
      v41 = *(_QWORD *)a3;
      do
        v42 = __ldxr(v39);
      while (__stxr(v42 + 1, v39));
      v43 = *(unsigned int **)(v41 + 8 * v12);
      if (v43)
        sub_1D3D6D13C(v43);
      *(_QWORD *)(v41 + 8 * v12) = v37;
      sub_1D3DC2944(&v51);
      sub_1D3DC2944(v52);
    }
  }
  return v4 > 0.0;
}

void sub_1D3E0B530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  sub_1D3DC2944(&a9);
  sub_1D3DC2944(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E0B568(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;

  *(_QWORD *)a1 = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *(unsigned int **)a1;
    if (*(_QWORD *)a1)
      sub_1D3D6D13C(v8);
  }
  *(_QWORD *)a1 = v5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  v9 = *a3;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *(unsigned int **)(a1 + 112);
    if (v12)
      sub_1D3D6D13C(v12);
  }
  *(_QWORD *)(a1 + 112) = v9;
  return a1;
}

void sub_1D3E0B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 80);
  sub_1D3D7FB84(&a10);
  a10 = (void **)(v10 + 56);
  sub_1D3DE98F8(&a10);
  a10 = (void **)(v10 + 32);
  sub_1D3D7FB84(&a10);
  sub_1D3DE98F8(&a10);
  sub_1D3D6D10C((unsigned int **)v10);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E0B678(uint64_t a1, _QWORD *a2, float a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v9;

  sub_1D3DB93EC((uint64_t *)&v9, -a3, -a3, -a3, a3, a3, a3, a3, -a3, COERCE_FLOAT(*a2), COERCE_FLOAT(HIDWORD(*a2)), COERCE_FLOAT(a2[1]), COERCE_FLOAT(HIDWORD(a2[1])), COERCE_FLOAT(a2[2]), COERCE_FLOAT(HIDWORD(a2[2])), COERCE_FLOAT(a2[3]), COERCE_FLOAT(HIDWORD(a2[3])));
  v4 = v9;
  if (v9)
  {
    v5 = v9 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(unsigned int **)(a1 + 288);
  if (v7)
    sub_1D3D6D13C(v7);
  *(_QWORD *)(a1 + 288) = v4;
  return sub_1D3D6F2E0(&v9);
}

void sub_1D3E0B70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3D6F2E0((unsigned int **)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E0B720(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  int32x2_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  const float *v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x2_t v35;
  float32x4_t v36;
  __int16 v37;

  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 288) + 16))(*(_QWORD *)(a2 + 288), a3);
  result = (uint64_t)sub_1D3D82334(a1, (unint64_t)((a3[1] - *a3) >> 2) >> 1);
  v8 = *a3;
  if ((unint64_t)(a3[1] - *a3) >= 5)
  {
    v9 = 0;
    v10 = 0;
    v37 = 0;
    do
    {
      v11 = (const float *)(v8 + 4 * v10);
      v12 = vld1q_dup_f32(v11++);
      *(float *)v7.i32 = *v11;
      v13 = *(int32x4_t *)(a2 + 96);
      v14 = *(int32x4_t *)(a2 + 112);
      v15 = *(int32x4_t *)(a2 + 128);
      v34 = *(int32x4_t *)(a2 + 144);
      v35 = v7;
      v16 = vzip2q_s32(v13, v15);
      v17 = (float32x4_t)vzip1q_s32(vzip1q_s32(v13, v15), v14);
      v18 = (float32x4_t)vtrn2q_s32(v13, v14);
      v18.i32[2] = HIDWORD(*(_QWORD *)(a2 + 128));
      v36 = v12;
      v19 = (int32x4_t)vaddq_f32((float32x4_t)vzip1q_s32(v16, vdupq_laneq_s32(v14, 2)), vmlaq_n_f32(vmulq_f32(v12, v17), v18, *v11));
      v32 = *(int32x4_t *)(a2 + 176);
      v33 = *(int32x4_t *)(a2 + 160);
      if (sub_1D3E0B93C(*(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 48), (_BYTE *)&v37 + 1, COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_laneq_s32(v19, 2))), *(double *)(a2 + 176), *(double *)v33.i64, *(double *)v17.i64, *(double *)v16.i64, v12.f32[0], *v11)&& (v21 = (float32x4_t)vtrn2q_s32(v34, v33), v21.i32[2] = v32.i32[1], v22 = vmlaq_f32(vmulq_f32(v36, (float32x4_t)vzip1q_s32(vzip1q_s32(v34, v32), v33)), (float32x4_t)vdupq_lane_s32(v35, 0), v21), v23 = (int32x4_t)vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v34, v32), vdupq_laneq_s32(v33, 2)), v22),
            v24 = (float32x2_t)vdup_laneq_s32(v23, 2),
            result = sub_1D3E0B93C(*(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 72), *(_DWORD *)(a2 + 80), &v37, COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)v23.i8, v24)), *(double *)&v24, *(double *)v22.i64, *(double *)v21.i64, *(double *)v36.i64, *(float *)v32.i32, v20), (_DWORD)result))
      {
        v25 = (_QWORD *)*a1;
        v26 = v10 >> 7;
        v27 = 1 << v9;
        if (HIBYTE(v37) > v37)
          goto LABEL_8;
      }
      else
      {
        result = rand();
        v25 = (_QWORD *)*a1;
        v26 = v10 >> 7;
        v27 = 1 << v9;
        if ((result & 1) == 0)
        {
LABEL_8:
          v28 = v25[v26] & ~v27;
          goto LABEL_9;
        }
      }
      v28 = v25[v26] | v27;
LABEL_9:
      v25[v26] = v28;
      v29 = v10 + 3;
      v10 += 2;
      v8 = *a3;
      ++v9;
    }
    while (v29 < (a3[1] - *a3) >> 2);
  }
  if (*(_BYTE *)a2)
  {
    v30 = (_QWORD *)*a1;
    v31 = a1[1];
    if (v31 >= 0x40)
    {
      do
      {
        *v30 = ~*v30;
        ++v30;
        v31 -= 64;
      }
      while (v31 > 0x3F);
    }
    if (v31)
      *v30 ^= 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
  }
  return result;
}

void sub_1D3E0B924(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3E0B93C(uint64_t a1, int a2, int a3, int a4, _BYTE *a5, double a6, double a7, double a8, double a9, double a10, float a11, float a12)
{
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  int v28;
  int v29;

  v12 = 0;
  v13 = (int)*((float *)&a6 + 1);
  if (((int)*((float *)&a6 + 1) & 0x80000000) == 0 && v13 < a3)
  {
    v14 = (int)*(float *)&a6;
    if (((int)*(float *)&a6 & 0x80000000) == 0 && v14 < a2)
    {
      v15 = *((float *)&a6 + 1) - (float)((float)v13 + 0.5);
      v16 = (float)v14 + 0.5;
      v17 = *(float *)&a6 - v16;
      if (v15 <= 0.0)
      {
        v28 = 0;
        v29 = v13 - 1;
        v18 = &v29;
        if (!v13)
          v18 = &v28;
      }
      else
      {
        v28 = a3 - 1;
        v29 = v13 + 1;
        v18 = &v28;
        if (v13 + 1 < a3)
          v18 = &v29;
      }
      v19 = *v18;
      if (v17 <= 0.0)
      {
        v28 = 0;
        v29 = v14 - 1;
        v20 = &v29;
        if (!v14)
          v20 = &v28;
      }
      else
      {
        v28 = a2 - 1;
        v29 = v14 + 1;
        v20 = &v28;
        if (v14 + 1 < a2)
          v20 = &v29;
      }
      v21 = *v20;
      v22 = fabsf(v15);
      LOBYTE(v16) = *(_BYTE *)(a1 + v21 + v19 * (uint64_t)a4);
      v23 = fabsf(v17);
      LOBYTE(a11) = *(_BYTE *)(a1 + v14 + v19 * (uint64_t)a4);
      *(float *)&v24 = (float)(1.0 - v23) * (float)LODWORD(a11);
      v25 = *(float *)&v24 + (float)(v23 * (float)LODWORD(v16));
      v26 = v13 * a4;
      LOBYTE(v24) = *(_BYTE *)(a1 + v21 + v26);
      LOBYTE(a12) = *(_BYTE *)(a1 + v26 + v14);
      *a5 = (int)(float)((float)((float)(1.0 - v22)
                               * (float)((float)((float)(1.0 - v23) * (float)LODWORD(a12)) + (float)(v23 * (float)v24)))
                       + (float)(v22 * v25));
      return 1;
    }
  }
  return v12;
}

BOOL sub_1D3E0BA8C(int32x4_t *a1, double a2)
{
  int v2;
  _BOOL8 v3;
  uint64_t v4;
  unsigned int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  unsigned __int8 v16;

  v2 = a1->u8[0];
  v3 = a1->i8[0] != 0;
  if ((LODWORD(a2) & 0x80000000) == 0
    && SLODWORD(a2) < a1[2].i32[0]
    && (HIDWORD(a2) & 0x80000000) == 0
    && SHIDWORD(a2) < a1[2].i32[2])
  {
    v4 = a1[3].i64[1];
    v5 = *(unsigned __int8 *)(a1[1].i64[1] + a1[3].i64[0] * HIDWORD(a2) + LODWORD(a2));
    v16 = 0;
    v6 = a1[12];
    v7 = a1[13];
    v8 = a1[14];
    v9 = vzip2q_s32(v6, v8);
    v10 = (float32x4_t)vzip1q_s32(vzip1q_s32(v6, v8), v7);
    v11 = (float32x4_t)vtrn2q_s32(v6, v7);
    v11.i32[2] = HIDWORD(a1[14].i64[0]);
    v12 = (float32x4_t)vzip1q_s32(v9, vdupq_laneq_s32(v7, 2));
    v13 = (int32x4_t)vaddq_f32(v12, vmlaq_n_f32(vmulq_n_f32(v10, (float)SLODWORD(a2)), v11, (float)SHIDWORD(a2)));
    v14 = (float32x2_t)vdup_laneq_s32(v13, 2);
    if (sub_1D3E0B93C(v4, a1[4].i32[0], a1[4].i32[2], a1[5].i32[0], &v16, COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)v13.i8, v14)), *(double *)&v14, *(double *)v11.i64, *(double *)v12.i64, *(double *)v8.i64, v10.f32[0], *(float *)v9.i32))return v2 != v5 <= v16;
  }
  return v3;
}

uint64_t sub_1D3E0BB74(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D3E0BBD4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1D3E0BC50(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1D3D6D4F8();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1D3E0BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D3E0BBD4(&a9);
  _Unwind_Resume(a1);
}

void sub_1D3E0BCE8(_QWORD *a1)
{
  if (a1)
  {
    sub_1D3E0BCE8(*a1);
    sub_1D3E0BCE8(a1[1]);
    sub_1D3D96F10((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

double sub_1D3E0BD28(uint64_t a1, int a2, uint64_t a3, int a4, float32x4_t a5)
{
  float *v6;
  unsigned int v9;
  long double v10;
  int v11;
  __int128 v12;
  int32x2_t v13;
  int32x2_t v14;
  float *v15;
  uint64_t i;
  __int128 v17;
  int32x2_t v19;
  __int128 v20;
  __int128 v21;
  float32x4x2_t v22;
  float32x4x2_t v23;

  if (a4 && !*(_DWORD *)a1)
  {
    if (a4 == 1)
    {
      v6 = (float *)(a1 + 32);
      *(float32x4x2_t *)a5.f32 = vld2q_f32(v6);
      v22.val[1] = a5;
      vst2q_f32(v6, v22);
    }
    else
    {
      if (a2 >= 0)
        v9 = a2;
      else
        v9 = -a2;
      v10 = tan((double)a2 * 3.14159265 / 180.0);
      *(float *)&v10 = v10;
      v19 = *(int32x2_t *)&v10;
      v11 = sub_1D3DB5520(a1 + 96);
      sub_1D3DB5578((uint64_t **)(a1 + 96), (int)(v11+ (a2 + 360 * (((a2 & ~(a2 >> 31)) - (a2 + (a2 >> 31))) / 0x168 + (a2 >> 31)))% 0x168)% 360);
      v12 = *(_OWORD *)(a1 + 48);
      v20 = *(_OWORD *)(a1 + 32);
      v21 = v12;
      *(float *)v13.i32 = (float)(*(int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) * 0.5;
      *(float *)v14.i32 = (float)SDWORD1(v20);
      if (v9 <= 0x2D)
      {
        for (i = 0; i != 32; i += 8)
          *(_DWORD *)((char *)&v20 + i + 4) = llroundf(*(float *)v14.i32+ (float)((float)((float)*(int *)((char *)&v20 + i) - *(float *)v13.i32)* *(float *)v19.i32));
      }
      else
      {
        v23.val[1].i64[0] = __PAIR64__(DWORD2(v20), v20);
        v15 = (float *)&v20;
        v23.val[1].i64[1] = __PAIR64__(DWORD2(v21), v21);
        v23.val[0] = (float32x4_t)vcvtq_s32_f32(vrndaq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v13, 0), vdivq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)v23.val[1]), (float32x4_t)vdupq_lane_s32(v14, 0)), (float32x4_t)vdupq_lane_s32(v19, 0)))));
        vst2q_f32(v15, v23);
      }
      a5.i64[0] = v20;
      v17 = v21;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)(a1 + 48) = v17;
    }
  }
  return *(double *)a5.i64;
}

_QWORD *sub_1D3E0BEEC(_QWORD *result, unint64_t a2, uint64_t a3)
{
  char *v5;
  _QWORD *v6;
  __int128 v7;
  int v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  BOOL v15;
  int v16;
  uint64_t **v17;
  uint64_t **v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  char *v27;
  _QWORD v28[2];
  char v29;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    v26 = result;
    if (a2 >= 0x1E1E1E1E1E1E1E2)
      sub_1D3D6D4F8();
    v5 = (char *)operator new(136 * a2);
    *v26 = v5;
    v26[1] = v5;
    v26[2] = &v5[136 * a2];
    v27 = &v5[136 * a2];
    v6 = (_QWORD *)(a3 + 104);
    do
    {
      *(_QWORD *)v5 = *(_QWORD *)a3;
      if (*(char *)(a3 + 31) < 0)
      {
        sub_1D3DB57C8(v5 + 8, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
      }
      else
      {
        *(_OWORD *)(v5 + 8) = *(_OWORD *)(a3 + 8);
        *((_QWORD *)v5 + 3) = *(_QWORD *)(a3 + 24);
      }
      *((_QWORD *)v5 + 8) = 0;
      v7 = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v5 + 2) = *(_OWORD *)(a3 + 32);
      *((_OWORD *)v5 + 3) = v7;
      *((_QWORD *)v5 + 9) = 0;
      *((_QWORD *)v5 + 10) = 0;
      sub_1D3DB8410((_QWORD *)v5 + 8, *(const void **)(a3 + 64), *(_QWORD *)(a3 + 72), *(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64));
      v8 = *(_DWORD *)(a3 + 88);
      *((_QWORD *)v5 + 13) = 0;
      v9 = (uint64_t **)(v5 + 104);
      *((_QWORD *)v5 + 12) = v5 + 104;
      *((_DWORD *)v5 + 22) = v8;
      *((_QWORD *)v5 + 14) = 0;
      v10 = *(_QWORD **)(a3 + 96);
      if (v10 != v6)
      {
        v11 = 0;
        while (1)
        {
          v12 = v5 + 104;
          if (*((uint64_t ***)v5 + 12) == v9)
            goto LABEL_15;
          v13 = v11;
          v14 = v5 + 104;
          if (v11)
          {
            do
            {
              v12 = (char *)v13;
              v13 = (uint64_t *)v13[1];
            }
            while (v13);
          }
          else
          {
            do
            {
              v12 = (char *)*((_QWORD *)v14 + 2);
              v15 = *(_QWORD *)v12 == (_QWORD)v14;
              v14 = v12;
            }
            while (v15);
          }
          v16 = *((_DWORD *)v10 + 8);
          if (*((_DWORD *)v12 + 8) < v16)
          {
LABEL_15:
            v17 = (uint64_t **)(v11 ? v12 : v5 + 104);
            v18 = (uint64_t **)(v11 ? v12 + 8 : v5 + 104);
          }
          else
          {
            v17 = (uint64_t **)(v5 + 104);
            v18 = (uint64_t **)(v5 + 104);
            if (v11)
            {
              v18 = (uint64_t **)(v5 + 104);
              while (1)
              {
                while (1)
                {
                  v17 = (uint64_t **)v11;
                  v25 = *((_DWORD *)v11 + 8);
                  if (v16 >= v25)
                    break;
                  v11 = *v17;
                  v18 = v17;
                  if (!*v17)
                    goto LABEL_22;
                }
                if (v25 >= v16)
                  break;
                v18 = v17 + 1;
                v11 = v17[1];
                if (!v11)
                  goto LABEL_22;
              }
            }
          }
          if (!*v18)
          {
LABEL_22:
            v19 = operator new(0x38uLL);
            v28[1] = v5 + 104;
            v19[8] = *((_DWORD *)v10 + 8);
            *((_QWORD *)v19 + 5) = v10[5];
            v20 = v10[6];
            *((_QWORD *)v19 + 6) = v20;
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            v29 = 1;
            sub_1D3D7F928((uint64_t **)v5 + 12, (uint64_t)v17, v18, (uint64_t *)v19);
            v28[0] = 0;
            sub_1D3DB570C((uint64_t)v28);
          }
          v23 = (_QWORD *)v10[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v10[2];
              v15 = *v24 == (_QWORD)v10;
              v10 = v24;
            }
            while (!v15);
          }
          if (v24 == v6)
            break;
          v11 = *v9;
          v10 = v24;
        }
      }
      *((_QWORD *)v5 + 15) = *(_QWORD *)(a3 + 120);
      *((_DWORD *)v5 + 32) = *(_DWORD *)(a3 + 128);
      v5 += 136;
    }
    while (v5 != v27);
    result = v26;
    v26[1] = v27;
  }
  return result;
}

void sub_1D3E0C1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D3E0CC40((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1D3E0C21C(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v24;
  char v25;
  BOOL v26;
  char *v27;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  std::wstring v50;
  __int128 v51;
  __int128 v52;
  void *__p;
  char *v54;
  int v55;
  uint64_t *v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;
  __int16 v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD v65[4];

  sub_1D3E0BC50(v65, (a2[1] - *a2) >> 2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (a4)
    v10 = 8;
  else
    v10 = 5;
  v11 = v9 >> v10;
  if (a4)
    v12 = v9;
  else
    v12 = 15;
  v42 = v12;
  v43 = v9;
  if (v11 <= 1)
    v11 = 1;
  v41 = v11;
  LOBYTE(v47) = 0;
  sub_1D3D81DF8(&v63, v8, &v47);
  LOBYTE(v47) = 0;
  sub_1D3D81DF8(&v61, v8, &v47);
  v13 = v43;
  v14 = a3;
  if (v42 >= 1)
  {
    v15 = 0;
    v46 = a1;
    do
    {
      v16 = v15 + 1;
      if ((v15 & 1) != 0)
        v17 = -((v15 + 1) >> 1);
      else
        v17 = (v15 + 1) >> 1;
      v18 = (v43 >> 1) + v17 * v41;
      if ((v18 & 0x80000000) != 0 || (int)v18 >= v13)
        break;
      v44 = v16;
      if (((*(uint64_t (**)(uint64_t, uint64_t, char **, char **, uint64_t))(*(_QWORD *)v14 + 32))(v14, v18, &v63, &v61, 1) & 1) != 0)
      {
        v19 = 0;
        v20 = 0;
        v60 = 256;
        do
        {
          v45 = v19;
          v21 = *((unsigned __int8 *)&v60 + v20);
          if (*((_BYTE *)&v60 + v20))
          {
            v22 = v64 - 1;
            if (v63 != v64 && v22 > v63)
            {
              v24 = v63 + 1;
              do
              {
                v25 = *(v24 - 1);
                *(v24 - 1) = *v22;
                *v22-- = v25;
                v26 = v24++ >= v22;
              }
              while (!v26);
            }
            v27 = v62 - 1;
            if (v61 != v62 && v27 > v61)
            {
              v29 = v61 + 1;
              do
              {
                v30 = *(v29 - 1);
                *(v29 - 1) = *v27;
                *v27-- = v30;
                v26 = v29++ >= v27;
              }
              while (!v26);
            }
          }
          v32 = *a2;
          v31 = a2[1];
          if (v31 != *a2)
          {
            v33 = 0;
            do
            {
              if (*(_DWORD *)(*a1 + 136 * v33))
              {
                (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, char **, char **, _QWORD, unint64_t))(**(_QWORD **)(v32 + 8 * v33) + 16))(&v49, *(_QWORD *)(v32 + 8 * v33), v18, &v63, &v61, 0, v65[0] + ((16 * v33) | (8 * v21)));
                if (!(_DWORD)v49)
                {
                  if ((_DWORD)v21)
                  {
                    sub_1D3DB5578(&v56, 180);
                    v34 = 0;
                    v47 = v51;
                    v48 = v52;
                    do
                    {
                      *(_QWORD *)((char *)&v47 + v34) = (v8 + ~*(_DWORD *)((char *)&v47 + v34)) | ((unint64_t)*(unsigned int *)((char *)&v47 + v34 + 4) << 32);
                      v34 += 8;
                    }
                    while (v34 != 32);
                    v51 = v47;
                    v52 = v48;
                    a1 = v46;
                  }
                  v35 = *a1;
                  v36 = *a1 + 136 * v33;
                  *(_QWORD *)v36 = v49;
                  std::wstring::operator=((std::wstring *)(v36 + 8), &v50);
                  v37 = v52;
                  v38 = v35 + 136 * v33;
                  *(_OWORD *)(v38 + 32) = v51;
                  *(_OWORD *)(v38 + 48) = v37;
                  if ((void ***)v36 == &v49)
                  {
                    *(_DWORD *)(v35 + 136 * v33 + 88) = v55;
                  }
                  else
                  {
                    sub_1D3E0C674((_QWORD *)(v35 + 136 * v33 + 64), (char *)__p, v54, v54 - (_BYTE *)__p);
                    v39 = v35 + 136 * v33;
                    *(_DWORD *)(v39 + 88) = v55;
                    sub_1D3E0C77C(v39 + 96, v56, &v57);
                  }
                  v40 = v35 + 136 * v33;
                  *(_BYTE *)(v40 + 120) = v58;
                  *(_QWORD *)(v40 + 124) = v59;
                  a1 = v46;
                }
                sub_1D3E0BCE8(v57);
                if (__p)
                {
                  v54 = (char *)__p;
                  operator delete(__p);
                }
                if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v50.__r_.__value_.__l.__data_);
                v32 = *a2;
                v31 = a2[1];
              }
              ++v33;
            }
            while (v33 < (v31 - v32) >> 3);
          }
          v19 = 1;
          v20 = 1;
        }
        while ((v45 & 1) == 0);
        v14 = a3;
      }
      v15 = v44;
      v13 = v43;
    }
    while (v44 != v42);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  v49 = (void **)v65;
  sub_1D3E0BBD4(&v49);
}

void sub_1D3E0C5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v37 - 136);
  if (v39)
  {
    *(_QWORD *)(v37 - 128) = v39;
    operator delete(v39);
  }
  a21 = v37 - 112;
  sub_1D3E0BBD4((void ***)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E0C674(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_1D3D6D4F8();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D3D81E74(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_1D3E0C77C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t *i;
  uint64_t *v26;
  uint64_t **v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[2];
  char v38;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v26 = 0;
LABEL_37:
      sub_1D3E0BCE8(v26);
      goto LABEL_38;
    }
    v10 = sub_1D3E0D084((uint64_t)v9);
    if (a2 != a3)
    {
      v11 = v9;
      v12 = a2;
      do
      {
        v9 = v10;
        *((_DWORD *)v11 + 8) = *((_DWORD *)v12 + 8);
        v14 = v12[5];
        v13 = v12[6];
        if (v13)
        {
          v15 = (unint64_t *)(v13 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = (std::__shared_weak_count *)v11[6];
        v11[5] = v14;
        v11[6] = v13;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = *v8;
        v21 = (uint64_t **)(a1 + 8);
        v22 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              v21 = (uint64_t **)v20;
              if (*((_DWORD *)v11 + 8) >= *((_DWORD *)v20 + 8))
                break;
              v20 = (uint64_t *)*v20;
              v22 = v21;
              if (!*v21)
                goto LABEL_22;
            }
            v20 = (uint64_t *)v20[1];
          }
          while (v20);
          v22 = v21 + 1;
        }
LABEL_22:
        sub_1D3D7F928((uint64_t **)a1, (uint64_t)v21, v22, v11);
        if (v10)
          v10 = sub_1D3E0D084((uint64_t)v10);
        else
          v10 = 0;
        v23 = (_QWORD *)v12[1];
        if (v23)
        {
          do
          {
            a2 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v12[2];
            v24 = *a2 == (_QWORD)v12;
            v12 = a2;
          }
          while (!v24);
        }
        if (!v9)
          break;
        v11 = v9;
        v12 = a2;
      }
      while (a2 != a3);
    }
    sub_1D3E0BCE8(v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      v26 = v10;
      goto LABEL_37;
    }
  }
LABEL_38:
  if (a2 != a3)
  {
    v27 = (uint64_t **)(a1 + 8);
    do
    {
      v28 = operator new(0x38uLL);
      v37[0] = v28;
      v37[1] = a1 + 8;
      v28[8] = *((_DWORD *)a2 + 8);
      *((_QWORD *)v28 + 5) = a2[5];
      v29 = a2[6];
      *((_QWORD *)v28 + 6) = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v38 = 1;
      v32 = *v27;
      v33 = (uint64_t **)(a1 + 8);
      v34 = (uint64_t **)(a1 + 8);
      if (*v27)
      {
        do
        {
          while (1)
          {
            v33 = (uint64_t **)v32;
            if (v28[8] >= *((_DWORD *)v32 + 8))
              break;
            v32 = (uint64_t *)*v32;
            v34 = v33;
            if (!*v33)
              goto LABEL_49;
          }
          v32 = (uint64_t *)v32[1];
        }
        while (v32);
        v34 = v33 + 1;
      }
LABEL_49:
      sub_1D3D7F928((uint64_t **)a1, (uint64_t)v33, v34, (uint64_t *)v28);
      v37[0] = 0;
      sub_1D3DB570C((uint64_t)v37);
      v35 = (_QWORD *)a2[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)a2[2];
          v24 = *v36 == (_QWORD)a2;
          a2 = v36;
        }
        while (!v24);
      }
      a2 = v36;
    }
    while (v36 != a3);
  }
}

void sub_1D3E0CA28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  void *v8;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 != v1)
  {
    while (!*(_DWORD *)v2)
    {
      v2 += 136;
      if (v2 == v1)
        return;
    }
    if (v2 != v1)
    {
      v4 = v2 + 136;
      if (v2 + 136 != v1)
      {
        do
        {
          if (!*(_DWORD *)v4)
          {
            *(_QWORD *)v2 = *(_QWORD *)v4;
            v5 = (void **)(v2 + 8);
            if (*(char *)(v2 + 31) < 0)
              operator delete(*v5);
            v6 = *(_OWORD *)(v4 + 8);
            *(_QWORD *)(v2 + 24) = *(_QWORD *)(v4 + 24);
            *(_OWORD *)v5 = v6;
            *(_BYTE *)(v4 + 31) = 0;
            *(_DWORD *)(v4 + 8) = 0;
            v7 = *(_OWORD *)(v4 + 48);
            v8 = *(void **)(v2 + 64);
            *(_OWORD *)(v2 + 32) = *(_OWORD *)(v4 + 32);
            *(_OWORD *)(v2 + 48) = v7;
            if (v8)
            {
              *(_QWORD *)(v2 + 72) = v8;
              operator delete(v8);
              *(_QWORD *)(v2 + 64) = 0;
              *(_QWORD *)(v2 + 72) = 0;
              *(_QWORD *)(v2 + 80) = 0;
            }
            *(_OWORD *)(v2 + 64) = *(_OWORD *)(v4 + 64);
            *(_QWORD *)(v2 + 80) = *(_QWORD *)(v4 + 80);
            *(_QWORD *)(v4 + 64) = 0;
            *(_QWORD *)(v4 + 72) = 0;
            *(_QWORD *)(v4 + 80) = 0;
            *(_DWORD *)(v2 + 88) = *(_DWORD *)(v4 + 88);
            sub_1D3E0D01C((_QWORD *)(v2 + 96), (_QWORD *)(v4 + 96));
            *(_BYTE *)(v2 + 120) = *(_BYTE *)(v4 + 120);
            *(_DWORD *)(v2 + 124) = *(_DWORD *)(v4 + 124);
            *(_DWORD *)(v2 + 128) = *(_DWORD *)(v4 + 128);
            v2 += 136;
          }
          v4 += 136;
        }
        while (v4 != v1);
        v1 = a1[1];
      }
    }
    if (v2 != v1)
    {
      while (v1 != v2)
      {
        v1 -= 136;
        sub_1D3E0CFD0(v1);
      }
      a1[1] = v2;
    }
  }
}

void sub_1D3E0CC40(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_1D3E0CFD0(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D3E0CCB0(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  float v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v22;
  int v23;
  int v24;
  void **v25;
  size_t v26;
  uint64_t v27;
  int v28;
  const __int32 *v29;
  int v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  unsigned __int8 v36;
  void *__p;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _DWORD v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2)
    return 0;
  v11 = (*(int (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) / 10;
  v12 = v11 >= 10 ? 10 : v11;
  if (v12 < 1)
    return 0;
  v13 = 0;
  v14 = 0;
  v47[0] = v12;
  v47[1] = -v12;
  v15 = (float)a3 * 3.14159265 / 180.0;
  while (1)
  {
    v16 = v13;
    v17 = v47[v14];
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, char **, void **, float))(*(_QWORD *)a4 + 48))(a4, v17, &v44, &v41, v15) & 1) == 0)
    {
      v32 = 3;
      goto LABEL_41;
    }
    if (a5)
    {
      if (v44 != v45)
      {
        v18 = v45 - 1;
        if (v45 - 1 > v44)
        {
          v19 = v44 + 1;
          do
          {
            v20 = *(v19 - 1);
            *(v19 - 1) = *v18;
            *v18-- = v20;
          }
          while (v19++ < v18);
        }
      }
    }
    v40 = 0;
    v22 = *a1;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    if (v23 >= 0)
      v24 = v23;
    else
      v24 = v23 + 1;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, char **, void **, _QWORD, uint64_t *))(*(_QWORD *)v22 + 16))(&v34, v22, (v17 + (v24 >> 1)), &v44, &v41, 0, &v40);
    if (!(_DWORD)v34)
    {
      if ((v36 & 0x80u) == 0)
        v25 = v35;
      else
        v25 = (void **)v35[0];
      if ((v36 & 0x80u) == 0)
        v26 = v36;
      else
        v26 = (size_t)v35[1];
      v27 = *(unsigned __int8 *)(a2 + 31);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a2 + 16);
      if (v26 == v27)
      {
        if (!v26)
        {
          v31 = 0;
LABEL_50:
          v32 = v31 == v26;
          goto LABEL_34;
        }
        if (v28 >= 0)
          v29 = (const __int32 *)(a2 + 8);
        else
          v29 = *(const __int32 **)(a2 + 8);
        v30 = wmemcmp((const __int32 *)v25, v29, v26);
        v31 = v26;
        if (!v30)
          goto LABEL_50;
      }
    }
    v32 = 0;
LABEL_34:
    sub_1D3E0BCE8(v39);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if ((char)v36 < 0)
      operator delete(v35[0]);
    v33 = v40;
    v40 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_41:
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v32 != 3 && v32)
      return 1;
    v13 = 1;
    v14 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
}

void sub_1D3E0CF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D3E0CFD0(uint64_t a1)
{
  void *v2;

  sub_1D3E0BCE8(*(_QWORD **)(a1 + 104));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_1D3E0D01C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 1;
  sub_1D3E0BCE8((_QWORD *)a1[1]);
  *a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

_QWORD *sub_1D3E0D084(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_1D3E0D0D8(uint64_t a1)
{
  unsigned int **v2;

  *(_QWORD *)a1 = &off_1E95AF8C8;
  v2 = (unsigned int **)(a1 + 16);
  sub_1D3DC2944((unsigned int **)(a1 + 40));
  sub_1D3DC2944((unsigned int **)(a1 + 32));
  sub_1D3DC2944((unsigned int **)(a1 + 24));
  sub_1D3DC2944(v2);
  return a1;
}

void sub_1D3E0D128(uint64_t a1)
{
  unsigned int **v2;

  *(_QWORD *)a1 = &off_1E95AF8C8;
  v2 = (unsigned int **)(a1 + 16);
  sub_1D3DC2944((unsigned int **)(a1 + 40));
  sub_1D3DC2944((unsigned int **)(a1 + 32));
  sub_1D3DC2944((unsigned int **)(a1 + 24));
  sub_1D3DC2944(v2);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E0D188(unsigned int a1)
{
  unint64_t v2;
  _QWORD *exception;
  _QWORD *(**v5)();
  _QWORD *(*v6)();

  if (a1 >= 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3E17508(exception, "Illegal error correction level bits");
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  v2 = atomic_load(&qword_1EDB89DF8);
  if (v2 != -1)
  {
    v5 = &v6;
    v6 = sub_1D3E0D240;
    std::__call_once(&qword_1EDB89DF8, &v5, (void (__cdecl *)(void *))sub_1D3DA51A8);
  }
  return qword_1EDB89EC0[a1];
}

void sub_1D3E0D22C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E0D240()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;

  v0 = (_QWORD *)operator new();
  *v0 = 0x100000000;
  sub_1D3D81D4C(v0 + 1, "L");
  qword_1EDB89E18 = (uint64_t)v0;
  v1 = (_QWORD *)operator new();
  *v1 = 1;
  sub_1D3D81D4C(v1 + 1, "M");
  qword_1EDB89EB0 = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  *v2 = 0x300000002;
  sub_1D3D81D4C(v2 + 1, "Q");
  qword_1EDB89EB8 = (uint64_t)v2;
  v3 = (_QWORD *)operator new();
  *v3 = 0x200000003;
  result = sub_1D3D81D4C(v3 + 1, "H");
  qword_1EDB89EA0 = (uint64_t)v3;
  qword_1EDB89EC0 = qword_1EDB89EB0;
  *(_QWORD *)algn_1EDB89EC8 = qword_1EDB89E18;
  qword_1EDB89ED0 = (uint64_t)v3;
  unk_1EDB89ED8 = qword_1EDB89EB8;
  return result;
}

void sub_1D3E0D36C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void sub_1D3E0D3A0()
{
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E0D3B4(unsigned int a1, int a2)
{
  return (dword_1D3E6ECC0[(a2 ^ a1) >> 4]
                      + dword_1D3E6ECC0[(a2 ^ a1) & 0xF]
                      + dword_1D3E6ECC0[((a2 ^ a1) >> 8) & 0xF]
                      + dword_1D3E6ECC0[(unsigned __int16)(a2 ^ a1) >> 12]
                      + dword_1D3E6ECC0[((a2 ^ a1) >> 16) & 0xF]
                      + dword_1D3E6ECC0[((a2 ^ a1) >> 20) & 0xF]
                      + dword_1D3E6ECC0[((a2 ^ a1) >> 24) & 0xF]
                      + dword_1D3E6ECC0[(a2 ^ a1) >> 28]);
}

unsigned int **sub_1D3E0D420(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v10;
  int v11;

  sub_1D3E0D4B8((uint64_t)&v10, a2, a3);
  v6 = v10;
  if (v10)
  {
    v7 = v10 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v11;
  }
  else
  {
    sub_1D3E0D4B8(a1, a2 ^ 0x5412, a3 ^ 0x5412);
  }
  return sub_1D3DF5878(&v10);
}

void sub_1D3E0D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  sub_1D3DF5878(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E0D4B8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v23;

  v6 = 0;
  v7 = 0;
  v8 = 0x7FFFFFFF;
  do
  {
    v9 = *(_DWORD *)((char *)&unk_1D3E6EBC0 + v6);
    if (v9 == a2 || v9 == a3)
    {
      v17 = operator new();
      v18 = *(_DWORD *)((char *)&unk_1D3E6EBC0 + v6 + 4);
      *(_DWORD *)(v17 + 8) = 0;
      v19 = (unsigned int *)(v17 + 8);
      *(_QWORD *)v17 = &off_1E95AF8E8;
      *(_QWORD *)(v17 + 16) = sub_1D3E0D188((v18 >> 3) & 3);
      *(_BYTE *)(v17 + 24) = v18 & 7;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v23 = (unsigned int *)v17;
      do
        v21 = __ldxr(v19);
      while (__stxr(v21 + 1, v19));
      *(_QWORD *)a1 = v17;
      *(_DWORD *)(a1 + 8) = 0;
      return sub_1D3DF5878(&v23);
    }
    v11 = sub_1D3E0D3B4(a2, *(_DWORD *)((char *)&unk_1D3E6EBC0 + v6));
    if (v11 < v8)
    {
      v7 = *(_DWORD *)((char *)&unk_1D3E6EBC0 + v6 + 4);
      v8 = v11;
    }
    if (a2 != a3)
    {
      v12 = sub_1D3E0D3B4(a3, v9);
      if (v12 < v8)
      {
        v7 = *(_DWORD *)((char *)&unk_1D3E6EBC0 + v6 + 4);
        v8 = v12;
      }
    }
    v6 += 8;
  }
  while (v6 != 256);
  if (v8 > 3)
  {
    v23 = 0;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v13 = operator new();
    *(_DWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)(v13 + 8);
    *(_QWORD *)v13 = &off_1E95AF8E8;
    *(_QWORD *)(v13 + 16) = sub_1D3E0D188((v7 >> 3) & 3);
    *(_BYTE *)(v13 + 24) = v7 & 7;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v23 = (unsigned int *)v13;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    *(_QWORD *)a1 = v13;
  }
  *(_DWORD *)(a1 + 8) = v8;
  return sub_1D3DF5878(&v23);
}

void sub_1D3E0D684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x10E1C40E6D3758ALL);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E0D6AC(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  const __CFDictionary *v10;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unint64_t v16;
  const __CFDictionary *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  os_signpost_id_t v25;
  NSObject *v26;
  unint64_t v27;
  const __CFData *v28;
  const UInt8 *BytePtr;
  const __CFData *v30;
  CFIndex Length;
  const __CFString *v32;
  const char *CStringPtr;
  CFIndex v34;
  CFIndex v35;
  char *v36;
  int CString;
  _BOOL4 v38;
  const __CFString *v39;
  unint64_t v40;
  const void *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v48;
  const __CFAllocator *v49;
  const __CFData *v50;
  CFStringRef v51;
  const void *v52;
  unint64_t v53;
  const __CFString *v54;
  char *v55;
  uint64_t **p_buf;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  const __CFString *v60;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  const __CFData *v77;
  const UInt8 *v78;
  const __CFData *v79;
  CFIndex v80;
  uint64_t v81;
  const std::ios_base *v82;
  const std::locale::facet *v83;
  CFIndex v84;
  const UInt8 *locale;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  int v101;
  CFIndex v102;
  const UInt8 *v103;
  unint64_t v104;
  const void *v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  int v110;
  unint64_t *v111;
  const __CFData *v113;
  unint64_t v114;
  const void *v115;
  NSObject *v116;
  NSObject *v118;
  NSObject *v119;
  NSObject *v120;
  unint64_t v121;
  unint64_t v122;
  const void *v123;
  uint64_t **v124;
  char *v125;
  os_signpost_id_t v127;
  char v128;
  unint64_t v129[7];
  unsigned __int8 v130;
  unint64_t v131;
  const void *v132;
  __int16 v133;
  CFStringRef v134;
  int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int *v139;
  std::locale __dst;
  CFIndex numBytes;
  unsigned int *v142;
  int v143;
  _QWORD v144[3];
  _QWORD *v145;
  _QWORD v146[3];
  _QWORD *v147;
  os_signpost_id_t *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 buf;
  uint64_t v152;
  _BYTE v153[264];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  if (atomic_load(a3))
  {
    v10 = (const __CFDictionary *)atomic_load(a3);
    Value = CFDictionaryGetValue(v10, CFSTR("MRCDescriptorPayloadDecodingOptionDefaultEncoding"));
    if (Value)
    {
      v12 = Value;
      v13 = CFGetTypeID(Value);
      if (v13 != CFStringGetTypeID())
        _os_assumes_log();
      Value = CFRetain(v12);
    }
  }
  else
  {
    Value = 0;
  }
  v132 = Value;
  v133 = 0;
  v14 = sub_1D3E0EC48(a3, CFSTR("MRCDescriptorPayloadDecodingOptionShouldForceInProcessDecoding"));
  if (v14 >= 0x100u)
    LOBYTE(v133) = v14;
  v15 = sub_1D3E0EC48(a3, CFSTR("_MRCDescriptorPayloadDecodingOptionShouldDecodeSupplementalPayload"));
  if (v15 >= 0x100u)
    HIBYTE(v133) = v15;
  v16 = atomic_load(a3);
  if (!v16
    || (v17 = (const __CFDictionary *)atomic_load(a3),
        !CFDictionaryContainsKey(v17, CFSTR("_MRCDescriptorPayloadDecodingOptionShouldDecodeSupplementalPayload"))))
  {
    HIBYTE(v133) = a4 != 0;
  }
  v131 = 0;
  LOBYTE(v129[0]) = 0;
  v130 = 0;
  if (qword_1EFE31820 != -1)
    dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
  v127 = os_signpost_id_make_with_pointer((os_log_t)qword_1EFE31818, (const void *)a2);
  v128 = 1;
  v147 = v146;
  v144[0] = &off_1E95AFFE8;
  v145 = v144;
  v146[0] = &off_1E95AFF90;
  v150 = v149;
  *(_QWORD *)&buf = v127;
  v148 = &v127;
  v149[0] = &off_1E95AFFE8;
  sub_1D3E0E778(v127, (os_signpost_id_t *)&buf);
  v18 = v145;
  if (v145 == v144)
  {
    v19 = 4;
    v18 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_21;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_21:
  v20 = v147;
  if (v147 == v146)
  {
    v21 = 4;
    v20 = v146;
    goto LABEL_25;
  }
  if (v147)
  {
    v21 = 5;
LABEL_25:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  sub_1D3E36CA0();
  v22 = atomic_load((unint64_t *)a2);
  if (!v22 || (v23 = (unint64_t *)(a2 + 8), (v24 = atomic_load((unint64_t *)(a2 + 8))) == 0))
  {
    *(_QWORD *)&buf = -3001;
    __dst.__locale_ = (std::locale::__imp *)CFSTR("Missing symbology and/or raw payload data.");
    sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
LABEL_56:
    *a1 = 0;
    goto LABEL_57;
  }
  if (v128)
  {
    if (qword_1EFE31820 != -1)
      dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
    v25 = v127;
    if (v127 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v26 = qword_1EFE31818;
      if (os_signpost_enabled((os_log_t)qword_1EFE31818))
      {
        v27 = atomic_load((unint64_t *)a2);
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v27;
        _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v26, OS_SIGNPOST_EVENT, v25, "PayloadDecoding", "symbology=%{public, signpost.description:attribute}@", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  v28 = (const __CFData *)atomic_load(v23);
  BytePtr = CFDataGetBytePtr(v28);
  v30 = (const __CFData *)atomic_load(v23);
  Length = CFDataGetLength(v30);
  v32 = (const __CFString *)atomic_load((unint64_t *)&v132);
  if (v32)
  {
    CStringPtr = CFStringGetCStringPtr(v32, 0x8000100u);
    if (!CStringPtr)
    {
      v34 = CFStringGetLength(v32);
      v35 = CFStringGetMaximumSizeForEncoding(v34, 0x8000100u) + 1;
      v36 = (char *)malloc_type_malloc(v35, 0xDDF3B767uLL);
      CString = CFStringGetCString(v32, v36, v35, 0x8000100u);
      v38 = CString != 1;
      if (CString == 1)
        CStringPtr = v36;
      else
        CStringPtr = 0;
      if (!BytePtr)
        goto LABEL_55;
      goto LABEL_44;
    }
  }
  else
  {
    CStringPtr = 0;
  }
  v36 = 0;
  v38 = 0;
  if (!BytePtr)
  {
LABEL_55:
    *(_QWORD *)&buf = -3001;
    __dst.__locale_ = (std::locale::__imp *)CFSTR("Empty or bogus raw payload data.");
    sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
    goto LABEL_56;
  }
LABEL_44:
  if (!Length || v38)
    goto LABEL_55;
  v125 = (char *)CStringPtr;
  *a1 = 0;
  v143 = 0;
  v39 = (const __CFString *)atomic_load((unint64_t *)a2);
  if (sub_1D3E37508(v39, &v143))
  {
    LOBYTE(buf) = 0;
    BYTE8(buf) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      *(_QWORD *)&buf = *(_QWORD *)(a2 + 160);
      BYTE8(buf) = 1;
    }
    sub_1D3E0E818((unint64_t *)&__dst, v143, (uint64_t)&buf, (unint64_t *)(a2 + 8), (uint64_t)v125);
    do
      v40 = __ldaxr((unint64_t *)&__dst);
    while (__stlxr(0, (unint64_t *)&__dst));
    do
      v41 = (const void *)__ldaxr(a1);
    while (__stlxr(v40, a1));
    if (v41)
      CFRelease(v41);
    sub_1D3D8C70C((unint64_t *)&__dst);
    goto LABEL_178;
  }
  v48 = sub_1D3D911D4((unint64_t *)a2);
  if (!HIDWORD(v48) || v48 != 2)
  {
    v53 = atomic_load((unint64_t *)a2);
    if (!v53
      || (v54 = (const __CFString *)atomic_load((unint64_t *)a2), CFStringCompare(v54, CFSTR("AppClipCode"), 0)))
    {
      v55 = v36;
      p_buf = (uint64_t **)&buf;
      *((_QWORD *)&buf + 1) = 0;
      v152 = 0;
      *(_QWORD *)&buf = (char *)&buf + 8;
      if (*(_BYTE *)(a2 + 120))
        p_buf = (uint64_t **)(a2 + 96);
      v124 = p_buf;
      LODWORD(numBytes) = 0;
      __dst.__locale_ = (std::locale::__imp *)&off_1E95AF9B0;
      v142 = 0;
      v57 = operator new();
      *(_DWORD *)(v57 + 8) = 0;
      v58 = (unsigned int *)(v57 + 8);
      *(_QWORD *)v57 = &off_1E95AF5C0;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0;
      *(_QWORD *)(v57 + 16) = 0;
      sub_1D3DB8410((_QWORD *)(v57 + 16), BytePtr, (uint64_t)&BytePtr[Length], Length);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      if (v142)
        sub_1D3D6D13C(v142);
      v142 = (unsigned int *)v57;
      v138 = 0;
      v139 = 0;
      v60 = (const __CFString *)atomic_load((unint64_t *)a2);
      if (CFStringCompare(v60, CFSTR("QR"), 1uLL))
      {
        v61 = (const __CFString *)atomic_load((unint64_t *)a2);
        if (CFStringCompare(v61, CFSTR("MicroQR"), 1uLL))
        {
          v62 = (const __CFString *)atomic_load((unint64_t *)a2);
          if (CFStringCompare(v62, CFSTR("Aztec"), 1uLL))
          {
            v63 = (const __CFString *)atomic_load((unint64_t *)a2);
            if (CFStringCompare(v63, CFSTR("DataMatrix"), 1uLL))
              goto LABEL_144;
            v135 = 0;
            v134 = (CFStringRef)&off_1E95AF9B0;
            v136 = 0;
            v64 = v142;
            if (v142)
            {
              v65 = v142 + 2;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
              if (v136)
                sub_1D3D6D13C(v136);
            }
            v136 = v64;
            sub_1D3DC7EF8((uint64_t *)&v137, (uint64_t)v64, v125);
            v67 = v137;
            if (v137)
            {
              v68 = v137 + 2;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v70 = v138;
            if (!v138)
            {
LABEL_143:
              v138 = v67;
              sub_1D3D7F814(&v137);
              sub_1D3D7F558(&v134);
LABEL_144:
              if (v138)
              {
                v96 = (unsigned int *)*((_QWORD *)v138 + 5);
                if (v96)
                {
                  v97 = v96 + 2;
                  do
                    v98 = __ldxr(v97);
                  while (__stxr(v98 + 1, v97));
                  do
                    v99 = __ldxr(v97);
                  while (__stxr(v99 + 1, v97));
                  v100 = v96;
                }
                else
                {
                  v100 = 0;
                }
                v137 = v100;
                if (v139)
                  sub_1D3D6D13C(v139);
                v139 = v96;
                sub_1D3D7F598(&v137);
              }
              if (v139)
              {
                v101 = *((char *)v139 + 39);
                if (v101 >= 0)
                  v102 = *((unsigned __int8 *)v139 + 39);
                else
                  v102 = *((_QWORD *)v139 + 3);
                if (v102)
                {
                  if (v101 >= 0)
                    v103 = (const UInt8 *)(v139 + 4);
                  else
                    v103 = (const UInt8 *)*((_QWORD *)v139 + 2);
                  v36 = v55;
                  v137 = (unsigned int *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v103, v102, 0x8000100u, 0);
                  do
                    v104 = __ldaxr((unint64_t *)&v137);
                  while (__stlxr(0, (unint64_t *)&v137));
                  do
                    v105 = (const void *)__ldaxr(a1);
                  while (__stlxr(v104, a1));
                  if (!v105)
                    goto LABEL_177;
                }
                else
                {
                  v36 = v55;
                  v137 = (unsigned int *)CFRetain(&stru_1E95B5208);
                  do
                    v107 = __ldaxr((unint64_t *)&v137);
                  while (__stlxr(0, (unint64_t *)&v137));
                  do
                    v105 = (const void *)__ldaxr(a1);
                  while (__stlxr(v107, a1));
                  if (!v105)
                    goto LABEL_177;
                }
              }
              else
              {
                v36 = v55;
                v137 = (unsigned int *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], BytePtr, Length, 0x8000100u, 0);
                do
                  v106 = __ldaxr((unint64_t *)&v137);
                while (__stlxr(0, (unint64_t *)&v137));
                do
                  v105 = (const void *)__ldaxr(a1);
                while (__stlxr(v106, a1));
                if (!v105)
                  goto LABEL_177;
              }
              CFRelease(v105);
LABEL_177:
              sub_1D3D8C70C((unint64_t *)&v137);
              sub_1D3D7F814(&v138);
              sub_1D3D7F598(&v139);
              sub_1D3D7F558(&__dst);
              sub_1D3D7F520(*((_QWORD **)&buf + 1));
              goto LABEL_178;
            }
          }
          else
          {
            v135 = 0;
            v134 = (CFStringRef)&off_1E95AF9B0;
            v136 = 0;
            v91 = v142;
            if (v142)
            {
              v92 = v142 + 2;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
              if (v136)
                sub_1D3D6D13C(v136);
            }
            v136 = v91;
            sub_1D3D80DB4((uint64_t *)&v137, (uint64_t)&v134, v124, v125);
            v67 = v137;
            if (v137)
            {
              v94 = v137 + 2;
              do
                v95 = __ldxr(v94);
              while (__stxr(v95 + 1, v94));
            }
            v70 = v138;
            if (!v138)
              goto LABEL_143;
          }
        }
        else
        {
          v135 = 0;
          v134 = (CFStringRef)&off_1E95AF9B0;
          v136 = 0;
          v86 = v142;
          if (v142)
          {
            v87 = v142 + 2;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
            if (v136)
              sub_1D3D6D13C(v136);
          }
          v136 = v86;
          sub_1D3E16F3C((uint64_t *)&v137, (uint64_t)&v134, v124, v125);
          v67 = v137;
          if (v137)
          {
            v89 = v137 + 2;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          v70 = v138;
          if (!v138)
            goto LABEL_143;
        }
      }
      else
      {
        v135 = 0;
        v134 = (CFStringRef)&off_1E95AF9B0;
        v136 = 0;
        v71 = v142;
        if (v142)
        {
          v72 = v142 + 2;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
          if (v136)
            sub_1D3D6D13C(v136);
        }
        v136 = v71;
        sub_1D3E013B8((uint64_t *)&v137, (uint64_t)v71, v124, v125);
        v67 = v137;
        if (v137)
        {
          v74 = v137 + 2;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v70 = v138;
        if (!v138)
          goto LABEL_143;
      }
      sub_1D3D6D13C(v70);
      goto LABEL_143;
    }
    if (!atomic_load(v23))
      goto LABEL_178;
    v77 = (const __CFData *)atomic_load(v23);
    v78 = CFDataGetBytePtr(v77);
    v79 = (const __CFData *)atomic_load(v23);
    v80 = CFDataGetLength(v79);
    sub_1D3DDC604((uint64_t)&buf);
    if (v80 >= 1)
    {
      do
      {
        v81 = v152;
        *(_QWORD *)&v153[*(_QWORD *)(v152 - 24) + 16] = 2;
        v82 = (const std::ios_base *)&v153[*(_QWORD *)(v81 - 24) - 8];
        if (v82[1].__fmtflags_ == -1)
        {
          std::ios_base::getloc(v82);
          v83 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 32);
          std::locale::~locale(&__dst);
          v81 = v152;
        }
        v82[1].__fmtflags_ = 48;
        *(_DWORD *)&v153[*(_QWORD *)(v81 - 24)] = *(_DWORD *)&v153[*(_QWORD *)(v81 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        ++v78;
        --v80;
      }
      while (v80);
    }
    sub_1D3D93B64(&__dst, (uint64_t)v153);
    if (SHIBYTE(v142) < 0)
    {
      v84 = numBytes;
      if (!numBytes)
      {
LABEL_227:
        operator delete(__dst.__locale_);
        goto LABEL_228;
      }
      locale = (const UInt8 *)__dst.__locale_;
    }
    else
    {
      v84 = HIBYTE(v142);
      if (!HIBYTE(v142))
      {
LABEL_228:
        sub_1D3DDC730((uint64_t)&buf);
        goto LABEL_178;
      }
      locale = (const UInt8 *)&__dst;
    }
    v134 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], locale, v84, 0x8000100u, 0);
    do
      v122 = __ldaxr((unint64_t *)&v134);
    while (__stlxr(0, (unint64_t *)&v134));
    do
      v123 = (const void *)__ldaxr(a1);
    while (__stlxr(v122, a1));
    if (v123)
      CFRelease(v123);
    sub_1D3D8C70C((unint64_t *)&v134);
    if ((SHIBYTE(v142) & 0x80000000) == 0)
      goto LABEL_228;
    goto LABEL_227;
  }
  v49 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v50 = (const __CFData *)atomic_load(v23);
  v51 = CFStringCreateFromExternalRepresentation(v49, v50, 0x8000100u);
  do
    v52 = (const void *)__ldaxr(a1);
  while (__stlxr((unint64_t)v51, a1));
  if (v52)
    CFRelease(v52);
LABEL_178:
  if (HIBYTE(v133))
    v108 = *(_BYTE *)(a2 + 192) == 0;
  else
    v108 = 1;
  if (!v108)
  {
    if (*(_BYTE *)(a2 + 176))
    {
LABEL_183:
      v109 = *(_QWORD *)(a2 + 168) - 3;
      if (v109 >= 3)
      {
        if (qword_1EFE31820 != -1)
          dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
        v116 = qword_1EFE31818;
        if (os_log_type_enabled((os_log_t)qword_1EFE31818, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1D3D6B000, v116, OS_LOG_TYPE_ERROR, "Invalid supplemental composite flag.", (uint8_t *)&buf, 2u);
        }
        *(_QWORD *)&buf = -3001;
        __dst.__locale_ = (std::locale::__imp *)CFSTR("Invalid supplemental composite flag.");
        sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
      }
      else
      {
        v110 = dword_1D3E6EFB4[v109];
        v111 = (unint64_t *)(a2 + 184);
        if (atomic_load((unint64_t *)(a2 + 184)))
        {
          v113 = (const __CFData *)atomic_load(v111);
          if (CFDataGetLength(v113))
          {
            *(_QWORD *)&buf = *(_QWORD *)(a2 + 168);
            BYTE8(buf) = 1;
            sub_1D3E0E818((unint64_t *)&__dst, v110, (uint64_t)&buf, v111, (uint64_t)v125);
            do
              v114 = __ldaxr((unint64_t *)&__dst);
            while (__stlxr(0, (unint64_t *)&__dst));
            do
              v115 = (const void *)__ldaxr(&v131);
            while (__stlxr(v114, &v131));
            if (v115)
              CFRelease(v115);
            sub_1D3D8C70C((unint64_t *)&__dst);
          }
          else
          {
            if (qword_1EFE31820 != -1)
              dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
            v120 = qword_1EFE31818;
            if (os_log_type_enabled((os_log_t)qword_1EFE31818, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_error_impl(&dword_1D3D6B000, v120, OS_LOG_TYPE_ERROR, "Empty supplemental raw payload data.", (uint8_t *)&buf, 2u);
            }
            *(_QWORD *)&buf = -3001;
            __dst.__locale_ = (std::locale::__imp *)CFSTR("Empty supplemental raw payload data.");
            sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
          }
        }
        else
        {
          if (qword_1EFE31820 != -1)
            dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
          v119 = qword_1EFE31818;
          if (os_log_type_enabled((os_log_t)qword_1EFE31818, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl(&dword_1D3D6B000, v119, OS_LOG_TYPE_ERROR, "Missing supplemental raw payload data.", (uint8_t *)&buf, 2u);
          }
          *(_QWORD *)&buf = -3001;
          __dst.__locale_ = (std::locale::__imp *)CFSTR("Missing supplemental raw payload data.");
          sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
        }
      }
      goto LABEL_214;
    }
    if (atomic_load((unint64_t *)(a2 + 184)))
    {
      if (!*(_BYTE *)(a2 + 176))
      {
        if (qword_1EFE31820 != -1)
          dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
        v118 = qword_1EFE31818;
        if (os_log_type_enabled((os_log_t)qword_1EFE31818, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1D3D6B000, v118, OS_LOG_TYPE_ERROR, "Missing supplemental composite flag.", (uint8_t *)&buf, 2u);
        }
        *(_QWORD *)&buf = -3001;
        __dst.__locale_ = (std::locale::__imp *)CFSTR("Missing supplemental composite flag.");
        sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
        goto LABEL_214;
      }
      goto LABEL_183;
    }
  }
LABEL_214:
  if (v36)
    free(v36);
  v121 = atomic_load(a1);
  if (!v121 && !v130)
  {
    *(_QWORD *)&buf = -3001;
    __dst.__locale_ = (std::locale::__imp *)CFSTR("Unable to decode the raw payload data as string value.");
    sub_1D3D73E0C(v129, (uint64_t *)&buf, (CFTypeRef *)&__dst.__locale_);
  }
LABEL_57:
  v42 = v150;
  if (*((_BYTE *)v148 + 8))
  {
    if (!v150)
      goto LABEL_65;
    *(_QWORD *)&buf = *v148;
    (*(void (**)(void))(*v150 + 48))();
    v42 = v150;
  }
  if (v42 == v149)
  {
    v43 = 4;
    v42 = v149;
    goto LABEL_64;
  }
  if (v42)
  {
    v43 = 5;
LABEL_64:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
LABEL_65:
  if (a4 && HIBYTE(v133))
  {
    do
      v44 = __ldaxr(&v131);
    while (__stlxr(0, &v131));
    *a4 = v44;
  }
  v45 = v130;
  if (a5 && v130)
  {
    sub_1D3DF53CC((CFErrorRef *)&buf, (uint64_t)v129);
    do
      v46 = __ldaxr((unint64_t *)&buf);
    while (__stlxr(0, (unint64_t *)&buf));
    *a5 = v46;
    sub_1D3D7448C((unint64_t *)&buf);
    v45 = v130;
  }
  if (v45)
    sub_1D3DF4F24(v129);
  sub_1D3D8C70C(&v131);
  return sub_1D3D8C70C((unint64_t *)&v132);
}

void sub_1D3E0E580(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,unint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34,unsigned int *a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  unint64_t *v54;

  sub_1D3D7F814(&a34);
  sub_1D3D7F598(&a35);
  sub_1D3D7F558(&__p);
  sub_1D3D7F520((_QWORD *)a54);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1D3E0E188);
  }
  sub_1D3D8C70C(v54);
  sub_1D3D87C3C(&a48);
  if (a26)
    sub_1D3DF4F24(&a14);
  sub_1D3D8C70C(&a27);
  sub_1D3D8C70C(&a28);
  _Unwind_Resume(a1);
}

void sub_1D3E0E778(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31820 != -1)
    dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31818;
    if (os_signpost_enabled((os_log_t)qword_1EFE31818))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Descriptor::decodePayload", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3E0E818(unint64_t *a1, int a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  const __CFData *v10;
  const UInt8 *BytePtr;
  const __CFData *v12;
  CFIndex Length;
  char *v14;
  size_t v15;
  UInt8 *v16;
  UInt8 *v17;
  unint64_t v18;
  const void *v19;
  unint64_t v20;
  CFStringRef v22;
  CFIndex numBytes;
  uint64_t v24;
  CFIndex v25;
  const UInt8 *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v10 = (const __CFData *)atomic_load(a4);
  BytePtr = CFDataGetBytePtr(v10);
  v12 = (const __CFData *)atomic_load(a4);
  Length = CFDataGetLength(v12);
  *a1 = 0;
  v34 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v14 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
  v30 = v14;
  v28 = 0u;
  v29 = 0u;
  *((_QWORD *)v14 + 8) = 0;
  *((_DWORD *)v14 + 18) = 0;
  *((_QWORD *)v14 + 10) = 0;
  *(_OWORD *)(v14 + 44) = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *(_OWORD *)v14 = 0u;
  if (*(_BYTE *)(a3 + 8) && (unint64_t)(*(_QWORD *)a3 - 3) <= 2)
    HIDWORD(v24) = *(_DWORD *)a3 - 2;
  LODWORD(v24) = a2;
  v25 = Length;
  v26 = BytePtr;
  v15 = (4 * Length) | 1;
  v16 = (UInt8 *)malloc_type_malloc(v15, 0x51117F6FuLL);
  v17 = v16;
  numBytes = 0x7FFFFFFFLL;
  if (a2 < 0 || dword_1EDB89DD8 <= a2)
  {
    *v16 = 0;
    goto LABEL_15;
  }
  (*(void (**)(uint64_t *, UInt8 *, size_t, CFIndex *, uint64_t))&dword_1EDB895D0[16
                                                                                         * (unint64_t)a2
                                                                                         + 8])(&v24, v16, v15, &numBytes, a5);
  if (!v17)
    goto LABEL_23;
  if (numBytes)
  {
    if (numBytes != 0x7FFFFFFF)
    {
      v22 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, numBytes, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
      do
        v18 = __ldaxr((unint64_t *)&v22);
      while (__stlxr(0, (unint64_t *)&v22));
      do
        v19 = (const void *)__ldaxr(a1);
      while (__stlxr(v18, a1));
      if (!v19)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_15:
    v22 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v17, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    do
      v20 = __ldaxr((unint64_t *)&v22);
    while (__stlxr(0, (unint64_t *)&v22));
    do
      v19 = (const void *)__ldaxr(a1);
    while (__stlxr(v20, a1));
    if (!v19)
      goto LABEL_20;
LABEL_19:
    CFRelease(v19);
LABEL_20:
    sub_1D3D8C70C((unint64_t *)&v22);
  }
  if (!atomic_load(a1))
    free(v17);
LABEL_23:
  v25 = 0;
  v26 = 0;
  sub_1D3E36E54((uint64_t)&v24);
}

void sub_1D3E0EA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_1D3D8C70C((unint64_t *)va);
  sub_1D3D8C70C(v2);
  _Unwind_Resume(a1);
}

void sub_1D3E0EA7C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0EA90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AFFE8;
  return result;
}

void sub_1D3E0EAB4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AFFE8;
}

void sub_1D3E0EACC(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EFE31820 != -1)
    dispatch_once(&qword_1EFE31820, &unk_1E95B33A8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EFE31818;
    if (os_signpost_enabled((os_log_t)qword_1EFE31818))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "Descriptor::decodePayload", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3E0EB6C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc10Descriptor13decodePayloadERKNS0_22PayloadDecodingOptionsERNS_5CFRefIPK10__CFStringEERNSt3__18optionalINS_5ErrorEEERKNSB_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0EBA4()
{
  return &unk_1E95AEBB0;
}

void sub_1D3E0EBB4()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0EBC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AFF90;
  return result;
}

void sub_1D3E0EBEC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AFF90;
}

uint64_t sub_1D3E0EC04(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc10Descriptor13decodePayloadERKNS0_22PayloadDecodingOptionsERNS_5CFRefIPK10__CFStringEERNSt3__18optionalINS_5ErrorEEERKNSB_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0EC3C()
{
  return &unk_1E95AEBA0;
}

uint64_t sub_1D3E0EC48(unint64_t *a1, const void *a2)
{
  unint64_t v2;
  const __CFDictionary *v3;
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;
  int v7;

  v2 = atomic_load(a1);
  if (!v2)
    goto LABEL_7;
  v3 = (const __CFDictionary *)atomic_load(a1);
  Value = (const __CFBoolean *)CFDictionaryGetValue(v3, a2);
  if (!Value)
  {
    LODWORD(v2) = 0;
LABEL_7:
    v7 = 0;
    return v2 | (v7 << 8);
  }
  v5 = Value;
  v6 = CFGetTypeID(Value);
  if (v6 != CFBooleanGetTypeID())
    _os_assumes_log();
  LODWORD(v2) = CFBooleanGetValue(v5) != 0;
  v7 = 1;
  return v2 | (v7 << 8);
}

uint64_t sub_1D3E0ECC4()
{
  return 1;
}

uint64_t sub_1D3E0ECCC()
{
  return 1;
}

uint64_t sub_1D3E0ECD4()
{
  uint64_t result;

  result = MGIsQuestionValid();
  if ((_DWORD)result)
    result = MGGetBoolAnswer();
  byte_1EDB89F50 = result;
  return result;
}

void sub_1D3E0ED08(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "YpCbCrToRGBImageConverter::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3E0EDAC()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0EDC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD368;
  return result;
}

void sub_1D3E0EDE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD368;
}

void sub_1D3E0EDFC(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "YpCbCrToRGBImageConverter::prepare", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3E0EE9C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference25YpCbCrToRGBImageConverter7prepareERKNSt3__18optionalImEES6_RNS3_INS_5ErrorEEERKNS3_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0EED4()
{
  return &unk_1E95ACF08;
}

void sub_1D3E0EEE4()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0EEF8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95AD310;
  return result;
}

void sub_1D3E0EF1C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95AD310;
}

uint64_t sub_1D3E0EF34(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc9inference25YpCbCrToRGBImageConverter7prepareERKNSt3__18optionalImEES6_RNS3_INS_5ErrorEEERKNS3_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0EF6C()
{
  return &unk_1E95ACEF8;
}

void sub_1D3E0EF78(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "YpCbCrToRGBImageConverter::convert", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

void sub_1D3E0F01C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0F030()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95ADAA0;
  return result;
}

void sub_1D3E0F054(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95ADAA0;
}

void sub_1D3E0F06C(uint64_t a1, os_signpost_id_t *a2)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *a2;
  if (qword_1EDB89F90 != -1)
    dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = qword_1EDB89F98;
    if (os_signpost_enabled((os_log_t)qword_1EDB89F98))
    {
      *(_WORD *)v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v3, OS_SIGNPOST_INTERVAL_END, v2, "YpCbCrToRGBImageConverter::convert", (const char *)&unk_1D3E89A2B, v4, 2u);
    }
  }
}

uint64_t sub_1D3E0F10C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc9inference25YpCbCrToRGBImageConverter7convertEjRK13vImage_BufferS4_jS4_RNSt3__18optionalINS_5ErrorEEERKNS6_IyEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0F144()
{
  return &unk_1E95AD058;
}

void sub_1D3E0F154()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0F168()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E95ADA48;
  return result;
}

void sub_1D3E0F18C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E95ADA48;
}

uint64_t sub_1D3E0F1A4(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3mrc9inference25YpCbCrToRGBImageConverter7convertEjRK13vImage_BufferS4_jS4_RNSt3__18optionalINS_5ErrorEEERKNS6_IyEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_1D3E0F1DC()
{
  return &unk_1E95AD048;
}

void sub_1D3E0F1EC(_QWORD *a1)
{
  sub_1D3E0F210(a1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E0F210(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;

  *a1 = &off_1E95AF928;
  v2 = a1[2];
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1D8254C54](v2, 0x10C402FEFCB83);
  }
  v4 = (_QWORD *)a1[3];
  v5 = (_BYTE *)a1[4];
  if (v5 != (_BYTE *)v4)
  {
    v6 = 0;
    while (1)
    {
      v7 = v4[v6];
      if (v7)
        break;
LABEL_16:
      if (++v6 >= (unint64_t)((v5 - (_BYTE *)v4) >> 3))
        goto LABEL_21;
    }
    v8 = *(_QWORD **)(v7 + 8);
    v9 = *(_BYTE **)(v7 + 16);
    if (v9 == (_BYTE *)v8)
    {
      v8 = *(_QWORD **)(v7 + 16);
      if (!v9)
        goto LABEL_15;
    }
    else
    {
      v10 = 0;
      do
      {
        if (v8[v10])
        {
          MEMORY[0x1D8254C54](v8[v10], 0x1000C4000313F17);
          v8 = *(_QWORD **)(v7 + 8);
          v9 = *(_BYTE **)(v7 + 16);
        }
        ++v10;
      }
      while (v10 < (v9 - (_BYTE *)v8) >> 3);
      if (!v8)
        goto LABEL_15;
    }
    *(_QWORD *)(v7 + 16) = v8;
    operator delete(v8);
LABEL_15:
    MEMORY[0x1D8254C54](v7, 0x1080C406BDE4C18);
    v4 = (_QWORD *)a1[3];
    v5 = (_BYTE *)a1[4];
    goto LABEL_16;
  }
  v4 = (_QWORD *)a1[4];
LABEL_21:
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D3E0F328(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char **v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a3;
  *(_DWORD *)a1 = a2;
  v6 = (char **)(a1 + 8);
  sub_1D3DD6B90((_QWORD *)(a1 + 8), &v21);
  v8 = *(_QWORD **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v8 >= v7)
  {
    v10 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1D3D6D4F8();
    v11 = v7 - (_QWORD)*v6;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v13 = (unint64_t)sub_1D3D6D8A0(v13);
    else
      v14 = 0;
    v15 = (_QWORD *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    *v15 = a4;
    v9 = v15 + 1;
    v18 = *(char **)(a1 + 8);
    v17 = *(char **)(a1 + 16);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = *v6;
    }
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v8 = a4;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 16) = v9;
  return a1;
}

void sub_1D3E0F41C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3E0F438(int a1)
{
  unint64_t v2;
  _QWORD *exception;
  uint64_t (**v5)();
  uint64_t (*v6)();

  v2 = atomic_load(qword_1EDB89E00);
  if (v2 != -1)
  {
    v5 = &v6;
    v6 = sub_1D3E0F504;
    std::__call_once(qword_1EDB89E00, &v5, (void (__cdecl *)(void *))sub_1D3DD8A78);
  }
  if (a1 < 1
    || a1 > (unint64_t)((uint64_t)(*(_QWORD *)(qword_1EDB89E68 + 8) - *(_QWORD *)qword_1EDB89E68) >> 3))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3E17508(exception, "versionNumber must be between 1 and 40");
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE1E8, (void (*)(void *))sub_1D3E174E0);
  }
  return *(_QWORD *)(*(_QWORD *)qword_1EDB89E68 + 8 * (a1 - 1));
}

void sub_1D3E0F4F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E0F504()
{
  uint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int **v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int **v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int **v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unsigned int *v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int **v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int **v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unsigned int *v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int **v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  unsigned int *v179;
  unsigned int v180;
  unint64_t v181;
  unsigned int **v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unsigned int *v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  unsigned int *v204;
  unsigned int v205;
  unint64_t v206;
  unsigned int **v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  unsigned int *v230;
  unsigned int v231;
  unint64_t v232;
  unsigned int **v233;
  uint64_t v234;
  unsigned int *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unsigned int *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  unsigned int *v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int **v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  unsigned int *v281;
  unsigned int v282;
  unint64_t v283;
  unsigned int **v284;
  uint64_t v285;
  unsigned int *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  unsigned int *v306;
  unsigned int v307;
  unint64_t v308;
  unsigned int **v309;
  uint64_t v310;
  unsigned int *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  unsigned int *v332;
  unsigned int v333;
  unint64_t v334;
  unsigned int **v335;
  uint64_t v336;
  unsigned int *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  unsigned int *v358;
  unsigned int v359;
  unint64_t v360;
  unsigned int **v361;
  uint64_t v362;
  unsigned int *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  unsigned int *v384;
  unsigned int v385;
  unint64_t v386;
  unsigned int **v387;
  uint64_t v388;
  unsigned int *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  unsigned int *v410;
  unsigned int v411;
  unint64_t v412;
  unsigned int **v413;
  uint64_t v414;
  unsigned int *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  uint64_t v427;
  _QWORD *v428;
  _QWORD *v429;
  uint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  uint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  unsigned int *v436;
  unsigned int v437;
  unint64_t v438;
  unsigned int **v439;
  uint64_t v440;
  unsigned int *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t v456;
  _QWORD *v457;
  _QWORD *v458;
  uint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  unsigned int *v462;
  unsigned int v463;
  unint64_t v464;
  unsigned int **v465;
  uint64_t v466;
  unsigned int *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  _QWORD *v477;
  _QWORD *v478;
  uint64_t v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t v482;
  _QWORD *v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  _QWORD *v487;
  unsigned int *v488;
  unsigned int v489;
  unint64_t v490;
  unsigned int **v491;
  uint64_t v492;
  unsigned int *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  _QWORD *v503;
  _QWORD *v504;
  uint64_t v505;
  unsigned int *v506;
  uint64_t v507;
  _QWORD *v508;
  _QWORD *v509;
  uint64_t v510;
  _QWORD *v511;
  _QWORD *v512;
  unsigned int *v513;
  unsigned int v514;
  unint64_t v515;
  unsigned int **v516;
  uint64_t v517;
  unsigned int *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;
  unsigned int *v531;
  uint64_t v532;
  _QWORD *v533;
  _QWORD *v534;
  uint64_t v535;
  unsigned int *v536;
  unsigned int *v537;
  unsigned int v538;
  unint64_t v539;
  unsigned int **v540;
  uint64_t v541;
  unsigned int *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  uint64_t v554;
  _QWORD *v555;
  _QWORD *v556;
  uint64_t v557;
  _QWORD *v558;
  _QWORD *v559;
  uint64_t v560;
  _QWORD *v561;
  _QWORD *v562;
  unsigned int *v563;
  unsigned int v564;
  unint64_t v565;
  unsigned int **v566;
  uint64_t v567;
  unsigned int *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  _QWORD *v578;
  _QWORD *v579;
  uint64_t v580;
  _QWORD *v581;
  _QWORD *v582;
  uint64_t v583;
  _QWORD *v584;
  _QWORD *v585;
  uint64_t v586;
  _QWORD *v587;
  _QWORD *v588;
  unsigned int *v589;
  unsigned int v590;
  unint64_t v591;
  unsigned int **v592;
  uint64_t v593;
  unsigned int *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  _QWORD *v602;
  uint64_t v603;
  _QWORD *v604;
  _QWORD *v605;
  uint64_t v606;
  _QWORD *v607;
  _QWORD *v608;
  uint64_t v609;
  _QWORD *v610;
  _QWORD *v611;
  uint64_t v612;
  _QWORD *v613;
  _QWORD *v614;
  unsigned int *v615;
  unsigned int v616;
  unint64_t v617;
  unsigned int **v618;
  uint64_t v619;
  unsigned int *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  _QWORD *v628;
  uint64_t v629;
  _QWORD *v630;
  _QWORD *v631;
  uint64_t v632;
  _QWORD *v633;
  _QWORD *v634;
  uint64_t v635;
  _QWORD *v636;
  _QWORD *v637;
  uint64_t v638;
  _QWORD *v639;
  _QWORD *v640;
  unsigned int *v641;
  unsigned int v642;
  unint64_t v643;
  unsigned int **v644;
  uint64_t v645;
  unsigned int *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  _QWORD *v656;
  _QWORD *v657;
  uint64_t v658;
  _QWORD *v659;
  _QWORD *v660;
  uint64_t v661;
  _QWORD *v662;
  _QWORD *v663;
  uint64_t v664;
  _QWORD *v665;
  _QWORD *v666;
  unsigned int *v667;
  unsigned int v668;
  unint64_t v669;
  unsigned int **v670;
  uint64_t v671;
  unsigned int *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _QWORD *v680;
  uint64_t v681;
  _QWORD *v682;
  _QWORD *v683;
  uint64_t v684;
  _QWORD *v685;
  _QWORD *v686;
  uint64_t v687;
  _QWORD *v688;
  _QWORD *v689;
  uint64_t v690;
  _QWORD *v691;
  _QWORD *v692;
  unsigned int *v693;
  unsigned int v694;
  unint64_t v695;
  unsigned int **v696;
  uint64_t v697;
  unsigned int *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  _QWORD *v708;
  _QWORD *v709;
  uint64_t v710;
  _QWORD *v711;
  _QWORD *v712;
  uint64_t v713;
  _QWORD *v714;
  _QWORD *v715;
  uint64_t v716;
  _QWORD *v717;
  _QWORD *v718;
  unsigned int *v719;
  unsigned int v720;
  unint64_t v721;
  unsigned int **v722;
  uint64_t v723;
  unsigned int *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  _QWORD *v734;
  _QWORD *v735;
  uint64_t v736;
  _QWORD *v737;
  _QWORD *v738;
  uint64_t v739;
  _QWORD *v740;
  _QWORD *v741;
  uint64_t v742;
  _QWORD *v743;
  _QWORD *v744;
  unsigned int *v745;
  unsigned int v746;
  unint64_t v747;
  unsigned int **v748;
  uint64_t v749;
  unsigned int *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  _QWORD *v760;
  _QWORD *v761;
  uint64_t v762;
  _QWORD *v763;
  _QWORD *v764;
  uint64_t v765;
  _QWORD *v766;
  _QWORD *v767;
  uint64_t v768;
  _QWORD *v769;
  _QWORD *v770;
  unsigned int *v771;
  unsigned int v772;
  unint64_t v773;
  unsigned int **v774;
  uint64_t v775;
  unsigned int *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  _QWORD *v784;
  uint64_t v785;
  unsigned int *v786;
  uint64_t v787;
  _QWORD *v788;
  _QWORD *v789;
  uint64_t v790;
  _QWORD *v791;
  _QWORD *v792;
  uint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  unsigned int *v796;
  unsigned int v797;
  unint64_t v798;
  unsigned int **v799;
  uint64_t v800;
  unsigned int *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  _QWORD *v811;
  _QWORD *v812;
  uint64_t v813;
  _QWORD *v814;
  _QWORD *v815;
  uint64_t v816;
  _QWORD *v817;
  _QWORD *v818;
  uint64_t v819;
  _QWORD *v820;
  _QWORD *v821;
  unsigned int *v822;
  unsigned int v823;
  unint64_t v824;
  unsigned int **v825;
  uint64_t v826;
  unsigned int *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  _QWORD *v835;
  uint64_t v836;
  _QWORD *v837;
  _QWORD *v838;
  uint64_t v839;
  _QWORD *v840;
  _QWORD *v841;
  uint64_t v842;
  _QWORD *v843;
  _QWORD *v844;
  uint64_t v845;
  _QWORD *v846;
  _QWORD *v847;
  unsigned int *v848;
  unsigned int v849;
  unint64_t v850;
  unsigned int **v851;
  uint64_t v852;
  unsigned int *v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  _QWORD *v861;
  uint64_t v862;
  _QWORD *v863;
  _QWORD *v864;
  uint64_t v865;
  _QWORD *v866;
  _QWORD *v867;
  uint64_t v868;
  _QWORD *v869;
  _QWORD *v870;
  uint64_t v871;
  _QWORD *v872;
  _QWORD *v873;
  unsigned int *v874;
  unsigned int v875;
  unint64_t v876;
  unsigned int **v877;
  uint64_t v878;
  unsigned int *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  _QWORD *v887;
  uint64_t v888;
  _QWORD *v889;
  _QWORD *v890;
  uint64_t v891;
  _QWORD *v892;
  _QWORD *v893;
  uint64_t v894;
  _QWORD *v895;
  _QWORD *v896;
  uint64_t v897;
  _QWORD *v898;
  _QWORD *v899;
  unsigned int *v900;
  unsigned int v901;
  unint64_t v902;
  unsigned int **v903;
  uint64_t v904;
  unsigned int *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  _QWORD *v915;
  _QWORD *v916;
  uint64_t v917;
  _QWORD *v918;
  _QWORD *v919;
  uint64_t v920;
  _QWORD *v921;
  _QWORD *v922;
  uint64_t v923;
  _QWORD *v924;
  _QWORD *v925;
  unsigned int *v926;
  unsigned int v927;
  unint64_t v928;
  unsigned int **v929;
  uint64_t v930;
  unsigned int *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  _QWORD *v939;
  uint64_t v940;
  _QWORD *v941;
  _QWORD *v942;
  uint64_t v943;
  _QWORD *v944;
  _QWORD *v945;
  uint64_t v946;
  _QWORD *v947;
  _QWORD *v948;
  uint64_t v949;
  _QWORD *v950;
  _QWORD *v951;
  unsigned int *v952;
  unsigned int v953;
  unint64_t v954;
  unsigned int **v955;
  uint64_t v956;
  unsigned int *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  _QWORD *v965;
  uint64_t v966;
  _QWORD *v967;
  _QWORD *v968;
  uint64_t v969;
  _QWORD *v970;
  _QWORD *v971;
  uint64_t v972;
  _QWORD *v973;
  _QWORD *v974;
  uint64_t v975;
  _QWORD *v976;
  _QWORD *v977;
  unsigned int *v978;
  unsigned int v979;
  unint64_t v980;
  unsigned int **v981;
  uint64_t v982;
  unsigned int *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  _QWORD *v991;
  uint64_t v992;
  _QWORD *v993;
  _QWORD *v994;
  uint64_t v995;
  _QWORD *v996;
  _QWORD *v997;
  uint64_t v998;
  _QWORD *v999;
  _QWORD *v1000;
  uint64_t v1001;
  _QWORD *v1002;
  _QWORD *v1003;
  unsigned int *v1004;
  unsigned int v1005;
  unint64_t v1006;
  unsigned int **v1007;
  uint64_t v1009;
  unsigned int *v1010;
  unsigned int *v1011;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = 0;
  qword_1EDB89E68 = v0;
  v1 = (unsigned int *)operator new();
  v9 = sub_1D3E15E44(0, v2, v3, v4, v5, v6, v7, v8, v1009);
  v10 = operator new();
  v11 = (unsigned int *)operator new();
  *(_QWORD *)v11 = 0x1300000001;
  v1011 = v11;
  *(_DWORD *)v10 = 7;
  sub_1D3DD6B90((_QWORD *)(v10 + 8), &v1011);
  v12 = operator new();
  v13 = (unsigned int *)operator new();
  *(_QWORD *)v13 = 0x1000000001;
  v1011 = v13;
  *(_DWORD *)v12 = 10;
  sub_1D3DD6B90((_QWORD *)(v12 + 8), &v1011);
  v14 = operator new();
  v15 = (unsigned int *)operator new();
  *(_QWORD *)v15 = 0xD00000001;
  v1011 = v15;
  *(_DWORD *)v14 = 13;
  sub_1D3DD6B90((_QWORD *)(v14 + 8), &v1011);
  v16 = operator new();
  v17 = (unsigned int *)operator new();
  *(_QWORD *)v17 = 0x900000001;
  v1011 = v17;
  *(_DWORD *)v16 = 17;
  sub_1D3DD6B90((_QWORD *)(v16 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v1, 1, (uint64_t)v9, v10, v12, v14, v16);
  v18 = v1 + 2;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v1010 = v1;
  v20 = *(_QWORD *)(v0 + 8);
  if (v20 >= *(_QWORD *)(v0 + 16))
  {
    v21 = sub_1D3E15FFC((unsigned int ***)v0, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v0, &v1010);
    v21 = (unsigned int **)(v20 + 8);
  }
  *(_QWORD *)(v0 + 8) = v21;
  sub_1D3E161C4(&v1010);
  v22 = qword_1EDB89E68;
  v23 = (unsigned int *)operator new();
  v31 = sub_1D3E15E44(2uLL, v24, v25, v26, v27, v28, v29, v30, 6);
  v32 = operator new();
  v33 = (unsigned int *)operator new();
  *(_QWORD *)v33 = 0x2200000001;
  v1011 = v33;
  *(_DWORD *)v32 = 10;
  sub_1D3DD6B90((_QWORD *)(v32 + 8), &v1011);
  v34 = operator new();
  v35 = (unsigned int *)operator new();
  *(_QWORD *)v35 = 0x1C00000001;
  v1011 = v35;
  *(_DWORD *)v34 = 16;
  sub_1D3DD6B90((_QWORD *)(v34 + 8), &v1011);
  v36 = operator new();
  v37 = (unsigned int *)operator new();
  *(_QWORD *)v37 = 0x1600000001;
  v1011 = v37;
  *(_DWORD *)v36 = 22;
  sub_1D3DD6B90((_QWORD *)(v36 + 8), &v1011);
  v38 = operator new();
  v39 = (unsigned int *)operator new();
  *(_QWORD *)v39 = 0x1000000001;
  v1011 = v39;
  *(_DWORD *)v38 = 28;
  sub_1D3DD6B90((_QWORD *)(v38 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v23, 2, (uint64_t)v31, v32, v34, v36, v38);
  v40 = v23 + 2;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  v1010 = v23;
  v42 = *(_QWORD *)(v22 + 8);
  if (v42 >= *(_QWORD *)(v22 + 16))
  {
    v43 = sub_1D3E15FFC((unsigned int ***)v22, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v22, &v1010);
    v43 = (unsigned int **)(v42 + 8);
  }
  *(_QWORD *)(v22 + 8) = v43;
  sub_1D3E161C4(&v1010);
  v44 = qword_1EDB89E68;
  v45 = (unsigned int *)operator new();
  v53 = sub_1D3E15E44(2uLL, v46, v47, v48, v49, v50, v51, v52, 6);
  v54 = operator new();
  v55 = (unsigned int *)operator new();
  *(_QWORD *)v55 = 0x3700000001;
  v1011 = v55;
  *(_DWORD *)v54 = 15;
  sub_1D3DD6B90((_QWORD *)(v54 + 8), &v1011);
  v56 = operator new();
  v57 = (unsigned int *)operator new();
  *(_QWORD *)v57 = 0x2C00000001;
  v1011 = v57;
  *(_DWORD *)v56 = 26;
  sub_1D3DD6B90((_QWORD *)(v56 + 8), &v1011);
  v58 = operator new();
  v59 = (unsigned int *)operator new();
  *(_QWORD *)v59 = 0x1100000002;
  v1011 = v59;
  *(_DWORD *)v58 = 18;
  sub_1D3DD6B90((_QWORD *)(v58 + 8), &v1011);
  v60 = operator new();
  v61 = (unsigned int *)operator new();
  *(_QWORD *)v61 = 0xD00000002;
  v1011 = v61;
  *(_DWORD *)v60 = 22;
  sub_1D3DD6B90((_QWORD *)(v60 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v45, 3, (uint64_t)v53, v54, v56, v58, v60);
  v62 = v45 + 2;
  do
    v63 = __ldxr(v62);
  while (__stxr(v63 + 1, v62));
  v1010 = v45;
  v64 = *(_QWORD *)(v44 + 8);
  if (v64 >= *(_QWORD *)(v44 + 16))
  {
    v65 = sub_1D3E15FFC((unsigned int ***)v44, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v44, &v1010);
    v65 = (unsigned int **)(v64 + 8);
  }
  *(_QWORD *)(v44 + 8) = v65;
  sub_1D3E161C4(&v1010);
  v66 = qword_1EDB89E68;
  v67 = (unsigned int *)operator new();
  v75 = sub_1D3E15E44(2uLL, v68, v69, v70, v71, v72, v73, v74, 6);
  v76 = operator new();
  v77 = (unsigned int *)operator new();
  *(_QWORD *)v77 = 0x5000000001;
  v1011 = v77;
  *(_DWORD *)v76 = 20;
  sub_1D3DD6B90((_QWORD *)(v76 + 8), &v1011);
  v78 = operator new();
  v79 = (unsigned int *)operator new();
  *(_QWORD *)v79 = 0x2000000002;
  v1011 = v79;
  *(_DWORD *)v78 = 18;
  sub_1D3DD6B90((_QWORD *)(v78 + 8), &v1011);
  v80 = operator new();
  v81 = (unsigned int *)operator new();
  *(_QWORD *)v81 = 0x1800000002;
  v1011 = v81;
  *(_DWORD *)v80 = 26;
  sub_1D3DD6B90((_QWORD *)(v80 + 8), &v1011);
  v82 = operator new();
  v83 = (unsigned int *)operator new();
  *(_QWORD *)v83 = 0x900000004;
  v1011 = v83;
  *(_DWORD *)v82 = 16;
  sub_1D3DD6B90((_QWORD *)(v82 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v67, 4, (uint64_t)v75, v76, v78, v80, v82);
  v84 = v67 + 2;
  do
    v85 = __ldxr(v84);
  while (__stxr(v85 + 1, v84));
  v1010 = v67;
  v86 = *(_QWORD *)(v66 + 8);
  if (v86 >= *(_QWORD *)(v66 + 16))
  {
    v87 = sub_1D3E15FFC((unsigned int ***)v66, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v66, &v1010);
    v87 = (unsigned int **)(v86 + 8);
  }
  *(_QWORD *)(v66 + 8) = v87;
  sub_1D3E161C4(&v1010);
  v88 = qword_1EDB89E68;
  v89 = (unsigned int *)operator new();
  v97 = sub_1D3E15E44(2uLL, v90, v91, v92, v93, v94, v95, v96, 6);
  v98 = operator new();
  v99 = (unsigned int *)operator new();
  *(_QWORD *)v99 = 0x6C00000001;
  v1011 = v99;
  *(_DWORD *)v98 = 26;
  sub_1D3DD6B90((_QWORD *)(v98 + 8), &v1011);
  v100 = operator new();
  v101 = (unsigned int *)operator new();
  *(_QWORD *)v101 = 0x2B00000002;
  v1011 = v101;
  *(_DWORD *)v100 = 24;
  sub_1D3DD6B90((_QWORD *)(v100 + 8), &v1011);
  v102 = operator new();
  v103 = (_QWORD *)operator new();
  *v103 = 0xF00000002;
  v104 = (_QWORD *)operator new();
  *v104 = 0x1000000002;
  sub_1D3E0F328(v102, 18, (uint64_t)v103, (uint64_t)v104);
  v105 = operator new();
  v106 = (_QWORD *)operator new();
  *v106 = 0xB00000002;
  v107 = (_QWORD *)operator new();
  *v107 = 0xC00000002;
  sub_1D3E0F328(v105, 22, (uint64_t)v106, (uint64_t)v107);
  sub_1D3E15EE0((uint64_t)v89, 5, (uint64_t)v97, v98, v100, v102, v105);
  v108 = v89 + 2;
  do
    v109 = __ldxr(v108);
  while (__stxr(v109 + 1, v108));
  v1010 = v89;
  v110 = *(_QWORD *)(v88 + 8);
  if (v110 >= *(_QWORD *)(v88 + 16))
  {
    v111 = sub_1D3E15FFC((unsigned int ***)v88, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v88, &v1010);
    v111 = (unsigned int **)(v110 + 8);
  }
  *(_QWORD *)(v88 + 8) = v111;
  sub_1D3E161C4(&v1010);
  v112 = qword_1EDB89E68;
  v113 = (unsigned int *)operator new();
  v121 = sub_1D3E15E44(2uLL, v114, v115, v116, v117, v118, v119, v120, 6);
  v122 = operator new();
  v123 = (unsigned int *)operator new();
  *(_QWORD *)v123 = 0x4400000002;
  v1011 = v123;
  *(_DWORD *)v122 = 18;
  sub_1D3DD6B90((_QWORD *)(v122 + 8), &v1011);
  v124 = operator new();
  v125 = (unsigned int *)operator new();
  *(_QWORD *)v125 = 0x1B00000004;
  v1011 = v125;
  *(_DWORD *)v124 = 16;
  sub_1D3DD6B90((_QWORD *)(v124 + 8), &v1011);
  v126 = operator new();
  v127 = (unsigned int *)operator new();
  *(_QWORD *)v127 = 0x1300000004;
  v1011 = v127;
  *(_DWORD *)v126 = 24;
  sub_1D3DD6B90((_QWORD *)(v126 + 8), &v1011);
  v128 = operator new();
  v129 = (unsigned int *)operator new();
  *(_QWORD *)v129 = 0xF00000004;
  v1011 = v129;
  *(_DWORD *)v128 = 28;
  sub_1D3DD6B90((_QWORD *)(v128 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v113, 6, (uint64_t)v121, v122, v124, v126, v128);
  v130 = v113 + 2;
  do
    v131 = __ldxr(v130);
  while (__stxr(v131 + 1, v130));
  v1010 = v113;
  v132 = *(_QWORD *)(v112 + 8);
  if (v132 >= *(_QWORD *)(v112 + 16))
  {
    v133 = sub_1D3E15FFC((unsigned int ***)v112, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v112, &v1010);
    v133 = (unsigned int **)(v132 + 8);
  }
  *(_QWORD *)(v112 + 8) = v133;
  sub_1D3E161C4(&v1010);
  v134 = qword_1EDB89E68;
  v135 = (unsigned int *)operator new();
  v143 = sub_1D3E15E44(3uLL, v136, v137, v138, v139, v140, v141, v142, 6);
  v144 = operator new();
  v145 = (unsigned int *)operator new();
  *(_QWORD *)v145 = 0x4E00000002;
  v1011 = v145;
  *(_DWORD *)v144 = 20;
  sub_1D3DD6B90((_QWORD *)(v144 + 8), &v1011);
  v146 = operator new();
  v147 = (unsigned int *)operator new();
  *(_QWORD *)v147 = 0x1F00000004;
  v1011 = v147;
  *(_DWORD *)v146 = 18;
  sub_1D3DD6B90((_QWORD *)(v146 + 8), &v1011);
  v148 = operator new();
  v149 = (_QWORD *)operator new();
  *v149 = 0xE00000002;
  v150 = (_QWORD *)operator new();
  *v150 = 0xF00000004;
  sub_1D3E0F328(v148, 18, (uint64_t)v149, (uint64_t)v150);
  v151 = operator new();
  v152 = (_QWORD *)operator new();
  *v152 = 0xD00000004;
  v153 = (_QWORD *)operator new();
  *v153 = 0xE00000001;
  sub_1D3E0F328(v151, 26, (uint64_t)v152, (uint64_t)v153);
  sub_1D3E15EE0((uint64_t)v135, 7, (uint64_t)v143, v144, v146, v148, v151);
  v154 = v135 + 2;
  do
    v155 = __ldxr(v154);
  while (__stxr(v155 + 1, v154));
  v1010 = v135;
  v156 = *(_QWORD *)(v134 + 8);
  if (v156 >= *(_QWORD *)(v134 + 16))
  {
    v157 = sub_1D3E15FFC((unsigned int ***)v134, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v134, &v1010);
    v157 = (unsigned int **)(v156 + 8);
  }
  *(_QWORD *)(v134 + 8) = v157;
  sub_1D3E161C4(&v1010);
  v158 = qword_1EDB89E68;
  v159 = (unsigned int *)operator new();
  v167 = sub_1D3E15E44(3uLL, v160, v161, v162, v163, v164, v165, v166, 6);
  v168 = operator new();
  v169 = (unsigned int *)operator new();
  *(_QWORD *)v169 = 0x6100000002;
  v1011 = v169;
  *(_DWORD *)v168 = 24;
  sub_1D3DD6B90((_QWORD *)(v168 + 8), &v1011);
  v170 = operator new();
  v171 = (_QWORD *)operator new();
  *v171 = 0x2600000002;
  v172 = (_QWORD *)operator new();
  *v172 = 0x2700000002;
  sub_1D3E0F328(v170, 22, (uint64_t)v171, (uint64_t)v172);
  v173 = operator new();
  v174 = (_QWORD *)operator new();
  *v174 = 0x1200000004;
  v175 = (_QWORD *)operator new();
  *v175 = 0x1300000002;
  sub_1D3E0F328(v173, 22, (uint64_t)v174, (uint64_t)v175);
  v176 = operator new();
  v177 = (_QWORD *)operator new();
  *v177 = 0xE00000004;
  v178 = (_QWORD *)operator new();
  *v178 = 0xF00000002;
  sub_1D3E0F328(v176, 26, (uint64_t)v177, (uint64_t)v178);
  sub_1D3E15EE0((uint64_t)v159, 8, (uint64_t)v167, v168, v170, v173, v176);
  v179 = v159 + 2;
  do
    v180 = __ldxr(v179);
  while (__stxr(v180 + 1, v179));
  v1010 = v159;
  v181 = *(_QWORD *)(v158 + 8);
  if (v181 >= *(_QWORD *)(v158 + 16))
  {
    v182 = sub_1D3E15FFC((unsigned int ***)v158, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v158, &v1010);
    v182 = (unsigned int **)(v181 + 8);
  }
  *(_QWORD *)(v158 + 8) = v182;
  sub_1D3E161C4(&v1010);
  v183 = qword_1EDB89E68;
  v184 = (unsigned int *)operator new();
  v192 = sub_1D3E15E44(3uLL, v185, v186, v187, v188, v189, v190, v191, 6);
  v193 = operator new();
  v194 = (unsigned int *)operator new();
  *(_QWORD *)v194 = 0x7400000002;
  v1011 = v194;
  *(_DWORD *)v193 = 30;
  sub_1D3DD6B90((_QWORD *)(v193 + 8), &v1011);
  v195 = operator new();
  v196 = (_QWORD *)operator new();
  *v196 = 0x2400000003;
  v197 = (_QWORD *)operator new();
  *v197 = 0x2500000002;
  sub_1D3E0F328(v195, 22, (uint64_t)v196, (uint64_t)v197);
  v198 = operator new();
  v199 = (_QWORD *)operator new();
  *v199 = 0x1000000004;
  v200 = (_QWORD *)operator new();
  *v200 = 0x1100000004;
  sub_1D3E0F328(v198, 20, (uint64_t)v199, (uint64_t)v200);
  v201 = operator new();
  v202 = (_QWORD *)operator new();
  *v202 = 0xC00000004;
  v203 = (_QWORD *)operator new();
  *v203 = 0xD00000004;
  sub_1D3E0F328(v201, 24, (uint64_t)v202, (uint64_t)v203);
  sub_1D3E15EE0((uint64_t)v184, 9, (uint64_t)v192, v193, v195, v198, v201);
  v204 = v184 + 2;
  do
    v205 = __ldxr(v204);
  while (__stxr(v205 + 1, v204));
  v1010 = v184;
  v206 = *(_QWORD *)(v183 + 8);
  if (v206 >= *(_QWORD *)(v183 + 16))
  {
    v207 = sub_1D3E15FFC((unsigned int ***)v183, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v183, &v1010);
    v207 = (unsigned int **)(v206 + 8);
  }
  *(_QWORD *)(v183 + 8) = v207;
  sub_1D3E161C4(&v1010);
  v208 = qword_1EDB89E68;
  v209 = (unsigned int *)operator new();
  v217 = sub_1D3E15E44(3uLL, v210, v211, v212, v213, v214, v215, v216, 6);
  v218 = operator new();
  v219 = (_QWORD *)operator new();
  *v219 = 0x4400000002;
  v220 = (_QWORD *)operator new();
  *v220 = 0x4500000002;
  sub_1D3E0F328(v218, 18, (uint64_t)v219, (uint64_t)v220);
  v221 = operator new();
  v222 = (_QWORD *)operator new();
  *v222 = 0x2B00000004;
  v223 = (_QWORD *)operator new();
  *v223 = 0x2C00000001;
  sub_1D3E0F328(v221, 26, (uint64_t)v222, (uint64_t)v223);
  v224 = operator new();
  v225 = (_QWORD *)operator new();
  *v225 = 0x1300000006;
  v226 = (_QWORD *)operator new();
  *v226 = 0x1400000002;
  sub_1D3E0F328(v224, 24, (uint64_t)v225, (uint64_t)v226);
  v227 = operator new();
  v228 = (_QWORD *)operator new();
  *v228 = 0xF00000006;
  v229 = (_QWORD *)operator new();
  *v229 = 0x1000000002;
  sub_1D3E0F328(v227, 28, (uint64_t)v228, (uint64_t)v229);
  sub_1D3E15EE0((uint64_t)v209, 10, (uint64_t)v217, v218, v221, v224, v227);
  v230 = v209 + 2;
  do
    v231 = __ldxr(v230);
  while (__stxr(v231 + 1, v230));
  v1011 = v209;
  v232 = *(_QWORD *)(v208 + 8);
  if (v232 >= *(_QWORD *)(v208 + 16))
  {
    v233 = sub_1D3E15FFC((unsigned int ***)v208, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v208, &v1011);
    v233 = (unsigned int **)(v232 + 8);
  }
  *(_QWORD *)(v208 + 8) = v233;
  sub_1D3E161C4(&v1011);
  v234 = qword_1EDB89E68;
  v235 = (unsigned int *)operator new();
  v243 = sub_1D3E15E44(3uLL, v236, v237, v238, v239, v240, v241, v242, 6);
  v244 = operator new();
  v245 = (unsigned int *)operator new();
  *(_QWORD *)v245 = 0x5100000004;
  v1011 = v245;
  *(_DWORD *)v244 = 20;
  sub_1D3DD6B90((_QWORD *)(v244 + 8), &v1011);
  v246 = operator new();
  v247 = (_QWORD *)operator new();
  *v247 = 0x3200000001;
  v248 = (_QWORD *)operator new();
  *v248 = 0x3300000004;
  sub_1D3E0F328(v246, 30, (uint64_t)v247, (uint64_t)v248);
  v249 = operator new();
  v250 = (_QWORD *)operator new();
  *v250 = 0x1600000004;
  v251 = (_QWORD *)operator new();
  *v251 = 0x1700000004;
  sub_1D3E0F328(v249, 28, (uint64_t)v250, (uint64_t)v251);
  v252 = operator new();
  v253 = (_QWORD *)operator new();
  *v253 = 0xC00000003;
  v254 = (_QWORD *)operator new();
  *v254 = 0xD00000008;
  sub_1D3E0F328(v252, 24, (uint64_t)v253, (uint64_t)v254);
  sub_1D3E15EE0((uint64_t)v235, 11, (uint64_t)v243, v244, v246, v249, v252);
  v255 = v235 + 2;
  do
    v256 = __ldxr(v255);
  while (__stxr(v256 + 1, v255));
  v1010 = v235;
  v257 = *(_QWORD *)(v234 + 8);
  if (v257 >= *(_QWORD *)(v234 + 16))
  {
    v258 = sub_1D3E15FFC((unsigned int ***)v234, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v234, &v1010);
    v258 = (unsigned int **)(v257 + 8);
  }
  *(_QWORD *)(v234 + 8) = v258;
  sub_1D3E161C4(&v1010);
  v259 = qword_1EDB89E68;
  v260 = (unsigned int *)operator new();
  v268 = sub_1D3E15E44(3uLL, v261, v262, v263, v264, v265, v266, v267, 6);
  v269 = operator new();
  v270 = (_QWORD *)operator new();
  *v270 = 0x5C00000002;
  v271 = (_QWORD *)operator new();
  *v271 = 0x5D00000002;
  sub_1D3E0F328(v269, 24, (uint64_t)v270, (uint64_t)v271);
  v272 = operator new();
  v273 = (_QWORD *)operator new();
  *v273 = 0x2400000006;
  v274 = (_QWORD *)operator new();
  *v274 = 0x2500000002;
  sub_1D3E0F328(v272, 22, (uint64_t)v273, (uint64_t)v274);
  v275 = operator new();
  v276 = (_QWORD *)operator new();
  *v276 = 0x1400000004;
  v277 = (_QWORD *)operator new();
  *v277 = 0x1500000006;
  sub_1D3E0F328(v275, 26, (uint64_t)v276, (uint64_t)v277);
  v278 = operator new();
  v279 = (_QWORD *)operator new();
  *v279 = 0xE00000007;
  v280 = (_QWORD *)operator new();
  *v280 = 0xF00000004;
  sub_1D3E0F328(v278, 28, (uint64_t)v279, (uint64_t)v280);
  sub_1D3E15EE0((uint64_t)v260, 12, (uint64_t)v268, v269, v272, v275, v278);
  v281 = v260 + 2;
  do
    v282 = __ldxr(v281);
  while (__stxr(v282 + 1, v281));
  v1011 = v260;
  v283 = *(_QWORD *)(v259 + 8);
  if (v283 >= *(_QWORD *)(v259 + 16))
  {
    v284 = sub_1D3E15FFC((unsigned int ***)v259, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v259, &v1011);
    v284 = (unsigned int **)(v283 + 8);
  }
  *(_QWORD *)(v259 + 8) = v284;
  sub_1D3E161C4(&v1011);
  v285 = qword_1EDB89E68;
  v286 = (unsigned int *)operator new();
  v294 = sub_1D3E15E44(3uLL, v287, v288, v289, v290, v291, v292, v293, 6);
  v295 = operator new();
  v296 = (unsigned int *)operator new();
  *(_QWORD *)v296 = 0x6B00000004;
  v1011 = v296;
  *(_DWORD *)v295 = 26;
  sub_1D3DD6B90((_QWORD *)(v295 + 8), &v1011);
  v297 = operator new();
  v298 = (_QWORD *)operator new();
  *v298 = 0x2500000008;
  v299 = (_QWORD *)operator new();
  *v299 = 0x2600000001;
  sub_1D3E0F328(v297, 22, (uint64_t)v298, (uint64_t)v299);
  v300 = operator new();
  v301 = (_QWORD *)operator new();
  *v301 = 0x1400000008;
  v302 = (_QWORD *)operator new();
  *v302 = 0x1500000004;
  sub_1D3E0F328(v300, 24, (uint64_t)v301, (uint64_t)v302);
  v303 = operator new();
  v304 = (_QWORD *)operator new();
  *v304 = 0xB0000000CLL;
  v305 = (_QWORD *)operator new();
  *v305 = 0xC00000004;
  sub_1D3E0F328(v303, 22, (uint64_t)v304, (uint64_t)v305);
  sub_1D3E15EE0((uint64_t)v286, 13, (uint64_t)v294, v295, v297, v300, v303);
  v306 = v286 + 2;
  do
    v307 = __ldxr(v306);
  while (__stxr(v307 + 1, v306));
  v1010 = v286;
  v308 = *(_QWORD *)(v285 + 8);
  if (v308 >= *(_QWORD *)(v285 + 16))
  {
    v309 = sub_1D3E15FFC((unsigned int ***)v285, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v285, &v1010);
    v309 = (unsigned int **)(v308 + 8);
  }
  *(_QWORD *)(v285 + 8) = v309;
  sub_1D3E161C4(&v1010);
  v310 = qword_1EDB89E68;
  v311 = (unsigned int *)operator new();
  v319 = sub_1D3E15E44(4uLL, v312, v313, v314, v315, v316, v317, v318, 6);
  v320 = operator new();
  v321 = (_QWORD *)operator new();
  *v321 = 0x7300000003;
  v322 = (_QWORD *)operator new();
  *v322 = 0x7400000001;
  sub_1D3E0F328(v320, 30, (uint64_t)v321, (uint64_t)v322);
  v323 = operator new();
  v324 = (_QWORD *)operator new();
  *v324 = 0x2800000004;
  v325 = (_QWORD *)operator new();
  *v325 = 0x2900000005;
  sub_1D3E0F328(v323, 24, (uint64_t)v324, (uint64_t)v325);
  v326 = operator new();
  v327 = (_QWORD *)operator new();
  *v327 = 0x100000000BLL;
  v328 = (_QWORD *)operator new();
  *v328 = 0x1100000005;
  sub_1D3E0F328(v326, 20, (uint64_t)v327, (uint64_t)v328);
  v329 = operator new();
  v330 = (_QWORD *)operator new();
  *v330 = 0xC0000000BLL;
  v331 = (_QWORD *)operator new();
  *v331 = 0xD00000005;
  sub_1D3E0F328(v329, 24, (uint64_t)v330, (uint64_t)v331);
  sub_1D3E15EE0((uint64_t)v311, 14, (uint64_t)v319, v320, v323, v326, v329);
  v332 = v311 + 2;
  do
    v333 = __ldxr(v332);
  while (__stxr(v333 + 1, v332));
  v1011 = v311;
  v334 = *(_QWORD *)(v310 + 8);
  if (v334 >= *(_QWORD *)(v310 + 16))
  {
    v335 = sub_1D3E15FFC((unsigned int ***)v310, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v310, &v1011);
    v335 = (unsigned int **)(v334 + 8);
  }
  *(_QWORD *)(v310 + 8) = v335;
  sub_1D3E161C4(&v1011);
  v336 = qword_1EDB89E68;
  v337 = (unsigned int *)operator new();
  v345 = sub_1D3E15E44(4uLL, v338, v339, v340, v341, v342, v343, v344, 6);
  v346 = operator new();
  v347 = (_QWORD *)operator new();
  *v347 = 0x5700000005;
  v348 = (_QWORD *)operator new();
  *v348 = 0x5800000001;
  sub_1D3E0F328(v346, 22, (uint64_t)v347, (uint64_t)v348);
  v349 = operator new();
  v350 = (_QWORD *)operator new();
  *v350 = 0x2900000005;
  v351 = (_QWORD *)operator new();
  *v351 = 0x2A00000005;
  sub_1D3E0F328(v349, 24, (uint64_t)v350, (uint64_t)v351);
  v352 = operator new();
  v353 = (_QWORD *)operator new();
  *v353 = 0x1800000005;
  v354 = (_QWORD *)operator new();
  *v354 = 0x1900000007;
  sub_1D3E0F328(v352, 30, (uint64_t)v353, (uint64_t)v354);
  v355 = operator new();
  v356 = (_QWORD *)operator new();
  *v356 = 0xC0000000BLL;
  v357 = (_QWORD *)operator new();
  *v357 = 0xD00000007;
  sub_1D3E0F328(v355, 24, (uint64_t)v356, (uint64_t)v357);
  sub_1D3E15EE0((uint64_t)v337, 15, (uint64_t)v345, v346, v349, v352, v355);
  v358 = v337 + 2;
  do
    v359 = __ldxr(v358);
  while (__stxr(v359 + 1, v358));
  v1011 = v337;
  v360 = *(_QWORD *)(v336 + 8);
  if (v360 >= *(_QWORD *)(v336 + 16))
  {
    v361 = sub_1D3E15FFC((unsigned int ***)v336, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v336, &v1011);
    v361 = (unsigned int **)(v360 + 8);
  }
  *(_QWORD *)(v336 + 8) = v361;
  sub_1D3E161C4(&v1011);
  v362 = qword_1EDB89E68;
  v363 = (unsigned int *)operator new();
  v371 = sub_1D3E15E44(4uLL, v364, v365, v366, v367, v368, v369, v370, 6);
  v372 = operator new();
  v373 = (_QWORD *)operator new();
  *v373 = 0x6200000005;
  v374 = (_QWORD *)operator new();
  *v374 = 0x6300000001;
  sub_1D3E0F328(v372, 24, (uint64_t)v373, (uint64_t)v374);
  v375 = operator new();
  v376 = (_QWORD *)operator new();
  *v376 = 0x2D00000007;
  v377 = (_QWORD *)operator new();
  *v377 = 0x2E00000003;
  sub_1D3E0F328(v375, 28, (uint64_t)v376, (uint64_t)v377);
  v378 = operator new();
  v379 = (_QWORD *)operator new();
  *v379 = 0x130000000FLL;
  v380 = (_QWORD *)operator new();
  *v380 = 0x1400000002;
  sub_1D3E0F328(v378, 24, (uint64_t)v379, (uint64_t)v380);
  v381 = operator new();
  v382 = (_QWORD *)operator new();
  *v382 = 0xF00000003;
  v383 = (_QWORD *)operator new();
  *v383 = 0x100000000DLL;
  sub_1D3E0F328(v381, 30, (uint64_t)v382, (uint64_t)v383);
  sub_1D3E15EE0((uint64_t)v363, 16, (uint64_t)v371, v372, v375, v378, v381);
  v384 = v363 + 2;
  do
    v385 = __ldxr(v384);
  while (__stxr(v385 + 1, v384));
  v1011 = v363;
  v386 = *(_QWORD *)(v362 + 8);
  if (v386 >= *(_QWORD *)(v362 + 16))
  {
    v387 = sub_1D3E15FFC((unsigned int ***)v362, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v362, &v1011);
    v387 = (unsigned int **)(v386 + 8);
  }
  *(_QWORD *)(v362 + 8) = v387;
  sub_1D3E161C4(&v1011);
  v388 = qword_1EDB89E68;
  v389 = (unsigned int *)operator new();
  v397 = sub_1D3E15E44(4uLL, v390, v391, v392, v393, v394, v395, v396, 6);
  v398 = operator new();
  v399 = (_QWORD *)operator new();
  *v399 = 0x6B00000001;
  v400 = (_QWORD *)operator new();
  *v400 = 0x6C00000005;
  sub_1D3E0F328(v398, 28, (uint64_t)v399, (uint64_t)v400);
  v401 = operator new();
  v402 = (_QWORD *)operator new();
  *v402 = 0x2E0000000ALL;
  v403 = (_QWORD *)operator new();
  *v403 = 0x2F00000001;
  sub_1D3E0F328(v401, 28, (uint64_t)v402, (uint64_t)v403);
  v404 = operator new();
  v405 = (_QWORD *)operator new();
  *v405 = 0x1600000001;
  v406 = (_QWORD *)operator new();
  *v406 = 0x170000000FLL;
  sub_1D3E0F328(v404, 28, (uint64_t)v405, (uint64_t)v406);
  v407 = operator new();
  v408 = (_QWORD *)operator new();
  *v408 = 0xE00000002;
  v409 = (_QWORD *)operator new();
  *v409 = 0xF00000011;
  sub_1D3E0F328(v407, 28, (uint64_t)v408, (uint64_t)v409);
  sub_1D3E15EE0((uint64_t)v389, 17, (uint64_t)v397, v398, v401, v404, v407);
  v410 = v389 + 2;
  do
    v411 = __ldxr(v410);
  while (__stxr(v411 + 1, v410));
  v1011 = v389;
  v412 = *(_QWORD *)(v388 + 8);
  if (v412 >= *(_QWORD *)(v388 + 16))
  {
    v413 = sub_1D3E15FFC((unsigned int ***)v388, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v388, &v1011);
    v413 = (unsigned int **)(v412 + 8);
  }
  *(_QWORD *)(v388 + 8) = v413;
  sub_1D3E161C4(&v1011);
  v414 = qword_1EDB89E68;
  v415 = (unsigned int *)operator new();
  v423 = sub_1D3E15E44(4uLL, v416, v417, v418, v419, v420, v421, v422, 6);
  v424 = operator new();
  v425 = (_QWORD *)operator new();
  *v425 = 0x7800000005;
  v426 = (_QWORD *)operator new();
  *v426 = 0x7900000001;
  sub_1D3E0F328(v424, 30, (uint64_t)v425, (uint64_t)v426);
  v427 = operator new();
  v428 = (_QWORD *)operator new();
  *v428 = 0x2B00000009;
  v429 = (_QWORD *)operator new();
  *v429 = 0x2C00000004;
  sub_1D3E0F328(v427, 26, (uint64_t)v428, (uint64_t)v429);
  v430 = operator new();
  v431 = (_QWORD *)operator new();
  *v431 = 0x1600000011;
  v432 = (_QWORD *)operator new();
  *v432 = 0x1700000001;
  sub_1D3E0F328(v430, 28, (uint64_t)v431, (uint64_t)v432);
  v433 = operator new();
  v434 = (_QWORD *)operator new();
  *v434 = 0xE00000002;
  v435 = (_QWORD *)operator new();
  *v435 = 0xF00000013;
  sub_1D3E0F328(v433, 28, (uint64_t)v434, (uint64_t)v435);
  sub_1D3E15EE0((uint64_t)v415, 18, (uint64_t)v423, v424, v427, v430, v433);
  v436 = v415 + 2;
  do
    v437 = __ldxr(v436);
  while (__stxr(v437 + 1, v436));
  v1011 = v415;
  v438 = *(_QWORD *)(v414 + 8);
  if (v438 >= *(_QWORD *)(v414 + 16))
  {
    v439 = sub_1D3E15FFC((unsigned int ***)v414, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v414, &v1011);
    v439 = (unsigned int **)(v438 + 8);
  }
  *(_QWORD *)(v414 + 8) = v439;
  sub_1D3E161C4(&v1011);
  v440 = qword_1EDB89E68;
  v441 = (unsigned int *)operator new();
  v449 = sub_1D3E15E44(4uLL, v442, v443, v444, v445, v446, v447, v448, 6);
  v450 = operator new();
  v451 = (_QWORD *)operator new();
  *v451 = 0x7100000003;
  v452 = (_QWORD *)operator new();
  *v452 = 0x7200000004;
  sub_1D3E0F328(v450, 28, (uint64_t)v451, (uint64_t)v452);
  v453 = operator new();
  v454 = (_QWORD *)operator new();
  *v454 = 0x2C00000003;
  v455 = (_QWORD *)operator new();
  *v455 = 0x2D0000000BLL;
  sub_1D3E0F328(v453, 26, (uint64_t)v454, (uint64_t)v455);
  v456 = operator new();
  v457 = (_QWORD *)operator new();
  *v457 = 0x1500000011;
  v458 = (_QWORD *)operator new();
  *v458 = 0x1600000004;
  sub_1D3E0F328(v456, 26, (uint64_t)v457, (uint64_t)v458);
  v459 = operator new();
  v460 = (_QWORD *)operator new();
  *v460 = 0xD00000009;
  v461 = (_QWORD *)operator new();
  *v461 = 0xE00000010;
  sub_1D3E0F328(v459, 26, (uint64_t)v460, (uint64_t)v461);
  sub_1D3E15EE0((uint64_t)v441, 19, (uint64_t)v449, v450, v453, v456, v459);
  v462 = v441 + 2;
  do
    v463 = __ldxr(v462);
  while (__stxr(v463 + 1, v462));
  v1011 = v441;
  v464 = *(_QWORD *)(v440 + 8);
  if (v464 >= *(_QWORD *)(v440 + 16))
  {
    v465 = sub_1D3E15FFC((unsigned int ***)v440, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v440, &v1011);
    v465 = (unsigned int **)(v464 + 8);
  }
  *(_QWORD *)(v440 + 8) = v465;
  sub_1D3E161C4(&v1011);
  v466 = qword_1EDB89E68;
  v467 = (unsigned int *)operator new();
  v475 = sub_1D3E15E44(4uLL, v468, v469, v470, v471, v472, v473, v474, 6);
  v476 = operator new();
  v477 = (_QWORD *)operator new();
  *v477 = 0x6B00000003;
  v478 = (_QWORD *)operator new();
  *v478 = 0x6C00000005;
  sub_1D3E0F328(v476, 28, (uint64_t)v477, (uint64_t)v478);
  v479 = operator new();
  v480 = (_QWORD *)operator new();
  *v480 = 0x2900000003;
  v481 = (_QWORD *)operator new();
  *v481 = 0x2A0000000DLL;
  sub_1D3E0F328(v479, 26, (uint64_t)v480, (uint64_t)v481);
  v482 = operator new();
  v483 = (_QWORD *)operator new();
  *v483 = 0x180000000FLL;
  v484 = (_QWORD *)operator new();
  *v484 = 0x1900000005;
  sub_1D3E0F328(v482, 30, (uint64_t)v483, (uint64_t)v484);
  v485 = operator new();
  v486 = (_QWORD *)operator new();
  *v486 = 0xF0000000FLL;
  v487 = (_QWORD *)operator new();
  *v487 = 0x100000000ALL;
  sub_1D3E0F328(v485, 28, (uint64_t)v486, (uint64_t)v487);
  sub_1D3E15EE0((uint64_t)v467, 20, (uint64_t)v475, v476, v479, v482, v485);
  v488 = v467 + 2;
  do
    v489 = __ldxr(v488);
  while (__stxr(v489 + 1, v488));
  v1011 = v467;
  v490 = *(_QWORD *)(v466 + 8);
  if (v490 >= *(_QWORD *)(v466 + 16))
  {
    v491 = sub_1D3E15FFC((unsigned int ***)v466, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v466, &v1011);
    v491 = (unsigned int **)(v490 + 8);
  }
  *(_QWORD *)(v466 + 8) = v491;
  sub_1D3E161C4(&v1011);
  v492 = qword_1EDB89E68;
  v493 = (unsigned int *)operator new();
  v501 = sub_1D3E15E44(5uLL, v494, v495, v496, v497, v498, v499, v500, 6);
  v502 = operator new();
  v503 = (_QWORD *)operator new();
  *v503 = 0x7400000004;
  v504 = (_QWORD *)operator new();
  *v504 = 0x7500000004;
  sub_1D3E0F328(v502, 28, (uint64_t)v503, (uint64_t)v504);
  v505 = operator new();
  v506 = (unsigned int *)operator new();
  *(_QWORD *)v506 = 0x2A00000011;
  v1011 = v506;
  *(_DWORD *)v505 = 26;
  sub_1D3DD6B90((_QWORD *)(v505 + 8), &v1011);
  v507 = operator new();
  v508 = (_QWORD *)operator new();
  *v508 = 0x1600000011;
  v509 = (_QWORD *)operator new();
  *v509 = 0x1700000006;
  sub_1D3E0F328(v507, 28, (uint64_t)v508, (uint64_t)v509);
  v510 = operator new();
  v511 = (_QWORD *)operator new();
  *v511 = 0x1000000013;
  v512 = (_QWORD *)operator new();
  *v512 = 0x1100000006;
  sub_1D3E0F328(v510, 30, (uint64_t)v511, (uint64_t)v512);
  sub_1D3E15EE0((uint64_t)v493, 21, (uint64_t)v501, v502, v505, v507, v510);
  v513 = v493 + 2;
  do
    v514 = __ldxr(v513);
  while (__stxr(v514 + 1, v513));
  v1010 = v493;
  v515 = *(_QWORD *)(v492 + 8);
  if (v515 >= *(_QWORD *)(v492 + 16))
  {
    v516 = sub_1D3E15FFC((unsigned int ***)v492, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v492, &v1010);
    v516 = (unsigned int **)(v515 + 8);
  }
  *(_QWORD *)(v492 + 8) = v516;
  sub_1D3E161C4(&v1010);
  v517 = qword_1EDB89E68;
  v518 = (unsigned int *)operator new();
  v526 = sub_1D3E15E44(5uLL, v519, v520, v521, v522, v523, v524, v525, 6);
  v527 = operator new();
  v528 = (_QWORD *)operator new();
  *v528 = 0x6F00000002;
  v529 = (_QWORD *)operator new();
  *v529 = 0x7000000007;
  sub_1D3E0F328(v527, 28, (uint64_t)v528, (uint64_t)v529);
  v530 = operator new();
  v531 = (unsigned int *)operator new();
  *(_QWORD *)v531 = 0x2E00000011;
  v1011 = v531;
  *(_DWORD *)v530 = 28;
  sub_1D3DD6B90((_QWORD *)(v530 + 8), &v1011);
  v532 = operator new();
  v533 = (_QWORD *)operator new();
  *v533 = 0x1800000007;
  v534 = (_QWORD *)operator new();
  *v534 = 0x1900000010;
  sub_1D3E0F328(v532, 30, (uint64_t)v533, (uint64_t)v534);
  v535 = operator new();
  v536 = (unsigned int *)operator new();
  *(_QWORD *)v536 = 0xD00000022;
  v1011 = v536;
  *(_DWORD *)v535 = 24;
  sub_1D3DD6B90((_QWORD *)(v535 + 8), &v1011);
  sub_1D3E15EE0((uint64_t)v518, 22, (uint64_t)v526, v527, v530, v532, v535);
  v537 = v518 + 2;
  do
    v538 = __ldxr(v537);
  while (__stxr(v538 + 1, v537));
  v1010 = v518;
  v539 = *(_QWORD *)(v517 + 8);
  if (v539 >= *(_QWORD *)(v517 + 16))
  {
    v540 = sub_1D3E15FFC((unsigned int ***)v517, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v517, &v1010);
    v540 = (unsigned int **)(v539 + 8);
  }
  *(_QWORD *)(v517 + 8) = v540;
  sub_1D3E161C4(&v1010);
  v541 = qword_1EDB89E68;
  v542 = (unsigned int *)operator new();
  v550 = sub_1D3E15E44(5uLL, v543, v544, v545, v546, v547, v548, v549, 6);
  v551 = operator new();
  v552 = (_QWORD *)operator new();
  *v552 = 0x7900000004;
  v553 = (_QWORD *)operator new();
  *v553 = 0x7A00000005;
  sub_1D3E0F328(v551, 30, (uint64_t)v552, (uint64_t)v553);
  v554 = operator new();
  v555 = (_QWORD *)operator new();
  *v555 = 0x2F00000004;
  v556 = (_QWORD *)operator new();
  *v556 = 0x300000000ELL;
  sub_1D3E0F328(v554, 28, (uint64_t)v555, (uint64_t)v556);
  v557 = operator new();
  v558 = (_QWORD *)operator new();
  *v558 = 0x180000000BLL;
  v559 = (_QWORD *)operator new();
  *v559 = 0x190000000ELL;
  sub_1D3E0F328(v557, 30, (uint64_t)v558, (uint64_t)v559);
  v560 = operator new();
  v561 = (_QWORD *)operator new();
  *v561 = 0xF00000010;
  v562 = (_QWORD *)operator new();
  *v562 = 0x100000000ELL;
  sub_1D3E0F328(v560, 30, (uint64_t)v561, (uint64_t)v562);
  sub_1D3E15EE0((uint64_t)v542, 23, (uint64_t)v550, v551, v554, v557, v560);
  v563 = v542 + 2;
  do
    v564 = __ldxr(v563);
  while (__stxr(v564 + 1, v563));
  v1011 = v542;
  v565 = *(_QWORD *)(v541 + 8);
  if (v565 >= *(_QWORD *)(v541 + 16))
  {
    v566 = sub_1D3E15FFC((unsigned int ***)v541, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v541, &v1011);
    v566 = (unsigned int **)(v565 + 8);
  }
  *(_QWORD *)(v541 + 8) = v566;
  sub_1D3E161C4(&v1011);
  v567 = qword_1EDB89E68;
  v568 = (unsigned int *)operator new();
  v576 = sub_1D3E15E44(5uLL, v569, v570, v571, v572, v573, v574, v575, 6);
  v577 = operator new();
  v578 = (_QWORD *)operator new();
  *v578 = 0x7500000006;
  v579 = (_QWORD *)operator new();
  *v579 = 0x7600000004;
  sub_1D3E0F328(v577, 30, (uint64_t)v578, (uint64_t)v579);
  v580 = operator new();
  v581 = (_QWORD *)operator new();
  *v581 = 0x2D00000006;
  v582 = (_QWORD *)operator new();
  *v582 = 0x2E0000000ELL;
  sub_1D3E0F328(v580, 28, (uint64_t)v581, (uint64_t)v582);
  v583 = operator new();
  v584 = (_QWORD *)operator new();
  *v584 = 0x180000000BLL;
  v585 = (_QWORD *)operator new();
  *v585 = 0x1900000010;
  sub_1D3E0F328(v583, 30, (uint64_t)v584, (uint64_t)v585);
  v586 = operator new();
  v587 = (_QWORD *)operator new();
  *v587 = 0x100000001ELL;
  v588 = (_QWORD *)operator new();
  *v588 = 0x1100000002;
  sub_1D3E0F328(v586, 30, (uint64_t)v587, (uint64_t)v588);
  sub_1D3E15EE0((uint64_t)v568, 24, (uint64_t)v576, v577, v580, v583, v586);
  v589 = v568 + 2;
  do
    v590 = __ldxr(v589);
  while (__stxr(v590 + 1, v589));
  v1011 = v568;
  v591 = *(_QWORD *)(v567 + 8);
  if (v591 >= *(_QWORD *)(v567 + 16))
  {
    v592 = sub_1D3E15FFC((unsigned int ***)v567, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v567, &v1011);
    v592 = (unsigned int **)(v591 + 8);
  }
  *(_QWORD *)(v567 + 8) = v592;
  sub_1D3E161C4(&v1011);
  v593 = qword_1EDB89E68;
  v594 = (unsigned int *)operator new();
  v602 = sub_1D3E15E44(5uLL, v595, v596, v597, v598, v599, v600, v601, 6);
  v603 = operator new();
  v604 = (_QWORD *)operator new();
  *v604 = 0x6A00000008;
  v605 = (_QWORD *)operator new();
  *v605 = 0x6B00000004;
  sub_1D3E0F328(v603, 26, (uint64_t)v604, (uint64_t)v605);
  v606 = operator new();
  v607 = (_QWORD *)operator new();
  *v607 = 0x2F00000008;
  v608 = (_QWORD *)operator new();
  *v608 = 0x300000000DLL;
  sub_1D3E0F328(v606, 28, (uint64_t)v607, (uint64_t)v608);
  v609 = operator new();
  v610 = (_QWORD *)operator new();
  *v610 = 0x1800000007;
  v611 = (_QWORD *)operator new();
  *v611 = 0x1900000016;
  sub_1D3E0F328(v609, 30, (uint64_t)v610, (uint64_t)v611);
  v612 = operator new();
  v613 = (_QWORD *)operator new();
  *v613 = 0xF00000016;
  v614 = (_QWORD *)operator new();
  *v614 = 0x100000000DLL;
  sub_1D3E0F328(v612, 30, (uint64_t)v613, (uint64_t)v614);
  sub_1D3E15EE0((uint64_t)v594, 25, (uint64_t)v602, v603, v606, v609, v612);
  v615 = v594 + 2;
  do
    v616 = __ldxr(v615);
  while (__stxr(v616 + 1, v615));
  v1011 = v594;
  v617 = *(_QWORD *)(v593 + 8);
  if (v617 >= *(_QWORD *)(v593 + 16))
  {
    v618 = sub_1D3E15FFC((unsigned int ***)v593, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v593, &v1011);
    v618 = (unsigned int **)(v617 + 8);
  }
  *(_QWORD *)(v593 + 8) = v618;
  sub_1D3E161C4(&v1011);
  v619 = qword_1EDB89E68;
  v620 = (unsigned int *)operator new();
  v628 = sub_1D3E15E44(5uLL, v621, v622, v623, v624, v625, v626, v627, 6);
  v629 = operator new();
  v630 = (_QWORD *)operator new();
  *v630 = 0x720000000ALL;
  v631 = (_QWORD *)operator new();
  *v631 = 0x7300000002;
  sub_1D3E0F328(v629, 28, (uint64_t)v630, (uint64_t)v631);
  v632 = operator new();
  v633 = (_QWORD *)operator new();
  *v633 = 0x2E00000013;
  v634 = (_QWORD *)operator new();
  *v634 = 0x2F00000004;
  sub_1D3E0F328(v632, 28, (uint64_t)v633, (uint64_t)v634);
  v635 = operator new();
  v636 = (_QWORD *)operator new();
  *v636 = 0x160000001CLL;
  v637 = (_QWORD *)operator new();
  *v637 = 0x1700000006;
  sub_1D3E0F328(v635, 28, (uint64_t)v636, (uint64_t)v637);
  v638 = operator new();
  v639 = (_QWORD *)operator new();
  *v639 = 0x1000000021;
  v640 = (_QWORD *)operator new();
  *v640 = 0x1100000004;
  sub_1D3E0F328(v638, 30, (uint64_t)v639, (uint64_t)v640);
  sub_1D3E15EE0((uint64_t)v620, 26, (uint64_t)v628, v629, v632, v635, v638);
  v641 = v620 + 2;
  do
    v642 = __ldxr(v641);
  while (__stxr(v642 + 1, v641));
  v1011 = v620;
  v643 = *(_QWORD *)(v619 + 8);
  if (v643 >= *(_QWORD *)(v619 + 16))
  {
    v644 = sub_1D3E15FFC((unsigned int ***)v619, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v619, &v1011);
    v644 = (unsigned int **)(v643 + 8);
  }
  *(_QWORD *)(v619 + 8) = v644;
  sub_1D3E161C4(&v1011);
  v645 = qword_1EDB89E68;
  v646 = (unsigned int *)operator new();
  v654 = sub_1D3E15E44(5uLL, v647, v648, v649, v650, v651, v652, v653, 6);
  v655 = operator new();
  v656 = (_QWORD *)operator new();
  *v656 = 0x7A00000008;
  v657 = (_QWORD *)operator new();
  *v657 = 0x7B00000004;
  sub_1D3E0F328(v655, 30, (uint64_t)v656, (uint64_t)v657);
  v658 = operator new();
  v659 = (_QWORD *)operator new();
  *v659 = 0x2D00000016;
  v660 = (_QWORD *)operator new();
  *v660 = 0x2E00000003;
  sub_1D3E0F328(v658, 28, (uint64_t)v659, (uint64_t)v660);
  v661 = operator new();
  v662 = (_QWORD *)operator new();
  *v662 = 0x1700000008;
  v663 = (_QWORD *)operator new();
  *v663 = 0x180000001ALL;
  sub_1D3E0F328(v661, 30, (uint64_t)v662, (uint64_t)v663);
  v664 = operator new();
  v665 = (_QWORD *)operator new();
  *v665 = 0xF0000000CLL;
  v666 = (_QWORD *)operator new();
  *v666 = 0x100000001CLL;
  sub_1D3E0F328(v664, 30, (uint64_t)v665, (uint64_t)v666);
  sub_1D3E15EE0((uint64_t)v646, 27, (uint64_t)v654, v655, v658, v661, v664);
  v667 = v646 + 2;
  do
    v668 = __ldxr(v667);
  while (__stxr(v668 + 1, v667));
  v1011 = v646;
  v669 = *(_QWORD *)(v645 + 8);
  if (v669 >= *(_QWORD *)(v645 + 16))
  {
    v670 = sub_1D3E15FFC((unsigned int ***)v645, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v645, &v1011);
    v670 = (unsigned int **)(v669 + 8);
  }
  *(_QWORD *)(v645 + 8) = v670;
  sub_1D3E161C4(&v1011);
  v671 = qword_1EDB89E68;
  v672 = (unsigned int *)operator new();
  v680 = sub_1D3E15E44(6uLL, v673, v674, v675, v676, v677, v678, v679, 6);
  v681 = operator new();
  v682 = (_QWORD *)operator new();
  *v682 = 0x7500000003;
  v683 = (_QWORD *)operator new();
  *v683 = 0x760000000ALL;
  sub_1D3E0F328(v681, 30, (uint64_t)v682, (uint64_t)v683);
  v684 = operator new();
  v685 = (_QWORD *)operator new();
  *v685 = 0x2D00000003;
  v686 = (_QWORD *)operator new();
  *v686 = 0x2E00000017;
  sub_1D3E0F328(v684, 28, (uint64_t)v685, (uint64_t)v686);
  v687 = operator new();
  v688 = (_QWORD *)operator new();
  *v688 = 0x1800000004;
  v689 = (_QWORD *)operator new();
  *v689 = 0x190000001FLL;
  sub_1D3E0F328(v687, 30, (uint64_t)v688, (uint64_t)v689);
  v690 = operator new();
  v691 = (_QWORD *)operator new();
  *v691 = 0xF0000000BLL;
  v692 = (_QWORD *)operator new();
  *v692 = 0x100000001FLL;
  sub_1D3E0F328(v690, 30, (uint64_t)v691, (uint64_t)v692);
  sub_1D3E15EE0((uint64_t)v672, 28, (uint64_t)v680, v681, v684, v687, v690);
  v693 = v672 + 2;
  do
    v694 = __ldxr(v693);
  while (__stxr(v694 + 1, v693));
  v1011 = v672;
  v695 = *(_QWORD *)(v671 + 8);
  if (v695 >= *(_QWORD *)(v671 + 16))
  {
    v696 = sub_1D3E15FFC((unsigned int ***)v671, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v671, &v1011);
    v696 = (unsigned int **)(v695 + 8);
  }
  *(_QWORD *)(v671 + 8) = v696;
  sub_1D3E161C4(&v1011);
  v697 = qword_1EDB89E68;
  v698 = (unsigned int *)operator new();
  v706 = sub_1D3E15E44(6uLL, v699, v700, v701, v702, v703, v704, v705, 6);
  v707 = operator new();
  v708 = (_QWORD *)operator new();
  *v708 = 0x7400000007;
  v709 = (_QWORD *)operator new();
  *v709 = 0x7500000007;
  sub_1D3E0F328(v707, 30, (uint64_t)v708, (uint64_t)v709);
  v710 = operator new();
  v711 = (_QWORD *)operator new();
  *v711 = 0x2D00000015;
  v712 = (_QWORD *)operator new();
  *v712 = 0x2E00000007;
  sub_1D3E0F328(v710, 28, (uint64_t)v711, (uint64_t)v712);
  v713 = operator new();
  v714 = (_QWORD *)operator new();
  *v714 = 0x1700000001;
  v715 = (_QWORD *)operator new();
  *v715 = 0x1800000025;
  sub_1D3E0F328(v713, 30, (uint64_t)v714, (uint64_t)v715);
  v716 = operator new();
  v717 = (_QWORD *)operator new();
  *v717 = 0xF00000013;
  v718 = (_QWORD *)operator new();
  *v718 = 0x100000001ALL;
  sub_1D3E0F328(v716, 30, (uint64_t)v717, (uint64_t)v718);
  sub_1D3E15EE0((uint64_t)v698, 29, (uint64_t)v706, v707, v710, v713, v716);
  v719 = v698 + 2;
  do
    v720 = __ldxr(v719);
  while (__stxr(v720 + 1, v719));
  v1011 = v698;
  v721 = *(_QWORD *)(v697 + 8);
  if (v721 >= *(_QWORD *)(v697 + 16))
  {
    v722 = sub_1D3E15FFC((unsigned int ***)v697, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v697, &v1011);
    v722 = (unsigned int **)(v721 + 8);
  }
  *(_QWORD *)(v697 + 8) = v722;
  sub_1D3E161C4(&v1011);
  v723 = qword_1EDB89E68;
  v724 = (unsigned int *)operator new();
  v732 = sub_1D3E15E44(6uLL, v725, v726, v727, v728, v729, v730, v731, 6);
  v733 = operator new();
  v734 = (_QWORD *)operator new();
  *v734 = 0x7300000005;
  v735 = (_QWORD *)operator new();
  *v735 = 0x740000000ALL;
  sub_1D3E0F328(v733, 30, (uint64_t)v734, (uint64_t)v735);
  v736 = operator new();
  v737 = (_QWORD *)operator new();
  *v737 = 0x2F00000013;
  v738 = (_QWORD *)operator new();
  *v738 = 0x300000000ALL;
  sub_1D3E0F328(v736, 28, (uint64_t)v737, (uint64_t)v738);
  v739 = operator new();
  v740 = (_QWORD *)operator new();
  *v740 = 0x180000000FLL;
  v741 = (_QWORD *)operator new();
  *v741 = 0x1900000019;
  sub_1D3E0F328(v739, 30, (uint64_t)v740, (uint64_t)v741);
  v742 = operator new();
  v743 = (_QWORD *)operator new();
  *v743 = 0xF00000017;
  v744 = (_QWORD *)operator new();
  *v744 = 0x1000000019;
  sub_1D3E0F328(v742, 30, (uint64_t)v743, (uint64_t)v744);
  sub_1D3E15EE0((uint64_t)v724, 30, (uint64_t)v732, v733, v736, v739, v742);
  v745 = v724 + 2;
  do
    v746 = __ldxr(v745);
  while (__stxr(v746 + 1, v745));
  v1011 = v724;
  v747 = *(_QWORD *)(v723 + 8);
  if (v747 >= *(_QWORD *)(v723 + 16))
  {
    v748 = sub_1D3E15FFC((unsigned int ***)v723, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v723, &v1011);
    v748 = (unsigned int **)(v747 + 8);
  }
  *(_QWORD *)(v723 + 8) = v748;
  sub_1D3E161C4(&v1011);
  v749 = qword_1EDB89E68;
  v750 = (unsigned int *)operator new();
  v758 = sub_1D3E15E44(6uLL, v751, v752, v753, v754, v755, v756, v757, 6);
  v759 = operator new();
  v760 = (_QWORD *)operator new();
  *v760 = 0x730000000DLL;
  v761 = (_QWORD *)operator new();
  *v761 = 0x7400000003;
  sub_1D3E0F328(v759, 30, (uint64_t)v760, (uint64_t)v761);
  v762 = operator new();
  v763 = (_QWORD *)operator new();
  *v763 = 0x2E00000002;
  v764 = (_QWORD *)operator new();
  *v764 = 0x2F0000001DLL;
  sub_1D3E0F328(v762, 28, (uint64_t)v763, (uint64_t)v764);
  v765 = operator new();
  v766 = (_QWORD *)operator new();
  *v766 = 0x180000002ALL;
  v767 = (_QWORD *)operator new();
  *v767 = 0x1900000001;
  sub_1D3E0F328(v765, 30, (uint64_t)v766, (uint64_t)v767);
  v768 = operator new();
  v769 = (_QWORD *)operator new();
  *v769 = 0xF00000017;
  v770 = (_QWORD *)operator new();
  *v770 = 0x100000001CLL;
  sub_1D3E0F328(v768, 30, (uint64_t)v769, (uint64_t)v770);
  sub_1D3E15EE0((uint64_t)v750, 31, (uint64_t)v758, v759, v762, v765, v768);
  v771 = v750 + 2;
  do
    v772 = __ldxr(v771);
  while (__stxr(v772 + 1, v771));
  v1011 = v750;
  v773 = *(_QWORD *)(v749 + 8);
  if (v773 >= *(_QWORD *)(v749 + 16))
  {
    v774 = sub_1D3E15FFC((unsigned int ***)v749, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v749, &v1011);
    v774 = (unsigned int **)(v773 + 8);
  }
  *(_QWORD *)(v749 + 8) = v774;
  sub_1D3E161C4(&v1011);
  v775 = qword_1EDB89E68;
  v776 = (unsigned int *)operator new();
  v784 = sub_1D3E15E44(6uLL, v777, v778, v779, v780, v781, v782, v783, 6);
  v785 = operator new();
  v786 = (unsigned int *)operator new();
  *(_QWORD *)v786 = 0x7300000011;
  v1011 = v786;
  *(_DWORD *)v785 = 30;
  sub_1D3DD6B90((_QWORD *)(v785 + 8), &v1011);
  v787 = operator new();
  v788 = (_QWORD *)operator new();
  *v788 = 0x2E0000000ALL;
  v789 = (_QWORD *)operator new();
  *v789 = 0x2F00000017;
  sub_1D3E0F328(v787, 28, (uint64_t)v788, (uint64_t)v789);
  v790 = operator new();
  v791 = (_QWORD *)operator new();
  *v791 = 0x180000000ALL;
  v792 = (_QWORD *)operator new();
  *v792 = 0x1900000023;
  sub_1D3E0F328(v790, 30, (uint64_t)v791, (uint64_t)v792);
  v793 = operator new();
  v794 = (_QWORD *)operator new();
  *v794 = 0xF00000013;
  v795 = (_QWORD *)operator new();
  *v795 = 0x1000000023;
  sub_1D3E0F328(v793, 30, (uint64_t)v794, (uint64_t)v795);
  sub_1D3E15EE0((uint64_t)v776, 32, (uint64_t)v784, v785, v787, v790, v793);
  v796 = v776 + 2;
  do
    v797 = __ldxr(v796);
  while (__stxr(v797 + 1, v796));
  v1010 = v776;
  v798 = *(_QWORD *)(v775 + 8);
  if (v798 >= *(_QWORD *)(v775 + 16))
  {
    v799 = sub_1D3E15FFC((unsigned int ***)v775, &v1010);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v775, &v1010);
    v799 = (unsigned int **)(v798 + 8);
  }
  *(_QWORD *)(v775 + 8) = v799;
  sub_1D3E161C4(&v1010);
  v800 = qword_1EDB89E68;
  v801 = (unsigned int *)operator new();
  v809 = sub_1D3E15E44(6uLL, v802, v803, v804, v805, v806, v807, v808, 6);
  v810 = operator new();
  v811 = (_QWORD *)operator new();
  *v811 = 0x7300000011;
  v812 = (_QWORD *)operator new();
  *v812 = 0x7400000001;
  sub_1D3E0F328(v810, 30, (uint64_t)v811, (uint64_t)v812);
  v813 = operator new();
  v814 = (_QWORD *)operator new();
  *v814 = 0x2E0000000ELL;
  v815 = (_QWORD *)operator new();
  *v815 = 0x2F00000015;
  sub_1D3E0F328(v813, 28, (uint64_t)v814, (uint64_t)v815);
  v816 = operator new();
  v817 = (_QWORD *)operator new();
  *v817 = 0x180000001DLL;
  v818 = (_QWORD *)operator new();
  *v818 = 0x1900000013;
  sub_1D3E0F328(v816, 30, (uint64_t)v817, (uint64_t)v818);
  v819 = operator new();
  v820 = (_QWORD *)operator new();
  *v820 = 0xF0000000BLL;
  v821 = (_QWORD *)operator new();
  *v821 = 0x100000002ELL;
  sub_1D3E0F328(v819, 30, (uint64_t)v820, (uint64_t)v821);
  sub_1D3E15EE0((uint64_t)v801, 33, (uint64_t)v809, v810, v813, v816, v819);
  v822 = v801 + 2;
  do
    v823 = __ldxr(v822);
  while (__stxr(v823 + 1, v822));
  v1011 = v801;
  v824 = *(_QWORD *)(v800 + 8);
  if (v824 >= *(_QWORD *)(v800 + 16))
  {
    v825 = sub_1D3E15FFC((unsigned int ***)v800, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v800, &v1011);
    v825 = (unsigned int **)(v824 + 8);
  }
  *(_QWORD *)(v800 + 8) = v825;
  sub_1D3E161C4(&v1011);
  v826 = qword_1EDB89E68;
  v827 = (unsigned int *)operator new();
  v835 = sub_1D3E15E44(6uLL, v828, v829, v830, v831, v832, v833, v834, 6);
  v836 = operator new();
  v837 = (_QWORD *)operator new();
  *v837 = 0x730000000DLL;
  v838 = (_QWORD *)operator new();
  *v838 = 0x7400000006;
  sub_1D3E0F328(v836, 30, (uint64_t)v837, (uint64_t)v838);
  v839 = operator new();
  v840 = (_QWORD *)operator new();
  *v840 = 0x2E0000000ELL;
  v841 = (_QWORD *)operator new();
  *v841 = 0x2F00000017;
  sub_1D3E0F328(v839, 28, (uint64_t)v840, (uint64_t)v841);
  v842 = operator new();
  v843 = (_QWORD *)operator new();
  *v843 = 0x180000002CLL;
  v844 = (_QWORD *)operator new();
  *v844 = 0x1900000007;
  sub_1D3E0F328(v842, 30, (uint64_t)v843, (uint64_t)v844);
  v845 = operator new();
  v846 = (_QWORD *)operator new();
  *v846 = 0x100000003BLL;
  v847 = (_QWORD *)operator new();
  *v847 = 0x1100000001;
  sub_1D3E0F328(v845, 30, (uint64_t)v846, (uint64_t)v847);
  sub_1D3E15EE0((uint64_t)v827, 34, (uint64_t)v835, v836, v839, v842, v845);
  v848 = v827 + 2;
  do
    v849 = __ldxr(v848);
  while (__stxr(v849 + 1, v848));
  v1011 = v827;
  v850 = *(_QWORD *)(v826 + 8);
  if (v850 >= *(_QWORD *)(v826 + 16))
  {
    v851 = sub_1D3E15FFC((unsigned int ***)v826, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v826, &v1011);
    v851 = (unsigned int **)(v850 + 8);
  }
  *(_QWORD *)(v826 + 8) = v851;
  sub_1D3E161C4(&v1011);
  v852 = qword_1EDB89E68;
  v853 = (unsigned int *)operator new();
  v861 = sub_1D3E15E44(7uLL, v854, v855, v856, v857, v858, v859, v860, 6);
  v862 = operator new();
  v863 = (_QWORD *)operator new();
  *v863 = 0x790000000CLL;
  v864 = (_QWORD *)operator new();
  *v864 = 0x7A00000007;
  sub_1D3E0F328(v862, 30, (uint64_t)v863, (uint64_t)v864);
  v865 = operator new();
  v866 = (_QWORD *)operator new();
  *v866 = 0x2F0000000CLL;
  v867 = (_QWORD *)operator new();
  *v867 = 0x300000001ALL;
  sub_1D3E0F328(v865, 28, (uint64_t)v866, (uint64_t)v867);
  v868 = operator new();
  v869 = (_QWORD *)operator new();
  *v869 = 0x1800000027;
  v870 = (_QWORD *)operator new();
  *v870 = 0x190000000ELL;
  sub_1D3E0F328(v868, 30, (uint64_t)v869, (uint64_t)v870);
  v871 = operator new();
  v872 = (_QWORD *)operator new();
  *v872 = 0xF00000016;
  v873 = (_QWORD *)operator new();
  *v873 = 0x1000000029;
  sub_1D3E0F328(v871, 30, (uint64_t)v872, (uint64_t)v873);
  sub_1D3E15EE0((uint64_t)v853, 35, (uint64_t)v861, v862, v865, v868, v871);
  v874 = v853 + 2;
  do
    v875 = __ldxr(v874);
  while (__stxr(v875 + 1, v874));
  v1011 = v853;
  v876 = *(_QWORD *)(v852 + 8);
  if (v876 >= *(_QWORD *)(v852 + 16))
  {
    v877 = sub_1D3E15FFC((unsigned int ***)v852, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v852, &v1011);
    v877 = (unsigned int **)(v876 + 8);
  }
  *(_QWORD *)(v852 + 8) = v877;
  sub_1D3E161C4(&v1011);
  v878 = qword_1EDB89E68;
  v879 = (unsigned int *)operator new();
  v887 = sub_1D3E15E44(7uLL, v880, v881, v882, v883, v884, v885, v886, 6);
  v888 = operator new();
  v889 = (_QWORD *)operator new();
  *v889 = 0x7900000006;
  v890 = (_QWORD *)operator new();
  *v890 = 0x7A0000000ELL;
  sub_1D3E0F328(v888, 30, (uint64_t)v889, (uint64_t)v890);
  v891 = operator new();
  v892 = (_QWORD *)operator new();
  *v892 = 0x2F00000006;
  v893 = (_QWORD *)operator new();
  *v893 = 0x3000000022;
  sub_1D3E0F328(v891, 28, (uint64_t)v892, (uint64_t)v893);
  v894 = operator new();
  v895 = (_QWORD *)operator new();
  *v895 = 0x180000002ELL;
  v896 = (_QWORD *)operator new();
  *v896 = 0x190000000ALL;
  sub_1D3E0F328(v894, 30, (uint64_t)v895, (uint64_t)v896);
  v897 = operator new();
  v898 = (_QWORD *)operator new();
  *v898 = 0xF00000002;
  v899 = (_QWORD *)operator new();
  *v899 = 0x1000000040;
  sub_1D3E0F328(v897, 30, (uint64_t)v898, (uint64_t)v899);
  sub_1D3E15EE0((uint64_t)v879, 36, (uint64_t)v887, v888, v891, v894, v897);
  v900 = v879 + 2;
  do
    v901 = __ldxr(v900);
  while (__stxr(v901 + 1, v900));
  v1011 = v879;
  v902 = *(_QWORD *)(v878 + 8);
  if (v902 >= *(_QWORD *)(v878 + 16))
  {
    v903 = sub_1D3E15FFC((unsigned int ***)v878, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v878, &v1011);
    v903 = (unsigned int **)(v902 + 8);
  }
  *(_QWORD *)(v878 + 8) = v903;
  sub_1D3E161C4(&v1011);
  v904 = qword_1EDB89E68;
  v905 = (unsigned int *)operator new();
  v913 = sub_1D3E15E44(7uLL, v906, v907, v908, v909, v910, v911, v912, 6);
  v914 = operator new();
  v915 = (_QWORD *)operator new();
  *v915 = 0x7A00000011;
  v916 = (_QWORD *)operator new();
  *v916 = 0x7B00000004;
  sub_1D3E0F328(v914, 30, (uint64_t)v915, (uint64_t)v916);
  v917 = operator new();
  v918 = (_QWORD *)operator new();
  *v918 = 0x2E0000001DLL;
  v919 = (_QWORD *)operator new();
  *v919 = 0x2F0000000ELL;
  sub_1D3E0F328(v917, 28, (uint64_t)v918, (uint64_t)v919);
  v920 = operator new();
  v921 = (_QWORD *)operator new();
  *v921 = 0x1800000031;
  v922 = (_QWORD *)operator new();
  *v922 = 0x190000000ALL;
  sub_1D3E0F328(v920, 30, (uint64_t)v921, (uint64_t)v922);
  v923 = operator new();
  v924 = (_QWORD *)operator new();
  *v924 = 0xF00000018;
  v925 = (_QWORD *)operator new();
  *v925 = 0x100000002ELL;
  sub_1D3E0F328(v923, 30, (uint64_t)v924, (uint64_t)v925);
  sub_1D3E15EE0((uint64_t)v905, 37, (uint64_t)v913, v914, v917, v920, v923);
  v926 = v905 + 2;
  do
    v927 = __ldxr(v926);
  while (__stxr(v927 + 1, v926));
  v1011 = v905;
  v928 = *(_QWORD *)(v904 + 8);
  if (v928 >= *(_QWORD *)(v904 + 16))
  {
    v929 = sub_1D3E15FFC((unsigned int ***)v904, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v904, &v1011);
    v929 = (unsigned int **)(v928 + 8);
  }
  *(_QWORD *)(v904 + 8) = v929;
  sub_1D3E161C4(&v1011);
  v930 = qword_1EDB89E68;
  v931 = (unsigned int *)operator new();
  v939 = sub_1D3E15E44(7uLL, v932, v933, v934, v935, v936, v937, v938, 6);
  v940 = operator new();
  v941 = (_QWORD *)operator new();
  *v941 = 0x7A00000004;
  v942 = (_QWORD *)operator new();
  *v942 = 0x7B00000012;
  sub_1D3E0F328(v940, 30, (uint64_t)v941, (uint64_t)v942);
  v943 = operator new();
  v944 = (_QWORD *)operator new();
  *v944 = 0x2E0000000DLL;
  v945 = (_QWORD *)operator new();
  *v945 = 0x2F00000020;
  sub_1D3E0F328(v943, 28, (uint64_t)v944, (uint64_t)v945);
  v946 = operator new();
  v947 = (_QWORD *)operator new();
  *v947 = 0x1800000030;
  v948 = (_QWORD *)operator new();
  *v948 = 0x190000000ELL;
  sub_1D3E0F328(v946, 30, (uint64_t)v947, (uint64_t)v948);
  v949 = operator new();
  v950 = (_QWORD *)operator new();
  *v950 = 0xF0000002ALL;
  v951 = (_QWORD *)operator new();
  *v951 = 0x1000000020;
  sub_1D3E0F328(v949, 30, (uint64_t)v950, (uint64_t)v951);
  sub_1D3E15EE0((uint64_t)v931, 38, (uint64_t)v939, v940, v943, v946, v949);
  v952 = v931 + 2;
  do
    v953 = __ldxr(v952);
  while (__stxr(v953 + 1, v952));
  v1011 = v931;
  v954 = *(_QWORD *)(v930 + 8);
  if (v954 >= *(_QWORD *)(v930 + 16))
  {
    v955 = sub_1D3E15FFC((unsigned int ***)v930, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v930, &v1011);
    v955 = (unsigned int **)(v954 + 8);
  }
  *(_QWORD *)(v930 + 8) = v955;
  sub_1D3E161C4(&v1011);
  v956 = qword_1EDB89E68;
  v957 = (unsigned int *)operator new();
  v965 = sub_1D3E15E44(7uLL, v958, v959, v960, v961, v962, v963, v964, 6);
  v966 = operator new();
  v967 = (_QWORD *)operator new();
  *v967 = 0x7500000014;
  v968 = (_QWORD *)operator new();
  *v968 = 0x7600000004;
  sub_1D3E0F328(v966, 30, (uint64_t)v967, (uint64_t)v968);
  v969 = operator new();
  v970 = (_QWORD *)operator new();
  *v970 = 0x2F00000028;
  v971 = (_QWORD *)operator new();
  *v971 = 0x3000000007;
  sub_1D3E0F328(v969, 28, (uint64_t)v970, (uint64_t)v971);
  v972 = operator new();
  v973 = (_QWORD *)operator new();
  *v973 = 0x180000002BLL;
  v974 = (_QWORD *)operator new();
  *v974 = 0x1900000016;
  sub_1D3E0F328(v972, 30, (uint64_t)v973, (uint64_t)v974);
  v975 = operator new();
  v976 = (_QWORD *)operator new();
  *v976 = 0xF0000000ALL;
  v977 = (_QWORD *)operator new();
  *v977 = 0x1000000043;
  sub_1D3E0F328(v975, 30, (uint64_t)v976, (uint64_t)v977);
  sub_1D3E15EE0((uint64_t)v957, 39, (uint64_t)v965, v966, v969, v972, v975);
  v978 = v957 + 2;
  do
    v979 = __ldxr(v978);
  while (__stxr(v979 + 1, v978));
  v1011 = v957;
  v980 = *(_QWORD *)(v956 + 8);
  if (v980 >= *(_QWORD *)(v956 + 16))
  {
    v981 = sub_1D3E15FFC((unsigned int ***)v956, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v956, &v1011);
    v981 = (unsigned int **)(v980 + 8);
  }
  *(_QWORD *)(v956 + 8) = v981;
  sub_1D3E161C4(&v1011);
  v982 = qword_1EDB89E68;
  v983 = (unsigned int *)operator new();
  v991 = sub_1D3E15E44(7uLL, v984, v985, v986, v987, v988, v989, v990, 6);
  v992 = operator new();
  v993 = (_QWORD *)operator new();
  *v993 = 0x7600000013;
  v994 = (_QWORD *)operator new();
  *v994 = 0x7700000006;
  sub_1D3E0F328(v992, 30, (uint64_t)v993, (uint64_t)v994);
  v995 = operator new();
  v996 = (_QWORD *)operator new();
  *v996 = 0x2F00000012;
  v997 = (_QWORD *)operator new();
  *v997 = 0x300000001FLL;
  sub_1D3E0F328(v995, 28, (uint64_t)v996, (uint64_t)v997);
  v998 = operator new();
  v999 = (_QWORD *)operator new();
  *v999 = 0x1800000022;
  v1000 = (_QWORD *)operator new();
  *v1000 = 0x1900000022;
  sub_1D3E0F328(v998, 30, (uint64_t)v999, (uint64_t)v1000);
  v1001 = operator new();
  v1002 = (_QWORD *)operator new();
  *v1002 = 0xF00000014;
  v1003 = (_QWORD *)operator new();
  *v1003 = 0x100000003DLL;
  sub_1D3E0F328(v1001, 30, (uint64_t)v1002, (uint64_t)v1003);
  sub_1D3E15EE0((uint64_t)v983, 40, (uint64_t)v991, v992, v995, v998, v1001);
  v1004 = v983 + 2;
  do
    v1005 = __ldxr(v1004);
  while (__stxr(v1005 + 1, v1004));
  v1011 = v983;
  v1006 = *(_QWORD *)(v982 + 8);
  if (v1006 >= *(_QWORD *)(v982 + 16))
  {
    v1007 = sub_1D3E15FFC((unsigned int ***)v982, &v1011);
  }
  else
  {
    sub_1D3E15F98((unsigned int *)v982, &v1011);
    v1007 = (unsigned int **)(v1006 + 8);
  }
  *(_QWORD *)(v982 + 8) = v1007;
  sub_1D3E161C4(&v1011);
  return (*(_QWORD *)(qword_1EDB89E68 + 8) - *(_QWORD *)qword_1EDB89E68) >> 3;
}

void sub_1D3E15A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3E161C4((unsigned int **)(v1 - 152));
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E15E44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v14;

  v14 = &a9;
  v10 = (_QWORD *)operator new();
  sub_1D3D8D6EC(v10, a1);
  if (a1)
  {
    v11 = (_DWORD *)*v10;
    do
    {
      v12 = v14++;
      *v11++ = *(_DWORD *)v12;
      --a1;
    }
    while (a1);
  }
  return v10;
}

void sub_1D3E15EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E15EE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;

  *(_QWORD *)a1 = &off_1E95AF928;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = operator new(0x20uLL);
  *(_QWORD *)(a1 + 32) = v12 + 4;
  *(_QWORD *)(a1 + 40) = v12 + 4;
  *(_QWORD *)(a1 + 24) = v12;
  *v12 = a4;
  v12[1] = a5;
  v12[2] = a6;
  v12[3] = a7;
  v14 = *(char **)(a4 + 8);
  v13 = *(char **)(a4 + 16);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = v15 >> 3;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      v18 = *(_DWORD **)v14;
      v14 += 8;
      v16 += (v18[1] + *(_DWORD *)a4) * *v18;
      --v17;
    }
    while (v17);
  }
  *(_DWORD *)(a1 + 48) = v16;
  return a1;
}

unsigned int *sub_1D3E15F98(unsigned int *result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  v3 = (unsigned int **)*((_QWORD *)result + 1);
  *v3 = 0;
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    result = *v3;
    if (*v3)
      result = sub_1D3D6D13C(result);
  }
  *v3 = v4;
  *((_QWORD *)v2 + 1) = v3 + 1;
  return result;
}

void sub_1D3E15FF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E15FFC(unsigned int ***a1, unsigned int **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int **v15;
  unint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  int64x2_t v24;
  char *v25;
  char *v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    sub_1D3D6D4F8();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v30 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61)
      sub_1D3D6D50C();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned int **)&v8[8 * v2];
  v27 = v8;
  v28.i64[0] = (uint64_t)v9;
  v28.i64[1] = (uint64_t)v9;
  v29 = &v8[8 * v7];
  *v9 = 0;
  v10 = *a2;
  v11 = v9;
  v12 = v9;
  if (v10)
  {
    v13 = v10 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v11 = v9;
    v12 = v9;
    if (*v9)
    {
      sub_1D3D6D13C(*v9);
      v12 = (unsigned int **)v28.i64[1];
      v11 = (unsigned int **)v28.i64[0];
    }
  }
  *v9 = v10;
  v15 = v12 + 1;
  v28.i64[1] = (uint64_t)(v12 + 1);
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((unsigned int **)v16 == *a1)
  {
    v24 = vdupq_n_s64(v16);
  }
  else
  {
    v18 = 0;
    v19 = v11;
    do
    {
      *--v19 = 0;
      v21 = *(unsigned int **)(v16 - 8);
      v16 -= 8;
      v20 = v21;
      if (v21)
      {
        v22 = v20 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        if (*v19)
          sub_1D3D6D13C(*v19);
      }
      *v19 = v20;
      v18 -= 8;
    }
    while ((unsigned int **)v16 != v17);
    v24 = *(int64x2_t *)a1;
    v15 = (unsigned int **)v28.i64[1];
    v11 = v19;
  }
  *a1 = v11;
  a1[1] = v15;
  v28 = v24;
  v25 = (char *)a1[2];
  a1[2] = (unsigned int **)v29;
  v29 = v25;
  v27 = (char *)v24.i64[0];
  sub_1D3E161F4((uint64_t)&v27);
  return v15;
}

void sub_1D3E16190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3E161F4((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E161C4(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

uint64_t sub_1D3E161F4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_1D3E161C4((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1D3E16240(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = 0;
  v3 = 0;
  v4 = 0x7FFFFFFF;
  do
  {
    v5 = dword_1D3E6F498[v2];
    if (v5 == a1)
    {
      v3 = v2 + 7;
      return sub_1D3E0F438(v3);
    }
    v6 = sub_1D3E0D3B4(a1, v5);
    if (v6 < v4)
    {
      v4 = v6;
      v3 = v2 + 7;
    }
    ++v2;
  }
  while (v2 != 34);
  if (v4 > 3)
    return 0;
  return sub_1D3E0F438(v3);
}

unsigned int **sub_1D3E162D8()
{
  unsigned int **v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  unsigned int *v8;

  v0 = (unsigned int **)operator new();
  sub_1D3DBAE60();
  v1 = *(unsigned int **)qword_1EDB89E20;
  if (*(_QWORD *)qword_1EDB89E20)
  {
    v2 = v1 + 2;
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    v7 = v1;
    do
      v4 = __ldxr(v2);
    while (__stxr(v4 + 1, v2));
    v8 = v1;
    *v0 = 0;
    do
      v5 = __ldxr(v2);
    while (__stxr(v5 + 1, v2));
    if (*v0)
      sub_1D3D6D13C(*v0);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *v0 = 0;
  }
  *v0 = v1;
  qword_1EFE31980 = (uint64_t)v0;
  sub_1D3D82034(&v8);
  return sub_1D3D81F38(&v7);
}

void sub_1D3E1639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  uint64_t v10;

  sub_1D3D82034(&a10);
  sub_1D3D81F38(&a9);
  MEMORY[0x1D8254C54](v10, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E163D8(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  NSObject *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  NSObject *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int i;
  int v33;
  int v34;
  char v35;
  int v36;
  int v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  signed int v41;
  int v42;
  NSObject *v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t j;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  _BYTE *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  _DWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  char v95;
  _QWORD v96[3];
  unsigned int *v97;
  uint64_t (**v98)(_QWORD);
  int v99;
  uint64_t v100;
  uint64_t (**v101)(_QWORD);
  int v102;
  uint64_t v103;
  uint64_t (**v104)(_QWORD);
  int v105;
  uint64_t v106;
  _QWORD v107[2];
  uint64_t v108;
  uint64_t (**v109)(_QWORD);
  int v110;
  uint64_t v111;
  __int128 v112;
  unsigned __int8 v113;
  unsigned int *v114;
  unsigned int *v115;
  __int128 v116;
  __int128 v117;
  unsigned __int8 v118;
  unsigned int *v119;
  char v120;
  char **v121;
  char *v122;
  __int128 buf;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v119 = 0;
  v3 = (unsigned int *)(a2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  v114 = (unsigned int *)a2;
  v115 = 0;
  do
    v5 = __ldxr(v3);
  while (__stxr(v5 + 1, v3));
  v115 = (unsigned int *)a2;
  v117 = 0u;
  v116 = 0u;
  LODWORD(v117) = 3;
  v118 = 0;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (unint64_t)(v6 - 18) < 0xFFFFFFFFFFFFFFF9 || (*(_QWORD *)(a2 + 16) & 1) == 0;
  if (v7)
  {
    if (qword_1EFE31870 != -1)
      dispatch_once(&qword_1EFE31870, &unk_1E95B35E8);
    v8 = qword_1EFE31868;
    if (os_log_type_enabled((os_log_t)qword_1EFE31868, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_debug_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_DEBUG, "Invalid BitMatrixParser intialization: dimension = %zu", (uint8_t *)&buf, 0xCu);
    }
  }
  sub_1D3D6D10C(&v114);
  sub_1D3E17C1C(&v112, (uint64_t)&v115);
  v9 = SDWORD2(v112);
  if (DWORD2(v112) == 3)
  {
    *a1 = 0;
    v10 = v119;
    if (v119)
    {
      v11 = v119 + 2;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
LABEL_81:
    *a1 = v10;
    goto LABEL_127;
  }
  v13 = (_DWORD *)v116;
  if (!(_QWORD)v116)
  {
    sub_1D3E17C1C(&buf, (uint64_t)&v115);
    if (DWORD2(buf) == 3)
      goto LABEL_78;
    *(_QWORD *)&v116 = buf;
    v41 = v115[4];
    if ((*(_DWORD *)buf - 5) < 0xFFFFFFFC)
      v42 = -1;
    else
      v42 = 2 * *(_DWORD *)buf + 9;
    if (v42 != v41)
    {
      if (v42 >= v41)
        goto LABEL_78;
      if (qword_1EFE31870 != -1)
        dispatch_once(&qword_1EFE31870, &unk_1E95B35E8);
      v43 = qword_1EFE31868;
      if (os_log_type_enabled((os_log_t)qword_1EFE31868, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v129) = 67109376;
        DWORD1(v129) = v42;
        WORD4(v129) = 1024;
        *(_DWORD *)((char *)&v129 + 10) = v41;
        _os_log_debug_impl(&dword_1D3D6B000, v43, OS_LOG_TYPE_DEBUG, "Using read dimension %d instead of geometry dimension %d", (uint8_t *)&v129, 0xEu);
      }
    }
    v13 = (_DWORD *)v116;
    if ((_QWORD)v116)
      goto LABEL_20;
LABEL_78:
    *a1 = 0;
    v10 = v119;
    if (v119)
    {
      v44 = v119 + 2;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    goto LABEL_81;
  }
LABEL_20:
  if (!v13 || (_DWORD)v117 == 3)
  {
    v110 = 0;
    v109 = &off_1E95AF9B0;
    v111 = 0;
  }
  else
  {
    v14 = BYTE8(v117);
    if (BYTE8(v117) >= 4u)
    {
      if (qword_1EFE31870 != -1)
        dispatch_once(&qword_1EFE31870, &unk_1E95B35E8);
      v15 = qword_1EFE31868;
      if (os_log_type_enabled((os_log_t)qword_1EFE31868, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v14;
        _os_log_debug_impl(&dword_1D3D6B000, v15, OS_LOG_TYPE_DEBUG, "Invalid DataMask intialization: reference = %d", (uint8_t *)&buf, 8u);
      }
    }
    v16 = v115;
    if ((int)*((_QWORD *)v115 + 2) >= 1)
    {
      v17 = 0;
      v18 = off_1E95ADBF0[v14];
      v19 = *((_QWORD *)v115 + 2);
      do
      {
        v20 = 0;
        do
        {
          if (((unsigned int (*)(uint64_t, uint64_t))v18)(v17, v20))
            *(_DWORD *)(*((_QWORD *)v16 + 6)
                      + (((unint64_t)(v20 + v17 * *((_QWORD *)v16 + 3)) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) ^= 1 << (v20 + v17 * *((_QWORD *)v16 + 3));
          ++v20;
        }
        while (v19 != v20);
        ++v17;
      }
      while (v17 != v19);
    }
    if ((*(_DWORD *)v116 - 5) < 0xFFFFFFFC)
      v21 = -1;
    else
      v21 = 2 * *(_DWORD *)v116 + 9;
    v22 = (_QWORD *)sub_1D3D93838((uint64_t)&buf, v21);
    v23 = v124;
    sub_1D3D93950(v22, 0, 0, 9, 9);
    sub_1D3D93950(&buf, 9uLL, 0, v23 - 9, 1);
    sub_1D3D93950(&buf, 0, 9uLL, 1, v23 - 9);
    if ((_DWORD)v117)
      v24 = 8;
    else
      v24 = 10;
    v25 = *(_DWORD *)v116;
    if (*(_DWORD *)v116 == 1)
      v26 = 2;
    else
      v26 = v24;
    sub_1D3D81C50((uint64_t)&v129, *(int *)(v116 + 4));
    v92 = v13;
    v93 = v9;
    v94 = a1;
    if (v21 >= 2)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = v21 - 1;
      v95 = 1;
      v31 = v25 | 2;
      while (1)
      {
        for (i = 1; i != v21; ++i)
        {
          v33 = 0;
          if ((v95 & 1) != 0)
            v34 = v21 - i;
          else
            v34 = i;
          v35 = 1;
          do
          {
            v36 = v33 + v30;
            if (v118)
              v37 = v34;
            else
              v37 = v36;
            if (!v118)
              v36 = v34;
            v38 = v35;
            v39 = ((v124 + ~(uint64_t)v36) & -v128 | (v128 - 1) & v37)
                + ((v126 + ~(uint64_t)v37) & -v128 | (v128 - 1) & v36) * v125;
            if (((*(_DWORD *)(v127 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v39) & 1) == 0)
            {
              ++v27;
              v28 = sub_1D3D6D4A0(v115, v37, v36) | (2 * v28);
              if (v31 == 3 && v29 == v26 && v27 == 4)
              {
                LOBYTE(v28) = 16 * v28;
              }
              else if (v27 != 8)
              {
                goto LABEL_62;
              }
              v27 = 0;
              *(_BYTE *)(*(_QWORD *)(v130 + 16) + v29++) = v28;
              v28 = 0;
            }
LABEL_62:
            v35 = 0;
            v33 = -1;
          }
          while ((v38 & 1) != 0);
        }
        v95 ^= 1u;
        v40 = __OFSUB__(v30, 2);
        v30 -= 2;
        if ((v30 < 0) ^ v40 | (v30 == 0))
          goto LABEL_84;
      }
    }
    v29 = 0;
LABEL_84:
    v46 = *(_DWORD *)(v116 + 4);
    v110 = 0;
    v109 = &off_1E95AF9B0;
    v111 = 0;
    v7 = v29 == v46;
    v9 = v93;
    a1 = v94;
    v13 = v92;
    if (v7)
    {
      v47 = v130;
      if (v130)
      {
        v48 = (unsigned int *)(v130 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v111 = v47;
    }
    sub_1D3D7F558(&v129);
    *(_QWORD *)&buf = &off_1E95AFA40;
    if (v127)
      MEMORY[0x1D8254C3C](v127, 0x1000C8052888210);
  }
  sub_1D3D81C50((uint64_t)v107, (int)v13[2 * v9 + 3]);
  v105 = 0;
  v104 = &off_1E95AF9B0;
  v106 = 0;
  v50 = v111;
  if (v111)
  {
    v51 = (unsigned int *)(v111 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v106 = v50;
  v102 = 0;
  v101 = &off_1E95AF9B0;
  v103 = 0;
  v53 = v108;
  if (v108)
  {
    v54 = (unsigned int *)(v108 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v103 = v53;
  v56 = HIDWORD(v112);
  v59 = v53 + 16;
  v58 = *(_QWORD *)(v53 + 16);
  v57 = *(_QWORD *)(v59 + 8);
  v60 = *(_QWORD *)(v106 + 24) - *(_QWORD *)(v106 + 16);
  sub_1D3D81F68((uint64_t)&buf, v60);
  if (v60 >= 1)
  {
    v61 = *(unsigned __int8 **)(v106 + 16);
    v62 = *(_DWORD **)(v124 + 16);
    v63 = v60;
    do
    {
      v64 = *v61++;
      *v62++ = v64;
      --v63;
    }
    while (v63);
  }
  v120 = 0;
  v65 = atomic_load(qword_1EFE31988);
  if (v65 != -1)
  {
    v122 = &v120;
    v121 = &v122;
    std::__call_once(qword_1EFE31988, &v121, (void (__cdecl *)(void *))sub_1D3E162D8);
  }
  v66 = v57 - v58;
  v67 = v60 - (v57 - v58);
  v68 = (uint64_t *)qword_1EFE31980;
  DWORD2(v129) = 0;
  *(_QWORD *)&v129 = &off_1E95AF9D0;
  v69 = v124;
  if (v124)
  {
    v70 = (unsigned int *)(v124 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v130 = v69;
  v72 = sub_1D3DBC050(v68, (uint64_t)&v129, v67);
  sub_1D3D82064(&v129);
  if (v72 <= v67 - v56)
  {
    if (v66 >= 1)
    {
      for (j = 0; j != v66; ++j)
        *(_BYTE *)(*(_QWORD *)(v103 + 16) + j) = *(_DWORD *)(*(_QWORD *)(v124 + 16) + 4 * j);
    }
    sub_1D3D82064(&buf);
    sub_1D3D7F558(&v101);
    sub_1D3D7F558(&v104);
    *((_QWORD *)&buf + 1) = 0;
    v124 = 0;
    *(_QWORD *)&buf = (char *)&buf + 8;
    v77 = *v13;
    *((_DWORD *)sub_1D3D7F308((uint64_t **)&buf, 12, &dword_1D3E7565C) + 8) = v77;
    v78 = dword_1D3E6A138[v9];
    *((_DWORD *)sub_1D3D7F308((uint64_t **)&buf, 13, &dword_1D3E75660) + 8) = v78;
    v79 = v113;
    *((_DWORD *)sub_1D3D7F308((uint64_t **)&buf, 8, (unsigned int *)"\b") + 8) = v79;
    v80 = v118;
    *((_DWORD *)sub_1D3D7F308((uint64_t **)&buf, 14, &dword_1D3E75664) + 8) = v80;
    v81 = operator new();
    v99 = 0;
    v98 = &off_1E95AF9B0;
    v82 = v108;
    if (v108)
    {
      v83 = (unsigned int *)(v108 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    v100 = v82;
    v85 = operator new();
    sub_1D3D81D4C(&v129, "");
    *(_DWORD *)(v85 + 8) = 0;
    v86 = (unsigned int *)(v85 + 8);
    *(_QWORD *)v85 = off_1E95AF718;
    v87 = (_BYTE *)(v85 + 16);
    if (SHIBYTE(v130) < 0)
    {
      sub_1D3D7FCC0(v87, (void *)v129, *((unint64_t *)&v129 + 1));
    }
    else
    {
      *(_OWORD *)v87 = v129;
      *(_QWORD *)(v85 + 32) = v130;
    }
    do
      v88 = __ldxr(v86);
    while (__stxr(v88 + 1, v86));
    v97 = (unsigned int *)v85;
    sub_1D3D7F3AC((uint64_t)v96, &buf);
    sub_1D3DAFA54(v81, (uint64_t)&v98, (uint64_t *)&v97, v96);
    v89 = (unsigned int *)(v81 + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    *a1 = v81;
    sub_1D3D7F520((_QWORD *)v96[1]);
    sub_1D3D7F598(&v97);
    if (SHIBYTE(v130) < 0)
      operator delete((void *)v129);
    sub_1D3D7F558(&v98);
    sub_1D3D7F520(*((_QWORD **)&buf + 1));
  }
  else
  {
    sub_1D3D82064(&buf);
    sub_1D3D7F558(&v101);
    sub_1D3D7F558(&v104);
    *a1 = 0;
    v73 = v119;
    if (v119)
    {
      v74 = v119 + 2;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    *a1 = v73;
  }
  sub_1D3D7F558(v107);
  sub_1D3D7F558(&v109);
LABEL_127:
  sub_1D3D6D10C(&v115);
  return sub_1D3D7F814(&v119);
}

void sub_1D3E16DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,unsigned int *a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  MEMORY[0x1D8254C54](v38, 0x1093C40E92185C3);
  sub_1D3D7F558(&a18);
  MEMORY[0x1D8254C54](v37, 0x10B3C40E71DBE67);
  sub_1D3D7F520(*(_QWORD **)(v39 - 184));
  sub_1D3D7F558(&a27);
  sub_1D3D7F558(&a30);
  sub_1D3D6D10C(&a37);
  sub_1D3D7F814((unsigned int **)(v39 - 224));
  _Unwind_Resume(a1);
}

void sub_1D3E16F3C(uint64_t *a1, uint64_t a2, uint64_t **a3, char *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t (**v51)(_QWORD);
  int v52;
  uint64_t v53;
  char **v54;
  char *v55[2];
  void *__p[2];
  char v57;
  unsigned int *v58;
  uint64_t (**v59)(_QWORD);
  int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  _QWORD v66[3];
  std::string v67;
  unsigned int *v68;
  unsigned int *v69;

  v55[0] = 0;
  v55[1] = 0;
  v54 = v55;
  if (a4)
  {
    v8 = sub_1D3E01290((uint64_t **)&v54, dword_1D3E6F538);
    sub_1D3DFF314((std::string *)(v8 + 5), a4);
  }
  v52 = 0;
  v51 = &off_1E95AF9B0;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v53 = v9;
  v12 = sub_1D3D7F308(a3, 12, &dword_1D3E7565C);
  v13 = sub_1D3E02918(*((_DWORD *)v12 + 8));
  v14 = sub_1D3D7F308(a3, 13, &dword_1D3E75660)[4] & 3;
  v15 = dword_1D3E6A128[v14];
  v69 = 0;
  if (v13)
    v16 = (_DWORD)v14 == 2;
  else
    v16 = 1;
  if (v16)
  {
    *a1 = 0;
  }
  else
  {
    v17 = operator new();
    v18 = v17;
    *(_DWORD *)(v17 + 8) = 0;
    v19 = (unsigned int *)(v17 + 8);
    *(_QWORD *)v17 = &off_1E95AFA60;
    *(_DWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 16) = &off_1E95AF9B0;
    *(_QWORD *)(v17 + 32) = 0;
    if (v53)
    {
      v20 = (unsigned int *)(v53 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(unsigned int **)(v17 + 32);
      if (v22)
        sub_1D3D6D13C(v22);
    }
    *(_QWORD *)(v18 + 32) = v53;
    *(_QWORD *)(v18 + 40) = 0;
    do
      v23 = __ldxr(v19);
    while (__stxr(v23 + 1, v19));
    v68 = (unsigned int *)v18;
    memset(&v67, 0, sizeof(v67));
    v24 = *(int *)v13;
    sub_1D3DB48A0((uint64_t)v66);
    v25 = v24 - 1;
    while (8
          * (*(_DWORD *)(*(_QWORD *)(v18 + 32) + 24)
           - *(_DWORD *)(*(_QWORD *)(v18 + 32) + 16)
           - *(_DWORD *)(v18 + 40))
          - *(_DWORD *)(v18 + 44) >= 4)
    {
      v26 = sub_1D3DA34C8(v18, v25);
      v27 = v26 >= 4 ? 4 : v26;
      if (v26 > 3)
        break;
      v28 = sub_1D3DA34C8(v18, dword_1D3E6BA6C[4 * v25 + v27]);
      if (v28 < 1)
        break;
      switch(v27)
      {
        case 0u:
          v29 = v68;
          if (v68)
          {
            v30 = v68 + 2;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v65 = v29;
          v32 = &v65;
          sub_1D3DFF454((uint64_t *)&v65, &v67, v28, 0, (uint64_t)&v54);
          goto LABEL_43;
        case 1u:
          v33 = v68;
          if (v68)
          {
            v34 = v68 + 2;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v64 = v33;
          sub_1D3DFFA64((uint64_t)v33, &v67, v28, 0, 0, (uint64_t)&v54);
          v32 = &v64;
          goto LABEL_43;
        case 2u:
          v36 = v68;
          if (v68)
          {
            v37 = v68 + 2;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v63 = v36;
          sub_1D3DFEBD4((uint64_t)v36, &v67, v28, 0, (uint64_t)v66, (uint64_t)&v54);
          v32 = &v63;
LABEL_43:
          sub_1D3DB4958(v32);
          break;
        case 3u:
          v39 = v68;
          if (v68)
          {
            v40 = v68 + 2;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v62 = v39;
          sub_1D3DFEAC4((uint64_t *)&v62, &v67, v28);
        default:
          continue;
      }
    }
    v42 = operator new();
    v60 = 0;
    v59 = &off_1E95AF9B0;
    if (v53)
    {
      v43 = (unsigned int *)(v53 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v61 = v53;
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 0;
    v46 = (unsigned int *)(v45 + 8);
    *(_QWORD *)v45 = off_1E95AF718;
    v47 = (_BYTE *)(v45 + 16);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1D3D7FCC0(v47, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v47 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
      *(_QWORD *)(v45 + 32) = *((_QWORD *)&v67.__r_.__value_.__l + 2);
    }
    do
      v48 = __ldxr(v46);
    while (__stxr(v48 + 1, v46));
    v58 = (unsigned int *)v45;
    sub_1D3D81D4C(__p, off_1E95B2E30[v15]);
    sub_1D3DAF910(v42, (uint64_t)&v59, (uint64_t *)&v58, (uint64_t)v66, (__int128 *)__p);
    v49 = (unsigned int *)(v42 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    *a1 = v42;
    if (v57 < 0)
      operator delete(__p[0]);
    sub_1D3D7F598(&v58);
    sub_1D3D7F558(&v59);
    sub_1D3DAF7E0(v66);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    sub_1D3DB4958(&v68);
  }
  sub_1D3D7F814(&v69);
  sub_1D3D7F558(&v51);
  sub_1D3E01370(v55[0]);
}

void sub_1D3E1742C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1D8254C54](v32, 0x1093C40E92185C3);
  sub_1D3D7F558(&a24);
  MEMORY[0x1D8254C54](v31, 0x10B3C40E71DBE67);
  sub_1D3DAF7E0(&a31);
  JUMPOUT(0x1D3E174A8);
}

void sub_1D3E174E4(std::exception *a1)
{
  sub_1D3DDE164(a1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E17508(_QWORD *a1, char *a2)
{
  _QWORD *result;

  result = sub_1D3DDE1A0(a1, a2);
  *result = &off_1E95AF388;
  return result;
}

uint64_t sub_1D3E17528(uint64_t a1, signed int a2, int a3, float *a4, float *a5, float *a6)
{
  uint64_t result;
  int v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  int v25;
  unint64_t v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  float *v44;
  float v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float *v51;
  int v52;
  unint64_t v53;
  float *v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  float *v60;
  float *v61;
  int v62;
  int v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  float *v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  int v80;

  result = 0;
  v8 = a3 - a2;
  if (a3 >= a2)
    v9 = a3 - a2;
  else
    v9 = v8 + 1;
  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = 0;
      if (a3 >= a2 && a4 && a5 && a6)
      {
        v79 = v9 >> 1;
        v80 = a3 - a2;
        LODWORD(v11) = (v9 >> 1) + a2;
        if (v8 < 2)
        {
          v12 = 0;
          v13 = 0;
          v14 = 0;
          v16 = 0.0;
          v15 = 0.0;
        }
        else
        {
          v12 = 0;
          v13 = 0;
          v14 = 0;
          v15 = 0.0;
          v16 = 0.0;
          v17 = a2;
          do
          {
            v18 = *(float *)(a1 + 4 * v17);
            if ((unint64_t)v13 >= v12)
            {
              v19 = v13 - v14;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62)
                sub_1D3D6D4F8();
              if ((uint64_t)(v12 - (_QWORD)v14) >> 1 > v20)
                v20 = (uint64_t)(v12 - (_QWORD)v14) >> 1;
              if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v21 = (unint64_t)sub_1D3D82278(v21);
              else
                v22 = 0;
              v23 = (float *)(v21 + 4 * v19);
              *v23 = v18;
              v24 = v23 + 1;
              while (v13 != v14)
              {
                v25 = *((_DWORD *)v13-- - 1);
                *((_DWORD *)v23-- - 1) = v25;
              }
              v12 = v21 + 4 * v22;
              if (v14)
                operator delete(v14);
              v14 = v23;
              v13 = v24;
            }
            else
            {
              *v13++ = v18;
            }
            if ((char *)v13 - (char *)v14 >= 5)
            {
              v26 = (((unint64_t)((char *)v13 - (char *)v14) >> 2) - 2) >> 1;
              v27 = &v14[v26];
              v28 = v13 - 1;
              v29 = *(v13 - 1);
              v30 = *v27;
              if (*v27 < v29)
              {
                do
                {
                  *v28 = v30;
                  v28 = v27;
                  if (!v26)
                    break;
                  v26 = (v26 - 1) >> 1;
                  v27 = &v14[v26];
                  v30 = *v27;
                }
                while (*v27 < v29);
                *v28 = v29;
              }
            }
            v16 = v16 + v18;
            v15 = v15 + (float)(v18 * v18);
            ++v17;
          }
          while ((int)v11 > (int)v17);
        }
        if ((int)v11 < a3)
        {
          v11 = (int)v11;
          while (1)
          {
            v31 = *(float *)(a1 + 4 * v11);
            v32 = *v14;
            if (*v14 > v31)
              break;
LABEL_72:
            v16 = v16 + v31;
            v15 = v15 + (float)(v31 * v31);
            if (++v11 == a3)
              goto LABEL_73;
          }
          v33 = (char *)v13 - (char *)v14;
          if ((char *)v13 - (char *)v14 >= 5)
          {
            v34 = 0;
            v35 = v33 >> 2;
            v36 = (unint64_t)((v33 >> 2) - 2) >> 1;
            v37 = v14;
            do
            {
              v38 = v37;
              v37 += v34 + 1;
              v39 = 2 * v34;
              v34 = (2 * v34) | 1;
              v40 = v39 + 2;
              if (v40 < v35 && *v37 < v37[1])
              {
                ++v37;
                v34 = v40;
              }
              *v38 = *v37;
            }
            while (v34 <= v36);
            v41 = v13 - 1;
            if (v37 != v13 - 1)
            {
              *v37 = *v41;
              *v41 = v32;
              v42 = (char *)v37 - (char *)v14 + 4;
              if (v42 < 5)
                goto LABEL_52;
              v43 = (((unint64_t)v42 >> 2) - 2) >> 1;
              v44 = &v14[v43];
              v45 = *v44;
              v32 = *v37;
              if (*v44 >= *v37)
                goto LABEL_52;
              do
              {
                *v37 = v45;
                v37 = v44;
                if (!v43)
                  break;
                v43 = (v43 - 1) >> 1;
                v44 = &v14[v43];
                v45 = *v44;
              }
              while (*v44 < v32);
            }
            *v37 = v32;
          }
LABEL_52:
          v46 = v13 - 1;
          if ((unint64_t)(v13 - 1) >= v12)
          {
            v47 = v46 - v14;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62)
              sub_1D3D6D4F8();
            if ((uint64_t)(v12 - (_QWORD)v14) >> 1 > v48)
              v48 = (uint64_t)(v12 - (_QWORD)v14) >> 1;
            if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            if (v49)
              v49 = (unint64_t)sub_1D3D82278(v49);
            else
              v50 = 0;
            v51 = (float *)(v49 + 4 * v47);
            *v51 = v31;
            v13 = v51 + 1;
            while (v46 != v14)
            {
              v52 = *((_DWORD *)v46-- - 1);
              *((_DWORD *)v51-- - 1) = v52;
            }
            v12 = v49 + 4 * v50;
            operator delete(v14);
            v14 = v51;
          }
          else
          {
            *v46 = v31;
          }
          if ((char *)v13 - (char *)v14 >= 5)
          {
            v53 = (((unint64_t)((char *)v13 - (char *)v14) >> 2) - 2) >> 1;
            v54 = &v14[v53];
            v55 = v13 - 1;
            v56 = *(v13 - 1);
            v57 = *v54;
            if (*v54 < v56)
            {
              do
              {
                *v55 = v57;
                v55 = v54;
                if (!v53)
                  break;
                v53 = (v53 - 1) >> 1;
                v54 = &v14[v53];
                v57 = *v54;
              }
              while (*v54 < v56);
              *v55 = v56;
            }
          }
          goto LABEL_72;
        }
LABEL_73:
        v58 = 0.0;
        if (v13 == v14)
        {
          v60 = a5;
          v59 = a4;
          v61 = a6;
          v63 = v79;
          v62 = v80;
        }
        else
        {
          v60 = a5;
          v59 = a4;
          v61 = a6;
          v63 = v79;
          v62 = v80;
          do
          {
            v64 = (char *)v13 - (char *)v14;
            v65 = *v14;
            if ((char *)v13 - (char *)v14 >= 5)
            {
              v66 = 0;
              v67 = v64 >> 2;
              v68 = (unint64_t)((v64 >> 2) - 2) >> 1;
              v69 = v14;
              do
              {
                v70 = v69;
                v69 += v66 + 1;
                v71 = 2 * v66;
                v66 = (2 * v66) | 1;
                v72 = v71 + 2;
                if (v72 < v67 && *v69 < v69[1])
                {
                  ++v69;
                  v66 = v72;
                }
                *v70 = *v69;
              }
              while (v66 <= v68);
              v73 = v13 - 1;
              if (v69 == v13 - 1)
              {
                *v69 = v65;
              }
              else
              {
                *v69 = *v73;
                *v73 = v65;
                v74 = (char *)v69 - (char *)v14 + 4;
                if (v74 >= 5)
                {
                  v75 = (((unint64_t)v74 >> 2) - 2) >> 1;
                  v76 = &v14[v75];
                  v77 = *v76;
                  v78 = *v69;
                  if (*v76 < *v69)
                  {
                    do
                    {
                      *v69 = v77;
                      v69 = v76;
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = &v14[v75];
                      v77 = *v76;
                    }
                    while (*v76 < v78);
                    *v69 = v78;
                  }
                }
              }
            }
            v58 = v58 + v65;
            --v13;
          }
          while (v13 != v14);
        }
        *v61 = v58 / (float)v63;
        *v60 = (float)(v16 - v58) / (float)(v62 - v63);
        *v59 = (float)(v15 / (float)v62) - (float)((float)(v16 / (float)v62) * (float)(v16 / (float)v62));
        if (v14)
          operator delete(v14);
        return 1;
      }
    }
  }
  return result;
}

void sub_1D3E17A68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D3E17A90(uint64_t a1)
{
  sub_1D3E17AB4(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E17AB4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E95AF6F8;
  sub_1D3D7F520(*(_QWORD **)(a1 + 88));
  v3 = (void **)(a1 + 48);
  sub_1D3D6D79C(&v3);
  sub_1D3D7F558((_QWORD *)(a1 + 24));
  sub_1D3D7F598((unsigned int **)(a1 + 16));
  return a1;
}

uint64_t sub_1D3E17B10(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int ***a4, int a5, _QWORD *a6)
{
  unsigned int **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E95AF6F8;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = (unsigned int **)(a1 + 16);
  v12 = *a2;
  if (*a2)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (*v11)
      sub_1D3D6D13C(*v11);
  }
  *(_QWORD *)(a1 + 16) = v12;
  sub_1D3DAF780(a1 + 24, a3);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1D3D6D6A8((unsigned int *)(a1 + 48), *a4, a4[1], a4[1] - *a4);
  *(_DWORD *)(a1 + 72) = a5;
  sub_1D3D7F3AC(a1 + 80, a6);
  return a1;
}

void sub_1D3E17BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int **v2;
  _QWORD *v3;
  va_list va;

  va_start(va, a2);
  sub_1D3D6D79C((void ***)va);
  sub_1D3D7F558(v3);
  sub_1D3D7F598(v2);
  _Unwind_Resume(a1);
}

__int128 *sub_1D3E17C1C(__int128 *result, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v16;
  int8x8_t v17;
  int32x2_t v18;
  int32x2_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  int v23;
  __int128 v24;
  char v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;

  v2 = result;
  v3 = a2 + 16;
  if (*(_DWORD *)(a2 + 24) != 3)
    goto LABEL_21;
  v5 = 0;
  for (i = 1; i != 9; ++i)
  {
    v7 = *(unsigned int **)a2;
    if (*(_QWORD *)a2)
    {
      v8 = v7 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v28 = v7;
    }
    else
    {
      v28 = 0;
    }
    v5 = sub_1D3D6D4A0(v7, i, 8) | (2 * v5);
    sub_1D3D6D10C(&v28);
  }
  v10 = 7;
  do
  {
    v11 = v5;
    v12 = *(unsigned int **)a2;
    if (*(_QWORD *)a2)
    {
      v13 = v12 + 2;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v27 = v12;
    }
    else
    {
      v27 = 0;
    }
    v5 = sub_1D3D6D4A0(v12, 8, v10) & 1 | (2 * v5);
    sub_1D3D6D10C(&v27);
  }
  while (v10-- > 1);
  result = sub_1D3DD8CFC((uint64_t)&v24, v5);
  v16 = v26;
  if (v26)
  {
    v17.i32[0] = (2 * v11) >> 8;
    v17.i32[1] = v5;
    v18 = (int32x2_t)vand_s8(v17, (int8x8_t)0xFF000000FFLL);
    v19 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmul_s32((int32x2_t)vorr_s8(vand_s8((int8x8_t)vmul_s32(v18, (int32x2_t)0x80200008020), (int8x8_t)0x2211000088440), vand_s8((int8x8_t)vmul_s32(v18, (int32x2_t)0x802000000802), (int8x8_t)0x8844000022110)), vdup_n_s32(0x10101u)), (uint32x2_t)0xFFFFFFF7FFFFFFEFLL), (int8x8_t)0x7F800000007FLL);
    result = sub_1D3DD8CFC((uint64_t)&v21, vorr_s8((int8x8_t)v19, (int8x8_t)vdup_lane_s32(v19, 1)).u32[0]);
    if (v23 >= v16)
    {
      *(_OWORD *)v3 = v24;
      *(_BYTE *)(v3 + 16) = v25;
    }
    else
    {
      *(_OWORD *)v3 = v21;
      *(_BYTE *)(v3 + 16) = v22;
      *(_BYTE *)(a2 + 40) = 1;
    }
LABEL_21:
    v20 = *(_OWORD *)v3;
    goto LABEL_22;
  }
  *(_BYTE *)(v3 + 16) = v25;
  v20 = v24;
  *(_OWORD *)v3 = v24;
LABEL_22:
  *v2 = v20;
  *((_QWORD *)v2 + 2) = *(_QWORD *)(v3 + 16);
  return result;
}

void sub_1D3E17E08()
{
  JUMPOUT(0x1D8254C54);
}

float sub_1D3E17E1C(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

float sub_1D3E17E24(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

void sub_1D3E17E2C(_BYTE *a1, unint64_t *a2, unsigned int *a3)
{
  void *v7;
  unsigned int v8;
  NSObject *v9;
  uint8_t buf[8];
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!atomic_load(a2))
  {
LABEL_8:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v7 = (void *)MEMORY[0x1D8255128]();
  atomic_load(a2);
  *a3 = e5rt_compute_gpu_device_retain_from_mtl_device();
  objc_autoreleasePoolPop(v7);
  v8 = *a3;
  if (*a3)
  {
    if (qword_1EDB89F90 != -1)
      dispatch_once(&qword_1EDB89F90, &unk_1E95B34C8);
    v9 = (id)qword_1EDB89F98;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v8;
      v11 = 2082;
      v12 = sub_1D3D82AEC(a3);
      _os_log_error_impl(&dword_1D3D6B000, v9, OS_LOG_TYPE_ERROR, "e5rt_compute_gpu_device_retain_from_mtl_device failed: (%{public}d): %{public}s", buf, 0x12u);
    }

    goto LABEL_8;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)a1 = 0;
  a1[8] = 1;
  sub_1D3D8BAE4(buf);
}

void sub_1D3E17F7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D3D6D5A8(a1);
  _Unwind_Resume(a1);
}

uint64_t MRCContextCopySupportedComputeDevicesForDecoderUsingOptions(CFTypeRef a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9[9];
  CFTypeRef v10;
  unint64_t *v11;
  uint64_t v12;
  void *v13;

  if (a1)
    a1 = CFRetain(a1);
  v10 = a1;
  sub_1D3DD9E64((uint64_t)v9, (unint64_t *)&v10);
  sub_1D3D8BAAC((unint64_t *)&v10);
  LOBYTE(v10) = 0;
  BYTE4(v10) = 0;
  if ((sub_1D3DDC428(v9, CFSTR("AppClipCode"), (uint64_t)&v10) & 1) == 0
    && (!_os_feature_enabled_impl() || (uint64_t)v9[7] < 196608)
    && (sub_1D3DDD9BC((uint64_t)v9) & 1) == 0)
  {
    v7 = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    goto LABEL_11;
  }
  v1 = (void *)MEMORY[0x1D8255128]();
  v10 = 0;
  v11 = (unint64_t *)&v10;
  v12 = 0x2020000000;
  v2 = off_1EDB89380;
  v13 = off_1EDB89380;
  if (!off_1EDB89380)
  {
    v3 = (void *)sub_1D3E18130();
    v2 = dlsym(v3, "MLAllComputeDevices");
    v11[3] = (unint64_t)v2;
    off_1EDB89380 = v2;
  }
  _Block_object_dispose(&v10, 8);
  if (v2)
  {
    ((void (*)(void))v2)();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend_copy(v4, v5, v6);

    objc_autoreleasePoolPop(v1);
LABEL_11:
    sub_1D3DD9B30(v9);
    return v7;
  }
  dlerror();
  result = abort_report_np();
  __break(1u);
  return result;
}

void sub_1D3E180EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  _Block_object_dispose((const void *)(v2 - 64), 8);
  sub_1D3DD9B30((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E18130()
{
  uint64_t v0;
  void *v2;

  if (qword_1EDB89358)
    return qword_1EDB89358;
  qword_1EDB89358 = _sl_dlopen();
  v0 = qword_1EDB89358;
  if (!qword_1EDB89358)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

unint64_t sub_1D3E181F0(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v1 = a1 + 2;
  v2 = atomic_load(a1 + 2);
  v3 = *a1;
  if (v2)
  {
    v5 = (void *)MEMORY[0x1D8255128]();
    v6 = (void *)atomic_load(v1);
    v7 = v6;
    sub_1D3E182B4();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = 50331652;
    }
    else
    {
      sub_1D3E1836C();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v8 = 0x1000000;
      }
      else
      {
        sub_1D3E18424();
        objc_opt_isKindOfClass();
        v8 = 1;
      }
    }
    v3 = v3 & 0xFFFFFFFFFCFFFFF8 | v8;

    objc_autoreleasePoolPop(v5);
  }
  return v3;
}

void sub_1D3E182A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D3E182B4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDB89370;
  v7 = qword_1EDB89370;
  if (!qword_1EDB89370)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D3E185B4;
    v3[3] = &unk_1E95B39F0;
    v3[4] = &v4;
    sub_1D3E185B4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D3E18354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1D3E1836C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDB89378;
  v7 = qword_1EDB89378;
  if (!qword_1EDB89378)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D3E18548;
    v3[3] = &unk_1E95B39F0;
    v3[4] = &v4;
    sub_1D3E18548((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D3E1840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1D3E18424()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EDB89390;
  v7 = qword_1EDB89390;
  if (!qword_1EDB89390)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D3E184DC;
    v3[3] = &unk_1E95B39F0;
    v3[4] = &v4;
    sub_1D3E184DC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D3E184C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1D3E184DC(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1D3E18130();
  result = objc_getClass("MLNeuralEngineComputeDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDB89390 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return sub_1D3E18548(v3);
  }
  return result;
}

Class sub_1D3E18548(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1D3E18130();
  result = objc_getClass("MLGPUComputeDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDB89378 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return sub_1D3E185B4(v3);
  }
  return result;
}

Class sub_1D3E185B4(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1D3E18130();
  result = objc_getClass("MLCPUComputeDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EDB89370 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)sub_1D3E18620(v3);
  }
  return result;
}

void sub_1D3E18620(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  CFTypeRef v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;

  v4 = (unint64_t *)(a2 + 16);
  if (atomic_load((unint64_t *)(a2 + 16)))
  {
    v7 = (void *)MEMORY[0x1D8255128]();
    v8 = (void *)atomic_load(v4);
    v9 = v8;
    sub_1D3E1836C();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_metalDevice(v9, v10, v11);
      *a1 = objc_claimAutoreleasedReturnValue();

      objc_autoreleasePoolPop(v7);
      return;
    }

    objc_autoreleasePoolPop(v7);
  }
  v6 = (CFTypeRef)atomic_load((unint64_t *)(a2 + 8));
  if (v6)
    v6 = CFRetain(v6);
  *a1 = (uint64_t)v6;
}

void sub_1D3E186C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D3E186D8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  const char *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const __CFURL *v12;

  v0 = (void *)MEMORY[0x1D8255128]();
  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = objc_opt_class();
  objc_msgSend_bundleForClass_(v1, v3, v2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  if (v4)
  {
    objc_msgSend_bundleURL(v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = (const __CFURL *)objc_msgSend_bundleURL(v7, v9, v10);
      v8 = CFBundleCreate(v11, v12);
    }
  }
  else
  {
    v8 = 0;
  }

  qword_1EDB89F18 = (uint64_t)v8;
  objc_autoreleasePoolPop(v0);
}

void sub_1D3E1878C()
{
  const char *v0;
  uint64_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  CFPropertyListRef v11;
  void *v12;
  CFTypeID v13;
  uint64_t v14;
  void *v15;
  CFPropertyListRef v16;
  CFTypeID v17;
  uint64_t v18;
  void *v19;
  void *cf;

  if (os_variant_has_internal_content())
  {
    objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v0, v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_environment(v2, v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v5, v6, (uint64_t)CFSTR("_MRC_OVERRIDDEN_RESOURCE_BASE_PATH"));
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)qword_1EDB895C8;
    qword_1EDB895C8 = v7;

    sub_1D3E18908((void *)qword_1EDB895C8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)qword_1EDB895C8;
    qword_1EDB895C8 = v9;

    if (!v9)
    {
      v11 = CFPreferencesCopyAppValue(CFSTR("_MRCOverriddenResourceBasePath"), (CFStringRef)*MEMORY[0x1E0C9B248]);
      if (v11)
      {
        v12 = (void *)v11;
        v13 = CFGetTypeID(v11);
        if (v13 == CFStringGetTypeID())
        {
          sub_1D3E18908(v12);
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = (void *)qword_1EDB895C8;
          qword_1EDB895C8 = v14;

          if (v14)
            return;
        }
        else
        {
          CFRelease(v12);
        }
      }
      v16 = CFPreferencesCopyAppValue(CFSTR("_MRCOverriddenResourceBasePath"), CFSTR("com.apple.Quagga"));
      if (v16)
      {
        cf = (void *)v16;
        v17 = CFGetTypeID(v16);
        if (v17 == CFStringGetTypeID())
        {
          sub_1D3E18908(cf);
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = (void *)qword_1EDB895C8;
          qword_1EDB895C8 = v18;

        }
        else
        {
          CFRelease(cf);
        }
      }
    }
  }
}

id sub_1D3E18908(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  int isDirectory;
  int v10;
  const char *v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  unsigned __int8 v16;

  v1 = a1;
  v4 = v1;
  if (v1
    && objc_msgSend_length(v1, v2, v3)
    && ((v16 = 0,
         objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v5, v6),
         v7 = (void *)objc_claimAutoreleasedReturnValue(),
         isDirectory = objc_msgSend_fileExistsAtPath_isDirectory_(v7, v8, (uint64_t)v4, &v16),
         v10 = v16,
         v7,
         isDirectory)
      ? (v13 = v10 == 0)
      : (v13 = 1),
        !v13))
  {
    v14 = (void *)objc_msgSend_copy(v4, v11, v12);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

uint64_t MRCSampleWriteOpaqueRepresentationToFile(char *ptr, const __CFURL *a2, unint64_t *a3)
{
  unint64_t v6;
  CFTypeID v7;
  const __CFAllocator *v8;
  char *v9;
  const __CFString *v10;
  CFDictionaryRef v11;
  char v12;
  BOOL v13;
  unint64_t v14;
  const __CFString *v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  CFNumberRef v19;
  CFArrayRef v20;
  uint64_t k;
  char v22;
  uint64_t j;
  const void *v24;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t m;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *value;
  const __CFString *v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFDictionaryRef v41;
  CFArrayRef v42;
  CFTypeRef *v43;
  char v44;
  unint64_t v45;
  CMTimeValue v46;
  CFDictionaryRef Copy;
  const void *v49;
  void **v51;
  FILE *v52;
  const __CFData *v53;
  const UInt8 *BytePtr;
  const __CFData *v55;
  CFIndex Length;
  size_t v57;
  int v58;
  unint64_t v59;
  const void *v60;
  unint64_t v61;
  const void *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  void *__p[2];
  unsigned __int8 v73;
  unint64_t v74[8];
  unint64_t v75[4];
  unsigned __int8 v76;
  CFDictionaryRef v77;
  CFDictionaryRef v78;
  CMTime valuePtr;
  CFErrorRef error[3];
  unint64_t v81;
  void *v82;
  char v83;
  const __CFString *Mutable;
  CMTime v85;
  unint64_t v86;
  void *v87;
  char v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  LOBYTE(v74[0]) = 0;
  v76 = 0;
  if (qword_1EFE31800 != -1)
    dispatch_once(&qword_1EFE31800, &unk_1E95ACB50);
  os_signpost_id_make_with_pointer((os_log_t)qword_1EFE317F8, ptr);
  sub_1D3E194C4((unint64_t *)__p, a2);
  if (!ptr)
  {
    error[0] = (CFErrorRef)-2006;
    v85.value = (CMTimeValue)CFSTR("Invalid sample.");
    sub_1D3D73E0C(v74, (uint64_t *)error, (CFTypeRef *)&v85);
LABEL_17:
    v13 = 0;
    goto LABEL_113;
  }
  v6 = v73;
  if ((v73 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (!v6)
  {
    error[0] = (CFErrorRef)-2006;
    v85.value = (CMTimeValue)CFSTR("Invalid file URL.");
    sub_1D3D73E0C(v74, (uint64_t *)error, (CFTypeRef *)&v85);
    goto LABEL_17;
  }
  v7 = CFGetTypeID(ptr);
  if (qword_1EDB893B0 != -1)
    dispatch_once_f(&qword_1EDB893B0, 0, (dispatch_function_t)sub_1D3DDC4F4);
  if (v7 != qword_1EDB893A8)
    _os_assumes_log();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = ptr + 16;
  Mutable = (const __CFString *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sub_1D3E19638((unint64_t *)error, *((unint64_t **)ptr + 2));
  if (!v83)
    goto LABEL_82;
  v10 = sub_1D3DEA428(CFSTR("pixelBuffer"));
  if (!v10)
    goto LABEL_82;
  v11 = sub_1D3E19C70((uint64_t *)error);
  if (v11)
  {
    v12 = sub_1D3DEA5B4((CFDictionaryRef *)&Mutable, v10, v11);
    CFRelease(v10);
  }
  else
  {
    v12 = 0;
    v11 = (CFDictionaryRef)v10;
  }
  CFRelease(v11);
  if ((v12 & 1) == 0)
    goto LABEL_82;
  valuePtr.value = (CMTimeValue)CFRetain(CFSTR("MRCSampleAttributeRegionOfInterest"));
  sub_1D3DE7000(&v85, (uint64_t)(ptr + 16), (unint64_t *)&valuePtr);
  v14 = atomic_load((unint64_t *)&v85);
  sub_1D3D8BA0C((unint64_t *)&v85);
  sub_1D3D8C70C((unint64_t *)&valuePtr);
  if (v14)
  {
    v69 = *((_OWORD *)ptr + 3);
    v70 = *((_OWORD *)ptr + 2);
    v15 = sub_1D3DEA428(CFSTR("regionOfInterest"));
    if (!v15)
      goto LABEL_82;
    for (i = 0; i != 4; ++i)
    {
      v71[0] = v70;
      v71[1] = v69;
      *(&v85.value + i) = *((_QWORD *)v71 + (i & 3));
    }
    v17 = operator new[]();
    v18 = 0;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    do
    {
      valuePtr.value = *(CMTimeValue *)((char *)&v85.value + v18);
      v19 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
      *(_QWORD *)(v17 + v18) = v19;
      if (!v19)
      {
        for (j = v18 - 8; j != -8; j -= 8)
        {
          v24 = *(const void **)(v17 + j);
          CFRelease(v24);
        }
        MEMORY[0x1D8254C3C](v17, 0x60C8044C4A2DFLL);
        goto LABEL_35;
      }
      v18 += 8;
    }
    while (v18 != 32);
    v20 = CFArrayCreate(v8, (const void **)v17, 4, MEMORY[0x1E0C9B378]);
    for (k = 0; k != 32; k += 8)
      CFRelease(*(CFTypeRef *)(v17 + k));
    MEMORY[0x1D8254C3C](v17, 0x60C8044C4A2DFLL);
    if (v20)
    {
      v22 = sub_1D3DEA5B4((CFDictionaryRef *)&Mutable, v15, v20);
      CFRelease(v15);
      goto LABEL_36;
    }
LABEL_35:
    v22 = 0;
    v20 = (CFArrayRef)v15;
LABEL_36:
    CFRelease(v20);
    if ((v22 & 1) == 0)
      goto LABEL_82;
  }
  if (!atomic_load((unint64_t *)ptr + 8))
  {
LABEL_73:
    sub_1D3DE772C((const __CFDictionary *)&v85, (uint64_t)v9);
    if ((_BYTE)v86)
    {
      sub_1D3DE772C((const __CFDictionary *)&v85, (uint64_t)v9);
      valuePtr = v85;
      v78 = CMTimeCopyAsDictionary(&valuePtr, v8);
      v45 = atomic_load((unint64_t *)&v78);
      if (!v45
        || (v46 = atomic_load((unint64_t *)&v78),
            v85.value = v46,
            (sub_1D3E1A4DC((CFDictionaryRef *)&Mutable, CFSTR("presentationTimeStamp"), (const __CFDictionary **)&v85) & 1) == 0))
      {
        v77 = 0;
        sub_1D3D8BAAC((unint64_t *)&v78);
        goto LABEL_83;
      }
      sub_1D3D8BAAC((unint64_t *)&v78);
    }
    sub_1D3DE77DC((const __CFData *)&v85, (uint64_t)v9);
    if (!v88
      || (sub_1D3DE77DC((const __CFData *)&v85, (uint64_t)v9),
          (sub_1D3E1A560((CFDictionaryRef *)&Mutable, CFSTR("cameraIntrinsicMatrix"), (uint64_t)&v85) & 1) != 0))
    {
      if (Mutable)
        Copy = CFDictionaryCreateCopy(v8, (CFDictionaryRef)Mutable);
      else
        Copy = 0;
      v77 = Copy;
      goto LABEL_83;
    }
LABEL_82:
    v77 = 0;
    goto LABEL_83;
  }
  memset(&valuePtr, 0, sizeof(valuePtr));
  v26 = (_QWORD *)*((_QWORD *)ptr + 9);
  if (v26)
    v27 = 0x84BDA12F684BDA13 * ((uint64_t)(v26[1] - *v26) >> 3);
  else
    v27 = 0;
  sub_1D3E1A1B4(&valuePtr.value, v27);
  v28 = 0;
  for (m = 8; ; m += 216)
  {
    v30 = (_QWORD *)*((_QWORD *)ptr + 9);
    v31 = v30 ? 0x84BDA12F684BDA13 * ((uint64_t)(v30[1] - *v30) >> 3) : 0;
    if (v28 >= v31)
      break;
    sub_1D3E19638((unint64_t *)&v85, (unint64_t *)(*v30 + m));
    if (!v89)
      goto LABEL_126;
    sub_1D3E1A278(&valuePtr.value, (__int128 *)&v85.value);
    if (v89)
    {
      sub_1D3E1A40C(&v87);
      sub_1D3D8BAAC(&v86);
    }
    ++v28;
  }
  v32 = *(uint64_t **)&valuePtr.timescale;
  value = (uint64_t *)valuePtr.value;
  v34 = sub_1D3DEA428(CFSTR("pyramid"));
  if (v34)
  {
    if (v32 == value)
    {
      v42 = CFArrayCreate(v8, 0, 0, MEMORY[0x1E0C9B378]);
    }
    else
    {
      v35 = (char *)v32 - (char *)value;
      v36 = (char *)v32 - (char *)value < 0 ? -1 : v32 - value;
      v37 = (void *)operator new[]();
      v38 = v35 >> 6;
      bzero(v37, v36);
      v39 = 0;
      v40 = v38 <= 1 ? 1 : v38;
      while (1)
      {
        v41 = sub_1D3E19C70(value);
        *((_QWORD *)v37 + v39) = v41;
        if (!v41)
          break;
        ++v39;
        value += 8;
        if (v40 == v39)
        {
          v42 = CFArrayCreate(v8, (const void **)v37, v38, MEMORY[0x1E0C9B378]);
          v43 = (CFTypeRef *)v37;
          do
          {
            CFRelease(*v43++);
            --v40;
          }
          while (v40);
          goto LABEL_67;
        }
      }
      while (v39)
        CFRelease(*((CFTypeRef *)v37 + --v39));
      v42 = 0;
LABEL_67:
      MEMORY[0x1D8254C3C](v37, 0x60C8044C4A2DFLL);
    }
    if (v42)
    {
      v44 = sub_1D3DEA5B4((CFDictionaryRef *)&Mutable, v34, v42);
      CFRelease(v34);
    }
    else
    {
      v44 = 0;
      v42 = (CFArrayRef)v34;
    }
    CFRelease(v42);
    if ((v44 & 1) != 0)
    {
      sub_1D3E1A470((void **)&valuePtr);
      goto LABEL_73;
    }
  }
LABEL_126:
  v77 = 0;
  sub_1D3E1A470((void **)&valuePtr);
LABEL_83:
  if (v83)
  {
    sub_1D3E1A40C(&v82);
    sub_1D3D8BAAC(&v81);
  }
  sub_1D3DEA584((const void **)&Mutable);
  if (atomic_load((unint64_t *)&v77))
  {
    error[0] = 0;
    v49 = (const void *)atomic_load((unint64_t *)&v77);
    v85.value = (CMTimeValue)CFPropertyListCreateData(v8, v49, kCFPropertyListBinaryFormat_v1_0, 0, error);
    if (atomic_load((unint64_t *)&v85))
    {
      if ((v73 & 0x80u) == 0)
        v51 = __p;
      else
        v51 = (void **)__p[0];
      v52 = fopen((const char *)v51, "wb");
      if (v52)
      {
        v53 = (const __CFData *)atomic_load((unint64_t *)&v85);
        BytePtr = CFDataGetBytePtr(v53);
        v55 = (const __CFData *)atomic_load((unint64_t *)&v85);
        Length = CFDataGetLength(v55);
        v57 = fwrite(BytePtr, Length, 1uLL, v52);
        v13 = v57 == 1;
        if (v57 != 1)
        {
          v58 = *__error();
          valuePtr.value = -2007;
          Mutable = CFSTR("Unable to write to file.");
          sub_1D3D73E0C(v74, &valuePtr.value, (CFTypeRef *)&Mutable);
          sub_1D3E1A898((unint64_t *)&valuePtr, (uint64_t)__p, v58);
          do
            v59 = __ldaxr((unint64_t *)&valuePtr);
          while (__stlxr(0, (unint64_t *)&valuePtr));
          do
            v60 = (const void *)__ldaxr(v75);
          while (__stlxr(v59, v75));
          if (v60)
            CFRelease(v60);
          sub_1D3D7448C((unint64_t *)&valuePtr);
        }
        fclose(v52);
        goto LABEL_111;
      }
      v63 = *__error();
      valuePtr.value = -2007;
      Mutable = CFSTR("Unable to open file for writing.");
      sub_1D3D73E0C(v74, &valuePtr.value, (CFTypeRef *)&Mutable);
      sub_1D3E1A898((unint64_t *)&valuePtr, (uint64_t)__p, v63);
      do
        v64 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v62 = (const void *)__ldaxr(v75);
      while (__stlxr(v64, v75));
      if (!v62)
      {
LABEL_110:
        sub_1D3D7448C((unint64_t *)&valuePtr);
        v13 = 0;
LABEL_111:
        sub_1D3DB386C((unint64_t *)&v85);
        goto LABEL_112;
      }
    }
    else
    {
      valuePtr.value = -2008;
      Mutable = CFSTR("Unable to serialize sample.");
      sub_1D3D73E0C(v74, &valuePtr.value, (CFTypeRef *)&Mutable);
      valuePtr.value = (CMTimeValue)error[0];
      do
        v61 = __ldaxr((unint64_t *)&valuePtr);
      while (__stlxr(0, (unint64_t *)&valuePtr));
      do
        v62 = (const void *)__ldaxr(v75);
      while (__stlxr(v61, v75));
      if (!v62)
        goto LABEL_110;
    }
    CFRelease(v62);
    goto LABEL_110;
  }
  error[0] = (CFErrorRef)-2008;
  v85.value = (CMTimeValue)CFSTR("Unable to serialize sample.");
  sub_1D3D73E0C(v74, (uint64_t *)error, (CFTypeRef *)&v85);
  v13 = 0;
LABEL_112:
  sub_1D3D8BAAC((unint64_t *)&v77);
LABEL_113:
  if ((char)v73 < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_115;
  }
  else if (v13)
  {
LABEL_115:
    v65 = 1;
LABEL_122:
    v66 = v76;
    goto LABEL_123;
  }
  v65 = 0;
  v66 = v76;
  if (a3 && v76)
  {
    sub_1D3DF53CC(error, (uint64_t)v74);
    do
      v67 = __ldaxr((unint64_t *)error);
    while (__stlxr(0, (unint64_t *)error));
    *a3 = v67;
    sub_1D3D7448C((unint64_t *)error);
    v65 = 0;
    goto LABEL_122;
  }
LABEL_123:
  if (v66)
    sub_1D3DF4F24(v74);
  return v65;
}

void sub_1D3E1933C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,unint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  MEMORY[0x1D8254C3C](v49, 0x60C8044C4A2DFLL);
  sub_1D3E1A470(&a45);
  sub_1D3E1A240((uint64_t)&a49);
  sub_1D3DEA584((const void **)(v50 - 168));
  if (a22 < 0)
    operator delete(__p);
  if (a35)
    sub_1D3DF4F24(&a23);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E194C4(unint64_t *result, const __CFURL *a2)
{
  unint64_t *v2;
  const __CFURL *v5;
  const __CFString *v7;
  CFIndex v8;
  char *v9;
  const __CFString *v10;
  __int128 v11;
  unint64_t v12;
  CFStringRef v13;
  CFURLRef v14;

  v2 = result;
  if (a2 && (result = (unint64_t *)_CFURLIsFileURL(), (_DWORD)result))
  {
    v14 = CFURLCopyAbsoluteURL(a2);
    if (atomic_load((unint64_t *)&v14))
    {
      v5 = (const __CFURL *)atomic_load((unint64_t *)&v14);
      v13 = CFURLCopyFileSystemPath(v5, kCFURLPOSIXPathStyle);
      if (atomic_load((unint64_t *)&v13))
      {
        v7 = (const __CFString *)atomic_load((unint64_t *)&v13);
        v8 = CFStringGetMaximumSizeOfFileSystemRepresentation(v7) + 1;
        v9 = (char *)operator new[]();
        v10 = (const __CFString *)atomic_load((unint64_t *)&v13);
        if (CFStringGetFileSystemRepresentation(v10, v9, v8))
        {
          sub_1D3D81D4C(&v11, v9);
          *(_OWORD *)v2 = v11;
          v2[2] = v12;
        }
        else
        {
          *v2 = 0;
          v2[1] = 0;
          v2[2] = 0;
        }
        MEMORY[0x1D8254C3C](v9, 0x1000C8077774924);
      }
      else
      {
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      sub_1D3D8C70C((unint64_t *)&v13);
    }
    else
    {
      *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
    }
    return sub_1D3DDCCEC((unint64_t *)&v14);
  }
  else
  {
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

void sub_1D3E195EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  unint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  MEMORY[0x1D8254C3C](v5, 0x1000C8077774924);
  sub_1D3D8C70C((unint64_t *)va);
  sub_1D3DDCCEC((unint64_t *)va1);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E19638(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *v4;
  __CVBuffer *v5;
  size_t Width;
  __CVBuffer *v7;
  size_t Height;
  __CVBuffer *v9;
  __CVBuffer *v10;
  __CVBuffer *v11;
  int IsPlanar;
  void *v13;
  __CVBuffer *v15;
  size_t PlaneCount;
  size_t v17;
  size_t v18;
  __CVBuffer *v19;
  size_t WidthOfPlane;
  __CVBuffer *v21;
  size_t HeightOfPlane;
  __CVBuffer *v23;
  size_t BytesPerRowOfPlane;
  __CVBuffer *v25;
  __CVBuffer *v26;
  UInt8 *BaseAddressOfPlane;
  const __CFAllocator *v28;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  size_t *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int64x2_t v47;
  size_t BytesPerRow;
  __CVBuffer *v49;
  __CVBuffer *v50;
  UInt8 *BaseAddress;
  const __CFAllocator *v52;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  const __CFAllocator *v58;
  const __CFAllocator *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  size_t *v65;
  unint64_t v66;
  size_t *v67;
  size_t v68;
  size_t v69;
  size_t v70;
  unint64_t *v71;
  unint64_t v72;
  int64x2_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  size_t v77;
  size_t v78;
  unint64_t *v79;
  unint64_t *v80;
  int v81;
  size_t v82;
  OSType PixelFormatType;
  const __CFAllocator *allocator;
  size_t v85;
  char *v86;
  int64x2_t v87;
  unint64_t v88;
  _QWORD *v89;
  int64x2_t v90;
  unint64_t v91;
  CFDataRef v92;
  CFAllocatorRef v93;
  CFAllocatorContext context;
  int64x2_t v95;
  _QWORD v96[2];
  unint64_t v97[2];

  v2 = result;
  if (!atomic_load(a2))
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 64) = 0;
    return result;
  }
  v4 = a2;
  v5 = (__CVBuffer *)atomic_load(a2);
  Width = CVPixelBufferGetWidth(v5);
  v7 = (__CVBuffer *)atomic_load(v4);
  Height = CVPixelBufferGetHeight(v7);
  v9 = (__CVBuffer *)atomic_load(v4);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v9);
  v10 = (__CVBuffer *)atomic_load(v4);
  v97[0] = (unint64_t)CVPixelBufferCopyCreationAttributes(v10);
  v11 = (__CVBuffer *)atomic_load(v4);
  IsPlanar = CVPixelBufferIsPlanar(v11);
  v95 = 0uLL;
  v96[0] = 0;
  v13 = (void *)atomic_load(v4);
  context.version = 0;
  context.info = v13;
  context.retain = (CFAllocatorRetainCallBack)j__CVPixelBufferRetain;
  context.release = (CFAllocatorReleaseCallBack)j__CVPixelBufferRelease;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = (CFAllocatorDeallocateCallBack)sub_1D3E1ABEC;
  context.preferredSize = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v93 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
  if (atomic_load((unint64_t *)&v93))
  {
    v15 = (__CVBuffer *)atomic_load(v4);
    if (IsPlanar)
    {
      v77 = Width;
      v78 = Height;
      v79 = v2;
      PlaneCount = CVPixelBufferGetPlaneCount(v15);
      v17 = PlaneCount;
      if (PlaneCount)
      {
        v18 = 0;
        v82 = PlaneCount;
        v81 = IsPlanar;
        v80 = v4;
        while (1)
        {
          v19 = (__CVBuffer *)atomic_load(v4);
          WidthOfPlane = CVPixelBufferGetWidthOfPlane(v19, v18);
          v21 = (__CVBuffer *)atomic_load(v4);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(v21, v18);
          v23 = (__CVBuffer *)atomic_load(v4);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v23, v18);
          v25 = (__CVBuffer *)atomic_load(v4);
          if (CVPixelBufferLockBaseAddress(v25, 1uLL)
            || (v26 = (__CVBuffer *)atomic_load(v4),
                (BaseAddressOfPlane = (UInt8 *)CVPixelBufferGetBaseAddressOfPlane(v26, v18)) == 0))
          {
            *(_BYTE *)v79 = 0;
            *((_BYTE *)v79 + 64) = 0;
            goto LABEL_62;
          }
          v28 = (const __CFAllocator *)atomic_load((unint64_t *)&v93);
          v92 = CFDataCreateWithBytesNoCopy(allocator, BaseAddressOfPlane, BytesPerRowOfPlane * HeightOfPlane, v28);
          if (!atomic_load((unint64_t *)&v92))
            break;
          v85 = WidthOfPlane;
          do
            v30 = __ldaxr((unint64_t *)&v92);
          while (__stlxr(0, (unint64_t *)&v92));
          v32 = (_QWORD *)v95.i64[1];
          v31 = v96[0];
          if (v95.i64[1] >= v96[0])
          {
            v34 = (_QWORD *)v95.i64[0];
            v35 = (v95.i64[1] - v95.i64[0]) >> 5;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 59)
              sub_1D3D6D4F8();
            if ((v96[0] - v95.i64[0]) >> 4 > v36)
              v36 = (v96[0] - v95.i64[0]) >> 4;
            if (v96[0] - v95.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
              v37 = 0x7FFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            v89 = v96;
            if (v37 >> 59)
              sub_1D3D6D50C();
            v38 = (char *)operator new(32 * v37);
            v39 = (size_t *)&v38[32 * v35];
            v86 = v38;
            v87.i64[0] = (uint64_t)v39;
            *v39 = v85;
            v39[1] = HeightOfPlane;
            v40 = (unint64_t)&v38[32 * v37];
            v39[2] = BytesPerRowOfPlane;
            v39[3] = v30;
            v33 = v39 + 4;
            v87.i64[1] = (uint64_t)(v39 + 4);
            v88 = v40;
            if (v32 == v34)
            {
              v47 = vdupq_n_s64((unint64_t)v32);
              IsPlanar = v81;
              v4 = v80;
            }
            else
            {
              v41 = &v38[32 * v35];
              IsPlanar = v81;
              v4 = v80;
              do
              {
                v42 = *(v32 - 4);
                v32 -= 4;
                *v32 = 0;
                *((_QWORD *)v41 - 4) = v42;
                v41 -= 32;
                v43 = v32[1];
                v32[1] = 0;
                *((_QWORD *)v41 + 1) = v43;
                v44 = v32[2];
                v32[2] = 0;
                *((_QWORD *)v41 + 2) = v44;
                v45 = v32 + 3;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(0, v45));
                *(v39 - 1) = v46;
                v39 = (size_t *)v41;
              }
              while (v32 != v34);
              v47 = v95;
              v31 = v96[0];
              v39 = (size_t *)v41;
              v33 = (_QWORD *)v87.i64[1];
              v40 = v88;
            }
            v95.i64[0] = (uint64_t)v39;
            v95.i64[1] = (uint64_t)v33;
            v87 = v47;
            v96[0] = v40;
            v88 = v31;
            v86 = (char *)v47.i64[0];
            sub_1D3E1AC00((uint64_t)&v86);
            v17 = v82;
          }
          else
          {
            *(_QWORD *)v95.i64[1] = v85;
            v32[1] = HeightOfPlane;
            v33 = v32 + 4;
            v32[2] = BytesPerRowOfPlane;
            v32[3] = v30;
          }
          v95.i64[1] = (uint64_t)v33;
          sub_1D3DB386C((unint64_t *)&v92);
          if (++v18 == v17)
            goto LABEL_58;
        }
        v58 = (const __CFAllocator *)atomic_load((unint64_t *)&v93);
        CFAllocatorDeallocate(v58, BaseAddressOfPlane);
        *(_BYTE *)v79 = 0;
        *((_BYTE *)v79 + 64) = 0;
        goto LABEL_41;
      }
      goto LABEL_58;
    }
    BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
    v49 = (__CVBuffer *)atomic_load(v4);
    if (!CVPixelBufferLockBaseAddress(v49, 1uLL))
    {
      v50 = (__CVBuffer *)atomic_load(v4);
      BaseAddress = (UInt8 *)CVPixelBufferGetBaseAddress(v50);
      if (BaseAddress)
      {
        v52 = (const __CFAllocator *)atomic_load((unint64_t *)&v93);
        v92 = CFDataCreateWithBytesNoCopy(allocator, BaseAddress, Height * BytesPerRow, v52);
        if (!atomic_load((unint64_t *)&v92))
        {
          v59 = (const __CFAllocator *)atomic_load((unint64_t *)&v93);
          CFAllocatorDeallocate(v59, BaseAddress);
          *(_BYTE *)v2 = 0;
          *((_BYTE *)v2 + 64) = 0;
LABEL_41:
          sub_1D3DB386C((unint64_t *)&v92);
          goto LABEL_62;
        }
        do
          v54 = __ldaxr((unint64_t *)&v92);
        while (__stlxr(0, (unint64_t *)&v92));
        v55 = (_QWORD *)v95.i64[1];
        v56 = v96[0];
        v78 = Height;
        v79 = v2;
        v77 = Width;
        if (v95.i64[1] >= v96[0])
        {
          v60 = (_QWORD *)v95.i64[0];
          v61 = (v95.i64[1] - v95.i64[0]) >> 5;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 59)
            sub_1D3D6D4F8();
          if ((v96[0] - v95.i64[0]) >> 4 > v62)
            v62 = (v96[0] - v95.i64[0]) >> 4;
          if (v96[0] - v95.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
            v63 = 0x7FFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          v89 = v96;
          if (v63 >> 59)
            sub_1D3D6D50C();
          v64 = (char *)operator new(32 * v63);
          v65 = (size_t *)&v64[32 * v61];
          v86 = v64;
          v87.i64[0] = (uint64_t)v65;
          *v65 = Width;
          v65[1] = v78;
          v66 = (unint64_t)&v64[32 * v63];
          v65[2] = BytesPerRow;
          v65[3] = v54;
          v57 = v65 + 4;
          v87.i64[1] = (uint64_t)(v65 + 4);
          v88 = v66;
          if (v55 == v60)
          {
            v73 = vdupq_n_s64((unint64_t)v55);
          }
          else
          {
            v67 = v65;
            do
            {
              v68 = *(v55 - 4);
              v55 -= 4;
              *v55 = 0;
              *(v67 - 4) = v68;
              v67 -= 4;
              v69 = v55[1];
              v55[1] = 0;
              v67[1] = v69;
              v70 = v55[2];
              v55[2] = 0;
              v67[2] = v70;
              v71 = v55 + 3;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(0, v71));
              *(v65 - 1) = v72;
              v65 = v67;
            }
            while (v55 != v60);
            v73 = v95;
            v56 = v96[0];
            v65 = v67;
            v57 = (_QWORD *)v87.i64[1];
            v66 = v88;
          }
          v95.i64[0] = (uint64_t)v65;
          v95.i64[1] = (uint64_t)v57;
          v87 = v73;
          v96[0] = v66;
          v88 = v56;
          v86 = (char *)v73.i64[0];
          sub_1D3E1AC00((uint64_t)&v86);
        }
        else
        {
          *(_QWORD *)v95.i64[1] = Width;
          v55[1] = Height;
          v57 = v55 + 4;
          v55[2] = BytesPerRow;
          v55[3] = v54;
        }
        v95.i64[1] = (uint64_t)v57;
        sub_1D3DB386C((unint64_t *)&v92);
        do
LABEL_58:
          v74 = __ldaxr(v97);
        while (__stlxr(0, v97));
        v88 = v74;
        LOBYTE(v89) = IsPlanar != 0;
        v90 = v95;
        v91 = v96[0];
        v95 = 0uLL;
        v96[0] = 0;
        v86 = 0;
        v87.i64[0] = 0;
        *v79 = v77;
        v79[1] = v78;
        v87.i32[2] = 0;
        *((_DWORD *)v79 + 4) = PixelFormatType;
        do
          v75 = __ldaxr(&v88);
        while (__stlxr(0, &v88));
        v79[3] = v75;
        v76 = (char)v89;
        LOBYTE(v89) = 0;
        *((_BYTE *)v79 + 32) = v76;
        *(int64x2_t *)(v79 + 5) = v90;
        v79[7] = v91;
        v91 = 0;
        v90 = 0uLL;
        *((_BYTE *)v79 + 64) = 1;
        sub_1D3E1A40C((void **)&v90);
        sub_1D3D8BAAC(&v88);
        goto LABEL_62;
      }
    }
  }
  *(_BYTE *)v2 = 0;
  *((_BYTE *)v2 + 64) = 0;
LABEL_62:
  sub_1D3E1AC50((unint64_t *)&v93);
  sub_1D3E1A40C((void **)&v95);
  return sub_1D3D8BAAC(v97);
}

void sub_1D3E19BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,unint64_t a29)
{
  uint64_t v29;

  sub_1D3DB386C(&a28);
  sub_1D3E1AC50(&a29);
  sub_1D3E1A40C((void **)(v29 - 128));
  sub_1D3D8BAAC((unint64_t *)(v29 - 96));
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_1D3E19C70(uint64_t *a1)
{
  const __CFAllocator *v2;
  const __CFDictionary *Mutable;
  unsigned int v4;
  const __CFString *v5;
  CFNumberRef v6;
  int v7;
  const __CFDictionary *v8;
  const __CFString *v9;
  CFDictionaryRef v10;
  int v11;
  int v12;
  const __CFString *v13;
  CFTypeRef *v14;
  CFTypeRef v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  const __CFString *v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  const void *v24;
  const __CFString *v25;
  CFTypeID v26;
  CFDataRef Copy;
  int v28;
  CFDictionaryRef v29;
  CFArrayRef v30;
  CFTypeRef *v31;
  int v32;
  CFDictionaryRef v33;
  uint64_t v35;
  uint64_t v36;
  CFDictionaryRef theDict;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFDictionary *valuePtr;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v36 = *a1;
  theDict = Mutable;
  if (!sub_1D3E1AB34(&theDict, (UInt8 *)"width", 5, &v36))
    goto LABEL_54;
  v35 = sub_1D3E1AAFC((uint64_t)a1);
  if (!sub_1D3E1AB34(&theDict, (UInt8 *)"height", 6, &v35))
    goto LABEL_54;
  v4 = sub_1D3E1AB04((uint64_t)a1);
  v5 = sub_1D3DEA3F4((UInt8 *)"pixelFormatType", 15);
  if (!v5)
    goto LABEL_54;
  valuePtr = (const __CFDictionary *)v4;
  v6 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
  if (v6)
  {
    v7 = sub_1D3DEA5B4(&theDict, v5, v6);
    CFRelease(v5);
  }
  else
  {
    v7 = 0;
    v6 = (CFNumberRef)v5;
  }
  CFRelease(v6);
  if (!v7)
    goto LABEL_54;
  v8 = (const __CFDictionary *)sub_1D3E1AB0C((uint64_t)a1);
  v9 = sub_1D3DEA3F4((UInt8 *)"pixelBufferAttributes", 21);
  if (!v9)
    goto LABEL_54;
  v10 = sub_1D3DEA47C(v8);
  if (v10)
  {
    v11 = sub_1D3DEA5B4(&theDict, v9, v10);
    CFRelease(v9);
  }
  else
  {
    v11 = 0;
    v10 = (CFDictionaryRef)v9;
  }
  CFRelease(v10);
  if (!v11)
    goto LABEL_54;
  v12 = sub_1D3E1AB18((uint64_t)a1);
  v13 = sub_1D3DEA3F4((UInt8 *)"isPlanar", 8);
  if (!v13)
    goto LABEL_54;
  v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!v12)
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v15 = CFRetain(*v14);
  if (v15)
  {
    v16 = sub_1D3DEA5B4(&theDict, v13, v15);
    CFRelease(v13);
  }
  else
  {
    v16 = 0;
    v15 = v13;
  }
  CFRelease(v15);
  if (!v16)
    goto LABEL_54;
  v17 = (uint64_t *)sub_1D3E1AB20((uint64_t)a1);
  v19 = v18;
  v20 = sub_1D3DEA3F4((UInt8 *)"planes", 6);
  if (!v20)
    goto LABEL_54;
  if (v19)
  {
    v21 = v19 >> 61 ? -1 : 8 * v19;
    v22 = (void *)operator new[]();
    bzero(v22, v21);
    v23 = 0;
    while (1)
    {
      valuePtr = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v40 = *v17;
      if (!sub_1D3E1AB34(&valuePtr, (UInt8 *)"width", 5, &v40))
        break;
      v39 = sub_1D3E1AAFC((uint64_t)v17);
      if (!sub_1D3E1AB34(&valuePtr, (UInt8 *)"height", 6, &v39))
        break;
      v38 = sub_1D3E1ABDC((uint64_t)v17);
      if (!sub_1D3E1AB34(&valuePtr, (UInt8 *)"bytesPerRow", 11, &v38))
        break;
      v24 = (const void *)sub_1D3E1AB0C((uint64_t)v17);
      v25 = sub_1D3DEA3F4((UInt8 *)"data", 4);
      if (!v25)
        break;
      if (v24
        && (v26 = CFGetTypeID(v24), v26 == CFDataGetTypeID())
        && (Copy = CFDataCreateCopy(v2, (CFDataRef)v24)) != 0)
      {
        v28 = sub_1D3DEA5B4(&valuePtr, v25, Copy);
        CFRelease(v25);
      }
      else
      {
        v28 = 0;
        Copy = (CFDataRef)v25;
      }
      CFRelease(Copy);
      if (!v28 || !valuePtr)
        break;
      v29 = CFDictionaryCreateCopy(v2, valuePtr);
      sub_1D3DEA584((const void **)&valuePtr);
      *((_QWORD *)v22 + v23) = v29;
      if (!v29)
        goto LABEL_43;
      ++v23;
      v17 += 4;
      if (v19 == v23)
      {
        v30 = CFArrayCreate(v2, (const void **)v22, v19, MEMORY[0x1E0C9B378]);
        v31 = (CFTypeRef *)v22;
        do
        {
          CFRelease(*v31++);
          --v19;
        }
        while (v19);
        goto LABEL_46;
      }
    }
    sub_1D3DEA584((const void **)&valuePtr);
    *((_QWORD *)v22 + v23) = 0;
LABEL_43:
    while (v23)
      CFRelease(*((CFTypeRef *)v22 + --v23));
    v30 = 0;
LABEL_46:
    MEMORY[0x1D8254C3C](v22, 0x60C8044C4A2DFLL);
  }
  else
  {
    v30 = CFArrayCreate(v2, 0, 0, MEMORY[0x1E0C9B378]);
  }
  if (v30)
  {
    v32 = sub_1D3DEA5B4(&theDict, v20, v30);
    CFRelease(v20);
  }
  else
  {
    v32 = 0;
    v30 = (CFArrayRef)v20;
  }
  CFRelease(v30);
  if (v32 && theDict)
    v33 = CFDictionaryCreateCopy(v2, theDict);
  else
LABEL_54:
    v33 = 0;
  sub_1D3DEA584((const void **)&theDict);
  return v33;
}

void sub_1D3E1A13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1D8254C3C](v4, 0x60C8044C4A2DFLL);
  sub_1D3DEA584((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D3E1A1B4(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 6)
  {
    if (a2 >> 58)
      sub_1D3D6D4F8();
    v3 = result;
    v4 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = operator new(a2 << 6);
    v5[1] = v5[0] + v4;
    v5[2] = v5[0] + v4;
    v5[3] = v5[0] + (a2 << 6);
    sub_1D3E1A9CC(v3, v5);
    return (uint64_t *)sub_1D3E1AA9C((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1D3E1A240(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    sub_1D3E1A40C((void **)(a1 + 40));
    sub_1D3D8BAAC((unint64_t *)(a1 + 24));
  }
  return a1;
}

uint64_t *sub_1D3E1A278(uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char v23;
  _QWORD v24[2];
  char *v25;
  char *v26;
  _QWORD *v27;

  v3 = result;
  v4 = result[2];
  v5 = result[1];
  if (v5 >= v4)
  {
    v12 = (uint64_t)(v5 - *result) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      sub_1D3D6D4F8();
    v14 = v4 - *result;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v27 = result + 2;
    if (v15 >> 58)
      sub_1D3D6D50C();
    v16 = (char *)operator new(v15 << 6);
    v17 = &v16[64 * v12];
    v24[0] = v16;
    v24[1] = v17;
    v25 = v17;
    v26 = &v16[64 * v15];
    v18 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)v17 = v18;
    *((_DWORD *)v17 + 4) = *((_DWORD *)a2 + 4);
    v19 = (unint64_t *)(v17 + 24);
    v20 = (unint64_t *)a2 + 3;
    *((_DWORD *)a2 + 4) = 0;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(0, v20));
    *v19 = v21;
    v22 = &v16[64 * v12];
    v23 = *((_BYTE *)a2 + 32);
    *((_BYTE *)a2 + 32) = 0;
    v22[32] = v23;
    *(_OWORD *)(v22 + 40) = *(__int128 *)((char *)a2 + 40);
    *((_QWORD *)v22 + 7) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v25 += 64;
    sub_1D3E1A9CC(v3, v24);
    v11 = v3[1];
    result = (uint64_t *)sub_1D3E1AA9C((uint64_t)v24);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)v5 = v6;
    v7 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(v5 + 8) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(v5 + 16) = v7;
    v8 = (unint64_t *)a2 + 3;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(0, v8));
    *(_QWORD *)(v5 + 24) = v9;
    v10 = *((_BYTE *)a2 + 32);
    *((_BYTE *)a2 + 32) = 0;
    *(_BYTE *)(v5 + 32) = v10;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v5 + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v11 = v5 + 64;
  }
  v3[1] = v11;
  return result;
}

void **sub_1D3E1A40C(void **a1)
{
  unint64_t *v2;
  unint64_t *v3;
  void *v4;
  unint64_t *v5;

  v2 = (unint64_t *)*a1;
  if (*a1)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 4;
        sub_1D3DB386C(v3 - 1);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1D3E1A470(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_1D3E1A40C(v3 - 3);
        sub_1D3D8BAAC((unint64_t *)v3 - 5);
        v3 -= 8;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D3E1A4DC(CFDictionaryRef *a1, const __CFString *a2, const __CFDictionary **a3)
{
  CFStringRef v5;
  const __CFString *v6;
  CFDictionaryRef v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = sub_1D3DEA428(a2);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sub_1D3DEA47C(*a3);
  if (v7)
  {
    v8 = (const __CFString *)v7;
    v9 = sub_1D3DEA5B4(a1, v6, v7);
    CFRelease(v6);
    v6 = v8;
  }
  else
  {
    v9 = 0;
  }
  CFRelease(v6);
  return v9;
}

uint64_t sub_1D3E1A560(CFDictionaryRef *a1, const __CFString *a2, uint64_t a3)
{
  CFStringRef v5;
  const __CFString *v6;
  uint64_t i;
  uint64_t v8;
  __int128 v9;
  _DWORD *v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFNumberRef v22;
  CFArrayRef v23;
  uint64_t k;
  CFArrayRef v25;
  uint64_t m;
  uint64_t v27;
  uint64_t j;
  const void *v29;
  const void *v30;
  CFDictionaryRef *v32;
  __int128 v33;
  __int128 v34;
  _DWORD v35[19];
  int valuePtr;

  v5 = sub_1D3DEA428(a2);
  if (!v5)
    return 0;
  v6 = v5;
  for (i = 0; i != 3; ++i)
  {
    v8 = 0;
    v9 = *(_OWORD *)(a3 + 16 * i);
    v10 = &v35[4 * i + 4];
    v11 = *(_OWORD *)v10;
    do
    {
      v34 = v9;
      v12 = *(_DWORD *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
      *(_OWORD *)v35 = v11;
      *(_DWORD *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) = v12;
      v11 = *(_OWORD *)v35;
      ++v8;
    }
    while (v8 != 3);
    v10[2] = v35[2];
    *(_QWORD *)v10 = v11;
  }
  v32 = a1;
  v13 = operator new[]();
  v14 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = -8;
  while (2)
  {
    v17 = 0;
    v18 = *(_OWORD *)&v35[4 * v14 + 4];
    do
    {
      v33 = v18;
      v35[v17 + 16] = *(_DWORD *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
      ++v17;
    }
    while (v17 != 3);
    v19 = operator new[]();
    v20 = 0;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    v21 = 8;
    *(_QWORD *)(v19 + 16) = 0;
    do
    {
      valuePtr = v35[v20 + 16];
      v22 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      *(_QWORD *)(v19 + 8 * v20) = v22;
      if (!v22)
      {
        for (j = -v21; j != -8; j -= 8)
        {
          v29 = *(const void **)(v19 + j);
          CFRelease(v29);
        }
        MEMORY[0x1D8254C3C](v19, 0x60C8044C4A2DFLL);
        *(_QWORD *)(v13 + 8 * v14) = 0;
LABEL_24:
        while (v16 != -8)
        {
          v30 = *(const void **)(v13 + v16);
          v16 -= 8;
          CFRelease(v30);
        }
        MEMORY[0x1D8254C3C](v13, 0x60C8044C4A2DFLL);
        goto LABEL_27;
      }
      ++v20;
      v21 -= 8;
    }
    while (v20 != 3);
    v23 = CFArrayCreate(v15, (const void **)v19, 3, MEMORY[0x1E0C9B378]);
    for (k = 0; k != 24; k += 8)
      CFRelease(*(CFTypeRef *)(v19 + k));
    MEMORY[0x1D8254C3C](v19, 0x60C8044C4A2DFLL);
    *(_QWORD *)(v13 + 8 * v14) = v23;
    if (!v23)
      goto LABEL_24;
    ++v14;
    v16 += 8;
    if (v14 != 3)
      continue;
    break;
  }
  v25 = CFArrayCreate(v15, (const void **)v13, 3, MEMORY[0x1E0C9B378]);
  for (m = 0; m != 24; m += 8)
    CFRelease(*(CFTypeRef *)(v13 + m));
  MEMORY[0x1D8254C3C](v13, 0x60C8044C4A2DFLL);
  if (v25)
  {
    v27 = sub_1D3DEA5B4(v32, v6, v25);
    CFRelease(v6);
    v6 = (const __CFString *)v25;
    goto LABEL_28;
  }
LABEL_27:
  v27 = 0;
LABEL_28:
  CFRelease(v6);
  return v27;
}

void sub_1D3E1A83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C3C](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E1A898(unint64_t *result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  const __CFAllocator *v7;
  const char *v9;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const __CFString *v14;
  const __CFDictionary *v15;
  CFErrorRef v16;
  CFStringRef v17;
  CFMutableDictionaryRef Mutable;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (atomic_load((unint64_t *)&Mutable))
    {
      if (*(char *)(a2 + 23) >= 0)
        v9 = (const char *)a2;
      else
        v9 = *(const char **)a2;
      v17 = CFStringCreateWithFileSystemRepresentation(v7, v9);
      if (atomic_load((unint64_t *)&v17))
      {
        v11 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v12 = (const void *)*MEMORY[0x1E0C9AFD8];
        v13 = (const void *)atomic_load((unint64_t *)&v17);
        CFDictionarySetValue(v11, v12, v13);
        v14 = (const __CFString *)*MEMORY[0x1E0C9AFD0];
        v15 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
        v16 = CFErrorCreate(v7, v14, a3, v15);
      }
      else
      {
        v16 = 0;
      }
      *v3 = v16;
      sub_1D3D8C70C((unint64_t *)&v17);
    }
    else
    {
      *v3 = 0;
    }
    return sub_1D3D740C8((unint64_t *)&Mutable);
  }
  else
  {
    *result = 0;
  }
  return result;
}

void sub_1D3E1A9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D740C8((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D3E1A9CC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    do
    {
      v7 = *(_QWORD *)(v5 - 64);
      v5 -= 64;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v6 - 64) = v7;
      v6 -= 64;
      v8 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v6 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 16);
      *(_DWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v6 + 16) = v8;
      v9 = (unint64_t *)(v5 + 24);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(0, v9));
      *(_QWORD *)(v4 - 40) = v10;
      v11 = *(_BYTE *)(v3 - 32);
      *(_BYTE *)(v3 - 32) = 0;
      *(_BYTE *)(v4 - 32) = v11;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 = v6;
      v3 = v5;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  v12 = *result;
  *result = v6;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D3E1AA9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    sub_1D3E1A40C((void **)(i - 24));
    sub_1D3D8BAAC((unint64_t *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1D3E1AAFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1D3E1AB04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

unint64_t sub_1D3E1AB0C(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 24));
}

uint64_t sub_1D3E1AB18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1D3E1AB20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1D3E1AB34(CFDictionaryRef *a1, UInt8 *bytes, CFIndex numBytes, uint64_t *a4)
{
  CFStringRef v6;
  const __CFString *v7;
  uint64_t v8;
  CFNumberRef v9;
  const __CFString *v10;
  uint64_t v11;
  _QWORD v13[2];

  v6 = sub_1D3DEA3F4(bytes, numBytes);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *a4;
  v13[0] = 0;
  v13[1] = v8;
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberMaxType|kCFNumberSInt8Type, v13);
  if (v9)
  {
    v10 = (const __CFString *)v9;
    v11 = sub_1D3DEA5B4(a1, v7, v9);
    CFRelease(v7);
    v7 = v10;
  }
  else
  {
    v11 = 0;
  }
  CFRelease(v7);
  return v11;
}

uint64_t sub_1D3E1ABDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D3E1ABEC(int a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t result;

  if (pixelBuffer)
    return CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return result;
}

uint64_t sub_1D3E1AC00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_1D3DB386C((unint64_t *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t *sub_1D3E1AC50(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

unint64_t MRCSampleCreateByReadingOpaqueRepresentationFromFile(void *ptr, unint64_t *a2)
{
  const char *v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  const void *v9;
  int v10;
  unint64_t v11;
  const void *v12;
  unint64_t *p_context;
  int v14;
  UInt8 *v15;
  const __CFAllocator *v16;
  off_t st_size;
  const __CFAllocator *v19;
  const __CFData *v21;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  const __CFAllocator *v34;
  unint64_t v35;
  const void *v36;
  char *v37[2];
  char v38;
  unint64_t v39;
  unint64_t v40[8];
  unint64_t v41[4];
  char v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  const __CFString *v46;
  CFErrorRef error;
  uint64_t v48;
  CFAllocatorContext context;
  const __CFString *v50;
  stat v51;

  LOBYTE(v40[0]) = 0;
  v42 = 0;
  if (qword_1EFE31800 != -1)
    dispatch_once(&qword_1EFE31800, &unk_1E95ACB50);
  os_signpost_id_make_with_pointer((os_log_t)qword_1EFE317F8, ptr);
  sub_1D3E194C4((unint64_t *)v37, (const __CFURL *)ptr);
  if ((v38 & 0x80000000) == 0)
  {
    if (v38)
    {
      v4 = (const char *)v37;
      goto LABEL_8;
    }
LABEL_15:
    *(_QWORD *)&v51.st_dev = -2006;
    context.version = (CFIndex)CFSTR("Invalid file URL.");
    sub_1D3D73E0C(v40, (uint64_t *)&v51.st_dev, (CFTypeRef *)&context);
LABEL_53:
    v39 = 0;
    goto LABEL_54;
  }
  if (!v37[1])
    goto LABEL_15;
  v4 = v37[0];
LABEL_8:
  v5 = open(v4, 0);
  v6 = v5;
  if (v5 < 0)
  {
    v10 = *__error();
    *(_QWORD *)&v51.st_dev = -2007;
    context.version = (CFIndex)CFSTR("Unable to open file for reading.");
    sub_1D3D73E0C(v40, (uint64_t *)&v51.st_dev, (CFTypeRef *)&context);
    sub_1D3E1A898((unint64_t *)&v51, (uint64_t)v37, v10);
    do
      v11 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0, (unint64_t *)&v51));
    do
      v12 = (const void *)__ldaxr(v41);
    while (__stlxr(v11, v41));
    if (v12)
      CFRelease(v12);
    p_context = (unint64_t *)&v51;
    goto LABEL_52;
  }
  fcntl(v5, 48, 1);
  if (fstat(v6, &v51))
  {
    v7 = *__error();
    close(v6);
    context.version = -2007;
    v50 = CFSTR("Unable to get file status.");
    sub_1D3D73E0C(v40, &context.version, (CFTypeRef *)&v50);
    sub_1D3E1A898((unint64_t *)&context, (uint64_t)v37, v7);
    do
      v8 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v9 = (const void *)__ldaxr(v41);
    while (__stlxr(v8, v41));
    if (!v9)
      goto LABEL_51;
    goto LABEL_50;
  }
  v14 = v51.st_mode & 0xF000;
  if (v14 != 0x8000)
  {
    if (v14 == 0x4000)
      v25 = 21;
    else
      v25 = 13;
    close(v6);
    context.version = -2007;
    v50 = CFSTR("Unexpected file type.");
    sub_1D3D73E0C(v40, &context.version, (CFTypeRef *)&v50);
    sub_1D3E1A898((unint64_t *)&context, (uint64_t)v37, v25);
    do
      v26 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v9 = (const void *)__ldaxr(v41);
    while (__stlxr(v26, v41));
    if (!v9)
      goto LABEL_51;
LABEL_50:
    CFRelease(v9);
LABEL_51:
    p_context = (unint64_t *)&context;
LABEL_52:
    sub_1D3D7448C(p_context);
    goto LABEL_53;
  }
  if (v51.st_size < 0)
  {
    close(v6);
    context.version = -2007;
    v50 = CFSTR("Unexpected file size.");
    sub_1D3D73E0C(v40, &context.version, (CFTypeRef *)&v50);
    sub_1D3E1A898((unint64_t *)&context, (uint64_t)v37, 12);
    do
      v27 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v9 = (const void *)__ldaxr(v41);
    while (__stlxr(v27, v41));
    if (!v9)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (!v51.st_size)
  {
    close(v6);
    context.version = -2007;
    v50 = CFSTR("Empty file.");
    sub_1D3D73E0C(v40, &context.version, (CFTypeRef *)&v50);
    goto LABEL_53;
  }
  v15 = (UInt8 *)mmap(0, v51.st_size, 1, 2, v6, 0);
  if (v15 == (UInt8 *)-1)
  {
    v28 = *__error();
    close(v6);
    context.version = -2007;
    v50 = CFSTR("Unable to map file.");
    sub_1D3D73E0C(v40, &context.version, (CFTypeRef *)&v50);
    sub_1D3E1A898((unint64_t *)&context, (uint64_t)v37, v28);
    do
      v29 = __ldaxr((unint64_t *)&context);
    while (__stlxr(0, (unint64_t *)&context));
    do
      v9 = (const void *)__ldaxr(v41);
    while (__stlxr(v29, v41));
    if (!v9)
      goto LABEL_51;
    goto LABEL_50;
  }
  close(v6);
  context.version = 0;
  context.info = (void *)v51.st_size;
  memset(&context.retain, 0, 40);
  context.deallocate = (CFAllocatorDeallocateCallBack)j__munmap;
  context.preferredSize = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v50 = (const __CFString *)CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &context);
  if (atomic_load((unint64_t *)&v50))
  {
    st_size = v51.st_size;
    v19 = (const __CFAllocator *)atomic_load((unint64_t *)&v50);
    v48 = (uint64_t)CFDataCreateWithBytesNoCopy(v16, v15, st_size, v19);
    if (atomic_load((unint64_t *)&v48))
    {
      error = 0;
      v21 = (const __CFData *)atomic_load((unint64_t *)&v48);
      v46 = (const __CFString *)CFPropertyListCreateWithData(v16, v21, 0, 0, &error);
      if (atomic_load((unint64_t *)&v46))
      {
        sub_1D3E1B37C((unint64_t *)&v45, (unint64_t *)&v46);
        if (atomic_load((unint64_t *)&v45))
        {
          do
            v24 = __ldaxr((unint64_t *)&v45);
          while (__stlxr(0, (unint64_t *)&v45));
        }
        else
        {
          v43 = CFSTR("Unable to deserialize sample.");
          v44 = -2009;
          sub_1D3D73E0C(v40, &v44, (CFTypeRef *)&v43);
          v24 = 0;
        }
        v39 = v24;
        sub_1D3E1BFA4((unint64_t *)&v45);
      }
      else
      {
        v44 = (uint64_t)CFSTR("Unable to deserialize sample.");
        v45 = -2009;
        sub_1D3D73E0C(v40, &v45, (CFTypeRef *)&v44);
        v45 = (uint64_t)error;
        do
          v35 = __ldaxr((unint64_t *)&v45);
        while (__stlxr(0, (unint64_t *)&v45));
        do
          v36 = (const void *)__ldaxr(v41);
        while (__stlxr(v35, v41));
        if (v36)
          CFRelease(v36);
        sub_1D3D7448C((unint64_t *)&v45);
        v39 = 0;
      }
      sub_1D3D8BA0C((unint64_t *)&v46);
    }
    else
    {
      v34 = (const __CFAllocator *)atomic_load((unint64_t *)&v50);
      CFAllocatorDeallocate(v34, v15);
      v46 = CFSTR("Unable to create data.");
      error = (CFErrorRef)-2003;
      sub_1D3D73E0C(v40, (uint64_t *)&error, (CFTypeRef *)&v46);
      v39 = 0;
    }
    sub_1D3DB386C((unint64_t *)&v48);
  }
  else
  {
    munmap(v15, v51.st_size);
    error = (CFErrorRef)CFSTR("Unable to create bytes deallocator.");
    v48 = -2003;
    sub_1D3D73E0C(v40, &v48, (CFTypeRef *)&error);
    v39 = 0;
  }
  sub_1D3E1AC50((unint64_t *)&v50);
LABEL_54:
  if (v38 < 0)
    operator delete(v37[0]);
  if (atomic_load(&v39))
  {
    do
      v31 = __ldaxr(&v39);
    while (__stlxr(0, &v39));
  }
  else
  {
    v31 = 0;
    if (a2 && v42)
    {
      sub_1D3DF53CC((CFErrorRef *)&v51, (uint64_t)v40);
      do
        v32 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0, (unint64_t *)&v51));
      *a2 = v32;
      sub_1D3D7448C((unint64_t *)&v51);
      v31 = 0;
    }
  }
  sub_1D3E1BFA4(&v39);
  if (v42)
    sub_1D3DF4F24(v40);
  return v31;
}

void sub_1D3E1B2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,unint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  sub_1D3E1BFA4(&a33);
  sub_1D3D8BA0C(&a34);
  sub_1D3DB386C(&a36);
  sub_1D3E1AC50((unint64_t *)(v39 - 184));
  if (a15 < 0)
    operator delete(__p);
  if (a30)
    sub_1D3DF4F24(&a18);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E1B37C(unint64_t *result, unint64_t *a2)
{
  double v2;
  double v3;
  double v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v8;
  CFTypeID v9;
  CFTypeRef v10;
  const __CFDictionary *v11;
  const __CFString *v12;
  CFTypeRef v13;
  unint64_t v14;
  const void *v15;
  const __CFString *v17;
  double v18;
  CFTypeRef v19;
  CFTypeID v20;
  BOOL v21;
  unint64_t i;
  const void *ValueAtIndex;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  const __CFString *v31;
  CFTypeRef v32;
  CFTypeID v33;
  CFIndex Count;
  CFIndex v35;
  const void *v36;
  void **v37;
  const __CFAllocator *v38;
  uint64_t j;
  uint64_t v40;
  __CFArray *v42;
  const void *v43;
  const __CFArray *v44;
  unint64_t v45;
  const void *v46;
  const __CFString *v47;
  CFTypeRef v48;
  unint64_t v49;
  const void *v50;
  const __CFDictionary *v52;
  const __CFString *v53;
  CFTypeRef v54;
  CFTypeID v55;
  CFIndex v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  unint64_t v59;
  const __CFArray *v60;
  const __CFArray *v61;
  CFTypeID v62;
  BOOL v63;
  unint64_t k;
  const __CFNumber *v65;
  const __CFNumber *v66;
  CFTypeID v67;
  float v68;
  _BOOL4 v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  char v76;
  float32x4_t v77;
  uint32x4_t v78;
  const __CFAllocator *v79;
  __CFDictionary *v80;
  const void *v81;
  __CFDictionary *v83;
  const void *v84;
  __CFDictionary *v86;
  const void *v87;
  __CFDictionary *v88;
  const void *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _OWORD *v96;
  __int128 v97;
  int v98;
  BOOL v99;
  CFNumberRef otherNumber[2];
  const __CFNumber *otherNumbera;
  CFTypeRef cf[2];
  const void *cfa;
  BOOL v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  CFTypeRef v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  void *v114[3];
  unint64_t v115;
  void *v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  const void *v121;
  _OWORD v122[3];
  CFMutableDictionaryRef Mutable;
  unsigned int v124;
  float valuePtr;
  __int128 v126;
  _OWORD v127[2];
  _BYTE bytes[48];
  char v129;
  _BYTE v130[32];
  __int128 v131;
  char v132;
  char v133;
  uint64_t v134;
  CGRect v135;

  v5 = result;
  v134 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load(a2);
  if (!v6
    || (v8 = (const void *)atomic_load(a2),
        v9 = CFGetTypeID(v8),
        result = (unint64_t *)CFDictionaryGetTypeID(),
        (unint64_t *)v9 != result))
  {
    *v5 = 0;
    return result;
  }
  v10 = (CFTypeRef)atomic_load(a2);
  if (v10)
    v10 = CFRetain(v10);
  v110 = v10;
  v11 = (const __CFDictionary *)atomic_load((unint64_t *)&v110);
  sub_1D3DEA648((CFDictionaryRef *)&v121, v11);
  v119 = 0;
  v120 = 0;
  v118 = 0;
  bytes[0] = 0;
  v129 = 0;
  v12 = sub_1D3DEA428(CFSTR("pixelBuffer"));
  if (!v12
    || (v13 = sub_1D3DEA6E0((CFDictionaryRef *)&v121, v12), CFRelease(v12), !v13)
    || (sub_1D3E1BFDC(v114, v13), CFRelease(v13), !v117))
  {
    *v5 = 0;
    goto LABEL_27;
  }
  sub_1D3E1C954((unint64_t *)v130, (uint64_t)v114);
  do
    v14 = __ldaxr((unint64_t *)v130);
  while (__stlxr(0, (unint64_t *)v130));
  do
    v15 = (const void *)__ldaxr(&v120);
  while (__stlxr(v14, &v120));
  if (v15)
    CFRelease(v15);
  sub_1D3D74EDC((unint64_t *)v130);
  if (!atomic_load(&v120))
  {
    *v5 = 0;
    goto LABEL_134;
  }
  v17 = sub_1D3DEA428(CFSTR("regionOfInterest"));
  v18 = 0.0;
  if (v17 && (v19 = sub_1D3DEA6E0((CFDictionaryRef *)&v121, v17), CFRelease(v17), v19))
  {
    v20 = CFGetTypeID(v19);
    if (v20 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v19) != 4)
      goto LABEL_30;
    v21 = 0;
    for (i = 0; i != 4; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v19, i);
      v24 = sub_1D3DEA29C(ValueAtIndex);
      if (!v25)
        break;
      *((_QWORD *)v122 + i) = v24;
      v21 = i > 2;
    }
    if (v21)
    {
      v26 = 0;
      *(_OWORD *)v130 = v122[0];
      *(_OWORD *)&v130[16] = v122[1];
      LOBYTE(v131) = 1;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = *(_QWORD *)&v130[8 * v26];
        v108 = v27;
        v109 = v28;
        *((_QWORD *)&v108 + (v26 & 3)) = v29;
        v27 = v108;
        v28 = v109;
        ++v26;
      }
      while (v26 != 4);
      *(_OWORD *)otherNumber = v109;
      *(_OWORD *)cf = v108;
      v30 = 1;
    }
    else
    {
LABEL_30:
      v30 = 0;
      *(_OWORD *)otherNumber = 0u;
      *(_OWORD *)cf = 0u;
    }
    CFRelease(v19);
    v104 = v30 == 0;
    if (v30)
      v18 = *(double *)cf;
    else
      v18 = 0.0;
    if (v30)
      v2 = *(double *)&cf[1];
    else
      v2 = 0.0;
    if (v30)
      v3 = *(double *)otherNumber;
    else
      v3 = 0.0;
    if (v30)
      v4 = *(double *)&otherNumber[1];
    else
      v4 = 0.0;
  }
  else
  {
    v104 = 1;
  }
  v31 = sub_1D3DEA428(CFSTR("pyramid"));
  if (v31 && (v32 = sub_1D3DEA6E0((CFDictionaryRef *)&v121, v31), CFRelease(v31), v32))
  {
    v33 = CFGetTypeID(v32);
    if (v33 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)v32);
      if (Count)
      {
        memset(v122, 0, 24);
        sub_1D3E1A1B4((uint64_t *)v122, Count);
        if (Count < 1)
        {
LABEL_53:
          v111 = v122[0];
          v112 = *(_QWORD *)&v122[1];
          memset(v122, 0, 24);
          v113 = 1;
        }
        else
        {
          v35 = 0;
          while (1)
          {
            v36 = CFArrayGetValueAtIndex((CFArrayRef)v32, v35);
            sub_1D3E1BFDC((void **)v130, v36);
            if (!v133)
              break;
            sub_1D3E1A278((uint64_t *)v122, (__int128 *)v130);
            if (v133)
            {
              sub_1D3E1A40C((void **)&v131 + 1);
              sub_1D3D8BAAC((unint64_t *)&v130[24]);
            }
            if (Count == ++v35)
              goto LABEL_53;
          }
          LOBYTE(v111) = 0;
          v113 = 0;
        }
        v37 = (void **)v122;
      }
      else
      {
        v112 = 0;
        v111 = 0uLL;
        memset(v130, 0, 24);
        v113 = 1;
        v37 = (void **)v130;
      }
      sub_1D3E1A470(v37);
    }
    else
    {
      LOBYTE(v111) = 0;
      v113 = 0;
    }
    CFRelease(v32);
    if (v113)
    {
      v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      *(_QWORD *)v130 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t)(*((_QWORD *)&v111 + 1) - v111) >> 6, MEMORY[0x1E0C9B378]);
      v40 = *((_QWORD *)&v111 + 1);
      for (j = v111; j != v40; j += 64)
      {
        sub_1D3E1C954((unint64_t *)v122, j);
        if (!atomic_load((unint64_t *)v122))
        {
          *v5 = 0;
          sub_1D3D74EDC((unint64_t *)v122);
          sub_1D3D74C60((unint64_t *)v130);
          goto LABEL_132;
        }
        v42 = (__CFArray *)atomic_load((unint64_t *)v130);
        v43 = (const void *)atomic_load((unint64_t *)v122);
        CFArrayAppendValue(v42, v43);
        sub_1D3D74EDC((unint64_t *)v122);
      }
      v44 = (const __CFArray *)atomic_load((unint64_t *)v130);
      *(_QWORD *)&v122[0] = CFArrayCreateCopy(v38, v44);
      do
        v45 = __ldaxr((unint64_t *)v122);
      while (__stlxr(0, (unint64_t *)v122));
      do
        v46 = (const void *)__ldaxr(&v119);
      while (__stlxr(v45, &v119));
      if (v46)
        CFRelease(v46);
      sub_1D3D74138((unint64_t *)v122);
      sub_1D3D74C60((unint64_t *)v130);
    }
  }
  else
  {
    LOBYTE(v111) = 0;
    v113 = 0;
  }
  v47 = sub_1D3DEA428(CFSTR("presentationTimeStamp"));
  if (v47)
  {
    v48 = sub_1D3DEA6E0((CFDictionaryRef *)&v121, v47);
    CFRelease(v47);
    if (v48)
    {
      v47 = (const __CFString *)sub_1D3DEA4E0(v48);
      CFRelease(v48);
    }
    else
    {
      v47 = 0;
    }
  }
  *(_QWORD *)v130 = v47;
  do
    v49 = __ldaxr((unint64_t *)v130);
  while (__stlxr(0, (unint64_t *)v130));
  do
    v50 = (const void *)__ldaxr(&v118);
  while (__stlxr(v49, &v118));
  if (v50)
    CFRelease(v50);
  sub_1D3D8BAAC((unint64_t *)v130);
  if (atomic_load(&v118))
  {
    v52 = (const __CFDictionary *)atomic_load(&v118);
    CMTimeMakeFromDictionary((CMTime *)v130, v52);
    if ((v130[12] & 1) == 0)
      goto LABEL_81;
  }
  v53 = sub_1D3DEA428(CFSTR("cameraIntrinsicMatrix"));
  if (!v53 || (v54 = sub_1D3DEA6E0((CFDictionaryRef *)&v121, v53), CFRelease(v53), !v54))
  {
    bytes[0] = 0;
    *(_OWORD *)&bytes[1] = v126;
    *(_OWORD *)&bytes[17] = v127[0];
    *(_OWORD *)&bytes[32] = *(_OWORD *)((char *)v127 + 15);
    v129 = 0;
    goto LABEL_121;
  }
  v55 = CFGetTypeID(v54);
  cfa = v54;
  if (v55 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v54) != 3)
    goto LABEL_116;
  v99 = 0;
  v56 = 0;
  v57 = (const __CFNumber *)*MEMORY[0x1E0C9B218];
  v58 = (const __CFNumber *)*MEMORY[0x1E0C9B210];
  otherNumbera = (const __CFNumber *)*MEMORY[0x1E0C9B208];
  do
  {
    v59 = v56;
    v60 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v54, v56);
    v61 = v60;
    if (!v60)
      break;
    v62 = CFGetTypeID(v60);
    if (v62 != CFArrayGetTypeID() || CFArrayGetCount(v61) != 3)
      break;
    v63 = 0;
    for (k = 0; k != 3; ++k)
    {
      v65 = (const __CFNumber *)CFArrayGetValueAtIndex(v61, k);
      v66 = v65;
      if (!v65)
        break;
      v67 = CFGetTypeID(v65);
      if (v67 != CFNumberGetTypeID())
        break;
      if (v57 == v66 || CFNumberCompare(v66, v57, 0) == kCFCompareEqualTo)
      {
        v70 = 2139095040;
LABEL_109:
        v68 = *(float *)&v70;
        goto LABEL_110;
      }
      if (v58 == v66 || CFNumberCompare(v66, v58, 0) == kCFCompareEqualTo)
      {
        v70 = -8388608;
        goto LABEL_109;
      }
      if (otherNumbera == v66 || CFNumberCompare(v66, otherNumbera, 0) == kCFCompareEqualTo)
      {
        v70 = 2143289344;
        goto LABEL_109;
      }
      if (!CFNumberGetValue(v66, kCFNumberFloatType, &valuePtr))
        break;
      v68 = valuePtr;
      v69 = valuePtr < -3.4028e38;
      if (valuePtr > 3.4028e38)
        v69 = 1;
      if (v69)
        v68 = 0.0;
      if (v69)
        break;
LABEL_110:
      *((float *)&Mutable + k) = v68;
      v63 = k > 1;
    }
    if (!v63)
      break;
    v71 = 0;
    *(_QWORD *)v130 = Mutable;
    *(_QWORD *)&v130[8] = v124 | 0x100000000;
    v72 = 0uLL;
    v54 = cfa;
    do
    {
      v73 = *(_DWORD *)&v130[4 * v71];
      v107 = v72;
      *(_DWORD *)((unint64_t)&v107 & 0xFFFFFFFFFFFFFFF3 | (4 * (v71 & 3))) = v73;
      v74 = v107;
      HIDWORD(v74) = HIDWORD(v72);
      ++v71;
      v72 = v74;
    }
    while (v71 != 3);
    v122[v59] = v107;
    v56 = v59 + 1;
    v99 = v59 > 1;
  }
  while (v59 != 2);
  if (!v99)
  {
LABEL_116:
    v75 = 0;
    v76 = 0;
    goto LABEL_117;
  }
  v93 = 0;
  *(_OWORD *)v130 = v122[0];
  *(_OWORD *)&v130[16] = v122[1];
  v131 = v122[2];
  v132 = 1;
  memset(v122, 0, sizeof(v122));
  do
  {
    v94 = 0;
    v95 = *(_OWORD *)&v130[16 * v93];
    v96 = &v122[v93];
    v97 = *v96;
    do
    {
      v105 = v95;
      v98 = *(_DWORD *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94 & 3)));
      v106 = v97;
      *(_DWORD *)((unint64_t)&v106 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94 & 3))) = v98;
      v97 = v106;
      ++v94;
    }
    while (v94 != 3);
    *((_DWORD *)v96 + 2) = DWORD2(v106);
    *(_QWORD *)v96 = v97;
    ++v93;
  }
  while (v93 != 3);
  v76 = v122[0];
  v126 = *(_OWORD *)((char *)v122 + 1);
  v127[0] = *(_OWORD *)((char *)&v122[1] + 1);
  *(_OWORD *)((char *)v127 + 15) = v122[2];
  v75 = 1;
LABEL_117:
  CFRelease(cfa);
  bytes[0] = v76;
  *(_OWORD *)&bytes[1] = v126;
  *(_OWORD *)&bytes[17] = v127[0];
  *(_OWORD *)&bytes[32] = *(_OWORD *)((char *)v127 + 15);
  v129 = v75;
  if (v75)
  {
    v77.i64[0] = 0x3400000034000000;
    v77.i64[1] = 0x3400000034000000;
    v78 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v77, vabsq_f32(*(float32x4_t *)&bytes[16])), (int8x16_t)vcgeq_f32(v77, vabsq_f32(*(float32x4_t *)bytes))), (int8x16_t)vcgeq_f32(v77, vabsq_f32(*(float32x4_t *)&bytes[32])));
    v78.i32[3] = v78.i32[2];
    if ((vminvq_u32(v78) & 0x80000000) != 0)
    {
LABEL_81:
      *v5 = 0;
      goto LABEL_132;
    }
  }
LABEL_121:
  v79 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v104)
  {
    v80 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v135.origin.x = v18;
    v135.origin.y = v2;
    v135.size.width = v3;
    v135.size.height = v4;
    *(_QWORD *)v130 = CGRectCreateDictionaryRepresentation(v135);
    v81 = (const void *)atomic_load((unint64_t *)v130);
    CFDictionarySetValue(v80, CFSTR("MRCSampleAttributeRegionOfInterest"), v81);
    sub_1D3D8BAAC((unint64_t *)v130);
  }
  if (atomic_load(&v119))
  {
    v83 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v84 = (const void *)atomic_load(&v119);
    CFDictionarySetValue(v83, CFSTR("MRCSampleAttributePyramid"), v84);
  }
  if (atomic_load(&v118))
  {
    v86 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    v87 = (const void *)atomic_load(&v118);
    CFDictionarySetValue(v86, CFSTR("MRCSampleAttributePresentationTimeStamp"), v87);
  }
  if (v129)
  {
    v88 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
    *(_QWORD *)v130 = CFDataCreate(v79, bytes, 48);
    v89 = (const void *)atomic_load((unint64_t *)v130);
    CFDictionarySetValue(v88, CFSTR("MRCSampleAttributeCameraIntrinsicMatrix"), v89);
    sub_1D3DB386C((unint64_t *)v130);
  }
  v90 = atomic_load(&v120);
  v91 = atomic_load((unint64_t *)&Mutable);
  *(_QWORD *)v130 = v90;
  *(_QWORD *)&v122[0] = v91;
  *(_QWORD *)&v126 = sub_1D3DE6310((CFTypeRef *)v130, (const __CFDictionary **)v122);
  do
    v92 = __ldaxr((unint64_t *)&v126);
  while (__stlxr(0, (unint64_t *)&v126));
  sub_1D3DE664C((unint64_t *)&v126);
  *v5 = v92;
  sub_1D3D740C8((unint64_t *)&Mutable);
LABEL_132:
  if (v113)
    sub_1D3E1A470((void **)&v111);
LABEL_134:
  if (v117)
  {
    sub_1D3E1A40C(&v116);
    sub_1D3D8BAAC(&v115);
  }
LABEL_27:
  sub_1D3D8BAAC(&v118);
  sub_1D3D74138(&v119);
  sub_1D3D74EDC(&v120);
  sub_1D3DEA6B0(&v121);
  return sub_1D3D8BAAC((unint64_t *)&v110);
}

void sub_1D3E1BE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unint64_t a43,unint64_t a44,unint64_t a45,const void *a46,void *a47)
{
  sub_1D3E1A470(&a47);
  sub_1D3E1A240((uint64_t)&a34);
  sub_1D3D8BAAC(&a43);
  sub_1D3D74138(&a44);
  sub_1D3D74EDC(&a45);
  sub_1D3DEA6B0(&a46);
  sub_1D3D8BAAC(&a28);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E1BFA4(unint64_t *a1)
{
  const void *v2;

  do
    v2 = (const void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v2)
    CFRelease(v2);
  return a1;
}

void **sub_1D3E1BFDC(void **result, CFTypeRef cf)
{
  _BYTE *v2;
  CFTypeID v4;
  CFDictionaryRef *v5;
  char v6;
  char v7;
  const __CFString *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const __CFString *v14;
  CFTypeRef v15;
  const __CFString *v16;
  CFTypeRef v17;
  unsigned __int8 v18;
  const __CFString *v19;
  CFTypeID v20;
  unint64_t Count;
  unint64_t v22;
  CFIndex v23;
  const __CFArray *v24;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v26;
  CFTypeID v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  unint64_t v34;
  char v35;
  char v36;
  const __CFString *Copy;
  CFTypeRef v38;
  CFTypeID v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t v66;
  uint64_t v67;
  int v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  int v76;
  int v77;
  unint64_t v78;
  char v79;
  const __CFAllocator *allocator;
  unint64_t v81;
  CFIndex v82;
  CFTypeRef cfa;
  uint64_t v84;
  _OWORD v85[2];
  _QWORD *v86;
  int64x2_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  void *v94[3];
  int64x2_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  const void *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  char v104;
  int64x2_t v105;
  uint64_t v106;
  int64x2_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  int64x2_t v110;
  _QWORD v111[4];

  v2 = result;
  if (!cf
    || (v84 = (uint64_t)result,
        v4 = CFGetTypeID(cf),
        result = (void **)CFDictionaryGetTypeID(),
        v2 = (_BYTE *)v84,
        (void **)v4 != result))
  {
LABEL_101:
    *v2 = 0;
    v2[64] = 0;
    return result;
  }
  LOBYTE(v99) = 0;
  LOBYTE(v100) = 0;
  LOBYTE(v101) = 0;
  LOBYTE(v102) = 0;
  LOBYTE(v103) = 0;
  v104 = 0;
  v105.i8[0] = 0;
  v105.i8[8] = 0;
  LOWORD(v106) = 0;
  v107.i8[0] = 0;
  v109 = 0;
  v5 = sub_1D3DEA648((CFDictionaryRef *)&v98, (const __CFDictionary *)cf);
  v99 = sub_1D3E1CCFC(v5, (UInt8 *)"width", 5);
  LOBYTE(v100) = v6;
  v101 = sub_1D3E1CCFC((CFDictionaryRef *)&v98, (UInt8 *)"height", 6);
  LOBYTE(v102) = v7;
  v8 = sub_1D3DEA3F4((UInt8 *)"pixelFormatType", 15);
  if (v8 && (v9 = sub_1D3DEA6E0((CFDictionaryRef *)&v98, v8), CFRelease(v8), v9))
  {
    v10 = sub_1D3DEA098(v9);
    CFRelease(v9);
    v11 = v10 & 0x100000000;
    v12 = v10 & 0xFFFFFF00;
    v13 = v10;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v13 = 0;
  }
  v104 = BYTE4(v11);
  v103 = v12 | v11 | v13;
  v14 = sub_1D3DEA3F4((UInt8 *)"pixelBufferAttributes", 21);
  if (v14)
  {
    v15 = sub_1D3DEA6E0((CFDictionaryRef *)&v98, v14);
    CFRelease(v14);
    if (v15)
    {
      v14 = (const __CFString *)sub_1D3DEA4E0(v15);
      CFRelease(v15);
    }
    else
    {
      v14 = 0;
    }
  }
  v105.i64[0] = (uint64_t)v14;
  v105.i8[8] = 1;
  v16 = sub_1D3DEA3F4((UInt8 *)"isPlanar", 8);
  if (v16)
  {
    v17 = sub_1D3DEA6E0((CFDictionaryRef *)&v98, v16);
    CFRelease(v16);
    if (v17)
    {
      LOWORD(v16) = sub_1D3DEA530(v17);
      CFRelease(v17);
      v18 = BYTE1(v16);
    }
    else
    {
      v18 = 0;
      LOBYTE(v16) = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  LOWORD(v106) = v16 | (v18 << 8);
  v19 = sub_1D3DEA3F4((UInt8 *)"planes", 6);
  if (v19 && (cfa = sub_1D3DEA6E0((CFDictionaryRef *)&v98, v19), CFRelease(v19), cfa))
  {
    v20 = CFGetTypeID(cfa);
    if (v20 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)cfa);
      v22 = Count;
      if (Count)
      {
        v110 = 0uLL;
        v111[0] = 0;
        if (Count >> 59)
          sub_1D3D6D4F8();
        v86 = v111;
        v81 = Count;
        v110.i64[0] = (uint64_t)operator new(32 * Count);
        v110.i64[1] = v110.i64[0];
        v111[0] = v110.i64[0] + 32 * v22;
        memset(v85, 0, sizeof(v85));
        sub_1D3E1AC00((uint64_t)v85);
        v23 = 0;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v24 = (const __CFArray *)cfa;
        while (1)
        {
          v82 = v23;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, v23);
          v26 = ValueAtIndex;
          if (!ValueAtIndex)
            break;
          v27 = CFGetTypeID(ValueAtIndex);
          if (v27 != CFDictionaryGetTypeID())
            break;
          sub_1D3DEA648((CFDictionaryRef *)v85, v26);
          v28 = sub_1D3E1CCFC((CFDictionaryRef *)v85, (UInt8 *)"width", 5);
          v30 = v29;
          v31 = sub_1D3E1CCFC((CFDictionaryRef *)v85, (UInt8 *)"height", 6);
          v33 = v32;
          v34 = sub_1D3E1CCFC((CFDictionaryRef *)v85, (UInt8 *)"bytesPerRow", 11);
          v36 = v35;
          Copy = sub_1D3DEA3F4((UInt8 *)"data", 4);
          if (Copy)
          {
            v38 = sub_1D3DEA6E0((CFDictionaryRef *)v85, Copy);
            CFRelease(Copy);
            if (v38)
            {
              v39 = CFGetTypeID(v38);
              if (v39 == CFDataGetTypeID())
                Copy = (const __CFString *)CFDataCreateCopy(allocator, (CFDataRef)v38);
              else
                Copy = 0;
              CFRelease(v38);
            }
            else
            {
              Copy = 0;
            }
          }
          if (!v30 || !v33 || !v36)
          {
            if (Copy)
              CFRelease(Copy);
LABEL_68:
            sub_1D3DEA6B0((const void **)v85);
            break;
          }
          if (!Copy)
            goto LABEL_68;
          sub_1D3DEA6B0((const void **)v85);
          memset(v85, 0, 24);
          *(_QWORD *)&v90 = v28;
          *((_QWORD *)&v90 + 1) = v31;
          *((_QWORD *)&v85[1] + 1) = Copy;
          v91 = v34;
          do
            v40 = __ldaxr((unint64_t *)&v85[1] + 1);
          while (__stlxr(0, (unint64_t *)&v85[1] + 1));
          v92 = v40;
          v93 = 1;
          sub_1D3DB386C((unint64_t *)&v85[1] + 1);
          if (!v93)
            break;
          v41 = (_QWORD *)v110.i64[1];
          if (v110.i64[1] >= v111[0])
          {
            v47 = (v110.i64[1] - v110.i64[0]) >> 5;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 59)
              sub_1D3D6D4F8();
            v49 = v111[0] - v110.i64[0];
            if ((v111[0] - v110.i64[0]) >> 4 > v48)
              v48 = v49 >> 4;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
              v50 = 0x7FFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            v86 = v111;
            if (v50 >> 59)
              sub_1D3D6D50C();
            v51 = (char *)operator new(32 * v50);
            v52 = &v51[32 * v47];
            *(_QWORD *)&v85[0] = v51;
            *((_QWORD *)&v85[0] + 1) = v52;
            *(_QWORD *)&v85[1] = v52;
            *((_QWORD *)&v85[1] + 1) = &v51[32 * v50];
            v53 = v90;
            v90 = 0uLL;
            *(_OWORD *)v52 = v53;
            v54 = v91;
            v91 = 0;
            v55 = (unint64_t *)(v52 + 24);
            *((_QWORD *)v52 + 2) = v54;
            do
              v56 = __ldaxr(&v92);
            while (__stlxr(0, &v92));
            *v55 = v56;
            v57 = *((_QWORD *)&v85[0] + 1);
            v46 = *(_QWORD *)&v85[1] + 32;
            *(_QWORD *)&v85[1] += 32;
            v58 = (_QWORD *)v110.i64[1];
            v59 = (_QWORD *)v110.i64[0];
            if (v110.i64[1] == v110.i64[0])
            {
              v66 = vdupq_n_s64(v110.u64[1]);
            }
            else
            {
              v60 = *((_QWORD *)&v85[0] + 1);
              do
              {
                v61 = *(v58 - 4);
                v58 -= 4;
                *v58 = 0;
                *(_QWORD *)(v60 - 32) = v61;
                v60 -= 32;
                v62 = v58[1];
                v58[1] = 0;
                *(_QWORD *)(v60 + 8) = v62;
                v63 = v58[2];
                v58[2] = 0;
                *(_QWORD *)(v60 + 16) = v63;
                v64 = v58 + 3;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(0, v64));
                *(_QWORD *)(v57 - 8) = v65;
                v57 = v60;
              }
              while (v58 != v59);
              v66 = v110;
              v46 = *(_QWORD *)&v85[1];
              v57 = v60;
            }
            v110.i64[0] = v57;
            v110.i64[1] = v46;
            *(int64x2_t *)((char *)v85 + 8) = v66;
            v67 = v111[0];
            v111[0] = *((_QWORD *)&v85[1] + 1);
            *((_QWORD *)&v85[1] + 1) = v67;
            *(_QWORD *)&v85[0] = v66.i64[0];
            sub_1D3E1AC00((uint64_t)v85);
          }
          else
          {
            v42 = v90;
            *(_QWORD *)&v90 = 0;
            *(_QWORD *)v110.i64[1] = v42;
            v43 = *((_QWORD *)&v90 + 1);
            *((_QWORD *)&v90 + 1) = 0;
            v41[1] = v43;
            v44 = v91;
            v91 = 0;
            v41[2] = v44;
            do
              v45 = __ldaxr(&v92);
            while (__stlxr(0, &v92));
            v41[3] = v45;
            v46 = (uint64_t)(v41 + 4);
          }
          v110.i64[1] = v46;
          if (v93)
            sub_1D3DB386C(&v92);
          v24 = (const __CFArray *)cfa;
          v23 = v82 + 1;
          if (v82 + 1 == v81)
          {
            v95 = v110;
            v96 = v111[0];
            v111[0] = 0;
            v110 = 0uLL;
            v97 = 1;
            goto LABEL_70;
          }
        }
        v95.i8[0] = 0;
        v97 = 0;
LABEL_70:
        v69 = (void **)&v110;
      }
      else
      {
        v96 = 0;
        v95 = 0uLL;
        memset(v85, 0, 24);
        v97 = 1;
        v69 = (void **)v85;
      }
      sub_1D3E1A40C(v69);
    }
    else
    {
      v95.i8[0] = 0;
      v97 = 0;
    }
    CFRelease(cfa);
    v68 = v97;
  }
  else
  {
    v68 = 0;
    v95.i8[0] = 0;
    v97 = 0;
  }
  if (v109 == v68)
  {
    if (!v109)
      goto LABEL_86;
    v70 = v107.i64[0];
    if (v107.i64[0])
    {
      v71 = v107.i64[1];
      v72 = (void *)v107.i64[0];
      if (v107.i64[1] != v107.i64[0])
      {
        do
        {
          v73 = v71 - 32;
          sub_1D3DB386C((unint64_t *)(v71 - 8));
          v71 = v73;
        }
        while (v73 != v70);
        v72 = (void *)v107.i64[0];
      }
      v107.i64[1] = v70;
      operator delete(v72);
    }
    v107 = v95;
    v108 = v96;
    v96 = 0;
    v95 = 0uLL;
  }
  else if (v109)
  {
    sub_1D3E1A40C((void **)&v107);
    v109 = 0;
  }
  else
  {
    v107 = v95;
    v108 = v96;
    v96 = 0;
    v95 = 0uLL;
    v109 = 1;
  }
  if (v97)
    sub_1D3E1A40C((void **)&v95);
LABEL_86:
  if ((_BYTE)v100 && (_BYTE)v102 && v104 && v105.i8[8] && v105.i64[0] && BYTE1(v106) && v109)
  {
    *(_QWORD *)&v90 = v99;
    *((_QWORD *)&v90 + 1) = v101;
    LODWORD(v91) = v103;
    v92 = v105.i64[0];
    v93 = v106;
    v74 = v108;
    v75 = v107;
    v108 = 0;
    v107 = 0uLL;
    *(_QWORD *)&v85[0] = v99;
    *((_QWORD *)&v85[0] + 1) = v101;
    LODWORD(v85[1]) = v103;
    *((_QWORD *)&v85[1] + 1) = v105.i64[0];
    LOBYTE(v86) = v106;
    v87 = v75;
    v88 = v74;
    memset(v94, 0, sizeof(v94));
    v89 = 1;
    sub_1D3E1A40C(v94);
    v76 = 0;
  }
  else
  {
    if (v105.i8[8] && v105.i64[0])
      CFRelease((CFTypeRef)v105.i64[0]);
    LOBYTE(v85[0]) = 0;
    v89 = 0;
    v76 = 1;
  }
  result = (void **)sub_1D3DEA6B0(&v98);
  if (v109)
    result = sub_1D3E1A40C((void **)&v107);
  v2 = (_BYTE *)v84;
  if (v76)
    goto LABEL_101;
  v77 = v85[1];
  v102 = *((_QWORD *)&v85[1] + 1);
  LOBYTE(v103) = (_BYTE)v86;
  v105 = v87;
  v106 = v88;
  v87 = 0uLL;
  v88 = 0;
  v99 = 0;
  v100 = 0;
  *(_OWORD *)v84 = v85[0];
  LODWORD(v101) = 0;
  *(_DWORD *)(v84 + 16) = v77;
  do
    v78 = __ldaxr(&v102);
  while (__stlxr(0, &v102));
  *(_QWORD *)(v84 + 24) = v78;
  v79 = v103;
  LOBYTE(v103) = 0;
  *(_BYTE *)(v84 + 32) = v79;
  *(int64x2_t *)(v84 + 40) = v105;
  *(_QWORD *)(v84 + 56) = v106;
  v106 = 0;
  v105 = 0uLL;
  *(_BYTE *)(v84 + 64) = 1;
  sub_1D3E1A40C((void **)&v105);
  sub_1D3D8BAAC(&v102);
  return sub_1D3E1A40C((void **)&v87);
}

void sub_1D3E1C8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_1D3DEA6B0((const void **)va);
  sub_1D3E1A40C((void **)(v9 - 128));
  sub_1D3DEA6B0((const void **)(v9 - 232));
  if (*(_BYTE *)(v9 - 136))
    sub_1D3E1A40C(a7);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E1C954(unint64_t *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  size_t v5;
  size_t v6;
  OSType v7;
  const __CFDictionary *v8;
  unint64_t *result;
  int v11;
  __CVBuffer *v12;
  size_t PlaneCount;
  __CVBuffer *v14;
  size_t v15;
  uint64_t v16;
  __CVBuffer *v17;
  size_t WidthOfPlane;
  __CVBuffer *v19;
  size_t HeightOfPlane;
  __CVBuffer *v21;
  size_t BytesPerRowOfPlane;
  size_t v23;
  size_t v24;
  unint64_t *v25;
  unint64_t v26;
  size_t *v27;
  unint64_t v28;
  unint64_t *v29;
  size_t v30;
  const __CFData *v31;
  const __CFData *v32;
  const UInt8 *BytePtr;
  __CVBuffer *v34;
  __CVBuffer *v35;
  char *BaseAddressOfPlane;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  __CVBuffer *v41;
  _QWORD *v42;
  const __CFData *v43;
  CFIndex Length;
  _QWORD *v45;
  const __CFData *v46;
  const UInt8 *v47;
  __CVBuffer *v48;
  __CVBuffer *v49;
  char *BaseAddress;
  __CVBuffer *v51;
  size_t BytesPerRow;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  size_t v58;
  __CVBuffer *v59;
  CVPixelBufferRef v60;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = (const __CFDictionary *)atomic_load((unint64_t *)(a2 + 24));
  result = (unint64_t *)CVPixelBufferCreate(v4, v5, v6, v7, v8, &pixelBufferOut);
  if ((_DWORD)result)
  {
    *a1 = 0;
    return result;
  }
  v60 = pixelBufferOut;
  pixelBufferOut = 0;
  if (!atomic_load((unint64_t *)&v60))
    goto LABEL_37;
  v11 = *(unsigned __int8 *)(a2 + 32);
  v12 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
  if (v11)
  {
    PlaneCount = CVPixelBufferGetPlaneCount(v12);
    v14 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
    if (CVPixelBufferIsPlanar(v14) && PlaneCount == (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 5)
    {
      if (PlaneCount)
      {
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + 40);
          v17 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          WidthOfPlane = CVPixelBufferGetWidthOfPlane(v17, v15);
          v19 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(v19, v15);
          v21 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v21, v15);
          if (*(_QWORD *)(v16 + 32 * v15) != WidthOfPlane)
            goto LABEL_37;
          v23 = PlaneCount;
          v24 = v16 + 32 * v15;
          v25 = (unint64_t *)(v24 + 8);
          if (*(_QWORD *)(v24 + 8) != HeightOfPlane)
            goto LABEL_37;
          v28 = *(_QWORD *)(v24 + 16);
          v27 = (size_t *)(v24 + 16);
          v26 = v28;
          if (!v28)
            goto LABEL_38;
          v29 = (unint64_t *)(v16 + 32 * v15 + 24);
          v26 = atomic_load(v29);
          if (!v26)
            goto LABEL_38;
          v30 = BytesPerRowOfPlane;
          v31 = (const __CFData *)atomic_load(v29);
          if (CFDataGetLength(v31) != *v25 * *v27)
            goto LABEL_37;
          v32 = (const __CFData *)atomic_load(v29);
          BytePtr = CFDataGetBytePtr(v32);
          if (!BytePtr)
            goto LABEL_37;
          v34 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          if (CVPixelBufferLockBaseAddress(v34, 0))
            goto LABEL_37;
          v35 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v35, v15);
          v37 = BaseAddressOfPlane;
          if (!BaseAddressOfPlane)
            goto LABEL_37;
          v38 = *v25;
          if (*v27 == v30)
          {
            memcpy(BaseAddressOfPlane, BytePtr, v38 * v30);
          }
          else if (v38)
          {
            v39 = 0;
            do
            {
              if (*v27 >= v30)
                v40 = v30;
              else
                v40 = *v27;
              memcpy(v37, &BytePtr[*v27 * v39++], v40);
              v37 += v30;
            }
            while (v39 < *v25);
          }
          v41 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          CVPixelBufferUnlockBaseAddress(v41, 0);
          ++v15;
          PlaneCount = v23;
          if (v15 == v23)
            goto LABEL_26;
        }
      }
      do
LABEL_26:
        v26 = __ldaxr((unint64_t *)&v60);
      while (__stlxr(0, (unint64_t *)&v60));
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (CVPixelBufferIsPlanar(v12))
    goto LABEL_37;
  v42 = *(_QWORD **)(a2 + 40);
  if (*(_QWORD *)(a2 + 48) - (_QWORD)v42 != 32 || *v42 != *(_QWORD *)a2 || v42[1] != *(_QWORD *)(a2 + 8) || !v42[2])
    goto LABEL_37;
  v26 = atomic_load(v42 + 3);
  if (v26)
  {
    v43 = (const __CFData *)atomic_load((unint64_t *)(*(_QWORD *)(a2 + 40) + 24));
    Length = CFDataGetLength(v43);
    v45 = *(_QWORD **)(a2 + 40);
    if (Length == v45[1] * v45[2])
    {
      v46 = (const __CFData *)atomic_load(v45 + 3);
      v47 = CFDataGetBytePtr(v46);
      if (v47)
      {
        v48 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
        if (!CVPixelBufferLockBaseAddress(v48, 0))
        {
          v49 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(v49);
          if (BaseAddress)
          {
            v51 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
            BytesPerRow = CVPixelBufferGetBytesPerRow(v51);
            v53 = BytesPerRow;
            v54 = *(_QWORD *)(a2 + 40);
            v55 = *(_QWORD *)(v54 + 8);
            if (*(_QWORD *)(v54 + 16) == BytesPerRow)
            {
              memcpy(BaseAddress, v47, v55 * BytesPerRow);
            }
            else if (v55)
            {
              v56 = 0;
              do
              {
                v57 = *(_QWORD *)(v54 + 16);
                if (v57 >= v53)
                  v58 = v53;
                else
                  v58 = v57;
                memcpy(BaseAddress, &v47[v57 * v56++], v58);
                v54 = *(_QWORD *)(a2 + 40);
                BaseAddress += v53;
              }
              while (v56 < *(_QWORD *)(v54 + 8));
            }
            v59 = (__CVBuffer *)atomic_load((unint64_t *)&v60);
            CVPixelBufferUnlockBaseAddress(v59, 0);
            goto LABEL_26;
          }
        }
      }
    }
LABEL_37:
    v26 = 0;
  }
LABEL_38:
  *a1 = v26;
  return sub_1D3D74EDC((unint64_t *)&v60);
}

void sub_1D3E1CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D74EDC(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1D3E1CCFC(CFDictionaryRef *a1, UInt8 *bytes, CFIndex numBytes)
{
  const __CFString *v4;
  const __CFString *v5;
  CFTypeRef v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;

  v4 = sub_1D3DEA3F4(bytes, numBytes);
  if (v4 && (v5 = v4, v6 = sub_1D3DEA6E0(a1, v4), CFRelease(v5), v6))
  {
    v7 = sub_1D3DEA20C(v6);
    v8 = v7;
    v9 = v7 & 0xFFFFFFFFFFFFFF00;
    CFRelease(v6);
    v10 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return v10 | v9;
}

uint64_t sub_1D3E1CD9C(uint64_t a1)
{
  char *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(int32x2_t *)(a1 + 40) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a1 + 48) = 2143289344;
  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 256;
  return a1;
}

BOOL sub_1D3E1CDEC(double *a1, uint64_t a2, double a3, double a4)
{
  double v8;
  unint64_t v9;
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;

  v8 = sqrt(a4 * a4 + a3 * a3);
  *(double *)(a2 + 24) = a3 / v8;
  *(double *)(a2 + 32) = a4 / v8;
  while (1)
  {
    sub_1D3E1E104(a2, a1[1], a1[2]);
    v9 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
    if (__ROR8__(0x6666666666666666 - 0x70A3D70A3D70A3D7 * v9, 1) <= 0x51EB851EB851EB8uLL)
    {
      result = sub_1D3E1DFD0(a2, *(float64x2_t **)a2, v9);
      if (!result)
        break;
      v11 = a1[1];
      v12 = a1[2];
      v13 = sub_1D3E1DF88((float *)a2, v11, v12);
      result = sub_1D3E1CFF4(a1, v11 - v13 + **(double **)a2, v12 - v14 + *(double *)(*(_QWORD *)a2 + 8));
      if (!result)
        break;
    }
    v15 = sub_1D3E1E22C(a1, 1, 1, a3, a4);
    if (v15)
      return v15 == 1 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 > 0x10uLL;
  }
  return result;
}

BOOL sub_1D3E1CF20(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double *v6;
  double v7;
  double v8;
  _BOOL8 result;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;

  v6 = (double *)(a1 + 8);
  *(float64x2_t *)(a1 + 8) = vaddq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a1 + 8));
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  v7 = *(double *)(a1 + 24);
  v8 = *(double *)(a1 + 32);
  *(double *)(a1 + 24) = a3;
  *(double *)(a1 + 32) = a4;
  sub_1D3E1E22C((double *)a1, 2, 0, -v7, -v8);
  result = 0;
  if (*(double *)a2 >= 0.0)
  {
    result = 0;
    v10 = (double)*(unint64_t *)(*(_QWORD *)a1 + 8);
    if (*(double *)a2 < v10)
    {
      v11 = *(double *)(a2 + 8);
      if (v11 >= 0.0)
      {
        v12 = (double)*(unint64_t *)(*(_QWORD *)a1 + 16);
        if (v11 < v12 && *v6 >= 0.0)
        {
          v13 = *(double *)(a1 + 16);
          v14 = *v6 < v10;
          if (v13 < 0.0)
            v14 = 0;
          return v13 < v12 && v14;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1D3E1CFF4(double *a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[1];
  v6 = a1[2];
  v7 = v5 - a2;
  v8 = v6 - a3;
  v9 = vabdd_f64(v5, a2);
  v10 = vabdd_f64(v6, a3);
  if (v9 < v10)
    v9 = v10;
  v11 = v7 / v9;
  v12 = v8 / v9;
  a1[3] = v7 / v9;
  a1[4] = v8 / v9;
  v13 = v4 * (v8 / v9) + v7 / v9 * v3;
  if (v13 >= 0.0)
  {
    v14 = fabs(v11);
    v15 = fabs(v12);
    if (v14 == v15)
    {
      if (fabs(v3) <= fabs(v4))
        v3 = 0.0;
      else
        v4 = 0.0;
      v11 = v11 - v3;
      v12 = v12 - v4;
LABEL_19:
      a1[3] = v3 + v11 * 0.99000001;
      a1[4] = v4 + v12 * 0.99000001;
      return v13 >= 0.0;
    }
    if (v14 <= v15)
      v11 = 0.0;
    else
      v12 = 0.0;
    if (fabs(v3) <= fabs(v4))
      v3 = 0.0;
    else
      v4 = 0.0;
    if (v11 != v3 || v12 != v4)
      goto LABEL_19;
  }
  return v13 >= 0.0;
}

BOOL sub_1D3E1D0B8(double *a1, uint64_t a2, int a3, float *a4, double a5, double a6)
{
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  _BOOL8 result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  int v39;
  uint64_t v40;
  BOOL v41;

  v12 = 0;
  v13 = sqrt(a6 * a6 + a5 * a5);
  *(double *)(a2 + 24) = a5 / v13;
  *(double *)(a2 + 32) = a6 / v13;
  v14 = a1[1];
  v15 = a1[2];
  v16 = 3.0;
  do
  {
    v17 = *(float *)(a2 + 40);
    if (v15 * *(float *)(a2 + 44) + v17 * v14 - *(float *)(a2 + 48) < -5.0)
    {
      result = sub_1D3E1DFD0(a2, *(float64x2_t **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
      if (!result)
        return result;
      v17 = *(float *)(a2 + 40);
      v14 = a1[1];
      v15 = a1[2];
      if (v15 * *(float *)(a2 + 44) + v17 * v14 - *(float *)(a2 + 48) < -5.0)
        break;
    }
    v19 = v17;
    v20 = *(float *)(a2 + 44);
    if (v15 * v20 + v19 * v14 - *(float *)(a2 + 48) > v16)
    {
      v22 = a1[3];
      v21 = a1[4];
      v23 = sqrt(v21 * v21 + v22 * v22);
      if (fabs(v21 / v23 * v20 + v22 / v23 * v19) > 0.7)
        return 0;
      v24 = sub_1D3E1DF88((float *)a2, v14, v15);
      v26 = v25;
      v27 = sub_1D3E1DF88((float *)a2, *(double *)(*(_QWORD *)(a2 + 8) - 16), *(double *)(*(_QWORD *)(a2 + 8) - 8));
      while (sqrt((v26 - v28) * (v26 - v28) + (v24 - v27) * (v24 - v27)) < 1.0)
      {
        v24 = v24 + v22;
        v26 = v26 + v21;
      }
      a1[1] = floor(v24) + 0.5;
      a1[2] = floor(v26) + 0.5;
      v16 = 3.0;
      goto LABEL_27;
    }
    v29 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v29)
    {
      v32 = 0.0;
    }
    else
    {
      v30 = a1[3];
      v31 = a1[4];
      if (fabs(v30) <= fabs(v31))
        v30 = 0.0;
      else
        v31 = 0.0;
      v32 = v31 * (v15 - *(double *)(v29 - 8)) + v30 * (v14 - *(double *)(v29 - 16));
    }
    sub_1D3E1E104(a2, v14, v15);
    if (v32 <= 1.0)
    {
      if (!(_DWORD)v12 && 2 * a3 <= (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4))
        return 0;
      goto LABEL_27;
    }
    v33 = (v12 + 1);
    if ((int)v12 <= 0 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < 0x51uLL)
    {
      v12 = (v12 + 1);
LABEL_27:
      v38 = a4[10];
      v33 = v12;
      goto LABEL_28;
    }
    result = sub_1D3E1D47C(a2, 0, 1.5);
    if (!result)
      return result;
    v34 = a1[1];
    v35 = a1[2];
    v36 = sub_1D3E1DF88((float *)a2, v34, v35);
    result = sub_1D3E1CFF4(a1, v34 - v36 + **(double **)a2, v35 - v37 + *(double *)(*(_QWORD *)a2 + 8));
    if (!result)
      return result;
    v38 = a4[10];
LABEL_28:
    if (a3 >= (int)(a1[2] * a4[11] + v38 * a1[1] - a4[12]))
      a3 = (int)(a1[2] * a4[11] + v38 * a1[1] - a4[12]);
    v39 = sub_1D3E1E22C(a1, a3, 1, a5, a6);
    if (v39)
    {
      if (v39 == 1)
        return a3 + 1 >= (int)(a1[2] * a4[11] + a4[10] * a1[1] - a4[12]);
      return 0;
    }
    v40 = *(_QWORD *)(a2 + 8);
    v14 = a1[1];
    v15 = a1[2];
    v41 = v14 == *(double *)(v40 - 16) && v15 == *(double *)(v40 - 8);
    v12 = v33;
  }
  while (!v41);
  return 0;
}

BOOL sub_1D3E1D47C(uint64_t a1, int a2, float a3)
{
  BOOL v6;
  uint64_t v7;
  float64x2_t *v8;
  int64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  double v13;
  double *v14;
  uint64_t v15;
  double *v16;
  char *v17;
  float64x2_t *v18;

  v6 = sub_1D3E1DFD0(a1, *(float64x2_t **)a1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  if (a3 > 0.0)
  {
    v8 = *(float64x2_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v9 = v7 - *(_QWORD *)a1;
    if (v7 == *(_QWORD *)a1)
    {
      v12 = 0;
      v10 = 0;
    }
    else
    {
      if (v9 < 0)
        sub_1D3D6D4F8();
      v10 = (float64x2_t *)sub_1D3D6DB64(v9 >> 4);
      v12 = &v10[v11];
      memmove(v10, v8, v9);
      v9 = (int64_t)&v10[v9 >> 4];
    }
    v13 = a3;
    while (1)
    {
      v14 = (double *)v10;
      v15 = v9 - (_QWORD)v10;
      if ((float64x2_t *)v9 != v10)
      {
        v14 = (double *)v10;
        while (v14[1] * *(float *)(a1 + 44) + *(float *)(a1 + 40) * *v14 - *(float *)(a1 + 48) <= v13)
        {
          v14 += 2;
          if (v14 == (double *)v9)
          {
            v17 = (char *)v9;
            goto LABEL_18;
          }
        }
      }
      v17 = (char *)v9;
      if (v14 != (double *)v9)
      {
        v16 = v14 + 2;
        v17 = (char *)v14;
        while (v16 != (double *)v9)
        {
          if (v16[1] * *(float *)(a1 + 44) + *(float *)(a1 + 40) * *v16 - *(float *)(a1 + 48) <= v13)
          {
            *(_OWORD *)v17 = *(_OWORD *)v16;
            v17 += 16;
          }
          v16 += 2;
        }
      }
LABEL_18:
      if ((char *)v9 == v17)
        break;
      v9 = (int64_t)v17;
      if (v15 >> 4 == (v17 - (char *)v10) >> 4)
        break;
      v6 = sub_1D3E1DFD0(a1, v10, (v17 - (char *)v10) >> 4);
    }
    if (a2)
    {
      v18 = *(float64x2_t **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v18;
        operator delete(v18);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v12;
    }
    else if (v10)
    {
      operator delete(v10);
    }
  }
  return v6;
}

double sub_1D3E1D67C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double *v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double *v47;
  double v48;
  int v49;
  double v50;
  double *v51;
  double v52;
  double v53;
  double v54;

  sub_1D3E1D47C(a1, 1, 1.0);
  v10 = *(double **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v11 - *(_QWORD *)a1;
  if (v11 == *(_QWORD *)a1)
  {
    v15 = 0;
LABEL_30:
    v33 = 1;
    v39 = NAN;
    v17 = v15;
    goto LABEL_31;
  }
  if (v12 < 0)
    sub_1D3D6D4F8();
  v13 = (double *)sub_1D3D6D8A0(v12 >> 4);
  v15 = v13;
  v10 = *(double **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v11 - *(_QWORD *)a1) < 0x11)
    goto LABEL_30;
  v16 = 1;
  v17 = v13;
  v18 = &v13[v14];
  do
  {
    v19 = &v10[2 * v16];
    v20 = sub_1D3E1DF88((float *)a1, *v19, v19[1]);
    v22 = v21;
    v23 = sub_1D3E1DF88((float *)a1, *(v19 - 2), *(v19 - 1));
    v25 = sqrt((v22 - v24) * (v22 - v24) + (v20 - v23) * (v20 - v23));
    if (v15 >= v18)
    {
      v26 = v15 - v17;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        sub_1D3D6D4F8();
      if (((char *)v18 - (char *)v17) >> 2 > v27)
        v27 = ((char *)v18 - (char *)v17) >> 2;
      if ((unint64_t)((char *)v18 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v28 = (unint64_t)sub_1D3D6D8A0(v28);
      else
        v29 = 0;
      v30 = (double *)(v28 + 8 * v26);
      *v30 = v25;
      v31 = v30 + 1;
      while (v15 != v17)
      {
        v32 = *((_QWORD *)v15-- - 1);
        *((_QWORD *)v30-- - 1) = v32;
      }
      v18 = (double *)(v28 + 8 * v29);
      if (v17)
        operator delete(v17);
      v17 = v30;
      v15 = v31;
    }
    else
    {
      *v15++ = v25;
    }
    ++v16;
    v10 = *(double **)a1;
    v11 = *(_QWORD *)(a1 + 8);
  }
  while (v16 < (v11 - *(_QWORD *)a1) >> 4);
  v33 = v17 == v15;
  if (v17 == v15)
  {
    v39 = NAN;
  }
  else
  {
    v34 = 0;
    v35 = 0.0;
    v36 = v17;
    do
    {
      v37 = *v36++;
      v38 = v37;
      v34 += v37 > 0.75 && v37 < 1.5;
      if (v37 <= 0.75 || v37 >= 1.5)
        v38 = -0.0;
      v35 = v35 + v38;
    }
    while (v36 != v15);
    v39 = v35 / (double)v34;
  }
LABEL_31:
  v40 = sub_1D3E1DF88((float *)a1, *v10, v10[1]);
  v42 = sqrt((a3 - v41) * (a3 - v41) + (a2 - v40) * (a2 - v40)) - v39;
  if (v33)
  {
    v43 = v17;
  }
  else
  {
    v43 = v17;
    v44 = v17;
    do
    {
      v42 = v42 + *v44;
      if (*v44 > v39 * 1.9)
      {
        *v43++ = v42;
        v42 = 0.0;
      }
      ++v44;
    }
    while (v44 != v15);
  }
  v45 = sub_1D3E1DF88((float *)a1, *(double *)(v11 - 16), *(double *)(v11 - 8));
  *v43 = v42 + sqrt((a5 - v46) * (a5 - v46) + (a4 - v45) * (a4 - v45));
  v47 = v43 + 1;
  if (v47 != v15)
    v15 = v47;
  v48 = sqrt((a3 - a5) * (a3 - a5) + (a2 - a4) * (a2 - a4)) - v39;
  if (v17 == v15)
  {
    v54 = NAN;
    if (!v17)
      return v48 / v54;
    goto LABEL_46;
  }
  v49 = 0;
  v50 = 0.0;
  v51 = v17;
  do
  {
    v52 = *v51++;
    v53 = v52;
    if (vabdd_f64(v52, v48 / (double)(unint64_t)(v47 - v17)) >= v48
                                                                      / (double)(unint64_t)(v47 - v17)
                                                                      * 0.5)
      v53 = -0.0;
    else
      ++v49;
    v50 = v50 + v53;
  }
  while (v51 != v15);
  v54 = v50 / (double)v49;
  if (v17)
LABEL_46:
    operator delete(v17);
  return v48 / v54;
}

void sub_1D3E1D9DC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_1D3E1D9F8(double a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v7 = a3 - a1;
  v8 = a4 - a2;
  v9 = sqrt(v8 * v8 + v7 * v7);
  v10 = v7 / v9;
  v11 = v8 / v9;
  v12 = a5 - a1;
  v13 = a6 - a2;
  v14 = sqrt(v13 * v13 + v12 * v12);
  return (v10 + v12 / v14) / sqrt((v11 + v13 / v14) * (v11 + v13 / v14) + (v10 + v12 / v14) * (v10 + v12 / v14)) * a7
       + a1;
}

unsigned int **sub_1D3E1DA64(uint64_t *a1, double *a2, int a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  return sub_1D3DB93EC(a1, 0.0, 0.0, (float)a3, 0.0, (float)a3, (float)a4, 0.0, (float)a4, v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1D3E1DAE0(uint64_t *a1, unint64_t *a2, uint64_t a3, int a4, _QWORD *a5, int a6)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  float *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  double v25;
  _QWORD *v26;
  int v27;
  float *v28;
  float v30;
  BOOL v31;
  int64_t v32;
  uint64_t v34;
  void *__p[3];

  v10 = operator new();
  sub_1D3D938C4(v10, (int)a3, a4);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  *a1 = v10;
  v13 = 2 * (int)a3;
  sub_1D3D8D5CC(__p, v13);
  if (a4 >= 1)
  {
    v14 = 0;
    v34 = a4;
    do
    {
      if ((int)a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = (char *)__p[0];
        do
        {
          v18 = (float *)&v17[4 * v16];
          *v18 = (float)v15 + 0.5;
          v18[1] = (float)(int)v14 + 0.5;
          v19 = v16 + 3;
          v16 += 2;
          ++v15;
        }
        while (v19 < v13);
      }
      (*(void (**)(_QWORD, void **))(*(_QWORD *)*a5 + 16))(*a5, __p);
      v20 = a3;
      if ((int)a3 >= 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = (char *)__p[0];
        v24 = (double)a2[1];
        v25 = (double)a2[2];
        v26 = (_QWORD *)a2[3];
        v27 = *(unsigned __int8 *)a2;
        do
        {
          v28 = (float *)&v23[4 * v22];
          if (*v28 >= 0.0 && *v28 < v24)
          {
            v30 = v28[1];
            v31 = v30 >= 0.0 && v30 < v25;
            if (v31 && (v27 != sub_1D3D6D4A0(v26, (int)*v28, (int)v30)) != a6)
              *(_DWORD *)(*(_QWORD *)(v10 + 48)
                        + (((unint64_t)(v21 + v14 * *(_QWORD *)(v10 + 24)) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v21 + v14 * *(_QWORD *)(v10 + 24));
          }
          v32 = v22 + 3;
          v22 += 2;
          ++v21;
        }
        while (v32 < v13);
      }
      ++v14;
      a3 = v20;
    }
    while (v14 != v34);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D3E1DCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  sub_1D3D6D10C(a10);
  _Unwind_Resume(a1);
}

unsigned int **sub_1D3E1DD44(unsigned int ***a1, float64x2_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  uint64_t i;
  unsigned int **result;
  unsigned int *v19[4];
  unsigned int *v20;

  v20 = (unsigned int *)*MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_1E95AF250;
  *(float32x2_t *)(v4 + 12) = vcvt_f32_f64(*a2);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v19[0] = (unsigned int *)v4;
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  v8 = (unsigned int *)(v7 + 8);
  *(_QWORD *)v7 = &off_1E95AF250;
  *(float32x2_t *)(v7 + 12) = vcvt_f32_f64(a2[3]);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v19[1] = (unsigned int *)v7;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_1E95AF250;
  *(float32x2_t *)(v10 + 12) = vcvt_f32_f64(a2[2]);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v19[2] = (unsigned int *)v10;
  v13 = operator new();
  *(_DWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)v13 = &off_1E95AF250;
  *(float32x2_t *)(v13 + 12) = vcvt_f32_f64(a2[1]);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v19[3] = (unsigned int *)v13;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v16 = (unsigned int **)operator new(0x20uLL);
  *a1 = v16;
  a1[1] = v16;
  a1[2] = v16 + 4;
  a1[1] = sub_1D3D8CFF8(v19, &v20, v16);
  for (i = 3; i != -1; --i)
    result = sub_1D3D6D834(&v19[i]);
  return result;
}

void sub_1D3E1DF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 8) = v13;
  sub_1D3D6D79C(&a10);
  for (i = 24; i != -8; i -= 8)
    sub_1D3D6D834((unsigned int **)(&a12 + i));
  _Unwind_Resume(a1);
}

double sub_1D3E1DF88(float *a1, double a2, double a3)
{
  return a2 - (a3 * a1[11] + a1[10] * a2 - a1[12]) * a1[10];
}

BOOL sub_1D3E1DFD0(uint64_t a1, float64x2_t *a2, unint64_t a3)
{
  uint64_t v3;
  float64x2_t v4;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float32x2_t v9;
  float v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  double v20;
  float v21;

  if (a3)
  {
    v3 = 16 * a3;
    v4 = 0uLL;
    v5 = 16 * a3;
    v6 = a2;
    do
    {
      v7 = *v6++;
      v4 = vaddq_f64(v4, v7);
      v5 -= 16;
    }
    while (v5);
    v8 = vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0));
    v9 = 0;
    v10 = 0.0;
    do
    {
      v11 = vcvtq_f64_f32(v9);
      v12 = *a2++;
      v13 = vsubq_f64(v12, v8);
      v10 = vmlad_n_f64(v10, v13.f64[0], v13.f64[0]);
      v9 = vcvt_f32_f64(vmlaq_laneq_f64(v11, v13, v13, 1));
      v3 -= 16;
    }
    while (v3);
    v14 = v8.f64[1];
    v15 = v9.f32[1];
    if (v9.f32[1] < v10)
    {
      v16 = sqrtf(vmul_f32(v9, v9).f32[0] + (float)(v10 * v10));
      v17 = v9.f32[0] / v16;
      goto LABEL_10;
    }
  }
  else
  {
    v15 = 0.0;
    v8.f64[0] = NAN;
    v9.i32[0] = 0;
    v14 = NAN;
  }
  v16 = sqrtf((float)(v9.f32[0] * v9.f32[0]) + (float)(v15 * v15));
  v17 = v15 / v16;
  v10 = v9.f32[0];
LABEL_10:
  v18 = (float)-v10 / v16;
  *(float *)(a1 + 40) = v17;
  *(float *)(a1 + 44) = v18;
  v19 = *(double *)(a1 + 24);
  v20 = *(double *)(a1 + 32);
  if (v18 * v20 + v19 * v17 < 0.0)
  {
    v17 = -v17;
    v18 = -v18;
    *(float *)(a1 + 40) = v17;
    *(float *)(a1 + 44) = v18;
  }
  v21 = v14 * v18 + v17 * v8.f64[0];
  *(float *)(a1 + 48) = v21;
  return v20 * v18 + v19 * v17 > 0.5;
}

void sub_1D3E1E104(uint64_t a1, double a2, double a3)
{
  unint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;
  float v18;

  v7 = *(double **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(double **)a1;
    v10 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_1D3D6D4F8();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      v14 = (unint64_t)sub_1D3D6DB64(v14);
      v9 = *(double **)a1;
      v7 = *(double **)(a1 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)(v14 + 16 * v10);
    v17 = v14 + 16 * v15;
    *v16 = a2;
    v16[1] = a3;
    v8 = v16 + 2;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 2;
        v7 -= 2;
      }
      while (v7 != v9);
      v9 = *(double **)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v8;
  if ((double *)((char *)v8 - *(_QWORD *)a1) == (double *)16)
  {
    v18 = a3 * *(float *)(a1 + 44) + *(float *)(a1 + 40) * a2;
    *(float *)(a1 + 48) = v18;
  }
}

uint64_t sub_1D3E1E22C(double *a1, int a2, char a3, double a4, double a5)
{
  BOOL v8;
  double v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  unsigned int v18;
  double v19;
  double v20;
  unsigned int v21;
  int v22;
  double v23;
  double v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t result;
  int v28;
  unint64_t *v29;
  double v30;
  double v31;
  _BOOL4 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;

  v8 = fabs(a4) <= fabs(a5);
  if (v8)
    v9 = a5;
  else
    v9 = 0.0;
  if (v8)
    v10 = 0.0;
  else
    v10 = a4;
  if (a2 == 1)
    v11 = 2;
  else
    v11 = 3;
  v12 = 1;
  while (a2 < 1)
  {
LABEL_22:
    result = 1;
    if ((a3 & 1) == 0)
    {
      v8 = v11 > v12++;
      if (v8)
        continue;
    }
    return result;
  }
  v13 = a1[3];
  v14 = a1[4];
  v15 = 1;
  v16 = a1[1];
  v17 = a1[2];
  v40 = v17;
  v41 = v16;
LABEL_13:
  v18 = 0;
  v19 = v13 * (double)v15 + v16;
  v20 = v14 * (double)v15 + v17;
  do
  {
    if (((v12 * (((v15 >> 1) & 0x7FFFFFFE) + 2)) | 1) == v18)
    {
      v26 = v15++ == a2;
      v17 = v40;
      v16 = v41;
      if (v26)
        goto LABEL_22;
      goto LABEL_13;
    }
    v21 = v18 + 1;
    if ((v18 & 1) != 0)
      v22 = v21 >> 1;
    else
      v22 = -(v18 >> 1);
    v23 = v10 * (double)v22 + v19;
    v24 = v9 * (double)v22 + v20;
    v25 = sub_1D3E1E4A8(a1, v10 + v23, v9 + v24);
    v18 = v21;
  }
  while (!v25);
  if (a2 <= 3)
    v28 = 3;
  else
    v28 = a2;
  v29 = *(unint64_t **)a1;
  while (1)
  {
    if (v23 < 0.0)
      return 2;
    result = 2;
    if (v23 >= (double)v29[1] || v24 < 0.0 || v24 >= (double)v29[2])
      return result;
    if (*((_DWORD *)a1 + 11) == (*(unsigned __int8 *)v29 != sub_1D3D6D4A0((_QWORD *)v29[3], (int)v23, (int)v24)))break;
    v30 = v23 - v10;
    v31 = v24 - v9;
    v32 = sub_1D3E1E4A8(a1, v30 - v13, v31 - v14);
    if (v32)
      v33 = v13;
    else
      v33 = 0.0;
    v23 = v30 - v33;
    if (v32)
      v34 = v14;
    else
      v34 = 0.0;
    v24 = v31 - v34;
    if (!--v28)
      return 2;
  }
  result = 0;
  v35 = floor(v23) + 0.5;
  v36 = floor(v24) + 0.5;
  a1[1] = v35;
  a1[2] = v36;
  if (a2 == 1)
  {
    v37 = (unint64_t *)*((_QWORD *)a1 + 6);
    if (v37)
    {
      v38 = (int)v35;
      v39 = (int)v36;
      if ((sub_1D3D6D4A0(v37, v38, v39) & 1) != 0)
        return 2;
      result = 0;
      *(_DWORD *)(v37[6] + (((v38 + v37[3] * v39) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v38
                                                                                        + *((_BYTE *)v37 + 24) * v39);
    }
  }
  return result;
}

BOOL sub_1D3E1E4A8(_DWORD *a1, double a2, double a3)
{
  int v4;
  unsigned __int8 *v5;

  if (a2 >= 0.0)
  {
    v5 = *(unsigned __int8 **)a1;
    v4 = -1;
    if (a2 < (double)*(unint64_t *)(*(_QWORD *)a1 + 8)
      && a3 >= 0.0
      && a3 < (double)*((unint64_t *)v5 + 2))
    {
      v4 = *v5 != sub_1D3D6D4A0(*((_QWORD **)v5 + 3), (int)a2, (int)a3);
    }
  }
  else
  {
    v4 = -1;
  }
  return v4 == a1[10];
}

uint64_t sub_1D3E1E534(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  float *v31;
  uint64_t v32;

  v31 = a1;
  v32 = a2;
  *(_QWORD *)&v30 = a3;
  *((_QWORD *)&v30 + 1) = a4;
  sub_1D3E4E5F4(&v31, &v30, a6, a7);
  v8 = (int)v31;
  if ((int)v31 >= (int)v30)
    v8 = v30;
  if (v8 < 11)
    return 16;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v24 = 0;
  v10 = v32;
  v11 = *((_QWORD *)&v30 + 1);
  v12 = sub_1D3E1E6C0((uint64_t)v31, v32, v30, *((uint64_t *)&v30 + 1), *(unsigned __int8 *)(*(_QWORD *)(a5 + 64) + 30), &v28, &v27, &v26, (_DWORD *)&v25 + 1, (int *)&v25, &v24, (float *)&v29, (float *)(a5 + 24));
  if (!v12)
    return 6;
  v13 = *(_QWORD *)(a5 + 64);
  if (!*(_BYTE *)(v13 + 30) && *(float *)(a5 + 24) < 0.75)
    return 6;
  v14 = v29;
  *(_DWORD *)(a5 + 72) = v29;
  *(_DWORD *)(a5 + 76) = v14;
  switch(v12)
  {
    case 3:
      v18 = HIDWORD(v25);
      *(_DWORD *)(v13 + 48) = *(_DWORD *)(v10 + 4 * SHIDWORD(v25));
      v19 = v24;
      *(_DWORD *)(v13 + 52) = *(_DWORD *)(v11 + 4 * (v24 + 2));
      v20 = v19 - v18 + 3;
LABEL_19:
      *(_DWORD *)(v13 + 20) = v20;
      return 1;
    case 2:
      v21 = v24;
      if (v24 <= 9)
        v22 = 9;
      else
        v22 = v24;
      *(_DWORD *)(v13 + 48) = *(_DWORD *)(v10 + 4 * (v22 - 9));
      v23 = v25;
      *(_DWORD *)(v13 + 52) = *(_DWORD *)(v11 + 4 * (int)v25);
      v17 = v23 - v21;
      goto LABEL_18;
    case 1:
      v16 = (int)v25;
      v15 = HIDWORD(v25);
      *(_DWORD *)(v13 + 48) = *(_DWORD *)(v10 + 4 * SHIDWORD(v25));
      *(_DWORD *)(v13 + 52) = *(_DWORD *)(v11 + 4 * v16);
      v17 = v16 - v15;
LABEL_18:
      v20 = v17 + 1;
      goto LABEL_19;
  }
  return 1;
}

uint64_t sub_1D3E1E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int *a10, _DWORD *a11, float *a12, float *a13)
{
  uint64_t result;
  float *v15;
  _DWORD *v16;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int *v26;
  int v27;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  float *v37;
  float v38;
  uint64_t v40;
  char v41;
  float *v42;
  float v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  uint64_t v48;
  unsigned int v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  BOOL v54;
  float *v55;
  float v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  float *v60;
  float v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  char v71;
  _QWORD v74[2];
  _QWORD v75[2];
  float v76;
  int v77;
  int v78;
  int v79;
  int v80;
  float v81[6];
  uint64_t v82;

  result = 0;
  v82 = *MEMORY[0x1E0C80C00];
  *a8 = -1;
  *a7 = -1;
  *a6 = -1;
  *a11 = -1;
  *a10 = -1;
  *a9 = -1;
  v15 = a13;
  v75[0] = a1;
  v75[1] = a2;
  v74[0] = a3;
  v74[1] = a4;
  *a12 = 0.0;
  *a13 = 0.0;
  if ((int)a1 >= 11)
  {
    v16 = a8;
    if ((int)a1 >= (int)a3)
      LODWORD(v19) = a3;
    else
      LODWORD(v19) = a1;
    v20 = __OFSUB__((_DWORD)v19, 10);
    if ((int)v19 > 10)
    {
      v30 = 0;
      v71 = (v19 > 0xC) & a5;
      if (v71)
        v31 = 5;
      else
        v31 = (v19 - 7);
      while (1)
      {
        v32 = (float *)(a2 + 4 * v30);
        v33 = v32[3];
        v34 = v33 - *v32;
        v35 = v32[7] - v33;
        v36 = v34 < 7.0 || v35 < 12.0;
        if (!v36 && fabsf((float)(v35 / v34) + -1.7) < 0.2)
        {
          v22 = (float)(v34 + v35) / 27.0;
          v37 = (float *)(a4 + 4 * v30);
          v38 = *v37 - *v32;
          if ((float)(v22 * 1.5) < v38 && v38 < (float)(v22 * 4.5))
          {
            v40 = 0;
            v41 = 1;
            do
            {
              if ((v41 & 1) != 0)
                v42 = v32;
              else
                v42 = v37;
              if ((v41 & 1) != 0)
                ++v32;
              else
                ++v37;
              v81[v40] = v42[1] - *v42;
              v41 ^= 1u;
              ++v40;
            }
            while (v40 != 5);
            v43 = sub_1D3E1ECAC(v81, 5, &v76, v34);
            if (v43 < 0.25)
            {
              v44 = 0;
              while (dword_1D3E6F8A8[v44] != 10000 * LODWORD(v76) + 1000 * v77 + 100 * v78 + 10 * v79 + v80)
              {
                if (++v44 == 52)
                  goto LABEL_34;
              }
              if ((v44 & 0x80000000) == 0)
                break;
            }
          }
        }
LABEL_34:
        if (++v30 == v31)
        {
          LODWORD(v44) = -1;
          v70 = 0.0;
          v22 = 0.0;
          goto LABEL_36;
        }
      }
      *a9 = v30;
      v70 = 1.0 - v43;
LABEL_36:
      *a6 = v44;
      if ((v71 & 1) != 0)
        v45 = v19 - 5;
      else
        v45 = 7;
      v46 = 27.0;
      v47 = 0.5;
      while (1)
      {
        v48 = (v19 - 4);
        v49 = v19 - 8;
        v19 = (v19 - 1);
        v50 = *(float *)(a2 + 4 * v19);
        v51 = (float *)(a2 + 4 * v48);
        v52 = v50 - *v51;
        v53 = *v51 - *(float *)(a2 + 4 * v49);
        v54 = v52 < 7.0 || v53 < 12.0;
        if (!v54 && fabsf((float)(v53 / v52) + -1.7) < 0.2)
        {
          v25 = (float)(v52 + v53) / v46;
          v55 = (float *)(a4 + 4 * v48);
          v56 = *v55 - *v51;
          v57 = (float)(v25 * 1.5) < v56 && v56 < (float)(v25 * 4.5);
          if (v57 && vabds_f32(*(float *)(a4 + 4 * v19) - v50, v25) < (float)(v25 * v47))
          {
            v58 = 0;
            v59 = 1;
            do
            {
              if ((v59 & 1) != 0)
                v60 = v51;
              else
                v60 = v55;
              if ((v59 & 1) != 0)
                ++v51;
              else
                ++v55;
              v81[v58] = v60[1] - *v60;
              v59 ^= 1u;
              ++v58;
            }
            while (v58 != 5);
            v61 = sub_1D3E1ECAC(v81, 5, &v76, v52);
            v46 = 27.0;
            v47 = 0.5;
            if (v61 < 0.25)
            {
              v21 = 0;
              v62 = 10000 * LODWORD(v76) + 1000 * v77 + 100 * v78 + 10 * v79 + v80;
              while (1)
              {
                v63 = dword_1D3E6F8A8[v21];
                v20 = __OFSUB__(v63, v62);
                if (v63 == v62)
                  break;
                if (++v21 == 52)
                  goto LABEL_65;
              }
              if ((v21 & 0x80000000) == 0)
                break;
            }
          }
        }
LABEL_65:
        v20 = __OFSUB__((_DWORD)v19, v45);
        if ((int)v19 <= v45)
        {
          LODWORD(v21) = -1;
          v24 = 0.0;
          v25 = 0.0;
          v26 = a10;
          goto LABEL_67;
        }
      }
      v26 = a10;
      *a10 = v19;
      v24 = 1.0 - v61;
LABEL_67:
      v15 = a13;
      v16 = a8;
      v27 = a5;
      v23 = v70;
    }
    else
    {
      LODWORD(v21) = -1;
      *a6 = -1;
      v22 = 0.0;
      v23 = 0.0;
      v24 = 0.0;
      v25 = 0.0;
      v26 = a10;
      v27 = a5;
    }
    *a7 = v21;
    if ((int)(*a6 & v21) < 0 != v20)
      return 0;
    if ((*a6 & 0x80000000) != 0)
    {
      if ((v21 & 0x80000000) == 0)
      {
        v64 = *v26;
LABEL_76:
        v65 = v64 - 14;
        goto LABEL_78;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      v64 = *v26;
      if (*a9 + 10 <= *v26 && (float)(vabds_f32(v22, v25) / (float)(v22 + v25)) < 0.2)
      {
        *a12 = (float)(v22 + v25) * 0.5;
        *v15 = v23 * v24;
        return 1;
      }
      goto LABEL_76;
    }
    v65 = *a9 + 9;
LABEL_78:
    *a11 = 0;
    v81[0] = 0.0;
    v76 = 0.0;
    v66 = sub_1D3E1ED30((uint64_t)v75, (uint64_t)v74, v65, v27, 0xFFFFFFFF, 0xFFFFFFFF, a11, &v76, v81);
    *v16 = v66;
    if ((v66 & 0x80000000) == 0)
    {
      if ((*a7 & 0x80000000) == 0 && *a11 + 14 <= *v26)
      {
        v67 = v25 + v76;
        if ((float)(vabds_f32(v76, v25) / (float)(v25 + v76)) < 0.2)
        {
          *a6 = -1;
          *a12 = v67 * 0.5;
          v68 = v24 * v81[0];
          result = 2;
LABEL_87:
          *v15 = v68;
          return result;
        }
      }
      if ((*a6 & 0x80000000) == 0 && *a9 + 7 <= *a11)
      {
        v69 = v22 + v76;
        if ((float)(vabds_f32(v76, v22) / (float)(v22 + v76)) < 0.2)
        {
          *a7 = -1;
          *a12 = v69 * 0.5;
          v68 = v23 * v81[0];
          result = 3;
          goto LABEL_87;
        }
      }
    }
    return 0;
  }
  return result;
}

float sub_1D3E1ECAC(float *a1, int a2, _DWORD *a3, float a4)
{
  float v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;

  v4 = -1.0;
  if (a4 > 0.0)
  {
    if (a2 == 5)
      v5 = 10;
    else
      v5 = 17;
    v4 = (float)v5 / a4;
  }
  v6 = a2;
  v7 = 0.0;
  do
  {
    v8 = v4 * *a1;
    if (v8 < 1.5 || v8 > 9.5)
      return 1.0;
    *a3++ = llroundf(v8);
    v7 = v7 + vabds_f32(v8, (float)(int)roundf(v8));
    ++a1;
    --v6;
  }
  while (v6);
  return v7 / (float)a2;
}

uint64_t sub_1D3E1ED30(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, _DWORD *a7, float *a8, float *a9)
{
  int v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  BOOL v28;
  float v29;
  float *v30;
  float v31;
  _DWORD *v33;
  float *v34;
  uint64_t v35;
  char v36;
  float *v37;
  float v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  float *v52;
  unsigned int v53;
  _DWORD v54[5];
  float v55[5];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 >= *(_DWORD *)a2)
    v9 = *(_DWORD *)a2;
  else
    v9 = *(_DWORD *)a1;
  if (v9 < 11)
    return 0xFFFFFFFFLL;
  v13 = 0;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = a6 + 52;
  v17 = a6 | a5;
  v18 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    v19 = (dword_1D3E6F978[v13] + a3);
    v20 = v19 + 7;
    if ((int)v19 < 4 || v20 >= v9)
      goto LABEL_12;
    v22 = (float *)(v15 + 4 * v19);
    v23 = *v22 - *(float *)(v15 + 4 * (v19 - 4));
    v24 = *(float *)(v15 + 4 * (v19 + 3));
    v25 = v24 - *v22;
    v26 = *(float *)(v15 + 4 * v20) - v24;
    v27 = v23 < 12.0 || v25 < 7.0;
    v28 = v27 || v26 < 7.0;
    if (v28 || fabsf((float)(v23 / v25) + -1.7) >= 0.2 || fabsf((float)(v26 / v25) + -1.7) >= 0.2)
      goto LABEL_12;
    v29 = (float)((float)(v23 + v25) + v26) / 44.0;
    v30 = (float *)(v18 + 4 * v19);
    v31 = *v30 - *v22;
    if ((float)(v29 * 0.5) >= v31 || v31 >= (float)(v29 * 1.5))
      goto LABEL_12;
    v48 = v18;
    v49 = v17;
    v50 = v16;
    v51 = a4;
    v52 = a9;
    v53 = a5;
    v33 = a7;
    v34 = a8;
    v35 = 0;
    v36 = 1;
    do
    {
      if ((v36 & 1) != 0)
        v37 = v22;
      else
        v37 = v30;
      if ((v36 & 1) != 0)
        ++v22;
      else
        ++v30;
      v55[v35] = v37[1] - *v37;
      v36 ^= 1u;
      ++v35;
    }
    while (v35 != 5);
    v38 = sub_1D3E1ECAC(v55, 5, v54, v25);
    a8 = v34;
    a7 = v33;
    a5 = v53;
    a9 = v52;
    v16 = v50;
    a4 = v51;
    v17 = v49;
    v18 = v48;
    if (v38 >= 0.25)
      goto LABEL_12;
    result = 0;
    while (dword_1D3E6F7D8[result] != 10000 * v54[0] + 1000 * v54[1] + 100 * v54[2] + 10 * v54[3] + v54[4])
    {
      if (++result == 52)
        goto LABEL_12;
    }
    if ((result & 0x80000000) != 0)
      goto LABEL_12;
    if (!v51)
      goto LABEL_77;
    if ((v53 & 0x80000000) != 0)
      break;
    v39 = result + 52;
    if (result >= v53)
      v39 = result;
    v40 = v39 - v53;
    if (v40 <= 0)
      v41 = -(-v40 & 7);
    else
      v41 = v40 & 7;
    if (((1 << v41) & 0x83) != 0)
      v42 = 0;
    else
      v42 = 4;
    if (v41 > 7)
    {
      v42 = 4;
      goto LABEL_70;
    }
    if (((1 << v41) & 0x83) != 0)
      goto LABEL_57;
LABEL_70:
    if (v42 != 4)
      goto LABEL_77;
LABEL_12:
    if (++v13 == 5)
      return 0xFFFFFFFFLL;
  }
  v40 = 0;
LABEL_57:
  if ((a6 & 0x80000000) == 0)
  {
    if (result <= a6)
      v43 = a6;
    else
      v43 = v50;
    v44 = v43 - result;
    v45 = (v43 - result) & 7;
    if (v44 <= 0)
      v46 = -(-v44 & 7);
    else
      v46 = v45;
    if (((1 << v46) & 0x83) != 0)
      v42 = 0;
    else
      v42 = 4;
    if (v46 <= 7)
    {
      if (((1 << v46) & 0x83) != 0)
        goto LABEL_73;
    }
    else
    {
      v42 = 4;
    }
    goto LABEL_70;
  }
  v44 = 0;
LABEL_73:
  if ((v49 & 0x80000000) == 0)
  {
    v47 = v40 - v44;
    if (v47 < 0)
      v47 = -v47;
    if (v47 > 2)
      goto LABEL_12;
  }
LABEL_77:
  *v33 = v19;
  if (v34)
    *v34 = v29;
  if (v52)
    *v52 = 1.0 - v38;
  return result;
}

uint64_t sub_1D3E1F0BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  char *v16;
  int v17;
  float v18;
  __float2 v19;
  signed int v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int v31;
  float v32;
  float v33;
  __float2 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  char v45;
  unsigned int v46;
  int v47;
  float v48;
  BOOL v49;
  char *v50;
  signed int v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  int v58;
  _DWORD *v59;
  unsigned int v61;
  int v62;
  BOOL v63;
  char *v64;
  signed int v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float *v71;
  int v72;
  _DWORD *v73;
  uint64_t v75;
  unsigned int v76;
  int v77;
  signed int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  signed int v85;
  BOOL v86;
  int v87;
  int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  float32x4_t v94;
  float v95;
  int32x2_t v96;
  float32x4_t v97;
  int8x16_t v98;
  float v99;
  uint64_t v100;
  int v101;
  int v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  int32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  signed int v126;
  signed int v127;
  int32x2_t v128;
  int32x2_t v129;
  int v130;
  int v131;
  int v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  int v139;
  float v140;
  char *v141;
  uint64_t v142;
  float32x2_t v143;
  float v144;
  uint64_t v145;
  float v146;
  __int32 v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unsigned int v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int32x4_t v160;
  float32x4_t v161;
  int v162;
  float32x2_t v163;
  int v164;
  float v165;
  int v166;
  float32x4_t v167;
  float v168;
  float v169;
  float v170;
  float32x2_t v171;
  signed int v172;
  _OWORD v173[5];
  char *v174;
  _OWORD v175[2];
  __int128 v176;
  float v177[7];
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  float v193;
  float v194;
  float v195;
  float v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  char *v202;
  signed int v203;
  _DWORD v204[21];
  _DWORD v205[21];
  _DWORD v206[21];
  _DWORD v207[42];
  _DWORD v208[42];
  int v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  pthread_once(&stru_1EFE316C0, (void (*)(void))sub_1D3E1FF70);
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v190 = xmmword_1D3E6FA10;
  v191 = unk_1D3E6FA20;
  v192 = xmmword_1D3E6FA30;
  v186 = xmmword_1D3E6F9D0;
  v187 = unk_1D3E6F9E0;
  v188 = xmmword_1D3E6F9F0;
  v189 = unk_1D3E6FA00;
  v182 = xmmword_1D3E6F990;
  v183 = unk_1D3E6F9A0;
  v184 = xmmword_1D3E6F9B0;
  v185 = unk_1D3E6F9C0;
  *((float *)&v192 + 3) = (float)(*(float *)(a2 + 72) + *(float *)(a2 + 76)) * 0.5;
  v9 = *(float *)(a3 + 40);
  if (v9 < 0.0)
    v9 = v9 + 6.2832;
  v10 = flt_1D3E81DF0[v9 > 3.1416];
  if (!*(_BYTE *)(v8 + 28))
    v10 = -0.0;
  v11 = v9 + v10;
  *(_BYTE *)(v8 + 28) = 0;
  v180 = 0;
  v181 = 0;
  v178 = 0;
  v179 = 0;
  v12 = (float)*(int *)(a3 + 32);
  v13 = (float)*(int *)(a3 + 36);
  v14 = *(float *)(a3 + 44);
  v203 = -1;
  v169 = v14;
  v15 = v14 * 0.5;
  while (1)
  {
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    v16 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
    v202 = v16;
    *((_QWORD *)v16 + 8) = 0;
    *((_DWORD *)v16 + 18) = 0;
    *((_QWORD *)v16 + 10) = 0;
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    *((_OWORD *)v16 + 2) = 0u;
    v17 = dword_1D3E6FA40[v7];
    *(_OWORD *)(v16 + 44) = 0u;
    v18 = v11 + (float)((float)((float)v17 * 3.1416) / 180.0);
    v19 = __sincosf_stret(v18);
    sub_1D3E1FF94((uint64_t)a4, 0, v8, (uint64_t)&v197, (uint64_t)&v182, &v203, v12 - (float)(v15 * v19.__cosval), v13 - (float)(v15 * v19.__sinval), (float)(v15 * v19.__cosval) + v12, (float)(v15 * v19.__sinval) + v13);
    v20 = v203;
    if ((v203 & 0x80000000) == 0 && *(float *)(v8 + 48) >= 0.0)
    {
      v21 = *(float *)(v8 + 52);
      if (v21 >= 0.0)
        break;
    }
    sub_1D3E36F54((uint64_t)&v197);
LABEL_10:
    if (++v7 == 11)
    {
      v29 = 20;
      goto LABEL_18;
    }
  }
  v209 = *(_DWORD *)(v8 + 48);
  v210 = v21;
  v22 = sub_1D3E511F8(*a4, a4[1], (float *)&v198 + 3, 2u, (float *)&v209, &v213, &v211);
  sub_1D3E36F54((uint64_t)&v197);
  if (!v22)
    goto LABEL_10;
  v23 = *(float *)(v8 + 32);
  if (v23 <= 0.0)
  {
    v24 = v213;
    v25 = v211;
    v26 = v169;
  }
  else
  {
    v24 = v213;
    v25 = v211;
    v26 = v169;
    if (*(float *)(v8 + 36) > 0.0)
    {
      v12 = (float)(v213 + v214) * 0.5;
      v13 = (float)(v211 + v212) * 0.5;
      v27 = sqrtf((float)((float)(v211 - v212) * (float)(v211 - v212))+ (float)((float)(v213 - v214) * (float)(v213 - v214)));
      v28 = v27 + v27;
      if (v28 <= v169)
        v26 = v28;
    }
  }
  v204[0] = v20;
  *(float *)v208 = v24;
  *(float *)&v208[1] = v25;
  *(float *)v207 = v214;
  *(float *)&v207[1] = v212;
  if (v23 >= 0.0)
  {
    if (*(float *)(v8 + 36) >= 0.0)
    {
      v31 = 0;
      v166 = 0;
    }
    else
    {
      v166 = 0;
      v205[0] = 0;
      v31 = 1;
    }
  }
  else
  {
    v31 = 0;
    v206[0] = 0;
    v166 = 1;
  }
  v164 = v31;
  v32 = *((float *)&v192 + 3) + *((float *)&v192 + 3);
  v33 = v18 + -1.57079633;
  v34 = __sincosf_stret(v33);
  v35 = v34.__cosval * v32;
  v170 = v34.__sinval * v32;
  v36 = v19.__cosval * (float)(v26 * 0.5);
  v37 = v19.__sinval * (float)(v26 * 0.5);
  v38 = (float)(v34.__cosval * v32) + v12;
  if (v38 >= 1.0)
  {
    v46 = 0;
    v47 = 0;
    v39 = 1;
    v48 = v13;
    while (1)
    {
      v48 = v170 + v48;
      v49 = v38 > (float)(*a4 - 2) || v48 < 1.0;
      if (v49 || v48 > (float)(a4[1] - 2))
        goto LABEL_31;
      v200 = 0u;
      v201 = 0u;
      v198 = 0u;
      v199 = 0u;
      v197 = 0u;
      v50 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
      v202 = v50;
      *((_QWORD *)v50 + 8) = 0;
      *((_DWORD *)v50 + 18) = 0;
      *((_QWORD *)v50 + 10) = 0;
      *(_OWORD *)v50 = 0u;
      *((_OWORD *)v50 + 1) = 0u;
      *((_OWORD *)v50 + 2) = 0u;
      *(_OWORD *)(v50 + 44) = 0u;
      sub_1D3E1FF94((uint64_t)a4, 0, v8, (uint64_t)&v197, (uint64_t)&v182, &v203, v38 - v36, v48 - v37, v36 + v38, v37 + v48);
      v51 = v203;
      if ((v203 & 0x80000000) == 0)
        break;
      sub_1D3E36F54((uint64_t)&v197);
      if (v47 > 3)
        goto LABEL_31;
      ++v47;
LABEL_58:
      if (BYTE8(v192))
      {
        if ((float)((float)(int)v183 * 0.2) < (float)(v39 - 1) || v46 >= 9)
          goto LABEL_31;
      }
      else if (v46 > 8)
      {
        goto LABEL_31;
      }
      ++v46;
      v38 = v35 + v38;
      if (v38 < 1.0)
        goto LABEL_31;
    }
    if (*(float *)(v8 + 48) < 0.0
      || (v52 = *(float *)(v8 + 52), v52 < 0.0)
      || (v209 = *(_DWORD *)(v8 + 48),
          v210 = v52,
          !sub_1D3E511F8(*a4, a4[1], (float *)&v198 + 3, 2u, (float *)&v209, &v213, &v211)))
    {
LABEL_57:
      sub_1D3E36F54((uint64_t)&v197);
      v47 = 0;
      goto LABEL_58;
    }
    v204[v39] = v51;
    v53 = (float *)&v208[2 * v39];
    v54 = v214;
    v55 = v211;
    v56 = v212;
    *v53 = v213;
    v53[1] = v55;
    v57 = (float *)&v207[2 * v39];
    *v57 = v54;
    v57[1] = v56;
    if (*(float *)(v8 + 32) >= 0.0)
    {
      if (*(float *)(v8 + 36) >= 0.0)
      {
LABEL_56:
        ++v39;
        goto LABEL_57;
      }
      v58 = v164;
      v59 = v205;
      ++v164;
    }
    else
    {
      v58 = v166;
      v59 = v206;
      ++v166;
    }
    v59[v58] = v39;
    goto LABEL_56;
  }
  v39 = 1;
LABEL_31:
  v40 = v12 - v35;
  if (v40 >= 1.0)
  {
    v61 = 0;
    v62 = 0;
    v41 = v39;
    while (1)
    {
      v13 = v13 - v170;
      v63 = v40 > (float)(*a4 - 2) || v13 < 1.0;
      if (v63 || v13 > (float)(a4[1] - 2))
        goto LABEL_33;
      v200 = 0u;
      v201 = 0u;
      v198 = 0u;
      v199 = 0u;
      v197 = 0u;
      v64 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
      v202 = v64;
      *((_QWORD *)v64 + 8) = 0;
      *((_DWORD *)v64 + 18) = 0;
      *((_QWORD *)v64 + 10) = 0;
      *(_OWORD *)v64 = 0u;
      *((_OWORD *)v64 + 1) = 0u;
      *((_OWORD *)v64 + 2) = 0u;
      *(_OWORD *)(v64 + 44) = 0u;
      sub_1D3E1FF94((uint64_t)a4, 0, v8, (uint64_t)&v197, (uint64_t)&v182, &v203, v40 - v36, v13 - v37, v36 + v40, v37 + v13);
      v65 = v203;
      if ((v203 & 0x80000000) == 0)
        break;
      sub_1D3E36F54((uint64_t)&v197);
      if (v62 > 3)
        goto LABEL_33;
      ++v62;
LABEL_87:
      if (BYTE8(v192))
      {
        if ((float)((float)(int)v183 * 0.2) < (float)(v41 - v39) || v61 >= 9)
          goto LABEL_33;
      }
      else if (v61 > 8)
      {
        goto LABEL_33;
      }
      ++v61;
      v40 = v40 - v35;
      if (v40 < 1.0)
        goto LABEL_33;
    }
    if (*(float *)(v8 + 48) < 0.0
      || (v66 = *(float *)(v8 + 52), v66 < 0.0)
      || (v209 = *(_DWORD *)(v8 + 48),
          v210 = v66,
          !sub_1D3E511F8(*a4, a4[1], (float *)&v198 + 3, 2u, (float *)&v209, &v213, &v211)))
    {
LABEL_86:
      sub_1D3E36F54((uint64_t)&v197);
      v62 = 0;
      goto LABEL_87;
    }
    v204[v41] = v65;
    v67 = (float *)&v208[2 * v41];
    v68 = v214;
    v69 = v211;
    v70 = v212;
    *v67 = v213;
    v67[1] = v69;
    v71 = (float *)&v207[2 * v41];
    *v71 = v68;
    v71[1] = v70;
    if (*(float *)(v8 + 32) >= 0.0)
    {
      if (*(float *)(v8 + 36) >= 0.0)
      {
LABEL_85:
        ++v41;
        goto LABEL_86;
      }
      v72 = v164;
      v73 = v205;
      ++v164;
    }
    else
    {
      v72 = v166;
      v73 = v206;
      ++v166;
    }
    v73[v72] = v41;
    goto LABEL_85;
  }
  v41 = v39;
LABEL_33:
  if (BYTE8(v192))
    v42 = v41 < 2;
  else
    v42 = 1;
  v43 = v164;
  if (v42)
    goto LABEL_157;
  v44 = v166;
  if (v166 == v41)
    goto LABEL_38;
  if (v164 == v41)
  {
    v45 = 1;
    goto LABEL_99;
  }
  if (v166 + v164 < 1)
  {
    v45 = 0;
    v43 = v41;
    goto LABEL_100;
  }
  if (v41 - (v166 + v164) < 2)
    goto LABEL_157;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v44 = 0;
  do
  {
    if (v102 < v166 && v100 == v206[v102])
    {
      ++v102;
    }
    else if (v101 < v164 && v100 == v205[v101])
    {
      ++v101;
    }
    else
    {
      *(_QWORD *)&v208[2 * v44] = *(_QWORD *)&v208[2 * v100];
      *(_QWORD *)&v207[2 * v44] = *(_QWORD *)&v207[2 * v100];
      v204[v44++] = v204[v100];
    }
    ++v100;
  }
  while (v41 != v100);
LABEL_38:
  v45 = 0;
  v43 = v44;
LABEL_99:
  if (v43 < 1)
  {
LABEL_157:
    v29 = 21;
  }
  else
  {
LABEL_100:
    v75 = 0;
    v76 = -1;
    v77 = 0x7FFFFFFF;
    v78 = 0x80000000;
    v79 = -1;
    v80 = v43;
    do
    {
      v81 = v204[v75];
      if (v81 <= v77)
        v82 = v75;
      else
        v82 = v79;
      if (v81 >= v77)
        v83 = v77;
      else
        v83 = v204[v75];
      if (v81 >= v78)
        v84 = v75;
      else
        v84 = v76;
      if (v81 <= v78)
        v85 = v78;
      else
        v85 = v204[v75];
      v86 = SDWORD2(v182) <= v81 && v81 <= SHIDWORD(v182);
      if (v86)
        v79 = v82;
      if (v86)
        v76 = v84;
      if (v86)
        v77 = v83;
      if (v86)
        v78 = v85;
      ++v75;
    }
    while (v43 != v75);
    if ((v79 & 0x80000000) != 0)
      goto LABEL_157;
    if ((v76 & 0x80000000) != 0)
      goto LABEL_157;
    v87 = v78 - v77;
    if (v78 == v77)
      goto LABEL_157;
    v88 = v78 - DWORD2(v182);
    v89 = (float)((float)v88 + 0.5) / (float)v87;
    v90 = (float)(HIDWORD(v182) - v77) + 0.5;
    v91 = v90 / (float)v87;
    v92 = v89 <= v91 ? v90 / (float)v87 : (float)((float)v88 + 0.5) / (float)v87;
    v93 = v183;
    sub_1D3E20534((uint64_t)v208, v43, v79, v76, (uint64_t)&v181, (uint64_t)&v180, (float)((float)v88 + 0.5) / (float)v87, v90 / (float)v87);
    sub_1D3E20534((uint64_t)v207, v80, v79, v76, (uint64_t)&v178, (uint64_t)&v179, v89, v91);
    if (v166 == v41)
    {
      *(float32x2_t *)v94.f32 = v181;
      v95 = v178.f32[0];
      v96 = (int32x2_t)v179;
      *(float32x2_t *)v97.f32 = vsub_f32(v181, v178);
      *(float32x2_t *)&v97.u32[2] = vsub_f32(v180, v179);
      *(float32x2_t *)&v94.u32[2] = v180;
      v98 = (int8x16_t)vmlaq_n_f32(v94, v97, (float)(17 * v182 - 41) / 71.0);
      v99 = v178.f32[1];
    }
    else
    {
      v95 = v178.f32[0];
      v98.i32[0] = v181.i32[0];
      if ((v45 & 1) != 0)
      {
        v103 = 27.0 / (float)(17 * v182 + 3);
        v95 = v178.f32[0] + (float)(v103 * (float)(v178.f32[0] - v181.f32[0]));
        v99 = v178.f32[1] + (float)(v103 * (float)(v178.f32[1] - v181.f32[1]));
        v104 = v180;
        v96 = (int32x2_t)vmla_n_f32(v179, vsub_f32(v179, v180), v103);
      }
      else
      {
        v99 = v178.f32[1];
        v96 = (int32x2_t)v179;
        v104 = v180;
      }
      v98.i32[1] = v181.i32[1];
      v98.u64[1] = (unint64_t)v104;
    }
    v105 = (float32x2_t)vdup_lane_s32(v96, 0);
    v105.f32[0] = v95;
    v106 = (int32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
    v107 = vsub_f32(v105, (float32x2_t)vzip1_s32(*(int32x2_t *)v98.i8, v106));
    v108 = vsub_f32((float32x2_t)__PAIR64__(v96.u32[1], LODWORD(v99)), (float32x2_t)vzip2_s32(*(int32x2_t *)v98.i8, v106));
    v109 = vmla_f32(vmul_f32(v108, v108), v107, v107);
    v110 = vsqrt_f32(v109);
    if ((float)(vabds_f32(v110.f32[0], v110.f32[1]) / vaddv_f32(v110)) > 0.2)
      goto LABEL_157;
    v111 = *(float *)&v96.i32[1];
    v112 = (float)((float)(*(float *)&v96.i32[1] - v99) * (float)(*(float *)&v96.i32[1] - v99))
         + (float)((float)(*(float *)v96.i32 - v95) * (float)(*(float *)v96.i32 - v95));
    v113 = sqrtf(v112);
    v114 = *(float *)&v98.i32[2];
    v115 = *(float *)&v98.i32[1];
    v116 = *(float *)&v98.i32[3];
    v117 = (float)((float)(*(float *)&v98.i32[3] - *(float *)&v98.i32[1])
                 * (float)(*(float *)&v98.i32[3] - *(float *)&v98.i32[1]))
         + (float)((float)(*(float *)&v98.i32[2] - *(float *)v98.i32)
                 * (float)(*(float *)&v98.i32[2] - *(float *)v98.i32));
    v118 = sqrtf(v117);
    if ((float)(vabds_f32(v118, v113) / (float)(v113 + v118)) > 0.2)
      goto LABEL_157;
    v167 = (float32x4_t)v98;
    v168 = v95;
    v171 = (float32x2_t)v96;
    v163 = v109;
    v165 = v99;
    if (sub_1D3E50C24(&v196, &v195, &v194, &v193, *(float *)v98.i32, *(float *)&v98.i32[1], v95, v99, *(float *)&v98.i32[2], *(float *)&v98.i32[3], *(float *)v96.i32, *(float *)&v96.i32[1]) == 2)goto LABEL_157;
    if (!sub_1D3E206A4((int *)&v182, a2))
    {
      *(int32x4_t *)(a2 + 28) = vcvtq_s32_f32(vrndaq_f32(v167));
      *(int32x2_t *)(a2 + 44) = vcvt_s32_f32(vrnda_f32(v171));
      *(_DWORD *)(a2 + 52) = llroundf(v168);
      *(_DWORD *)(a2 + 56) = llroundf(v165);
      goto LABEL_183;
    }
    v119 = v163.f32[1];
    if (v163.f32[0] > v163.f32[1])
      v119 = v163.f32[0];
    v120 = sqrtf(v119);
    if (v117 <= v112)
      v121 = v112;
    else
      v121 = v117;
    v122 = sqrtf(v121);
    v123 = 4.0;
    if ((float)(3.0 / *((float *)&v192 + 3)) <= 4.0)
      v123 = 3.0 / *((float *)&v192 + 3);
    if ((float)(3.0 / *((float *)&v192 + 3)) >= 0.5)
      v124 = v123;
    else
      v124 = 0.5;
    v125 = *((float *)&v192 + 3) * v124;
    v126 = (int)(float)(ceilf(v124 * v120) + 1.0);
    *((float *)&v192 + 3) = *((float *)&v192 + 3) * v124;
    v127 = (int)(float)(ceilf(v124 * v122) + 1.0);
    memset(v175, 0, sizeof(v175));
    v176 = 0u;
    memset(v177, 0, sizeof(v177));
    sub_1D3E4EFE8(v126, v127, (uint64_t)v175, v167.f32[0], v115, v114, v116, v171.f32[0], v111, v168, v165);
    v172 = 0;
    v130 = v127 - 1;
    if (v93 < 1)
    {
      v132 = 0;
    }
    else
    {
      v131 = 0;
      v132 = 0;
      v133 = (float)((float)(v92 * 0.5) / (float)v93) * (float)v127;
      v134 = ceilf(v125) + 1.0;
      v135 = (float)-(int)v134;
      v136 = (float)(int)(v127 + 2 * vcvtps_s32_f32(v133));
      v137 = -(float)(int)ceilf(v133);
      v138 = (float)(v126 + (int)v134);
      if (2 * v93 <= 1)
        v139 = 1;
      else
        v139 = 2 * v93;
      do
      {
        v140 = v137 + (float)((float)((float)v131 / (float)(2 * v93 - 1)) * v136);
        memset(v173, 0, sizeof(v173));
        v141 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
        v174 = v141;
        *((_QWORD *)v141 + 8) = 0;
        *((_DWORD *)v141 + 18) = 0;
        *((_QWORD *)v141 + 10) = 0;
        *(_OWORD *)v141 = 0u;
        *((_OWORD *)v141 + 1) = 0u;
        *((_OWORD *)v141 + 2) = 0u;
        *(_OWORD *)(v141 + 44) = 0u;
        sub_1D3E1FF94((uint64_t)a4, (float *)v175, 0, (uint64_t)v173, (uint64_t)&v182, &v172, v135, v140, v138, v140);
        sub_1D3E36F54((uint64_t)v173);
        if ((v172 & 0x80000000) == 0)
        {
          if (v140 < (float)v132)
            v132 = (int)v140;
          if (v140 > (float)v130)
            v130 = (int)v140;
        }
        ++v131;
      }
      while (v139 != v131);
    }
    v143.i32[0] = HIDWORD(v176);
    LODWORD(v142) = DWORD2(v176);
    v144 = *((float *)&v176 + 3) * (float)v132;
    *(float *)&v145 = v177[0];
    v146 = v177[1];
    v147 = LODWORD(v177[2]);
    v148 = v177[3];
    v149 = v177[2] * (float)v132;
    v150 = v177[4];
    v151 = v177[5] * (float)v132;
    *(float *)v129.i32 = v177[6];
    *(float *)v128.i32 = v177[6] + (float)(v151 + (float)(v177[4] * 0.0));
    v152 = (float)(v177[0] + (float)(v144 + (float)(*((float *)&v176 + 2) * 0.0))) / *(float *)v128.i32;
    v153 = v177[6] + (float)(v151 + (float)(v177[4] * (float)v126));
    v154 = (float)(v177[0] + (float)(v144 + (float)(*((float *)&v176 + 2) * (float)v126))) / v153;
    v155 = (float)(v177[3] + (float)(v149 + (float)(v177[1] * (float)v126))) / v153;
    v156 = llroundf((float)(v177[3] + (float)(v149 + (float)(v177[1] * 0.0))) / *(float *)v128.i32);
    *(float *)v128.i32 = v177[5] * (float)v130;
    *(_DWORD *)(a2 + 28) = llroundf(v152);
    *(_DWORD *)(a2 + 32) = v156;
    v143.i32[1] = v147;
    *(float32x2_t *)v157.f32 = vmul_n_f32(v143, (float)v130);
    v157.i64[1] = v157.i64[0];
    *((float *)&v142 + 1) = v146;
    v158.i64[0] = 0;
    v158.f32[2] = (float)v126;
    v158.f32[3] = (float)v126;
    *((float *)&v145 + 1) = v148;
    v159 = vmlaq_f32(v157, v158, (float32x4_t)vdupq_lane_s64(v142, 0));
    v160 = (int32x4_t)vdupq_lane_s64(v145, 0);
    v158.f32[1] = (float)v126;
    v161 = vaddq_f32((float32x4_t)v160, v159);
    *(float32x2_t *)v160.i8 = vadd_f32((float32x2_t)vdup_lane_s32(v129, 0), vmla_n_f32((float32x2_t)vdup_lane_s32(v128, 0), *(float32x2_t *)v158.f32, v150));
    *(int32x4_t *)(a2 + 36) = vcvtq_s32_f32(vrndaq_f32(vdivq_f32(v161, (float32x4_t)vzip1q_s32(v160, v160))));
    *(_DWORD *)(a2 + 52) = llroundf(v154);
    *(_DWORD *)(a2 + 56) = llroundf(v155);
    v29 = sub_1D3E206A4((int *)&v182, a2);
    if (!(_DWORD)v29)
    {
LABEL_183:
      if (DWORD1(v182) == 32)
      {
        v29 = 0;
        v162 = 1;
        goto LABEL_187;
      }
      if (**((_WORD **)&v191 + 1) == 920)
      {
        v29 = 0;
        v162 = 2;
LABEL_187:
        *(_DWORD *)(a2 + 4) = v162;
      }
      else
      {
        v29 = 0;
      }
    }
  }
LABEL_18:
  if (*((_QWORD *)&v191 + 1))
    free(*((void **)&v191 + 1));
  if ((_QWORD)v192)
    free((void *)v192);
  return v29;
}

uint64_t sub_1D3E1FF70()
{
  uint64_t result;

  result = sub_1D3E285B4(0x3A1u, 3);
  qword_1EFE319C0 = result;
  return result;
}

void sub_1D3E1FF94(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, signed int *a6, float a7, float a8, float a9, float a10)
{
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  float *v22;
  int v23;
  int32x4_t v24;
  float v25;
  unsigned int v26;
  signed int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  signed int v32;
  int v33;
  signed int v34;
  int v35;
  int v36;
  int v38;
  signed int v39;
  signed int v40;
  signed int v41;
  signed int v42;
  int v43;
  unsigned int v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  signed int v50;
  int v55;
  unsigned int v56;
  float v57;
  int v58;
  unsigned int v59;
  int v60;
  signed int *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v15 = *(uint64_t **)(a4 + 80);
  *a6 = -1;
  if (!sub_1D3E4E580(a1, a2, (_QWORD *)a4, a7, a8, a9, a10))
  {
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v16 = sub_1D3E0418C((uint64_t)&v72, *(float **)a4, *(_DWORD *)(a4 + 8), 0.5);
    if (!v16)
    {
LABEL_20:
      sub_1D3E04604((void **)&v72);
      return;
    }
    v17 = v16;
    v62 = a3;
    v63 = (uint64_t)(v15 + 9);
    v61 = a6;
    if (a2)
    {
      v18 = *(int *)a5 <= 2 ? 6 : 9;
      v19 = v18 + 4 * *(_DWORD *)a5 + 4;
    }
    else
    {
      v19 = 42;
    }
    v64 = v15 + 7;
    v71 = 0;
    v20 = 2 * v19;
    v65 = -1;
    v66 = -1;
    v67 = -1;
    v68 = -1;
    v21 = 1;
    v69 = -1;
    v70 = -1;
    while (1)
    {
      if (v17 >= 22 && v17 <= v20)
      {
        v22 = (float *)(*(_QWORD *)a4 + 4 * (int)(float)(*(float *)v73 + -0.5));
        LODWORD(v22) = *v22 <= v22[1];
        sub_1D3E3BD9C((int *)(v73 + 4 * v22), (v17 - (_DWORD)v22) & 0xFFFFFFFE, (uint64_t)v64, v63);
        v23 = *(unsigned __int8 *)(a5 + 168);
        if (sub_1D3E1E6C0(v15[7], v15[8], v15[9], v15[10], v23, &v70, &v69, &v68, &v67, &v66, &v65, (float *)&v71 + 1, (float *)&v71)|| v23 && ((v70 & 0x80000000) == 0 || (v68 & 0x80000000) == 0 || (v69 & 0x80000000) == 0))
        {
          break;
        }
      }
      if (v21 <= 2)
        v17 = sub_1D3E043B8((uint64_t)&v72, *(float *)(a5 + 172));
      if (++v21 == 4)
        goto LABEL_20;
    }
    sub_1D3E04604((void **)&v72);
    v24.i32[0] = *(_DWORD *)(a5 + 172);
    if (*(float *)v24.i32 >= 0.75
      && vabds_f32(*((float *)&v71 + 1), *(float *)v24.i32) <= (float)(*(float *)v24.i32 * 0.25))
    {
      *(float *)v24.i32 = (float)(*(float *)v24.i32 + *((float *)&v71 + 1)) * 0.5;
      *(_DWORD *)(a5 + 172) = v24.i32[0];
      v25 = *(float *)v24.i32 * 17.0;
      if (!*(_BYTE *)(a5 + 168))
      {
        *(float *)v24.i32 = *(float *)v24.i32 * 17.0;
        v35 = sub_1D3E208C0((uint64_t)v64, v63, &v70, &v69, (int *)&v68, &v67, &v66, &v65, v24, (_WORD *)a5);
        *a6 = v35;
        if (v35 < 0)
          return;
        sub_1D3E20F40((int *)a5);
        if (!*(_BYTE *)(a5 + 168))
        {
LABEL_86:
          if (v62)
          {
            __asm { FMOV            V0.2S, #-1.0 }
            *(_QWORD *)(v62 + 48) = _D0;
            v55 = v70;
            v56 = v69;
            v57 = (float)((v69 >> 31) | 1);
            *(float *)(v62 + 32) = (float)((v70 >> 31) | 1);
            *(float *)(v62 + 36) = v57;
            if ((v55 & 0x80000000) == 0 && (v56 & 0x80000000) == 0)
            {
              v58 = *(_DWORD *)(v15[8] + 4 * v67);
LABEL_97:
              *(_DWORD *)(v62 + 48) = v58;
              v60 = *(_DWORD *)(v15[10] + 4 * v66);
LABEL_98:
              *(_DWORD *)(v62 + 52) = v60;
              return;
            }
            if ((v68 & 0x80000000) == 0 && (v56 & 0x80000000) == 0)
            {
              v59 = v56 + 52;
              if (v56 >= v68)
                v59 = v56;
              if (v59 - v68 == 32)
                *(_DWORD *)(v62 + 32) = 1065353216;
              v58 = *(_DWORD *)(v15[8] + 4 * v65 - 16);
              goto LABEL_97;
            }
            if (((v68 | v55) & 0x80000000) == 0)
            {
              *(_DWORD *)(v62 + 48) = *(_DWORD *)(v15[8] + 4 * v67);
              v60 = *(_DWORD *)(v15[10] + 4 * v65 + 28);
              goto LABEL_98;
            }
          }
          return;
        }
      }
      v26 = v70;
      if ((v70 & 0x80000000) == 0)
      {
        if (v70 >= *(_DWORD *)(a5 + 8))
        {
          v27 = v70;
          if (v70 <= *(_DWORD *)(a5 + 12))
          {
LABEL_30:
            v28 = v69;
            v29 = *(_DWORD *)a5;
            if ((v69 & 0x80000000) == 0)
            {
              v30 = *(_DWORD *)(a5 + 4);
              v31 = v69 - v30 - 52;
              if (v69 - v30 <= 51)
                v31 = v69 - v30;
              if (v69 - v30 >= 0)
                v32 = v31;
              else
                v32 = v69 - v30 + 52;
              if (v29 >= 3)
              {
                if (v32 < 0)
                {
                  v32 = -1;
                }
                else
                {
                  v33 = v32 - v30;
                  v34 = v33 - 52;
                  if (v33 <= 51)
                    v34 = v33;
                  if (v33 >= 0)
                    v32 = v34;
                  else
                    v32 = v33 + 52;
                }
              }
              if (v32 >= *(_DWORD *)(a5 + 8) && v32 <= *(_DWORD *)(a5 + 12))
                goto LABEL_51;
              v28 = -1;
              v69 = -1;
            }
            v32 = -1;
LABEL_51:
            v36 = v68;
            _VF = __OFSUB__(v29, 3);
            if (v29 < 3)
            {
LABEL_72:
              v40 = -1;
LABEL_73:
              if (((v26 & v28 & 0x80000000) != 0) != _VF && v36 < 0)
                return;
              v46 = v15[8];
              v47 = v15[10];
              if ((v27 & 0x80000000) == 0)
                sub_1D3E21224((float *)(v46 + 4 * v67 + 12), (float *)(v47 + 4 * v67 + 12), v27, 0, a5, v25);
              if ((v40 & 0x80000000) == 0)
              {
                v48 = v46 + 4 * v65;
                v49 = v47 + 4 * v65;
                sub_1D3E21224((float *)(v48 - 16), (float *)(v49 - 16), v40, *(_DWORD *)a5 - 3, a5, v25);
                sub_1D3E21224((float *)(v48 + 12), (float *)(v49 + 12), v40, *(_DWORD *)a5 - 2, a5, v25);
              }
              if ((v32 & 0x80000000) == 0)
              {
                sub_1D3E21224((float *)(v46 + 4 * v66 - 28), (float *)(v47 + 4 * v66 - 28), v32, *(_DWORD *)a5 - 1, a5, v25);
                v40 = v32;
              }
              if (v27 < 0)
                v50 = v40;
              else
                v50 = v27;
              *v61 = v50;
              goto LABEL_86;
            }
            if ((v68 & 0x80000000) == 0)
              goto LABEL_53;
            if (v32 < 0)
              v43 = *v64 - 4;
            else
              v43 = v66 - 14;
            if ((v32 | v27) < 0)
            {
              v45 = 0;
            }
            else
            {
              v44 = v27 - v32;
              if (v27 - v32 < 0)
                v44 = v32 - v27;
              v45 = v44 < 3;
            }
            v36 = sub_1D3E1ED30((uint64_t)v64, v63, v43, v45, v26, v28, &v65, (float *)&v71 + 1, 0);
            v68 = v36;
            _VF = 0;
            if (*((float *)&v71 + 1) < 0.75
              || (_VF = 0, vabds_f32(*((float *)&v71 + 1), *(float *)(a5 + 172)) > (float)(*(float *)(a5 + 172) * 0.25)))
            {
LABEL_71:
              v36 = -1;
              v68 = -1;
              goto LABEL_72;
            }
            if (v36 < 0)
            {
              v40 = -1;
            }
            else
            {
LABEL_53:
              v38 = v36 - *(_DWORD *)(a5 + 4);
              v39 = v38 - 52;
              if (v38 <= 51)
                v39 = v36 - *(_DWORD *)(a5 + 4);
              if (v38 >= 0)
                v40 = v39;
              else
                v40 = v38 + 52;
            }
            v41 = *(_DWORD *)(a5 + 8);
            _VF = __OFSUB__(v41, v40);
            if (v41 <= v40)
            {
              v42 = *(_DWORD *)(a5 + 12);
              _VF = __OFSUB__(v40, v42);
              if (v40 <= v42)
                goto LABEL_73;
            }
            goto LABEL_71;
          }
        }
        v26 = -1;
        v70 = -1;
      }
      v27 = -1;
      goto LABEL_30;
    }
  }
}

uint64_t sub_1D3E20534(uint64_t result, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  if (a2 >= 2)
  {
    v11 = a2;
    v12 = (float *)(result + 4);
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = *(v12 - 1);
      v14 = v14 + v15;
      v13 = v13 + *v12;
      v8 = v8 + (float)(v15 * *v12);
      v10 = v10 + (float)(v15 * v15);
      v9 = v9 + (float)(*v12 * *v12);
      v12 += 2;
      --v11;
    }
    while (v11);
    v16 = v14 / (float)a2;
    v17 = v13 / (float)a2;
    v18 = -(float)((float)(v8 / (float)a2) + (float)((float)-v16 * v17));
    v19 = (float)(v10 / (float)a2) - (float)(v16 * v16);
    v20 = (float)(v9 / (float)a2) - (float)(v17 * v17);
    v21 = fabsf(v19);
    v22 = fabsf(v20);
    v23 = v21 < v22;
    if (v21 >= v22)
      v8 = v18;
    else
      v8 = v20;
    if (v23)
      v9 = v18;
    else
      v9 = v19;
    v10 = -(float)((float)(v17 * v9) + (float)(v8 * v16));
  }
  v24 = (float *)(result + 8 * a3);
  v25 = (float *)(result + 8 * a4);
  if (fabsf(v8) <= 0.1)
  {
    v34 = *v24 - *v25;
    v35 = *v25 + (float)(a7 * v34);
    *(_DWORD *)(a5 + 4) = *(_DWORD *)(result + 8 * a3 + 4);
    *(_DWORD *)(a6 + 4) = *(_DWORD *)(result + 8 * a4 + 4);
    *(float *)a5 = v35;
    v33 = *v24 - (float)(a8 * v34);
  }
  else
  {
    v26 = v8 * v8;
    v27 = 1.0 / v8;
    v28 = 1.0 / (float)((float)(v8 * v8) + (float)(v9 * v9));
    v29 = -(float)(v8 * v9);
    v30 = v28
        * (float)((float)((float)(v29 * *v24) + (float)(v26 * *(float *)(result + 8 * a3 + 4))) - (float)(v9 * v10));
    v31 = v28
        * (float)((float)((float)(v29 * *v25) + (float)(v26 * *(float *)(result + 8 * a4 + 4))) - (float)(v9 * v10));
    *(float *)(a5 + 4) = v31 + (float)(a7 * (float)(v30 - v31));
    v32 = v30 - (float)(a8 * (float)(v30 - v31));
    *(float *)(a6 + 4) = v32;
    *(float *)a5 = v27 * (float)-(float)(v10 + (float)(v9 * *(float *)(a5 + 4)));
    v33 = v27 * (float)-(float)(v10 + (float)(v9 * v32));
  }
  *(float *)a6 = v33;
  return result;
}

uint64_t sub_1D3E206A4(int *a1, uint64_t a2)
{
  unsigned int v2;
  size_t v3;
  uint64_t v4;
  signed int v7;
  void *v8;
  char *v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  int v14;
  int v15;
  int v16;
  signed int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;

  v2 = a1[5];
  v3 = *a1 * (uint64_t)a1[4];
  if ((int)v3 - a1[6] > (int)(v2 - 2))
    return 6;
  v7 = v3 - v2;
  *(_QWORD *)(a2 + 8) = 2 * (int)(v3 - v2);
  v8 = *(void **)(a2 + 16);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v9 = (char *)malloc_type_calloc(v3, 2uLL, 0x1000040BDFB0063uLL);
  v10 = (unsigned int *)malloc_type_calloc(v3, 4uLL, 0x100004052888210uLL);
  v11 = v10;
  v12 = (char *)*((_QWORD *)a1 + 19);
  if (v12)
  {
    if (v9 && v10 != 0)
    {
      v14 = a1[4];
      if (v14 < 1)
      {
        v17 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = *a1;
        do
        {
          if (v18 >= 1)
          {
            v19 = 0;
            v20 = v16;
            v21 = v16;
            v22 = *((_QWORD *)a1 + 20) + 2 * v16;
            do
            {
              if (!*(_WORD *)(v22 + 2 * v19))
              {
                v10[v17++] = v21 + v19;
                v18 = *a1;
              }
              ++v19;
            }
            while ((int)v19 < v18);
            v16 = v20 + v19;
            v14 = a1[4];
          }
          ++v15;
        }
        while (v15 < v14);
      }
      v26 = 0;
      if (sub_1D3E287FC(qword_1EFE319C0, v12, v7, &v12[2 * v7], v2, v10, v17, &v26, v9, &v9[2 * v7]))
      {
LABEL_26:
        free(v9);
        *(_QWORD *)(a2 + 8) = 0;
        v4 = 5;
        if (!v11)
          return v4;
LABEL_27:
        free(v11);
        return v4;
      }
      v24 = v17 + 2 * (v26 - v17);
      if (v26 - v17 > 3)
      {
        if (v24 > (int)(v2 - 2))
          goto LABEL_26;
      }
      else if (v24 > (int)(v2 - 3))
      {
        goto LABEL_26;
      }
      v4 = 0;
      *(_DWORD *)(a2 + 24) = 1065353216;
      *(_QWORD *)(a2 + 16) = v9;
      v25 = *a1;
      *(_DWORD *)(a2 + 80) = a1[4];
      *(_DWORD *)(a2 + 84) = v25;
      if (!v11)
        return v4;
      goto LABEL_27;
    }
  }
  if (v9)
    free(v9);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = 15;
  if (v11)
    goto LABEL_27;
  return v4;
}

uint64_t sub_1D3E208C0(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, int *a5, int *a6, int *a7, _DWORD *a8, int32x4_t a9, _WORD *a10)
{
  float v10;
  uint64_t v19;
  unsigned int v20;
  int v21;
  float v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  float v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  unsigned int v44;
  float v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  float v56;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  float32x4_t v66;
  uint64_t v67;

  v10 = *(float *)a9.i32;
  v67 = *MEMORY[0x1E0C80C00];
  v19 = *a3;
  if ((v19 & 0x80000000) != 0)
  {
LABEL_27:
    if ((*a4 & 0x80000000) == 0 && (*a5 & 0x80000000) == 0)
    {
      *a3 = -1;
      v33 = *a5;
      v34 = *a4;
      if (*a4 < *a5)
        v34 = *a4 + 52;
      v35 = v34 - v33;
      if ((*a4 | *a5) < 0)
        v35 = -1;
      if (v35 == 32)
      {
        if (v33 <= 0x53)
          v36 = -32;
        else
          v36 = -84;
        if (v33 < 0x20)
          v36 = 20;
        v37 = v36 + v33;
        if (v33 >= 0)
          v19 = v37;
        else
          v19 = 0xFFFFFFFFLL;
        ++a10[16];
        ++a10[23];
LABEL_43:
        v38 = &a10[(int)v19];
LABEL_44:
        ++v38[24];
        return v19;
      }
      if ((v35 & 7) == 0
        && v35 <= 31
        && fabsf((float)((float)(*(float *)(*(_QWORD *)(a1 + 8) + 4 * *a7 - 12)- *(float *)(*(_QWORD *)(a1 + 8) + 4 * (int)*a8 + 12))/ v10)+ -2.0) <= 0.5)
      {
        v60 = v33 - v35 - 52;
        if (v33 - v35 <= 51)
          v60 = v33 - v35;
        if (v33 - v35 >= 0)
          v61 = v60;
        else
          v61 = v33 - v35 + 52;
        if (v33 >= 0)
          v19 = v61;
        else
          v19 = 0xFFFFFFFFLL;
        ++a10[18];
        ++a10[v35 / 8 + 19];
        goto LABEL_43;
      }
    }
    if ((*a3 & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    goto LABEL_47;
  }
  v20 = *a4;
  if (*a4 < 0)
  {
LABEL_47:
    v19 = 0xFFFFFFFFLL;
    if (*a5 < 0)
      return v19;
    *a4 = -1;
    v39 = *a3;
    v40 = *a5;
    if (*a5 < (int)v39)
      v40 = *a5 + 52;
    v41 = v40 - v39;
    if ((int)(*a5 | v39) < 0)
      v41 = -1;
    if (v41 == 32)
    {
      ++a10[17];
      ++a10[23];
LABEL_54:
      ++a10[(int)v39 + 24];
      return v39;
    }
    if ((v41 & 7) == 0)
    {
      v19 = 0xFFFFFFFFLL;
      if (v41 > 31)
        return v19;
      v56 = (float)(*(float *)(*(_QWORD *)(a2 + 8) + 4 * (int)*a8) - *(float *)(*(_QWORD *)(a1 + 8) + 4 * *a6 + 12))
          / v10;
      if (v56 < 0.5 || v56 > 2.5)
        return v19;
      v58 = v41 / 8;
      v59 = 3;
      if (fabsf(v56 + -1.0) < fabsf(v56 + -2.0))
        v59 = 2;
      ++a10[v59 + 14];
      ++a10[v58 + 19];
      goto LABEL_54;
    }
    return 0xFFFFFFFFLL;
  }
  v21 = *a7;
  v22 = *(float *)(*(_QWORD *)(a1 + 8) + 4 * (*a7 - 3)) - *(float *)(*(_QWORD *)(a1 + 8) + 4 * *a6 + 12);
  if (v19 <= 0x13)
    v23 = 32;
  else
    v23 = -20;
  v24 = v23 + v19;
  if (v24 >= 0)
  {
    v25 = v24 <= 0x13 ? 32 : -20;
    if (v20 == v25 + v24)
    {
      *(float *)a9.i32 = v22 / v10;
      if (*(float *)a9.i32 >= 0.5 && *(float *)a9.i32 <= 5.0882)
      {
        v26 = 0;
        *(float *)&a9.i32[1] = *(float *)a9.i32 + -0.58824;
        v66 = vabsq_f32(vaddq_f32((float32x4_t)vzip1q_s32(a9, a9), (float32x4_t)xmmword_1D3E82170));
        v27 = -1;
        v28 = 0.5;
        do
        {
          if (v66.f32[v26] < v28)
          {
            v27 = v26;
            v28 = v66.f32[v26];
          }
          ++v26;
        }
        while (v26 != 4);
        if (v27 == 3)
        {
          v29 = sub_1D3E1ED30(a1, a2, v21 - 14, 1, v19, v20, a8, 0, 0);
          *a5 = v29;
          v19 = *a3;
          v30 = v29 + 52;
          if (v29 >= (int)v19)
            v30 = v29;
          if (((v19 | v29) & 0x80000000) == 0 && v30 - (_DWORD)v19 == 32)
          {
            a10[17] += 2;
            a10[23] += 2;
            a10[(int)v19 + 24] += 2;
            return v19;
          }
        }
      }
      goto LABEL_26;
    }
  }
  v31 = v20 + 52;
  if (v20 >= v19)
    v31 = *a4;
  v32 = v31 - v19;
  if ((v32 & 7) != 0)
    goto LABEL_26;
  *(float *)a9.i32 = v22 / v10;
  if (*(float *)a9.i32 < 0.5 || *(float *)a9.i32 > 5.0882)
    goto LABEL_26;
  v43 = 0;
  *(float *)&a9.i32[1] = *(float *)a9.i32 + -0.58824;
  v66 = vabsq_f32(vaddq_f32((float32x4_t)vzip1q_s32(a9, a9), (float32x4_t)xmmword_1D3E82170));
  v44 = -1;
  v45 = 0.5;
  do
  {
    if (v66.f32[v43] < v45)
    {
      v44 = v43;
      v45 = v66.f32[v43];
    }
    ++v43;
  }
  while (v43 != 4);
  if ((v44 & 0x80000000) != 0)
    goto LABEL_26;
  if (v44 < 2)
  {
    if (v32 < 16 || (v32 & 0xFFFFFFF8) == 0x20)
    {
      ++a10[v44 + 14];
      ++a10[v32 / 8 + 19];
      v38 = &a10[(int)v19];
      goto LABEL_44;
    }
    return 0xFFFFFFFFLL;
  }
  v46 = sub_1D3E1ED30(a1, a2, v21 - 14, 1, v19, v20, a8, 0, 0);
  *a5 = v46;
  v47 = *a3;
  if (v46 < 0)
  {
    v62 = *a4;
    if (*a4 < (int)v47)
      v62 = *a4 + 52;
    v63 = __OFSUB__(v62, (_DWORD)v47);
    v64 = v62 - v47;
    if (v64 < 0 != v63)
      ++v64;
    v65 = v64 >> 1;
    if ((int)(*a4 | v47) >= 0)
      v50 = v65;
    else
      v50 = 0;
    if ((v50 & 7) == 0)
    {
      v53 = (uint64_t)a10;
      v54 = v44;
      v55 = 1;
      return sub_1D3E21510(v53, v54, v50, v47, v55);
    }
LABEL_26:
    *a5 = sub_1D3E1ED30(a1, a2, 4, 0, 0xFFFFFFFF, 0xFFFFFFFF, a8, 0, 0);
    goto LABEL_27;
  }
  v48 = v46 + 52;
  if (v46 >= (int)v47)
    v48 = v46;
  v49 = v48 - v47;
  if ((int)(v47 | v46) < 0)
    v50 = -1;
  else
    v50 = v49;
  v51 = *a4;
  if (*a4 < v46)
    v51 = *a4 + 52;
  v52 = v51 - v46;
  if ((*a4 | v46) < 0)
    v52 = -1;
  if (v50 != v52 || (v50 & 7) != 0)
    goto LABEL_26;
  v53 = (uint64_t)a10;
  v54 = v44;
  v55 = 2;
  return sub_1D3E21510(v53, v54, v50, v47, v55);
}

uint64_t sub_1D3E20F40(int *a1)
{
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 *v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t)(a1 + 7);
  v3 = *((_WORD *)a1 + 18);
  if (!v3)
    goto LABEL_7;
  v4 = *((unsigned __int16 *)a1 + 16);
  v5 = *((unsigned __int16 *)a1 + 17);
  if (v4 <= v5)
  {
    if (v5 <= v4)
      goto LABEL_7;
    *((_WORD *)a1 + 17) = v5 + v3;
  }
  else
  {
    *((_WORD *)a1 + 16) = v4 + v3;
  }
  *((_WORD *)a1 + 18) = 0;
LABEL_7:
  v33 = 0;
  result = sub_1D3E21494(v2, 4, (int *)&v33 + 1);
  if ((_DWORD)result)
  {
    result = sub_1D3E21494((uint64_t)a1 + 38, 5, (int *)&v33);
    if ((_DWORD)result)
    {
      v7 = HIDWORD(v33);
      v8 = (int)v33;
      v9 = HIDWORD(v33) + 1;
      v10 = 8 * v33;
      *a1 = HIDWORD(v33) + 1;
      a1[1] = v10;
      if ((_DWORD)v8 == 4)
      {
        if (!v7)
          return result;
        v11 = (char *)&unk_1D3E6FA6C + 56 * v7 - 56;
        v12 = 7;
      }
      else if (v7 || (int)v8 > 1)
      {
        if (v9 == 2 && (int)v8 <= 1)
        {
          v11 = (char *)&unk_1D3E6FB44 + 32 * v8;
          v12 = 4;
        }
        else
        {
          if ((v7 & 0xFFFFFFFE) != 2)
            return result;
          v11 = (char *)&unk_1D3E6FB84 + 40 * (int)v8;
          v12 = 5;
        }
      }
      else
      {
        v11 = (char *)&unk_1D3E6FB14 + 24 * (int)v8;
        v12 = 3;
      }
      v13 = 0;
      memset(v34, 0, 14);
      do
      {
        v14 = &v11[8 * v13];
        v15 = *(unsigned int *)v14;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = *((_DWORD *)v14 + 1);
          if ((v16 & 0x80000000) == 0 && (int)v15 <= v16)
          {
            v17 = *((_WORD *)v34 + v13);
            v18 = v16 - v15 + 1;
            v19 = (__int16 *)a1 + v15 + 24;
            do
            {
              v20 = *v19++;
              v17 += v20;
              --v18;
            }
            while (v18);
            *((_WORD *)v34 + v13) = v17;
          }
        }
        ++v13;
      }
      while (v13 != v12);
      v32 = 0;
      result = sub_1D3E21494((uint64_t)v34, 7, &v32);
      if ((result & 1) != 0)
      {
        v21 = 0;
        v22 = v32;
        v23 = *(_DWORD *)&v11[8 * v32];
        a1[2] = v23;
        v24 = *(_DWORD *)&v11[4 * ((2 * v22) | 1)];
        v25 = v24 - v23 + 1;
        a1[3] = v24;
        a1[4] = v25;
        v26 = &unk_1D3E6FC68;
        if ((_DWORD)v8 == 4)
        {
          v26 = &unk_1D3E6FC24;
          v27 = 16;
        }
        else
        {
          v27 = 33;
        }
        v28 = v25 + 100 * v9;
        do
        {
          v29 = v21 + ((v27 - v21) >> 1);
          v30 = v26[v29];
          if (v30 <= v28)
          {
            if (v30 >= v28)
            {
              if ((v29 & 0x80000000) == 0)
              {
                v31 = &unk_1D3E6FD34;
                if ((_DWORD)v8 == 4)
                  v31 = &unk_1D3E6FCF0;
                a1[5] = v31[v29];
                *((_QWORD *)a1 + 19) = malloc_type_calloc(v25 * v9, 2uLL, 0x1000040BDFB0063uLL);
                result = (uint64_t)malloc_type_calloc(*a1 * (uint64_t)a1[4], 2uLL, 0x1000040BDFB0063uLL);
                *((_QWORD *)a1 + 20) = result;
                if (*((_QWORD *)a1 + 19))
                {
                  if (result)
                    *((_BYTE *)a1 + 168) = 1;
                }
              }
              return result;
            }
            v21 = v29 + 1;
          }
          else
          {
            v27 = v29 - 1;
          }
        }
        while (v21 <= v27);
      }
    }
  }
  return result;
}

void sub_1D3E21224(float *a1, float *a2, unsigned int a3, int a4, uint64_t a5, float a6)
{
  float v7;
  uint64_t v11;
  char v12;
  float *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  float v35[6];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a1[4] - *a1;
  if ((float)(vabds_f32(v7, a6) / a6) > 0.5)
    return;
  v11 = 0;
  v12 = 1;
  do
  {
    if ((v12 & 1) != 0)
      v13 = a1;
    else
      v13 = a2;
    if ((v12 & 1) != 0)
      ++a1;
    else
      ++a2;
    v35[v11] = v13[1] - *v13;
    v12 ^= 1u;
    ++v11;
  }
  while (v11 != 6);
  if (sub_1D3E1ECAC(v35, 6, &v29, v7) >= 0.25)
    return;
  v14 = (v29 + v33 - (v30 + v34) + 9) % 9;
  v15 = v14 > 6 || ((1 << v14) & 0x49) == 0;
  if (v15 || v14 != 3 * (a3 % 3))
    return;
  v16 = 0;
  v17 = ((v29 + v33 - (v30 + v34) + 9) % 9) / 3u;
  v18 = (uint64_t)*(&off_1E95B3AA8 + v17);
  v19 = 100000 * v29 + 10000 * v30 + 10 * v33 + v34 + 1000 * v31 + 100 * v32;
  v20 = (uint64_t)*(&off_1E95B3AC0 + v17);
  v21 = 928;
  while (1)
  {
    v22 = v16 + ((v21 - v16) >> 1);
    v23 = *(_DWORD *)(v18 + 4 * (int)v22);
    if (v23 <= v19)
      break;
    v21 = v22 - 1;
LABEL_21:
    if (v16 > v21)
      return;
  }
  if (v23 < v19)
  {
    v16 = v22 + 1;
    goto LABEL_21;
  }
  if ((v22 & 0x80000000) == 0)
  {
    v24 = *(_DWORD *)(v20 + 4 * v22);
    if ((v24 & 0x80000000) == 0)
    {
      v25 = *(_QWORD *)(a5 + 160);
      v26 = (int)(a4 + *(_DWORD *)a5 * (a3 - *(_DWORD *)(a5 + 8)));
      v27 = *(_WORD *)(v25 + 2 * v26);
      if (v27)
      {
        if (v24 == *(unsigned __int16 *)(*(_QWORD *)(a5 + 152) + 2 * v26))
        {
          v28 = v27 + 1;
          goto LABEL_29;
        }
        *(_WORD *)(v25 + 2 * v26) = v27 - 1;
        if (v27 == 1)
          --*(_DWORD *)(a5 + 24);
      }
      else
      {
        ++*(_DWORD *)(a5 + 24);
        *(_WORD *)(*(_QWORD *)(a5 + 152) + 2 * v26) = v24;
        v28 = *(_WORD *)(v25 + 2 * v26) + 1;
LABEL_29:
        *(_WORD *)(v25 + 2 * v26) = v28;
      }
    }
  }
}

uint64_t sub_1D3E21494(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int16 v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  LOWORD(v6) = 0;
  v7 = -1;
  do
  {
    v8 = *(unsigned __int16 *)(a1 + 2 * v3);
    v4 += v8;
    if (v8 > v5)
      v5 = *(_WORD *)(a1 + 2 * v3);
    v9 = v8 >= (unsigned __int16)v6;
    if (v8 >= (unsigned __int16)v6)
      v5 = v6;
    if (v8 <= (unsigned __int16)v6)
      v6 = (unsigned __int16)v6;
    else
      v6 = *(unsigned __int16 *)(a1 + 2 * v3);
    if (v9)
      v7 = v3;
    ++v3;
  }
  while (a2 != v3);
  if ((int)(v6 - v5) <= 2)
  {
    v10 = v4 - v6;
    if (v6 < 3 || v10 >= (int)v6)
      return 0;
  }
  *a3 = v7;
  return 1;
}

uint64_t sub_1D3E21510(uint64_t a1, int a2, int a3, uint64_t a4, __int16 a5)
{
  int v5;
  int v6;

  v5 = a3 / 8;
  if (a2 >= 2)
    v6 = 4;
  else
    v6 = 2;
  if (v5 >= v6 && (a3 & 0xFFFFFFF8) != 0x20)
    return 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 2 * a2 + 28) += a5;
  *(_WORD *)(a1 + 2 * v5 + 38) += a5;
  *(_WORD *)(a1 + 2 * (int)a4 + 48) += a5;
  return a4;
}

size_t sub_1D3E21584(size_t result, char *a2, std::string::size_type a3, size_t *a4, const char *a5)
{
  unint64_t v5;
  unint64_t v6;
  size_t *v8;
  std::string::size_type v9;
  size_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  int v45;
  unsigned int v46;
  _QWORD v47[3];
  __int16 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = *(int *)(result + 8);
  v6 = v5 >> 1;
  if ((v5 >> 1) - 177 >= 0xFFFFFF50)
  {
    v8 = a4;
    v9 = a3;
    v11 = result;
    v12 = *(_QWORD *)(result + 16);
    v13 = *(_DWORD *)(v11 + 4);
    if (v6 <= 0x14 && v13 == 1)
    {
      v15 = 0;
      memset(v47, 0, sizeof(v47));
      v48 = 0;
      if (v12)
        v16 = (_DWORD)v6 == 0;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = (v5 >> 1);
        v18 = (unsigned __int16 *)v12;
        v19 = v17;
        do
        {
          v20 = *v18++;
          if (v20 > 0x3A0)
          {
            v15 = 0;
            goto LABEL_50;
          }
          --v19;
        }
        while (v19);
        v21 = 0;
        v22 = 0;
        v23 = -2;
        v24 = v6;
        do
        {
          v25 = v24 - 7;
          if (v24 >= 7)
            v26 = 7;
          else
            v26 = v24;
          if (v26 <= 2)
            v27 = 2;
          else
            v27 = v26;
          v50 = *(unsigned __int16 *)(v12 + 2 * v19);
          if ((int)v6 - (int)v19 >= 7)
            v28 = 7;
          else
            v28 = v6 - v19;
          memset(v49, 0, sizeof(v49));
          if (v28 > 1)
          {
            for (i = 1; i != v27; ++i)
            {
              v30 = 4;
              do
              {
                *((_QWORD *)v49 + v30) *= 928;
                v41 = v30-- > 1;
              }
              while (v41);
              v31 = 0;
              v32 = v50 + *(unsigned __int16 *)(v12 + 2 * (i + v19));
              v50 = v32;
              do
              {
                v33 = (char *)v49 + 8 * v31;
                v34 = (unsigned __int16)v32;
                v32 = *((_QWORD *)v33 + 3) + (v32 >> 16);
                *((_QWORD *)v33 + 3) = v32;
                *((_QWORD *)v33 + 4) = v34;
                v35 = v31 + 4;
                --v31;
              }
              while (v35 > 1);
            }
          }
          v36 = 10 * v28 - 1;
          if ((int)v6 - (int)v19 >= 1)
          {
            v37 = v23 + 10 * v26;
            v38 = 4;
            v39 = 10 * v28 - 1;
            do
            {
              if (v39 >= 16)
                v40 = 16;
              else
                v40 = v39;
              v41 = v39 + v22 - v40 > 1600 || (v40 - 1) > 0xF;
              if (!v41)
              {
                v42 = v40 + 1;
                v43 = (unsigned __int16)*((_QWORD *)v49 + v38);
                v44 = v37;
                do
                {
                  v45 = *((unsigned __int16 *)v47 + v44 / 16);
                  v46 = v45 | (0x8000u >> (v44 & 0xF));
                  if ((v43 & 1) == 0)
                    LOWORD(v46) = v45 & (-32769 >> (v44 & 0xF));
                  *((_WORD *)v47 + v44 / 16) = v46;
                  v43 >>= 1;
                  --v42;
                  --v44;
                }
                while (v42 > 1);
              }
              --v38;
              v37 -= 16;
              v41 = v39 <= 15;
              v39 -= 16;
            }
            while (!v41);
          }
          v21 += v36;
          v22 += 69;
          v19 += 7;
          v23 += 69;
          v24 = v25;
        }
        while (v19 < v17);
        v15 = v21;
        v8 = a4;
        v9 = a3;
      }
LABEL_50:
      sub_1D3DD4144((uint64_t)v47, v15, a2, v9);
      result = strlen(a2);
      *v8 = result;
    }
    else
    {
      result = sub_1D3E4F654(v12, 0, (v5 >> 1), a2, a3, a4, a5);
      if ((result & 1) == 0)
      {
        *v8 = 0;
        *a2 = 0;
      }
    }
  }
  return result;
}

BOOL sub_1D3E21854(int a1, uint64_t a2, int a3)
{
  return a1 > 10 && a3 > 11;
}

uint64_t sub_1D3E21864(uint64_t result, _DWORD *a2)
{
  int v2;
  int v3;
  _DWORD *i;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;

  if ((_DWORD)result)
  {
    if ((int)result >= 0)
      v2 = result;
    else
      v2 = -(int)result;
    v3 = v2;
    for (i = a2; !*i; ++i)
    {
      if (!--v3)
        return 0;
    }
    v5 = a2[v2 - 1];
    if (!v5)
      return 0;
    v6 = 32;
    if ((v5 & 0x80000000) == 0)
    {
      v7 = 0x80000000;
      do
      {
        --v6;
        v8 = (v5 & (v7 >> 1)) == 0;
        v7 >>= 1;
      }
      while (v8);
    }
    return (v6 + 32 * v2 - 32);
  }
  return result;
}

uint64_t sub_1D3E218CC(uint64_t a1, int a2, _DWORD *a3)
{
  int v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (v3 >= 0)
      v4 = *(_DWORD *)a1;
    else
      v4 = -v3;
    v5 = *(_DWORD **)(a1 + 8);
    while (!*v5)
    {
      ++v5;
      if (!--v4)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (!a2)
      return 0;
    if (a2 >= 0)
      LODWORD(v6) = a2;
    else
      LODWORD(v6) = -a2;
    for (i = a3; !*i; ++i)
    {
      v6 = (v6 - 1);
      if (!(_DWORD)v6)
        return v6;
    }
  }
  if (v3 <= a2)
  {
    v6 = 0xFFFFFFFFLL;
    if (v3 < a2)
      return v6;
    if (v3 >= 0)
      v8 = v3;
    else
      v8 = -v3;
    if (v3 >= 0)
      v9 = 0xFFFFFFFFLL;
    else
      v9 = 1;
    v6 = (v3 >> 31) | 1u;
    while ((int)v8 >= 1)
    {
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8 - 4);
      v11 = a3[v8 - 1];
      if (v10 > v11)
        return v6;
      --v8;
      if (v10 < v11)
        return v9;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1D3E2198C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_DWORD *)a2;
  if (*(int *)a2 >= 0)
    v3 = v2;
  else
    v3 = -v2;
  if (v2)
  {
    v4 = *(_DWORD **)(a2 + 8);
    v5 = v3;
    v6 = v4;
    while (!*v6)
    {
      ++v6;
      if (!--v5)
        goto LABEL_8;
    }
    if ((_DWORD)result)
    {
      v8 = 0;
      do
      {
        v9 = v4[v8];
        v10 = __CFADD__(v9, (_DWORD)result);
        v11 = v9 + result;
        v12 = v10;
        if (v11 < result)
          result = 1;
        else
          result = v12;
        v4[v8++] = v11;
      }
      while (v8 < v3 && (result & 1) != 0);
      if ((_DWORD)result)
      {
        ++*(_DWORD *)a2;
        v4[v3] = result;
      }
    }
  }
  else
  {
LABEL_8:
    *(_DWORD *)a2 = 0;
    if ((_DWORD)result)
    {
      if ((int)result >= 0)
        v7 = result;
      else
        v7 = -(int)result;
      **(_DWORD **)(a2 + 8) = v7;
      *(_DWORD *)a2 = 1;
    }
    else
    {
      **(_DWORD **)(a2 + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_1D3E21A34(unsigned int *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  const void *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  __int128 v10;

  result = *a1;
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    v6 = (const void *)*((_QWORD *)a1 + 1);
    if (v6 == *(const void **)(a2 + 8))
      return result;
    if ((int)result >= 0)
      v7 = result;
    else
      v7 = -(int)result;
    result = (uint64_t)memcpy(*(void **)(a2 + 8), v6, 4 * v7);
    v8 = *a1;
    goto LABEL_22;
  }
  v10 = *(_OWORD *)a1;
  if (((v5 ^ result) & 0x80000000) != 0)
  {
    if (v5 < 1)
    {
      *(_DWORD *)a2 = -v5;
      if ((sub_1D3E218CC(a2, v10, *((_DWORD **)&v10 + 1)) & 0x80000000) != 0)
        return (uint64_t)sub_1D3E21D90((uint64_t)&v10, (int *)a2);
      result = (uint64_t)sub_1D3E21CD0((int *)&v10, (unsigned int *)a2);
    }
    else
    {
      LODWORD(v10) = -(int)v10;
      if ((sub_1D3E218CC(a2, v10, *((_DWORD **)&v10 + 1)) & 0x80000000) == 0)
        return (uint64_t)sub_1D3E21CD0((int *)&v10, (unsigned int *)a2);
      result = (uint64_t)sub_1D3E21D90((uint64_t)&v10, (int *)a2);
    }
    goto LABEL_21;
  }
  if (v5 >= 1)
    return sub_1D3E21B8C(result, *((unsigned int **)a1 + 1), (int *)a2);
  v9 = -(int)v10;
  if (*((_QWORD *)a1 + 1) != *(_QWORD *)(a2 + 8))
    *(_DWORD *)a2 = -v5;
  result = sub_1D3E21B8C(v9, *((unsigned int **)&v10 + 1), (int *)a2);
  if (*((_QWORD *)a1 + 1) != *(_QWORD *)(a2 + 8))
  {
LABEL_21:
    v8 = -*(_DWORD *)a2;
LABEL_22:
    *(_DWORD *)a2 = v8;
  }
  return result;
}

uint64_t sub_1D3E21B8C(uint64_t result, unsigned int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  int *v25;
  int v26;
  int v27;

  v3 = *a3;
  v4 = *((_QWORD *)a3 + 1);
  if ((int)result >= (int)v3)
    v5 = v3;
  else
    v5 = result;
  if ((int)result <= (int)v3)
    v6 = *a3;
  else
    v6 = result;
  if ((int)v5 < 1)
  {
    v8 = 0;
    v5 = 0;
    v17 = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    LOBYTE(v8) = 0;
    v9 = (unsigned int *)*((_QWORD *)a3 + 1);
    v10 = a2;
    v11 = v5;
    do
    {
      v12 = v8 | v7;
      v8 = v12 & (*v9 == -1);
      v13 = *v9 + (v12 & 1);
      v15 = *v10++;
      v14 = v15;
      v16 = v15 + v13;
      v7 = __CFADD__(v15, v13);
      if (v16 < v14)
        v7 = 1;
      *v9++ = v16;
      --v11;
    }
    while (v11);
    v17 = !v7;
  }
  if ((int)v3 > (int)result)
  {
    if (v8)
      v18 = 0;
    else
      v18 = v17;
    if ((v18 & 1) != 0)
      goto LABEL_39;
    if ((int)v5 < (int)v3)
    {
      v19 = v3 - v5;
      v20 = (_DWORD *)(v4 + 4 * v5);
      while (__CFADD__((*v20)++, 1))
      {
        ++v20;
        if (!--v19)
        {
          v5 = v3;
          goto LABEL_28;
        }
      }
      goto LABEL_39;
    }
LABEL_28:
    *a3 = v6;
    result = v5;
LABEL_38:
    *(_DWORD *)(v4 + 4 * result) = 1;
    v6 = *a3 + 1;
LABEL_39:
    *a3 = v6;
    return result;
  }
  if (v17)
    v22 = v8;
  else
    v22 = 1;
  if ((int)v5 >= (int)result)
  {
    result = v5;
  }
  else
  {
    LOBYTE(v22) = v22 != 0;
    v23 = result - (unint64_t)v5;
    v24 = (_DWORD *)(v4 + 4 * v5);
    v25 = (int *)&a2[v5];
    do
    {
      v26 = *v25++;
      v27 = v26 + (v22 & 1);
      v22 = v22 & (v26 == -1);
      *v24++ = v27;
      --v23;
    }
    while (v23);
  }
  *a3 = v6;
  if (v22)
    goto LABEL_38;
  return result;
}

int *sub_1D3E21CD0(int *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  BOOL v18;

  if (*result)
  {
    v2 = *a2;
    v3 = *((_QWORD *)a2 + 1);
    if (*result >= 1)
    {
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      v7 = *((_QWORD *)result + 1);
      do
      {
        v8 = v6 | v5;
        v9 = *(_DWORD *)(v3 + 4 * v4);
        v6 = v8 & (v9 == 0);
        v10 = v9 - (v8 & 1);
        v11 = *(_DWORD *)(v7 + 4 * v4);
        v5 = v10 < v11;
        *(_DWORD *)(v3 + 4 * v4++) = v10 - v11;
        v12 = *result;
      }
      while (v4 < v12);
      v13 = v10 < v11 ? 1 : v6;
      if (v13 == 1 && (int)v12 < (int)v2)
      {
        do
        {
          v15 = *(_DWORD *)(v3 + 4 * v12);
          *(_DWORD *)(v3 + 4 * v12++) = v15 - 1;
        }
        while (v12 < (int)v2 && !v15);
      }
    }
    v16 = v2 & ((int)v2 >> 31);
    v17 = (_DWORD *)(v3 + 4 * v2 - 4);
    while (1)
    {
      v18 = __OFSUB__((_DWORD)v2, 1);
      LODWORD(v2) = v2 - 1;
      if ((int)v2 < 0 != v18)
        break;
      if (*v17--)
      {
        v16 = v2 + 1;
        break;
      }
    }
    *a2 = v16;
  }
  return result;
}

_DWORD *sub_1D3E21D90(uint64_t a1, int *a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int v24;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD **)(a1 + 8);
  result = (_DWORD *)*((_QWORD *)a2 + 1);
  LODWORD(v7) = *a2;
  if (*a2)
  {
    if ((int)v7 < 1)
    {
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      LOBYTE(v10) = 0;
      do
      {
        v11 = v10 | v9;
        v12 = v5[v8];
        v10 = v11 & (v12 == 0);
        v13 = v12 - (v11 & 1);
        v14 = result[v8];
        v15 = v13 >= v14;
        v16 = v13 - v14;
        v9 = !v15;
        result[v8++] = v16;
        v7 = *a2;
      }
      while (v8 < v7);
    }
    v18 = v4;
    if ((int)v7 < v4)
    {
      v19 = v10 == 0;
      v20 = v4 - (uint64_t)(int)v7;
      if (!v19)
        v9 = 1;
      v21 = &result[(int)v7];
      v22 = &v5[(int)v7];
      do
      {
        v23 = *v22++;
        v24 = v23 - (v9 & 1);
        v9 &= v23 == 0;
        *v21++ = v24;
        --v20;
      }
      while (v20);
    }
    *a2 = v4;
    do
      v17 = v18--;
    while (!result[v17 - 1]);
  }
  else
  {
    if (v5 == result)
      return result;
    if (v4 < 0)
      v4 = -v4;
    result = memcpy(result, v5, 4 * v4);
    LODWORD(v17) = *(_DWORD *)a1;
  }
  *a2 = v17;
  return result;
}

int *sub_1D3E21EA0(int *result, uint64_t a2)
{
  int v2;
  int *v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;
  int v9;
  __int128 v10;

  v2 = *result;
  if (*result)
  {
    v4 = result;
    v5 = *(_DWORD *)a2;
    if (*(_DWORD *)a2)
    {
      v10 = *(_OWORD *)result;
      if ((v5 ^ v2) < 0)
      {
        if (v5 >= 1)
          return (int *)sub_1D3E21B8C(-(int)v10, *((unsigned int **)&v10 + 1), (int *)a2);
        *(_DWORD *)a2 = -v5;
        result = (int *)sub_1D3E21B8C(v10, *((unsigned int **)&v10 + 1), (int *)a2);
      }
      else if (v5 < 1)
      {
        LODWORD(v10) = -(int)v10;
        v9 = v10;
        *(_DWORD *)a2 = -v5;
        if ((sub_1D3E218CC(a2, v9, *((_DWORD **)&v10 + 1)) & 0x80000000) != 0)
          return sub_1D3E21D90((uint64_t)&v10, (int *)a2);
        result = sub_1D3E21CD0((int *)&v10, (unsigned int *)a2);
      }
      else
      {
        if ((sub_1D3E218CC(a2, v10, *((_DWORD **)&v10 + 1)) & 0x80000000) == 0)
          return sub_1D3E21CD0((int *)&v10, (unsigned int *)a2);
        result = sub_1D3E21D90((uint64_t)&v10, (int *)a2);
      }
      v8 = *(_DWORD *)a2;
    }
    else
    {
      v6 = (int *)*((_QWORD *)result + 1);
      result = *(int **)(a2 + 8);
      if (v6 == result)
      {
        v8 = 0;
      }
      else
      {
        if (v2 >= 0)
          v7 = v2;
        else
          v7 = -v2;
        result = (int *)memcpy(result, v6, 4 * v7);
        v8 = *v4;
      }
    }
    *(_DWORD *)a2 = -v8;
  }
  return result;
}

void sub_1D3E21FE0(unsigned int a1, uint64_t a2)
{
  int v2;
  int v3;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v2 = *(_DWORD *)a2;
  if (*(int *)a2 >= 0)
    v3 = *(_DWORD *)a2;
  else
    v3 = -v2;
  if (v2)
  {
    v5 = ((unint64_t)a1 + 31) >> 5;
    v6 = *(_DWORD **)(a2 + 8);
    v7 = v3;
    v8 = v6;
    while (!*v8)
    {
      ++v8;
      if (!--v7)
      {
        v9 = 0;
        if (!a1)
          return;
        goto LABEL_14;
      }
    }
    v9 = v2 < 1 ? -1 : 1;
    if (a1)
    {
LABEL_14:
      LODWORD(v10) = v5 + v3 - 1;
      v11 = (int)v10;
      if ((a1 & 0x1F) != 0)
      {
        v12 = 0;
        v13 = v3 + 1;
        v14 = (v3 - 1);
        v15 = v11;
        do
        {
          v16 = v6[v14];
          v6[v15] = (v16 >> (32 - (a1 & 0x1F))) | v12;
          v17 = v15 - 1;
          v12 = v16 << (a1 & 0x1F);
          --v13;
          --v14;
          --v15;
        }
        while (v13 > 1);
        v18 = v17;
        do
        {
          v6[v18] = v12;
          v12 = 0;
        }
        while (v18-- > 0);
      }
      else
      {
        v20 = v3 + 1;
        v21 = (v3 - 1);
        v10 = (int)v10;
        do
        {
          v6[v10--] = v6[v21];
          --v20;
          --v21;
        }
        while (v20 > 1);
        bzero(&v6[(int)v10 - (v10 & ~((int)v10 >> 31))], 4 * (v10 & ~((int)v10 >> 31)) + 4);
      }
      *(_DWORD *)a2 = ((__PAIR64__(v3 + (int)v5, v6[v11]) - 1) >> 32) * v9;
    }
  }
}

uint64_t sub_1D3E22144(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  _DWORD *v7;
  unsigned int v8;
  _DWORD *i;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  v2 = *(_DWORD *)a2;
  if (*(int *)a2 >= 0)
    v3 = *(_DWORD *)a2;
  else
    v3 = -v2;
  if ((_DWORD)result && v2)
  {
    v4 = result >> 5;
    v5 = result & 0x1F;
    v6 = 32 - (result & 0x1F);
    v7 = *(_DWORD **)(a2 + 8);
    v8 = v3;
    for (i = v7; !*i; ++i)
    {
      if (!--v8)
        return result;
    }
    v10 = v3 >= v4;
    v11 = v3 - v4;
    if ((_DWORD)v11 == 0 || !v10)
    {
      v17 = 0;
LABEL_25:
      *(_DWORD *)a2 = v17;
      return result;
    }
    if ((result & 0x1F) != 0)
    {
      if ((int)v11 >= 1)
      {
        v12 = result >> 5;
        v13 = (v11 - 1);
        v14 = *(_DWORD **)(a2 + 8);
        v15 = v11;
        do
        {
          if (v13)
            v16 = v14[v12 + 1] << v6;
          else
            v16 = 0;
          result = (v14[v12] >> v5);
          *v14++ = result | v16;
          --v13;
          --v15;
        }
        while (v15);
        v2 = *(_DWORD *)a2;
      }
      if (v7[(int)v11 - 1])
        v17 = v11;
      else
        v17 = v11 - 1;
      if (v2 <= 0)
        v17 = -v17;
      goto LABEL_25;
    }
    if (v2 > 0)
      v18 = v11;
    else
      v18 = -(int)v11;
    *(_DWORD *)a2 = v18;
    if ((int)v11 >= 1)
    {
      do
      {
        *v7 = v7[v4];
        ++v7;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

int *sub_1D3E22234(int *result, int *a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *__src;

  v2 = *result;
  if (*result >= 0)
    v3 = *result;
  else
    v3 = -v2;
  v4 = *a2;
  if ((int)v4 >= 0)
    v5 = *a2;
  else
    v5 = -(int)v4;
  if ((_DWORD)v4)
  {
    v7 = (uint64_t)result;
    v8 = 0;
    result = (int *)*((_QWORD *)a2 + 1);
    if (v4 <= -(int)v4)
      LODWORD(v4) = -(int)v4;
    while (!result[v8])
    {
      if ((_DWORD)v4 == (_DWORD)++v8)
        return result;
    }
    v9 = *(int **)(v7 + 8);
    if (v2)
    {
      v10 = v3;
      v11 = *(_DWORD **)(v7 + 8);
      while (!*v11)
      {
        ++v11;
        if (!--v10)
          goto LABEL_17;
      }
      if ((int *)v7 == a2)
      {
        v15 = 2 * v5;
        v18 = 0;
        result = (int *)off_1EFE319B0(qword_1EFE319B8, 0, 4 * (2 * v5));
        __src = result;
        if (result)
        {
          HIDWORD(v18) = v15;
          sub_1D3E2267C(a2, (uint64_t)&v18);
          v16 = __src;
          result = (int *)*((_QWORD *)a2 + 1);
          if (__src != result)
          {
            v17 = v18;
            if ((int)v18 < 0)
              v17 = -(int)v18;
            result = (int *)memcpy(result, __src, 4 * v17);
            *a2 = v18;
            v16 = __src;
          }
          if (v16)
            return (int *)((uint64_t (*)(uint64_t))off_1EFE319A8)(qword_1EFE319B8);
        }
      }
      else
      {
        v12 = v5 + v3;
        v18 = 0;
        result = (int *)off_1EFE319B0(qword_1EFE319B8, 0, 4 * (v5 + v3));
        __src = result;
        if (result)
        {
          HIDWORD(v18) = v12;
          sub_1D3E223FC(v7, (uint64_t)a2, (uint64_t)&v18);
          v13 = __src;
          result = (int *)*((_QWORD *)a2 + 1);
          if (__src != result)
          {
            v14 = v18;
            if ((int)v18 < 0)
              v14 = -(int)v18;
            result = (int *)memcpy(result, __src, 4 * v14);
            *a2 = v18;
            v13 = __src;
          }
          if (v13)
            return (int *)((uint64_t (*)(uint64_t))off_1EFE319A8)(qword_1EFE319B8);
        }
      }
    }
    else
    {
LABEL_17:
      if (v9 != result)
      {
        result = (int *)memcpy(result, v9, 4 * v3);
        *a2 = *(_DWORD *)v7;
      }
    }
  }
  return result;
}

void sub_1D3E223FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  _DWORD *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;

  v4 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v5 = *(_DWORD *)a1;
  else
    v5 = -v4;
  v6 = *(_DWORD *)a2;
  if (*(int *)a2 >= 0)
    v7 = *(_DWORD *)a2;
  else
    v7 = -v6;
  if (!v4)
    goto LABEL_16;
  v10 = *(_DWORD **)(a1 + 8);
  v11 = v5;
  while (!*v10)
  {
    ++v10;
    if (!--v11)
      goto LABEL_16;
  }
  if (v6)
  {
    v12 = *(_DWORD **)(a2 + 8);
    v13 = v7;
    while (!*v12)
    {
      ++v12;
      if (!--v13)
        goto LABEL_16;
    }
    if (a1 == a2)
    {
      sub_1D3E2267C((int *)a1, a3);
    }
    else if (a1 != a3 && a2 != a3)
    {
      bzero(*(void **)(a3 + 8), 4 * (v7 + v5));
      v14 = *(_DWORD **)(a2 + 8);
      if (v7 == 1)
      {
        LODWORD(v15) = 0;
        v36 = 0;
        v19 = *(unsigned int **)(a2 + 8);
      }
      else
      {
        v15 = 0;
        v16 = *(unsigned int **)(a1 + 8);
        v17 = *(_QWORD *)(a3 + 8);
        if (v5 <= 1)
          v18 = 1;
        else
          v18 = v5;
        v19 = *(unsigned int **)(a2 + 8);
        do
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = *v19;
          v24 = v19[1];
          v25 = (unsigned int *)(v17 + 4 * v15);
          v26 = *v25;
          v27 = v18;
          v28 = v16;
          do
          {
            v29 = v25;
            v30 = v20 * v24;
            v31 = *v28++;
            v20 = v31;
            v32 = v31 * (unint64_t)v23;
            v33 = v21 + v22 + v26 + v30 + v32;
            v22 = HIDWORD(v33) + HIDWORD(v32);
            v34 = v25[1];
            ++v25;
            v26 = v34;
            *v29 = v33;
            v21 = HIDWORD(v30);
            --v27;
          }
          while (v27);
          v19 += 2;
          v35 = HIDWORD(v30) + v22 + v26 + v20 * (unint64_t)v24;
          *(_QWORD *)v25 = v35;
          v15 += 2;
        }
        while (v15 < v7 - 1);
        v36 = HIDWORD(v35);
      }
      if (v15 < v7)
      {
        v37 = *v19;
        if (v37)
        {
          v36 = 0;
          v38 = *(unsigned int **)(a1 + 8);
          v39 = (_DWORD *)(*(_QWORD *)(a3 + 8) + 4 * v15);
          if (v5 <= 1)
            v40 = 1;
          else
            v40 = v5;
          do
          {
            v41 = *v38++;
            v42 = v36 + *v39 + v41 * (unint64_t)v37;
            *v39++ = v42;
            v36 = HIDWORD(v42);
            --v40;
          }
          while (v40);
          *v39 = v36;
        }
      }
      v43 = v7 + v5 - (v36 == 0);
      *(_DWORD *)a3 = v43;
      v44 = *(_DWORD *)a1;
      if (*(_DWORD *)a1)
      {
        if (v44 >= 0)
          v45 = *(_DWORD *)a1;
        else
          v45 = -v44;
        v46 = *(_DWORD **)(a1 + 8);
        while (!*v46)
        {
          ++v46;
          if (!--v45)
          {
            v44 = 0;
            goto LABEL_50;
          }
        }
        if (v44 < 1)
          v44 = -1;
        else
          v44 = 1;
      }
LABEL_50:
      v47 = *(_DWORD *)a2;
      if (*(_DWORD *)a2)
      {
        if (v47 >= 0)
          v48 = *(_DWORD *)a2;
        else
          v48 = -v47;
        while (!*v14)
        {
          ++v14;
          if (!--v48)
            goto LABEL_56;
        }
        if (v47 < 1)
          v49 = -1;
        else
          v49 = 1;
      }
      else
      {
LABEL_56:
        v49 = 0;
      }
      if (v44 != v49)
        *(_DWORD *)a3 = -v43;
    }
  }
  else
  {
LABEL_16:
    *(_DWORD *)a3 = 0;
  }
}

int *sub_1D3E2267C(int *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;

  v2 = *result;
  if ((int)v2 >= 0)
    v3 = v2;
  else
    v3 = -(int)v2;
  if ((_DWORD)v2)
  {
    if (result == (int *)a2)
      return result;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (unsigned int *)*((_QWORD *)result + 1);
    if (v3 <= 1)
      v6 = 1;
    else
      v6 = v3;
    v7 = *(_QWORD **)(a2 + 8);
    v8 = (unsigned int *)*((_QWORD *)result + 1);
    do
    {
      v9 = *v8++;
      *v7++ = v9 * (unint64_t)v9;
      --v6;
    }
    while (v6);
    if ((_DWORD)v3 != 1)
    {
      v10 = 0;
      if (v2 <= -(int)v2)
        LODWORD(v2) = -(int)v2;
      do
      {
        v11 = v4 + 8 * v10++;
        v12 = (_DWORD *)(v11 + 4);
        if (v10 >= v3)
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          v14 = *v5;
          v15 = 1;
          do
          {
            v16 = (v5[v15] * (unint64_t)v14) >> 32;
            result = (int *)(2 * v5[v15] * v14);
            v17 = (unint64_t)result + v13 + *v12;
            *v12++ = v17;
            v13 = HIDWORD(v17) + 2 * v16;
            ++v15;
          }
          while ((_DWORD)v2 != (_DWORD)v15);
        }
        ++v5;
        do
        {
          v18 = *v12 + (unint64_t)v13;
          *v12++ = v18;
          v13 = HIDWORD(v18) + HIDWORD(v13);
        }
        while (v13);
        LODWORD(v2) = v2 - 1;
      }
      while (v10 != (_DWORD)v3 - 1);
    }
    v19 = 2 * v3;
    if (!*(_DWORD *)(v4 + 4 * (v19 - 1)))
      --v19;
  }
  else
  {
    v19 = 0;
  }
  *(_DWORD *)a2 = v19;
  return result;
}

_DWORD *sub_1D3E22784(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _DWORD *result;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;

  v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0)
    v4 = -v4;
  v5 = 4 * v4;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v20 = 0;
  v21 = 0;
  if (4 * v4)
  {
    result = (_DWORD *)off_1EFE319B0(qword_1EFE319B8, 0, 4 * (4 * v4));
    v21 = result;
    if (!result)
      goto LABEL_30;
    HIDWORD(v20) = v5;
    result = (_DWORD *)off_1EFE319B0(qword_1EFE319B8, 0, 4 * v5);
    v19 = result;
    if (!result)
      goto LABEL_30;
    v7 = result;
    HIDWORD(v18) = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v9 = *(_DWORD *)a1;
  else
    v9 = -v8;
  if (v8)
  {
    result = (_DWORD *)off_1EFE319B0(qword_1EFE319B8, 0, 4 * v9);
    v17 = result;
    if (!result)
      goto LABEL_30;
    HIDWORD(v16) = v9;
  }
  else
  {
    result = 0;
  }
  v10 = *(_DWORD **)(a1 + 8);
  if (v10 != result)
  {
    v11 = *(_DWORD *)a1;
    if (*(int *)a1 < 0)
      v11 = -v11;
    memcpy(result, v10, 4 * v11);
    LODWORD(v16) = *(_DWORD *)a1;
  }
  **(_DWORD **)(a2 + 8) = 1;
  *(_DWORD *)a2 = 1;
  sub_1D3E21EA0((int *)a2, (uint64_t)&v16);
  v12 = sub_1D3E21864(v16, v17);
  sub_1D3E21A34((unsigned int *)a2, (uint64_t)&v16);
  sub_1D3E21FE0(v12, a2);
  v13 = *(_DWORD **)(a2 + 8);
  if (v13 != v7)
    goto LABEL_21;
  v14 = 0;
  while (1)
  {
    sub_1D3E2267C((int *)a2, (uint64_t)&v20);
    sub_1D3E22144(v12, (uint64_t)&v20);
    sub_1D3E22234((int *)&v16, (int *)&v20);
    sub_1D3E22144(v12, (uint64_t)&v20);
    sub_1D3E21A34((unsigned int *)a2, a2);
    sub_1D3E21EA0((int *)&v20, a2);
    if ((int)sub_1D3E218CC(a2, v14, v7) < 1)
      break;
    v13 = *(_DWORD **)(a2 + 8);
    if (v13 != v7)
    {
LABEL_21:
      v15 = *(_DWORD *)a2;
      if (*(int *)a2 < 0)
        v15 = -v15;
      memcpy(v7, v13, 4 * v15);
      v14 = *(_DWORD *)a2;
      LODWORD(v18) = *(_DWORD *)a2;
    }
  }
  *v21 = 1;
  LODWORD(v20) = 1;
  sub_1D3E21FE0(2 * v12, (uint64_t)&v20);
  sub_1D3E223FC(a2, (uint64_t)&v16, (uint64_t)&v18);
  result = sub_1D3E21EA0((int *)&v18, (uint64_t)&v20);
  *v19 = 1;
  LODWORD(v18) = 1;
  while ((v20 & 0x80000000) != 0)
  {
    sub_1D3E21EA0((int *)&v18, a2);
    result = (_DWORD *)sub_1D3E21A34((unsigned int *)&v16, (uint64_t)&v20);
  }
LABEL_30:
  if (v21)
    result = (_DWORD *)off_1EFE319A8(qword_1EFE319B8);
  v20 = 0;
  v21 = 0;
  if (v19)
    result = (_DWORD *)off_1EFE319A8(qword_1EFE319B8);
  v18 = 0;
  v19 = 0;
  if (v17)
    return (_DWORD *)off_1EFE319A8(qword_1EFE319B8);
  return result;
}

uint64_t MRCContextGetTypeID()
{
  if (qword_1EDB893E0 != -1)
    dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
  return qword_1EDB893D8;
}

unint64_t MRCContextCreate()
{
  return MRCContextCreateWithOptions(0);
}

uint64_t sub_1D3E22A74(uint64_t a1)
{
  void *v2;

  sub_1D3E22B00(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t *sub_1D3E22AAC(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_1D3D8BA0C((unint64_t *)(v1 + 16));
    sub_1D3D8BA0C((unint64_t *)(v1 + 8));
    JUMPOUT(0x1D8254C54);
  }
  return result;
}

void sub_1D3E22B00(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      sub_1D3D969CC(v1 + 6);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

unint64_t *sub_1D3E22B3C(uint64_t a1)
{
  uint64_t v2;
  CFTypeID v3;
  uint64_t v4;
  NSObject *v5;
  os_signpost_id_t v6;
  unint64_t v7;
  CFAllocatorRef *v8;
  const __CFSet *v9;
  uint64_t Count;
  const void **v11;
  const __CFSet *v12;
  CFArrayRef v13;
  const void *v14;
  const __CFAllocator *v16;
  const __CFArray *v17;
  CFStringRef v18;
  const void *v19;
  CFTypeRef v20;
  unint64_t v21;
  const char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE buf[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  const char *v42;
  uint8_t v43[4];
  unint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = CFGetTypeID(*(CFTypeRef *)(a1 + 40));
    if (qword_1EDB893E0 != -1)
      dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
    if (v3 != qword_1EDB893D8)
      _os_assumes_log();
  }
  v32 = *(_QWORD *)(a1 + 48);
  if (qword_1EDB89F30 != -1)
    dispatch_once(&qword_1EDB89F30, &unk_1E95B3348);
  v4 = v2 + 16;
  v5 = qword_1EDB89F88;
  if (os_log_type_enabled((os_log_t)qword_1EDB89F88, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v43 = 138543362;
    v44 = v4 - 16;
    _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, "Preflighting context: %{public}@", v43, 0xCu);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v31 = atomic_load(&v32);
    *(_DWORD *)v43 = 138543362;
    v44 = v31;
    _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, "    for decoder using options: %{public}@", v43, 0xCu);
  }
  sub_1D3DD9E64((uint64_t)v43, &v32);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  buf[0] = 0;
  buf[4] = 0;
  if (sub_1D3DDC428((unint64_t *)v43, CFSTR("AppClipCode"), (uint64_t)buf))
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3DB0980);
  if (v45 < 196608)
  {
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3DA32E4);
  }
  else if (v47 || (_os_feature_enabled_impl() & 1) == 0)
  {
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3D9CEA4);
  }
  if (_os_feature_enabled_impl() && v45 > 196607)
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3DAF554);
  if (sub_1D3DDD9BC((uint64_t)v43))
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3DFDA30);
  if (_os_feature_enabled_impl())
    sub_1D3DDDE08(&v35, (uint64_t)sub_1D3DBF8DC);
  v6 = os_signpost_id_make_with_pointer(v5, (const void *)(v4 - 16));
  v34 = 0;
  if (os_signpost_enabled(v5))
  {
    *(_QWORD *)buf = 0;
    v7 = atomic_load((unint64_t *)v43);
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v7)
    {
      v9 = (const __CFSet *)atomic_load((unint64_t *)v43);
      Count = CFSetGetCount(v9);
      if (Count >= 1)
      {
        v11 = (const void **)operator new[]();
        v12 = (const __CFSet *)atomic_load((unint64_t *)v43);
        CFSetGetValues(v12, v11);
        v13 = CFArrayCreate(*v8, v11, Count, MEMORY[0x1E0C9B378]);
        do
          v14 = (const void *)__ldaxr((unint64_t *)buf);
        while (__stlxr((unint64_t)v13, (unint64_t *)buf));
        if (v14)
          CFRelease(v14);
        MEMORY[0x1D8254C3C](v11, 0xC0C80B8AA526DLL);
      }
    }
    if (atomic_load((unint64_t *)buf))
    {
      v16 = *v8;
      v17 = (const __CFArray *)atomic_load((unint64_t *)buf);
      v18 = CFStringCreateByCombiningStrings(v16, v17, CFSTR(","));
      do
        v19 = (const void *)__ldaxr(&v34);
      while (__stlxr((unint64_t)v18, &v34));
    }
    else
    {
      v20 = CFRetain(CFSTR("<empty>"));
      do
        v19 = (const void *)__ldaxr(&v34);
      while (__stlxr((unint64_t)v20, &v34));
    }
    if (v19)
      CFRelease(v19);
    sub_1D3D74138((unint64_t *)buf);
  }
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    v21 = atomic_load(&v34);
    if (v46)
      v22 = "true";
    else
      v22 = "false";
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v21;
    v39 = 2050;
    v40 = v45;
    v41 = 2082;
    v42 = v22;
    _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Context::preflightForDecoderUsingOptions", "symbologies=%{public, signpost.description:attribute}@, algorithmVersion=%{public, signpost.description:attribute}ld, allowsAlgorithmicVersioningFallback=%{public, signpost.description:attribute}s", buf, 0x20u);
  }
  v23 = v35;
  v24 = v36;
  if (v35 == v36)
  {
LABEL_53:
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D3D6B000, v5, OS_SIGNPOST_INTERVAL_END, v6, "Context::preflightForDecoderUsingOptions", (const char *)&unk_1D3E89A2B, buf, 2u);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v4 - 16;
      _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, "Preflighted context: %{public}@", buf, 0xCu);
    }
    v33 = 0;
  }
  else
  {
    while (1)
    {
      v25 = *((_QWORD *)v23 + 3);
      if (!v25)
        sub_1D3D75A24();
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(&v33, v25, v4);
      if (atomic_load(&v33))
        break;
      sub_1D3D7448C(&v33);
      v23 += 32;
      if (v23 == v24)
        goto LABEL_53;
    }
  }
  sub_1D3D8C70C(&v34);
  *(_QWORD *)buf = &v35;
  sub_1D3DDDFD0((void ***)buf);
  sub_1D3DD9B30((unint64_t *)v43);
  sub_1D3D8BAAC(&v32);
  v27 = *(_QWORD *)(a1 + 32);
  if (v27)
  {
    v28 = *(_QWORD *)(a1 + 40);
    v29 = atomic_load(&v33);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v27 + 16))(v27, v28, v29);
    _Block_release(*(const void **)(a1 + 32));
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  return sub_1D3D7448C(&v33);
}

void sub_1D3E2310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  sub_1D3D74138((unint64_t *)&a15);
  sub_1D3D8C70C(&a11);
  a15 = (void **)&a12;
  sub_1D3DDDFD0(&a15);
  sub_1D3DD9B30(&a19);
  sub_1D3D8BAAC(&a9);
  _Unwind_Resume(a1);
}

_QWORD *MRCContextPurge(char *cf)
{
  CFTypeID v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD context[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EDB893E0 != -1)
      dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
    if (v2 != qword_1EDB893D8)
      _os_assumes_log();
  }
  context[0] = &off_1E95AD2B8;
  context[1] = cf + 16;
  v6 = context;
  sub_1D3E232C0((uint64_t)(cf + 16), 0, context);
  result = v6;
  if (v6 == context)
  {
    v4 = 4;
    result = context;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1D3E23288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D3E232C0(uint64_t a1, char a2, _QWORD *context)
{
  NSObject *v6;

  if (!context[3])
    _os_assumes_log();
  v6 = *(NSObject **)(a1 + 16);
  if ((a2 & 1) != 0)
    dispatch_sync_f(v6, context, (dispatch_function_t)sub_1D3E23330);
  else
    dispatch_barrier_sync_f(v6, context, (dispatch_function_t)sub_1D3E23354);
}

uint64_t sub_1D3E23330(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    sub_1D3D75A24();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_1D3E23354(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    sub_1D3D75A24();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1D3E2337C()
{
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E23390(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E95AD2B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1D3E233C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E95AD2B8;
  a2[1] = v2;
  return result;
}

void sub_1D3E233E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 8);
  os_unfair_lock_lock_with_options();
  if (*(_QWORD *)(v1 + 48))
  {
    sub_1D3E22B00(*(_QWORD **)(v1 + 40));
    *(_QWORD *)(v1 + 40) = 0;
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * i) = 0;
    }
    *(_QWORD *)(v1 + 48) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
}

uint64_t sub_1D3E23448(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"ZN3mrc7Context5purgeEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D3E23480()
{
  return &unk_1E95ACEE8;
}

_QWORD *MRCContextPerform(_QWORD *cf, char a2, uint64_t a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD context[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = (uint64_t)cf;
  if (a3)
  {
    v4 = (uint64_t)cf;
    if (cf)
    {
      v5 = CFGetTypeID(cf);
      if (qword_1EDB893E0 != -1)
        dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
      if (v5 != qword_1EDB893D8)
        _os_assumes_log();
    }
    context[0] = &off_1E95AFBC8;
    context[1] = &v7;
    context[2] = &v8;
    v10 = context;
    sub_1D3E232C0(v4 + 16, a2, context);
    cf = v10;
    if (v10 == context)
    {
      v6 = 4;
      cf = context;
    }
    else
    {
      if (!v10)
        return cf;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*cf + 8 * v6))();
  }
  return cf;
}

void sub_1D3E235A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D3E235DC()
{
  JUMPOUT(0x1D8254C54);
}

__n128 sub_1D3E235F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E95AFBC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1D3E23628(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E95AFBC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_1D3E23648(uint64_t a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

uint64_t sub_1D3E2365C(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"Z17MRCContextPerformE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D3E23694()
{
  return &unk_1E95AEAF0;
}

_QWORD *MRCContextPerformAsync(_QWORD *result, char a2, const void *a3)
{
  void *v5;
  id *v6;
  void *v7;
  CFTypeID v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = result;
    v6 = (id *)operator new();
    *v6 = 0;
    objc_initWeakOrNil(v6, v5);
    v7 = _Block_copy(a3);
    if (v5)
    {
      v8 = CFGetTypeID(v5);
      if (qword_1EDB893E0 != -1)
        dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
      if (v8 != qword_1EDB893D8)
        _os_assumes_log();
    }
    v10[0] = &off_1E95AD0A8;
    v10[1] = v7;
    v10[2] = v6;
    v11 = v10;
    sub_1D3E23840((uint64_t)v5 + 16, a2, (uint64_t)v10);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_1D3E237E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1D3E23840(uint64_t a1, char a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;

  if (!*(_QWORD *)(a3 + 24))
    _os_assumes_log();
  v6 = (void *)operator new();
  sub_1D3D756E8((uint64_t)v6, a3);
  v7 = *(NSObject **)(a1 + 16);
  if ((a2 & 1) != 0)
    dispatch_async_f(v7, v6, (dispatch_function_t)sub_1D3E238D4);
  else
    dispatch_barrier_async_f(v7, v6, (dispatch_function_t)sub_1D3E23948);
}

void sub_1D3E238D4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_1D3D75A24();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
  }
  else
  {
    if (!v3)
      goto LABEL_9;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_9:
  JUMPOUT(0x1D8254C54);
}

void sub_1D3E23948(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_1D3D75A24();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
  }
  else
  {
    if (!v3)
      goto LABEL_9;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_9:
  JUMPOUT(0x1D8254C54);
}

void sub_1D3E239C0()
{
  JUMPOUT(0x1D8254C54);
}

__n128 sub_1D3E239D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E95AD0A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1D3E23A0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E95AD0A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1D3E23A2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 8);
  WeakRetained = objc_loadWeakRetained(*(id **)(a1 + 16));
  v3 = atomic_load((unint64_t *)&WeakRetained);
  (*(void (**)(uint64_t, unint64_t))(v2 + 16))(v2, v3);
  sub_1D3DBEEE4((unint64_t *)&WeakRetained);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    objc_destroyWeak(*(id **)(a1 + 16));
    MEMORY[0x1D8254C54](v4, 0x20C4093837F09);
  }
  _Block_release(*(const void **)(a1 + 8));
}

void sub_1D3E23AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DBEEE4((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E23AC0(uint64_t a1, uint64_t a2)
{
  if (sub_1D3D7521C(*(_QWORD *)(a2 + 8), (uint64_t)"Z22MRCContextPerformAsyncE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *sub_1D3E23AF8()
{
  return &unk_1E95ACE88;
}

void sub_1D3E23B04(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (*(_BYTE *)(*a1 + 32))
  {
    if (qword_1EFE319D8 != -1)
      dispatch_once_f(&qword_1EFE319D8, 0, (dispatch_function_t)sub_1D3E23B94);
    v1 = *a1;
  }
  if (*(_BYTE *)(v1 + 33))
  {
    if (qword_1EFE319E0 != -1)
      dispatch_once_f(&qword_1EFE319E0, 0, (dispatch_function_t)sub_1D3E23C1C);
  }
}

void sub_1D3E23B94()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EDB89F30 != -1)
    dispatch_once(&qword_1EDB89F30, &unk_1E95B3348);
  v0 = qword_1EDB89F88;
  if (os_log_type_enabled((os_log_t)qword_1EDB89F88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1D3D6B000, v0, OS_LOG_TYPE_INFO, "Usage of global context could leave resources without deallocations during the entire process lifecycle. Please consider creating your own context as needed.", v1, 2u);
  }
}

void sub_1D3E23C1C()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EDB89F30 != -1)
    dispatch_once(&qword_1EDB89F30, &unk_1E95B3348);
  v0 = qword_1EDB89F88;
  if (os_log_type_enabled((os_log_t)qword_1EDB89F88, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1D3D6B000, v0, OS_LOG_TYPE_INFO, "Usage of one shot context could bring negative impact in terms of performance due to expensive resource acquisitions. Please consider creating you own context and share them across decoders appropriately.", v1, 2u);
  }
}

unint64_t *sub_1D3E23CA4(_QWORD *a1, int a2)
{
  const __CFAllocator *v4;
  __CFArray *v6;
  __CFArray *v7;
  __CFArray *v8;
  __CFArray *v9;
  __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  void *v13;
  CFMutableArrayRef Mutable;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (atomic_load((unint64_t *)&Mutable))
  {
    if ((a2 & 1) != 0)
    {
      v6 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v6, CFSTR("usesANEOnly"));
    }
    if ((a2 & 2) != 0)
    {
      v7 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v7, CFSTR("prohibitsIntegratedGPU"));
    }
    if ((a2 & 4) != 0)
    {
      v8 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v8, CFSTR("allowsCPU"));
    }
    if ((a2 & 0x1000000) != 0)
    {
      v9 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v9, CFSTR("_prohibitsANE"));
    }
    if ((a2 & 0x2000000) != 0)
    {
      v10 = (__CFArray *)atomic_load((unint64_t *)&Mutable);
      CFArrayAppendValue(v10, CFSTR("_prohibitsGPU"));
    }
    v11 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
    if (CFArrayGetCount(v11))
    {
      v12 = (const __CFArray *)atomic_load((unint64_t *)&Mutable);
      v13 = (void *)CFStringCreateByCombiningStrings(v4, v12, CFSTR(", "));
    }
    else
    {
      v13 = (void *)CFRetain(CFSTR("<empty>"));
    }
  }
  else
  {
    v13 = 0;
  }
  *a1 = v13;
  return sub_1D3D74C60((unint64_t *)&Mutable);
}

void sub_1D3E23DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D74C60((unint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E23DDC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    sub_1D3D75A24();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t sub_1D3E23E00(uint64_t a1, uint64_t a2)
{
  return sub_1D3D7574C(a1 + 32, a2 + 32);
}

_QWORD *sub_1D3E23E0C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1D3E23E40(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *a3;
  v5 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_QWORD *)(a1 + 24);
  sub_1D3D96968(a1 + 32, (uint64_t)(a4 + 1));
  if (!*(_QWORD *)a1)
    _os_assumes_log();
  if (!*v6)
    _os_assumes_log();
  return a1;
}

void sub_1D3E23EA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D3D969CC(v1);
  _Unwind_Resume(a1);
}

void sub_1D3E23EC0()
{
  uint64_t v0;
  const __CFAllocator *v1;
  __CFDictionary *v2;
  const __CFDictionary *v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  CFDictionaryRef Copy;
  CFMutableDictionaryRef Mutable;

  v0 = operator new();
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v2 = (__CFDictionary *)atomic_load((unint64_t *)&Mutable);
  CFDictionarySetValue(v2, CFSTR("_MRCContextOptionIsGlobal"), (const void *)*MEMORY[0x1E0C9AE50]);
  v3 = (const __CFDictionary *)atomic_load((unint64_t *)&Mutable);
  Copy = CFDictionaryCreateCopy(v1, v3);
  sub_1D3D740C8((unint64_t *)&Mutable);
  v4 = (const void *)atomic_load((unint64_t *)&Copy);
  *(_QWORD *)v0 = MRCContextCreateWithOptions(v4);
  sub_1D3D8BAAC((unint64_t *)&Copy);
  *(_QWORD *)(v0 + 8) = dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 6uLL, MEMORY[0x1E0C80D38]);
  v5 = operator new();
  v6 = (void *)atomic_load((unint64_t *)v0);
  *(_QWORD *)v5 = 0;
  objc_initWeakOrNil((id *)v5, v6);
  v7 = *(NSObject **)(v0 + 8);
  *(_QWORD *)(v5 + 8) = v7;
  dispatch_set_context(v7, (void *)v5);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v0 + 8), (dispatch_function_t)sub_1D3E24080);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v0 + 8), (dispatch_function_t)sub_1D3E242C4);
  dispatch_resume(*(dispatch_object_t *)(v0 + 8));
  qword_1EFE319C8 = v0;
}

void sub_1D3E24008(_Unwind_Exception *a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1D8254C54](v3, 0x20C40A4A59CD2);
  sub_1D3DBEEE4(v1);
  MEMORY[0x1D8254C54](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void sub_1D3E24080(uint64_t a1)
{
  uintptr_t data;
  const char *v3;
  int v4;
  NSObject *v5;
  char *v7;
  const char *v8;
  unint64_t v9;
  id WeakRetained;
  uint8_t buf[4];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  data = dispatch_source_get_data(*(dispatch_source_t *)(a1 + 8));
  if (data == 1)
  {
    v4 = 0;
    v3 = "normal";
  }
  else
  {
    if (data == 4)
      v3 = "critical";
    else
      v3 = "warn";
    v4 = 1;
  }
  if (qword_1EDB89F30 != -1)
    dispatch_once(&qword_1EDB89F30, &unk_1E95B3348);
  v5 = qword_1EDB89F88;
  if (os_log_type_enabled((os_log_t)qword_1EDB89F88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v12 = (unint64_t)v3;
    _os_log_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEFAULT, "GlobalContext: received memory pressure: %{public}s", buf, 0xCu);
  }
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, "GlobalContext: will purge", buf, 2u);
    }
    WeakRetained = objc_loadWeakRetained((id *)a1);
    if (atomic_load((unint64_t *)&WeakRetained))
    {
      v7 = (char *)atomic_load((unint64_t *)&WeakRetained);
      MRCContextPurge(v7);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v9 = atomic_load((unint64_t *)&WeakRetained);
        *(_DWORD *)buf = 138543362;
        v12 = v9;
        _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, "GlobalContext: %{public}@", buf, 0xCu);
      }
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v8 = "GlobalContext: purged";
    }
    else
    {
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:
        sub_1D3DBEEE4((unint64_t *)&WeakRetained);
        return;
      }
      *(_WORD *)buf = 0;
      v8 = "GlobalContext: already deallocated";
    }
    _os_log_debug_impl(&dword_1D3D6B000, v5, OS_LOG_TYPE_DEBUG, v8, buf, 2u);
    goto LABEL_20;
  }
}

void sub_1D3E242A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3DBEEE4((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D3E242C4(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  objc_destroyWeak((id *)a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t MRCDescriptorGetTypeID()
{
  if (qword_1EFE31A20 != -1)
    dispatch_once_f(&qword_1EFE31A20, 0, (dispatch_function_t)sub_1D3DB38E0);
  return qword_1EFE31A28;
}

unint64_t MRCDescriptorCreateWithAttributes(const void *a1)
{
  unint64_t v2;
  CFTypeRef v3;
  const __CFDictionary *v4;
  unint64_t v5;
  CFTypeRef v7;
  _OWORD *v8;
  char context[8];
  unint64_t v10;

  v8 = sub_1D3DB36B4();
  v2 = atomic_load((unint64_t *)&v8);
  if (a1)
    v3 = CFRetain(a1);
  else
    v3 = 0;
  v7 = v3;
  v4 = (const __CFDictionary *)atomic_load((unint64_t *)&v7);
  if (v4)
  {
    context[0] = 1;
    v10 = v2 + 16;
    CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_1D3E2440C, context);
  }
  sub_1D3D8BAAC((unint64_t *)&v7);
  do
    v5 = __ldaxr((unint64_t *)&v8);
  while (__stlxr(0, (unint64_t *)&v8));
  sub_1D3D74F14((unint64_t *)&v8);
  return v5;
}

void sub_1D3E243E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  sub_1D3D8BAAC(&a9);
  sub_1D3D74F14(&a10);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E2440C(CFTypeRef a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;
  uint64_t (*Value)(uint64_t, CFTypeRef *);
  char v9;
  unint64_t *result;
  char v11;
  CFTypeRef v12;
  CFTypeRef v13;

  v5 = *(_QWORD *)(a3 + 8);
  if (a1)
    a1 = CFRetain(a1);
  v13 = a1;
  if (cf)
    v6 = CFRetain(cf);
  else
    v6 = 0;
  v12 = v6;
  if (qword_1EFE31A00 != -1)
    dispatch_once_f(&qword_1EFE31A00, 0, (dispatch_function_t)sub_1D3E2450C);
  v7 = (const void *)atomic_load((unint64_t *)&v13);
  if (v7
    && (Value = (uint64_t (*)(uint64_t, CFTypeRef *))CFDictionaryGetValue((CFDictionaryRef)qword_1EFE319F8, v7)) != 0)
  {
    v9 = Value(v5, &v12);
  }
  else
  {
    v9 = 0;
  }
  sub_1D3D8BA0C((unint64_t *)&v12);
  result = sub_1D3D8C70C((unint64_t *)&v13);
  if (*(_BYTE *)a3)
    v11 = v9;
  else
    v11 = 0;
  *(_BYTE *)a3 = v11;
  return result;
}

void sub_1D3E244E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8C70C((unint64_t *)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_1D3E2450C()
{
  CFDictionaryRef result;
  CFDictionaryValueCallBacks v1;
  void *values[2];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_1E95B3E20;
  v11 = *(_OWORD *)&off_1E95B3E30;
  v12 = xmmword_1E95B3E40;
  v13 = *(_OWORD *)off_1E95B3E50;
  v6 = xmmword_1E95B3DE0;
  v7 = *(_OWORD *)&off_1E95B3DF0;
  v8 = xmmword_1E95B3E00;
  v9 = *(_OWORD *)&off_1E95B3E10;
  *(_OWORD *)values = xmmword_1E95B3DA0;
  v3 = *(_OWORD *)&off_1E95B3DB0;
  v4 = xmmword_1E95B3DC0;
  v5 = *(_OWORD *)&off_1E95B3DD0;
  memset(&v1, 0, sizeof(v1));
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&off_1E95B3C20, (const void **)values, 24, MEMORY[0x1E0C9B390], &v1);
  qword_1EFE319F8 = (uint64_t)result;
  return result;
}

uint64_t sub_1D3E245D0(unint64_t *a1, unint64_t *a2)
{
  const void *v2;

  v2 = (const void *)atomic_load(a2);
  sub_1D3D95C6C(a1, v2);
  return 1;
}

uint64_t sub_1D3E245EC(uint64_t a1, unint64_t *a2)
{
  const void *v2;

  v2 = (const void *)atomic_load(a2);
  sub_1D3D95C6C((unint64_t *)(a1 + 8), v2);
  return 1;
}

uint64_t sub_1D3E2460C(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  int valuePtr;

  if (atomic_load(a2))
  {
    valuePtr = 0;
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    TypeID = CFNumberGetTypeID();
    result = 0;
    if (v6 == TypeID)
    {
      v9 = (const __CFNumber *)atomic_load(a2);
      result = CFNumberGetValue(v9, kCFNumberFloatType, &valuePtr);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 16) = valuePtr;
        result = 1;
        *(_BYTE *)(a1 + 20) = 1;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 20))
      *(_BYTE *)(a1 + 20) = 0;
    return 1;
  }
  return result;
}

BOOL sub_1D3E246A0(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *v9;
  CFIndex v10;
  BOOL v11;
  CFIndex v12;
  const __CFArray *v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  CFTypeID v16;
  CGPoint *v17;
  CGPoint *v18;
  CGPoint *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  CGPoint *v25;
  CGPoint *v26;
  void *v27;
  CGPoint point;
  void *__p;
  CGPoint *v31;
  unint64_t v32;

  if (atomic_load(a2))
  {
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    if (v6 == CFArrayGetTypeID())
    {
      __p = 0;
      v31 = 0;
      v32 = 0;
      v7 = (const __CFArray *)atomic_load(a2);
      Count = CFArrayGetCount(v7);
      sub_1D3E25C1C(&__p, Count);
      v9 = (const __CFArray *)atomic_load(a2);
      v10 = CFArrayGetCount(v9);
      if (v10 < 1)
      {
        v11 = 1;
LABEL_33:
        sub_1D3E25CBC(a1 + 24, (uint64_t)&__p);
      }
      else
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = (const __CFArray *)atomic_load(a2);
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v12);
          v15 = ValueAtIndex;
          if (!ValueAtIndex)
            break;
          v16 = CFGetTypeID(ValueAtIndex);
          if (v16 != CFDictionaryGetTypeID() || !CGPointMakeWithDictionaryRepresentation(v15, &point))
            break;
          v17 = v31;
          if ((unint64_t)v31 >= v32)
          {
            v19 = (CGPoint *)__p;
            v20 = ((char *)v31 - (_BYTE *)__p) >> 4;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 60)
              sub_1D3D6D4F8();
            v22 = v32 - (_QWORD)__p;
            if ((uint64_t)(v32 - (_QWORD)__p) >> 3 > v21)
              v21 = v22 >> 3;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
              v23 = 0xFFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
              v23 = (unint64_t)sub_1D3D6DB64(v23);
            else
              v24 = 0;
            v25 = (CGPoint *)(v23 + 16 * v20);
            *v25 = point;
            v26 = v25;
            if (v17 != v19)
            {
              do
              {
                v26[-1] = v17[-1];
                --v26;
                --v17;
              }
              while (v17 != v19);
              v17 = (CGPoint *)__p;
            }
            v18 = v25 + 1;
            __p = v26;
            v32 = v23 + 16 * v24;
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v31 = point;
            v18 = v17 + 1;
          }
          v31 = v18;
          v11 = ++v12 >= v10;
          if (v12 == v10)
            goto LABEL_33;
        }
      }
      if (__p)
        operator delete(__p);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v27 = *(void **)(a1 + 24);
      if (v27)
      {
        *(_QWORD *)(a1 + 32) = v27;
        operator delete(v27);
      }
      *(_BYTE *)(a1 + 48) = 0;
    }
    return 1;
  }
  return v11;
}

void sub_1D3E248A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D3E248C8(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *v9;
  CFIndex v10;
  BOOL v11;
  CFIndex v12;
  const __CFArray *v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  CFTypeID v16;
  CGPoint *v17;
  CGPoint *v18;
  CGPoint *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  CGPoint *v25;
  CGPoint *v26;
  void *v27;
  CGPoint point;
  void *__p;
  CGPoint *v31;
  unint64_t v32;

  if (atomic_load(a2))
  {
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    if (v6 == CFArrayGetTypeID())
    {
      __p = 0;
      v31 = 0;
      v32 = 0;
      v7 = (const __CFArray *)atomic_load(a2);
      Count = CFArrayGetCount(v7);
      sub_1D3E25C1C(&__p, Count);
      v9 = (const __CFArray *)atomic_load(a2);
      v10 = CFArrayGetCount(v9);
      if (v10 < 1)
      {
        v11 = 1;
LABEL_33:
        sub_1D3E25CBC(a1 + 56, (uint64_t)&__p);
      }
      else
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = (const __CFArray *)atomic_load(a2);
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v12);
          v15 = ValueAtIndex;
          if (!ValueAtIndex)
            break;
          v16 = CFGetTypeID(ValueAtIndex);
          if (v16 != CFDictionaryGetTypeID() || !CGPointMakeWithDictionaryRepresentation(v15, &point))
            break;
          v17 = v31;
          if ((unint64_t)v31 >= v32)
          {
            v19 = (CGPoint *)__p;
            v20 = ((char *)v31 - (_BYTE *)__p) >> 4;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 60)
              sub_1D3D6D4F8();
            v22 = v32 - (_QWORD)__p;
            if ((uint64_t)(v32 - (_QWORD)__p) >> 3 > v21)
              v21 = v22 >> 3;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
              v23 = 0xFFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
              v23 = (unint64_t)sub_1D3D6DB64(v23);
            else
              v24 = 0;
            v25 = (CGPoint *)(v23 + 16 * v20);
            *v25 = point;
            v26 = v25;
            if (v17 != v19)
            {
              do
              {
                v26[-1] = v17[-1];
                --v26;
                --v17;
              }
              while (v17 != v19);
              v17 = (CGPoint *)__p;
            }
            v18 = v25 + 1;
            __p = v26;
            v32 = v23 + 16 * v24;
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v31 = point;
            v18 = v17 + 1;
          }
          v31 = v18;
          v11 = ++v12 >= v10;
          if (v12 == v10)
            goto LABEL_33;
        }
      }
      if (__p)
        operator delete(__p);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v27 = *(void **)(a1 + 56);
      if (v27)
      {
        *(_QWORD *)(a1 + 64) = v27;
        operator delete(v27);
      }
      *(_BYTE *)(a1 + 80) = 0;
    }
    return 1;
  }
  return v11;
}

void sub_1D3E24AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3E24AF0(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFBoolean *v7;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 89))
      *(_BYTE *)(a1 + 89) = 0;
    return 1;
  }
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  if (v6 == CFBooleanGetTypeID())
  {
    v7 = (const __CFBoolean *)atomic_load(a2);
    *(_WORD *)(a1 + 88) = (CFBooleanGetValue(v7) != 0) | 0x100;
    return 1;
  }
  return 0;
}

uint64_t sub_1D3E24B6C(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 12);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 12, &dword_1D3E7565C) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E24C2C(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 8);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 8, (unsigned int *)"\b") + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E24CEC(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 13);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 13, &dword_1D3E75660) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E24DAC(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  uint64_t **v7;
  uint64_t v8;
  const __CFBoolean *v9;
  int Value;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 18);
    return 1;
  }
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  if (v6 == CFBooleanGetTypeID())
  {
    v7 = (uint64_t **)(a1 + 96);
    if (!*(_BYTE *)(a1 + 120))
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      v8 = a1 + 104;
      *(_QWORD *)(v8 - 8) = v8;
      *(_BYTE *)(v8 + 16) = 1;
    }
    v9 = (const __CFBoolean *)atomic_load(a2);
    Value = CFBooleanGetValue(v9);
    *((_DWORD *)sub_1D3D7F308(v7, 18, &dword_1D3E75670) + 8) = Value;
    return 1;
  }
  return 0;
}

uint64_t sub_1D3E24E58(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 16);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 16, &dword_1D3E75668) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E24F18(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 17);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 17, &dword_1D3E7566C) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E24FD8(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 22);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 22, dword_1D3E75680) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E25098(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 21);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 21, &dword_1D3E7567C) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E25158(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 120))
      sub_1D3E25800((void **)(a1 + 96), 20);
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = (uint64_t **)(a1 + 96);
      if (!*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        v11 = a1 + 104;
        *(_QWORD *)(v11 - 8) = v11;
        *(_BYTE *)(v11 + 16) = 1;
      }
      v12 = valuePtr;
      *((_DWORD *)sub_1D3D7F308(v10, 20, &dword_1D3E75678) + 8) = v12;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E25218(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFBoolean *v7;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 148) && *(_BYTE *)(a1 + 145))
      *(_BYTE *)(a1 + 145) = 0;
    return 1;
  }
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  if (v6 == CFBooleanGetTypeID())
  {
    if (!*(_BYTE *)(a1 + 148))
    {
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
      *(_BYTE *)(a1 + 148) = 1;
    }
    v7 = (const __CFBoolean *)atomic_load(a2);
    *(_WORD *)(a1 + 144) = (CFBooleanGetValue(v7) != 0) | 0x100;
    return 1;
  }
  return 0;
}

uint64_t sub_1D3E252B4(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  int valuePtr;

  if (atomic_load(a2))
  {
    valuePtr = 0;
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    TypeID = CFNumberGetTypeID();
    result = 0;
    if (v6 == TypeID)
    {
      v9 = (const __CFNumber *)atomic_load(a2);
      result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      if ((_DWORD)result)
      {
        if (!*(_BYTE *)(a1 + 148))
        {
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 136) = 0;
          *(_DWORD *)(a1 + 144) = 0;
          *(_BYTE *)(a1 + 148) = 1;
        }
        *(_DWORD *)(a1 + 128) = valuePtr;
        result = 1;
        *(_BYTE *)(a1 + 132) = 1;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 148) && *(_BYTE *)(a1 + 132))
      *(_BYTE *)(a1 + 132) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_1D3E2536C(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  int valuePtr;

  if (atomic_load(a2))
  {
    valuePtr = 0;
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    TypeID = CFNumberGetTypeID();
    result = 0;
    if (v6 == TypeID)
    {
      v9 = (const __CFNumber *)atomic_load(a2);
      result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      if ((_DWORD)result)
      {
        if (!*(_BYTE *)(a1 + 148))
        {
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 136) = 0;
          *(_DWORD *)(a1 + 144) = 0;
          *(_BYTE *)(a1 + 148) = 1;
        }
        *(_DWORD *)(a1 + 136) = valuePtr;
        result = 1;
        *(_BYTE *)(a1 + 140) = 1;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 148) && *(_BYTE *)(a1 + 140))
      *(_BYTE *)(a1 + 140) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_1D3E25420(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  _OWORD *v7;
  const __CFBoolean *v8;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 192))
      *(_BYTE *)(a1 + 152) = 0;
    return 1;
  }
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  if (v6 == CFBooleanGetTypeID())
  {
    v7 = (_OWORD *)(a1 + 152);
    if (!*(_BYTE *)(a1 + 192))
    {
      *(_QWORD *)(a1 + 184) = 0;
      *v7 = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v8 = (const __CFBoolean *)atomic_load(a2);
    *(_BYTE *)v7 = CFBooleanGetValue(v8) != 0;
    return 1;
  }
  return 0;
}

uint64_t sub_1D3E254B8(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFNumber *v7;
  uint64_t result;
  uint64_t valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 192))
      *(_QWORD *)(a1 + 160) = 0;
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  if (v6 == CFNumberGetTypeID())
  {
    v7 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v7, kCFNumberCFIndexType, &valuePtr);
    if (!(_DWORD)result)
      return result;
    if (!*(_BYTE *)(a1 + 192))
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_BYTE *)(a1 + 192) = 1;
    }
    *(_QWORD *)(a1 + 160) = valuePtr;
    return 1;
  }
  return 0;
}

uint64_t sub_1D3E25564(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  const __CFNumber *v7;
  uint64_t result;
  uint64_t valuePtr;

  if (atomic_load(a2))
  {
    valuePtr = 0;
    v5 = (const void *)atomic_load(a2);
    v6 = CFGetTypeID(v5);
    if (v6 == CFNumberGetTypeID())
    {
      v7 = (const __CFNumber *)atomic_load(a2);
      result = CFNumberGetValue(v7, kCFNumberCFIndexType, &valuePtr);
      if ((_DWORD)result)
      {
        if (!*(_BYTE *)(a1 + 192))
        {
          *(_QWORD *)(a1 + 184) = 0;
          *(_OWORD *)(a1 + 168) = 0u;
          *(_OWORD *)(a1 + 152) = 0u;
          *(_BYTE *)(a1 + 192) = 1;
        }
        *(_QWORD *)(a1 + 168) = valuePtr;
        result = 1;
        *(_BYTE *)(a1 + 176) = 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 192) && *(_BYTE *)(a1 + 176))
      *(_BYTE *)(a1 + 176) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_1D3E25620(uint64_t a1, unint64_t *a2)
{
  const void *v3;
  unint64_t *v4;
  const void *v5;

  if (atomic_load(a2))
  {
    if (!*(_BYTE *)(a1 + 192))
    {
      *(_QWORD *)(a1 + 184) = 0;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v3 = (const void *)atomic_load(a2);
    sub_1D3D95C6C((unint64_t *)(a1 + 184), v3);
  }
  else if (*(_BYTE *)(a1 + 192))
  {
    v4 = (unint64_t *)(a1 + 184);
    do
      v5 = (const void *)__ldaxr(v4);
    while (__stlxr(0, v4));
    if (v5)
      CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1D3E25688(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  __int16 v10;
  unsigned int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 204) && *(_BYTE *)(a1 + 201))
      *(_BYTE *)(a1 + 201) = 0;
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = valuePtr;
      if (valuePtr > 0xFF)
        return 0;
      if (!*(_BYTE *)(a1 + 204))
      {
        *(_DWORD *)(a1 + 200) = 0;
        *(_BYTE *)(a1 + 204) = 1;
      }
      *(_WORD *)(a1 + 200) = v10 | 0x100;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1D3E25744(uint64_t a1, unint64_t *a2)
{
  const void *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  uint64_t result;
  const __CFNumber *v9;
  __int16 v10;
  unsigned int valuePtr;

  if (!atomic_load(a2))
  {
    if (*(_BYTE *)(a1 + 204) && *(_BYTE *)(a1 + 203))
      *(_BYTE *)(a1 + 203) = 0;
    return 1;
  }
  valuePtr = 0;
  v5 = (const void *)atomic_load(a2);
  v6 = CFGetTypeID(v5);
  TypeID = CFNumberGetTypeID();
  result = 0;
  if (v6 == TypeID)
  {
    v9 = (const __CFNumber *)atomic_load(a2);
    result = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      v10 = valuePtr;
      if (valuePtr > 0xFF)
        return 0;
      if (!*(_BYTE *)(a1 + 204))
      {
        *(_DWORD *)(a1 + 200) = 0;
        *(_BYTE *)(a1 + 204) = 1;
      }
      *(_WORD *)(a1 + 202) = v10 | 0x100;
      return 1;
    }
  }
  return result;
}

void sub_1D3E25800(void **a1, int a2)
{
  char *v2;
  _QWORD *v3;
  _DWORD *v5;
  char *v6;
  int v7;
  BOOL v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  char **v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = a1 + 1;
  v2 = (char *)a1[1];
  if (!v2)
    return;
  v5 = a1 + 1;
  v6 = v2;
  do
  {
    v7 = *((_DWORD *)v6 + 7);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (void **)v6;
    else
      v9 = (void **)(v6 + 8);
    if (!v8)
      v5 = v6;
    v6 = (char *)*v9;
  }
  while (*v9);
  if (v5 == (_DWORD *)v3 || v5[7] > a2)
    return;
  v10 = (_QWORD *)*((_QWORD *)v5 + 1);
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  else
  {
    v12 = v5;
    do
    {
      v11 = (_QWORD *)*((_QWORD *)v12 + 2);
      v32 = *v11 == (_QWORD)v12;
      v12 = v11;
    }
    while (!v32);
  }
  if (*a1 == v5)
    *a1 = v11;
  a1[2] = (char *)a1[2] - 1;
  v13 = *(_QWORD *)v5;
  v14 = (char *)v5;
  if (*(_QWORD *)v5)
  {
    v15 = (char *)*((_QWORD *)v5 + 1);
    if (!v15)
    {
      v14 = (char *)v5;
      goto LABEL_26;
    }
    do
    {
      v14 = v15;
      v15 = *(char **)v15;
    }
    while (v15);
  }
  v13 = *((_QWORD *)v14 + 1);
  if (v13)
  {
LABEL_26:
    v16 = 0;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    goto LABEL_27;
  }
  v16 = 1;
LABEL_27:
  v17 = (char **)*((_QWORD *)v14 + 2);
  v18 = *v17;
  if (*v17 == v14)
  {
    *v17 = (char *)v13;
    if (v14 == v2)
    {
      v18 = 0;
      v2 = (char *)v13;
    }
    else
    {
      v18 = v17[1];
    }
  }
  else
  {
    v17[1] = (char *)v13;
  }
  v19 = v14[24];
  if (v14 != (char *)v5)
  {
    v20 = *((_QWORD *)v5 + 2);
    *((_QWORD *)v14 + 2) = v20;
    *(_QWORD *)(v20 + 8 * (**((_QWORD **)v5 + 2) != (_QWORD)v5)) = v14;
    v22 = *(_QWORD *)v5;
    v21 = *((_QWORD *)v5 + 1);
    *(_QWORD *)(v22 + 16) = v14;
    *(_QWORD *)v14 = v22;
    *((_QWORD *)v14 + 1) = v21;
    if (v21)
      *(_QWORD *)(v21 + 16) = v14;
    v14[24] = *((_BYTE *)v5 + 24);
    if (v2 == (char *)v5)
      v2 = v14;
  }
  if (!v19 || !v2)
    goto LABEL_70;
  if (!v16)
  {
    *(_BYTE *)(v13 + 24) = 1;
    goto LABEL_70;
  }
  while (1)
  {
    v23 = *((_QWORD *)v18 + 2);
    if (*(char **)v23 != v18)
      break;
    if (!v18[24])
    {
      v18[24] = 1;
      *(_BYTE *)(v23 + 24) = 0;
      v29 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v23 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v23;
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v18;
      *((_QWORD *)v18 + 1) = v23;
      *(_QWORD *)(v23 + 16) = v18;
      if (v2 == (char *)v23)
        v2 = v18;
      v18 = *(char **)v23;
    }
    v30 = *(char **)v18;
    if (*(_QWORD *)v18 && !v30[24])
      goto LABEL_87;
    v31 = (uint64_t *)*((_QWORD *)v18 + 1);
    if (v31 && !*((_BYTE *)v31 + 24))
    {
      if (v30 && !v30[24])
      {
LABEL_87:
        v31 = (uint64_t *)v18;
      }
      else
      {
        *((_BYTE *)v31 + 24) = 1;
        v18[24] = 0;
        v37 = *v31;
        *((_QWORD *)v18 + 1) = *v31;
        if (v37)
          *(_QWORD *)(v37 + 16) = v18;
        v31[2] = *((_QWORD *)v18 + 2);
        *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v31;
        *v31 = (uint64_t)v18;
        *((_QWORD *)v18 + 2) = v31;
        v30 = v18;
      }
      v34 = v31[2];
      *((_BYTE *)v31 + 24) = *(_BYTE *)(v34 + 24);
      *(_BYTE *)(v34 + 24) = 1;
      v30[24] = 1;
      v35 = *(uint64_t **)v34;
      v38 = *(_QWORD *)(*(_QWORD *)v34 + 8);
      *(_QWORD *)v34 = v38;
      if (v38)
        *(_QWORD *)(v38 + 16) = v34;
      v35[2] = *(_QWORD *)(v34 + 16);
      *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v35;
      v35[1] = v34;
      goto LABEL_91;
    }
    v18[24] = 0;
    v28 = (char *)*((_QWORD *)v18 + 2);
    if (v28[24])
      v32 = v28 == v2;
    else
      v32 = 1;
    if (v32)
      goto LABEL_72;
LABEL_68:
    v18 = *(char **)(*((_QWORD *)v28 + 2) + 8 * (**((_QWORD **)v28 + 2) == (_QWORD)v28));
  }
  if (!v18[24])
  {
    v18[24] = 1;
    *(_BYTE *)(v23 + 24) = 0;
    v24 = *(uint64_t **)(v23 + 8);
    v25 = *v24;
    *(_QWORD *)(v23 + 8) = *v24;
    if (v25)
      *(_QWORD *)(v25 + 16) = v23;
    v24[2] = *(_QWORD *)(v23 + 16);
    *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
    *v24 = v23;
    *(_QWORD *)(v23 + 16) = v24;
    if (v2 == *(char **)v18)
      v2 = v18;
    v18 = *(char **)(*(_QWORD *)v18 + 8);
  }
  v26 = *(char **)v18;
  if (!*(_QWORD *)v18 || v26[24])
  {
    v27 = (char *)*((_QWORD *)v18 + 1);
    if (v27 && !v27[24])
      goto LABEL_78;
    v18[24] = 0;
    v28 = (char *)*((_QWORD *)v18 + 2);
    if (v28 == v2)
    {
      v28 = v2;
LABEL_72:
      v28[24] = 1;
      goto LABEL_70;
    }
    if (!v28[24])
      goto LABEL_72;
    goto LABEL_68;
  }
  v27 = (char *)*((_QWORD *)v18 + 1);
  if (v27 && !v27[24])
  {
LABEL_78:
    v26 = v18;
  }
  else
  {
    v26[24] = 1;
    v18[24] = 0;
    v33 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v18 = v33;
    if (v33)
      *(_QWORD *)(v33 + 16) = v18;
    *((_QWORD *)v26 + 2) = *((_QWORD *)v18 + 2);
    *(_QWORD *)(*((_QWORD *)v18 + 2) + 8 * (**((_QWORD **)v18 + 2) != (_QWORD)v18)) = v26;
    *((_QWORD *)v26 + 1) = v18;
    *((_QWORD *)v18 + 2) = v26;
    v27 = v18;
  }
  v34 = *((_QWORD *)v26 + 2);
  v26[24] = *(_BYTE *)(v34 + 24);
  *(_BYTE *)(v34 + 24) = 1;
  v27[24] = 1;
  v35 = *(uint64_t **)(v34 + 8);
  v36 = *v35;
  *(_QWORD *)(v34 + 8) = *v35;
  if (v36)
    *(_QWORD *)(v36 + 16) = v34;
  v35[2] = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v35;
  *v35 = v34;
LABEL_91:
  *(_QWORD *)(v34 + 16) = v35;
LABEL_70:
  operator delete(v5);
}

void sub_1D3E25C1C(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_1D3D6D4F8();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_1D3D6DB64(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1D3E25CBC(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

unint64_t MRCDescriptorCopyAttributes(char *cf)
{
  CFTypeID v2;
  char *v3;
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  uint64_t i;
  const void *v7;
  void (*v8)(CFDictionaryRef *__return_ptr, char *);
  const void *v10;
  unint64_t v11;
  CFTypeRef v13;
  CFDictionaryRef Copy;

  if (cf)
  {
    v2 = CFGetTypeID(cf);
    if (qword_1EFE31A20 != -1)
      dispatch_once_f(&qword_1EFE31A20, 0, (dispatch_function_t)sub_1D3DB38E0);
    if (v2 != qword_1EFE31A28)
      _os_assumes_log();
  }
  v3 = cf + 16;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 24, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 192; i += 8)
  {
    v7 = *(__CFString **)((char *)&off_1E95B3C20 + i);
    v13 = CFRetain(v7);
    v8 = (void (*)(CFDictionaryRef *__return_ptr, char *))sub_1D3E25EC4((unint64_t *)&v13);
    if (v8)
      v8(&Copy, v3);
    else
      Copy = 0;
    sub_1D3D8C70C((unint64_t *)&v13);
    if (atomic_load((unint64_t *)&Copy))
    {
      v10 = (const void *)atomic_load((unint64_t *)&Copy);
      CFDictionarySetValue(Mutable, v7, v10);
    }
    sub_1D3D8BA0C((unint64_t *)&Copy);
  }
  Copy = CFDictionaryCreateCopy(v4, Mutable);
  CFRelease(Mutable);
  do
    v11 = __ldaxr((unint64_t *)&Copy);
  while (__stlxr(0, (unint64_t *)&Copy));
  sub_1D3D8BAAC((unint64_t *)&Copy);
  return v11;
}

void sub_1D3E25E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8BAAC((unint64_t *)va);
  _Unwind_Resume(a1);
}

const void *sub_1D3E25EC4(unint64_t *a1)
{
  const void *v2;

  if (qword_1EFE319F0 != -1)
    dispatch_once_f(&qword_1EFE319F0, 0, (dispatch_function_t)sub_1D3E25F2C);
  v2 = (const void *)atomic_load(a1);
  if (v2)
    return CFDictionaryGetValue((CFDictionaryRef)qword_1EFE319E8, v2);
  else
    return 0;
}

CFDictionaryRef sub_1D3E25F2C()
{
  CFDictionaryRef result;
  CFDictionaryValueCallBacks v1;
  void *values[2];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_1E95B3D60;
  v11 = *(_OWORD *)&off_1E95B3D70;
  v12 = xmmword_1E95B3D80;
  v13 = *(_OWORD *)&off_1E95B3D90;
  v6 = xmmword_1E95B3D20;
  v7 = *(_OWORD *)&off_1E95B3D30;
  v8 = xmmword_1E95B3D40;
  v9 = *(_OWORD *)&off_1E95B3D50;
  *(_OWORD *)values = xmmword_1E95B3CE0;
  v3 = *(_OWORD *)&off_1E95B3CF0;
  v4 = xmmword_1E95B3D00;
  v5 = *(_OWORD *)&off_1E95B3D10;
  memset(&v1, 0, sizeof(v1));
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&off_1E95B3C20, (const void **)values, 24, MEMORY[0x1E0C9B390], &v1);
  qword_1EFE319E8 = (uint64_t)result;
  return result;
}

CFTypeRef sub_1D3E25FF0@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)atomic_load(a1);
  if (result)
    result = CFRetain(result);
  *a2 = result;
  return result;
}

CFTypeRef sub_1D3E2601C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)atomic_load((unint64_t *)(a1 + 8));
  if (result)
    result = CFRetain(result);
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E2604C@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;

  if (*(_BYTE *)(a1 + 20))
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, (const void *)(a1 + 16));
  else
    result = 0;
  *a2 = result;
  return result;
}

void sub_1D3E26094(uint64_t a1@<X0>, CFArrayRef *a2@<X8>)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CGPoint *i;
  CGPoint *v7;
  const void *v8;
  CFDictionaryRef DictionaryRepresentation;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4, MEMORY[0x1E0C9B378]);
    v7 = *(CGPoint **)(a1 + 24);
    for (i = *(CGPoint **)(a1 + 32); v7 != i; ++v7)
    {
      DictionaryRepresentation = CGPointCreateDictionaryRepresentation(*v7);
      v8 = (const void *)atomic_load((unint64_t *)&DictionaryRepresentation);
      CFArrayAppendValue(Mutable, v8);
      sub_1D3D8BAAC((unint64_t *)&DictionaryRepresentation);
    }
    *a2 = CFArrayCreateCopy(v4, Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1D3E2615C(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1D3D74138(v1);
  _Unwind_Resume(a1);
}

void sub_1D3E26180(uint64_t a1@<X0>, CFArrayRef *a2@<X8>)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CGPoint *i;
  CGPoint *v7;
  const void *v8;
  CFDictionaryRef DictionaryRepresentation;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4, MEMORY[0x1E0C9B378]);
    v7 = *(CGPoint **)(a1 + 56);
    for (i = *(CGPoint **)(a1 + 64); v7 != i; ++v7)
    {
      DictionaryRepresentation = CGPointCreateDictionaryRepresentation(*v7);
      v8 = (const void *)atomic_load((unint64_t *)&DictionaryRepresentation);
      CFArrayAppendValue(Mutable, v8);
      sub_1D3D8BAAC((unint64_t *)&DictionaryRepresentation);
    }
    *a2 = CFArrayCreateCopy(v4, Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1D3E26248(_Unwind_Exception *a1)
{
  unint64_t *v1;

  sub_1D3D74138(v1);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D3E2626C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef *v3;
  CFTypeRef result;

  if (*(_BYTE *)(a1 + 89))
  {
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 88))
      v3 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    result = *v3;
    if (*v3)
      result = CFRetain(result);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E262C4@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 12;
    if (v7 >= 12)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 12)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26348@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 8;
    if (v7 >= 8)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 8)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E263CC@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 13;
    if (v7 >= 13)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 13)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFTypeRef sub_1D3E26450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFTypeRef result;
  CFTypeRef *v11;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 18;
    if (v7 >= 18)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 18)
  {
    if (*(_DWORD *)(v6 + 32))
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    result = *v11;
    if (*v11)
      result = CFRetain(result);
  }
  else
  {
LABEL_12:
    result = 0;
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E264E4@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 16;
    if (v7 >= 16)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 16)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26568@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 17;
    if (v7 >= 17)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 17)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E265EC@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 22;
    if (v7 >= 22)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 22)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26670@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 21;
    if (v7 >= 21)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 21)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E266F4@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  CFNumberRef result;

  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 104);
  v3 = a1 + 104;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 < 20;
    if (v7 >= 20)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(int *)(v6 + 28) <= 20)
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v6 + 32));
  else
LABEL_12:
    result = 0;
  *a2 = result;
  return result;
}

CFTypeRef sub_1D3E26778@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  BOOL v3;
  CFTypeRef result;
  CFTypeRef *v5;

  if (a1[148])
    v3 = a1[145] == 0;
  else
    v3 = 1;
  if (v3)
  {
    result = 0;
  }
  else
  {
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!a1[144])
      v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    result = *v5;
    if (*v5)
      result = CFRetain(result);
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E267DC@<X0>(_BYTE *a1@<X0>, CFNumberRef *a2@<X8>)
{
  BOOL v3;
  CFNumberRef result;

  if (a1[148])
    v3 = a1[132] == 0;
  else
    v3 = 1;
  if (v3)
    result = 0;
  else
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, a1 + 128);
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26830@<X0>(_BYTE *a1@<X0>, CFNumberRef *a2@<X8>)
{
  BOOL v3;
  CFNumberRef result;

  if (a1[148])
    v3 = a1[140] == 0;
  else
    v3 = 1;
  if (v3)
    result = 0;
  else
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, a1 + 136);
  *a2 = result;
  return result;
}

CFTypeRef sub_1D3E26884@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef *v3;
  CFTypeRef result;

  if (*(_BYTE *)(a1 + 192))
  {
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 152))
      v3 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    result = *v3;
    if (*v3)
      result = CFRetain(result);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E268DC@<X0>(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;

  if (*(_BYTE *)(a1 + 192))
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, (const void *)(a1 + 160));
  else
    result = 0;
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26928@<X0>(_BYTE *a1@<X0>, CFNumberRef *a2@<X8>)
{
  BOOL v3;
  CFNumberRef result;

  if (a1[192])
    v3 = a1[176] == 0;
  else
    v3 = 1;
  if (v3)
    result = 0;
  else
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, a1 + 168);
  *a2 = result;
  return result;
}

CFTypeRef sub_1D3E2697C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  if (*(_BYTE *)(a1 + 192))
  {
    result = (CFTypeRef)atomic_load((unint64_t *)(a1 + 184));
    if (result)
      result = CFRetain(result);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E269BC@<X0>(unsigned __int8 *a1@<X0>, CFNumberRef *a2@<X8>)
{
  BOOL v3;
  CFNumberRef result;
  int valuePtr;

  if (a1[204])
    v3 = a1[201] == 0;
  else
    v3 = 1;
  if (v3)
  {
    result = 0;
  }
  else
  {
    valuePtr = a1[200];
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  }
  *a2 = result;
  return result;
}

CFNumberRef sub_1D3E26A20@<X0>(unsigned __int8 *a1@<X0>, CFNumberRef *a2@<X8>)
{
  BOOL v3;
  CFNumberRef result;
  int valuePtr;

  if (a1[204])
    v3 = a1[203] == 0;
  else
    v3 = 1;
  if (v3)
  {
    result = 0;
  }
  else
  {
    valuePtr = a1[202];
    result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  }
  *a2 = result;
  return result;
}

unint64_t MRCDescriptorCopyAttribute(char *cf, CFTypeRef a2)
{
  CFTypeID v4;
  CFTypeRef v5;
  void (*v6)(unint64_t *__return_ptr, char *);
  unint64_t v7;
  CFTypeRef v9;
  unint64_t v10;

  if (!cf)
    goto LABEL_5;
  v4 = CFGetTypeID(cf);
  if (qword_1EFE31A20 != -1)
    dispatch_once_f(&qword_1EFE31A20, 0, (dispatch_function_t)sub_1D3DB38E0);
  if (v4 != qword_1EFE31A28)
  {
    _os_assumes_log();
    if (a2)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (a2)
    {
LABEL_6:
      v5 = CFRetain(a2);
      goto LABEL_7;
    }
  }
  v5 = 0;
LABEL_7:
  v9 = v5;
  v6 = (void (*)(unint64_t *__return_ptr, char *))sub_1D3E25EC4((unint64_t *)&v9);
  if (v6)
    v6(&v10, cf + 16);
  else
    v10 = 0;
  do
    v7 = __ldaxr(&v10);
  while (__stlxr(0, &v10));
  sub_1D3D8BA0C(&v10);
  sub_1D3D8C70C((unint64_t *)&v9);
  return v7;
}

void sub_1D3E26B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  sub_1D3D8C70C(&a9);
  _Unwind_Resume(a1);
}

unint64_t MRCDescriptorDecodePayload(const void *a1, unint64_t *a2)
{
  return MRCDescriptorDecodePayloadWithOptions(a1, 0, a2);
}

unint64_t MRCDescriptorDecodePayloadWithOptions(const void *a1, const void *a2, unint64_t *a3)
{
  NSObject *v6;
  CFTypeID v7;
  CFTypeRef v8;
  unint64_t v9;
  CFTypeRef v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB89E30 != -1)
    dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
  v6 = qword_1EDB89E38;
  if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadWithOptions: enter", buf, 2u);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138739971;
    v13 = (uint64_t)a1;
    _os_log_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadWithOptions: descriptor: %{sensitive}@", buf, 0xCu);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    v13 = (uint64_t)a2;
    _os_log_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadWithOptions: options: %{public}@", buf, 0xCu);
  }
  if (a1)
  {
    v7 = CFGetTypeID(a1);
    if (qword_1EFE31A20 != -1)
      dispatch_once_f(&qword_1EFE31A20, 0, (dispatch_function_t)sub_1D3DB38E0);
    if (v7 != qword_1EFE31A28)
    {
      _os_assumes_log();
      if (a2)
        goto LABEL_14;
LABEL_23:
      v8 = 0;
      goto LABEL_15;
    }
  }
  if (!a2)
    goto LABEL_23;
LABEL_14:
  v8 = CFRetain(a2);
LABEL_15:
  v11 = v8;
  sub_1D3E0D6AC((unint64_t *)buf, (uint64_t)a1 + 16, (unint64_t *)&v11, 0, a3);
  do
    v9 = __ldaxr((unint64_t *)buf);
  while (__stlxr(0, (unint64_t *)buf));
  sub_1D3D8C70C((unint64_t *)buf);
  sub_1D3D8BAAC((unint64_t *)&v11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 141558275;
    v13 = 1752392040;
    v14 = 2117;
    v15 = v9;
    _os_log_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadWithOptions: decodedPayloadString: %{sensitive, mask.hash}@", buf, 0x16u);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D3D6B000, v6, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadWithOptions: leave", buf, 2u);
  }
  return v9;
}

void sub_1D3E26E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

unint64_t MRCDescriptorDecodePayloadAndSupplementalPayload(const void *a1, unint64_t *a2, unint64_t *a3)
{
  return MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions(a1, a2, 0, a3);
}

unint64_t MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions(const void *a1, unint64_t *a2, const void *a3, unint64_t *a4)
{
  NSObject *v8;
  CFTypeID v9;
  CFTypeRef v10;
  unint64_t v11;
  const __CFString *v12;
  CFTypeRef v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB89E30 != -1)
    dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
  v8 = qword_1EDB89E38;
  if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: enter", buf, 2u);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138739971;
    v16 = (uint64_t)a1;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: descriptor: %{sensitive}@", buf, 0xCu);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    v16 = (uint64_t)a3;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: options: %{public}@", buf, 0xCu);
  }
  if (a1)
  {
    v9 = CFGetTypeID(a1);
    if (qword_1EFE31A20 != -1)
      dispatch_once_f(&qword_1EFE31A20, 0, (dispatch_function_t)sub_1D3DB38E0);
    if (v9 != qword_1EFE31A28)
    {
      _os_assumes_log();
      if (a3)
        goto LABEL_14;
LABEL_30:
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (!a3)
    goto LABEL_30;
LABEL_14:
  v10 = CFRetain(a3);
LABEL_15:
  v14 = v10;
  sub_1D3E0D6AC((unint64_t *)buf, (uint64_t)a1 + 16, (unint64_t *)&v14, a2, a4);
  do
    v11 = __ldaxr((unint64_t *)buf);
  while (__stlxr(0, (unint64_t *)buf));
  sub_1D3D8C70C((unint64_t *)buf);
  sub_1D3D8BAAC((unint64_t *)&v14);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 141558275;
    v16 = 1752392040;
    v17 = 2117;
    v18 = v11;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: decodedPayloadString: %{sensitive, mask.hash}@", buf, 0x16u);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      v12 = (const __CFString *)*a2;
      if (!*a2)
        v12 = CFSTR("<null>");
    }
    else
    {
      v12 = CFSTR("<N/A>");
    }
    *(_DWORD *)buf = 141558275;
    v16 = 1752392040;
    v17 = 2117;
    v18 = (unint64_t)v12;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: supplementalPayloadStringValue: %{sensitive, mask.hash}@", buf, 0x16u);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D3D6B000, v8, OS_LOG_TYPE_INFO, "MRCDescriptorDecodePayloadAndSupplementalPayloadWithOptions: leave", buf, 2u);
  }
  return v11;
}

void sub_1D3E27150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3E2716C(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  unint64_t v4;
  double *v5;
  uint64_t v6;
  unint64_t v8;
  double *v9;
  double *v10;
  int32x2_t v11;

  if (!*(_BYTE *)(a1 + 24))
    return !*(_BYTE *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(double **)a1;
  v2 = *(double **)(a1 + 8);
  v4 = ((uint64_t)v2 - *(_QWORD *)a1) >> 4;
  v5 = *(double **)a2;
  if (v4 != (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4)
    return 0;
  if (v2 == v3)
    return 1;
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = ((uint64_t)v2 - *(_QWORD *)a1) >> 4;
  if (*v3 != *v5 || v3[1] != v5[1])
    return 0;
  v8 = 0;
  v9 = v3 + 2;
  v10 = v5 + 2;
  while (v6 - 1 != v8)
  {
    v11 = vmovn_s64(vceqq_f64(*(float64x2_t *)&v9[2 * v8], *(float64x2_t *)&v10[2 * v8]));
    ++v8;
    if ((v11.i32[0] & v11.i32[1] & 1) == 0)
      return v8 >= v4;
  }
  v8 = v6;
  return v8 >= v4;
}

uint64_t sub_1D3E27220(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _BOOL8 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_BYTE *)(a1 + 24))
    v2 = *(_BYTE *)(a2 + 24) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 24) != 0) ^ (*(_BYTE *)(a2 + 24) != 0);
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 1;
  v6 = *(_QWORD **)a1;
  v4 = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6 == v4)
    return 0;
  v7 = *(_QWORD **)a2;
  while (1)
  {
    v8 = *((_DWORD *)v5 + 7) == *((_DWORD *)v7 + 7) && *((_DWORD *)v5 + 8) == *((_DWORD *)v7 + 8);
    v3 = !v8;
    if (!v8)
      break;
    v9 = (_QWORD *)v5[1];
    v10 = v5;
    if (v9)
    {
      do
      {
        v5 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v10[2];
        v2 = *v5 == (_QWORD)v10;
        v10 = v5;
      }
      while (!v2);
    }
    v11 = (_QWORD *)v7[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v7[2];
        v2 = *v12 == (_QWORD)v7;
        v7 = v12;
      }
      while (!v2);
    }
    v7 = v12;
    if (v5 == v4)
      return 0;
  }
  return v3;
}

BOOL sub_1D3E27300(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a1 + 4))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 4) != 0) != (v2 != 0))
      return 0;
  }
  else if (*(_DWORD *)a1 != *(_DWORD *)a2)
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 12);
  if (*(_BYTE *)(a1 + 12))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 12) != 0) != (v4 != 0))
      return 0;
  }
  else if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 17) && *(_BYTE *)(a2 + 17))
  {
    v6 = *(unsigned __int8 *)(a1 + 16);
    v7 = *(unsigned __int8 *)(a2 + 16);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 17) != 0;
    v6 = *(unsigned __int8 *)(a1 + 17) != 0;
  }
  return v6 == v7;
}

BOOL sub_1D3E273C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  const void *v4;
  const void *v5;

  if (*a1 != *a2 || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    return 0;
  v2 = a2[24];
  if (a1[24])
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((a1[24] != 0) != (v2 != 0))
      return 0;
  }
  else if (*((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2))
  {
    return 0;
  }
  v4 = (const void *)atomic_load((unint64_t *)a2 + 4);
  v5 = (const void *)atomic_load((unint64_t *)a1 + 4);
  return v5 == v4 || v4 && v5 && CFEqual(v5, v4);
}

BOOL sub_1D3E27468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = a2[1];
  if (a1[1])
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((a1[1] != 0) != (v2 != 0))
      return 0;
  }
  else if (*a1 != *a2)
  {
    return 0;
  }
  v4 = a2[3];
  if (a1[3])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v7 = v4 != 0;
    v6 = a1[3] != 0;
  }
  else
  {
    v6 = a1[2];
    v7 = a2[2];
  }
  return v6 == v7;
}

CFStringRef sub_1D3E274F0(uint64_t a1, int a2)
{
  const __CFAllocator *v4;
  __CFString *v6;
  __CFString *v8;
  unint64_t v9;
  __CFString *v11;
  CFStringRef Copy;
  unint64_t v13;
  __CFString *v14;
  __CFString *v15;
  _QWORD *v16;
  _QWORD *i;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  _QWORD *v21;
  _QWORD *j;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  const char *v26;
  __CFString *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t *v45;
  __CFString *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t *v51;
  __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t *v57;
  __CFString *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t *v63;
  __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t *v69;
  __CFString *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  uint64_t *v75;
  __CFString *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  __CFString *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t *v87;
  __CFString *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  uint64_t *v93;
  __CFString *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  uint64_t *v99;
  __CFString *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t *v105;
  __CFString *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  uint64_t *v111;
  __CFString *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  uint64_t *v117;
  __CFString *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  uint64_t *v123;
  __CFString *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  uint64_t *v129;
  __CFString *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  BOOL v134;
  uint64_t *v135;
  __CFString *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  BOOL v140;
  uint64_t *v141;
  __CFString *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  BOOL v146;
  uint64_t *v147;
  __CFString *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  BOOL v152;
  uint64_t *v153;
  __CFString *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  BOOL v158;
  uint64_t *v159;
  __CFString *v160;
  uint64_t v161;
  int v162;
  BOOL v163;
  uint64_t *v164;
  __CFString *v165;
  __CFString *v166;
  __CFString *v167;
  __CFString *v168;
  __CFString *v169;
  __CFString *v170;
  __CFString *v171;
  const char *v172;
  __CFString *v173;
  __CFString *v174;
  __CFString *v175;
  const char *v176;
  __CFString *v177;
  unint64_t v178;
  __CFString *v179;
  unint64_t v180;
  __CFString *v182;
  unint64_t v183;
  __CFString *v184;
  __CFString *v185;
  __CFString *v186;
  __CFString *v187;
  __CFString *v188;
  __CFString *v189;
  const __CFString *v190;
  unint64_t v192;
  CFMutableStringRef Mutable;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (atomic_load((unint64_t *)&Mutable))
  {
    v6 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppendFormat(v6, 0, CFSTR("<%s %p> {\n"), "MRCDescriptor", a1 - 16);
    if (atomic_load((unint64_t *)a1))
    {
      v8 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      v9 = atomic_load((unint64_t *)a1);
      CFStringAppendFormat(v8, 0, CFSTR("    symbology %@\n"), v9);
    }
    if (atomic_load((unint64_t *)(a1 + 8)))
    {
      v11 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      if (a2)
      {
        CFStringAppendFormat(v11, 0, CFSTR("    rawPayloadData %@\n"), CFSTR("<redacted>"));
      }
      else
      {
        sub_1D3E28370(&v192, (unint64_t *)(a1 + 8));
        v13 = atomic_load(&v192);
        CFStringAppendFormat(v11, 0, CFSTR("    rawPayloadData %@\n"), v13);
        sub_1D3D8C70C(&v192);
      }
    }
    if (*(_BYTE *)(a1 + 20))
    {
      v14 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppendFormat(v14, 0, CFSTR("    confidence %f\n"), *(float *)(a1 + 16));
    }
    if (*(_BYTE *)(a1 + 48))
    {
      v15 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v15, CFSTR("    cornerPoints {\n"));
      v16 = *(_QWORD **)(a1 + 24);
      for (i = *(_QWORD **)(a1 + 32); v16 != i; v16 += 2)
      {
        v18 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v18, 0, CFSTR("        {%.*g, %.*g}\n"), 17, *v16, 17, v16[1]);
      }
      v19 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v19, CFSTR("    }\n"));
    }
    if (*(_BYTE *)(a1 + 80))
    {
      v20 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v20, CFSTR("    finderPatternPoints {\n"));
      v21 = *(_QWORD **)(a1 + 56);
      for (j = *(_QWORD **)(a1 + 64); v21 != j; v21 += 2)
      {
        v23 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v23, 0, CFSTR("        {%.*g, %.*g}\n"), 17, *v21, 17, v21[1]);
      }
      v24 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v24, CFSTR("    }\n"));
    }
    if (*(_BYTE *)(a1 + 89))
    {
      v25 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      if (*(_BYTE *)(a1 + 88))
        v26 = "true";
      else
        v26 = "false";
      CFStringAppendFormat(v25, 0, CFSTR("    isColorInverted %s\n"), v26);
    }
    if (*(_BYTE *)(a1 + 120))
    {
      v27 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v27, CFSTR("    zxingSymbolMetadata {\n"));
      v29 = (uint64_t *)(a1 + 104);
      v28 = *(_QWORD *)(a1 + 104);
      if (v28)
      {
        v30 = a1 + 104;
        v31 = *(_QWORD *)(a1 + 104);
        do
        {
          v32 = *(_DWORD *)(v31 + 28);
          v33 = v32 < 0;
          if (v32 >= 0)
            v34 = (uint64_t *)v31;
          else
            v34 = (uint64_t *)(v31 + 8);
          if (!v33)
            v30 = v31;
          v31 = *v34;
        }
        while (*v34);
        if ((uint64_t *)v30 == v29
          || *(int *)(v30 + 28) > 0
          || (v166 = (__CFString *)atomic_load((unint64_t *)&Mutable),
              CFStringAppendFormat(v166, 0, CFSTR("        upperLeftX %d\n"), *(unsigned int *)(v30 + 32)),
              (v28 = *v29) != 0))
        {
          v35 = a1 + 104;
          v36 = v28;
          do
          {
            v37 = *(_DWORD *)(v36 + 28);
            v38 = v37 < 1;
            if (v37 >= 1)
              v39 = (uint64_t *)v36;
            else
              v39 = (uint64_t *)(v36 + 8);
            if (!v38)
              v35 = v36;
            v36 = *v39;
          }
          while (*v39);
          if ((uint64_t *)v35 != v29 && *(int *)(v35 + 28) <= 1)
          {
            v40 = (__CFString *)atomic_load((unint64_t *)&Mutable);
            CFStringAppendFormat(v40, 0, CFSTR("        upperLeftY %d\n"), *(unsigned int *)(v35 + 32));
            v28 = *v29;
          }
          if (v28)
          {
            v41 = a1 + 104;
            v42 = v28;
            do
            {
              v43 = *(_DWORD *)(v42 + 28);
              v44 = v43 < 2;
              if (v43 >= 2)
                v45 = (uint64_t *)v42;
              else
                v45 = (uint64_t *)(v42 + 8);
              if (!v44)
                v41 = v42;
              v42 = *v45;
            }
            while (*v45);
            if ((uint64_t *)v41 != v29 && *(int *)(v41 + 28) <= 2)
            {
              v46 = (__CFString *)atomic_load((unint64_t *)&Mutable);
              CFStringAppendFormat(v46, 0, CFSTR("        upperRightX %d\n"), *(unsigned int *)(v41 + 32));
              v28 = *v29;
            }
            if (v28)
            {
              v47 = a1 + 104;
              v48 = v28;
              do
              {
                v49 = *(_DWORD *)(v48 + 28);
                v50 = v49 < 3;
                if (v49 >= 3)
                  v51 = (uint64_t *)v48;
                else
                  v51 = (uint64_t *)(v48 + 8);
                if (!v50)
                  v47 = v48;
                v48 = *v51;
              }
              while (*v51);
              if ((uint64_t *)v47 != v29 && *(int *)(v47 + 28) <= 3)
              {
                v52 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                CFStringAppendFormat(v52, 0, CFSTR("        upperRightY %d\n"), *(unsigned int *)(v47 + 32));
                v28 = *v29;
              }
              if (v28)
              {
                v53 = a1 + 104;
                v54 = v28;
                do
                {
                  v55 = *(_DWORD *)(v54 + 28);
                  v56 = v55 < 4;
                  if (v55 >= 4)
                    v57 = (uint64_t *)v54;
                  else
                    v57 = (uint64_t *)(v54 + 8);
                  if (!v56)
                    v53 = v54;
                  v54 = *v57;
                }
                while (*v57);
                if ((uint64_t *)v53 != v29 && *(int *)(v53 + 28) <= 4)
                {
                  v58 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                  CFStringAppendFormat(v58, 0, CFSTR("        lowerRightX %d\n"), *(unsigned int *)(v53 + 32));
                  v28 = *v29;
                }
                if (v28)
                {
                  v59 = a1 + 104;
                  v60 = v28;
                  do
                  {
                    v61 = *(_DWORD *)(v60 + 28);
                    v62 = v61 < 5;
                    if (v61 >= 5)
                      v63 = (uint64_t *)v60;
                    else
                      v63 = (uint64_t *)(v60 + 8);
                    if (!v62)
                      v59 = v60;
                    v60 = *v63;
                  }
                  while (*v63);
                  if ((uint64_t *)v59 != v29 && *(int *)(v59 + 28) <= 5)
                  {
                    v64 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                    CFStringAppendFormat(v64, 0, CFSTR("        lowerRightY %d\n"), *(unsigned int *)(v59 + 32));
                    v28 = *v29;
                  }
                  if (v28)
                  {
                    v65 = a1 + 104;
                    v66 = v28;
                    do
                    {
                      v67 = *(_DWORD *)(v66 + 28);
                      v68 = v67 < 6;
                      if (v67 >= 6)
                        v69 = (uint64_t *)v66;
                      else
                        v69 = (uint64_t *)(v66 + 8);
                      if (!v68)
                        v65 = v66;
                      v66 = *v69;
                    }
                    while (*v69);
                    if ((uint64_t *)v65 != v29 && *(int *)(v65 + 28) <= 6)
                    {
                      v70 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                      CFStringAppendFormat(v70, 0, CFSTR("        lowerLeftX %d\n"), *(unsigned int *)(v65 + 32));
                      v28 = *v29;
                    }
                    if (v28)
                    {
                      v71 = a1 + 104;
                      v72 = v28;
                      do
                      {
                        v73 = *(_DWORD *)(v72 + 28);
                        v74 = v73 < 7;
                        if (v73 >= 7)
                          v75 = (uint64_t *)v72;
                        else
                          v75 = (uint64_t *)(v72 + 8);
                        if (!v74)
                          v71 = v72;
                        v72 = *v75;
                      }
                      while (*v75);
                      if ((uint64_t *)v71 != v29 && *(int *)(v71 + 28) <= 7)
                      {
                        v76 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                        CFStringAppendFormat(v76, 0, CFSTR("        lowerLeftY %d\n"), *(unsigned int *)(v71 + 32));
                        v28 = *v29;
                      }
                      if (v28)
                      {
                        v77 = a1 + 104;
                        v78 = v28;
                        do
                        {
                          v79 = *(_DWORD *)(v78 + 28);
                          v80 = v79 < 8;
                          if (v79 >= 8)
                            v81 = (uint64_t *)v78;
                          else
                            v81 = (uint64_t *)(v78 + 8);
                          if (!v80)
                            v77 = v78;
                          v78 = *v81;
                        }
                        while (*v81);
                        if ((uint64_t *)v77 != v29 && *(int *)(v77 + 28) <= 8)
                        {
                          v82 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                          CFStringAppendFormat(v82, 0, CFSTR("        qrMaskingPattern %d\n"), *(unsigned int *)(v77 + 32));
                          v28 = *v29;
                        }
                        if (v28)
                        {
                          v83 = a1 + 104;
                          v84 = v28;
                          do
                          {
                            v85 = *(_DWORD *)(v84 + 28);
                            v86 = v85 < 9;
                            if (v85 >= 9)
                              v87 = (uint64_t *)v84;
                            else
                              v87 = (uint64_t *)(v84 + 8);
                            if (!v86)
                              v83 = v84;
                            v84 = *v87;
                          }
                          while (*v87);
                          if ((uint64_t *)v83 != v29 && *(int *)(v83 + 28) <= 9)
                          {
                            v88 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                            CFStringAppendFormat(v88, 0, CFSTR("        inversionState %d\n"), *(unsigned int *)(v83 + 32));
                            v28 = *v29;
                          }
                          if (v28)
                          {
                            v89 = a1 + 104;
                            v90 = v28;
                            do
                            {
                              v91 = *(_DWORD *)(v90 + 28);
                              v92 = v91 < 10;
                              if (v91 >= 10)
                                v93 = (uint64_t *)v90;
                              else
                                v93 = (uint64_t *)(v90 + 8);
                              if (!v92)
                                v89 = v90;
                              v90 = *v93;
                            }
                            while (*v93);
                            if ((uint64_t *)v89 != v29 && *(int *)(v89 + 28) <= 10)
                            {
                              v94 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                              CFStringAppendFormat(v94, 0, CFSTR("        dataRows %d\n"), *(unsigned int *)(v89 + 32));
                              v28 = *v29;
                            }
                            if (v28)
                            {
                              v95 = a1 + 104;
                              v96 = v28;
                              do
                              {
                                v97 = *(_DWORD *)(v96 + 28);
                                v98 = v97 < 11;
                                if (v97 >= 11)
                                  v99 = (uint64_t *)v96;
                                else
                                  v99 = (uint64_t *)(v96 + 8);
                                if (!v98)
                                  v95 = v96;
                                v96 = *v99;
                              }
                              while (*v99);
                              if ((uint64_t *)v95 != v29 && *(int *)(v95 + 28) <= 11)
                              {
                                v100 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                CFStringAppendFormat(v100, 0, CFSTR("        dataColumns %d\n"), *(unsigned int *)(v95 + 32));
                                v28 = *v29;
                              }
                              if (v28)
                              {
                                v101 = a1 + 104;
                                v102 = v28;
                                do
                                {
                                  v103 = *(_DWORD *)(v102 + 28);
                                  v104 = v103 < 12;
                                  if (v103 >= 12)
                                    v105 = (uint64_t *)v102;
                                  else
                                    v105 = (uint64_t *)(v102 + 8);
                                  if (!v104)
                                    v101 = v102;
                                  v102 = *v105;
                                }
                                while (*v105);
                                if ((uint64_t *)v101 != v29 && *(int *)(v101 + 28) <= 12)
                                {
                                  v106 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                  CFStringAppendFormat(v106, 0, CFSTR("        symbolVersion %d\n"), *(unsigned int *)(v101 + 32));
                                  v28 = *v29;
                                }
                                if (v28)
                                {
                                  v107 = a1 + 104;
                                  v108 = v28;
                                  do
                                  {
                                    v109 = *(_DWORD *)(v108 + 28);
                                    v110 = v109 < 13;
                                    if (v109 >= 13)
                                      v111 = (uint64_t *)v108;
                                    else
                                      v111 = (uint64_t *)(v108 + 8);
                                    if (!v110)
                                      v107 = v108;
                                    v108 = *v111;
                                  }
                                  while (*v111);
                                  if ((uint64_t *)v107 != v29 && *(int *)(v107 + 28) <= 13)
                                  {
                                    v112 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                    CFStringAppendFormat(v112, 0, CFSTR("        ecLevel %d\n"), *(unsigned int *)(v107 + 32));
                                    v28 = *v29;
                                  }
                                  if (v28)
                                  {
                                    v113 = a1 + 104;
                                    v114 = v28;
                                    do
                                    {
                                      v115 = *(_DWORD *)(v114 + 28);
                                      v116 = v115 < 14;
                                      if (v115 >= 14)
                                        v117 = (uint64_t *)v114;
                                      else
                                        v117 = (uint64_t *)(v114 + 8);
                                      if (!v116)
                                        v113 = v114;
                                      v114 = *v117;
                                    }
                                    while (*v117);
                                    if ((uint64_t *)v113 != v29 && *(int *)(v113 + 28) <= 14)
                                    {
                                      v118 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                      CFStringAppendFormat(v118, 0, CFSTR("        isMirrored %d\n"), *(unsigned int *)(v113 + 32));
                                      v28 = *v29;
                                    }
                                    if (v28)
                                    {
                                      v119 = a1 + 104;
                                      v120 = v28;
                                      do
                                      {
                                        v121 = *(_DWORD *)(v120 + 28);
                                        v122 = v121 < 15;
                                        if (v121 >= 15)
                                          v123 = (uint64_t *)v120;
                                        else
                                          v123 = (uint64_t *)(v120 + 8);
                                        if (!v122)
                                          v119 = v120;
                                        v120 = *v123;
                                      }
                                      while (*v123);
                                      if ((uint64_t *)v119 != v29 && *(int *)(v119 + 28) <= 15)
                                      {
                                        v124 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                        CFStringAppendFormat(v124, 0, CFSTR("        messageBits %d\n"), *(unsigned int *)(v119 + 32));
                                        v28 = *v29;
                                      }
                                      if (v28)
                                      {
                                        v125 = a1 + 104;
                                        v126 = v28;
                                        do
                                        {
                                          v127 = *(_DWORD *)(v126 + 28);
                                          v128 = v127 < 16;
                                          if (v127 >= 16)
                                            v129 = (uint64_t *)v126;
                                          else
                                            v129 = (uint64_t *)(v126 + 8);
                                          if (!v128)
                                            v125 = v126;
                                          v126 = *v129;
                                        }
                                        while (*v129);
                                        if ((uint64_t *)v125 != v29 && *(int *)(v125 + 28) <= 16)
                                        {
                                          v130 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                          CFStringAppendFormat(v130, 0, CFSTR("        aztecDataLayers %d\n"), *(unsigned int *)(v125 + 32));
                                          v28 = *v29;
                                        }
                                        if (v28)
                                        {
                                          v131 = a1 + 104;
                                          v132 = v28;
                                          do
                                          {
                                            v133 = *(_DWORD *)(v132 + 28);
                                            v134 = v133 < 17;
                                            if (v133 >= 17)
                                              v135 = (uint64_t *)v132;
                                            else
                                              v135 = (uint64_t *)(v132 + 8);
                                            if (!v134)
                                              v131 = v132;
                                            v132 = *v135;
                                          }
                                          while (*v135);
                                          if ((uint64_t *)v131 != v29 && *(int *)(v131 + 28) <= 17)
                                          {
                                            v136 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                            CFStringAppendFormat(v136, 0, CFSTR("        aztecDataCodewords %d\n"), *(unsigned int *)(v131 + 32));
                                            v28 = *v29;
                                          }
                                          if (v28)
                                          {
                                            v137 = a1 + 104;
                                            v138 = v28;
                                            do
                                            {
                                              v139 = *(_DWORD *)(v138 + 28);
                                              v140 = v139 < 18;
                                              if (v139 >= 18)
                                                v141 = (uint64_t *)v138;
                                              else
                                                v141 = (uint64_t *)(v138 + 8);
                                              if (!v140)
                                                v137 = v138;
                                              v138 = *v141;
                                            }
                                            while (*v141);
                                            if ((uint64_t *)v137 != v29 && *(int *)(v137 + 28) <= 18)
                                            {
                                              v142 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                              CFStringAppendFormat(v142, 0, CFSTR("        aztecIsCompact %d\n"), *(unsigned int *)(v137 + 32));
                                              v28 = *v29;
                                            }
                                            if (v28)
                                            {
                                              v143 = a1 + 104;
                                              v144 = v28;
                                              do
                                              {
                                                v145 = *(_DWORD *)(v144 + 28);
                                                v146 = v145 < 19;
                                                if (v145 >= 19)
                                                  v147 = (uint64_t *)v144;
                                                else
                                                  v147 = (uint64_t *)(v144 + 8);
                                                if (!v146)
                                                  v143 = v144;
                                                v144 = *v147;
                                              }
                                              while (*v147);
                                              if ((uint64_t *)v143 != v29 && *(int *)(v143 + 28) <= 19)
                                              {
                                                v148 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                                CFStringAppendFormat(v148, 0, CFSTR("        aztecMessageBits %d\n"), *(unsigned int *)(v143 + 32));
                                                v28 = *v29;
                                              }
                                              if (v28)
                                              {
                                                v149 = a1 + 104;
                                                v150 = v28;
                                                do
                                                {
                                                  v151 = *(_DWORD *)(v150 + 28);
                                                  v152 = v151 < 20;
                                                  if (v151 >= 20)
                                                    v153 = (uint64_t *)v150;
                                                  else
                                                    v153 = (uint64_t *)(v150 + 8);
                                                  if (!v152)
                                                    v149 = v150;
                                                  v150 = *v153;
                                                }
                                                while (*v153);
                                                if ((uint64_t *)v149 != v29 && *(int *)(v149 + 28) <= 20)
                                                {
                                                  v154 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                                  CFStringAppendFormat(v154, 0, CFSTR("        datamatrixECC %d\n"), *(unsigned int *)(v149 + 32));
                                                  v28 = *v29;
                                                }
                                                if (v28)
                                                {
                                                  v155 = a1 + 104;
                                                  v156 = v28;
                                                  do
                                                  {
                                                    v157 = *(_DWORD *)(v156 + 28);
                                                    v158 = v157 < 21;
                                                    if (v157 >= 21)
                                                      v159 = (uint64_t *)v156;
                                                    else
                                                      v159 = (uint64_t *)(v156 + 8);
                                                    if (!v158)
                                                      v155 = v156;
                                                    v156 = *v159;
                                                  }
                                                  while (*v159);
                                                  if ((uint64_t *)v155 != v29 && *(int *)(v155 + 28) <= 21)
                                                  {
                                                    v160 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                                    CFStringAppendFormat(v160, 0, CFSTR("        modulesWide %d\n"), *(unsigned int *)(v155 + 32));
                                                    v28 = *v29;
                                                  }
                                                  if (v28)
                                                  {
                                                    v161 = a1 + 104;
                                                    do
                                                    {
                                                      v162 = *(_DWORD *)(v28 + 28);
                                                      v163 = v162 < 22;
                                                      if (v162 >= 22)
                                                        v164 = (uint64_t *)v28;
                                                      else
                                                        v164 = (uint64_t *)(v28 + 8);
                                                      if (!v163)
                                                        v161 = v28;
                                                      v28 = *v164;
                                                    }
                                                    while (*v164);
                                                    if ((uint64_t *)v161 != v29 && *(int *)(v161 + 28) <= 22)
                                                    {
                                                      v165 = (__CFString *)atomic_load((unint64_t *)&Mutable);
                                                      CFStringAppendFormat(v165, 0, CFSTR("        modulesHigh %d\n"), *(unsigned int *)(v161 + 32));
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v167 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v167, CFSTR("    }\n"));
    }
    if (*(_BYTE *)(a1 + 148))
    {
      v168 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v168, CFSTR("    PDF417Metadata {\n"));
      if (*(_BYTE *)(a1 + 132))
      {
        v169 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v169, 0, CFSTR("        rowCount %d\n"), *(unsigned int *)(a1 + 128));
      }
      if (*(_BYTE *)(a1 + 140))
      {
        v170 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v170, 0, CFSTR("        columnCount %d\n"), *(unsigned int *)(a1 + 136));
      }
      if (*(_BYTE *)(a1 + 145))
      {
        v171 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        if (*(_BYTE *)(a1 + 144))
          v172 = "true";
        else
          v172 = "false";
        CFStringAppendFormat(v171, 0, CFSTR("        isCompact %s\n"), v172);
      }
      v173 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v173, CFSTR("    }\n"));
    }
    if (*(_BYTE *)(a1 + 192))
    {
      v174 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v174, CFSTR("    GS1Metadata {\n"));
      v175 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      if (*(_BYTE *)(a1 + 152))
        v176 = "true";
      else
        v176 = "false";
      CFStringAppendFormat(v175, 0, CFSTR("        isGS1DataCarrier %s\n"), v176);
      v177 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      sub_1D3E28470(&v192, *(_QWORD *)(a1 + 160));
      v178 = atomic_load(&v192);
      CFStringAppendFormat(v177, 0, CFSTR("        compositeFlag %@\n"), v178);
      sub_1D3D8C70C(&v192);
      if (*(_BYTE *)(a1 + 176))
      {
        v179 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        sub_1D3E28470(&v192, *(_QWORD *)(a1 + 168));
        v180 = atomic_load(&v192);
        CFStringAppendFormat(v179, 0, CFSTR("        supplementalCompositeFlag %@\n"), v180);
        sub_1D3D8C70C(&v192);
      }
      if (atomic_load((unint64_t *)(a1 + 184)))
      {
        v182 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        sub_1D3E28370(&v192, (unint64_t *)(a1 + 184));
        v183 = atomic_load(&v192);
        CFStringAppendFormat(v182, 0, CFSTR("        supplementalRawPayloadData %@\n"), v183);
        sub_1D3D8C70C(&v192);
      }
      v184 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v184, CFSTR("    }\n"));
    }
    if (*(_BYTE *)(a1 + 204))
    {
      v185 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v185, CFSTR("    appClipCodeMetadata {\n"));
      if (*(_BYTE *)(a1 + 201))
      {
        v186 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v186, 0, CFSTR("        metadata %hhu\n"), *(unsigned __int8 *)(a1 + 200));
      }
      if (*(_BYTE *)(a1 + 203))
      {
        v187 = (__CFString *)atomic_load((unint64_t *)&Mutable);
        CFStringAppendFormat(v187, 0, CFSTR("        dataVersion %hhu\n"), *(unsigned __int8 *)(a1 + 202));
      }
      v188 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      CFStringAppend(v188, CFSTR("    }\n"));
    }
    v189 = (__CFString *)atomic_load((unint64_t *)&Mutable);
    CFStringAppend(v189, CFSTR("}"));
    v190 = (const __CFString *)atomic_load((unint64_t *)&Mutable);
    Copy = CFStringCreateCopy(v4, v190);
  }
  else
  {
    Copy = 0;
  }
  sub_1D3D8FA0C((unint64_t *)&Mutable);
  return Copy;
}

void sub_1D3E282CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D3D8FA0C((unint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E28370(_QWORD *a1, unint64_t *a2)
{
  const __CFData *v5;
  CFIndex Length;
  uint64_t v7;
  const __CFAllocator *v8;
  const __CFData *v9;
  const UInt8 *BytePtr;
  const UInt8 *v11;
  __CFString *v12;
  unsigned int v13;
  const __CFString *v14;
  unint64_t *result;
  const __CFString *v16;
  CFMutableStringRef Mutable;

  if (!atomic_load(a2))
  {
    v16 = CFSTR("<null>");
LABEL_9:
    result = (unint64_t *)CFRetain(v16);
    *a1 = result;
    return result;
  }
  v5 = (const __CFData *)atomic_load(a2);
  Length = CFDataGetLength(v5);
  if (!Length)
  {
    v16 = CFSTR("<empty>");
    goto LABEL_9;
  }
  v7 = Length;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2 * Length);
  v9 = (const __CFData *)atomic_load(a2);
  BytePtr = CFDataGetBytePtr(v9);
  if (v7 >= 1)
  {
    v11 = BytePtr;
    do
    {
      v12 = (__CFString *)atomic_load((unint64_t *)&Mutable);
      v13 = *v11++;
      CFStringAppendFormat(v12, 0, CFSTR("%02hhx"), v13, Mutable);
      --v7;
    }
    while (v7);
  }
  v14 = (const __CFString *)atomic_load((unint64_t *)&Mutable);
  *a1 = CFStringCreateCopy(v8, v14);
  return sub_1D3D8FA0C((unint64_t *)&Mutable);
}

void sub_1D3E28458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D8FA0C((unint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1D3E28470(_QWORD *a1, uint64_t a2)
{
  const __CFString *v3;
  void *result;

  switch(a2)
  {
    case 0:
      v3 = CFSTR("none");
      goto LABEL_9;
    case 1:
      v3 = CFSTR("unknown");
      goto LABEL_9;
    case 2:
      v3 = CFSTR("linked");
      goto LABEL_9;
    case 3:
      v3 = CFSTR("GS1-type-A");
      goto LABEL_9;
    case 4:
      v3 = CFSTR("GS1-type-B");
      goto LABEL_9;
    case 5:
      v3 = CFSTR("GS1-type-C");
LABEL_9:
      result = (void *)CFRetain(v3);
      break;
    default:
      result = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%ld"), a2);
      break;
  }
  *a1 = result;
  return result;
}

_QWORD *sub_1D3E28524(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;

  v2 = 3317042773;
  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(double **)a2;
    v4 = *(double **)(a2 + 8);
    if (*(double **)a2 != v4)
    {
      v5 = 0;
      do
      {
        v6 = *v3;
        v7 = v3[1];
        v3 += 2;
        v8 = *(_QWORD *)&v6 + 2654435769;
        if (v6 == 0.0)
          v8 = 2654435769;
        v9 = *(_QWORD *)&v7 + 2654435769;
        if (v7 == 0.0)
          v9 = 2654435769;
        v5 ^= (v5 << 6) + 2654435769u + (v5 >> 2) + (((v8 >> 2) + (v8 << 6) + v9) ^ v8);
      }
      while (v3 != v4);
      v2 = v5 + 2654435769u;
    }
  }
  *result ^= v2 + (*result << 6) + (*result >> 2);
  return result;
}

uint64_t sub_1D3E285B4(unsigned int a1, __int16 a2)
{
  uint64_t v4;
  _WORD *v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  __int16 *v16;
  __int16 v17;
  void *exception;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E95AECE8;
  *(_WORD *)(v4 + 8) = a1;
  *(_WORD *)(v4 + 10) = a2;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 16) = sub_1D3E29960(a1);
  *(_QWORD *)(v4 + 24) = sub_1D3E29960((unsigned __int16)(a1 - 1));
  v5 = malloc_type_malloc(2 * (a1 & 0x7FFF), 0x7FC0B493uLL);
  *(_QWORD *)(v4 + 32) = v5;
  v6 = malloc_type_malloc(2 * (a1 & 0x7FFF), 0x8639A916uLL);
  *(_QWORD *)(v4 + 40) = v6;
  v7 = malloc_type_malloc(2 * (a1 & 0x7FFF), 0xA17588EEuLL);
  *(_QWORD *)(v4 + 48) = v7;
  if (!v5 || !v6 || !v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8254978](exception, "Malloc failure");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *v5 = 1;
  if (a1 >= 2)
  {
    v8 = a1 - 1;
    v9 = v5 + 1;
    LOWORD(v10) = 1;
    do
    {
      v10 = (a1 & (((__int16)(v10 * a2) % (int)a1) >> 31)) + (__int16)(v10 * a2) % (int)a1;
      *v9++ = v10;
      --v8;
    }
    while (v8);
  }
  if (!a1)
    goto LABEL_16;
  v11 = v6;
  v12 = a1;
  do
  {
    *v11++ = -1;
    --v12;
  }
  while (v12);
  if (a1 >= 2)
  {
    v13 = 0;
    do
    {
      v6[(unsigned __int16)v5[v13]] = v13;
      ++v13;
    }
    while (a1 - 1 != v13);
    *v7 = -1;
    v14 = a1 - 1;
    v15 = v7 + 1;
    v16 = v6 + 1;
    do
    {
      v17 = *v16++;
      *v15++ = v5[(unsigned __int16)(~v17 + a1)];
      --v14;
    }
    while (v14);
  }
  else
  {
LABEL_16:
    *v7 = -1;
  }
  *(_WORD *)(v4 + 56) = 1;
  *(_QWORD *)v4 = &off_1E95AED70;
  *(_DWORD *)(v4 + 60) = 0;
  return v4;
}

void sub_1D3E287B4(void *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x1D8254C54](v1, 0x1091C40433B895BLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D3E28768);
}

uint64_t sub_1D3E287FC(uint64_t a1, char *a2, unsigned int a3, char *a4, unsigned int a5, unsigned int *a6, unsigned int a7, _DWORD *a8, void *a9, void *a10)
{
  uint64_t v10;
  unsigned int *v15;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int16 v32;
  __int16 v33;
  unsigned int v34;
  int v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  void *v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned __int16 *v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int16 v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unsigned int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  _DWORD *v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned __int16 v78;
  unsigned int v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  unsigned __int16 v83;
  unsigned __int16 v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  int v91;
  int *v92;
  _DWORD *v93;
  int *v94;
  _DWORD *v95;
  int v96;
  int v97;
  int v98;
  __int16 v99;
  void *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned __int16 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  unsigned __int16 v113;
  unsigned int v114;
  unsigned __int16 v115;
  unsigned __int16 v116;
  uint64_t v117;
  unsigned __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 v122;
  uint64_t v123;
  int v125;
  uint64_t v126;
  unsigned int v127;
  _WORD *v128;
  _WORD *v129;
  _WORD *v130;
  unsigned int v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  void *v141;
  uint64_t v142;
  uint64_t (**v144)();
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (**v148)();
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (**v152)();
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (**v156)();
  void *v157;
  uint64_t v158;
  uint64_t v159;
  void *__p[3];
  void *v161[3];
  uint64_t (**v162)();
  void *v163;
  uint64_t v164;
  unsigned __int16 *v165;
  uint64_t (**v166)();
  void *v167;
  uint64_t v168;
  unsigned __int16 *v169;
  uint64_t (**v170)();
  void *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t (**v174)();
  void *v175;
  unsigned int v176;
  uint64_t (**v177)();
  void *v178;
  uint64_t v179;
  uint64_t (**v180)();
  void *v181;
  uint64_t v182;
  unsigned __int16 *v183;
  uint64_t (**v184)();
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t (**v188)();
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (**v192)();
  unsigned __int16 *v193;
  unsigned int v194;
  void *v195[3];
  void *v196[3];
  uint64_t (**v197)();
  unsigned __int16 *v198;
  uint64_t v199;
  unsigned __int16 *v200;
  uint64_t (**v201)();
  void *v202;
  uint64_t v203;
  uint64_t v204;

  v10 = 1;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a8)
          {
            if (a9)
            {
              if (a10)
              {
                v15 = a6;
                if (a6 || !a7)
                {
                  v18 = *(_DWORD *)(a1 + 60);
                  v19 = a5 >= v18;
                  v20 = a5 - v18;
                  if (v19)
                  {
                    v19 = v20 >= a7;
                    v21 = v20 - a7;
                    if (v19)
                    {
                      v138 = v21 >> 1;
                      *a8 = 0;
                      v202 = 0;
                      v203 = 0;
                      v201 = &off_1E95AEC88;
                      sub_1D3E2C644((void **)&v201, 0, 1);
                      v22 = 0;
                      v23 = *(_WORD *)(a1 + 8);
                      v201 = &off_1E95AED10;
                      v142 = a1 + 8;
                      v204 = a1 + 8;
                      v136 = a5;
                      v24 = v23 - 1;
                      v25 = 2 * a5 - 2;
                      do
                      {
                        v26 = *(unsigned __int16 *)&a4[v25];
                        if (v26 > v24)
                          LOWORD(v26) = 1;
                        sub_1D3E2C59C((void **)&v201, v22++, (__int16)v26);
                        v25 -= 2;
                      }
                      while (a5 != v22);
                      v27 = 0;
                      v137 = a3;
                      v28 = 2 * a3 - 2;
                      do
                      {
                        v29 = *(unsigned __int16 *)&a2[v28];
                        if (v29 > v24)
                          LOWORD(v29) = 1;
                        sub_1D3E2C59C((void **)&v201, a5 + v27++, (__int16)v29);
                        v28 -= 2;
                      }
                      while (a3 != v27);
                      v198 = 0;
                      v199 = 0;
                      v197 = &off_1E95AEC88;
                      sub_1D3E2C644((void **)&v197, 0, 1);
                      v197 = &off_1E95AED10;
                      v200 = (unsigned __int16 *)(a1 + 8);
                      v30 = *(unsigned __int16 *)(a1 + 10);
                      v140 = a7;
                      if (*(_WORD *)(a1 + 56))
                      {
                        v31 = 0;
                        v32 = 1;
                        do
                        {
                          v33 = 0;
                          if (v32 && *(_WORD *)(a1 + 10))
                            v33 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                           + 2
                                           * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                 + 2
                                                                 * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v30)
                                                                  + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v32))));
                          ++v31;
                          v32 = v33;
                        }
                        while (v31 < *(unsigned __int16 *)(a1 + 56));
                      }
                      else
                      {
                        v33 = 1;
                      }
                      v34 = 0;
                      v35 = 0;
                      do
                      {
                        v36 = sub_1D3E2CFE4((uint64_t)&v201, v33);
                        sub_1D3E2C59C((void **)&v197, v34, v36);
                        v37 = 0;
                        if ((_DWORD)v30 && v33)
                          v37 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                         + 2
                                         * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                               + 2
                                                               * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v30)
                                                                + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * (unsigned __int16)v33))));
                        v34 = (unsigned __int16)++v35;
                        v33 = v37;
                      }
                      while ((unsigned __int16)v35 < a5);
                      v38 = 1;
                      v39 = v198;
                      do
                      {
                        v40 = v198[v38 - 1];
                        if (v198[v38 - 1])
                          v41 = 1;
                        else
                          v41 = v38 > v199;
                        ++v38;
                      }
                      while (!v41);
                      if (!v40)
                      {
                        memmove(a9, a2, 2 * a3);
                        memmove(a10, a4, 2 * a5);
                        v10 = 0;
                        v197 = &off_1E95AEC88;
LABEL_177:
                        free(v39);
LABEL_178:
                        if (v202)
                          free(v202);
                        return v10;
                      }
                      v42 = v140;
                      sub_1D3E2D7D4(v196, v140);
                      sub_1D3E2D7D4(v195, v140);
                      v43 = a8;
                      v44 = a5 + a3;
                      v45 = (unsigned __int16 *)(a1 + 8);
                      if (v140)
                      {
                        v46 = v196[0];
                        v47 = v140;
                        while (1)
                        {
                          v49 = *v15++;
                          v48 = v49;
                          if (v49 >= v44)
                            break;
                          *v46++ = v44 + ~v48;
                          if (!--v47)
                            goto LABEL_46;
                        }
                        v10 = 1;
LABEL_172:
                        if (v195[0])
                        {
                          v195[1] = v195[0];
                          operator delete(v195[0]);
                        }
                        if (v196[0])
                        {
                          v196[1] = v196[0];
                          operator delete(v196[0]);
                        }
                        v39 = v198;
                        v197 = &off_1E95AEC88;
                        if (!v198)
                          goto LABEL_178;
                        goto LABEL_177;
                      }
LABEL_46:
                      sub_1D3E2D158((uint64_t)&v192, v142, 0);
                      v135 = a5 + a3;
                      if (v140)
                      {
                        v189 = 0;
                        v190 = 0;
                        v188 = &off_1E95AEC88;
                        sub_1D3E2C644((void **)&v188, 0, 1);
                        v188 = &off_1E95AED10;
                        v191 = a1 + 8;
                        sub_1D3E2D158((uint64_t)&v184, v142, 0);
                        v181 = 0;
                        v182 = 0;
                        v180 = &off_1E95AEC88;
                        sub_1D3E2C644((void **)&v180, 0, 1);
                        v50 = 0;
                        v180 = &off_1E95AED10;
                        v183 = (unsigned __int16 *)(a1 + 8);
                        do
                        {
                          v51 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32)
                                                    + 2
                                                    * (*(_DWORD *)((char *)v196[0] + v50)
                                                     % *(unsigned __int16 *)(a1 + 8)));
                          sub_1D3E2C644((void **)&v188, 0, 1);
                          *(_WORD *)v189 = 0;
                          sub_1D3E2C59C((void **)&v188, 1u, (__int16)v51);
                          *(_DWORD *)((char *)v195[0] + v50) = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v51);
                          sub_1D3E2C9B8((uint64_t)&v184, (uint64_t)&v188, (void **)&v180);
                          sub_1D3E2CB30((uint64_t)&v192, (uint64_t)&v180, (uint64_t)&v192);
                          v50 += 4;
                        }
                        while (4 * v140 != v50);
                        v52 = v199;
                        v53 = v194;
                        v54 = operator new();
                        *(_QWORD *)v54 = &off_1E95AEC88;
                        *(_QWORD *)(v54 + 8) = 0;
                        *(_QWORD *)(v54 + 16) = 0;
                        sub_1D3E2C644((void **)v54, v53 + v52, 1);
                        v55 = 0;
                        do
                        {
                          v56 = 0;
                          v57 = 0;
                          v58 = v193[v55];
                          do
                          {
                            v59 = 0;
                            if ((_DWORD)v58 && v198[v57])
                              v59 = *(unsigned __int16 *)(*((_QWORD *)v200 + 3)
                                                        + 2
                                                        * *(unsigned __int16 *)(*((_QWORD *)v200 + 2)
                                                                              + 2
                                                                              * (*(unsigned __int16 *)(*((_QWORD *)v200 + 4) + 2 * v58)
                                                                               + (unint64_t)*(unsigned __int16 *)(*((_QWORD *)v200 + 4) + 2 * v198[v57]))));
                            v60 = v56 + v55;
                            if (*(_DWORD *)(v54 + 16) >= v56 + v55)
                              v61 = *(unsigned __int16 *)(*(_QWORD *)(v54 + 8) + 2 * v60);
                            else
                              v61 = 0;
                            sub_1D3E2C59C((void **)v54, v60, *(__int16 *)(*((_QWORD *)v200 + 1) + 2 * (v61 + v59)));
                            v56 = ++v57;
                          }
                          while (v199 >= v57);
                          ++v55;
                        }
                        while (v55 <= v194);
                        sub_1D3E2C7D4((uint64_t)&v197, v54);
                        v42 = v140;
                        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
                        v62 = v199;
                        if (v199 >= a5)
                        {
                          sub_1D3E2C644((void **)&v197, a5 - 1, 1);
                          v62 = v199;
                        }
                        if (v62 >= (unsigned __int16)(*v200 - 1))
                        {
                          v63 = (unsigned __int16)(*v200 - 1);
                          do
                          {
                            if (v199 >= v62)
                              v64 = v198[v62];
                            else
                              v64 = 0;
                            v65 = *v200 - 1;
                            v177 = &off_1E95AEC88;
                            v66 = (unsigned __int16)(v62 % v65);
                            v178 = 0;
                            v179 = 0;
                            sub_1D3E2C644((void **)&v177, v66, 1);
                            sub_1D3E2C59C((void **)&v177, v66, (__int16)v64);
                            ((void (*)(uint64_t, uint64_t, void **))v197[2])((uint64_t)&v197, (uint64_t)&v177, (void **)&v197);
                            v43 = a8;
                            sub_1D3E2C59C((void **)&v197, v62, 0);
                            v177 = &off_1E95AEC88;
                            if (v178)
                              free(v178);
                            --v62;
                          }
                          while (v62 >= v63);
                          v62 = v199;
                        }
                        else
                        {
                          v43 = a8;
                        }
                        v45 = (unsigned __int16 *)(a1 + 8);
                        if (v62 && !v198[v62])
                        {
                          v67 = v62;
                          do
                          {
                            v68 = v67 - 1;
                            if (v67 == 1)
                              break;
                          }
                          while (!v198[--v67]);
                          LODWORD(v199) = v68;
                        }
                        v70 = 0;
                        do
                        {
                          v71 = (__int16)v198[v70];
                          sub_1D3E2C59C((void **)&v197, v70++, (__int16)((*v200 & ((v71 % *v200) >> 31)) + v71 % *v200));
                        }
                        while (v70 <= v199);
                        if (v181)
                          free(v181);
                        v184 = &off_1E95AEC88;
                        if (v185)
                          free(v185);
                        if (v189)
                          free(v189);
                      }
                      sub_1D3E2D158((uint64_t)&v188, (uint64_t)v45, a5);
                      v185 = 0;
                      v186 = 0;
                      v184 = &off_1E95AEC88;
                      sub_1D3E2C7D4((uint64_t)&v184, (uint64_t)&v188);
                      v184 = &off_1E95AED10;
                      v187 = v191;
                      v181 = 0;
                      v182 = 0;
                      v180 = &off_1E95AEC88;
                      sub_1D3E2C644((void **)&v180, 0, 1);
                      v180 = &off_1E95AED10;
                      v183 = v45;
                      sub_1D3E2D158((uint64_t)&v177, (uint64_t)v45, 0);
                      sub_1D3E2D158((uint64_t)&v174, (uint64_t)v45, 0);
                      v171 = 0;
                      v172 = 0;
                      v170 = &off_1E95AEC88;
                      sub_1D3E2C644((void **)&v170, 0, 1);
                      v170 = &off_1E95AED10;
                      v173 = v45;
                      v167 = 0;
                      v168 = 0;
                      v166 = &off_1E95AEC88;
                      sub_1D3E2C644((void **)&v166, 0, 1);
                      v166 = &off_1E95AED10;
                      v169 = v45;
                      v163 = 0;
                      v164 = 0;
                      v162 = &off_1E95AEC88;
                      sub_1D3E2C7D4((uint64_t)&v162, (uint64_t)&v197);
                      v162 = &off_1E95AED10;
                      v165 = v200;
                      while (v164 > (a5 + v140 - 2) >> 1)
                      {
                        sub_1D3E2CCF0((uint64_t)&v184, (uint64_t)&v162, (uint64_t)&v170, (uint64_t)&v166);
                        sub_1D3E2CB30((uint64_t)&v170, (uint64_t)&v177, (uint64_t)&v174);
                        sub_1D3E2C9B8((uint64_t)&v180, (uint64_t)&v174, (void **)&v174);
                        sub_1D3E2D1DC((uint64_t)&v180, (uint64_t)&v177);
                        sub_1D3E2D1DC((uint64_t)&v177, (uint64_t)&v174);
                        sub_1D3E2D1DC((uint64_t)&v184, (uint64_t)&v162);
                        sub_1D3E2D1DC((uint64_t)&v162, (uint64_t)&v166);
                      }
                      v72 = v176;
                      if (v176 > v138)
                      {
                        v10 = 3;
LABEL_154:
                        v162 = &off_1E95AEC88;
                        if (v163)
                          free(v163);
                        v166 = &off_1E95AEC88;
                        if (v167)
                          free(v167);
                        v170 = &off_1E95AEC88;
                        if (v171)
                          free(v171);
                        v174 = &off_1E95AEC88;
                        if (v175)
                          free(v175);
                        v177 = &off_1E95AEC88;
                        if (v178)
                          free(v178);
                        v180 = &off_1E95AEC88;
                        if (v181)
                          free(v181);
                        v184 = &off_1E95AEC88;
                        if (v185)
                          free(v185);
                        v188 = &off_1E95AEC88;
                        if (v189)
                          free(v189);
                        v192 = &off_1E95AEC88;
                        if (v193)
                          free(v193);
                        goto LABEL_172;
                      }
                      v73 = v176 + v140;
                      *v43 = v176 + v140;
                      sub_1D3E2D7D4(v161, v72 + v140);
                      sub_1D3E2D7D4(__p, v72 + v140);
                      if ((_DWORD)v72 + v140)
                      {
                        v74 = 0;
                        v75 = v161[0];
                        v76 = __p[0];
                        do
                        {
                          v75[(unsigned __int16)v74] = 0;
                          v76[(unsigned __int16)v74++] = 0;
                        }
                        while (v73 > (unsigned __int16)v74);
                      }
                      v139 = v42;
                      v77 = *v45;
                      v78 = 0;
                      v79 = v77 - 2;
                      if (v77 >= 2)
                      {
                        v80 = *(unsigned __int16 *)(a1 + 10);
                        v81 = __p[0];
                        v82 = v161[0];
                        v83 = *(_WORD *)(a1 + 10);
                        do
                        {
                          if (!sub_1D3E2CFE4((uint64_t)&v174, (__int16)v83))
                          {
                            v81[v78] = v79;
                            v82[v78++] = v83;
                          }
                          v84 = 0;
                          if (v83 && (_DWORD)v80)
                            v84 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                           + 2
                                           * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                 + 2
                                                                 * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v80)
                                                                  + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v83))));
                          --v79;
                          v83 = v84;
                        }
                        while (v79 != -1);
                      }
                      if (v176 == v78)
                      {
                        v86 = a1 + 8;
                        v85 = a8;
                        v87 = v139;
                        if (v140)
                        {
                          v88 = 0;
                          while (!(_DWORD)v72)
                          {
LABEL_110:
                            if (++v88 == v139)
                              goto LABEL_111;
                          }
                          v89 = (int *)v161[0];
                          v90 = v72;
                          while (1)
                          {
                            v91 = *v89++;
                            if (*((_DWORD *)v195[0] + v88) == v91)
                              break;
                            if (!--v90)
                              goto LABEL_110;
                          }
                        }
                        else
                        {
LABEL_111:
                          sub_1D3E2CB30((uint64_t)&v174, (uint64_t)&v192, (uint64_t)&v174);
                          if (v140)
                          {
                            v92 = (int *)v195[0];
                            v93 = v161[0];
                            v94 = (int *)v196[0];
                            v95 = __p[0];
                            do
                            {
                              v96 = *v92++;
                              v93[v72] = v96;
                              v97 = *v94++;
                              v95[v72] = v97;
                              LODWORD(v72) = v72 + 1;
                              --v87;
                            }
                            while (v87);
                          }
                          if (v176 == v73)
                          {
                            v98 = sub_1D3E2CFE4((uint64_t)&v174, 0);
                            if (v98)
                            {
                              v99 = *(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * (unsigned __int16)v98);
                              v157 = 0;
                              v158 = 0;
                              v156 = &off_1E95AEC88;
                              sub_1D3E2C644((void **)&v156, 0, 1);
                              v156 = &off_1E95AED10;
                              v159 = a1 + 8;
                              v153 = 0;
                              v154 = 0;
                              v152 = &off_1E95AEC88;
                              sub_1D3E2C644((void **)&v152, 0, 1);
                              v152 = &off_1E95AED10;
                              v155 = a1 + 8;
                              sub_1D3E2CC60((uint64_t)&v174, v99, (void **)&v156);
                              sub_1D3E2CC60((uint64_t)&v162, v99, (void **)&v152);
                              v100 = v157;
                              v10 = 3;
                              if (*(_WORD *)v157 && v73 == (_DWORD)v158)
                              {
                                v141 = v157;
                                v101 = *a8;
                                if ((_DWORD)v101)
                                {
                                  v102 = v135;
                                  v103 = (unsigned __int16 *)sub_1D3E2D848(*a8);
                                  bzero(v103, 2 * v101);
                                  v104 = *a8;
                                  if ((_DWORD)v104)
                                  {
                                    v105 = 0;
                                    v106 = *(_QWORD *)(a1 + 48);
                                    v107 = v161[0];
                                    do
                                    {
                                      v108 = *(unsigned __int16 *)(a1 + 8);
                                      v109 = v107[v105] % v108;
                                      v110 = *(unsigned __int16 *)(v106 + 2 * v109);
                                      v111 = sub_1D3E2CFE4((uint64_t)&v152, (__int16)v109);
                                      v112 = *(unsigned __int16 *)(a1 + 56);
                                      if (*(_WORD *)(a1 + 56))
                                      {
                                        if (v112 == 1)
                                        {
                                          v113 = 1;
                                        }
                                        else
                                        {
                                          v114 = 1;
                                          v115 = 1;
                                          do
                                          {
                                            v113 = 0;
                                            if ((_DWORD)v110 && v115)
                                              v113 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                                              + 2
                                                              * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                                    + 2
                                                                                    * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v110)
                                                                                     + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v115))));
                                            ++v114;
                                            v115 = v113;
                                          }
                                          while (v114 < v112);
                                        }
                                      }
                                      else
                                      {
                                        v113 = v109;
                                      }
                                      v116 = 0;
                                      v117 = v105;
                                      do
                                      {
                                        v118 = v113;
                                        if (v117)
                                        {
                                          v119 = 0;
                                          if ((_WORD)v109
                                            && *(_WORD *)(v106 + 2
                                                               * (*((_DWORD *)v161[0] + v116) % v108)))
                                          {
                                            v119 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32)
                                                                       + 2
                                                                       * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                                             + 2
                                                                                             * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v109)
                                                                                              + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * *(unsigned __int16 *)(v106 + 2 * (*((_DWORD *)v161[0] + v116) % v108))))));
                                          }
                                          v113 = 0;
                                          if (v118)
                                          {
                                            v120 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * (v108 + 1 - v119));
                                            if ((_DWORD)v120)
                                              v113 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                                              + 2
                                                              * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                                    + 2
                                                                                    * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v120)
                                                                                     + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v118))));
                                          }
                                        }
                                        ++v116;
                                        --v117;
                                      }
                                      while (v104 > v116);
                                      v121 = 0;
                                      if ((_DWORD)v110 && v113)
                                        v121 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32)
                                                                   + 2
                                                                   * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                                         + 2
                                                                                         * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v113)
                                                                                          + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v110))));
                                      v122 = 0;
                                      if (v111)
                                      {
                                        v123 = *(unsigned __int16 *)(v106 + 2 * v121);
                                        v102 = v135;
                                        if ((_DWORD)v123)
                                          v122 = *(_WORD *)(*(_QWORD *)(a1 + 32)
                                                          + 2
                                                          * *(unsigned __int16 *)(*(_QWORD *)(a1 + 24)
                                                                                + 2
                                                                                * (*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v123)
                                                                                 + (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * (unsigned __int16)v111))));
                                      }
                                      else
                                      {
                                        v102 = v135;
                                      }
                                      v103[v105++] = v122;
                                    }
                                    while (v105 != v104);
                                    v86 = a1 + 8;
                                    v85 = a8;
                                  }
                                }
                                else
                                {
                                  v103 = 0;
                                  v102 = v135;
                                }
                                v149 = 0;
                                v150 = 0;
                                v148 = &off_1E95AEC88;
                                sub_1D3E2C644((void **)&v148, 0, 1);
                                v148 = &off_1E95AED10;
                                v151 = v86;
                                if (*v85)
                                {
                                  v125 = 0;
                                  do
                                  {
                                    sub_1D3E2C59C((void **)&v148, *((_DWORD *)__p[0] + (unsigned __int16)v125), *(__int16 *)(*(_QWORD *)(a1 + 16)+ 2* (*(unsigned __int16 *)(a1 + 8)- (unint64_t)v103[(unsigned __int16)v125])));
                                    ++v125;
                                  }
                                  while (*v85 > (unsigned __int16)v125);
                                }
                                v145 = 0;
                                v146 = 0;
                                v144 = &off_1E95AEC88;
                                sub_1D3E2C644((void **)&v144, 0, 1);
                                v144 = &off_1E95AED10;
                                v147 = v86;
                                sub_1D3E2C904((uint64_t)&v201, (uint64_t)&v148, (void **)&v144);
                                v126 = v137;
                                v100 = v141;
                                v127 = v146;
                                v128 = v145;
                                v130 = a9;
                                v129 = a10;
                                if (v102 >= (int)v146 + 1)
                                {
                                  v131 = v102 - 1;
                                  do
                                  {
                                    if (v127 >= v131)
                                      v132 = v128[v131];
                                    else
                                      v132 = 0;
                                    *v130++ = v132;
                                    --v131;
                                    --v126;
                                  }
                                  while (v126);
                                  v133 = v136;
                                  do
                                  {
                                    if (v127 >= v131)
                                      v134 = v128[v131];
                                    else
                                      v134 = 0;
                                    *v129++ = v134;
                                    --v131;
                                    --v133;
                                  }
                                  while (v133);
                                  v10 = 0;
                                }
                                else
                                {
                                  v10 = 3;
                                }
                                if (v128)
                                  free(v128);
                                if (v149)
                                  free(v149);
                                if (v103)
                                  operator delete(v103);
                              }
                              if (v153)
                                free(v153);
                              free(v100);
                              goto LABEL_150;
                            }
                          }
                        }
                        v10 = 3;
                      }
                      else
                      {
                        v10 = 3;
                      }
LABEL_150:
                      if (__p[0])
                      {
                        __p[1] = __p[0];
                        operator delete(__p[0]);
                      }
                      if (v161[0])
                      {
                        v161[1] = v161[0];
                        operator delete(v161[0]);
                      }
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v10;
}

void sub_1D3E296A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *a69;
  uint64_t v69;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;

  if (a27)
    free(a27);
  if (a31)
    free(a31);
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  if (a41)
    free(a41);
  if (a45)
    free(a45);
  if (a49)
    free(a49);
  if (a53)
    free(a53);
  if (a57)
    free(a57);
  if (a61)
    free(a61);
  if (a65)
    free(a65);
  if (a69)
    free(a69);
  *(_QWORD *)(v69 - 232) = &off_1E95AEC88;
  v71 = *(void **)(v69 - 224);
  if (v71)
    free(v71);
  v72 = *(void **)(v69 - 200);
  if (v72)
  {
    *(_QWORD *)(v69 - 192) = v72;
    operator delete(v72);
  }
  v73 = *(void **)(v69 - 176);
  if (v73)
  {
    *(_QWORD *)(v69 - 168) = v73;
    operator delete(v73);
  }
  *(_QWORD *)(v69 - 152) = &off_1E95AEC88;
  v74 = *(void **)(v69 - 144);
  if (v74)
    free(v74);
  v75 = *(void **)(v69 - 112);
  if (v75)
    free(v75);
  _Unwind_Resume(a1);
}

_WORD *sub_1D3E29960(unsigned int a1)
{
  _WORD *result;
  char v3;
  _WORD *v4;
  char v5;
  unsigned int v6;
  void *exception;

  result = malloc_type_malloc(4 * a1, 0xA395E199uLL);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8254978](exception, "Malloc failure");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = 1;
  v4 = result;
  do
  {
    v5 = v3;
    if (a1)
    {
      v6 = 0;
      do
        *v4++ = v6++;
      while (v6 < a1);
    }
    v3 = 0;
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_1D3E299EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E29A00(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    free(v4);
    a1[3] = 0;
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    free(v5);
    a1[4] = 0;
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    free(v6);
    a1[5] = 0;
  }
  return a1;
}

void sub_1D3E29A70(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double Width;
  double Height;
  uint64_t v12;
  uint64_t v13;
  CGSize v14;
  _BOOL4 IsInfinite;
  CGPoint *v16;
  CGPoint v17;
  BOOL v18;
  BOOL v19;
  double v20;
  double v21;
  CGFloat y;
  CGFloat x;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  float v27;
  float v28;
  double v29;
  float v30;
  float v31;
  __int128 v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  unint64_t *v47;
  char *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  __int128 v116;
  unint64_t v117;
  int v118;
  _BOOL4 v119;
  _DWORD *i;
  int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  float v131;
  float v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v145;
  char v146;
  BOOL v147;
  char *v148;
  char *v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  float32x4_t v155;
  uint64_t v156;
  int v157;
  int v158;
  const float *v159;
  int32x4_t v160;
  int32x4_t v161;
  _OWORD *v162;
  double v163;
  uint64_t **v165;
  uint64_t **m;
  int v167;
  __int128 v168;
  int v169;
  uint64_t n;
  __int128 v171;
  char *v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  float32x4_t v196;
  _DWORD *v197;
  char *v198;
  __int128 v199;
  char *v200;
  char *v201;
  char *v202;
  _DWORD *j;
  char *v204;
  char *v206;
  char v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  float32x4_t v212;
  _DWORD *v213;
  char *v214;
  __int128 v215;
  char *v216;
  char *v217;
  char *v218;
  _DWORD *k;
  char *v220;
  void *v221;
  char *v222;
  char *v223;
  float *v224;
  uint64_t *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  __int16 *v237;
  __int16 v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::logic_error *exception;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int32x4_t v249;
  BOOL v250;
  int v251;
  int32x4_t v252;
  double v253;
  double v254;
  int32x4_t v255;
  float v256;
  int32x4_t v257;
  void *v258[2];
  uint64_t v259;
  __int128 v260;
  unint64_t v261;
  unsigned __int8 v262;
  BOOL v263;
  uint64_t (**v264)();
  __int128 v265;
  char *v266;
  std::__shared_weak_count *v267;
  CGAffineTransform v268;
  CGPoint v269;
  CGSize v270;
  void *v271[2];
  __int128 v272;
  __int16 v273;
  void *v274[2];
  uint64_t v275;
  _BYTE v276[84];
  uint64_t v277;
  uint64_t *v278;
  _QWORD *v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  float32x4x2_t v289;
  float32x4x2_t v290;
  float32x4x2_t v291;
  CGRect v292;
  CGRect v293;
  CGRect v294;
  CGRect v295;
  CGRect v296;
  CGRect v297;
  CGRect v298;
  CGRect v299;
  CGRect v300;
  CGRect v301;
  CGRect v302;

  *(_DWORD *)v276 = 2;
  v276[4] = 1;
  v4 = *(unint64_t **)(a1 + 8);
  if (sub_1D3DDC428(v4, CFSTR("Codabar"), (uint64_t)v276))
    v5 = 2;
  else
    v5 = 0;
  *(_DWORD *)v276 = 2;
  v276[4] = 1;
  if (sub_1D3DDC428(v4, CFSTR("GS1DataBar"), (uint64_t)v276))
    v5 |= 0x1000u;
  *(_DWORD *)v276 = 2;
  v276[4] = 1;
  if (sub_1D3DDC428(v4, CFSTR("GS1DataBarExpanded"), (uint64_t)v276))
    v5 |= 0x2000u;
  *(_DWORD *)v276 = 2;
  v276[4] = 1;
  if (sub_1D3DDC428(v4, CFSTR("GS1DataBarLimited"), (uint64_t)v276))
    v6 = v5 | 0x20000;
  else
    v6 = v5;
  if (!v6)
    goto LABEL_30;
  v7 = **(_QWORD **)(a2 + 8);
  v8 = sub_1D3DE7F08((unint64_t *)v7);
  v292.origin.x = *(CGFloat *)(v7 + 8);
  v292.origin.y = *(CGFloat *)(v7 + 16);
  v9 = v7 + 8;
  v292.size.width = *(CGFloat *)(v9 + 16);
  v292.size.height = *(CGFloat *)(v9 + 24);
  Width = CGRectGetWidth(v292);
  Height = CGRectGetHeight(*(CGRect *)v9);
  v12 = *(_QWORD *)(v9 + 32);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(CGSize *)(v13 + 32);
  v269 = *(CGPoint *)(v13 + 16);
  v270 = v14;
  v302.origin = v269;
  v302.size = v14;
  IsInfinite = CGRectIsInfinite(v302);
  v16 = &v269;
  if (IsInfinite)
    v16 = (CGPoint *)v9;
  v17 = v16[1];
  v269 = *v16;
  v270 = (CGSize)v17;
  v18 = *(uint64_t *)(*(_QWORD *)(a1 + 8) + 56) < 196608 || *(_BYTE *)(a2 + 32) == 0;
  v19 = v18;
  if (v18)
  {
    v21 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v20 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v253 = *MEMORY[0x1E0C9D628];
    v254 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    y = v269.y;
    x = v269.x;
    v256 = 0.0;
    v25 = v270.height;
    v24 = v270.width;
  }
  else
  {
    v26 = *(_QWORD *)(a2 + 24);
    v27 = *(double *)(v26 + 72);
    v28 = *(double *)(v26 + 64);
    v29 = (float)(atan2f(v27, v28) * -180.0) / 3.14159265;
    v30 = *(double *)(v26 + 112);
    v31 = v29 + fmodf(v30, 180.0);
    if (v31 > 90.0)
      v31 = v31 + -180.0;
    if (v31 < -90.0)
      v31 = v31 + 180.0;
    v256 = v31;
    v293.origin.x = sub_1D3D8F9B0(v26, 0.0);
    v32 = *(_OWORD *)(v26 + 80);
    *(_OWORD *)&v268.a = *(_OWORD *)(v26 + 64);
    *(_OWORD *)&v268.c = v32;
    *(_OWORD *)&v268.tx = *(_OWORD *)(v26 + 96);
    v294 = CGRectApplyAffineTransform(v293, &v268);
    v21 = v294.size.width;
    v20 = v294.size.height;
    v253 = v294.origin.x;
    v254 = v294.origin.y;
    v295 = CGRectInset(v294, v294.size.width * -0.1, v294.size.height * -0.1);
    x = v295.origin.x;
    y = v295.origin.y;
    v24 = v295.size.width;
    v25 = v295.size.height;
    v269.x = v295.origin.x;
    v269.y = v295.origin.y;
    v270.width = v295.size.width;
    v270.height = v295.size.height;
  }
  v296.origin.x = x;
  v296.origin.y = y;
  v296.size.width = v24;
  v296.size.height = v25;
  if (CGRectIsNull(v296)
    || (v297.origin.x = x, v297.origin.y = y, v297.size.width = v24, v297.size.height = v25, CGRectIsEmpty(v297)))
  {
LABEL_30:
    **(_WORD **)(a2 + 64) = 256;
    return;
  }
  v250 = v19;
  v298.origin.x = x;
  v298.origin.y = y;
  v298.size.width = v24;
  v298.size.height = v25;
  v33 = vcvtmd_s64_f64(CGRectGetMinX(v298));
  v299.origin.x = x;
  v299.origin.y = y;
  v299.size.width = v24;
  v299.size.height = v25;
  v34 = vcvtpd_s64_f64(CGRectGetMaxX(v299));
  v300.origin.x = x;
  v300.origin.y = y;
  v300.size.width = v24;
  v300.size.height = v25;
  v35 = vcvtmd_s64_f64(CGRectGetMinY(v300));
  v301.origin.x = x;
  v301.origin.y = y;
  v301.size.width = v24;
  v301.size.height = v25;
  v36 = vcvtpd_s64_f64(CGRectGetMaxY(v301));
  if ((uint64_t)(unint64_t)Width >= v34)
    LODWORD(v37) = v34;
  else
    v37 = (unint64_t)Width;
  if ((uint64_t)(unint64_t)Height < v36)
    v36 = (unint64_t)Height;
  v38 = ((_BYTE)v8 + (_BYTE)v33) & 0xF;
  if ((v12 & 0xF) != 0)
    v38 = 0;
  v39 = (v33 - v38) & ~((uint64_t)(v33 - v38) >> 63);
  v40 = v35 & ~(v35 >> 63);
  v41 = v37 - v39;
  v42 = v36 - v40;
  v43 = (char *)operator new(0x48uLL);
  v44 = v40;
  v45 = v39;
  v46 = v43;
  *(_OWORD *)(v43 + 8) = 0u;
  v47 = (unint64_t *)(v43 + 8);
  *(_QWORD *)v43 = &off_1E95B0318;
  *((_QWORD *)v43 + 3) = &off_1E95AEFB0;
  v48 = v43 + 24;
  *((_QWORD *)v43 + 4) = 0;
  *(_OWORD *)(v43 + 40) = 0u;
  *((_DWORD *)v43 + 14) = v41;
  *((_DWORD *)v43 + 15) = v42;
  *((_DWORD *)v43 + 16) = v41;
  if ((v44 | v45 | v41 | v42) < 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested offset is outside the image");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E95AAC08, MEMORY[0x1E0DE42E0]);
  }
  v247 = v44;
  v248 = v45;
  sub_1D3E3AD98(v276, (uint64_t)v8, v12, v45, v44, v41, v42);
  v49 = *(_OWORD *)v276;
  *(_QWORD *)v276 = 0;
  *(_QWORD *)&v276[8] = 0;
  v50 = (std::__shared_weak_count *)*((_QWORD *)v46 + 5);
  *((_OWORD *)v46 + 2) = v49;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(std::__shared_weak_count **)&v276[8];
  if (*(_QWORD *)&v276[8])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v266 = v48;
  v267 = (std::__shared_weak_count *)v46;
  *(_QWORD *)&v56 = v48;
  *((_QWORD *)&v56 + 1) = v46;
  do
    v57 = __ldxr(v47);
  while (__stxr(v57 + 1, v47));
  v264 = &off_1E95AF018;
  v265 = v56;
  v261 = 0;
  v262 = 1;
  v263 = v250;
  *(_QWORD *)&v276[32] = &v261;
  *(_QWORD *)&v260 = operator new(0x40uLL);
  *((_QWORD *)&v260 + 1) = v260;
  v261 = v260 + 64;
  memset(v276, 0, 32);
  sub_1D3E0BB74((uint64_t)v276);
  if ((v6 & 2) != 0)
  {
    v58 = operator new();
    v59 = v58;
    *(_QWORD *)v58 = &off_1E95AF0C0;
    *(_BYTE *)(v58 + 8) = 1;
    v60 = (_QWORD *)*((_QWORD *)&v260 + 1);
    if (*((_QWORD *)&v260 + 1) >= v261)
    {
      v62 = (_QWORD *)v260;
      v63 = (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
        sub_1D3D6D4F8();
      v65 = v261 - v260;
      if ((uint64_t)(v261 - v260) >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      *(_QWORD *)&v276[32] = &v261;
      if (v66)
      {
        v66 = (unint64_t)sub_1D3D6D8A0(v66);
        v60 = (_QWORD *)*((_QWORD *)&v260 + 1);
        v62 = (_QWORD *)v260;
      }
      else
      {
        v67 = 0;
      }
      v68 = (uint64_t *)(v66 + 8 * v63);
      v69 = v66 + 8 * v67;
      *(_QWORD *)&v276[24] = v69;
      *v68 = v59;
      *(_QWORD *)&v276[16] = v68 + 1;
      if (v60 == v62)
      {
        v61 = v68 + 1;
      }
      else
      {
        do
        {
          v70 = *--v60;
          *v60 = 0;
          *--v68 = v70;
        }
        while (v60 != v62);
        v69 = *(_QWORD *)&v276[24];
        v61 = *(_QWORD **)&v276[16];
      }
      v71 = v260;
      *(_QWORD *)&v260 = v68;
      *((_QWORD *)&v260 + 1) = v61;
      *(_OWORD *)&v276[8] = v71;
      v72 = v261;
      v261 = v69;
      *(_QWORD *)&v276[24] = v72;
      *(_QWORD *)v276 = v71;
      sub_1D3E0BB74((uint64_t)v276);
    }
    else
    {
      **((_QWORD **)&v260 + 1) = v58;
      v61 = v60 + 1;
    }
    *((_QWORD *)&v260 + 1) = v61;
  }
  if ((v6 & 0x1000) != 0)
  {
    v73 = (_QWORD *)operator new();
    v74 = v73;
    *v73 = &off_1E95AF090;
    v75 = (_QWORD *)*((_QWORD *)&v260 + 1);
    if (*((_QWORD *)&v260 + 1) >= v261)
    {
      v77 = (_QWORD *)v260;
      v78 = (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3;
      v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61)
        sub_1D3D6D4F8();
      v80 = v261 - v260;
      if ((uint64_t)(v261 - v260) >> 2 > v79)
        v79 = v80 >> 2;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
        v81 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v81 = v79;
      *(_QWORD *)&v276[32] = &v261;
      if (v81)
      {
        v81 = (unint64_t)sub_1D3D6D8A0(v81);
        v75 = (_QWORD *)*((_QWORD *)&v260 + 1);
        v77 = (_QWORD *)v260;
      }
      else
      {
        v82 = 0;
      }
      v83 = (_QWORD *)(v81 + 8 * v78);
      v84 = v81 + 8 * v82;
      *(_QWORD *)&v276[24] = v84;
      *v83 = v74;
      *(_QWORD *)&v276[16] = v83 + 1;
      if (v75 == v77)
      {
        v76 = v83 + 1;
      }
      else
      {
        do
        {
          v85 = *--v75;
          *v75 = 0;
          *--v83 = v85;
        }
        while (v75 != v77);
        v84 = *(_QWORD *)&v276[24];
        v76 = *(_QWORD **)&v276[16];
      }
      v86 = v260;
      *(_QWORD *)&v260 = v83;
      *((_QWORD *)&v260 + 1) = v76;
      *(_OWORD *)&v276[8] = v86;
      v87 = v261;
      v261 = v84;
      *(_QWORD *)&v276[24] = v87;
      *(_QWORD *)v276 = v86;
      sub_1D3E0BB74((uint64_t)v276);
    }
    else
    {
      **((_QWORD **)&v260 + 1) = v73;
      v76 = v75 + 1;
    }
    *((_QWORD *)&v260 + 1) = v76;
  }
  if ((v6 & 0x2000) != 0)
  {
    v88 = (_QWORD *)operator new();
    v89 = v88;
    *v88 = &off_1E95AF120;
    v90 = (_QWORD *)*((_QWORD *)&v260 + 1);
    if (*((_QWORD *)&v260 + 1) >= v261)
    {
      v92 = (_QWORD *)v260;
      v93 = (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3;
      v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 61)
        sub_1D3D6D4F8();
      v95 = v261 - v260;
      if ((uint64_t)(v261 - v260) >> 2 > v94)
        v94 = v95 >> 2;
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
        v96 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v96 = v94;
      *(_QWORD *)&v276[32] = &v261;
      if (v96)
      {
        v96 = (unint64_t)sub_1D3D6D8A0(v96);
        v90 = (_QWORD *)*((_QWORD *)&v260 + 1);
        v92 = (_QWORD *)v260;
      }
      else
      {
        v97 = 0;
      }
      v98 = (_QWORD *)(v96 + 8 * v93);
      v99 = v96 + 8 * v97;
      *(_QWORD *)&v276[24] = v99;
      *v98 = v89;
      *(_QWORD *)&v276[16] = v98 + 1;
      if (v90 == v92)
      {
        v91 = v98 + 1;
      }
      else
      {
        do
        {
          v100 = *--v90;
          *v90 = 0;
          *--v98 = v100;
        }
        while (v90 != v92);
        v99 = *(_QWORD *)&v276[24];
        v91 = *(_QWORD **)&v276[16];
      }
      v101 = v260;
      *(_QWORD *)&v260 = v98;
      *((_QWORD *)&v260 + 1) = v91;
      *(_OWORD *)&v276[8] = v101;
      v102 = v261;
      v261 = v99;
      *(_QWORD *)&v276[24] = v102;
      *(_QWORD *)v276 = v101;
      sub_1D3E0BB74((uint64_t)v276);
    }
    else
    {
      **((_QWORD **)&v260 + 1) = v88;
      v91 = v90 + 1;
    }
    *((_QWORD *)&v260 + 1) = v91;
  }
  if ((v6 & 0x20000) != 0)
  {
    v103 = (_QWORD *)operator new();
    v104 = v103;
    *v103 = &off_1E95AF0F0;
    v105 = (_QWORD *)*((_QWORD *)&v260 + 1);
    if (*((_QWORD *)&v260 + 1) >= v261)
    {
      v107 = (_QWORD *)v260;
      v108 = (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3;
      v109 = v108 + 1;
      if ((unint64_t)(v108 + 1) >> 61)
        sub_1D3D6D4F8();
      v110 = v261 - v260;
      if ((uint64_t)(v261 - v260) >> 2 > v109)
        v109 = v110 >> 2;
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
        v111 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v111 = v109;
      *(_QWORD *)&v276[32] = &v261;
      if (v111)
      {
        v111 = (unint64_t)sub_1D3D6D8A0(v111);
        v105 = (_QWORD *)*((_QWORD *)&v260 + 1);
        v107 = (_QWORD *)v260;
      }
      else
      {
        v112 = 0;
      }
      v113 = (_QWORD *)(v111 + 8 * v108);
      v114 = v111 + 8 * v112;
      *(_QWORD *)&v276[24] = v114;
      *v113 = v104;
      *(_QWORD *)&v276[16] = v113 + 1;
      if (v105 == v107)
      {
        v106 = v113 + 1;
      }
      else
      {
        do
        {
          v115 = *--v105;
          *v105 = 0;
          *--v113 = v115;
        }
        while (v105 != v107);
        v114 = *(_QWORD *)&v276[24];
        v106 = *(_QWORD **)&v276[16];
      }
      v116 = v260;
      *(_QWORD *)&v260 = v113;
      *((_QWORD *)&v260 + 1) = v106;
      *(_OWORD *)&v276[8] = v116;
      v117 = v261;
      v261 = v114;
      *(_QWORD *)&v276[24] = v117;
      *(_QWORD *)v276 = v116;
      sub_1D3E0BB74((uint64_t)v276);
    }
    else
    {
      **((_QWORD **)&v260 + 1) = v103;
      v106 = v105 + 1;
    }
    *((_QWORD *)&v260 + 1) = v106;
  }
  v258[0] = 0;
  v258[1] = 0;
  v259 = 0;
  if (v250)
  {
    v118 = v262;
    v119 = v263;
    *(_DWORD *)v276 = 1;
    v279 = 0;
    v280 = 0;
    memset(&v276[4], 0, 80);
    v277 = 0;
    v278 = (uint64_t *)&v279;
    v281 = 0;
    v282 = 0;
    sub_1D3E0BEEC(v274, (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3, (uint64_t)v276);
    sub_1D3E0BCE8(v279);
    if (*(_QWORD *)&v276[64])
    {
      *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
      operator delete(*(void **)&v276[64]);
    }
    if ((v276[31] & 0x80000000) != 0)
      operator delete(*(void **)&v276[8]);
    sub_1D3E0C21C(v274, (uint64_t *)&v260, (uint64_t)&v264, v118 != 0);
    for (i = v274[0]; ; i += 34)
    {
      if (i == v274[1])
        goto LABEL_312;
      if (*i)
        break;
    }
    if (!v119 || !((unsigned int (*)(uint64_t))v264[10])((uint64_t)&v264))
    {
LABEL_250:
      v271[0] = 0;
      v271[1] = 0;
      *(_QWORD *)&v272 = 0;
      v286 = 0;
      v287 = 0;
      v288 = 0;
      sub_1D3E0BC50(&v283, (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3);
      v188 = 0;
      while (1)
      {
        v189 = dword_1D3E6EB64[v188];
        if (((BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t))v264[6])((uint64_t)&v264, 0, (uint64_t)v271, (uint64_t)&v286))
        {
          break;
        }
LABEL_307:
        if (++v188 == 14)
          goto LABEL_308;
      }
      v190 = *((_QWORD *)&v260 + 1);
      v191 = v260;
      if (*((_QWORD *)&v260 + 1) == (_QWORD)v260)
      {
        v191 = *((_QWORD *)&v260 + 1);
      }
      else
      {
        v192 = 0;
        do
        {
          if (*((_DWORD *)v274[0] + 34 * v192))
          {
            v193 = *(_QWORD *)(v191 + 8 * v192);
            v194 = ((uint64_t (*)(uint64_t))v264[3])((uint64_t)&v264);
            if (v194 >= 0)
              v195 = v194;
            else
              v195 = v194 + 1;
            (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, void **, char **, _QWORD, char *))(*(_QWORD *)v193 + 16))(v276, v193, (v195 >> 1), v271, &v286, 0, &v283[8 * v192]);
            if (!*(_DWORD *)v276
              && sub_1D3E0CCB0((uint64_t *)(v260 + 8 * v192), (uint64_t)v276, v189, (uint64_t)&v264, 0))
            {
              sub_1D3E0BD28((uint64_t)v276, v189, (uint64_t)&v264, 2, v196);
              v197 = v274[0];
              v198 = (char *)v274[0] + 136 * v192;
              *(_QWORD *)v198 = *(_QWORD *)v276;
              std::wstring::operator=((std::wstring *)(v198 + 8), (const std::wstring *)&v276[8]);
              v199 = *(_OWORD *)&v276[48];
              v200 = (char *)&v197[34 * v192];
              *((_OWORD *)v200 + 2) = *(_OWORD *)&v276[32];
              *((_OWORD *)v200 + 3) = v199;
              if (v198 == v276)
              {
                v197[34 * v192 + 22] = HIDWORD(v277);
              }
              else
              {
                sub_1D3E0C674(&v197[34 * v192 + 16], *(char **)&v276[64], *(char **)&v276[72], *(_QWORD *)&v276[72] - *(_QWORD *)&v276[64]);
                v201 = (char *)&v197[34 * v192];
                *((_DWORD *)v201 + 22) = HIDWORD(v277);
                sub_1D3E0C77C((uint64_t)(v201 + 96), v278, &v279);
              }
              v202 = (char *)&v197[34 * v192];
              v202[120] = v281;
              *(_QWORD *)(v202 + 124) = v282;
            }
            sub_1D3E0BCE8(v279);
            if (*(_QWORD *)&v276[64])
            {
              *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
              operator delete(*(void **)&v276[64]);
            }
            if ((v276[31] & 0x80000000) != 0)
              operator delete(*(void **)&v276[8]);
            v190 = *((_QWORD *)&v260 + 1);
            v191 = v260;
          }
          ++v192;
        }
        while (v192 < (v190 - v191) >> 3);
      }
      for (j = v274[0]; j != v274[1]; j += 34)
      {
        if (*j)
        {
          v204 = (char *)v271[1] - 1;
          if (v271[0] != v271[1] && v204 > v271[0])
          {
            v206 = (char *)v271[0] + 1;
            do
            {
              v207 = *(v206 - 1);
              *(v206 - 1) = *v204;
              *v204-- = v207;
              v147 = v206++ >= v204;
            }
            while (!v147);
            v190 = *((_QWORD *)&v260 + 1);
            v191 = v260;
          }
          if (v190 != v191)
          {
            v208 = 0;
            do
            {
              if (*((_DWORD *)v274[0] + 34 * v208))
              {
                v209 = *(_QWORD *)(v191 + 8 * v208);
                v210 = ((uint64_t (*)(uint64_t))v264[3])((uint64_t)&v264);
                if (v210 >= 0)
                  v211 = v210;
                else
                  v211 = v210 + 1;
                (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, void **, char **, _QWORD, char *))(*(_QWORD *)v209 + 16))(v276, v209, (v211 >> 1), v271, &v286, 0, &v283[8 * v208]);
                if (!*(_DWORD *)v276
                  && sub_1D3E0CCB0((uint64_t *)(v260 + 8 * v208), (uint64_t)v276, v189, (uint64_t)&v264, 1))
                {
                  sub_1D3E0BD28((uint64_t)v276, (v189 + 180) % 360, (uint64_t)&v264, 2, v212);
                  v213 = v274[0];
                  v214 = (char *)v274[0] + 136 * v208;
                  *(_QWORD *)v214 = *(_QWORD *)v276;
                  std::wstring::operator=((std::wstring *)(v214 + 8), (const std::wstring *)&v276[8]);
                  v215 = *(_OWORD *)&v276[48];
                  v216 = (char *)&v213[34 * v208];
                  *((_OWORD *)v216 + 2) = *(_OWORD *)&v276[32];
                  *((_OWORD *)v216 + 3) = v215;
                  if (v214 == v276)
                  {
                    v213[34 * v208 + 22] = HIDWORD(v277);
                  }
                  else
                  {
                    sub_1D3E0C674(&v213[34 * v208 + 16], *(char **)&v276[64], *(char **)&v276[72], *(_QWORD *)&v276[72] - *(_QWORD *)&v276[64]);
                    v217 = (char *)&v213[34 * v208];
                    *((_DWORD *)v217 + 22) = HIDWORD(v277);
                    sub_1D3E0C77C((uint64_t)(v217 + 96), v278, &v279);
                  }
                  v218 = (char *)&v213[34 * v208];
                  v218[120] = v281;
                  *(_QWORD *)(v218 + 124) = v282;
                }
                sub_1D3E0BCE8(v279);
                if (*(_QWORD *)&v276[64])
                {
                  *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
                  operator delete(*(void **)&v276[64]);
                }
                if ((v276[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v276[8]);
                v190 = *((_QWORD *)&v260 + 1);
                v191 = v260;
              }
              ++v208;
            }
            while (v208 < (v190 - v191) >> 3);
          }
          for (k = v274[0]; k != v274[1]; k += 34)
          {
            if (*k)
              goto LABEL_307;
          }
          break;
        }
      }
LABEL_308:
      *(_QWORD *)v276 = &v283;
      sub_1D3E0BBD4((void ***)v276);
      if (v286)
      {
        v287 = (std::__shared_weak_count *)v286;
        operator delete(v286);
      }
      if (v271[0])
      {
        v271[1] = v271[0];
        operator delete(v271[0]);
      }
LABEL_312:
      sub_1D3E0CA28((uint64_t *)v274);
      goto LABEL_313;
    }
    *(_DWORD *)v276 = 1;
    v279 = 0;
    v280 = 0;
    memset(&v276[4], 0, 80);
    v277 = 0;
    v278 = (uint64_t *)&v279;
    v281 = 0;
    v282 = 0;
    sub_1D3E0BEEC(v271, (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3, (uint64_t)v276);
    sub_1D3E0BCE8(v279);
    if (*(_QWORD *)&v276[64])
    {
      *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
      operator delete(*(void **)&v276[64]);
    }
    if ((v276[31] & 0x80000000) != 0)
      operator delete(*(void **)&v276[8]);
    ((void (*)(_QWORD **))v264[11])(&v264);
    sub_1D3E0C21C(v271, (uint64_t *)&v260, (uint64_t)v286, v118 != 0);
    v165 = (uint64_t **)v271[0];
    for (m = (uint64_t **)v271[1]; v165 != m; v165 += 17)
    {
      if (!*(_DWORD *)v165)
      {
        v167 = sub_1D3DB5520((uint64_t)(v165 + 12));
        sub_1D3DB5578(v165 + 12, (v167 + 270) % 360);
        v168 = *((_OWORD *)v165 + 3);
        *(_OWORD *)v276 = *((_OWORD *)v165 + 2);
        *(_OWORD *)&v276[16] = v168;
        v169 = (*(uint64_t (**)(char *))(*(_QWORD *)v286 + 24))(v286);
        for (n = 0; n != 32; n += 8)
          *(_QWORD *)&v276[n] = (v169 + ~*(_DWORD *)&v276[n + 4]) | ((unint64_t)*(unsigned int *)&v276[n] << 32);
        v171 = *(_OWORD *)&v276[16];
        *((_OWORD *)v165 + 2) = *(_OWORD *)v276;
        *((_OWORD *)v165 + 3) = v171;
      }
    }
    v173 = (char *)v274[0];
    v172 = (char *)v274[1];
    if (v274[1] != v274[0])
    {
      v174 = 0;
      v175 = 124;
      do
      {
        if (*(_DWORD *)&v173[v175 - 124])
        {
          v176 = (char *)v271[0];
          v177 = (char *)v271[0] + v175;
          if (!*(_DWORD *)((char *)v271[0] + v175 - 124))
          {
            *(_QWORD *)&v173[v175 - 124] = *(_QWORD *)(v177 - 124);
            v178 = &v173[v175];
            std::wstring::operator=((std::wstring *)&v173[v175 - 116], (const std::wstring *)(v177 - 116));
            v179 = &v176[v175];
            v180 = *(_OWORD *)&v176[v175 - 92];
            *(_OWORD *)(v178 - 76) = *(_OWORD *)&v176[v175 - 76];
            *(_OWORD *)(v178 - 92) = v180;
            if (v173 != v176)
            {
              sub_1D3E0C674(&v173[v175 - 60], *(char **)(v179 - 60), *(char **)(v179 - 52), *(_QWORD *)(v179 - 52) - *(_QWORD *)(v179 - 60));
              *(_DWORD *)&v173[v175 - 36] = *(_DWORD *)&v176[v175 - 36];
              sub_1D3E0C77C((uint64_t)&v173[v175 - 28], *(_QWORD **)&v176[v175 - 28], &v176[v175 - 20]);
            }
            v181 = &v173[v175];
            *(v181 - 4) = *(v179 - 4);
            *(_QWORD *)v181 = *(_QWORD *)v179;
            v173 = (char *)v274[0];
            v172 = (char *)v274[1];
          }
        }
        ++v174;
        v175 += 136;
      }
      while (v174 < 0xF0F0F0F0F0F0F0F1 * ((v172 - v173) >> 3));
      while (v173 != v172)
      {
        if (*(_DWORD *)v173)
        {
          v185 = v287;
          if (v287)
          {
            v186 = (unint64_t *)&v287->__shared_owners_;
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
          *(_QWORD *)v276 = v271;
          sub_1D3E0CC40((void ***)v276);
          goto LABEL_250;
        }
        v173 += 136;
      }
    }
    sub_1D3E0CA28((uint64_t *)v274);
    v182 = v287;
    if (v287)
    {
      v183 = (unint64_t *)&v287->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    *(_QWORD *)v276 = v271;
    sub_1D3E0CC40((void ***)v276);
LABEL_313:
    if (v258[0])
    {
      v220 = (char *)v258[1];
      v221 = v258[0];
      if (v258[1] != v258[0])
      {
        do
        {
          v220 -= 136;
          sub_1D3E0CFD0((uint64_t)v220);
        }
        while (v220 != v258[0]);
        v221 = v258[0];
      }
      v258[1] = v258[0];
      operator delete(v221);
    }
    *(_OWORD *)v258 = *(_OWORD *)v274;
    v259 = v275;
    v274[1] = 0;
    v275 = 0;
    v274[0] = 0;
    *(_QWORD *)v276 = v274;
    sub_1D3E0CC40((void ***)v276);
    v223 = (char *)v258[0];
    v222 = (char *)v258[1];
    if (v258[0] == v258[1])
    {
      v237 = *(__int16 **)(a2 + 64);
      v238 = 256;
LABEL_339:
      *v237 = v238;
    }
    else
    {
      v255 = vdupq_n_s32(v247);
      v257 = vdupq_n_s32(v248);
      while (1)
      {
        v224 = (float *)(v223 + 32);
        v289 = vld2q_f32(v224);
        v291.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v289.val[0], v257);
        v291.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v289.val[1], v255);
        vst2q_f32(v224, v291);
        memset(v276, 0, 24);
        sub_1D3E2B5E0((unint64_t *)v271, (uint64_t)v223, (uint64_t)v276, 0.0);
        if (!atomic_load((unint64_t *)v271))
          break;
        v226 = *(uint64_t **)a2;
        v227 = *(unint64_t **)(*(_QWORD *)a2 + 8);
        v228 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        if ((unint64_t)v227 >= v228)
        {
          v231 = ((uint64_t)v227 - *v226) >> 3;
          if ((unint64_t)(v231 + 1) >> 61)
            sub_1D3D6D4F8();
          v232 = v228 - *v226;
          v233 = v232 >> 2;
          if (v232 >> 2 <= (unint64_t)(v231 + 1))
            v233 = v231 + 1;
          if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
            v234 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v234 = v233;
          *(_QWORD *)&v276[32] = *(_QWORD *)a2 + 16;
          if (v234)
            v234 = (unint64_t)sub_1D3D6D8A0(v234);
          else
            v235 = 0;
          *(_QWORD *)v276 = v234;
          *(_QWORD *)&v276[8] = v234 + 8 * v231;
          *(_QWORD *)&v276[16] = *(_QWORD *)&v276[8];
          *(_QWORD *)&v276[24] = v234 + 8 * v235;
          do
            v236 = __ldaxr((unint64_t *)v271);
          while (__stlxr(0, (unint64_t *)v271));
          *(_QWORD *)(v234 + 8 * v231) = v236;
          *(_QWORD *)&v276[16] += 8;
          sub_1D3DB37F8(v226, v276);
          v230 = (_QWORD *)v226[1];
          sub_1D3D75F10((uint64_t)v276);
        }
        else
        {
          do
            v229 = __ldaxr((unint64_t *)v271);
          while (__stlxr(0, (unint64_t *)v271));
          *v227 = v229;
          v230 = v227 + 1;
          v226[1] = (uint64_t)v230;
        }
        v226[1] = (uint64_t)v230;
        sub_1D3D74F14((unint64_t *)v271);
        v223 += 136;
        if (v223 == v222)
          goto LABEL_337;
      }
      **(_WORD **)(a2 + 64) = 256;
      sub_1D3D74F14((unint64_t *)v271);
    }
    goto LABEL_341;
  }
  sub_1D3E0BC50(&v286, (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 2);
  v121 = llroundf(v256);
  if (v121 >= 0)
    v122 = v121;
  else
    v122 = -v121;
  if (v122 > 0x58)
    v123 = 1;
  else
    v123 = 2;
  v124 = 3;
  if (v122 > 0x58)
    v124 = 2;
  if (v122 <= 1)
    v125 = 0;
  else
    v125 = v123;
  v126 = ((uint64_t (*)(uint64_t (***)()))v264[v124])(&v264);
  v127 = v126;
  if (v126 / 40 <= 1)
    v128 = 1;
  else
    v128 = v126 / 40;
  if (v126 >= 0)
    v129 = v126;
  else
    v129 = v126 + 1;
  v130 = v129 >> 1;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v131 = (double)v121 * 3.14159265 / 180.0;
  v274[0] = 0;
  v274[1] = 0;
  v275 = 0;
  v132 = cosf(v131);
  v133 = 0;
  while (1)
  {
    v18 = (v133++ & 1) == 0;
    v134 = v133 >> 1;
    if (!v18)
      v134 = -v134;
    v135 = v134 * v128;
    v136 = (v135 + v130);
    if (v135 + v130 < 0 || (int)v136 >= v127)
    {
LABEL_191:
      *(_DWORD *)v276 = 1;
      v279 = 0;
      v280 = 0;
      memset(&v276[4], 0, 80);
      v277 = 0;
      v278 = (uint64_t *)&v279;
      v281 = 0;
      v282 = 0;
      goto LABEL_197;
    }
    if (v125)
    {
      if (v125 != 1)
      {
        v137 = ((BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t))v264[6])((uint64_t)&v264, (int)(float)(v132 * (float)v135), (uint64_t)&v283, (uint64_t)v274);
        goto LABEL_161;
      }
      v138 = 5;
    }
    else
    {
      v138 = 4;
    }
    v137 = ((uint64_t (*)(uint64_t (***)(), uint64_t, char **, void **, BOOL))v264[v138])(&v264, v136, &v283, v274, v128 > 2);
LABEL_161:
    if (v137)
      break;
LABEL_190:
    if (v133 == 41)
      goto LABEL_191;
  }
  v246 = v130;
  v251 = v121;
  v139 = 0;
  v140 = 0;
  v273 = 256;
  while (1)
  {
    v141 = v139;
    v142 = *((unsigned __int8 *)&v273 + v140);
    if (*((_BYTE *)&v273 + v140))
    {
      v143 = v284 - 1;
      if (v283 != v284 && v143 > v283)
      {
        v145 = v283 + 1;
        do
        {
          v146 = *(v145 - 1);
          *(v145 - 1) = *v143;
          *v143-- = v146;
          v147 = v145++ >= v143;
        }
        while (!v147);
      }
      v148 = (char *)v274[1] - 1;
      if (v274[0] != v274[1] && v148 > v274[0])
      {
        v150 = (char *)v274[0] + 1;
        do
        {
          v151 = *(v150 - 1);
          *(v150 - 1) = *v148;
          *v148-- = v151;
          v147 = v150++ >= v148;
        }
        while (!v147);
      }
    }
    v152 = v260;
    if (*((_QWORD *)&v260 + 1) != (_QWORD)v260)
      break;
LABEL_188:
    v139 = 1;
    v140 = 1;
    if ((v141 & 1) != 0)
    {
      v121 = v251;
      v130 = v246;
      goto LABEL_190;
    }
  }
  v153 = 0;
  v154 = 8 * v142;
  while (1)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, char **, void **, uint64_t, char *))(**(_QWORD **)(v152 + 8 * v153) + 16))(v276, *(_QWORD *)(v152 + 8 * v153), v136, &v283, v274, 1, &v286[v154]);
    if (!*(_DWORD *)v276)
      break;
    sub_1D3E0BCE8(v279);
    if (*(_QWORD *)&v276[64])
    {
      *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
      operator delete(*(void **)&v276[64]);
    }
    if ((v276[31] & 0x80000000) != 0)
      operator delete(*(void **)&v276[8]);
    ++v153;
    v152 = v260;
    v154 += 16;
    if (v153 >= (uint64_t)(*((_QWORD *)&v260 + 1) - v260) >> 3)
      goto LABEL_188;
  }
  if ((_DWORD)v142)
  {
    sub_1D3DB5578(&v278, 180);
    v156 = 0;
    *(_OWORD *)v271 = *(_OWORD *)&v276[32];
    v272 = *(_OWORD *)&v276[48];
    v157 = (_DWORD)v284 - (_DWORD)v283;
    do
    {
      v271[v156] = (void *)((~LODWORD(v271[v156]) + v157) | ((unint64_t)HIDWORD(v271[v156]) << 32));
      ++v156;
    }
    while (v156 != 4);
    v155 = *(float32x4_t *)v271;
    *(_OWORD *)&v276[32] = *(_OWORD *)v271;
    *(_OWORD *)&v276[48] = v272;
  }
  sub_1D3E0BD28((uint64_t)v276, v251, (uint64_t)&v264, v125, v155);
LABEL_197:
  if (v274[0])
  {
    v274[1] = v274[0];
    operator delete(v274[0]);
  }
  if (v283)
  {
    v284 = v283;
    operator delete(v283);
  }
  v271[0] = &v286;
  sub_1D3E0BBD4((void ***)v271);
  if (*(_DWORD *)v276)
  {
    **(_WORD **)(a2 + 64) = 256;
    v158 = 1;
  }
  else
  {
    v159 = (const float *)&v276[32];
    v290 = vld2q_f32(v159);
    v160 = vaddq_s32((int32x4_t)v290.val[0], vdupq_n_s32(v248));
    v161 = vaddq_s32((int32x4_t)v290.val[1], vdupq_n_s32(v247));
    v249 = vzip2q_s32(v160, v161);
    v252 = vzip1q_s32(v160, v161);
    *(int32x4_t *)&v276[32] = v252;
    *(int32x4_t *)&v276[48] = v249;
    v162 = operator new(0x40uLL);
    v271[1] = v162 + 4;
    *(_QWORD *)&v272 = v162 + 4;
    *v162 = 0u;
    v162[1] = 0u;
    v162[2] = 0u;
    v162[3] = 0u;
    v271[0] = v162;
    sub_1D3E4E6C0((double *)v162, v253, v254, v21, v20, v256, (double)v252.i32[0], (double)v252.i32[1], v163, (double)v249.i32[0], (double)v249.i32[1]);
    sub_1D3E2B5E0((unint64_t *)&v286, (uint64_t)v276, (uint64_t)v271, v256);
    if (atomic_load((unint64_t *)&v286))
    {
      sub_1D3E2BA8C(*(uint64_t **)a2, (unint64_t *)&v286);
      v158 = 0;
    }
    else
    {
      **(_WORD **)(a2 + 64) = 256;
      v158 = 1;
    }
    sub_1D3D74F14((unint64_t *)&v286);
    if (v271[0])
      operator delete(v271[0]);
  }
  sub_1D3E0BCE8(v279);
  if (*(_QWORD *)&v276[64])
  {
    *(_QWORD *)&v276[72] = *(_QWORD *)&v276[64];
    operator delete(*(void **)&v276[64]);
  }
  if ((v276[31] & 0x80000000) != 0)
    operator delete(*(void **)&v276[8]);
  if (!v158)
  {
LABEL_337:
    v237 = *(__int16 **)(a2 + 64);
    v238 = 257;
    goto LABEL_339;
  }
LABEL_341:
  *(_QWORD *)v276 = v258;
  sub_1D3E0CC40((void ***)v276);
  *(_QWORD *)v276 = &v260;
  sub_1D3E0BBD4((void ***)v276);
  v264 = &off_1E95AF018;
  v239 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
  if (*((_QWORD *)&v265 + 1))
  {
    v240 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = v267;
  if (v267)
  {
    v243 = (unint64_t *)&v267->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
}

void sub_1D3E2B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;

  v61 = *(std::__shared_weak_count **)(v59 - 176);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  a59 = (uint64_t)&a49;
  sub_1D3E0CC40((void ***)&a59);
  a59 = (uint64_t)&a55;
  sub_1D3E0CC40((void ***)&a59);
  a49 = &a25;
  sub_1D3E0CC40((void ***)&a49);
  a49 = &a29;
  sub_1D3E0BBD4((void ***)&a49);
  a34 = (uint64_t)&off_1E95AF018;
  sub_1D3D96F10((uint64_t)&a35);
  sub_1D3D96F10((uint64_t)&a37);
  _Unwind_Resume(a1);
}

unint64_t *sub_1D3E2B5E0(unint64_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  int v8;
  unint64_t v9;
  __CFString **v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t *v13;
  const void *v14;
  int v15;
  const __CFAllocator *v16;
  int v17;
  const UInt8 *v18;
  uint64_t v19;
  const __CFString *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  const void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  double v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  void *v42;
  double *v43;
  int *v44;
  double v45;
  double v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double *v54;
  double *v55;
  unint64_t v56;
  void *__p;
  double *v59;
  unint64_t v60;
  CFDataRef ExternalRepresentation;
  CFStringRef v62;
  _OWORD *v63;

  v63 = sub_1D3DB36B4();
  v8 = *(_DWORD *)(a2 + 4);
  if (v8 >= 0x2000)
  {
    if (v8 == 0x2000)
    {
      v9 = atomic_load((unint64_t *)&v63);
      v10 = &MRCSymbologyGS1DataBarExpanded;
      goto LABEL_15;
    }
    if (v8 == 0x20000)
    {
      v9 = atomic_load((unint64_t *)&v63);
      v10 = MRCSymbologyGS1DataBarLimited;
      goto LABEL_15;
    }
LABEL_8:
    *a1 = 0;
    return sub_1D3D74F14((unint64_t *)&v63);
  }
  if (v8 == 2)
  {
    v11 = atomic_load((unint64_t *)&v63);
    v12 = CFRetain(CFSTR("Codabar"));
    v13 = (unint64_t *)(v11 + 16);
    do
      v14 = (const void *)__ldaxr(v13);
    while (__stlxr((unint64_t)v12, v13));
    if (v14)
      CFRelease(v14);
    v15 = 0;
    goto LABEL_16;
  }
  if (v8 != 4096)
    goto LABEL_8;
  v9 = atomic_load((unint64_t *)&v63);
  v10 = MRCSymbologyGS1DataBar;
LABEL_15:
  sub_1D3D95C6C((unint64_t *)(v9 + 16), *v10);
  v15 = 1;
LABEL_16:
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = *(char *)(a2 + 31);
  if (v17 >= 0)
    v18 = (const UInt8 *)(a2 + 8);
  else
    v18 = *(const UInt8 **)(a2 + 8);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 31);
  else
    v19 = *(_QWORD *)(a2 + 16);
  v62 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, 4 * v19, 0x1C000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (atomic_load((unint64_t *)&v62))
  {
    v21 = (const __CFString *)atomic_load((unint64_t *)&v62);
    ExternalRepresentation = CFStringCreateExternalRepresentation(v16, v21, 0x8000100u, 0);
    v22 = atomic_load((unint64_t *)&ExternalRepresentation);
    if (v22)
    {
      v23 = atomic_load((unint64_t *)&v63);
      v24 = (unint64_t *)(v23 + 24);
      do
        v25 = __ldaxr((unint64_t *)&ExternalRepresentation);
      while (__stlxr(0, (unint64_t *)&ExternalRepresentation));
      do
        v26 = (const void *)__ldaxr(v24);
      while (__stlxr(v25, v24));
      if (v26)
        CFRelease(v26);
      v27 = atomic_load((unint64_t *)&v63);
      *(_DWORD *)(v27 + 32) = 1065353216;
      *(_BYTE *)(v27 + 36) = 1;
      if (*(_BYTE *)(a2 + 120))
      {
        v28 = atomic_load((unint64_t *)&v63);
        if (*(_BYTE *)(v28 + 208))
          sub_1D3DB386C((unint64_t *)(v28 + 200));
        *(_QWORD *)(v28 + 200) = 0;
        *(_OWORD *)(v28 + 168) = 0u;
        *(_OWORD *)(v28 + 184) = 0u;
        *(_BYTE *)(v28 + 208) = 1;
        *(_QWORD *)(v28 + 176) = 2;
      }
      if (v15)
      {
        v29 = atomic_load((unint64_t *)&v63);
        if (!*(_BYTE *)(v29 + 208))
        {
          v30 = atomic_load((unint64_t *)&v63);
          if (*(_BYTE *)(v30 + 208))
            sub_1D3DB386C((unint64_t *)(v30 + 200));
          *(_QWORD *)(v30 + 200) = 0;
          *(_OWORD *)(v30 + 168) = 0u;
          *(_OWORD *)(v30 + 184) = 0u;
          *(_BYTE *)(v30 + 208) = 1;
        }
        v31 = atomic_load((unint64_t *)&v63);
        *(_BYTE *)(v31 + 168) = 1;
      }
      v32 = atomic_load((unint64_t *)&v63);
      v33 = *(_QWORD *)(a2 + 124);
      if (!*(_BYTE *)(v32 + 280))
        *(_BYTE *)(v32 + 280) = 1;
      *(_QWORD *)(v32 + 272) = v33;
      v34 = atomic_load((unint64_t *)&v63);
      *(float *)(v34 + 224) = a4;
      *(_BYTE *)(v34 + 228) = 1;
      v36 = (int *)(a2 + 32);
      v35 = *(_QWORD *)(a2 + 32);
      v37 = (double)*(int *)(a2 + 48);
      v38 = (double)*(int *)(a2 + 52);
      v39 = atomic_load((unint64_t *)&v63);
      if (!*(_BYTE *)(v39 + 264))
        *(_BYTE *)(v39 + 264) = 1;
      *(double *)(v39 + 232) = (double)(int)v35;
      *(double *)(v39 + 240) = (double)SHIDWORD(v35);
      *(double *)(v39 + 248) = v37;
      *(double *)(v39 + 256) = v38;
      if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
      {
        v43 = 0;
        __p = 0;
        v59 = 0;
        v44 = (int *)(a2 + 64);
        v60 = 0;
        do
        {
          v45 = (double)*v36;
          v46 = (double)v36[1];
          if ((unint64_t)v43 >= v60)
          {
            v48 = (double *)__p;
            v49 = ((char *)v43 - (_BYTE *)__p) >> 4;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60)
              sub_1D3D6D4F8();
            v51 = v60 - (_QWORD)__p;
            if ((uint64_t)(v60 - (_QWORD)__p) >> 3 > v50)
              v50 = v51 >> 3;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
              v52 = 0xFFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
              v52 = (unint64_t)sub_1D3D6DB64(v52);
            else
              v53 = 0;
            v54 = (double *)(v52 + 16 * v49);
            *v54 = v45;
            v54[1] = v46;
            v55 = v54;
            if (v43 != v48)
            {
              do
              {
                *((_OWORD *)v55 - 1) = *((_OWORD *)v43 - 1);
                v55 -= 2;
                v43 -= 2;
              }
              while (v43 != v48);
              v43 = (double *)__p;
            }
            v47 = v54 + 2;
            __p = v55;
            v59 = v54 + 2;
            v60 = v52 + 16 * v53;
            if (v43)
              operator delete(v43);
          }
          else
          {
            *v43 = v45;
            v43[1] = v46;
            v47 = v43 + 2;
          }
          v59 = v47;
          v36 += 2;
          v43 = v47;
        }
        while (v36 != v44);
        v56 = atomic_load((unint64_t *)&v63);
        sub_1D3E25CBC(v56 + 40, (uint64_t)&__p);
        if (__p)
          operator delete(__p);
      }
      else
      {
        v40 = atomic_load((unint64_t *)&v63);
        v41 = (void **)(v40 + 40);
        if (*(_BYTE *)(v40 + 64))
        {
          v42 = *v41;
          if (*v41)
          {
            *(_QWORD *)(v40 + 48) = v42;
            operator delete(v42);
          }
          *(_BYTE *)(v40 + 64) = 0;
        }
        *v41 = 0;
        *(_QWORD *)(v40 + 48) = 0;
        *(_QWORD *)(v40 + 56) = 0;
        sub_1D3E2BBDC((_QWORD *)(v40 + 40), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
        *(_BYTE *)(v40 + 64) = 1;
      }
      do
        v22 = __ldaxr((unint64_t *)&v63);
      while (__stlxr(0, (unint64_t *)&v63));
    }
    *a1 = v22;
    sub_1D3DB386C((unint64_t *)&ExternalRepresentation);
  }
  else
  {
    *a1 = 0;
  }
  sub_1D3D8C70C((unint64_t *)&v62);
  return sub_1D3D74F14((unint64_t *)&v63);
}

void sub_1D3E2BA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_1D3D8C70C((unint64_t *)va);
  sub_1D3D74F14((unint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D3E2BA8C(uint64_t *result, unint64_t *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v3 = result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (unint64_t *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = ((uint64_t)v6 - *result) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_1D3D6D4F8();
    v10 = v5 - *result;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v12 = (unint64_t)sub_1D3D6D8A0(v12);
    else
      v13 = 0;
    v15 = v12;
    v16 = v12 + 8 * v9;
    v17 = v16;
    v18 = v12 + 8 * v13;
    do
      v14 = __ldaxr(a2);
    while (__stlxr(0, a2));
    *(_QWORD *)(v12 + 8 * v9) = v14;
    v17 += 8;
    sub_1D3DB37F8(v3, &v15);
    v8 = (_QWORD *)v3[1];
    result = (uint64_t *)sub_1D3D75F10((uint64_t)&v15);
  }
  else
  {
    do
      v7 = __ldaxr(a2);
    while (__stlxr(0, a2));
    *v6 = v7;
    v8 = v6 + 1;
    result[1] = (uint64_t)v8;
  }
  v3[1] = (uint64_t)v8;
  return result;
}

void sub_1D3E2BB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3D75F10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E2BB94(uint64_t a1)
{
  void *v2;

  sub_1D3E0BCE8(*(_QWORD **)(a1 + 104));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_1D3E2BBDC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D3DB38A4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D3E2BC38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D3E2BC54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95B0318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D3E2BC64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95B0318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E2BC94(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D3E2BCA8(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    sub_1D3D7FD48();
  v7 = result;
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = sub_1D3D82278(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 4);
  }
  *(_DWORD *)v7 = 0;
  return result;
}

uint64_t sub_1D3E2BD3C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;

  v11 = *((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v12 = a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v12 = v11;
  }
  sub_1D3E2BCA8(&v16, a2, &a2[v12], v12);
  v13 = a4 | ((unint64_t)a3 << 32);
  v14 = a5 | (unint64_t)(a3 << 32);
  *(_QWORD *)a1 = 0x200000000;
  *(_OWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 88) = 8 * (*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 64));
  return a1;
}

_QWORD *sub_1D3E2BE24(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E95AEC88;
  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  a1[2] = 0;
  return a1;
}

void sub_1D3E2BE64(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E95AEC88;
  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  a1[2] = 0;
  JUMPOUT(0x1D8254C54);
}

void **sub_1D3E2BEB4(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  __int16 v9;

  v6 = 0;
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a1 + 16))
    v7 = *(_DWORD *)(a1 + 16);
  else
    v7 = *(_DWORD *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a2 + 16) >= v6)
      v8 = *(_WORD *)(*(_QWORD *)(a2 + 8) + 2 * v6);
    else
      v8 = 0;
    if (*(_DWORD *)(a1 + 16) >= v6)
      v9 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v6);
    else
      v9 = 0;
    sub_1D3E2C59C(a3, v6++, (__int16)(v9 + v8));
  }
  while (v6 <= v7);
  return sub_1D3E2C644(a3, v7, 1);
}

void **sub_1D3E2BF60(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  __int16 v9;

  v6 = 0;
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a1 + 16))
    v7 = *(_DWORD *)(a1 + 16);
  else
    v7 = *(_DWORD *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a1 + 16) >= v6)
      v8 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v6);
    else
      v8 = 0;
    if (*(_DWORD *)(a2 + 16) >= v6)
      v9 = *(_WORD *)(*(_QWORD *)(a2 + 8) + 2 * v6);
    else
      v9 = 0;
    sub_1D3E2C59C(a3, v6++, (__int16)(v8 - v9));
  }
  while (v6 <= v7);
  return sub_1D3E2C644(a3, v7, 1);
}

uint64_t sub_1D3E2C00C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

uint64_t sub_1D3E2C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  if (a3 == a1)
  {
    v8 = *(_DWORD *)(a2 + 16) + *(_DWORD *)(a3 + 16);
    v7 = operator new();
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = &off_1E95AEC88;
    sub_1D3E2C644((void **)v7, v8, 1);
    v6 = v7;
  }
  else
  {
    sub_1D3E2C644((void **)a3, 0, 1);
    v6 = 0;
    **(_WORD **)(a3 + 8) = 0;
    v7 = a3;
  }
  v9 = 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, *(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v9), v9, v7);
    v9 = (v9 + 1);
  }
  while (v9 <= *(_DWORD *)(a2 + 16));
  if (v6)
  {
    sub_1D3E2C7D4(a3, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_1D3E2C130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x1091C403BDA009ALL);
  _Unwind_Resume(a1);
}

void **sub_1D3E2C154(uint64_t a1, __int16 a2, void **a3)
{
  unsigned int v6;
  void **result;

  v6 = 0;
  do
  {
    result = sub_1D3E2C59C(a3, v6, (__int16)(*(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v6) * a2));
    ++v6;
  }
  while (v6 <= *(_DWORD *)(a1 + 16));
  return result;
}

void sub_1D3E2C1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int16 v26;
  void *exception;
  uint64_t (**v28)();
  void *v29;
  uint64_t v30;
  uint64_t (**v31)();
  void *v32;
  uint64_t v33;

  if (a4 == a3 || a4 == a1 || a4 == a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8254978](exception, "Invalid rem argument");
    goto LABEL_45;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = 1;
  do
  {
    v10 = *(unsigned __int16 *)(v8 + 2 * (v9 - 1));
    if (*(_WORD *)(v8 + 2 * (v9 - 1)))
      v11 = 1;
    else
      v11 = v9 > *(_DWORD *)(a2 + 16);
    ++v9;
  }
  while (!v11);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8254978](exception, "Divide by zero");
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (a3 == a1)
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)v12 = &off_1E95AEC88;
    sub_1D3E2C644((void **)v12, 0, 1);
    v13 = (void **)v12;
  }
  else
  {
    sub_1D3E2C644((void **)a3, 0, 1);
    v12 = 0;
    **(_WORD **)(a3 + 8) = 0;
    v13 = (void **)a3;
  }
  sub_1D3E2C7D4(a4, a1);
  v14 = *(unsigned int *)(a2 + 16);
  v15 = *(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v14);
  v32 = 0;
  v33 = 0;
  v31 = &off_1E95AEC88;
  sub_1D3E2C644((void **)&v31, 0, 1);
  v29 = 0;
  v30 = 0;
  v28 = &off_1E95AEC88;
  sub_1D3E2C644((void **)&v28, 0, 1);
  while (1)
  {
    v16 = *(unsigned int *)(a4 + 16);
    v17 = *(_QWORD *)(a4 + 8);
    v18 = 1;
    do
    {
      v19 = *(unsigned __int16 *)(v17 + 2 * (v18 - 1));
      if (*(_WORD *)(v17 + 2 * (v18 - 1)))
        v20 = 1;
      else
        v20 = v18 > v16;
      ++v18;
    }
    while (!v20);
    if (!v19 || v16 < v14)
      break;
    v22 = *(__int16 *)(v17 + 2 * v16) / v15;
    if (!(_WORD)v22)
    {
      v23 = v17 - 2;
      v24 = *(unsigned int *)(a4 + 16);
      while (v24)
      {
        v25 = v24 - 1;
        if (v24 - 1 < v14)
          break;
        if (v25 <= v16)
          v26 = *(_WORD *)(v23 + 2 * v24);
        else
          v26 = 0;
        v22 = v26 / v15;
        v24 = v25;
        if ((_WORD)v22)
        {
          LODWORD(v16) = v25;
          goto LABEL_27;
        }
      }
      break;
    }
LABEL_27:
    sub_1D3E2C644((void **)&v31, 0, 1);
    *(_WORD *)v32 = 0;
    sub_1D3E2C59C((void **)&v31, v16 - v14, (__int16)v22);
    sub_1D3E2BEB4((uint64_t)&v31, (uint64_t)v13, v13);
    sub_1D3E2C024((uint64_t)&v31, a2, (uint64_t)&v28);
    (*(void (**)(uint64_t, uint64_t (***)(), uint64_t))(*(_QWORD *)a4 + 24))(a4, &v28, a4);
  }
  if (v12)
  {
    sub_1D3E2C7D4(a3, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v28 = &off_1E95AEC88;
  if (v29)
    free(v29);
  v31 = &off_1E95AEC88;
  if (v32)
    free(v32);
}

void sub_1D3E2C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;

  MEMORY[0x1D8254C54](v13, 0x1091C403BDA009ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E2C4D4(uint64_t a1, __int16 a2)
{
  __int16 v2;
  int v3;
  __int16 *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;

  v2 = 0;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 8);
  v5 = 1;
  if ((v3 + 1) > 1)
    v6 = (v3 + 1);
  else
    v6 = 1;
  do
  {
    v7 = *v4++;
    v2 += v7 * v5;
    v5 *= a2;
    --v6;
  }
  while (v6);
  return v2;
}

void **sub_1D3E2C514(uint64_t a1, __int16 a2, int a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  __int16 v10;
  void **result;

  v8 = 0;
  do
  {
    v9 = a3 + v8;
    if (*(_DWORD *)(a4 + 16) >= a3 + v8)
      v10 = *(_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v9);
    else
      v10 = 0;
    result = sub_1D3E2C59C((void **)a4, v9, (__int16)(v10 + *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v8++) * a2));
  }
  while (v8 <= *(_DWORD *)(a1 + 16));
  return result;
}

void **sub_1D3E2C59C(void **result, unsigned int a2, int a3)
{
  void **v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v8;
  _WORD *v9;
  char *v10;
  int v11;

  v4 = result;
  v5 = *((_DWORD *)result + 4);
  if (a3)
  {
    v6 = a3;
    if (v5 < a2)
      result = sub_1D3E2C644(result, a2, 0);
    *((_WORD *)v4[1] + a2) = v6;
  }
  else if (v5 >= a2)
  {
    if (v5 != a2 || v5 == 0)
    {
      *((_WORD *)result[1] + a2) = 0;
    }
    else
    {
      v8 = a2 - 1;
      *((_DWORD *)result + 4) = v8;
      if (a2 != 1)
      {
        v9 = result[1];
        if (!v9[v8])
        {
          v10 = (char *)(v9 - 1);
          do
          {
            v11 = v8 - 1;
            if (v8 == 1)
              break;
          }
          while (!*(unsigned __int16 *)&v10[2 * v8--]);
          *((_DWORD *)result + 4) = v11;
        }
      }
    }
  }
  return result;
}

void **sub_1D3E2C644(void **result, unsigned int a2, int a3)
{
  void **v5;
  unsigned int v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  unsigned int v12;
  void *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  void *exception;

  v5 = result;
  v6 = *((_DWORD *)result + 4);
  if (v6 >= a2 && (v7 = result[1]) != 0)
  {
    *((_DWORD *)result + 4) = a2;
    if (a2 && a3 && !v7[a2])
    {
      v8 = a2;
      v9 = v7 - 1;
      do
      {
        v10 = v8 - 1;
        if (v8 == 1)
          break;
      }
      while (!v9[v8--]);
      goto LABEL_31;
    }
  }
  else
  {
    v12 = *((_DWORD *)result + 5);
    if (v12 <= a2)
    {
      v13 = result[1];
      if (v13)
      {
        v14 = 2 * v12;
        v15 = a2;
        if (2 * v12)
        {
          do
          {
            v15 = v14;
            v14 *= 2;
          }
          while (v15 <= a2);
        }
      }
      else
      {
        v15 = a2 + 1;
      }
      result = (void **)malloc_type_realloc(result[1], 2 * v15, 0xF8274CFDuLL);
      v5[1] = result;
      if (!result)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8254978](exception, "Malloc failure");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (!v13)
        *(_WORD *)result = 0;
      *((_DWORD *)v5 + 5) = v15;
      v6 = *((_DWORD *)v5 + 4);
    }
    v16 = v6 + 1;
    if (v16 <= a2)
    {
      v17 = v5[1];
      do
        v17[v16++] = 0;
      while (v16 <= a2);
    }
    if (!a2)
    {
      v10 = 0;
      *(_WORD *)v5[1] = 0;
LABEL_31:
      *((_DWORD *)v5 + 4) = v10;
      return result;
    }
    *((_DWORD *)v5 + 4) = a2;
    if (a3)
    {
      v18 = v5[1];
      if (!v18[a2])
      {
        v19 = a2;
        v20 = v18 - 1;
        do
        {
          v21 = v19 - 1;
          if (v19 == 1)
            break;
        }
        while (!v20[v19--]);
        v10 = v21;
        goto LABEL_31;
      }
    }
  }
  return result;
}

void sub_1D3E2C7C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E2C7D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;

  sub_1D3E2C644((void **)a1, *(_DWORD *)(a2 + 16), 0);
  v4 = 0;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if ((v5 + 1) > 1)
    v9 = (v5 + 1);
  else
    v9 = 1;
  do
  {
    if (v4 <= v6)
      v10 = *(_WORD *)(v8 + 2 * v4);
    else
      v10 = 0;
    *(_WORD *)(v7 + 2 * v4++) = v10;
  }
  while (v9 != v4);
  if ((_DWORD)v5 && !*(_WORD *)(v7 + 2 * v5))
  {
    v11 = v7 - 2;
    do
    {
      v12 = v5 - 1;
      if (v5 == 1)
        break;
    }
    while (!*(unsigned __int16 *)(v11 + 2 * v5--));
    *(_DWORD *)(a1 + 16) = v12;
  }
  return a1;
}

_QWORD *sub_1D3E2C874(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E95AEC88;
  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  a1[2] = 0;
  return a1;
}

void sub_1D3E2C8B4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E95AEC88;
  v2 = (void *)a1[1];
  if (v2)
  {
    free(v2);
    a1[1] = 0;
  }
  a1[2] = 0;
  JUMPOUT(0x1D8254C54);
}

void **sub_1D3E2C904(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a1 + 16))
    v7 = *(_DWORD *)(a1 + 16);
  else
    v7 = *(_DWORD *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a2 + 16) >= v6)
      v8 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v6);
    else
      v8 = 0;
    if (*(_DWORD *)(a1 + 16) >= v6)
      v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v6);
    else
      v9 = 0;
    sub_1D3E2C59C(a3, v6++, *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 2 * (v9 + v8)));
  }
  while (v6 <= v7);
  return sub_1D3E2C644(a3, v7, 1);
}

void **sub_1D3E2C9B8(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a1 + 16))
    v7 = *(_DWORD *)(a1 + 16);
  else
    v7 = *(_DWORD *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a1 + 16) >= v6)
      v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v6);
    else
      v8 = 0;
    if (*(_DWORD *)(a2 + 16) >= v6)
      v9 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v6);
    else
      v9 = 0;
    sub_1D3E2C59C(a3, v6++, *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 2 * (v8 - v9 + **(unsigned __int16 **)(a1 + 24))));
  }
  while (v6 <= v7);
  return sub_1D3E2C644(a3, v7, 1);
}

void **sub_1D3E2CA74(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a1 + 16))
    v7 = *(_DWORD *)(a1 + 16);
  else
    v7 = *(_DWORD *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a2 + 16) >= v6)
      v8 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v6);
    else
      v8 = 0;
    if (*(_DWORD *)(a1 + 16) >= v6)
      v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v6);
    else
      v9 = 0;
    sub_1D3E2C59C(a3, v6++, *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 2 * (v8 - v9 + **(unsigned __int16 **)(a1 + 24))));
  }
  while (v6 <= v7);
  return sub_1D3E2C644(a3, v7, 1);
}

uint64_t sub_1D3E2CB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  if (a3 == a1)
  {
    v8 = *(_DWORD *)(a2 + 16) + *(_DWORD *)(a3 + 16);
    v7 = operator new();
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = &off_1E95AEC88;
    sub_1D3E2C644((void **)v7, v8, 1);
    v6 = v7;
  }
  else
  {
    sub_1D3E2C644((void **)a3, 0, 1);
    v6 = 0;
    **(_WORD **)(a3 + 8) = 0;
    v7 = a3;
  }
  v9 = 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, *(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v9), v9, v7);
    v9 = (v9 + 1);
  }
  while (v9 <= *(_DWORD *)(a2 + 16));
  if (v6)
  {
    sub_1D3E2C7D4(a3, v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void sub_1D3E2CC3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8254C54](v1, 0x1091C403BDA009ALL);
  _Unwind_Resume(a1);
}

void **sub_1D3E2CC60(uint64_t a1, int a2, void **a3)
{
  unsigned int v6;
  uint64_t v7;
  __int16 v8;
  _QWORD *v9;
  void **result;

  v6 = 0;
  v7 = (unsigned __int16)a2;
  do
  {
    v8 = 0;
    if (a2)
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v6))
      {
        v9 = *(_QWORD **)(a1 + 24);
        v8 = *(_WORD *)(v9[3]
                      + 2
                      * *(unsigned __int16 *)(v9[2]
                                            + 2
                                            * (*(unsigned __int16 *)(v9[4]
                                                                   + 2
                                                                   * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v6))
                                             + (unint64_t)*(unsigned __int16 *)(v9[4] + 2 * v7))));
      }
    }
    result = sub_1D3E2C59C(a3, v6++, v8);
  }
  while (v6 <= *(_DWORD *)(a1 + 16));
  return result;
}

void sub_1D3E2CCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  __int16 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  void *exception;
  uint64_t (**v27)();
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)();
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (**v39)();
  void *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = 1;
  do
  {
    v10 = *(unsigned __int16 *)(v8 + 2 * (v9 - 1));
    if (*(_WORD *)(v8 + 2 * (v9 - 1)))
      v11 = 1;
    else
      v11 = v9 > *(_DWORD *)(a2 + 16);
    ++v9;
  }
  while (!v11);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8254978](exception, "Divide by zero");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v12 = *(_QWORD *)(a1 + 24);
  v40 = 0;
  v41 = 0;
  v39 = &off_1E95AEC88;
  sub_1D3E2C644((void **)&v39, 0, 1);
  v39 = &off_1E95AED10;
  v42 = v12;
  v13 = *(unsigned int *)(a2 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 40) + 2 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v13));
  v36 = 0;
  v37 = 0;
  v35 = &off_1E95AEC88;
  sub_1D3E2C644((void **)&v35, 0, 1);
  v35 = &off_1E95AED10;
  v38 = v14;
  v16 = *(_QWORD *)(a1 + 24);
  v32 = 0;
  v33 = 0;
  v31 = &off_1E95AEC88;
  sub_1D3E2C644((void **)&v31, 0, 1);
  v31 = &off_1E95AED10;
  v34 = v16;
  v28 = 0;
  v29 = 0;
  v27 = &off_1E95AEC88;
  sub_1D3E2C7D4((uint64_t)&v27, a1);
  v17 = *(_QWORD *)(a1 + 24);
  v27 = &off_1E95AED10;
  v30 = v17;
  while (1)
  {
    v18 = 1;
    do
    {
      v19 = *((unsigned __int16 *)v28 + v18 - 1);
      if (*((_WORD *)v28 + v18 - 1))
        v20 = 1;
      else
        v20 = v18 > v29;
      ++v18;
    }
    while (!v20);
    if (!v19 || v29 < v13)
      break;
    v22 = 0;
    v23 = *(_QWORD **)(a1 + 24);
    v24 = v23[2];
    if ((_DWORD)v15 && *((_WORD *)v28 + v29))
      v22 = *(_WORD *)(v23[3]
                     + 2
                     * *(unsigned __int16 *)(v24
                                           + 2
                                           * (*(unsigned __int16 *)(v23[4] + 2 * v15)
                                            + (unint64_t)*(unsigned __int16 *)(v23[4]
                                                                                    + 2
                                                                                    * *((unsigned __int16 *)v28
                                                                                      + v29)))));
    v25 = *(unsigned __int16 *)(v24
                              + 2
                              * ((~(_DWORD)v13 | 0xFFFFFFFFFFFF0000)
                               + (unsigned __int16)v29
                               + *(unsigned __int16 *)v23));
    sub_1D3E2C644((void **)&v35, 0, 1);
    *(_WORD *)v36 = 0;
    sub_1D3E2C59C((void **)&v35, v25, v22);
    sub_1D3E2C904((uint64_t)&v35, (uint64_t)&v39, (void **)&v39);
    sub_1D3E2CB30((uint64_t)&v35, a2, (uint64_t)&v31);
    sub_1D3E2C9B8((uint64_t)&v27, (uint64_t)&v31, (void **)&v27);
  }
  sub_1D3E2C7D4(a4, (uint64_t)&v27);
  sub_1D3E2C7D4(a3, (uint64_t)&v39);
  v27 = &off_1E95AEC88;
  if (v28)
    free(v28);
  v31 = &off_1E95AEC88;
  if (v32)
    free(v32);
  v35 = &off_1E95AEC88;
  if (v36)
    free(v36);
  if (v40)
    free(v40);
}

void sub_1D3E2CF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E2CFE4(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = 0;
  v3 = *(unsigned __int16 **)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(unsigned __int16 **)(a1 + 8);
  v6 = 1;
  if ((v4 + 1) > 1)
    v7 = (v4 + 1);
  else
    v7 = 1;
  do
  {
    v8 = 0;
    v10 = *v5++;
    v9 = v10;
    if (v6 && (_DWORD)v9)
      v8 = *(unsigned __int16 *)(*((_QWORD *)v3 + 3)
                               + 2
                               * *(unsigned __int16 *)(*((_QWORD *)v3 + 2)
                                                     + 2
                                                     * (*(unsigned __int16 *)(*((_QWORD *)v3 + 4) + 2 * v6)
                                                      + (unint64_t)*(unsigned __int16 *)(*((_QWORD *)v3 + 4)
                                                                                              + 2 * v9))));
    v11 = 0;
    if ((*v3 & (unsigned __int16)((a2 % *v3) >> 31)) + (unsigned __int16)(a2 % *v3) && v6)
      v11 = *(unsigned __int16 *)(*((_QWORD *)v3 + 3)
                                + 2
                                * *(unsigned __int16 *)(*((_QWORD *)v3 + 2)
                                                      + 2
                                                      * (*(unsigned __int16 *)(*((_QWORD *)v3 + 4)
                                                                             + 2
                                                                             * (unsigned __int16)((*v3 & ((a2 % *v3) >> 31))
                                                                                                + a2 % *v3))
                                                       + (unint64_t)*(unsigned __int16 *)(*((_QWORD *)v3 + 4)
                                                                                               + 2 * v6))));
    LOWORD(v2) = *(_WORD *)(*((_QWORD *)v3 + 1) + 2 * (v8 + v2));
    v6 = v11;
    --v7;
  }
  while (v7);
  return (__int16)v2;
}

void **sub_1D3E2D090(uint64_t a1, int a2, unsigned __int16 a3, uint64_t a4)
{
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void **result;

  v7 = 0;
  v8 = (unsigned __int16)a2;
  v9 = a3;
  do
  {
    v10 = *(_QWORD **)(a1 + 24);
    v11 = v7;
    if (a2 && *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v7))
    {
      v12 = v10[4];
      v13 = *(unsigned __int16 *)(v12 + 2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v7));
      v14 = *(unsigned __int16 *)(v12 + 2 * v8);
      v15 = v10[2];
      v16 = *(unsigned __int16 *)(v10[3] + 2 * *(unsigned __int16 *)(v15 + 2 * (v14 + v13)));
    }
    else
    {
      v16 = 0;
      v15 = v10[2];
    }
    v17 = *(unsigned __int16 *)(v15 + 2 * (v11 + v9));
    if (*(_DWORD *)(a4 + 16) >= v17)
      v18 = *(unsigned __int16 *)(*(_QWORD *)(a4 + 8) + 2 * *(unsigned __int16 *)(v15 + 2 * (v11 + v9)));
    else
      v18 = 0;
    result = sub_1D3E2C59C((void **)a4, v17, *(__int16 *)(v10[1] + 2 * (v18 + v16)));
    v7 = v11 + 1;
  }
  while (*(_DWORD *)(a1 + 16) >= (unsigned __int16)(v11 + 1));
  return result;
}

uint64_t sub_1D3E2D158(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E95AEC88;
  sub_1D3E2C644((void **)a1, a3, 1);
  if (*(_DWORD *)(a1 + 16) < a3)
    sub_1D3E2C644((void **)a1, a3, 0);
  *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * a3) = 1;
  *(_QWORD *)a1 = &off_1E95AED10;
  *(_QWORD *)(a1 + 24) = a2;
  return a1;
}

uint64_t sub_1D3E2D1DC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;

  sub_1D3E2C644((void **)a1, *(_DWORD *)(a2 + 16), 0);
  v4 = 0;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  do
  {
    if (v6 >= v4)
      v9 = *(_WORD *)(v7 + 2 * (unsigned __int16)v4);
    else
      v9 = 0;
    *(_WORD *)(v8 + 2 * (unsigned __int16)v4++) = v9;
  }
  while (v5 >= (unsigned __int16)v4);
  if ((_DWORD)v5 && !*(_WORD *)(v8 + 2 * v5))
  {
    v10 = v8 - 2;
    do
    {
      v11 = v5 - 1;
      if (v5 == 1)
        break;
    }
    while (!*(unsigned __int16 *)(v10 + 2 * v5--));
    *(_DWORD *)(a1 + 16) = v11;
  }
  return a1;
}

unint64_t *sub_1D3E2D270(unint64_t *a1, unint64_t *a2)
{
  __CVBuffer *v6;
  OSType PixelFormatType;
  __CVBuffer *v8;
  size_t Width;
  __CVBuffer *v10;
  size_t Height;
  __CFString *v12;
  unint64_t v13;
  __CFString *v14;
  int v15;
  uint64_t v16;
  int32x2_t v17;
  int8x8_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64x2_t v21;
  uint64_t v22;
  __CFString *v23;
  __CFString *v24;
  __CVBuffer *v25;
  int IsPlanar;
  __CFString *v27;
  __CVBuffer *v28;
  size_t PlaneCount;
  __CFString *v30;
  size_t v31;
  __CVBuffer *v32;
  size_t WidthOfPlane;
  __CVBuffer *v34;
  size_t HeightOfPlane;
  __CVBuffer *v36;
  void *BaseAddressOfPlane;
  __CVBuffer *v38;
  size_t BytesPerRowOfPlane;
  __CFString *v40;
  __CFString *v41;
  __CFString *v42;
  __CFString *v43;
  __CFString *v44;
  __CFString *v45;
  const __CFString *v46;
  __CVBuffer *v47;
  void *BaseAddress;
  __CVBuffer *v49;
  size_t BytesPerRow;
  __CFString *v51;
  __CFString *v52;
  __CVBuffer *v53;
  IOSurfaceRef IOSurface;
  __IOSurface *v55;
  __CFString *v56;
  __CFString *v57;
  __CFString *v58;
  uint64_t ID;
  int v61;
  char v62;

  if (atomic_load(a1))
  {
    if (atomic_load(a2))
    {
      v6 = (__CVBuffer *)atomic_load(a2);
      PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
      v8 = (__CVBuffer *)atomic_load(a2);
      Width = CVPixelBufferGetWidth(v8);
      v10 = (__CVBuffer *)atomic_load(a2);
      Height = CVPixelBufferGetHeight(v10);
      v12 = (__CFString *)atomic_load(a1);
      v13 = atomic_load(a2);
      CFStringAppendFormat(v12, 0, CFSTR("<CVPixelBuffer %p: "), v13);
      v14 = (__CFString *)atomic_load(a1);
      v15 = HIBYTE(PixelFormatType);
      if (HIBYTE(PixelFormatType) - 32 >= 0x5Fu)
        v15 = 46;
      if (PixelFormatType - 32 >= 0x5F)
        v16 = 46;
      else
        v16 = PixelFormatType;
      v17 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(PixelFormatType), (uint32x2_t)0xFFFFFFF0FFFFFFF8);
      v18 = vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x5F0000005FLL, (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v17, (int32x2_t)0xE0000000E0), (int8x8_t)0xFF000000FFLL)), (int8x8_t)v17, (int8x8_t)0x2E0000002ELL);
      v19.i64[0] = v18.u32[0];
      v19.i64[1] = v18.u32[1];
      v20.i64[0] = 255;
      v20.i64[1] = 255;
      v21 = vshlq_u64((uint64x2_t)vandq_s8(v19, v20), (uint64x2_t)xmmword_1D3E82010);
      v22 = v21.i64[0] | (v16 << 24) | v21.i64[1];
      v62 = BYTE4(v22);
      v61 = v22 | v15;
      CFStringAppendFormat(v14, 0, CFSTR("pixelFormatType=%.4s, "), &v61);
      v23 = (__CFString *)atomic_load(a1);
      CFStringAppendFormat(v23, 0, CFSTR("width=%zu, "), Width);
      v24 = (__CFString *)atomic_load(a1);
      CFStringAppendFormat(v24, 0, CFSTR("height=%zu, "), Height);
      v25 = (__CVBuffer *)atomic_load(a2);
      IsPlanar = CVPixelBufferIsPlanar(v25);
      v27 = (__CFString *)atomic_load(a1);
      if (IsPlanar)
      {
        CFStringAppend(v27, CFSTR("planar, "));
        v28 = (__CVBuffer *)atomic_load(a2);
        PlaneCount = CVPixelBufferGetPlaneCount(v28);
        v30 = (__CFString *)atomic_load(a1);
        CFStringAppendFormat(v30, 0, CFSTR("planeCount=%zu, "), PlaneCount);
        if (PlaneCount)
        {
          v31 = 0;
          do
          {
            v32 = (__CVBuffer *)atomic_load(a2);
            WidthOfPlane = CVPixelBufferGetWidthOfPlane(v32, v31);
            v34 = (__CVBuffer *)atomic_load(a2);
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(v34, v31);
            v36 = (__CVBuffer *)atomic_load(a2);
            BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v36, v31);
            v38 = (__CVBuffer *)atomic_load(a2);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v38, v31);
            v40 = (__CFString *)atomic_load(a1);
            CFStringAppendFormat(v40, 0, CFSTR("widthOfPlane%zu=%zu, "), v31, WidthOfPlane);
            v41 = (__CFString *)atomic_load(a1);
            CFStringAppendFormat(v41, 0, CFSTR("heightOfPlane%zu=%zu, "), v31, HeightOfPlane);
            v42 = (__CFString *)atomic_load(a1);
            CFStringAppendFormat(v42, 0, CFSTR("baseAddressOfPlane%zu=%p, "), v31, BaseAddressOfPlane);
            v43 = (__CFString *)atomic_load(a1);
            CFStringAppendFormat(v43, 0, CFSTR("bytesPerRowOfPlane%zu=%zu"), v31++, BytesPerRowOfPlane);
            if (v31 < PlaneCount)
            {
              v44 = (__CFString *)atomic_load(a1);
              CFStringAppend(v44, CFSTR(", "));
            }
          }
          while (PlaneCount != v31);
        }
      }
      else
      {
        CFStringAppend(v27, CFSTR("non-planar, "));
        v47 = (__CVBuffer *)atomic_load(a2);
        BaseAddress = CVPixelBufferGetBaseAddress(v47);
        v49 = (__CVBuffer *)atomic_load(a2);
        BytesPerRow = CVPixelBufferGetBytesPerRow(v49);
        v51 = (__CFString *)atomic_load(a1);
        CFStringAppendFormat(v51, 0, CFSTR("baseAddress=%p, "), BaseAddress);
        v52 = (__CFString *)atomic_load(a1);
        CFStringAppendFormat(v52, 0, CFSTR("bytesPerRow=%zu"), BytesPerRow);
      }
      v53 = (__CVBuffer *)atomic_load(a2);
      IOSurface = CVPixelBufferGetIOSurface(v53);
      if (IOSurface)
      {
        v55 = IOSurface;
        v56 = (__CFString *)atomic_load(a1);
        CFStringAppend(v56, CFSTR(", "));
        v57 = (__CFString *)atomic_load(a1);
        CFStringAppendFormat(v57, 0, CFSTR("surface=%p, "), v55);
        v58 = (__CFString *)atomic_load(a1);
        ID = IOSurfaceGetID(v55);
        CFStringAppendFormat(v58, 0, CFSTR("surfaceID=%#x"), ID);
      }
      v45 = (__CFString *)atomic_load(a1);
      v46 = CFSTR(">");
    }
    else
    {
      v45 = (__CFString *)atomic_load(a1);
      v46 = CFSTR("<null>");
    }
    CFStringAppend(v45, v46);
  }
  return a1;
}

unint64_t *sub_1D3E2D5D0(unint64_t *a1, double a2)
{
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;

  if (atomic_load(a1))
  {
    if (fabs(a2) == INFINITY)
    {
      if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
      {
        v4 = (__CFString *)atomic_load(a1);
        CFStringAppend(v4, CFSTR("-"));
      }
      v5 = (__CFString *)atomic_load(a1);
      CFStringAppend(v5, CFSTR("Infinity"));
    }
    else
    {
      v6 = (__CFString *)atomic_load(a1);
      CFStringAppendFormat(v6, 0, CFSTR("%.*g"), 17, *(_QWORD *)&a2);
    }
  }
  return a1;
}

unint64_t *sub_1D3E2D678(unint64_t *a1, double *a2)
{
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;

  if (atomic_load(a1))
  {
    v5 = (__CFString *)atomic_load(a1);
    CFStringAppend(v5, CFSTR("{x="));
    sub_1D3E2D5D0(a1, *a2);
    v6 = (__CFString *)atomic_load(a1);
    CFStringAppend(v6, CFSTR(", y="));
    sub_1D3E2D5D0(a1, a2[1]);
    v7 = (__CFString *)atomic_load(a1);
    CFStringAppend(v7, CFSTR("}"));
  }
  return a1;
}

_QWORD *sub_1D3E2D6EC(_QWORD *a1)
{
  *a1 = &off_1E95AECE8;
  sub_1D3E29A00(a1 + 1);
  return a1;
}

void sub_1D3E2D71C(_QWORD *a1)
{
  *a1 = &off_1E95AECE8;
  sub_1D3E29A00(a1 + 1);
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E2D75C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 56) = a2;
  return result;
}

_QWORD *sub_1D3E2D764(_QWORD *a1)
{
  *a1 = &off_1E95AECE8;
  sub_1D3E29A00(a1 + 1);
  return a1;
}

void sub_1D3E2D794(_QWORD *a1)
{
  *a1 = &off_1E95AECE8;
  sub_1D3E29A00(a1 + 1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E2D7D4(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D3D8223C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D3E2D82C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1D3E2D848(uint64_t a1)
{
  if (a1 < 0)
    sub_1D3D6D50C();
  return operator new(2 * a1);
}

double ACBSConfigCreate()
{
  _DWORD *v0;
  double result;

  sub_1D3E36CA0();
  v0 = malloc_type_calloc(1uLL, 0x28uLL, 0x1060040CBFE3DCFuLL);
  v0[1] = 8;
  v0[8] = 0;
  *(_WORD *)v0 = 0;
  result = NAN;
  *((_OWORD *)v0 + 1) = xmmword_1D3E82180;
  *((_BYTE *)v0 + 36) = 0;
  return result;
}

void ACBSConfigFree(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  free(a1);
}

CFTypeRef ACBSConfigCopy(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  CFTypeRef result;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(CFTypeRef *)(a1 + 8);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t ACBSConfigSetMaxQRModuleSamples(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t ACBSConfigSetMaxQRPatternSets(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t ACBSConfigSetLocateMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t ACBSConfigSetWantedLinearDecodeScanlines(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t ACBSConfigSetMaxLinearDecodeScanlines(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t ACBSConfigSetMaxLinearDecodeTime(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

CFArrayRef ACBSConfigSetSymbologiesEnabled(uint64_t a1, CFArrayRef theArray)
{
  const void *v4;
  CFArrayRef result;

  v4 = *(const void **)(a1 + 8);
  if (v4)
    CFRelease(v4);
  result = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

CFArrayRef ACBSConfigCopySymbologiesEnabled(uint64_t a1)
{
  const __CFArray *v1;
  const __CFAllocator *v2;

  v1 = *(const __CFArray **)(a1 + 8);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v1)
    return CFArrayCreateCopy(v2, v1);
  else
    return CFArrayCreate(v2, 0, 0, MEMORY[0x1E0C9B378]);
}

_BYTE *ACBSConfigSetDebuggingEnabled(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t ACBSConfigSetFailedLocationsEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1) = a2;
  return result;
}

uint64_t ACBSConfigSetStopsAtFirstPyramidWith2DCode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 36) = a2;
  return result;
}

__CFDictionary *ACBSCreateFrameInfoBySearchingForBarcodesInCGImage(uint64_t a1, CGImage *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGImage *v14;
  unint64_t Width;
  unint64_t Height;
  CGColorSpace *DeviceRGB;
  CGContext *v18;
  CGContext *v19;
  __CFDictionary *v20;
  vImage_YpCbCrPixelRange v22;
  vImage_Buffer destCbCr;
  vImage_Buffer destYp;
  vImage_Buffer src;
  CVPixelBufferRef pixelBufferOut;
  vImage_ARGBToYpCbCr outInfo;
  uint64_t v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v28 = *MEMORY[0x1E0C80C00];
  if (CGRectIsNull(*(CGRect *)&a4))
    goto LABEL_4;
  v29.origin.x = a4;
  v29.origin.y = a5;
  v29.size.width = a6;
  v29.size.height = a7;
  if (CGRectIsEmpty(v29)
    || (v30.origin.x = a4, v30.origin.y = a5, v30.size.width = a6, v30.size.height = a7, CGRectIsInfinite(v30)))
  {
LABEL_4:
    v14 = 0;
  }
  else
  {
    v32.origin.x = a4;
    v32.origin.y = a5;
    v32.size.width = a6;
    v32.size.height = a7;
    a2 = CGImageCreateWithImageInRect(a2, v32);
    v14 = a2;
  }
  Width = CGImageGetWidth(a2);
  Height = CGImageGetHeight(a2);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v18 = CGBitmapContextCreate(0, Width, Height, 8uLL, (4 * Width + 15) & 0xFFFFFFFFFFFFFFF0, DeviceRGB, 2u);
  if (!v18)
  {
    v20 = 0;
    if (!v14)
      goto LABEL_16;
    goto LABEL_15;
  }
  v19 = v18;
  v31.origin.x = 0.0;
  v31.origin.y = 0.0;
  v31.size.width = (double)Width;
  v31.size.height = (double)Height;
  CGContextDrawImage(v18, v31, a2);
  pixelBufferOut = 0;
  v20 = 0;
  if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Width, Height, 0x34323066u, 0, &pixelBufferOut))
  {
    v20 = 0;
    if (!CVPixelBufferLockBaseAddress(pixelBufferOut, 0))
    {
      src.data = CGBitmapContextGetData(v19);
      src.height = CGBitmapContextGetHeight(v19);
      src.width = CGBitmapContextGetWidth(v19);
      src.rowBytes = CGBitmapContextGetBytesPerRow(v19);
      destYp.data = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
      destYp.height = CVPixelBufferGetHeightOfPlane(pixelBufferOut, 0);
      destYp.width = CVPixelBufferGetWidthOfPlane(pixelBufferOut, 0);
      destYp.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
      destCbCr.data = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
      destCbCr.height = CVPixelBufferGetHeightOfPlane(pixelBufferOut, 1uLL);
      destCbCr.width = CVPixelBufferGetWidthOfPlane(pixelBufferOut, 1uLL);
      destCbCr.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
      v22 = *(vImage_YpCbCrPixelRange *)ymmword_1D3E756C8;
      v20 = 0;
      if (!vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x1E0C8BDA0], &v22, &outInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0))
      {
        v20 = 0;
        if (!vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, &outInfo, 0, 0))
          v20 = ACBSCreateFrameInfoBySearchingForBarcodesInCVPixelBuffer(a1, pixelBufferOut, a3, 0.0, 0.0, (double)Width, (double)Height);
      }
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    }
  }
  if (pixelBufferOut)
    CVPixelBufferRelease(pixelBufferOut);
  CGContextRelease(v19);
  if (v14)
LABEL_15:
    CGImageRelease(v14);
LABEL_16:
  CGColorSpaceRelease(DeviceRGB);
  return v20;
}

__CFDictionary *ACBSCreateFrameInfoBySearchingForBarcodesInCVPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  size_t WidthOfPlane;
  CFTypeRef v15;
  char *v16;
  char *v17;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;
  CFArrayRef v20;
  CFNumberRef v21;
  const void **v22;
  __CFArray *v23;
  CFNumberRef v24;
  const void *v25;
  __n128 v26;
  unint64_t *v27;
  const __CFDictionary *v28;
  __CFDictionary *MutableCopy;
  unint64_t v30;
  size_t HeightOfPlane;
  unint64_t v32;
  double v33;
  double v34;
  double x;
  double y;
  double width;
  double height;
  CFTypeID TypeID;
  double v40;
  double v41;
  double v42;
  double v43;
  CGColorSpace *DeviceRGB;
  char *BaseAddress;
  size_t v46;
  size_t v47;
  size_t BytesPerRow;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  size_t v55;
  size_t v56;
  uint64_t v57;
  double v58;
  size_t v59;
  char *v60;
  char *v61;
  size_t v62;
  CGDataProvider *v63;
  CGImage *v64;
  CGImage *v65;
  double v66;
  size_t v67;
  uint64_t v68;
  CFIndex DescriptorCount;
  CFIndex v71;
  __CFArray *v72;
  unint64_t i;
  char *DescriptorAtIndex;
  const __CFDictionary *v75;
  const __CFDictionary *v76;
  __CFDictionary *v77;
  uint64_t j;
  const void *v79;
  const void *Value;
  size_t v81;
  CGColorSpace *theDict;
  __CFDictionary *theDicta;
  char *__dst;
  char *__dsta;
  int v86;
  CFErrorRef err;
  uint64_t valuePtr;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1111970369)
  {
    if (CVPixelBufferIsPlanar(pixelBuffer))
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    else
      WidthOfPlane = CVPixelBufferGetWidth(pixelBuffer);
    v30 = WidthOfPlane;
    if (CVPixelBufferIsPlanar(pixelBuffer))
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    else
      HeightOfPlane = CVPixelBufferGetHeight(pixelBuffer);
    v32 = HeightOfPlane;
    v89.origin.x = a4;
    v89.origin.y = a5;
    v89.size.width = a6;
    v89.size.height = a7;
    if (CGRectIsNull(v89))
      goto LABEL_20;
    v90.origin.x = a4;
    v90.origin.y = a5;
    v90.size.width = a6;
    v90.size.height = a7;
    if (CGRectIsEmpty(v90)
      || (v91.origin.x = a4, v91.origin.y = a5, v91.size.width = a6, v91.size.height = a7, CGRectIsInfinite(v91)))
    {
LABEL_20:
      v33 = (double)v30;
      v34 = (double)v32;
      x = 0.0;
      y = 0.0;
      width = (double)v30;
      height = (double)v32;
      if (!pixelBuffer)
        goto LABEL_50;
    }
    else
    {
      v33 = (double)v30;
      v34 = (double)v32;
      v97.origin.x = 0.0;
      v97.origin.y = 0.0;
      v95.origin.x = a4;
      v95.origin.y = a5;
      v95.size.width = a6;
      v95.size.height = a7;
      v97.size.width = (double)v30;
      v97.size.height = (double)v32;
      v96 = CGRectIntersection(v95, v97);
      x = v96.origin.x;
      y = v96.origin.y;
      width = v96.size.width;
      height = v96.size.height;
      if (!pixelBuffer)
        goto LABEL_50;
    }
    TypeID = CVPixelBufferGetTypeID();
    if (TypeID == CFGetTypeID(pixelBuffer))
    {
      if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1111970369 && !CVPixelBufferLockBaseAddress(pixelBuffer, 0))
      {
        v40 = x / v33;
        v41 = y / v34;
        v42 = width / v33;
        v43 = height / v34;
        DeviceRGB = (CGColorSpace *)CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
        if (!DeviceRGB)
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
        theDict = DeviceRGB;
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v46 = CVPixelBufferGetHeight(pixelBuffer);
        v47 = CVPixelBufferGetWidth(pixelBuffer);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v49 = v40 * (double)v47;
        v50 = v41 * (double)v46;
        v51 = v42 * (double)v47;
        v52 = v43 * (double)v46;
        v92.origin.x = v49;
        v92.origin.y = v50;
        v92.size.width = v51;
        v92.size.height = v52;
        v93 = CGRectIntegral(v92);
        v53 = v93.origin.x;
        v54 = v93.origin.y;
        v55 = (uint64_t)rint(v93.size.height);
        v81 = (uint64_t)rint(v93.size.width);
        v56 = (4 * v81 + 15) & 0xFFFFFFFFFFFFFFF0;
        __dst = (char *)malloc_type_malloc(v56 * v55, 0x113C99A5uLL);
        if (v55)
        {
          v57 = (uint64_t)rint(v53);
          v58 = rint(v54);
          if (v56 >= BytesPerRow)
            v59 = BytesPerRow;
          else
            v59 = (4 * v81 + 15) & 0xFFFFFFFFFFFFFFF0;
          v60 = &BaseAddress[4 * v57 + BytesPerRow * (uint64_t)v58];
          v61 = __dst;
          v62 = v55;
          do
          {
            memcpy(v61, v60, v59);
            v61 += v56;
            v60 += BytesPerRow;
            --v62;
          }
          while (v62);
        }
        v63 = CGDataProviderCreateWithData(0, __dst, v56 * v55, (CGDataProviderReleaseDataCallback)sub_1D3E3EF2C);
        v64 = CGImageCreate(v81, v55, 8uLL, 0x20uLL, v56, theDict, 0x2002u, v63, 0, 0, kCGRenderingIntentPerceptual);
        v94.origin.x = v49 - v53;
        v94.origin.y = v50 - v54;
        v94.size.width = v51;
        v94.size.height = v52;
        v65 = CGImageCreateWithImageInRect(v64, v94);
        CGImageRelease(v64);
        CGDataProviderRelease(v63);
        CGColorSpaceRelease(theDict);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        if (v65)
        {
          v66 = (double)CGImageGetWidth(v65);
          v67 = CGImageGetHeight(v65);
          v68 = ACBSCreateFrameInfoBySearchingForBarcodesInCGImage(a1, v65, a3, 0.0, 0.0, v66, (double)v67);
          CGImageRelease(v65);
          return (__CFDictionary *)v68;
        }
        return 0;
      }
      goto LABEL_51;
    }
LABEL_50:
    CVPixelBufferGetTypeID();
    CFGetTypeID(pixelBuffer);
LABEL_51:
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    return 0;
  }
  v15 = CMGetAttachment(pixelBuffer, CFSTR("ImagePyramidArray"), 0);
  v16 = (char *)MRCSampleCreateWithCVPixelBufferAndPyramid(pixelBuffer, v15, a4, a5, a6, a7);
  if (v16)
  {
    v17 = v16;
    MRCSampleGeneratePyramidIfNotPresent(v16);
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20 = ACBSConfigCopySymbologiesEnabled(a1);
    CFDictionarySetValue(Mutable, CFSTR("MRCDecoderOptionSymbologies"), v20);
    CFRelease(v20);
    sub_1D3E36C38(Mutable, CFSTR("MRCDecoderOptionLocatingMode"), *(_DWORD *)(a1 + 4));
    sub_1D3E36C38(Mutable, CFSTR("MRCDecoderOptionMaximumQRModuleSamplingCount"), *(_DWORD *)(a1 + 16));
    sub_1D3E36C38(Mutable, CFSTR("MRCDecoderOptionMaximumQRFinderPatternTripletCount"), *(_DWORD *)(a1 + 20));
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 32);
    v21 = CFNumberCreate(v18, kCFNumberFloat32Type, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("MRCDecoderOptionMaximum1DSymbologyDecodingTime"), v21);
    CFRelease(v21);
    sub_1D3E36C38(Mutable, CFSTR("MRCDecoderOptionMaximum1DSymbologyDecodingScanlineCount"), *(_DWORD *)(a1 + 24));
    sub_1D3E36C38(Mutable, CFSTR("MRCDecoderOptionMinimum1DSymbologyDecodingScanlineCount"), *(_DWORD *)(a1 + 28));
    v22 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(a1 + 36))
      v22 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("MRCDecoderOptionShouldStopAtFirstPyramidWith2DSymbologies"), *v22);
    v23 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v23, CFSTR("LocatorPoints"));
    CFArrayAppendValue(v23, CFSTR("FocusSharpness"));
    if (*(_BYTE *)(a1 + 1))
      CFArrayAppendValue(v23, CFSTR("FrameFailedLocations"));
    if (*(_BYTE *)a1)
      CFArrayAppendValue(v23, CFSTR("FrameDebugData"));
    CFDictionarySetValue(Mutable, CFSTR("MRCDecoderOptionNeededResultAttributes"), v23);
    CFRelease(v23);
    valuePtr = 0;
    v24 = CFNumberCreate(v18, kCFNumberCFIndexType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("MRCDecoderOptionAlgorithmVersion"), v24);
    CFRelease(v24);
    v25 = (const void *)MRCDecoderCreateWithOptions(Mutable);
    CFRelease(Mutable);
    err = 0;
    v27 = (unint64_t *)MRCDecoderDecodeSampleWithRegions(v26);
    CFRelease(v25);
    if (v27)
    {
      v28 = MRCDecoderResultCopyAttributes(v27);
      MutableCopy = CFDictionaryCreateMutableCopy(v18, 0, v28);
      CFRelease(v28);
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    v86 = 0;
    sub_1D3E36C38(MutableCopy, CFSTR("FrameResultErrorCode"), 0);
    if (v27)
    {
      DescriptorCount = MRCDecoderResultGetDescriptorCount(v27);
      if (DescriptorCount >= 1)
      {
        v71 = DescriptorCount;
        theDicta = MutableCopy;
        __dsta = v17;
        v72 = CFArrayCreateMutable(v18, DescriptorCount, MEMORY[0x1E0C9B378]);
        for (i = 0; i != v71; ++i)
        {
          DescriptorAtIndex = (char *)MRCDecoderResultGetDescriptorAtIndex(v27, i);
          if (DescriptorAtIndex)
          {
            v75 = (const __CFDictionary *)MRCDescriptorCopyAttributes(DescriptorAtIndex);
            v76 = CFDictionaryCreateMutableCopy(v18, 0, v75);
            CFRelease(v75);
            v77 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            for (j = 0; j != 13; ++j)
            {
              v79 = *off_1E95B3F38[j];
              Value = CFDictionaryGetValue(v76, v79);
              if (Value)
              {
                CFDictionarySetValue(v77, v79, Value);
                CFDictionaryRemoveValue(v76, v79);
              }
            }
            CFDictionarySetValue(v76, CFSTR("CodeProperties"), v77);
            CFRelease(v77);
            if (v76)
            {
              CFArrayAppendValue(v72, v76);
              CFRelease(v76);
            }
          }
        }
        MutableCopy = theDicta;
        CFDictionarySetValue(theDicta, CFSTR("SymbolDescriptionArray"), v72);
        CFRelease(v72);
        v17 = __dsta;
      }
      CFRelease(v27);
    }
    CFRelease(v17);
    return MutableCopy;
  }
  return 0;
}

const __CFDictionary *ACBSCreateSymbolDescriptorFromBasicDescriptorWithDefaultPayloadEncoding(CFDictionaryRef theDict, const void *a2)
{
  const __CFAllocator *v3;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  CFTypeID v8;
  uint64_t i;
  const void *v10;
  const void *v11;
  const void *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  const void *v15;

  if (!theDict)
    return 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (MutableCopy)
  {
    v5 = CFDictionaryCreateMutableCopy(v3, 0, MutableCopy);
    Value = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("CodeProperties"));
    if (Value)
    {
      v7 = Value;
      v8 = CFGetTypeID(Value);
      if (v8 == CFDictionaryGetTypeID())
      {
        for (i = 0; i != 13; ++i)
        {
          v10 = *off_1E95B3F38[i];
          v11 = CFDictionaryGetValue(v7, v10);
          if (v11)
            CFDictionarySetValue(v5, v10, v11);
        }
      }
      CFDictionaryRemoveValue(v5, CFSTR("CodeProperties"));
    }
    v12 = (const void *)MRCDescriptorCreateWithAttributes(v5);
    CFRelease(v5);
    if (v12)
    {
      Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = Mutable;
      if (a2)
        CFDictionarySetValue(Mutable, CFSTR("MRCDescriptorPayloadDecodingOptionDefaultEncoding"), a2);
      v15 = (const void *)MRCDescriptorDecodePayloadWithOptions(v12, v14, 0);
      CFRelease(v12);
      CFRelease(v14);
      if (v15)
      {
        CFDictionarySetValue(MutableCopy, CFSTR("BarcodeString"), v15);
        CFRelease(v15);
      }
    }
  }
  return MutableCopy;
}

const __CFDictionary *ACBSCreateSymbolDescriptorFromBasicDescriptor(const __CFDictionary *a1)
{
  return ACBSCreateSymbolDescriptorFromBasicDescriptorWithDefaultPayloadEncoding(a1, 0);
}

uint64_t sub_1D3E2E6E8(uint64_t result, _DWORD *a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v7 = floor(a4 + a6 * 0.5) + -10.0;
  if (v7 <= 0.0)
    v7 = 0.0;
  v8 = (int)v7;
  v9 = (int)a5;
  v10 = a3 - (int)v7;
  if (v10 >= 0x14)
    LODWORD(v10) = 20;
  v11 = (int)a7;
  *(_DWORD *)(result + 40) = -1077342245;
  *(float *)(result + 44) = (float)(int)a7;
  *(float *)(result + 48) = (float)(int)v10;
  if ((int)a7 >= 0)
    v12 = (int)a7;
  else
    v12 = v11 + 1;
  *(_DWORD *)(result + 32) = v8 + (v10 >> 1);
  *(_DWORD *)(result + 36) = v9 + (v12 >> 1);
  *(_DWORD *)result = v8;
  *(_DWORD *)(result + 4) = v9;
  v13 = v9 + v11;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v13;
  v14 = v10 + v8;
  *(_DWORD *)(result + 16) = v14;
  *(_DWORD *)(result + 20) = v13;
  *(_DWORD *)(result + 24) = v14;
  *(_DWORD *)(result + 28) = v9;
  ++*a2;
  return result;
}

uint64_t sub_1D3E2E77C(uint64_t result, _DWORD *a2, int a3, double a4, double a5, double a6, double a7)
{
  int v7;
  int v8;
  int v9;
  double v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;

  v7 = (int)a6;
  if ((int)a6 >= 5)
    v7 = 5;
  v8 = (int)a7;
  v9 = (int)a5;
  v10 = a4 + a6 * 0.5;
  if (v7 >= 0)
    v11 = v7;
  else
    v11 = v7 + 1;
  v12 = vcvtmd_s64_f64(v10 - (double)(v11 >> 1));
  v13 = result + 56 * a3;
  *(_DWORD *)(v13 + 40) = -1077342245;
  *(float *)(v13 + 44) = (float)v8;
  *(float *)(v13 + 48) = (float)v7;
  v14 = v12 + (v11 >> 1);
  if (v8 >= 0)
    v15 = (int)a7;
  else
    v15 = v8 + 1;
  *(_DWORD *)(v13 + 32) = v14;
  *(_DWORD *)(v13 + 36) = v9 + (v15 >> 1);
  *(_DWORD *)v13 = v12;
  *(_DWORD *)(v13 + 4) = v9;
  v16 = v8 + v9 - 1;
  *(_DWORD *)(v13 + 8) = v12;
  *(_DWORD *)(v13 + 12) = v16;
  v17 = v7 + v12 - 1;
  *(_DWORD *)(v13 + 16) = v17;
  *(_DWORD *)(v13 + 20) = v16;
  *(_DWORD *)(v13 + 24) = v17;
  *(_DWORD *)(v13 + 28) = v9;
  ++*a2;
  return result;
}

uint64_t sub_1D3E2E81C(uint64_t result, _DWORD *a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v7 = a5 + a7 * 0.5 + -10.0;
  if (v7 <= 0.0)
    v7 = 0.0;
  v8 = (int)v7;
  v9 = (int)a4;
  v10 = (int)a6;
  v11 = a3 - (int)v7;
  if (v11 >= 0x14)
    LODWORD(v11) = 20;
  *(float *)(result + 44) = (float)v10;
  *(float *)(result + 48) = (float)(int)v11;
  if (v10 >= 0)
    v12 = (int)a6;
  else
    v12 = v10 + 1;
  *(_DWORD *)(result + 28) = v8;
  *(_DWORD *)(result + 32) = v9 + (v12 >> 1);
  *(_QWORD *)(result + 36) = v8 + (v11 >> 1);
  *(_DWORD *)result = v9;
  *(_DWORD *)(result + 4) = v8;
  v13 = v11 + v8;
  *(_DWORD *)(result + 8) = v9;
  *(_DWORD *)(result + 12) = v13;
  v14 = v9 + v10;
  *(_DWORD *)(result + 16) = v14;
  *(_DWORD *)(result + 20) = v13;
  *(_DWORD *)(result + 24) = v14;
  ++*a2;
  return result;
}

uint64_t sub_1D3E2E8A4(uint64_t result, _DWORD *a2, int a3, double a4, double a5, double a6, double a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v7 = (int)a7;
  v8 = (int)a6;
  v9 = (int)a4;
  if ((int)a7 >= 5)
    v7 = 5;
  if (v7 >= 0)
    v10 = v7;
  else
    v10 = v7 + 1;
  v11 = vcvtmd_s64_f64(a5 + a7 * 0.5 - (double)(v10 >> 1));
  v12 = result + 56 * a3;
  *(float *)(v12 + 44) = (float)v8;
  *(float *)(v12 + 48) = (float)v7;
  if (v8 >= 0)
    v13 = (int)a6;
  else
    v13 = v8 + 1;
  *(_DWORD *)(v12 + 28) = v11;
  *(_DWORD *)(v12 + 32) = v9 + (v13 >> 1);
  *(_DWORD *)(v12 + 36) = v11 + (v10 >> 1);
  *(_DWORD *)(v12 + 40) = 0;
  *(_DWORD *)v12 = v9;
  *(_DWORD *)(v12 + 4) = v11;
  v14 = v7 + v11 - 1;
  *(_DWORD *)(v12 + 8) = v9;
  *(_DWORD *)(v12 + 12) = v14;
  v15 = v8 + v9 - 1;
  *(_DWORD *)(v12 + 16) = v15;
  *(_DWORD *)(v12 + 20) = v14;
  *(_DWORD *)(v12 + 24) = v15;
  ++*a2;
  return result;
}

uint64_t sub_1D3E2E93C(uint64_t result, _DWORD *a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  _DWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)a7 >= 3)
  {
    if (a4 >= 0)
      v8 = a4;
    else
      v8 = -a4;
    if (!a4)
      v8 = 1;
    v9 = vcvtmd_s64_f64(a5 + a7 * 0.5);
    v10 = v9 - v8;
    v11 = v8 + v9 - 1;
    v25[0] = v10;
    v25[1] = v11;
    v12 = (int)(a5 + a7 + -1.0);
    if (v10 >= (int)a5 && v10 + 2 <= v12 && v11 >= (int)a5 && v11 + 2 <= v12)
    {
      v16 = 0;
      v17 = (int)a8;
      v18 = (int)a6;
      if ((int)a8 >= 0)
        v19 = (int)a8;
      else
        v19 = v17 + 1;
      v20 = v18 + (v19 >> 1);
      v21 = v17 + v18 - 1;
      v22 = (float)v17;
      v23 = result + 56 * a3 + 28;
      do
      {
        *(float *)(v23 + 16) = v22;
        *(_DWORD *)(v23 + 20) = 1077936128;
        v24 = v25[v16];
        *(_DWORD *)(v23 + 8) = v20;
        *(_DWORD *)(v23 + 12) = -1077342245;
        *(_DWORD *)(v23 - 28) = v24;
        *(_DWORD *)(v23 - 24) = v18;
        *(_DWORD *)(v23 - 20) = v24;
        *(int64x2_t *)(v23 - 16) = vdupq_lane_s64(__SPAIR64__(v24 + 2, v21), 0);
        *(_DWORD *)v23 = v18;
        *(_DWORD *)(v23 + 4) = v24 + 1;
        v23 += 56;
        ++v16;
      }
      while (v16 != 2);
      *a2 += 2;
    }
  }
  return result;
}

uint64_t sub_1D3E2EA78(uint64_t a1, int *a2, int a3, double a4, double a5, double a6, double a7)
{
  int v14;
  uint64_t result;
  int v16;

  v14 = *a2;
  result = sub_1D3E2E77C(a1, a2, a3, a4, a5, a6, a7);
  v16 = *a2 - v14;
  if (v16 >= 1)
    return sub_1D3E2E93C(a1, a2, v16 + a3, 10, a4, a5, a6, a7);
  return result;
}

void sub_1D3E2EB14(uint64_t a1, _DWORD *a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  uint64_t v24;

  sub_1D3E2E77C(a1, a2, 0, a4, a5, a6, a7);
  v14 = floor(a4 + a6 * 0.5) + -10.0;
  if (v14 <= 0.0)
    v14 = 0.0;
  v15 = (int)v14;
  v16 = (int)a5;
  if ((unint64_t)(a3 - (int)v14) >= 0x14)
    v17 = 20;
  else
    v17 = a3 - v15;
  v18 = (int)a7;
  v19 = atan2f((float)(int)a7, (float)v17);
  v20 = 0;
  *(float *)(a1 + 96) = v19;
  *(float *)(a1 + 152) = -v19;
  if ((int)a7 >= 0)
    v21 = (int)a7;
  else
    v21 = v18 + 1;
  v22 = v16 + (v21 >> 1);
  v23 = sqrtf((float)(v18 * v18 + v17 * v17));
  do
  {
    v24 = a1 + v20;
    *(_DWORD *)(v24 + 88) = v15 + (v17 >> 1);
    *(_DWORD *)(v24 + 92) = v22;
    *(float *)(v24 + 100) = v23;
    *(_DWORD *)(v24 + 104) = 1065353216;
    v20 += 56;
  }
  while (v20 == 56);
  *(_DWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 60) = v16 + v18;
  *(_DWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 68) = v16 + v18;
  *(_DWORD *)(a1 + 72) = v17 + v15;
  *(_DWORD *)(a1 + 76) = v16;
  *(_DWORD *)(a1 + 80) = v17 + v15;
  *(_DWORD *)(a1 + 84) = v16;
  *(_DWORD *)(a1 + 112) = v15;
  *(_DWORD *)(a1 + 116) = v16;
  *(_DWORD *)(a1 + 120) = v15;
  *(_DWORD *)(a1 + 124) = v16;
  *(_DWORD *)(a1 + 128) = v17 + v15;
  *(_DWORD *)(a1 + 132) = v16 + v18;
  *(_DWORD *)(a1 + 136) = v17 + v15;
  *(_DWORD *)(a1 + 140) = v16 + v18;
  *a2 += 2;
}

uint64_t sub_1D3E2EC40(uint64_t result, _DWORD *a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)a8 >= 3)
  {
    if (a4 >= 0)
      v8 = a4;
    else
      v8 = -a4;
    if (!a4)
      v8 = 1;
    v9 = vcvtmd_s64_f64(a6 + a8 * 0.5);
    v10 = v9 - v8;
    v11 = v8 + v9 - 1;
    v25[0] = v10;
    v25[1] = v11;
    v12 = (int)(a6 + a8 + -1.0);
    if (v10 >= (int)a6 && v10 + 2 <= v12 && v11 >= (int)a6 && v11 + 2 <= v12)
    {
      v16 = 0;
      v17 = (int)a7;
      v18 = (int)a5;
      if ((int)a7 >= 0)
        v19 = (int)a7;
      else
        v19 = v17 + 1;
      v20 = v18 + (v19 >> 1);
      v21 = v17 + v18 - 1;
      v22 = result + 56 * a3 + 28;
      do
      {
        *(float *)(v22 + 16) = (float)(int)a7;
        *(_DWORD *)(v22 + 20) = 1077936128;
        v23 = v25[v16];
        *(_DWORD *)(v22 + 8) = v23 + 1;
        *(_DWORD *)(v22 + 12) = 0;
        *(_DWORD *)(v22 - 28) = v18;
        *(_DWORD *)(v22 - 24) = v23;
        *(_DWORD *)(v22 - 20) = v18;
        LODWORD(v24) = v23 + 2;
        HIDWORD(v24) = v21;
        *(int64x2_t *)(v22 - 16) = vdupq_lane_s64(v24, 0);
        *(_DWORD *)v22 = v23;
        *(_DWORD *)(v22 + 4) = v20;
        v22 += 56;
        ++v16;
      }
      while (v16 != 2);
      *a2 += 2;
    }
  }
  return result;
}

uint64_t sub_1D3E2ED70(uint64_t a1, int *a2, int a3, double a4, double a5, double a6, double a7)
{
  int v14;
  uint64_t result;
  int v16;

  v14 = *a2;
  result = sub_1D3E2E8A4(a1, a2, a3, a4, a5, a6, a7);
  v16 = *a2 - v14;
  if (v16 >= 1)
    return sub_1D3E2EC40(a1, a2, v16 + a3, 10, a4, a5, a6, a7);
  return result;
}

void sub_1D3E2EE0C(uint64_t a1, _DWORD *a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  float v21;
  int v22;
  int v23;
  uint64_t v24;

  sub_1D3E2E8A4(a1, a2, 0, a4, a5, a6, a7);
  v14 = (int)a4;
  v15 = a5 + a7 * 0.5 + -10.0;
  if (v15 <= 0.0)
    v15 = 0.0;
  v16 = (int)v15;
  v17 = (int)a6;
  if ((unint64_t)(a3 - (int)v15) >= 0x14)
    v18 = 20;
  else
    v18 = a3 - v16;
  v19 = atan2f((float)v18, (float)v17);
  v20 = 0;
  *(float *)(a1 + 96) = v19;
  *(float *)(a1 + 152) = -v19;
  v21 = sqrtf((float)(v17 * v17 + v18 * v18));
  if (v17 >= 0)
    v22 = (int)a6;
  else
    v22 = v17 + 1;
  v23 = v14 + (v22 >> 1);
  do
  {
    v24 = a1 + v20;
    *(float *)(v24 + 100) = v21;
    *(_DWORD *)(v24 + 104) = 1065353216;
    *(_DWORD *)(v24 + 88) = v23;
    *(_DWORD *)(v24 + 92) = v16 + (v18 >> 1);
    v20 += 56;
  }
  while (v20 == 56);
  *(_DWORD *)(a1 + 56) = v14;
  *(_DWORD *)(a1 + 60) = v18 + v16;
  *(_DWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = v18 + v16;
  *(_DWORD *)(a1 + 72) = v14 + v17;
  *(_DWORD *)(a1 + 76) = v16;
  *(_DWORD *)(a1 + 80) = v14 + v17;
  *(_DWORD *)(a1 + 84) = v16;
  *(_DWORD *)(a1 + 112) = v14;
  *(_DWORD *)(a1 + 116) = v16;
  *(_DWORD *)(a1 + 120) = v14;
  *(_DWORD *)(a1 + 124) = v16;
  *(_DWORD *)(a1 + 128) = v14 + v17;
  *(_DWORD *)(a1 + 132) = v18 + v16;
  *(_DWORD *)(a1 + 136) = v14 + v17;
  *(_DWORD *)(a1 + 140) = v18 + v16;
  *a2 += 2;
}

void sub_1D3E2EF34(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, float a10)
{
  float v15;
  int v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  __float2 v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  int v30;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  __float2 v37;
  float v38;
  float v39;
  int v40;
  int v41;
  int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  int v47;
  float v48;
  int v49;
  int v50;
  int v51;
  float v52;
  int v53;
  int v54;
  int v55;
  float v56;
  __float2 v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  float v71;
  float v72;
  _DWORD v73[2];
  _DWORD v74[2];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v15 = a8;
  v16 = vcvtmd_s64_f64(a6 + v15 * 0.5);
  v17 = a9;
  v18 = vcvtmd_s64_f64(a7 + v17 * 0.5);
  v19 = atan2f(v17, v15);
  v20 = fabsf(a10);
  if (v20 <= 1.5708)
    v21 = v20;
  else
    v21 = 1.5708;
  v22 = a3;
  v23 = a1 + 56 * a3;
  *(float *)(v23 + 40) = v21;
  *(float *)(v23 + 96) = -v21;
  v24 = __sincosf_stret(v21);
  v25 = 0;
  v26 = 0;
  v74[0] = LODWORD(v24.__cosval);
  v74[1] = LODWORD(v24.__cosval);
  v73[0] = LODWORD(v24.__sinval);
  *(float *)&v73[1] = -v24.__sinval;
  v27 = v15 / v24.__cosval;
  if (v21 >= v19)
    v27 = v17 / v24.__sinval;
  v71 = (float)v16;
  v72 = v27;
  v28 = v27 * 0.5;
  v29 = -(float)(v27 * 0.5);
  v30 = a4 - 1;
  v31 = (float)v18;
  v32 = a5 - 1;
  v33 = a1 + 56 * v22;
  do
  {
    v34 = v33 + v26;
    *(float *)(v34 + 44) = v72;
    *(_QWORD *)(v34 + 48) = 0x140400000;
    *(_DWORD *)(v34 + 32) = v16;
    *(_DWORD *)(v34 + 36) = v18;
    v35 = *(float *)(v33 + v26 + 40);
    v36 = v35 + -1.57079633;
    v37 = __sincosf_stret(v36);
    v38 = *(float *)&v74[v25];
    v39 = v71 + (float)(v29 * v38);
    v40 = (int)(float)(v39 + v37.__cosval);
    if (v30 >= v40)
      v41 = (int)(float)(v39 + v37.__cosval);
    else
      v41 = v30;
    if (v40 >= 0)
      v42 = v41;
    else
      v42 = 0;
    v43 = *(float *)&v73[v25];
    v44 = v31 + (float)(v29 * v43);
    v45 = (int)(float)(v37.__sinval + v44);
    if (v32 >= v45)
      v46 = (int)(float)(v37.__sinval + v44);
    else
      v46 = v32;
    if (v45 >= 0)
      v47 = v46;
    else
      v47 = 0;
    *(_DWORD *)v34 = v42;
    *(_DWORD *)(v34 + 4) = v47;
    v48 = v71 + (float)(v28 * v38);
    v49 = (int)(float)(v48 + v37.__cosval);
    if (v30 >= v49)
      v50 = (int)(float)(v48 + v37.__cosval);
    else
      v50 = v30;
    if (v49 >= 0)
      v51 = v50;
    else
      v51 = 0;
    v52 = v31 + (float)(v28 * v43);
    v53 = (int)(float)(v37.__sinval + v52);
    if (v32 >= v53)
      v54 = (int)(float)(v37.__sinval + v52);
    else
      v54 = v32;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 0;
    *(_DWORD *)(v34 + 24) = v51;
    *(_DWORD *)(v34 + 28) = v55;
    v56 = v35 + 1.57079633;
    v57 = __sincosf_stret(v56);
    v58 = (int)(float)(v39 + v57.__cosval);
    if (v30 >= v58)
      v59 = (int)(float)(v39 + v57.__cosval);
    else
      v59 = v30;
    if (v58 >= 0)
      v60 = v59;
    else
      v60 = 0;
    v61 = (int)(float)(v57.__sinval + v44);
    if (v32 >= v61)
      v62 = (int)(float)(v57.__sinval + v44);
    else
      v62 = v32;
    if (v61 >= 0)
      v63 = v62;
    else
      v63 = 0;
    *(_DWORD *)(v34 + 8) = v60;
    *(_DWORD *)(v34 + 12) = v63;
    v64 = (int)(float)(v48 + v57.__cosval);
    if (v30 >= v64)
      v65 = (int)(float)(v48 + v57.__cosval);
    else
      v65 = v30;
    if (v64 >= 0)
      v66 = v65;
    else
      v66 = 0;
    v67 = (int)(float)(v57.__sinval + v52);
    if (v32 >= v67)
      v68 = (int)(float)(v57.__sinval + v52);
    else
      v68 = v32;
    if (v67 >= 0)
      v69 = v68;
    else
      v69 = 0;
    *(_DWORD *)(v34 + 16) = v66;
    *(_DWORD *)(v34 + 20) = v69;
    v26 += 56;
    ++v25;
  }
  while (v26 != 112);
  *a2 += 2;
}

uint64_t sub_1D3E2F204(uint64_t a1, int *a2, double a3, double a4, double a5, double a6, float a7, float a8, float a9)
{
  double v17;
  float v18;
  __float2 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;

  if (a5 <= a6)
    v17 = a6;
  else
    v17 = a5;
  v18 = v17 + v17;
  v19 = __sincosf_stret(a9);
  v20 = a7 - (float)(v19.__cosval * v18);
  v21 = a8 - (float)(v19.__sinval * v18);
  v53 = v21 - v19.__cosval;
  v54 = v19.__sinval + v20;
  v22 = (float)(v19.__cosval * v18) + a7;
  v23 = (float)(v19.__sinval * v18) + a8;
  v47 = v23 - v19.__cosval;
  v48 = v19.__sinval + v22;
  v46 = v20 - v19.__sinval;
  v52 = v20 - v19.__sinval;
  v44 = v22 - v19.__sinval;
  v45 = v19.__cosval + v21;
  v50 = v22 - v19.__sinval;
  v51 = v19.__cosval + v21;
  v24 = v19.__cosval + v23;
  v49 = v19.__cosval + v23;
  v25 = a3;
  v26 = a4;
  v27 = a3 + a5;
  v28 = a4 + a6;
  result = sub_1D3E50CA8(&v54, &v53, &v48, &v47, v19.__sinval + v20, v21 - v19.__cosval, v19.__sinval + v22, v23 - v19.__cosval, v25, v27, v26, v28);
  if ((_DWORD)result)
  {
    v30 = a3;
    v31 = a4;
    v32 = a4 + a6;
    result = sub_1D3E50CA8(&v52, &v51, &v50, &v49, v46, v45, v44, v24, v30, v27, v31, v32);
    if ((_DWORD)result)
    {
      v33 = v53;
      v34 = v54;
      v35 = v47;
      v36 = v48;
      v37 = v51;
      v38 = v52;
      v39 = v49;
      v40 = v50;
      v41 = (float)(sqrtf((float)((float)(v53 - v47) * (float)(v53 - v47))+ (float)((float)(v54 - v48) * (float)(v54 - v48)))+ sqrtf((float)((float)(v51 - v49) * (float)(v51 - v49))+ (float)((float)(v52 - v50) * (float)(v52 - v50))))* 0.5;
      if (v41 >= 20.0)
      {
        v42 = a1 + 56 * *a2;
        *(_DWORD *)v42 = (int)v54;
        *(_DWORD *)(v42 + 4) = (int)v33;
        *(_DWORD *)(v42 + 24) = (int)v36;
        *(_DWORD *)(v42 + 28) = (int)v35;
        *(_DWORD *)(v42 + 8) = (int)v38;
        *(_DWORD *)(v42 + 12) = (int)v37;
        *(_DWORD *)(v42 + 16) = (int)v40;
        *(_DWORD *)(v42 + 20) = (int)v39;
        *(_DWORD *)(v42 + 32) = (int)(float)((float)(v36 + (float)((float)(v34 + v38) + v40)) * 0.25);
        *(_DWORD *)(v42 + 36) = (int)(float)((float)(v35 + (float)((float)(v33 + v37) + v39)) * 0.25);
        *(float *)(v42 + 40) = a9;
        *(float *)(v42 + 44) = v41;
        *(_DWORD *)(v42 + 48) = 1077936128;
        ++*a2;
      }
    }
  }
  return result;
}

uint64_t sub_1D3E2F428(uint64_t a1, const UInt8 *a2, unint64_t a3, unint64_t a4, size_t a5, int a6, int a7, uint64_t *a8, double a9, double a10, double a11, double a12, float a13)
{
  double v18;
  double x;
  double y;
  double width;
  double height;
  uint64_t v26;
  unsigned int v27;
  __n128 v28;
  int v30;
  int v31;
  double v32;
  float v33;
  __float2 v34;
  char *v35;
  char *v36;
  float v37;
  float v38;
  int v39;
  char *v40;
  float v41;
  double v42;
  double v43;
  float v44;
  __float2 v45;
  int v46;
  float v47;
  float v48;
  int v49;
  unsigned int v50;
  double v51;
  double v52;
  int v53;
  char *v54;
  uint64_t v55;
  int v56;
  int *v57;
  double v58;
  int *v59;
  double v60;
  float v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  char *v67;
  int v68;
  BOOL v69;
  char *v70;
  int *v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  char *v79;
  _BOOL4 v80;
  int v81;
  float *v82;
  float *v83;
  unsigned int (*v84)(_OWORD *, double **, char *, _QWORD *);
  __int128 v85;
  int *v86;
  __CFDictionary *v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  double v93;
  double v94;
  CFMutableArrayRef v95;
  char *v96;
  float v97;
  float v99;
  float v101;
  float v103;
  char *v104;
  float v106;
  float v108;
  char *v109;
  char *v110;
  float v111;
  float v113;
  float v115;
  float v117;
  float v119;
  char *v121;
  int v122;
  char *v123;
  float v124;
  float v126;
  float v128;
  float v130;
  float v132;
  float v134;
  float v136;
  float v138;
  float v140;
  float v142;
  int i;
  float v145;
  int j;
  float v147;
  char *v148;
  float v149;
  uint64_t v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  float v159;
  char *v160;
  char *v161;
  float *v162;
  float v163;
  float *v165;
  float v166;
  float v167;
  float v168;
  float v169;
  int v170;
  int v171;
  float *v172;
  unsigned int v173;
  int32x2_t v174;
  int32x2_t v175;
  int32x2_t v176;
  int32x2_t v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  int32x2_t v182;
  int v183;
  uint64_t v184;
  int32x2_t v185;
  uint64_t v186;
  double v187;
  unint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  unint64_t v192;
  double v193;
  CGFloat v194;
  CGFloat v195;
  CGFloat v196;
  CGFloat v197;
  CGColorSpace *DeviceGray;
  const __CFData *v199;
  CGDataProvider *v200;
  CGImage *v201;
  CGImage *v202;
  __CFData *v203;
  CGImageDestination *v204;
  CGImageDestination *v205;
  _BOOL4 v206;
  CFDataRef v207;
  CFDataRef v208;
  _BOOL4 v209;
  float v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  vDSP_Length v216;
  unsigned int v217;
  DSPComplex *v218;
  FFTSetup *v219;
  uint64_t v220;
  float *v221;
  float *v222;
  float v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  float v227;
  float v228;
  float *v229;
  signed int v230;
  CFDataRef v231;
  CFDataRef v232;
  CFNumberRef v233;
  CFNumberRef v234;
  int v235;
  float v236;
  __CFDictionary *v237;
  char *v238;
  double v239;
  char *v240;
  int *v241;
  double v242;
  uint64_t v243;
  int v244;
  int *v245;
  int v246;
  int v247;
  double v248;
  uint64_t v249;
  int v250;
  CFNumberRef v251;
  CFNumberRef v252;
  CFNumberRef v253;
  CFNumberRef v254;
  __int128 v255;
  uint64_t *v256;
  float *v257;
  float v258;
  _BOOL4 v259;
  unint64_t v260;
  unint64_t v261;
  float v262;
  __float2 v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  int v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  int *v281;
  char *v282;
  double v283;
  _QWORD *v284;
  char *v285;
  _OWORD *v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  unsigned __int8 *v290;
  int v291;
  int v292;
  unsigned int v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unsigned int v299;
  char v300;
  uint64_t v301;
  BOOL v302;
  unsigned __int8 *v303;
  int v304;
  _BOOL4 v305;
  float v306;
  float v307;
  int v308;
  float v309;
  double *v310;
  float v311;
  float v312;
  double v313;
  double v314;
  double v315;
  double v316;
  float v317;
  double v318;
  double v319;
  CFNumberRef v320;
  CFNumberRef v321;
  unint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  BOOL v331;
  unint64_t v332;
  _OWORD *v333;
  uint64_t v334;
  int v335;
  int v336;
  float v337;
  float *v338;
  float v339;
  _DWORD *v340;
  int *v341;
  uint64_t v342;
  int v343;
  _DWORD *v344;
  int *v345;
  double v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  int *v350;
  char *v351;
  double v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  void *v356;
  void *v357;
  size_t v358;
  uint64_t v359;
  unsigned int v360;
  float *v361;
  float v362;
  float *v363;
  float v364;
  float *v365;
  uint64_t v366;
  int v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  int v373;
  _DWORD *v374;
  unsigned int v375;
  uint64_t v376;
  int *v377;
  _DWORD *v378;
  int v379;
  float v380;
  double v381;
  int64_t v382;
  float *v383;
  uint64_t v384;
  void *v385;
  uint64_t v386;
  float *v387;
  float *v388;
  uint64_t v389;
  float v390;
  void *v391;
  unsigned int v392;
  float v393;
  float v394;
  float v395;
  float v396;
  __float2 v397;
  float v398;
  uint64_t v399;
  __CFArray *v400;
  float v401;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v403;
  CFDictionaryRef v404;
  CFDictionaryRef v405;
  uint64_t v406;
  uint64_t v407;
  float *v408;
  float v409;
  int v410;
  unint64_t *v411;
  uint64_t v412;
  double v413;
  double v414;
  char *v415;
  unint64_t v416;
  double *v417;
  unint64_t v418;
  double v419;
  char v420;
  uint64_t v421;
  double v422;
  double v423;
  char v424;
  double v425;
  double v426;
  double *v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  char *v435;
  unsigned int *v436;
  unsigned int (*v437)(float *, char *, char *, _QWORD *);
  uint64_t *v438;
  unint64_t v439;
  unint64_t *v440;
  unint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void *v449;
  __CFDictionary *v450;
  void *v451;
  __CFDictionary *v452;
  __CFDictionary *v453;
  void *v454;
  __CFDictionary *v455;
  const void *v456;
  float v457;
  _QWORD v458[2];
  char *v459;
  CFIndex v460;
  uint64_t *v461;
  int v462;
  CFAbsoluteTime Current;
  uint64_t v464;
  CFAbsoluteTime v465;
  float v466;
  uint64_t v467;
  _OWORD *v468;
  char *v469;
  CFMutableArrayRef v470;
  double v471;
  char *v472;
  double v473;
  double v474;
  char *v475;
  unsigned int v476;
  float *v477;
  float *v478;
  char *v479;
  char *v480;
  _DWORD *v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  char *v485;
  const UInt8 *v486;
  size_t v487;
  uint64_t v488;
  void *v489;
  double v490;
  uint64_t *v491;
  double v492;
  double v493;
  __CFDictionary *Mutable;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  _BOOL4 v499;
  int v500;
  size_t v501;
  unsigned int v502;
  uint64_t v503;
  CFAllocatorRef v504;
  unsigned int v505;
  uint64_t v506;
  double v507;
  double v508;
  double v509;
  double v510;
  double v511;
  int *v512;
  uint64_t v513;
  __int128 v514;
  unint64_t v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  unsigned __int8 *v521;
  _DWORD *v522;
  _DWORD *v523;
  int v524;
  uint64_t v525;
  _BYTE v526[24];
  int v527;
  float v528;
  _QWORD v529[5];
  uint64_t v530;
  _DWORD *v531;
  char *v532;
  unint64_t v533;
  uint64_t *v534;
  _OWORD v535[4];
  __int128 v536;
  char *v537;
  uint64_t v538;
  float v539;
  float v540;
  float *v541[10];
  char *v542;
  double *v543;
  float *v544;
  float *v545;
  float v546;
  __int128 v547;
  __int128 v548;
  int *v549;
  _QWORD v550[2];
  char v551;
  uint64_t *v552;
  DSPSplitComplex v553;
  float *imagp;
  _BYTE v555[20];
  __int128 v556;
  float *v557;
  _QWORD v558[2];
  char v559;
  uint64_t v560;
  uint64_t v561;
  void *v562;
  unint64_t v563;
  int *v564;
  uint64_t v565;
  CGPoint v566;
  CGPoint v567;
  CGPoint v568;
  CGPoint v569;
  CGRect v570;
  CGRect v571;
  CGRect v572;
  CGRect v573;
  CGRect v574;
  CGRect v575;
  CGRect v576;
  CGRect v577;

  v500 = a7;
  v486 = a2;
  v487 = a5;
  v18 = a12;
  v565 = *MEMORY[0x1E0C80C00];
  v511 = a9;
  v570 = CGRectInset(*(CGRect *)&a9, a11 * -0.100000001, a12 * -0.100000001);
  v497 = a3;
  v498 = a4;
  v576.size.width = (double)a3;
  v576.size.height = (double)a4;
  v576.origin.x = 0.0;
  v576.origin.y = 0.0;
  v473 = (double)a4;
  v474 = (double)a3;
  v571 = CGRectIntersection(v570, v576);
  x = v571.origin.x;
  y = v571.origin.y;
  width = v571.size.width;
  height = v571.size.height;
  if (CGRectIsEmpty(v571))
    return 11;
  v572.origin.x = x;
  v572.origin.y = y;
  v572.size.width = width;
  v572.size.height = height;
  if (CGRectIsInfinite(v572))
    return 11;
  v573.origin.x = x;
  v573.origin.y = y;
  v573.size.width = width;
  v573.size.height = height;
  if (CGRectIsNull(v573))
    return 11;
  LODWORD(v553.realp) = 0;
  BYTE4(v553.realp) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v27 = sub_1D3DDC334((unint64_t *)v26, (uint64_t)&v553) & a6;
  if (!v27)
    return 11;
  v503 = *(_QWORD *)(v26 + 56);
  v499 = v503 >= 0x20000;
  v529[0] = v497;
  v529[1] = v498;
  v529[3] = 0x100000000;
  v529[2] = v487;
  v529[4] = v486;
  if (*(_BYTE *)(v26 + 53))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v26 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    Mutable = 0;
  }
  v528 = -1.0;
  v527 = 0;
  v30 = *(_DWORD *)(v26 + 44);
  v491 = a8;
  v496 = a1;
  v505 = v27;
  if (!v500)
  {
    v35 = 0;
    switch(*(_DWORD *)(v26 + 8))
    {
      case 2:
        v36 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
        sub_1D3E2E77C((uint64_t)v36, &v527, 0, x, y, width, height);
        goto LABEL_215;
      case 3:
        v36 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
        sub_1D3E2E6E8((uint64_t)v36, &v527, v497, x, y, width, height);
        goto LABEL_215;
      case 4:
        v121 = (char *)malloc_type_malloc(0xA8uLL, 0x100004021716A34uLL);
        sub_1D3E2EA78((uint64_t)v121, &v527, 0, x, y, width, height);
        goto LABEL_213;
      case 5:
        v121 = (char *)malloc_type_malloc(0xA8uLL, 0x100004021716A34uLL);
        sub_1D3E2EB14((uint64_t)v121, &v527, v497, x, y, width, height);
        goto LABEL_213;
      case 6:
        v36 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
        sub_1D3E2E8A4((uint64_t)v36, &v527, 0, x, y, width, height);
        goto LABEL_215;
      case 7:
        v36 = (char *)malloc_type_malloc(0x38uLL, 0x100004021716A34uLL);
        sub_1D3E2E81C((uint64_t)v36, &v527, v498, x, y, width, height);
LABEL_215:
        v35 = v36;
        v30 = 1;
        goto LABEL_223;
      case 8:
        v121 = (char *)malloc_type_malloc(0xA8uLL, 0x100004021716A34uLL);
        sub_1D3E2ED70((uint64_t)v121, &v527, 0, x, y, width, height);
        goto LABEL_213;
      case 9:
        v121 = (char *)malloc_type_malloc(0xA8uLL, 0x100004021716A34uLL);
        sub_1D3E2EE0C((uint64_t)v121, &v527, v498, x, y, width, height);
LABEL_213:
        v35 = v121;
        goto LABEL_222;
      case 0xA:
        v148 = (char *)malloc_type_malloc(0x70uLL, 0x100004021716A34uLL);
        sub_1D3E2E77C((uint64_t)v148, &v527, 0, x, y, width, height);
        sub_1D3E2E8A4((uint64_t)v148, &v527, 1, x, y, width, height);
        v35 = v148;
        v30 = 2;
        goto LABEL_223;
      case 0xB:
        v109 = (char *)malloc_type_malloc(0x150uLL, 0x100004021716A34uLL);
        sub_1D3E2EA78((uint64_t)v109, &v527, 0, x, y, width, height);
        sub_1D3E2ED70((uint64_t)v109, &v527, v527, x, y, width, height);
        goto LABEL_217;
      case 0xC:
        v109 = (char *)malloc_type_malloc(0x230uLL, 0x100004021716A34uLL);
        sub_1D3E2EA78((uint64_t)v109, &v527, 0, x, y, width, height);
        sub_1D3E2ED70((uint64_t)v109, &v527, v527, x, y, width, height);
        sub_1D3E2E93C((uint64_t)v109, &v527, v527, 20, x, y, width, height);
        sub_1D3E2EC40((uint64_t)v109, &v527, v527, 20, x, y, width, height);
LABEL_217:
        v35 = v109;
        goto LABEL_218;
      case 0xD:
        v122 = (int)(height * 0.5);
        v123 = (char *)malloc_type_malloc(0x8C0uLL, 0x100004021716A34uLL);
        sub_1D3E2EA78((uint64_t)v123, &v527, 0, x, y, width, height);
        sub_1D3E2ED70((uint64_t)v123, &v527, v527, x, y, width, height);
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 0.17453);
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 1.3963);
        v124 = (float)(int)(width * 0.5);
        if ((float)(v124 * 0.125) > 10.0 && height > 20.0)
        {
          v126 = width;
          sub_1D3E2E93C((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v126 * 0.0625)), x, y, width, height);
        }
        *(float *)&v514 = (float)v122;
        if ((float)((float)v122 * 0.125) > 10.0 && width > 20.0)
        {
          v128 = height;
          sub_1D3E2EC40((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v128 * 0.0625)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 0.34907);
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 1.2217);
        if ((float)(v124 * 0.25) > 10.0 && height > 20.0)
        {
          v130 = width;
          sub_1D3E2E93C((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v130 * 0.125)), x, y, width, height);
        }
        if ((float)(*(float *)&v514 * 0.25) > 10.0 && width > 20.0)
        {
          v132 = height;
          sub_1D3E2EC40((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v132 * 0.125)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 0.5236);
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 1.0472);
        if ((float)(v124 * 0.375) > 10.0 && height > 20.0)
        {
          v134 = width;
          sub_1D3E2E93C((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v134 * 0.1875)), x, y, width, height);
        }
        if ((float)(*(float *)&v514 * 0.375) > 10.0 && width > 20.0)
        {
          v136 = height;
          sub_1D3E2EC40((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v136 * 0.1875)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v123, &v527, v527, v497, v498, x, y, width, height, 0.7854);
        if ((float)(v124 * 0.5) > 10.0 && height > 20.0)
        {
          v138 = width;
          sub_1D3E2E93C((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v138 * 0.25)), x, y, width, height);
        }
        if ((float)(*(float *)&v514 * 0.5) > 10.0 && width > 20.0)
        {
          v140 = height;
          sub_1D3E2EC40((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v140 * 0.25)), x, y, width, height);
        }
        if ((float)(v124 * 0.75) > 10.0 && height > 20.0)
        {
          v142 = width;
          sub_1D3E2E93C((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v142 * 0.375)), x, y, width, height);
        }
        v28.n128_f32[0] = *(float *)&v514 * 0.75;
        if ((float)(*(float *)&v514 * 0.75) <= 10.0 || width <= 20.0)
        {
          v30 = 6;
          v35 = v123;
        }
        else
        {
          v457 = height;
          sub_1D3E2EC40((uint64_t)v123, &v527, v527, (int)fabsf(roundf(v457 * 0.375)), x, y, width, height);
          v35 = v123;
LABEL_218:
          v30 = 6;
        }
        goto LABEL_223;
      case 0xE:
        v110 = (char *)malloc_type_malloc(0x498uLL, 0x100004021716A34uLL);
        sub_1D3E2EA78((uint64_t)v110, &v527, 0, x, y, width, height);
        sub_1D3E2EF34((uint64_t)v110, &v527, v527, v497, v498, x, y, width, height, 1.3963);
        v111 = (float)(int)(width * 0.5);
        if ((float)(v111 * 0.125) > 10.0 && height > 20.0)
        {
          v113 = width;
          sub_1D3E2E93C((uint64_t)v110, &v527, v527, (int)fabsf(roundf(v113 * 0.0625)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v110, &v527, v527, v497, v498, x, y, width, height, 1.2217);
        if ((float)(v111 * 0.25) > 10.0 && height > 20.0)
        {
          v115 = width;
          sub_1D3E2E93C((uint64_t)v110, &v527, v527, (int)fabsf(roundf(v115 * 0.125)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v110, &v527, v527, v497, v498, x, y, width, height, 1.0472);
        if ((float)(v111 * 0.375) > 10.0 && height > 20.0)
        {
          v117 = width;
          sub_1D3E2E93C((uint64_t)v110, &v527, v527, (int)fabsf(roundf(v117 * 0.1875)), x, y, width, height);
        }
        v104 = v110;
        sub_1D3E2EF34((uint64_t)v110, &v527, v527, v497, v498, x, y, width, height, 0.7854);
        if ((float)(v111 * 0.5) > 10.0 && height > 20.0)
        {
          v119 = width;
          sub_1D3E2E93C((uint64_t)v110, &v527, v527, (int)fabsf(roundf(v119 * 0.25)), x, y, width, height);
        }
        v28.n128_u64[0] = 20.0;
        if ((float)(v111 * 0.75) <= 10.0 || height <= 20.0)
          goto LABEL_147;
        v149 = width;
        sub_1D3E2E93C((uint64_t)v110, &v527, v527, (int)fabsf(roundf(v149 * 0.375)), x, y, width, height);
        goto LABEL_221;
      case 0xF:
        v96 = (char *)malloc_type_malloc(0x498uLL, 0x100004021716A34uLL);
        sub_1D3E2ED70((uint64_t)v96, &v527, 0, x, y, width, height);
        sub_1D3E2EF34((uint64_t)v96, &v527, v527, v497, v498, x, y, width, height, 0.17453);
        v97 = (float)(int)(height * 0.5);
        if ((float)(v97 * 0.125) > 10.0 && width > 20.0)
        {
          v99 = height;
          sub_1D3E2EC40((uint64_t)v96, &v527, v527, (int)fabsf(roundf(v99 * 0.0625)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v96, &v527, v527, v497, v498, x, y, width, height, 0.34907);
        if ((float)(v97 * 0.25) > 10.0 && width > 20.0)
        {
          v101 = height;
          sub_1D3E2EC40((uint64_t)v96, &v527, v527, (int)fabsf(roundf(v101 * 0.125)), x, y, width, height);
        }
        sub_1D3E2EF34((uint64_t)v96, &v527, v527, v497, v498, x, y, width, height, 0.5236);
        if ((float)(v97 * 0.375) > 10.0 && width > 20.0)
        {
          v103 = height;
          sub_1D3E2EC40((uint64_t)v96, &v527, v527, (int)fabsf(roundf(v103 * 0.1875)), x, y, width, height);
        }
        v104 = v96;
        sub_1D3E2EF34((uint64_t)v96, &v527, v527, v497, v498, x, y, width, height, 0.7854);
        if ((float)(v97 * 0.5) > 10.0 && width > 20.0)
        {
          v106 = height;
          sub_1D3E2EC40((uint64_t)v96, &v527, v527, (int)fabsf(roundf(v106 * 0.25)), x, y, width, height);
        }
        v28.n128_u64[0] = 20.0;
        if ((float)(v97 * 0.75) <= 10.0 || width <= 20.0)
        {
LABEL_147:
          v30 = 3;
          v35 = v104;
        }
        else
        {
          v108 = height;
          sub_1D3E2EC40((uint64_t)v96, &v527, v527, (int)fabsf(roundf(v108 * 0.375)), x, y, width, height);
LABEL_221:
          v35 = v104;
LABEL_222:
          v30 = 3;
        }
        goto LABEL_223;
      case 0x11:
        v485 = (char *)malloc_type_malloc((112 * v30) | 1, 0x5554779DuLL);
        sub_1D3E2E8A4((uint64_t)v485, &v527, 0, x, y, width, height);
        if (v30 < 1)
          goto LABEL_220;
        v492 = a10;
        v493 = a11;
        *(float *)&v489 = a13;
        for (i = 0;
              i != v30;
              sub_1D3E2EC40((uint64_t)v485, &v527, v527, (int)fabsf(roundf((float)((float)((float)i / (float)v30) * 0.5) * v145)), x, y, width, height))
        {
          ++i;
          v145 = height;
        }
        goto LABEL_211;
      case 0x12:
        v485 = (char *)malloc_type_malloc((112 * v30) | 1, 0x7B640BCAuLL);
        sub_1D3E2E77C((uint64_t)v485, &v527, 0, x, y, width, height);
        if (v30 >= 1)
        {
          v492 = a10;
          v493 = a11;
          *(float *)&v489 = a13;
          for (j = 0;
                j != v30;
                sub_1D3E2E93C((uint64_t)v485, &v527, v527, (int)fabsf(roundf((float)((float)((float)j / (float)v30) * 0.5) * v147)), x, y, width, height))
          {
            ++j;
            v147 = width;
          }
LABEL_211:
          v508 = x;
          v509 = y;
          v510 = width;
          goto LABEL_27;
        }
LABEL_220:
        v35 = v485;
LABEL_223:
        v53 = v527;
        if (v527 > 0)
        {
          v485 = v35;
          goto LABEL_225;
        }
        break;
      default:
        goto LABEL_223;
    }
    goto LABEL_227;
  }
  v31 = 0;
  v32 = height;
  if (fabsf(a13) > 5.0)
  {
    v31 = 1070141403;
    if ((float)(90.0 - a13) <= 5.0)
    {
      v32 = width;
    }
    else
    {
      v32 = width;
      if ((float)(a13 + 90.0) > 5.0)
      {
        v33 = a13 * 3.14159265 / 180.0;
        *(float *)&v508 = v33;
        v34 = __sincosf_stret(v33);
        v31 = LODWORD(v508);
        v32 = width / fabsf(v34.__sinval);
        if (height / v34.__cosval < v32)
          v32 = height / v34.__cosval;
      }
    }
  }
  LODWORD(v508) = v31;
  v492 = a10;
  v493 = a11;
  v490 = v18;
  *(float *)&v489 = a13;
  v37 = v32;
  v38 = fmaxf(v37 / 20.0, 3.0);
  v39 = vcvtms_s32_f32((float)(v37 * 0.5) / v38);
  v40 = (char *)malloc_type_malloc(0x968uLL, 0x100004021716A34uLL);
  v41 = x + width * 0.5;
  v42 = x;
  v43 = width;
  v44 = y + height * 0.5;
  v45 = __sincosf_stret(*(float *)&v508);
  *(float *)&v514 = -(float)(v38 * v45.__sinval);
  *(float *)&v512 = v45.__cosval * v38;
  sub_1D3E2F204((uint64_t)v40, &v527, x, y, v43, height, v41, v44, *(float *)&v508);
  if (v39 >= 1)
  {
    v46 = 0;
    *(float *)&v510 = -*(float *)&v514;
    *(float *)&v509 = -*(float *)&v512;
    do
    {
      ++v46;
      sub_1D3E2F204((uint64_t)v40, &v527, x, y, v43, height, v41 + (float)(*(float *)&v514 * (float)v46), v44 + (float)(*(float *)&v512 * (float)v46), *(float *)&v508);
      sub_1D3E2F204((uint64_t)v40, &v527, x, y, v43, height, v41 + (float)(*(float *)&v510 * (float)v46), v44 + (float)(*(float *)&v509 * (float)v46), *(float *)&v508);
    }
    while (v39 != v46);
  }
  v47 = *(float *)&v508 + 0.087266;
  v48 = *(float *)&v508 + -0.087266;
  sub_1D3E2F204((uint64_t)v40, &v527, v42, y, v43, height, v41, v44, *(float *)&v508 + 0.087266);
  v485 = v40;
  v508 = v42;
  v509 = y;
  v510 = v43;
  sub_1D3E2F204((uint64_t)v40, &v527, v42, y, v43, height, v41, v44, v48);
  if (v39 > 1)
  {
    v49 = 0;
    v50 = v39 >> 1;
    *(float *)&v506 = *(float *)&v514 + *(float *)&v514;
    *(float *)&v502 = -(float)(*(float *)&v514 + *(float *)&v514);
    v507 = height;
    *(float *)&v504 = *(float *)&v512 + *(float *)&v512;
    *(float *)&v501 = -(float)(*(float *)&v512 + *(float *)&v512);
    *(float *)&v495 = v41;
    *(float *)&v514 = v48;
    *(float *)&v512 = v47;
    *(float *)&v513 = y + height * 0.5;
    do
    {
      ++v49;
      sub_1D3E2F204((uint64_t)v485, &v527, v508, v509, v510, v507, *(float *)&v495 + (float)(*(float *)&v506 * (float)v49), *(float *)&v513 + (float)(*(float *)&v504 * (float)v49), *(float *)&v512);
      sub_1D3E2F204((uint64_t)v485, &v527, v508, v509, v510, v507, *(float *)&v495 + (float)(*(float *)&v506 * (float)v49), *(float *)&v513 + (float)(*(float *)&v504 * (float)v49), *(float *)&v514);
      sub_1D3E2F204((uint64_t)v485, &v527, v508, v509, v510, v507, *(float *)&v495 + (float)(*(float *)&v502 * (float)v49), *(float *)&v513 + (float)(*(float *)&v501 * (float)v49), *(float *)&v512);
      sub_1D3E2F204((uint64_t)v485, &v527, v508, v509, v510, v507, *(float *)&v495 + (float)(*(float *)&v502 * (float)v49), *(float *)&v513 + (float)(*(float *)&v501 * (float)v49), *(float *)&v514);
    }
    while (v50 != v49);
    height = v507;
  }
  v18 = v490;
LABEL_27:
  v52 = v492;
  v51 = v493;
  v53 = v527;
  if (!v500 || v527 < 1)
  {
    v35 = v485;
    if (v527 < 1)
    {
LABEL_227:
      v95 = 0;
      v502 = 19;
      v87 = Mutable;
      goto LABEL_555;
    }
LABEL_225:
    v458[1] = v458;
    memset(v526, 0, sizeof(v526));
    MEMORY[0x1E0C80A78](v28);
    v472 = (char *)v458 - v150;
    MEMORY[0x1E0C80A78](v151);
    v475 = (char *)v458 - v152;
    v479 = (char *)malloc_type_malloc(104 * v53, 0x1030040C2A760F9uLL);
    v480 = (char *)malloc_type_malloc(88 * v53, 0x10A0040F0082B6AuLL);
    v153 = *(_QWORD *)(a1 + 8);
    v471 = *(double *)(v153 + 32);
    if (v471 > 0.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v153 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      Current = 0.0;
    }
    if (*(_BYTE *)(v153 + 51))
    {
      v470 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v153 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v470 = 0;
    }
    LODWORD(v153) = *(_DWORD *)(v153 + 40);
    if (v53 < (int)v153 || (int)v153 < 1)
      v153 = v53;
    else
      v153 = v153;
    v467 = v153;
    if ((int)v153 < 1)
    {
      v502 = 19;
      goto LABEL_554;
    }
    v155 = 0;
    v476 = 0;
    v156 = v497;
    if (v497 <= v498)
      v156 = v498;
    v466 = (float)v156;
    v460 = v487 * v498;
    v504 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
    v461 = a8 + 2;
    v157 = v30 & 1;
    if (v30 < 0)
      v157 = -v157;
    v462 = v157;
    v464 = v30 - 1;
    v492 = COERCE_DOUBLE(&v547);
    v493 = COERCE_DOUBLE(v550);
    v508 = COERCE_DOUBLE(&v555[4]);
    v509 = COERCE_DOUBLE(v558);
    v468 = (_OWORD *)((char *)&v535[1] + 12);
    v469 = (char *)&v536 + 8;
    v459 = (char *)&v556 + 12;
    v158 = 19;
    v159 = 0.5;
    v465 = Current;
    while (1)
    {
      if (v471 > 0.0 && v465 - Current >= *(double *)(*(_QWORD *)(a1 + 8) + 32))
      {
LABEL_515:
        v502 = v158;
        if (v476)
        {
          v406 = 0;
          v407 = v476;
          do
          {
            v408 = (float *)&v480[88 * v406];
            v409 = (float)(v408[5] + v408[6]) * 0.5;
            *(float *)v541 = (float)(*((_DWORD *)v408 + 4) + *((_DWORD *)v408 + 3)) * 0.5;
            *((float *)v541 + 1) = v409;
            v410 = *(_DWORD *)&v475[4 * v406];
            sub_1D3E511F8(v497, v498, (float *)&v472[52 * v410], 2u, (float *)v541, (float *)&v543, (float *)v535);
            v411 = (unint64_t *)*v491;
            v412 = v491[1];
            if (*v491 == v412)
            {
              v415 = v485;
LABEL_533:
              v435 = &v480[88 * v406];
              *((_DWORD *)v435 + 14) = (_DWORD)v543;
              *((_DWORD *)v435 + 15) = v535[0];
              v436 = (unsigned int *)&v479[104 * v406];
              v437 = *(unsigned int (**)(float *, char *, char *, _QWORD *))&dword_1EDB895D0[16 * (unint64_t)*v436 + 14];
              if (v437 && !v437(v408, &v479[104 * v406], &v415[56 * v410], v529))
              {
                v553.imagp = 0;
                v553.realp = 0;
                imagp = 0;
                sub_1D3E330B0((unint64_t *)&v516, v436, (uint64_t)&v553, 0.0);
                v438 = v491;
                v440 = (unint64_t *)v491[1];
                v439 = v491[2];
                if ((unint64_t)v440 >= v439)
                {
                  v443 = ((uint64_t)v440 - *v491) >> 3;
                  if ((unint64_t)(v443 + 1) >> 61)
                    sub_1D3D6D4F8();
                  v444 = v439 - *v491;
                  v445 = v444 >> 2;
                  if (v444 >> 2 <= (unint64_t)(v443 + 1))
                    v445 = v443 + 1;
                  if ((unint64_t)v444 >= 0x7FFFFFFFFFFFFFF8)
                    v446 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v446 = v445;
                  *(_QWORD *)&v555[8] = v461;
                  if (v446)
                    v446 = (unint64_t)sub_1D3D6D8A0(v446);
                  else
                    v447 = 0;
                  v553.realp = (float *)v446;
                  v553.imagp = (float *)(v446 + 8 * v443);
                  imagp = v553.imagp;
                  *(_QWORD *)v555 = v446 + 8 * v447;
                  do
                    v448 = __ldaxr((unint64_t *)&v516);
                  while (__stlxr(0, (unint64_t *)&v516));
                  *(_QWORD *)(v446 + 8 * v443) = v448;
                  imagp += 2;
                  sub_1D3DB37F8(v438, &v553);
                  v442 = (_QWORD *)v438[1];
                  sub_1D3D75F10((uint64_t)&v553);
                }
                else
                {
                  do
                    v441 = __ldaxr((unint64_t *)&v516);
                  while (__stlxr(0, (unint64_t *)&v516));
                  *v440 = v441;
                  v442 = v440 + 1;
                  v438[1] = (uint64_t)v442;
                }
                v438[1] = (uint64_t)v442;
                sub_1D3D74F14((unint64_t *)&v516);
                *(float *)&v502 = 0.0;
              }
            }
            else
            {
              v413 = *((float *)&v543 + 1);
              v414 = *((float *)v535 + 1);
              v415 = v485;
              while (1)
              {
                v416 = atomic_load(v411);
                if (*(_BYTE *)(v416 + 64))
                {
                  v418 = v416 + 40;
                  v417 = *(double **)(v416 + 40);
                  if (*(_QWORD *)(v418 + 8) - (_QWORD)v417 >= 0x31uLL)
                    break;
                }
LABEL_530:
                if (++v411 == (unint64_t *)v412)
                {
                  v410 = *(_DWORD *)&v475[4 * v406];
                  goto LABEL_533;
                }
              }
              v419 = v417[1];
              v420 = 1;
              v421 = 2;
              v422 = v417[2];
              v423 = v417[3];
              while (1)
              {
                v424 = v420;
                v425 = v422;
                v426 = v423;
                v427 = &v417[2 * v421];
                v422 = *v427;
                v423 = v427[1];
                v428 = v426 - v423;
                v429 = *v417 - *v427;
                v430 = *v427 - v425;
                v431 = v430 * (v419 - v423) + v428 * v429;
                if (v431 != 0.0)
                {
                  v432 = (v430 * (v414 - v423) + v428 * (v413 - v422)) / v431;
                  if (v432 > -0.0299999993 && v432 < 1.02999997)
                  {
                    v433 = (v429 * (v414 - v423) + (v423 - v419) * (v413 - v422)) / v431;
                    if (v433 > -0.0299999993 && v433 < 1.02999997)
                    {
                      v434 = 1.0 - (v432 + v433);
                      if (v434 > -0.0299999993 && v434 < 1.02999997)
                        break;
                    }
                  }
                }
                v420 = 0;
                v421 = 3;
                if ((v424 & 1) == 0)
                  goto LABEL_530;
              }
            }
            sub_1D3E36E54((uint64_t)&v479[104 * v406]);
            sub_1D3E36F54((uint64_t)v408);
            ++v406;
          }
          while (v406 != v407);
        }
LABEL_554:
        free(v480);
        free(v479);
        a8 = v491;
        a1 = v496;
        v87 = Mutable;
        v35 = v485;
        v95 = v470;
        goto LABEL_555;
      }
      v502 = v158;
      memset(v541, 0, sizeof(v541));
      v160 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
      v542 = v160;
      *((_QWORD *)v160 + 8) = 0;
      *((_DWORD *)v160 + 18) = 0;
      *((_QWORD *)v160 + 10) = 0;
      *(_OWORD *)v160 = 0u;
      *((_OWORD *)v160 + 1) = 0u;
      *((_OWORD *)v160 + 2) = 0u;
      *(_OWORD *)(v160 + 44) = 0u;
      v161 = v485;
      v162 = (float *)&v485[56 * v155];
      v163 = v162[12];
      v481 = v162 + 12;
      if (v163 <= 0.0 || v163 >= v466)
      {
        *v481 = 1065353216;
        v163 = 1.0;
      }
      v165 = (float *)&v161[56 * v155];
      v166 = v165[10];
      v165 += 10;
      v167 = (float)*((int *)v165 - 2);
      v168 = (float)*((int *)v165 - 1);
      v477 = v165;
      v169 = v165[1];
      v478 = (float *)&v472[52 * v155];
      v170 = sub_1D3E51850((uint64_t)v486, v497, v498, v487, v541, v478, v167, v168, v169, v166, v163);
      LODWORD(v541[1]) = v170;
      if (v170 <= 21)
      {
        if (v541[0])
          free(v541[0]);
        v541[0] = 0;
        v158 = v502;
        if (v502 == 19 || v502 == 11)
        {
          v173 = 16;
          v158 = 16;
        }
        else
        {
          v173 = 16;
        }
        goto LABEL_507;
      }
      v171 = v170;
      v495 = v155;
      if (!v155)
        break;
      v525 = 0;
      v172 = v541[0];
LABEL_295:
      pthread_once(&stru_1EFE31700, (void (*)(void))sub_1D3E50BA4);
      v211 = v171 & 0xFFFFFFFE;
      v212 = (v171 & 0xFFFFFFFE) - 1;
      if ((v171 & 0xFFFFFFFE) == 0)
        v212 = 0;
      v213 = v212 | (v212 >> 1) | ((v212 | (v212 >> 1)) >> 2);
      v214 = v213 | (v213 >> 4) | ((v213 | (v213 >> 4)) >> 8);
      v215 = (v214 | HIWORD(v214)) + 1;
      v216 = __clz(v215) ^ 0x1F;
      v217 = v215 >> 1;
      v218 = (DSPComplex *)malloc_type_calloc(v171 & 0xFFFFFFFE, 4uLL, 0x100004052888210uLL);
      v553.realp = (float *)malloc_type_calloc(v215 >> 1, 4uLL, 0x100004052888210uLL);
      v553.imagp = (float *)malloc_type_calloc(v215 >> 1, 4uLL, 0x100004052888210uLL);
      v219 = (FFTSetup *)qword_1EFE31A38;
      if (v216 > *(_DWORD *)(qword_1EFE31A38 + 4))
      {
        v219 = (FFTSetup *)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405730B0C9uLL);
        sub_1D3E50BDC((uint64_t)v219, v216);
      }
      if (v211 >= 3)
      {
        v220 = v211 - 2;
        v221 = v172 + 2;
        v222 = (float *)v218;
        do
        {
          *v222++ = *v221 - *(v221 - 2);
          ++v221;
          --v220;
        }
        while (v220);
      }
      vDSP_ctoz(v218, 2, &v553, 1, v171 >> 1);
      vDSP_fft_zrip(v219[1], &v553, 1, v216, 1);
      vDSP_zvcmul(&v553, 1, &v553, 1, &v553, 1, v215 >> 1);
      v223 = (float)v215;
      v224 = (int)(float)((float)v215 / 40.0);
      if (v224 <= 1)
        v224 = 1;
      v225 = v217 - 1;
      if (v217 - 1 >= (int)(float)(v223 * v159))
        v225 = (int)(float)(v223 * v159);
      if (v224 <= v225)
      {
        v227 = -INFINITY;
        v226 = v224;
        v155 = v495;
        a1 = v496;
        do
        {
          if (v553.realp[v224] > v227)
          {
            v227 = v553.realp[v224];
            v226 = v224;
          }
          ++v224;
        }
        while (v224 <= v225);
      }
      else
      {
        v226 = v224;
        v155 = v495;
        a1 = v496;
      }
      if (v219 != (FFTSetup *)qword_1EFE31A38)
      {
        vDSP_destroy_fftsetup(v219[1]);
        free(v219);
      }
      v210 = v223 / (float)v226;
      free(v553.realp);
      free(v553.imagp);
      free(v218);
LABEL_315:
      sub_1D3E51ED4(v172, v171, (float *)&v525 + 1, (float *)&v525);
      v524 = 0;
      v523 = 0;
      v522 = 0;
      if (v228 != 0.0)
      {
        v229 = v541[0];
        v230 = (signed int)v541[1];
        v231 = CFDataCreate(v504, (const UInt8 *)v541[0], 4 * SLODWORD(v541[1]));
        v232 = v231;
        if (Mutable && v231)
        {
          CFDictionarySetValue(Mutable, CFSTR("NormalizedDetrendedProfile"), v231);
          goto LABEL_321;
        }
        if (v231)
LABEL_321:
          CFRelease(v232);
        LODWORD(v553.realp) = HIDWORD(v525);
        v233 = CFNumberCreate(v504, kCFNumberFloat32Type, &v553);
        v234 = v233;
        if (Mutable && v233)
        {
          CFDictionarySetValue(Mutable, CFSTR("ProfileUnNormalizedVariance"), v233);
          goto LABEL_326;
        }
        if (v233)
LABEL_326:
          CFRelease(v234);
        v235 = llroundf(v210 * 1.5);
        v236 = v528;
        if (v528 <= *(float *)&v525)
          v236 = *(float *)&v525;
        v528 = v236;
        *((_DWORD *)v542 + 1) = v235;
        sub_1D3E51ADC(v229, v230, v235, &v524, (void **)&v523, &v522);
        if (v524 >= 1)
        {
          v506 = 0;
          v237 = Mutable;
          while (1)
          {
            v519 = 0u;
            v520 = 0u;
            v517 = 0u;
            v518 = 0u;
            v516 = 0u;
            v238 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
            v521 = (unsigned __int8 *)v238;
            *((_QWORD *)v238 + 8) = 0;
            *((_DWORD *)v238 + 18) = 0;
            *((_QWORD *)v238 + 10) = 0;
            *(_OWORD *)v238 = 0u;
            *((_OWORD *)v238 + 1) = 0u;
            *((_OWORD *)v238 + 2) = 0u;
            *(_OWORD *)(v238 + 44) = 0u;
            sub_1D3E36F98((uint64_t)v541, (uint64_t)&v516);
            v544 = 0;
            v543 = 0;
            v546 = 0.0;
            v545 = 0;
            v239 = v493;
            **(_QWORD **)&v493 = 0;
            *(_QWORD *)(*(_QWORD *)&v239 + 8) = 0;
            *(_BYTE *)(*(_QWORD *)&v239 + 16) = 0;
            v240 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
            v241 = (int *)v240;
            v549 = (int *)v240;
            v242 = v492;
            **(_OWORD **)&v492 = 0u;
            *(_OWORD *)(*(_QWORD *)&v242 + 16) = 0u;
            *((_QWORD *)v240 + 8) = 0;
            *((_DWORD *)v240 + 18) = 0;
            *((_QWORD *)v240 + 10) = 0;
            *(_OWORD *)v240 = 0u;
            *((_OWORD *)v240 + 1) = 0u;
            *((_OWORD *)v240 + 2) = 0u;
            *(_OWORD *)(v240 + 44) = 0u;
            if (v503 >= 0x20000)
            {
              if (dword_1EDB89DD8 < 1)
              {
                v244 = 0x7FFFFFFF;
              }
              else
              {
                v243 = 0;
                v244 = 0x7FFFFFFF;
                v245 = &dword_1EDB895E8;
                do
                {
                  if (((v27 >> v243) & 1) != 0 && v244 >= *v245)
                    v244 = *v245;
                  ++v243;
                  v245 += 16;
                }
                while (dword_1EDB89DD8 != v243);
              }
              *((_DWORD *)v240 + 5) = v244;
            }
            v240[30] = v500;
            v240[29] = v499;
            v552 = (uint64_t *)v526;
            v246 = v523[v506];
            HIDWORD(v516) = v246;
            v247 = v522[v506];
            LODWORD(v517) = v247;
            LODWORD(v248) = v247 - v246 + 1;
            v249 = (uint64_t)v521;
            *((_DWORD *)v521 + 2) = LODWORD(v248);
            v250 = DWORD2(v516);
            sub_1D3E51F70((float *)v516, SDWORD2(v516), v246, v247);
            LODWORD(v553.realp) = v246;
            v251 = CFNumberCreate(v504, kCFNumberIntType, &v553);
            v252 = v251;
            if (v237)
            {
              if (v251)
                break;
            }
            if (v251)
              goto LABEL_345;
LABEL_346:
            LODWORD(v553.realp) = v247;
            v253 = CFNumberCreate(v504, kCFNumberIntType, &v553);
            v254 = v253;
            if (v237 && v253)
            {
              CFDictionarySetValue(v237, CFSTR("ProfileCropRight"), v253);
            }
            else if (!v253)
            {
              goto LABEL_351;
            }
            CFRelease(v254);
LABEL_351:
            if (v503 >= 0x20000)
            {
              v173 = sub_1D3E3BE98((uint64_t)&v516, (uint64_t)&v543, v27);
              a1 = v496;
              goto LABEL_353;
            }
            if (v247 <= v246)
            {
              v173 = 15;
              goto LABEL_372;
            }
            if (SLODWORD(v248) < 41)
            {
              v173 = 16;
LABEL_372:
              v155 = v495;
              a1 = v496;
LABEL_373:
              if (v502 > 0x13)
                goto LABEL_426;
              if (((1 << v502) & 0x1B704) != 0)
              {
                if ((v173 & 0xFFFFFFFC) != 4)
                  goto LABEL_439;
                goto LABEL_379;
              }
              if (((1 << v502) & 0xE0800) == 0)
              {
LABEL_426:
                v331 = (v502 & 0xFFFFFFFD) == 4 || v502 == 7;
                if (!v331 || v173 != 5)
                  goto LABEL_439;
              }
LABEL_379:
              v502 = v173;
              goto LABEL_439;
            }
            *(_QWORD *)&v535[0] = 0;
            v530 = 0;
            *((_QWORD *)&v535[0] + 1) = malloc_type_malloc(4 * (v247 - v246 + 1), 0x100004052888210uLL);
            v531 = malloc_type_malloc(4 * (v247 - v246 + 1), 0x100004052888210uLL);
            v563 = 0;
            v561 = 0;
            v564 = (int *)malloc_type_malloc(4 * (v247 - v246 + 1), 0x100004052888210uLL);
            v562 = malloc_type_malloc(4 * (v247 - v246 + 1), 0x100004052888210uLL);
            v299 = sub_1D3DE3318((uint64_t)&v516, (uint64_t)&v563, (uint64_t)&v561);
            if (*(float *)&v299 == 0.0)
            {
              v299 = sub_1D3DE33E4((uint64_t *)&v516, (unsigned int *)&v563, (int *)&v561, SLODWORD(v248), 0.8, 0.0);
              if (*(float *)&v299 == 0.0)
              {
                v333 = v459;
                *((_QWORD *)v459 + 4) = 0;
                *v333 = 0u;
                v333[1] = 0u;
                v334 = *(_QWORD *)((char *)&v517 + 4);
                if (LODWORD(v248) < 0x2C)
                {
                  v173 = 14;
                  a1 = v496;
LABEL_504:
                  *(_QWORD *)((char *)&v517 + 4) = v334;
                  goto LABEL_383;
                }
                v335 = v561;
                v513 = (int)v561;
                *(_QWORD *)&v514 = v562;
                v336 = v563;
                *(_QWORD *)&v511 = (int)v563;
                v512 = v564;
                v501 = 4 * v250;
                v173 = 14;
                v337 = 0.0;
                v338 = (float *)&unk_1D3E81000;
                *(_QWORD *)&v507 = v561;
                while (2)
                {
                  v482 = LODWORD(v248);
                  *(_QWORD *)&v248 = LODWORD(v248) >> 2;
                  v339 = 0.6;
                  v510 = v248;
LABEL_444:
                  LODWORD(v530) = v335;
                  if (v335 >= 1)
                  {
                    v340 = v531;
                    v342 = v513;
                    v341 = (int *)v514;
                    do
                    {
                      v343 = *v341++;
                      *v340++ = v343;
                      --v342;
                    }
                    while (v342);
                  }
                  LODWORD(v535[0]) = v336;
                  if (v336 >= 1)
                  {
                    v344 = (_DWORD *)*((_QWORD *)&v535[0] + 1);
                    v346 = v511;
                    v345 = v512;
                    do
                    {
                      v347 = *v345++;
                      *v344++ = v347;
                      --*(_QWORD *)&v346;
                    }
                    while (v346 != 0.0);
                  }
                  v348 = sub_1D3DE33E4((uint64_t *)&v516, (unsigned int *)v535, (int *)&v530, SLODWORD(v248), v339, v338[977]);
                  if (*(float *)&v348 != 0.0)
                  {
                    v349 = v348;
                    goto LABEL_494;
                  }
                  v560 = 0;
                  imagp = 0;
                  v553.realp = 0;
                  v553.imagp = 0;
                  *(_DWORD *)v555 = 0;
                  v350 = *(int **)&v509;
                  **(_QWORD **)&v509 = 0;
                  *((_QWORD *)v350 + 1) = 0;
                  *((_BYTE *)v350 + 16) = 0;
                  v351 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
                  v557 = (float *)v351;
                  v352 = v508;
                  **(_OWORD **)&v508 = 0u;
                  *(_OWORD *)(*(_QWORD *)&v352 + 16) = 0u;
                  *((_QWORD *)v351 + 8) = 0;
                  *((_DWORD *)v351 + 18) = 0;
                  *((_QWORD *)v351 + 10) = 0;
                  *(_OWORD *)v351 = 0u;
                  *((_OWORD *)v351 + 1) = 0u;
                  *((_OWORD *)v351 + 2) = 0u;
                  *(_OWORD *)(v351 + 44) = 0u;
                  v353 = v535[0];
                  v354 = *((_QWORD *)&v535[0] + 1);
                  v355 = (uint64_t)v531;
                  sub_1D3E377AC(*(uint64_t *)&v535[0], *((uint64_t *)&v535[0] + 1), v530, (uint64_t)v531, (_DWORD *)v249, v27);
                  v249 = (uint64_t)v521;
                  if (*(_DWORD *)v521)
                  {
                    v356 = (void *)*((_QWORD *)v521 + 8);
                    if (v356)
                      free(v356);
                    *(_QWORD *)(v249 + 64) = 0;
                    *(_DWORD *)(v249 + 56) = 0;
                    v357 = *(void **)(v249 + 80);
                    if (v357)
                      free(v357);
                    *(_QWORD *)(v249 + 80) = 0;
                    *(_DWORD *)(v249 + 72) = 0;
                    v358 = v501;
                    *(_QWORD *)(v249 + 64) = malloc_type_malloc(v501, 0x100004052888210uLL);
                    *(_QWORD *)(v249 + 80) = malloc_type_malloc(v358, 0x100004052888210uLL);
                    v359 = v516;
                    v360 = sub_1D3DE3B58(v516, v353, v354, v355, v249 + 56, v249 + 72);
                    v349 = v360;
                    v361 = *(float **)(v249 + 64);
                    v362 = *v361;
                    v363 = *(float **)(v249 + 80);
                    if (*v361 >= *v363)
                      v362 = *v363;
                    *((float *)&v517 + 1) = v362;
                    v364 = v361[*(int *)(v249 + 56) - 1];
                    v365 = &v363[*(int *)(v249 + 72)];
                    if (v364 <= *(v365 - 1))
                      v364 = *(v365 - 1);
                    *((float *)&v517 + 2) = v364;
                    v27 = v505;
                    if (*(float *)&v360 != 0.0)
                    {
LABEL_462:
                      v366 = (uint64_t)v557;
                      v338 = (float *)&unk_1D3E81000;
                      LODWORD(v248) = LODWORD(v510);
                      if (v349 <= 1)
                      {
LABEL_485:
                        *(_DWORD *)(v366 + 12) = LODWORD(v248);
                        *(float *)(v366 + 16) = v339;
                        v393 = *(float *)v555;
                        if (*(float *)v555 > v337)
                        {
                          v334 = *(_QWORD *)((char *)&v517 + 4);
                          sub_1D3E36E84((uint64_t)&v553, (uint64_t)&v543);
                          v173 = v349;
                          v337 = v393;
                        }
                        sub_1D3E36D4C(v366);
LABEL_488:
                        free((void *)v366);
LABEL_489:
                        v557 = 0;
                        if (imagp == v545)
                        {
                          v335 = LODWORD(v507);
                        }
                        else
                        {
                          v335 = LODWORD(v507);
                          if (imagp)
                            free(imagp);
                          imagp = 0;
                        }
LABEL_494:
                        if (v173 == 14)
                          v173 = v349;
                        v339 = v339 + -0.15;
                        if (v339 <= 0.25)
                        {
                          if (v482 < 0xB0)
                          {
                            v241 = v549;
                            a1 = v496;
                            v237 = Mutable;
                            goto LABEL_504;
                          }
                          continue;
                        }
                        goto LABEL_444;
                      }
LABEL_466:
                      sub_1D3E36D4C(v366);
                      if (v366)
                        goto LABEL_488;
                      goto LABEL_489;
                    }
                    sub_1D3E36D94((int *)v249, (uint64_t)v557);
                    v367 = DWORD2(v516);
                    v349 = sub_1D3E375DC(*(_QWORD *)(v249 + 56), *(_QWORD *)(v249 + 64), *(_QWORD *)(v249 + 72), *(_QWORD *)(v249 + 80), (uint64_t)&v553, v359, DWORD2(v516), 0);
                    if (v349 < 2)
                    {
                      v368 = 0;
LABEL_484:
                      v338 = (float *)&unk_1D3E81000;
                      LODWORD(v248) = LODWORD(v510);
                      v366 = (uint64_t)v557;
                      *((_BYTE *)v557 + 28) = v368;
                      goto LABEL_485;
                    }
                    v369 = *(_QWORD *)(v249 + 56);
                    v484 = *(_QWORD *)(v249 + 64);
                    v370 = *(_QWORD *)(v249 + 72);
                    v371 = *(_QWORD *)(v249 + 80);
                    v490 = COERCE_DOUBLE(malloc_type_malloc(4 * (int)v370, 0x100004052888210uLL));
                    v372 = malloc_type_malloc(4 * (int)v369, 0x100004052888210uLL);
                    v488 = v369;
                    v489 = v372;
                    v483 = (v369 << 32) - 0x100000000;
                    if (v367 <= (int)(*(float *)(v371 + (v483 >> 30)) + 2.0))
                      v373 = v367 - 1;
                    else
                      v373 = (int)(*(float *)(v371 + (v483 >> 30)) + 2.0);
                    v374 = malloc_type_malloc(4 * v373, 0x100004052888210uLL);
                    v375 = v373;
                    if (v373 >= 1)
                    {
                      v376 = v373;
                      v377 = (int *)(v359 + 4 * v373);
                      v378 = v374;
                      do
                      {
                        v379 = *v377--;
                        *v378++ = v379;
                        --v376;
                      }
                      while (v376);
                    }
                    v380 = (float)v373;
                    v381 = v490;
                    if ((int)v370 >= 1)
                    {
                      v382 = ((unint64_t)v370 << 32) - 0x100000000;
                      v383 = *(float **)&v490;
                      v384 = v370;
                      do
                      {
                        *v383++ = v380 - *(float *)(v371 + (v382 >> 30));
                        v382 -= 0x100000000;
                        --v384;
                      }
                      while (v384);
                    }
                    v385 = v489;
                    v386 = v488;
                    if ((int)v488 >= 1)
                    {
                      v387 = (float *)(v484 + 4 * (v483 >> 32));
                      v388 = (float *)v489;
                      v389 = v488;
                      do
                      {
                        v390 = *v387--;
                        *v388++ = v380 - v390;
                        --v389;
                      }
                      while (v389);
                    }
                    v391 = v374;
                    v392 = sub_1D3E375DC(v370, *(uint64_t *)&v381, v386, (uint64_t)v385, (uint64_t)&v553, (uint64_t)v374, v375, 0);
                    free(v391);
                    free(*(void **)&v381);
                    free(v385);
                    v27 = v505;
                    if (v392 < 2)
                    {
                      v368 = 1;
                      v349 = v392;
                      goto LABEL_484;
                    }
                    if ((v349 & 0xFFFFFFFD) != 4 || v392 != 5)
                      goto LABEL_462;
                    v349 = 5;
                    v338 = (float *)&unk_1D3E81000;
                  }
                  else
                  {
                    v349 = 2;
                  }
                  break;
                }
                LODWORD(v248) = LODWORD(v510);
                v366 = (uint64_t)v557;
                goto LABEL_466;
              }
            }
            v173 = v299;
            a1 = v496;
LABEL_383:
            sub_1D3E36D94(v241, v249);
            free(*((void **)&v535[0] + 1));
            free(v531);
            free(v564);
            free(v562);
LABEL_353:
            v256 = v491;
            v155 = v495;
            if (v173 != 1)
            {
              if (*(float *)&v173 == 0.0)
              {
                *(_QWORD *)&v255 = *(_QWORD *)((char *)&v517 + 4);
                v514 = v255;
                v563 = *(_QWORD *)((char *)&v517 + 4);
                LODWORD(v512) = *v481;
                v257 = v478;
                v258 = *v477;
                v259 = v521[28] == 0;
                v261 = v497;
                v260 = v498;
                sub_1D3E511F8(v497, v498, v478, 2u, (float *)&v563, (float *)&v561, &v539);
                v262 = v258 + flt_1D3E81E20[v259];
                LODWORD(v507) = v561;
                v263 = __sincosf_stret(v262);
                v502 = HIDWORD(v561);
                *(float *)&v501 = v539;
                *(float *)&v511 = v540;
                v264 = (float)(*(float *)v550 + *(float *)v550) * v159;
                v265 = v264 * 4.0;
                v266 = *((float *)&v514 + 1);
                if (*(float *)&v514 >= *((float *)&v514 + 1))
                  v267 = *((float *)&v514 + 1);
                else
                  v267 = *(float *)&v514;
                v268 = v267 - v265;
                v269 = HIDWORD(v516) & ~(SHIDWORD(v516) >> 31);
                if (*(float *)&v514 > *((float *)&v514 + 1))
                  v266 = *(float *)&v514;
                if (v268 <= (float)v269)
                  v268 = (float)v269;
                v270 = v265 + v266;
                v271 = (float)(int)v517;
                if ((float)((float)SDWORD2(v516) + -1.0) <= (float)(int)v517)
                  v271 = (float)SDWORD2(v516) + -1.0;
                if (v270 >= v271)
                  v270 = v271;
                v563 = __PAIR64__(LODWORD(v270), LODWORD(v268));
                sub_1D3E511F8(v261, v260, v257, 2u, (float *)&v563, (float *)&v561, &v539);
                *(float *)&v510 = v263.__cosval;
                v272 = roundf(v263.__cosval * (float)(v264 + v264));
                *(float *)&v513 = v263.__sinval;
                v273 = roundf(v263.__sinval * (float)(v264 + v264));
                v274 = v272 + *(float *)&v561;
                v275 = v273 + v539;
                v276 = v272 + *((float *)&v561 + 1);
                v277 = v273 + v540;
                *(float *)&v514 = *(float *)&v561 - v272;
                v278 = v539 - v273;
                v279 = *((float *)&v561 + 1) - v272;
                v560 = 0;
                imagp = 0;
                v553.realp = 0;
                v553.imagp = 0;
                v280 = v540 - v273;
                *(_DWORD *)v555 = 0;
                v281 = *(int **)&v509;
                **(_QWORD **)&v509 = 0;
                *((_QWORD *)v281 + 1) = 0;
                *((_BYTE *)v281 + 16) = 0;
                v282 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
                v557 = (float *)v282;
                v283 = v508;
                **(_OWORD **)&v508 = 0u;
                *(_OWORD *)(*(_QWORD *)&v283 + 16) = 0u;
                *((_QWORD *)v282 + 8) = 0;
                *((_DWORD *)v282 + 18) = 0;
                *((_QWORD *)v282 + 10) = 0;
                *(_OWORD *)v282 = 0u;
                *((_OWORD *)v282 + 1) = 0u;
                *((_OWORD *)v282 + 2) = 0u;
                *(_OWORD *)(v282 + 44) = 0u;
                v538 = 0;
                memset(v535, 0, 28);
                v284 = v469;
                v469[16] = 0;
                *v284 = 0;
                v284[1] = 0;
                v285 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
                *(_QWORD *)&v536 = v285;
                v286 = v468;
                *v468 = 0u;
                v286[1] = 0u;
                *((_QWORD *)v285 + 8) = 0;
                *((_DWORD *)v285 + 18) = 0;
                *((_QWORD *)v285 + 10) = 0;
                *(_OWORD *)v285 = 0u;
                *((_OWORD *)v285 + 1) = 0u;
                *((_OWORD *)v285 + 2) = 0u;
                *(_OWORD *)(v285 + 44) = 0u;
                LODWORD(v535[0]) = (_DWORD)v543;
                LODWORD(v553.realp) = (_DWORD)v543;
                v287 = v536;
                if (v503 < 0x20000)
                {
                  v300 = v500;
                  *(_BYTE *)(v536 + 30) = v500;
                  v301 = (uint64_t)v557;
                  *((_BYTE *)v557 + 30) = v300;
                  v302 = v499;
                  *(_BYTE *)(v287 + 29) = v499;
                  *(_BYTE *)(v301 + 29) = v302;
                  v303 = v521;
                  v291 = sub_1D3E4E8F0((uint64_t)v529, v521[28], *((_DWORD *)v521 + 1), *((_DWORD *)v521 + 3), (unsigned int *)&v553, v274, v275, v276, v277, *((float *)v521 + 4));
                  v292 = sub_1D3E4E8F0((uint64_t)v529, v303[28], *((_DWORD *)v303 + 1), *((_DWORD *)v303 + 3), (unsigned int *)v535, *(float *)&v514, v278, v279, v280, *((float *)v303 + 4));
                }
                else
                {
                  *(float *)(v536 + 24) = v264;
                  v288 = (uint64_t)v557;
                  v557[6] = v264;
                  v289 = v549[5];
                  *(_DWORD *)(v287 + 20) = v289;
                  *(_DWORD *)(v288 + 20) = v289;
                  LOBYTE(v289) = v500;
                  *(_BYTE *)(v287 + 30) = v500;
                  *(_BYTE *)(v288 + 30) = v289;
                  LOBYTE(v289) = v499;
                  *(_BYTE *)(v287 + 29) = v499;
                  *(_BYTE *)(v288 + 29) = v289;
                  v290 = v521;
                  v291 = sub_1D3E4E460((uint64_t)v529, v521[28], (uint64_t)&v553, v274, v275, v276, v277);
                  v292 = sub_1D3E4E460((uint64_t)v529, v290[28], (uint64_t)v535, *(float *)&v514, v278, v279, v280);
                }
                v304 = v292;
                v159 = 0.5;
                if (v291 || v553.imagp != v544)
                {
                  v305 = 0;
                }
                else
                {
                  v305 = memcmp(imagp, v545, (size_t)v553.imagp) == 0;
                  v306 = *(float *)v555;
                  if (*(float *)v555 <= v546)
                    v306 = v546;
                  v546 = v306;
                  if (v305)
                  {
LABEL_397:
                    if (v291 || v305)
                    {
                      v237 = Mutable;
                    }
                    else
                    {
                      v237 = Mutable;
                      if (!v304 && v553.imagp == (float *)*((_QWORD *)&v535[0] + 1) && *((_QWORD *)&v535[0] + 1))
                      {
                        v308 = memcmp(*(const void **)&v535[1], imagp, (size_t)v553.imagp);
                        sub_1D3E36E84((uint64_t)v535, (uint64_t)&v543);
                        v331 = v308 == 0;
                        v237 = Mutable;
                        v305 = v331;
                        v309 = *(float *)v555;
                        if (*(float *)v555 <= *((float *)&v535[1] + 2))
                          v309 = *((float *)&v535[1] + 2);
                        v546 = v309;
                      }
                    }
                    sub_1D3E36E54((uint64_t)&v553);
                    sub_1D3E36E54((uint64_t)v535);
                    if (!v305)
                      goto LABEL_438;
                    v310 = (double *)operator new(0x40uLL);
                    v311 = *(float *)&v512 * 0.5;
                    v312 = *(float *)&v513;
                    v313 = (float)(*(float *)&v501 - (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v513));
                    v314 = (float)(*(float *)&v507 + (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v510));
                    v315 = (float)(*(float *)&v501 + (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v513));
                    v316 = (float)(*(float *)&v502 + (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v510));
                    v317 = *(float *)&v511;
                    v318 = (float)(*(float *)&v511 + (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v513));
                    v319 = (float)(*(float *)&v502 - (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v510));
                    v532 = (char *)(v310 + 8);
                    *v310 = (float)(*(float *)&v507 - (float)((float)(*(float *)&v512 * 0.5) * *(float *)&v510));
                    v310[1] = v313;
                    v310[2] = v314;
                    v310[3] = v315;
                    v310[4] = v316;
                    v310[5] = v318;
                    v310[6] = v319;
                    v310[7] = (float)(v317 - (float)(v311 * v312));
                    v530 = (uint64_t)v310;
                    v531 = v310 + 8;
                    sub_1D3E330B0(&v515, (unsigned int *)&v543, (uint64_t)&v530, 0.0);
                    operator delete(v310);
                    *(float *)&v530 = v546;
                    v320 = CFNumberCreate(v504, kCFNumberFloat32Type, &v530);
                    v321 = v320;
                    if (Mutable && v320)
                    {
                      CFDictionarySetValue(Mutable, CFSTR("Score"), v320);
                    }
                    else if (!v320)
                    {
LABEL_415:
                      v323 = (unint64_t *)v256[1];
                      v322 = v256[2];
                      if ((unint64_t)v323 >= v322)
                      {
                        v326 = ((uint64_t)v323 - *v256) >> 3;
                        if ((unint64_t)(v326 + 1) >> 61)
                          sub_1D3D6D4F8();
                        v327 = v322 - *v256;
                        v328 = v327 >> 2;
                        if (v327 >> 2 <= (unint64_t)(v326 + 1))
                          v328 = v326 + 1;
                        if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF8)
                          v329 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v329 = v328;
                        v534 = v461;
                        if (v329)
                          v329 = (unint64_t)sub_1D3D6D8A0(v329);
                        else
                          v330 = 0;
                        v530 = v329;
                        v531 = (_DWORD *)(v329 + 8 * v326);
                        v532 = (char *)v531;
                        v533 = v329 + 8 * v330;
                        do
                          v332 = __ldaxr(&v515);
                        while (__stlxr(0, &v515));
                        *(_QWORD *)(v329 + 8 * v326) = v332;
                        v532 += 8;
                        sub_1D3DB37F8(v256, &v530);
                        v325 = (_QWORD *)v256[1];
                        sub_1D3D75F10((uint64_t)&v530);
                      }
                      else
                      {
                        do
                          v324 = __ldaxr(&v515);
                        while (__stlxr(0, &v515));
                        *v323 = v324;
                        v325 = v323 + 1;
                        v256[1] = (uint64_t)v325;
                      }
                      v256[1] = (uint64_t)v325;
                      sub_1D3D74F14(&v515);
                      v237 = Mutable;
LABEL_438:
                      *(float *)&v173 = 0.0;
                      *(float *)&v502 = 0.0;
                      goto LABEL_439;
                    }
                    CFRelease(v321);
                    goto LABEL_415;
                  }
                }
                if (!v304 && *((float **)&v535[0] + 1) == v544)
                {
                  v305 = memcmp(*(const void **)&v535[1], v545, *((size_t *)&v535[0] + 1)) == 0;
                  v307 = *((float *)&v535[1] + 2);
                  if (*((float *)&v535[1] + 2) <= v546)
                    v307 = v546;
                  v546 = v307;
                }
                goto LABEL_397;
              }
              goto LABEL_373;
            }
            v293 = v476;
            v294 = &v479[104 * v476];
            *((_QWORD *)v294 + 12) = 0;
            *((_QWORD *)v294 + 1) = 0;
            *((_QWORD *)v294 + 2) = 0;
            *(_QWORD *)v294 = 0;
            *((_DWORD *)v294 + 6) = 0;
            *((_QWORD *)v294 + 9) = 0;
            *((_QWORD *)v294 + 10) = 0;
            v294[88] = 0;
            v295 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
            *((_QWORD *)v294 + 8) = v295;
            *(_OWORD *)(v294 + 28) = 0u;
            *(_OWORD *)(v294 + 44) = 0u;
            *((_QWORD *)v295 + 8) = 0;
            *((_DWORD *)v295 + 18) = 0;
            *((_QWORD *)v295 + 10) = 0;
            *(_OWORD *)(v295 + 44) = 0u;
            *((_OWORD *)v295 + 1) = 0u;
            *((_OWORD *)v295 + 2) = 0u;
            *(_OWORD *)v295 = 0u;
            v296 = &v480[88 * v293];
            *((_OWORD *)v296 + 3) = 0u;
            *((_OWORD *)v296 + 4) = 0u;
            *((_OWORD *)v296 + 1) = 0u;
            *((_OWORD *)v296 + 2) = 0u;
            *(_OWORD *)v296 = 0u;
            v297 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
            *((_QWORD *)v296 + 10) = v297;
            *((_QWORD *)v297 + 8) = 0;
            *((_DWORD *)v297 + 18) = 0;
            *((_QWORD *)v297 + 10) = 0;
            *(_OWORD *)(v297 + 44) = 0u;
            *((_OWORD *)v297 + 1) = 0u;
            *((_OWORD *)v297 + 2) = 0u;
            *(_OWORD *)v297 = 0u;
            v298 = (uint64_t)v294;
            v237 = Mutable;
            sub_1D3E36E84((uint64_t)&v543, v298);
            sub_1D3E36F98((uint64_t)&v516, (uint64_t)v296);
            *(_DWORD *)&v475[4 * v293] = v155;
            v476 = v293 + 1;
LABEL_439:
            sub_1D3E36F54((uint64_t)&v516);
            sub_1D3E36E54((uint64_t)&v543);
            if (++v506 >= v524)
              goto LABEL_506;
          }
          CFDictionarySetValue(v237, CFSTR("ProfileCropLeft"), v251);
LABEL_345:
          CFRelease(v252);
          goto LABEL_346;
        }
        *(float *)&v173 = 0.0;
        goto LABEL_506;
      }
      v173 = 18;
LABEL_506:
      sub_1D3E36C24((void **)&v522);
      sub_1D3E36C24((void **)&v523);
      v158 = v502;
LABEL_507:
      if (*(float *)&v173 != 0.0 && v470)
      {
        LODWORD(v553.realp) = 0;
        *((float *)&v553.realp + 1) = (float)SLODWORD(v541[1]) + -1.0;
        v394 = *(float *)v481;
        v395 = *v477 + 1.5708;
        sub_1D3E511F8(v497, v498, v478, 2u, (float *)&v553, (float *)&v543, (float *)v535);
        v396 = *(float *)&v543;
        v397 = __sincosf_stret(v395);
        v398 = *((float *)&v543 + 1);
        v399 = *(_QWORD *)&v535[0];
        v400 = CFArrayCreateMutable(v504, 4, MEMORY[0x1E0C9B378]);
        v401 = v394 * v159;
        v566.x = (float)(v396 + (float)(v401 * v397.__cosval));
        v566.y = (float)(*(float *)&v399 + (float)(v401 * v397.__sinval));
        DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v566);
        CFArrayAppendValue(v400, DictionaryRepresentation);
        CFRelease(DictionaryRepresentation);
        v567.x = (float)(v398 + (float)(v401 * v397.__cosval));
        v567.y = (float)(*((float *)&v399 + 1) + (float)(v401 * v397.__sinval));
        v403 = CGPointCreateDictionaryRepresentation(v567);
        CFArrayAppendValue(v400, v403);
        CFRelease(v403);
        v568.x = (float)(v398 - (float)(v401 * v397.__cosval));
        v568.y = (float)(*((float *)&v399 + 1) - (float)(v401 * v397.__sinval));
        v404 = CGPointCreateDictionaryRepresentation(v568);
        CFArrayAppendValue(v400, v404);
        CFRelease(v404);
        v569.x = (float)(v396 - (float)(v401 * v397.__cosval));
        v569.y = (float)(*(float *)&v399 - (float)(v401 * v397.__sinval));
        v405 = CGPointCreateDictionaryRepresentation(v569);
        CFArrayAppendValue(v400, v405);
        CFRelease(v405);
        CFArrayAppendValue(v470, v400);
        CFRelease(v400);
      }
      sub_1D3E36F54((uint64_t)v541);
      if (v471 > 0.0 && v155 >= v464 && ((v155 & 1) == 0) == v462)
        v465 = CFAbsoluteTimeGetCurrent();
      if (++v155 == v467)
        goto LABEL_515;
    }
    if (Mutable)
    {
      v174 = vcvt_s32_f32(*(float32x2_t *)(v472 + 36));
      v175 = vcvt_s32_f32(*(float32x2_t *)(v472 + 44));
      v176 = vmin_s32(v174, v175);
      v177 = vabd_s32(v174, v175);
      v178 = v176.i32[1];
      v179 = v176.i32[0];
      if (v176.i32[0] <= 25)
        v180 = 25;
      else
        v180 = v176.i32[0];
      v181 = (v180 - 25);
      v182 = vceqz_s32(v177);
      if (v178 <= 25)
        v183 = 25;
      else
        v183 = v178;
      v184 = v497 - v181;
      if (v497 - v181 >= 0x33)
        v184 = 51;
      v185 = vaba_s32((int32x2_t)0x100000001, v174, v175);
      v186 = (v183 - 25);
      if ((v182.i8[0] & 1) != 0)
        v179 = v181;
      v187 = (double)v179;
      v188 = v185.i32[0];
      if ((v182.i8[0] & 1) != 0)
        v188 = v184;
      v189 = v498 - v186;
      if (v498 - v186 >= 0x33)
        v189 = 51;
      if ((v182.i8[4] & 1) != 0)
        v178 = v183 - 25;
      v190 = (double)v178;
      v192 = v185.i32[1];
      if ((v182.i8[4] & 1) != 0)
        v192 = v189;
      v193 = (double)v192;
      v577.origin.x = 0.0;
      v577.origin.y = 0.0;
      v577.size.height = v473;
      v577.size.width = v474;
      v191 = (double)v188;
      v574 = CGRectIntersection(*(CGRect *)&v187, v577);
      v194 = v574.origin.x;
      v195 = v574.origin.y;
      v196 = v574.size.width;
      v197 = v574.size.height;
      DeviceGray = CGColorSpaceCreateDeviceGray();
      v199 = CFDataCreate(0, v486, v460);
      v200 = CGDataProviderCreateWithCFData(v199);
      CFRelease(v199);
      v201 = CGImageCreate(v497, v498, 8uLL, 8uLL, v487, DeviceGray, 0, v200, 0, 0, kCGRenderingIntentDefault);
      CGDataProviderRelease(v200);
      v575.origin.x = v194;
      v575.origin.y = v195;
      v575.size.width = v196;
      v575.size.height = v197;
      v202 = CGImageCreateWithImageInRect(v201, v575);
      if (v202)
      {
        v203 = CFDataCreateMutable(v504, 0);
        v204 = CGImageDestinationCreateWithData(v203, CFSTR("public.tiff"), 1uLL, 0);
        v205 = v204;
        if (v204)
        {
          CGImageDestinationAddImage(v204, v202, 0);
          CGImageDestinationFinalize(v205);
          CFRelease(v205);
        }
        else
        {
          CFRelease(v203);
          v203 = 0;
        }
        CGImageRelease(v202);
      }
      else
      {
        v203 = 0;
      }
      CGColorSpaceRelease(DeviceGray);
      CGImageRelease(v201);
      if (v203)
      {
        CFDictionarySetValue(Mutable, CFSTR("CroppedImage"), v203);
        CFRelease(v203);
        v171 = (int)v541[1];
      }
    }
    v206 = Mutable != 0;
    v172 = v541[0];
    v207 = CFDataCreate(v504, (const UInt8 *)v541[0], 4 * v171);
    v208 = v207;
    if (v207)
      v209 = v206;
    else
      v209 = 0;
    if (v209)
    {
      CFDictionarySetValue(Mutable, CFSTR("Profile"), v207);
    }
    else if (!v207)
    {
      goto LABEL_294;
    }
    CFRelease(v208);
LABEL_294:
    v525 = 0;
    v210 = 1.0;
    if (v171 < 2)
      goto LABEL_315;
    goto LABEL_295;
  }
  v560 = 0;
  imagp = 0;
  v553.realp = 0;
  v553.imagp = 0;
  *(_DWORD *)v555 = 0;
  v558[1] = 0;
  v558[0] = 0;
  v559 = 0;
  v54 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
  v557 = (float *)v54;
  *(_OWORD *)&v555[4] = 0u;
  v556 = 0u;
  *((_QWORD *)v54 + 8) = 0;
  *((_DWORD *)v54 + 18) = 0;
  *((_QWORD *)v54 + 10) = 0;
  *(_OWORD *)v54 = 0u;
  *((_OWORD *)v54 + 1) = 0u;
  *((_OWORD *)v54 + 2) = 0u;
  *(_OWORD *)(v54 + 44) = 0u;
  v54[30] = v500;
  v54[29] = v499;
  if (dword_1EDB89DD8 <= 0)
  {
    *((_DWORD *)v54 + 5) = 0x7FFFFFFF;
    v531 = 0;
    v530 = 0;
    v532 = 0;
    LOBYTE(v516) = 0;
    LOBYTE(v518) = 0;
    *(double *)&v59 = v509;
    v58 = v510;
    v60 = v508;
    v61 = *(float *)&v489;
  }
  else
  {
    v55 = 0;
    v56 = 0x7FFFFFFF;
    v57 = &dword_1EDB895E8;
    *(double *)&v59 = v509;
    v58 = v510;
    v60 = v508;
    v61 = *(float *)&v489;
    do
    {
      if (((v27 >> v55) & 1) != 0 && v56 >= *v57)
        v56 = *v57;
      ++v55;
      v57 += 16;
    }
    while (dword_1EDB89DD8 != v55);
    *((_DWORD *)v54 + 5) = v56;
    v531 = 0;
    v530 = 0;
    v532 = 0;
    LOBYTE(v516) = 0;
    LOBYTE(v518) = 0;
  }
  v62 = 0;
  v509 = COERCE_DOUBLE(&v555[4]);
  v63 = v60;
  LODWORD(v514) = llroundf(v63);
  v64 = *(double *)&v59;
  LODWORD(v513) = llroundf(v64);
  v65 = v60 + v58;
  LODWORD(v512) = llroundf(v65);
  v66 = *(double *)&v59 + height;
  LODWORD(v510) = llroundf(v66);
  do
  {
    v536 = 0u;
    memset(v535, 0, sizeof(v535));
    v67 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
    v537 = v67;
    *((_QWORD *)v67 + 8) = 0;
    *((_DWORD *)v67 + 18) = 0;
    *((_QWORD *)v67 + 10) = 0;
    *(_OWORD *)(v67 + 44) = 0u;
    *((_OWORD *)v67 + 1) = 0u;
    *((_OWORD *)v67 + 2) = 0u;
    *(_OWORD *)v67 = 0u;
    v68 = sub_1D3E51850((uint64_t)v486, v497, v498, v487, (float **)v535, (float *)v541, (float)*(int *)&v485[56 * v62 + 32], (float)*(int *)&v485[56 * v62 + 36], *(float *)&v485[56 * v62 + 44], *(float *)&v485[56 * v62 + 40], *(float *)&v485[56 * v62 + 48]);
    v69 = 0;
    DWORD2(v535[0]) = v68;
    if (v68 >= 22)
    {
      HIDWORD(v535[0]) = 0;
      LODWORD(v535[1]) = v68 - 1;
      v552 = 0;
      v545 = 0;
      v543 = 0;
      v544 = 0;
      v546 = 0.0;
      v550[0] = 0;
      v550[1] = 0;
      v551 = 0;
      v70 = (char *)malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
      v549 = (int *)v70;
      v547 = 0u;
      v548 = 0u;
      *((_QWORD *)v70 + 8) = 0;
      *((_DWORD *)v70 + 18) = 0;
      *((_QWORD *)v70 + 10) = 0;
      *(_OWORD *)v70 = 0u;
      *((_OWORD *)v70 + 1) = 0u;
      *((_OWORD *)v70 + 2) = 0u;
      *(_OWORD *)(v70 + 44) = 0u;
      v71 = v549;
      *((_BYTE *)v549 + 30) = v500;
      *((_BYTE *)v71 + 29) = v499;
      if (dword_1EDB89DD8 < 1)
      {
        v73 = 0x7FFFFFFF;
      }
      else
      {
        v72 = 0;
        v73 = 0x7FFFFFFF;
        v74 = &dword_1EDB895E8;
        do
        {
          if (((v27 >> v72) & 1) != 0 && v73 >= *v74)
            v73 = *v74;
          ++v72;
          v74 += 16;
        }
        while (dword_1EDB89DD8 != v72);
      }
      v71[5] = v73;
      v75 = v27;
      v76 = v518;
      *((_BYTE *)v71 + 31) = v518;
      v552 = &v530;
      v77 = sub_1D3E3BE98((uint64_t)v535, (uint64_t)&v543, v75);
      v78 = v543;
      if (v76)
      {
        v79 = v485;
      }
      else
      {
        v79 = v485;
        if ((_DWORD)v543 == 16)
        {
          if (*((_BYTE *)v549 + 31))
          {
            v516 = 0u;
            v517 = 0u;
            LOBYTE(v518) = 1;
            v80 = sub_1D3E32F14(v497, v498, (float *)v541, (int *)&v516, *((float *)&v535[1] + 1), *((float *)&v535[1] + 2));
            v79 = v485;
            if ((_BYTE)v518)
              v81 = v80;
            else
              v81 = 1;
            if (v81)
              v76 = v518;
            else
              v76 = 0;
            LOBYTE(v518) = v76;
          }
          else
          {
            v76 = 0;
          }
        }
      }
      if (v77 == 1)
      {
        if ((v78 - 13) <= 1)
        {
          *(_QWORD *)&v547 = __PAIR64__(v513, v514);
          *((_QWORD *)&v548 + 1) = __PAIR64__(v513, v512);
          *(_QWORD *)&v548 = __PAIR64__(LODWORD(v510), v512);
          *((_QWORD *)&v547 + 1) = __PAIR64__(LODWORD(v510), v514);
          v84 = *(unsigned int (**)(_OWORD *, double **, char *, _QWORD *))&dword_1EDB895D0[16 * v78 + 14];
          v27 = v505;
          if (!v84)
          {
            v69 = 0;
            a1 = v496;
            goto LABEL_76;
          }
          a1 = v496;
          if (!v84(v535, &v543, &v79[56 * v62], v529))
          {
            sub_1D3E36E84((uint64_t)&v543, (uint64_t)&v553);
            v69 = 1;
            goto LABEL_76;
          }
          goto LABEL_72;
        }
      }
      else if (!v77)
      {
        if (imagp)
        {
          v82 = v544;
          v83 = v553.imagp;
          if (v544 == v553.imagp && !memcmp(v545, imagp, (size_t)v544))
          {
            a1 = v496;
            if (v76)
            {
              v85 = v517;
              v86 = *(int **)&v509;
              **(_OWORD **)&v509 = v516;
              *((_OWORD *)v86 + 1) = v85;
              v69 = 1;
            }
            else
            {
              v69 = sub_1D3E32F14(v497, v498, (float *)v541, *(int **)&v509, *((float *)&v535[1] + 1), *((float *)&v535[1] + 2));
            }
            goto LABEL_75;
          }
          if (v82 >= v83)
          {
            a1 = v496;
            v27 = v505;
            if (v546 >= *(float *)v555)
              sub_1D3E36E84((uint64_t)&v543, (uint64_t)&v553);
LABEL_72:
            v69 = 0;
LABEL_76:
            sub_1D3E36E54((uint64_t)&v543);
            goto LABEL_77;
          }
        }
        else
        {
          sub_1D3E36E84((uint64_t)&v543, (uint64_t)&v553);
        }
      }
      v69 = 0;
      a1 = v496;
LABEL_75:
      v27 = v505;
      goto LABEL_76;
    }
LABEL_77:
    sub_1D3E36F54((uint64_t)v535);
    ++v62;
  }
  while (v62 < v527 && !v69);
  a8 = v491;
  if (v530 && v531)
    ((void (*)(void))v531)();
  v87 = Mutable;
  if (v69)
  {
    v88 = 0;
    v544 = 0;
    v543 = 0;
    v545 = 0;
    if ((LODWORD(v553.realp) - 15) <= 0xFFFFFFFD)
    {
      v89 = *(_DWORD *)&v555[4];
      v90 = *(_DWORD *)&v555[8];
      v91 = v556;
      v92 = DWORD1(v556);
      sub_1D3E32FB0((char **)&v543);
      v93 = (double)v90;
      v88 = (char *)v543;
      sub_1D3E4E6C0(v543, v511, v52, v51, v18, v61, (double)v89, v93, v94, (double)v91, (double)v92);
      v87 = Mutable;
    }
    sub_1D3E330B0((unint64_t *)v535, (unsigned int *)&v553, (uint64_t)&v543, v61);
    sub_1D3E2BA8C(v491, (unint64_t *)v535);
    v528 = 1.0;
    sub_1D3D74F14((unint64_t *)v535);
    if (v88)
      operator delete(v88);
    *(float *)&v502 = 0.0;
  }
  else
  {
    v502 = 19;
  }
  sub_1D3E36E54((uint64_t)&v553);
  v95 = 0;
  v35 = v485;
LABEL_555:
  if (v35)
    free(v35);
  if (v95)
  {
    v449 = (void *)atomic_load((unint64_t *)a8 + 3);
    if (v449)
      v449 = (void *)CFRetain(v449);
    v553.realp = (float *)v449;
    v450 = (__CFDictionary *)atomic_load((unint64_t *)&v553);
    CFDictionarySetValue(v450, CFSTR("FrameFailedLocations"), v95);
    sub_1D3D740C8((unint64_t *)&v553);
    CFRelease(v95);
    v87 = Mutable;
  }
  if (v87)
  {
    v451 = (void *)atomic_load((unint64_t *)a8 + 3);
    if (v451)
      v451 = (void *)CFRetain(v451);
    v553.realp = (float *)v451;
    v452 = (__CFDictionary *)atomic_load((unint64_t *)&v553);
    v453 = Mutable;
    CFDictionarySetValue(v452, CFSTR("FrameDebugData"), Mutable);
    sub_1D3D740C8((unint64_t *)&v553);
    CFRelease(v453);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 50) && v528 >= 0.0)
  {
    v454 = (void *)atomic_load((unint64_t *)a8 + 3);
    if (v454)
      v454 = (void *)CFRetain(v454);
    v553.realp = (float *)v454;
    v455 = (__CFDictionary *)atomic_load((unint64_t *)&v553);
    v543 = (double *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &v528);
    v456 = (const void *)atomic_load((unint64_t *)&v543);
    CFDictionarySetValue(v455, CFSTR("FocusSharpness"), v456);
    sub_1D3D74100((unint64_t *)&v543);
    sub_1D3D740C8((unint64_t *)&v553);
  }
  return v502;
}

void sub_1D3E32E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 920);
  if (v3)
  {
    *(_QWORD *)(v1 + 928) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1D3E32F14(unint64_t a1, unint64_t a2, float *a3, int *a4, float a5, float a6)
{
  int v7;
  int v8;
  float v9;
  int v10;
  int v11;
  float v13[2];
  float v14[2];
  float v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15[0] = a5;
  v15[1] = a6;
  v7 = sub_1D3E511F8(a1, a2, a3, 2u, v15, v14, v13);
  if (v7)
  {
    v8 = (int)v14[0];
    v9 = v13[1];
    v10 = (int)v13[0];
    v11 = (int)v14[1];
    a4[2] = (int)v14[0];
    a4[3] = v10;
    *a4 = v8;
    a4[1] = v10;
    a4[6] = v11;
    a4[7] = (int)v9;
    a4[4] = v11;
    a4[5] = (int)v9;
  }
  return v7 != 0;
}

void sub_1D3E32FB0(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v2 = *a1;
  v3 = a1[1];
  v4 = v3 - *a1;
  if ((unint64_t)v4 > 0x3F)
  {
    if (v4 == 64)
      return;
    v18 = v2 + 64;
    goto LABEL_16;
  }
  v5 = 4 - (v4 >> 4);
  v6 = a1[2];
  if (v5 <= (v6 - v3) >> 4)
  {
    bzero(a1[1], 16 * v5);
    v18 = &v3[16 * v5];
LABEL_16:
    a1[1] = v18;
    return;
  }
  v7 = v4 >> 4;
  v8 = v6 - v2;
  v9 = v8 >> 3;
  if ((unint64_t)(v8 >> 3) <= 4)
    v9 = 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_1D3D6DB64(v10);
  v12 = &v11[16 * v7];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v5);
  v15 = &v12[16 * v5];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void *sub_1D3E330B0(unint64_t *a1, unsigned int *a2, uint64_t a3, float a4)
{
  void *result;
  const __CFAllocator *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const void *v54;
  const void *v55;
  unint64_t v56;
  void **v57;
  void *v58;
  uint64_t v59;
  int64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  float64x2_t v63;
  uint64_t v64;
  void *v65;
  float64x2_t *v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  result = sub_1D3DB36B4();
  *a1 = (unint64_t)result;
  if (!atomic_load(a1))
    return result;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = *a2;
  v12 = "";
  if ((v11 & 0x80000000) == 0 && dword_1EDB89DD8 > (int)v11)
    v12 = *(const char **)&dword_1EDB895D0[16 * v11 + 2];
  *(_QWORD *)&v68.f64[0] = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0x8000100u);
  v13 = atomic_load(a1);
  v14 = (unint64_t *)(v13 + 16);
  do
    v15 = __ldaxr((unint64_t *)&v68);
  while (__stlxr(0, (unint64_t *)&v68));
  do
    v16 = (const void *)__ldaxr(v14);
  while (__stlxr(v15, v14));
  if (v16)
    CFRelease(v16);
  sub_1D3D8C70C((unint64_t *)&v68);
  *(_QWORD *)&v68.f64[0] = CFDataCreate(v10, *((const UInt8 **)a2 + 2), *((_QWORD *)a2 + 1));
  v17 = atomic_load(a1);
  v18 = (unint64_t *)(v17 + 24);
  do
    v19 = __ldaxr((unint64_t *)&v68);
  while (__stlxr(0, (unint64_t *)&v68));
  do
    v20 = (const void *)__ldaxr(v18);
  while (__stlxr(v19, v18));
  if (v20)
    CFRelease(v20);
  sub_1D3DB386C((unint64_t *)&v68);
  v21 = a2[6];
  v22 = atomic_load(a1);
  *(_DWORD *)(v22 + 32) = v21;
  *(_BYTE *)(v22 + 36) = 1;
  LOWORD(v22) = *((unsigned __int8 *)a2 + 88);
  v23 = atomic_load(a1);
  *(_WORD *)(v23 + 104) = v22 | 0x100;
  v24 = *((_QWORD *)a2 + 9);
  v25 = atomic_load(a1);
  if (!*(_BYTE *)(v25 + 280))
    *(_BYTE *)(v25 + 280) = 1;
  *(_QWORD *)(v25 + 272) = v24;
  v26 = *(_QWORD *)(a2 + 7);
  v27.i64[0] = (int)v26;
  v27.i64[1] = SHIDWORD(v26);
  v28 = vcvtq_f64_s64(v27);
  v29 = *(_QWORD *)(a2 + 11);
  v27.i64[0] = (int)v29;
  v27.i64[1] = SHIDWORD(v29);
  v30 = vcvtq_f64_s64(v27);
  v31 = atomic_load(a1);
  if (!*(_BYTE *)(v31 + 264))
    *(_BYTE *)(v31 + 264) = 1;
  *(float64x2_t *)(v31 + 232) = v28;
  *(float64x2_t *)(v31 + 248) = v30;
  if (*a2 - 13 <= 1)
  {
    v32 = atomic_load(a1);
    *(_QWORD *)(v32 + 144) = 0;
    *(_QWORD *)(v32 + 152) = 0;
    *(_DWORD *)(v32 + 160) = 0;
    *(_BYTE *)(v32 + 164) = 1;
    v33 = atomic_load(a1);
    v34 = a2[20];
    if (!*(_BYTE *)(v33 + 148))
      *(_BYTE *)(v33 + 148) = 1;
    *(_DWORD *)(v33 + 144) = v34;
    v35 = atomic_load(a1);
    v36 = a2[21];
    if (!*(_BYTE *)(v35 + 156))
      *(_BYTE *)(v35 + 156) = 1;
    *(_DWORD *)(v35 + 152) = v36;
    v37 = *a2;
    if (*a2 == 13)
    {
      v38 = atomic_load(a1);
      *(_WORD *)(v38 + 160) = 256;
      if (a2[1] == 3)
      {
        v39 = atomic_load(a1);
        if (*(_BYTE *)(v39 + 208))
          sub_1D3DB386C((unint64_t *)(v39 + 200));
        *(_QWORD *)(v39 + 200) = 0;
        *(_OWORD *)(v39 + 168) = 0u;
        *(_OWORD *)(v39 + 184) = 0u;
        *(_BYTE *)(v39 + 208) = 1;
        v40 = atomic_load(a1);
        *(_BYTE *)(v40 + 168) = 1;
        v41 = atomic_load(a1);
        *(_QWORD *)(v41 + 176) = 5;
      }
      v37 = *a2;
    }
    if (v37 == 14 && a2[1])
    {
      v42 = atomic_load(a1);
      if (*(_BYTE *)(v42 + 208))
        sub_1D3DB386C((unint64_t *)(v42 + 200));
      *(_QWORD *)(v42 + 200) = 0;
      *(_OWORD *)(v42 + 168) = 0u;
      *(_OWORD *)(v42 + 184) = 0u;
      *(_BYTE *)(v42 + 208) = 1;
      v43 = atomic_load(a1);
      *(_BYTE *)(v43 + 168) = 1;
      v44 = a2[1];
      if (v44 == 1)
      {
        v45 = 3;
      }
      else
      {
        if (v44 != 2)
          goto LABEL_39;
        v45 = 4;
      }
      v46 = atomic_load(a1);
      *(_QWORD *)(v46 + 176) = v45;
    }
  }
LABEL_39:
  v47 = *a2;
  if (*a2 == 9 && *((_QWORD *)a2 + 1) >= 2uLL)
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 1) == 102)
    {
      v48 = atomic_load(a1);
      if (*(_BYTE *)(v48 + 208))
        sub_1D3DB386C((unint64_t *)(v48 + 200));
      *(_QWORD *)(v48 + 200) = 0;
      *(_OWORD *)(v48 + 168) = 0u;
      *(_OWORD *)(v48 + 184) = 0u;
      *(_BYTE *)(v48 + 208) = 1;
      v49 = atomic_load(a1);
      *(_BYTE *)(v49 + 168) = 1;
      if (a2[1] == 4)
      {
        v50 = atomic_load(a1);
        *(_QWORD *)(v50 + 176) = 2;
      }
    }
    v47 = *a2;
  }
  if (v47 == 16)
  {
    v51 = atomic_load(a1);
    if (*(_BYTE *)(v51 + 208))
      sub_1D3DB386C((unint64_t *)(v51 + 200));
    *(_QWORD *)(v51 + 200) = 0;
    *(_OWORD *)(v51 + 168) = 0u;
    *(_OWORD *)(v51 + 184) = 0u;
    *(_BYTE *)(v51 + 208) = 1;
    v52 = atomic_load(a1);
    *(_BYTE *)(v52 + 168) = 1;
    if (a2[1] == 4)
    {
      v53 = atomic_load(a1);
      *(_QWORD *)(v53 + 176) = 2;
    }
  }
  v54 = *(const void **)a3;
  v55 = *(const void **)(a3 + 8);
  v56 = atomic_load(a1);
  v57 = (void **)(v56 + 40);
  if (v54 == v55)
  {
    v59 = *(_QWORD *)(a2 + 7);
    v60.i64[0] = (int)v59;
    v60.i64[1] = SHIDWORD(v59);
    v61 = vcvtq_f64_s64(v60);
    v62 = *(_QWORD *)(a2 + 9);
    v60.i64[0] = (int)v62;
    v60.i64[1] = SHIDWORD(v62);
    v68 = v61;
    v69 = vcvtq_f64_s64(v60);
    v61.f64[0] = *(float64_t *)(a2 + 11);
    v60.i64[0] = SLODWORD(v61.f64[0]);
    v60.i64[1] = SHIDWORD(v61.f64[0]);
    v63 = vcvtq_f64_s64(v60);
    v64 = *(_QWORD *)(a2 + 13);
    v60.i64[0] = (int)v64;
    v60.i64[1] = SHIDWORD(v64);
    v70 = v63;
    v71 = vcvtq_f64_s64(v60);
    if (*(_BYTE *)(v56 + 64))
    {
      v65 = *v57;
      if (*v57)
      {
        *(_QWORD *)(v56 + 48) = v65;
        operator delete(v65);
      }
      *(_BYTE *)(v56 + 64) = 0;
    }
    *v57 = 0;
    *(_QWORD *)(v56 + 48) = 0;
    *(_QWORD *)(v56 + 56) = 0;
    result = sub_1D3DB38A4((_QWORD *)(v56 + 40), 4uLL);
    v66 = *(float64x2_t **)(v56 + 48);
    *v66 = v68;
    v66[1] = v69;
    v66[2] = v70;
    v66[3] = v71;
    *(_QWORD *)(v56 + 48) = v66 + 4;
  }
  else
  {
    if (*(_BYTE *)(v56 + 64))
    {
      v58 = *v57;
      if (*v57)
      {
        *(_QWORD *)(v56 + 48) = v58;
        operator delete(v58);
      }
      *(_BYTE *)(v56 + 64) = 0;
    }
    *v57 = 0;
    *(_QWORD *)(v56 + 48) = 0;
    *(_QWORD *)(v56 + 56) = 0;
    result = sub_1D3E2BBDC((_QWORD *)(v56 + 40), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  }
  *(_BYTE *)(v56 + 64) = 1;
  v67 = atomic_load(a1);
  *(float *)(v67 + 224) = a4;
  *(_BYTE *)(v67 + 228) = 1;
  return result;
}

void sub_1D3E33560(_Unwind_Exception *a1)
{
  unint64_t *v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 48) = v5;
    operator delete(v5);
  }
  sub_1D3D74F14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E335B4(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat Width;
  CGFloat Height;
  uint64_t v32;
  unint64_t v33;
  CGPoint *v34;
  uint64_t v40;
  __int128 *v41;
  CGRect *v42;
  uint64_t v43;
  void *v44;
  double v45;
  double v46;
  uint64_t v47;
  CGPoint *v48;
  uint64_t v49;
  CGFloat x;
  CGFloat v51;
  unint64_t v52;
  int64_t v53;
  double v54;
  CGFloat v55;
  double v56;
  double MaxY;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  double v64;
  __int128 v65;
  __int128 v66;
  unsigned int *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  int v73;
  int64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  __CVBuffer *v81;
  char *v82;
  CFTypeID v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unint64_t *v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  __n128 v109;
  unint64_t *v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  _QWORD *v125;
  unsigned int **v126;
  _QWORD *v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int **v158;
  unsigned int **v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  float v169;
  double a;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  uint64_t v176;
  float v177;
  float v178;
  unsigned int *v179;
  float v180;
  float v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int *v184;
  unint64_t v185;
  void **v186;
  void *v187;
  void **v188;
  void *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  float32x2_t v194;
  char *v195;
  double v196;
  double v197;
  unint64_t v198;
  double *v199;
  double *v200;
  double *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  double *v207;
  double *v208;
  float64x2_t v209;
  unint64_t v210;
  char *v211;
  _OWORD *f64;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  float64x2_t *v219;
  unint64_t v220;
  void **v221;
  void *v222;
  void **v223;
  void *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  float32x2_t v233;
  char *v234;
  double v235;
  double v236;
  double *v237;
  double *v238;
  int64_t v240;
  unint64_t v241;
  double *v242;
  double *v243;
  double *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  double *v250;
  double *v251;
  float64x2_t v252;
  unint64_t v253;
  char *v254;
  _OWORD *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  float64x2_t *v262;
  unint64_t v263;
  unsigned int *v264;
  unint64_t v265;
  __int16 v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int *v269;
  unsigned int *v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  __CFData *Mutable;
  __CFData *v275;
  UInt8 *MutableBytePtr;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  const void *v280;
  int v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  const void *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  const void *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  const void *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  const __CFString *v308;
  const __CFString *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  const __CFString *v317;
  const __CFString *v318;
  _BOOL4 v319;
  const __CFString *v320;
  uint64_t v321;
  uint64_t v322;
  int32x2_t v323;
  uint64_t v324;
  int32x2_t v325;
  double *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  double v330;
  unint64_t *v331;
  unint64_t v332;
  const void *v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int *v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int **p_p_buf;
  unsigned int *v354;
  int v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int *v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int v367;
  float64x2_t *v368;
  float64x2_t *v369;
  float64x2_t *v370;
  float64x2_t *v371;
  float64x2_t v372;
  int32x2_t v373;
  float64x2_t v374;
  int64_t v375;
  uint64_t v376;
  float64x2_t *v377;
  uint64_t v378;
  float64x2_t *v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  float64x2_t *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  float64x2_t *v387;
  char *v388;
  float64x2_t *v389;
  float64x2_t *v390;
  CGPoint v391;
  CGPoint v392;
  float64x2_t *v393;
  float64x2_t *v394;
  char *v395;
  uint64_t v396;
  float64x2_t *v397;
  float64x2_t v398;
  float64x2_t v399;
  uint64_t v400;
  float64x2_t *v401;
  char *v402;
  float64x2_t v403;
  char *v404;
  CGFloat v405;
  CGFloat v406;
  CGFloat v407;
  CGFloat v408;
  CGFloat v409;
  float64x2_t *v410;
  double *v411;
  unint64_t *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  size_t v430;
  CGPoint *v431;
  __CFArray *v432;
  const void *v433;
  CGAffineTransform *v434;
  __CFDictionary *v435;
  const void *v436;
  _QWORD *exception;
  CGFloat v439;
  CGFloat v440;
  CGFloat v441;
  CGFloat rect;
  _OWORD **rect_8;
  unint64_t rect_16;
  char *rect_24;
  unint64_t v448;
  _BOOL4 v449;
  float64x2_t *__p;
  double MaxX;
  int v452;
  CGFloat v453;
  char v454;
  float64x2_t *v456;
  _QWORD *v457;
  const __CFAllocator *allocator;
  int64_t v459;
  unsigned int *v460;
  float32x2_t v461;
  _QWORD *v462;
  float32x2_t v463;
  NSObject *oslog;
  CGFloat r1;
  char r1a;
  float32x2_t r1b;
  double v468;
  double v469;
  double v470;
  CGFloat y;
  float64x2_t v472;
  float64x2_t v473;
  float32x2_t v474;
  unsigned int *v475;
  __int128 v476;
  BOOL v477;
  unsigned int *v478;
  unsigned int *v479;
  __int128 v480;
  BOOL v481;
  unsigned int *v482;
  unsigned int *v483;
  unsigned int *v484;
  unsigned int *v485;
  __int128 v486;
  BOOL v487;
  unsigned int *v488;
  unsigned int *v489;
  CGAffineTransform *p_buf;
  int v491;
  unsigned int *v492;
  _BYTE v493[24];
  unsigned int **v494[3];
  uint64_t v495;
  unsigned int *v496;
  unsigned int *v497;
  unsigned int *v498;
  unsigned int *v499;
  unint64_t v500;
  unsigned int *v501;
  unsigned int *v502;
  unsigned int *v503;
  unsigned int *v504;
  unsigned int *v505;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v508;
  CGAffineTransform v509;
  __int128 v510;
  BOOL v511;
  unsigned int *v512;
  unsigned int *v513;
  void *__dst;
  float64x2_t *v515;
  uint64_t v516;
  uint64_t **v517;
  char v518;
  uint64_t (**v519)(_QWORD);
  int v520;
  unsigned int *v521;
  __int128 v522;
  _QWORD *v523;
  _OWORD *v524;
  unint64_t v525;
  unint64_t v526;
  unint64_t v527;
  unint64_t v528;
  _QWORD *v529;
  _QWORD v530[5];
  unsigned int *v531;
  CGAffineTransform buf;
  __int16 v533;
  CGFloat v534;
  __int16 v535;
  CGFloat v536;
  __int16 v537;
  CGFloat v538;
  __int16 v539;
  CGFloat v540;
  __int16 v541;
  CGFloat v542;
  __int16 v543;
  CGFloat v544;
  __int16 v545;
  CGFloat v546;
  uint64_t v547;
  CGRect v548;
  CGRect v549;
  CGRect v550;
  CGRect v551;
  CGRect v552;
  CGRect v553;
  CGRect v554;
  CGRect v555;
  CGRect v556;
  CGRect v557;
  CGRect v558;
  CGRect v559;
  CGRect v560;
  CGRect v561;
  CGRect v562;
  CGRect v563;

  v547 = *MEMORY[0x1E0C80C00];
  v11 = *(uint64_t *)(a1[1] + 56) >= 196608 && *(_BYTE *)(a4 + 8) != 0;
  v449 = v11;
  v515 = 0;
  __dst = 0;
  v516 = 0;
  v12 = operator new();
  v13 = MEMORY[0x1E0C9BAA8];
  v14 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(v12 + 24) = *MEMORY[0x1E0C9BAA8];
  *(_QWORD *)v12 = &off_1E95AEDF8;
  *(_QWORD *)(v12 + 16) = &__dst;
  *(_DWORD *)(v12 + 8) = 0;
  v15 = (unsigned int *)(v12 + 8);
  *(_OWORD *)(v12 + 40) = v14;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 32);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v513 = (unsigned int *)v12;
  v510 = xmmword_1D3E82190;
  v511 = 0;
  v512 = 0;
  LODWORD(v510) = 0x80000000;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  do
    v18 = __ldxr(v15);
  while (__stxr(v18 + 1, v15));
  *(_QWORD *)&buf.a = v12;
  v512 = (unsigned int *)v12;
  sub_1D3D7FBF4((unsigned int **)&buf);
  v19 = a1[1];
  v20 = *(_DWORD *)(v19 + 16);
  if (v20 == 1751738216)
    v21 = 20;
  else
    v21 = 30;
  if (v20 == 1819244288)
    v22 = 10;
  else
    v22 = v21;
  DWORD1(v510) = v22;
  *((_QWORD *)&v510 + 1) = *(_QWORD *)(v19 + 20);
  v511 = v449;
  LODWORD(buf.a) = 1;
  BYTE4(buf.a) = 1;
  if (sub_1D3DDC428((unint64_t *)v19, CFSTR("Aztec"), (uint64_t)&buf))
    LODWORD(v510) = v510 | 0x400;
  LODWORD(buf.a) = 1;
  BYTE4(buf.a) = 1;
  if (sub_1D3DDC428((unint64_t *)v19, CFSTR("QR"), (uint64_t)&buf))
    LODWORD(v510) = v510 | 2;
  LODWORD(buf.a) = 1;
  BYTE4(buf.a) = 1;
  if (sub_1D3DDC428((unint64_t *)v19, CFSTR("MicroQR"), (uint64_t)&buf))
    LODWORD(v510) = v510 | 0x800;
  if (v449)
  {
    v23 = sub_1D3D8F9B0(*(_QWORD *)a4, 0.1);
    v5 = v24;
    v6 = v25;
    v7 = v26;
    if (qword_1EDB89E30 != -1)
      dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
    v27 = qword_1EDB89E38;
    if (os_log_type_enabled((os_log_t)qword_1EDB89E38, OS_LOG_TYPE_DEBUG))
    {
      v548.origin.x = v23;
      v548.origin.y = v5;
      v548.size.width = v6;
      v548.size.height = v7;
      MinX = CGRectGetMinX(v548);
      v549.origin.x = v23;
      v549.origin.y = v5;
      v549.size.width = v6;
      v549.size.height = v7;
      MinY = CGRectGetMinY(v549);
      v550.origin.x = v23;
      v550.origin.y = v5;
      v550.size.width = v6;
      v550.size.height = v7;
      Width = CGRectGetWidth(v550);
      v551.origin.x = v23;
      v551.origin.y = v5;
      v551.size.width = v6;
      v551.size.height = v7;
      Height = CGRectGetHeight(v551);
      LODWORD(buf.a) = 134349824;
      *(CGFloat *)((char *)&buf.a + 4) = MinX;
      WORD2(buf.b) = 2050;
      *(CGFloat *)((char *)&buf.b + 6) = MinY;
      HIWORD(buf.c) = 2050;
      buf.d = Width;
      LOWORD(buf.tx) = 2050;
      *(CGFloat *)((char *)&buf.tx + 2) = Height;
      _os_log_debug_impl(&dword_1D3D6B000, v27, OS_LOG_TYPE_DEBUG, "ACBSSearchFor2DBarcodes: Detected(in detector model input buffer coordinate space) bbox={minX=%{public}f, minY=%{public}f, width=%{public}f, height=%{public}f}", (uint8_t *)&buf, 0x2Au);
    }
  }
  else
  {
    v23 = 0.0;
  }
  v32 = a3[1] - *a3;
  if (v32 < -215)
  {
    v454 = 0;
    v410 = 0;
    goto LABEL_554;
  }
  v33 = 0x84BDA12F684BDA13 * (v32 >> 3);
  rect = v23;
  rect_8 = (_OWORD **)a4;
  if (qword_1EDB89E30 != -1)
    dispatch_once(&qword_1EDB89E30, &unk_1E95B32A8);
  __p = 0;
  v34 = 0;
  v454 = 0;
  oslog = qword_1EDB89E38;
  rect_24 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v462 = a5;
  v457 = a5 + 2;
  __asm { FMOV            V0.2S, #4.0 }
  v463 = _D0;
  __asm { FMOV            V0.2S, #5.0 }
  v461 = _D0;
  v469 = v6;
  v470 = v5;
  v468 = v7;
  while (1)
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.a) = 134349056;
      *(_QWORD *)((char *)&buf.a + 4) = v33 + 1;
      _os_log_debug_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_DEBUG, "----- pyramid level: %{public}zd -----", (uint8_t *)&buf, 0xCu);
    }
    v456 = (float64x2_t *)v34;
    v448 = v33;
    if (v33)
    {
      v40 = *a3 + 216 * v33;
      v41 = (__int128 *)(v40 - 48);
      v42 = (CGRect *)(v40 - 160);
      v43 = v40 - 208;
    }
    else
    {
      v42 = (CGRect *)(a2 + 16);
      v43 = *(_QWORD *)a2;
      v41 = (__int128 *)MEMORY[0x1E0C9BAA8];
    }
    v44 = sub_1D3DE7F08((unint64_t *)v43);
    v45 = CGRectGetWidth(*(CGRect *)(v43 + 8));
    v46 = CGRectGetHeight(*(CGRect *)(v43 + 8));
    v47 = *(_QWORD *)(v43 + 40);
    if (!CGRectIsEmpty(*v42) && !CGRectIsInfinite(*v42) && !CGRectIsNull(*v42))
      break;
    v48 = (CGPoint *)v456;
    v49 = v448;
LABEL_43:
    v33 = v49 - 1;
    v34 = v48;
    if (v49 <= 0)
      goto LABEL_524;
  }
  x = v42->origin.x;
  y = v42->origin.y;
  v51 = v42->size.width;
  r1 = v42->size.height;
  if (v449)
  {
    memset(&buf, 0, sizeof(buf));
    if (v448)
      v52 = v448 - 1;
    else
      v52 = rect_16 & 0xFFFFFFFFFFFFFF00;
    rect_16 = v52;
    sub_1D3D8F8B8(&buf, *rect_8, *(_QWORD *)a2, *(uint64_t **)(a2 + 56), a3, 1, v52, v448 != 0);
    v509 = buf;
    v552.origin.x = rect;
    v552.origin.y = v5;
    v552.size.width = v6;
    v552.size.height = v7;
    v563 = CGRectApplyAffineTransform(v552, &v509);
    v553.origin.x = x;
    v553.origin.y = y;
    v553.size.width = v51;
    v553.size.height = r1;
    v554 = CGRectIntersection(v553, v563);
    y = v554.origin.y;
    r1 = v554.size.height;
    x = v554.origin.x;
    v51 = v554.size.width;
  }
  v459 = (unint64_t)v45;
  v53 = (unint64_t)v46;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
  {
    v405 = v51;
    v406 = CGRectGetMinX(*v42);
    v453 = CGRectGetMinY(*v42);
    v441 = CGRectGetWidth(*v42);
    v440 = CGRectGetHeight(*v42);
    v559.origin.x = x;
    v559.origin.y = y;
    v559.size.width = v51;
    v559.size.height = r1;
    v439 = CGRectGetMinX(v559);
    v560.origin.x = x;
    v560.origin.y = y;
    v560.size.width = v51;
    v560.size.height = r1;
    v407 = CGRectGetMinY(v560);
    v561.origin.x = x;
    v561.origin.y = y;
    v561.size.width = v51;
    v561.size.height = r1;
    v408 = CGRectGetWidth(v561);
    v562.origin.x = x;
    v562.origin.y = y;
    v562.size.width = v405;
    v562.size.height = r1;
    v409 = CGRectGetHeight(v562);
    LODWORD(buf.a) = 67243008;
    HIDWORD(buf.a) = v448 == 0;
    LOWORD(buf.b) = 2050;
    *(_QWORD *)((char *)&buf.b + 2) = v448 - 1;
    WORD1(buf.c) = 2050;
    *(_QWORD *)((char *)&buf.c + 4) = v459;
    WORD2(buf.d) = 2050;
    *(_QWORD *)((char *)&buf.d + 6) = v53;
    HIWORD(buf.tx) = 2050;
    buf.ty = v406;
    v533 = 2050;
    v534 = v453;
    v535 = 2050;
    v536 = v441;
    v537 = 2050;
    v538 = v440;
    v539 = 2050;
    v540 = v439;
    v541 = 2050;
    v542 = v407;
    v543 = 2050;
    v544 = v408;
    v545 = 2050;
    v546 = v409;
    _os_log_debug_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_DEBUG, "ACBSSearchFor2DBarcodes: isMaster=%{public, BOOL}d, pyramidLevelIndex=%{public}zd, pixelBufferWidth=%{public}zu, pixelBufferHeight=%{public}zu, regionOfInterest={minX=%{public}f, minY=%{public}f, width=%{public}f, height=%{public}f}, effectiveRegionOfInterest={minX=%{public}f, minY=%{public}f, width=%{public}f, height=%{public}f}", (uint8_t *)&buf, 0x76u);
    v51 = v405;
  }
  v555.origin.x = x;
  v555.origin.y = y;
  v555.size.width = v51;
  v555.size.height = r1;
  v54 = CGRectGetMinX(v555);
  v556.origin.x = x;
  v556.origin.y = y;
  v556.size.width = v51;
  v556.size.height = r1;
  MaxX = CGRectGetMaxX(v556);
  v557.origin.x = x;
  v557.origin.y = y;
  v557.size.width = v51;
  v557.size.height = r1;
  v55 = CGRectGetMinY(v557);
  v558.size.width = v51;
  v56 = v55;
  v558.origin.x = x;
  v558.origin.y = y;
  v558.size.height = r1;
  MaxY = CGRectGetMaxY(v558);
  v58 = vcvtmd_s64_f64(v54);
  v59 = vcvtmd_s64_f64(v56);
  v60 = ((_BYTE)v58 + (_BYTE)v44) & 0xF;
  if ((v47 & 0xF) != 0)
    v60 = 0;
  v61 = (v58 - v60) & ~((uint64_t)(v58 - v60) >> 63);
  v62 = v44;
  v63 = v59 & ~(v59 >> 63);
  memset(&v508, 0, sizeof(v508));
  v64 = (double)v61;
  CGAffineTransformMakeTranslation(&t1, (double)v61, (double)v63);
  v65 = *v41;
  v66 = v41[2];
  *(_OWORD *)&t2.c = v41[1];
  *(_OWORD *)&t2.tx = v66;
  *(_OWORD *)&t2.a = v65;
  CGAffineTransformConcat(&v508, &t1, &t2);
  v67 = v513;
  v69 = *(_OWORD *)&v508.c;
  v68 = *(_OWORD *)&v508.tx;
  *(_OWORD *)(v513 + 6) = *(_OWORD *)&v508.a;
  *(_OWORD *)(v67 + 10) = v69;
  *(_OWORD *)(v67 + 14) = v68;
  v70 = operator new();
  v71 = vcvtpd_s64_f64(MaxX);
  v72 = vcvtpd_s64_f64(MaxY);
  v73 = v53;
  if (v53 < v72)
    v72 = v53;
  v74 = v459;
  if (v459 >= v71)
    v74 = v71;
  *(_DWORD *)(v70 + 8) = 0;
  v75 = (unsigned int *)(v70 + 8);
  *(_QWORD *)v70 = &off_1E95AF4A8;
  v76 = v74 - v61;
  v77 = v72 - v63;
  *(_QWORD *)(v70 + 16) = 0;
  *(_QWORD *)(v70 + 24) = v62;
  *(_DWORD *)(v70 + 32) = v47;
  *(_DWORD *)(v70 + 40) = v73;
  *(_DWORD *)(v70 + 44) = v61;
  *(_DWORD *)(v70 + 48) = v63;
  *(_DWORD *)(v70 + 52) = v74 - v61;
  *(_DWORD *)(v70 + 56) = v72 - v63;
  if ((int)v74 > (int)v47 || ((v63 | v61) & 0x80000000) != 0 || (int)v72 > v73)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1D3DDE1A0(exception, "Crop rectangle does not fit within image data.");
    *exception = &off_1E95AF510;
    __cxa_throw(exception, (struct type_info *)&unk_1E95AE2D8, (void (*)(void *))sub_1D3DB930C);
  }
  if (v63 | v61)
    v78 = (v76 + 15) & 0xFFFFFFF0;
  else
    v78 = v47;
  *(_DWORD *)(v70 + 36) = v78;
  do
    v79 = __ldxr(v75);
  while (__stxr(v79 + 1, v75));
  v505 = (unsigned int *)v70;
  v504 = 0;
  if (_os_feature_enabled_impl())
  {
    v80 = operator new();
    v81 = (__CVBuffer *)atomic_load((unint64_t *)v43);
    v82 = (char *)atomic_load(a1);
    if (v82)
    {
      v83 = CFGetTypeID(v82);
      if (qword_1EDB893E0 != -1)
        dispatch_once_f(&qword_1EDB893E0, 0, (dispatch_function_t)sub_1D3D73FB8);
      if (v83 != qword_1EDB893D8)
        _os_assumes_log();
    }
    v84 = v505;
    if (v505)
    {
      v85 = v505 + 2;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    *(_QWORD *)&buf.a = v84;
    sub_1D3DC1834((_QWORD *)v80, v84);
    sub_1D3D91AD4((unsigned int **)&buf);
    *(_QWORD *)v80 = &off_1E95AFAE8;
    *(_QWORD *)(v80 + 88) = CVPixelBufferRetain(v81);
    *(double *)(v80 + 96) = v64;
    *(double *)(v80 + 104) = (double)v63;
    *(double *)(v80 + 112) = (double)v76;
    *(double *)(v80 + 120) = (double)v77;
    *(_QWORD *)(v80 + 128) = v82 + 16;
    *(_BYTE *)(v80 + 136) = 1;
    *(_DWORD *)(v80 + 137) = (_DWORD)p_buf;
    *(_DWORD *)(v80 + 140) = *(_DWORD *)((char *)&p_buf + 3);
    *(_QWORD *)(v80 + 144) = 0;
    v87 = (unsigned int *)(v80 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    if (v504)
      sub_1D3D6D13C(v504);
    v504 = (unsigned int *)v80;
  }
  else
  {
    v89 = (unsigned int *)operator new();
    v90 = v89;
    v91 = v505;
    if (v505)
    {
      v92 = v505 + 2;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v503 = v91;
    sub_1D3DC1834(v89, v91);
    v94 = v90 + 2;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    if (v504)
      sub_1D3D6D13C(v504);
    v504 = v90;
    sub_1D3D91AD4(&v503);
    if (!v504)
      goto LABEL_468;
  }
  v452 = 0;
  do
  {
    v96 = operator new();
    v97 = v96;
    v98 = v504;
    if (v504)
    {
      v99 = v504 + 2;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
      v501 = v98;
      *(_DWORD *)(v96 + 8) = 0;
      *(_QWORD *)v96 = &off_1E95AF280;
      *(_QWORD *)(v96 + 16) = 0;
      do
        v101 = __ldxr(v99);
      while (__stxr(v101 + 1, v99));
      v102 = *(unsigned int **)(v96 + 16);
      if (v102)
        sub_1D3D6D13C(v102);
    }
    else
    {
      v501 = 0;
      *(_DWORD *)(v96 + 8) = 0;
      *(_QWORD *)v96 = &off_1E95AF280;
      *(_QWORD *)(v96 + 16) = 0;
    }
    *(_QWORD *)(v97 + 16) = v98;
    v103 = (unsigned int *)(v97 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    v502 = (unsigned int *)v97;
    sub_1D3D91BB4(&v501);
    v499 = 0;
    v498 = 0;
    v500 = 0;
    LODWORD(buf.a) = 1;
    BYTE4(buf.a) = 1;
    v105 = (unint64_t *)a1[1];
    if ((sub_1D3DDC428(v105, CFSTR("QR"), (uint64_t)&buf) & 1) != 0
      || (LODWORD(p_buf) = 1, BYTE4(p_buf) = 1, (sub_1D3DDC428(v105, CFSTR("Aztec"), (uint64_t)&p_buf) & 1) != 0)
      || (LODWORD(v522) = 1, BYTE4(v522) = 1, (sub_1D3DDC428(v105, CFSTR("MicroQR"), (uint64_t)&v522) & 1) != 0))
    {
      (*(void (**)(unsigned int **__return_ptr))(**((_QWORD **)v502 + 2) + 16))(&v497);
      v106 = v512;
      if (v512)
      {
        v107 = v512 + 2;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v496 = v106;
      sub_1D3DF3474((uint64_t)&buf, v497, (uint64_t *)&v496);
      sub_1D3D7FBF4(&v496);
      sub_1D3D6D10C(&v497);
      sub_1D3DEA794((uint64_t)&buf, &v510, (uint64_t)&p_buf, v109);
      LODWORD(v522) = 1;
      BYTE4(v522) = 1;
      v110 = (unint64_t *)a1[1];
      if (sub_1D3DDC428(v110, CFSTR("QR"), (uint64_t)&v522))
      {
        v111 = v502;
        if (v502)
        {
          v112 = v502 + 2;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        v489 = v111;
        v486 = v510;
        v487 = v511;
        v488 = 0;
        v114 = v512;
        if (v512)
        {
          v115 = v512 + 2;
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
          if (v488)
          {
            sub_1D3D6D13C(v488);
            v111 = v489;
          }
        }
        v488 = v114;
        sub_1D3DF452C((uint64_t)&v522, *((_QWORD *)v111 + 2), (unsigned int ***)&p_buf, &v486);
        sub_1D3D7FBF4(&v488);
        sub_1D3D7FC24(&v489);
        if ((_QWORD)v522 != *((_QWORD *)&v522 + 1))
        {
          v117 = v499;
          if ((unint64_t)v499 >= v500)
          {
            v118 = sub_1D3E365C0(&v498, (uint64_t **)&v522);
          }
          else
          {
            *(_QWORD *)v499 = 0;
            *((_QWORD *)v117 + 1) = 0;
            *((_QWORD *)v117 + 2) = 0;
            sub_1D3E364B4(v117, (uint64_t *)v522, *((uint64_t **)&v522 + 1), (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3);
            v118 = (uint64_t)(v117 + 6);
          }
          v499 = (unsigned int *)v118;
        }
        v517 = (uint64_t **)&v522;
        sub_1D3D7F844((void ***)&v517);
        v110 = (unint64_t *)a1[1];
      }
      LODWORD(v522) = 1;
      BYTE4(v522) = 1;
      if (sub_1D3DDC428(v110, CFSTR("MicroQR"), (uint64_t)&v522))
      {
        v119 = v502;
        if (v502)
        {
          v120 = v502 + 2;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v484 = v119;
        sub_1D3DC26DC(&v485, *((_QWORD *)v119 + 2), v494);
        sub_1D3D7FC24(&v484);
        v122 = v485;
        if (v485)
        {
          v123 = v485 + 2;
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
          v531 = v122;
          v523 = 0;
          v522 = 0uLL;
          v517 = (uint64_t **)&v522;
          v518 = 0;
          v125 = operator new(8uLL);
          v126 = (unsigned int **)v125;
          *(_QWORD *)&v522 = v125;
          *((_QWORD *)&v522 + 1) = v125;
          *v125 = 0;
          v127 = v125 + 1;
          v523 = v125 + 1;
          v128 = v531;
          if (v531)
          {
            v129 = v531 + 2;
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
            v131 = (unsigned int *)*v125;
            if (*v126)
              sub_1D3D6D13C(v131);
          }
          *v126 = v128;
          *((_QWORD *)&v522 + 1) = v127;
          v132 = v499;
          if ((unint64_t)v499 >= v500)
          {
            v134 = 0xAAAAAAAAAAAAAAABLL * (((char *)v499 - (char *)v498) >> 3);
            v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1D3D6D4F8();
            if (0x5555555555555556 * ((uint64_t)(v500 - (_QWORD)v498) >> 3) > v135)
              v135 = 0x5555555555555556 * ((uint64_t)(v500 - (_QWORD)v498) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v500 - (_QWORD)v498) >> 3) >= 0x555555555555555)
              v136 = 0xAAAAAAAAAAAAAAALL;
            else
              v136 = v135;
            v530[4] = &v500;
            v137 = (char *)sub_1D3DB485C(v136);
            v138 = &v137[24 * v134];
            v530[0] = v137;
            v530[1] = v138;
            v530[3] = &v137[24 * v139];
            *(_QWORD *)v138 = 0;
            *((_QWORD *)v138 + 1) = 0;
            *((_QWORD *)v138 + 2) = 0;
            *(_OWORD *)v138 = v522;
            *((_QWORD *)v138 + 2) = v523;
            v522 = 0uLL;
            v523 = 0;
            v530[2] = v138 + 24;
            sub_1D3E09140(&v498, v530);
            v133 = v499;
            sub_1D3E36A54((uint64_t)v530);
          }
          else
          {
            *(_QWORD *)v499 = 0;
            *((_QWORD *)v132 + 1) = 0;
            *((_QWORD *)v132 + 2) = 0;
            *(_OWORD *)v132 = v522;
            *((_QWORD *)v132 + 2) = v523;
            v522 = 0uLL;
            v523 = 0;
            v133 = v132 + 6;
          }
          v499 = v133;
          v517 = (uint64_t **)&v522;
          sub_1D3D7F844((void ***)&v517);
          sub_1D3D7F7E4(&v531);
        }
        sub_1D3D7F7E4(&v485);
        v110 = (unint64_t *)a1[1];
      }
      LODWORD(v522) = 1;
      BYTE4(v522) = 1;
      if (sub_1D3DDC428(v110, CFSTR("Aztec"), (uint64_t)&v522))
      {
        v140 = v502;
        if (v502)
        {
          v141 = v502 + 2;
          do
            v142 = __ldxr(v141);
          while (__stxr(v142 + 1, v141));
        }
        v483 = v140;
        v480 = v510;
        v481 = v511;
        v482 = 0;
        v143 = v512;
        if (v512)
        {
          v144 = v512 + 2;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
          if (v482)
            sub_1D3D6D13C(v482);
        }
        v482 = v143;
        sub_1D3D7D2A0((uint64_t)&v483, (uint64_t)v493, (uint64_t)&v522);
        sub_1D3D7FBF4(&v482);
        sub_1D3D7FC24(&v483);
        if ((_QWORD)v522 != *((_QWORD *)&v522 + 1))
        {
          v146 = v499;
          if ((unint64_t)v499 >= v500)
          {
            v147 = sub_1D3E365C0(&v498, (uint64_t **)&v522);
          }
          else
          {
            *(_QWORD *)v499 = 0;
            *((_QWORD *)v146 + 1) = 0;
            *((_QWORD *)v146 + 2) = 0;
            sub_1D3E364B4(v146, (uint64_t *)v522, *((uint64_t **)&v522 + 1), (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3);
            v147 = (uint64_t)(v146 + 6);
          }
          v499 = (unsigned int *)v147;
        }
        v517 = (uint64_t **)&v522;
        sub_1D3D7F844((void ***)&v517);
      }
      *(_QWORD *)&v522 = &v495;
      sub_1D3DE98F8((void ***)&v522);
      *(_QWORD *)&v522 = v494;
      sub_1D3DE98F8((void ***)&v522);
      *(_QWORD *)&v522 = v493;
      sub_1D3D7FB84((void ***)&v522);
      *(_QWORD *)&v522 = &p_buf;
      sub_1D3DE9FC4((void ***)&v522);
      sub_1D3DF33C4((uint64_t)&buf);
      v105 = (unint64_t *)a1[1];
    }
    LODWORD(buf.a) = 1;
    BYTE4(buf.a) = 1;
    if (sub_1D3DDC428(v105, CFSTR("DataMatrix"), (uint64_t)&buf))
    {
      v148 = v502;
      if (v502)
      {
        v149 = v502 + 2;
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
      }
      v479 = v148;
      v476 = v510;
      v477 = v511;
      v478 = 0;
      v151 = v512;
      if (v512)
      {
        v152 = v512 + 2;
        do
          v153 = __ldxr(v152);
        while (__stxr(v153 + 1, v152));
        if (v478)
          sub_1D3D6D13C(v478);
      }
      v478 = v151;
      sub_1D3DC4308((unsigned int **)&v522, (uint64_t)&v479, (int *)&v476);
      sub_1D3D7FBF4(&v478);
      sub_1D3D7FC24(&v479);
      memset(&buf, 0, 24);
      if ((_QWORD)v522)
      {
        *(_QWORD *)&buf.b = sub_1D3D7F62C((unsigned int ***)&buf, (unsigned int **)&v522);
        v154 = v499;
        if ((unint64_t)v499 >= v500)
        {
          v155 = sub_1D3E365C0(&v498, (uint64_t **)&buf);
        }
        else
        {
          *(_QWORD *)v499 = 0;
          *((_QWORD *)v154 + 1) = 0;
          *((_QWORD *)v154 + 2) = 0;
          sub_1D3E364B4(v154, *(uint64_t **)&buf.a, *(uint64_t **)&buf.b, (uint64_t)(*(_QWORD *)&buf.b - *(_QWORD *)&buf.a) >> 3);
          v155 = (uint64_t)(v154 + 6);
        }
        v499 = (unsigned int *)v155;
      }
      p_buf = &buf;
      sub_1D3D7F844((void ***)&p_buf);
      sub_1D3D7F7E4((unsigned int **)&v522);
    }
    v156 = v498;
    v157 = v499;
    if (v498 == v499)
    {
      r1a = 0;
      goto LABEL_427;
    }
    r1a = 0;
    do
    {
      v460 = v156;
      v159 = *(unsigned int ***)v156;
      v158 = (unsigned int **)*((_QWORD *)v156 + 1);
      if (v159 == v158)
        goto LABEL_424;
      do
      {
        if (!*v159)
          goto LABEL_422;
        v524 = sub_1D3DB36B4();
        v517 = 0;
        v160 = *v159;
        if (*v159)
        {
          v161 = v160 + 2;
          do
            v162 = __ldxr(v161);
          while (__stxr(v162 + 1, v161));
        }
        v517 = (uint64_t **)v160;
        v491 = 0;
        p_buf = (CGAffineTransform *)&off_1E95AF9B0;
        v492 = 0;
        v163 = (unsigned int *)*((_QWORD *)v160 + 5);
        if (v163)
        {
          v164 = v163 + 2;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          if (v492)
          {
            sub_1D3D6D13C(v492);
            v160 = (unsigned int *)v517;
          }
        }
        v492 = v163;
        v522 = 0uLL;
        v523 = 0;
        sub_1D3D6D6A8((unsigned int *)&v522, *((unsigned int ***)v160 + 6), *((unsigned int ***)v160 + 7), (uint64_t)(*((_QWORD *)v160 + 7) - *((_QWORD *)v160 + 6)) >> 3);
        if (*((_QWORD *)&v522 + 1) != (_QWORD)v522)
        {
          v166 = 0;
          if ((unint64_t)((uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3) <= 1)
            v167 = 1;
          else
            v167 = (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3;
          do
          {
            v168 = (*(float (**)(_QWORD))(**(_QWORD **)(v522 + 8 * v166) + 16))(*(_QWORD *)(v522 + 8 * v166));
            v169 = (*(float (**)(_QWORD))(**(_QWORD **)(v522 + 8 * v166) + 24))(*(_QWORD *)(v522 + 8 * v166));
            a = v508.a;
            b = v508.b;
            c = v508.c;
            d = v508.d;
            tx = v508.tx;
            ty = v508.ty;
            v176 = operator new();
            v177 = tx + c * v169 + a * v168;
            v178 = ty + d * v169 + b * v168;
            *(_DWORD *)(v176 + 8) = 0;
            v179 = (unsigned int *)(v176 + 8);
            *(float *)(v176 + 12) = v177;
            *(float *)(v176 + 16) = v178;
            v180 = d * 0.5 + b * 0.5;
            v181 = c * 0.5 + a * 0.5;
            *(_QWORD *)v176 = &off_1E95AEDC8;
            *(float *)(v176 + 20) = v181;
            *(float *)(v176 + 24) = v180;
            v182 = v522;
            do
              v183 = __ldxr(v179);
            while (__stxr(v183 + 1, v179));
            v184 = *(unsigned int **)(v182 + 8 * v166);
            if (v184)
              sub_1D3D6D13C(v184);
            *(_QWORD *)(v182 + 8 * v166++) = v176;
          }
          while (v166 != v167);
        }
        v185 = atomic_load((unint64_t *)&v524);
        if (*((_QWORD *)&v522 + 1) != (_QWORD)v522)
        {
          v186 = (void **)(v185 + 40);
          if (*(_BYTE *)(v185 + 64))
          {
            v187 = *v186;
            if (*v186)
            {
              *(_QWORD *)(v185 + 48) = v187;
              operator delete(v187);
            }
          }
          *v186 = 0;
          *(_QWORD *)(v185 + 48) = 0;
          *(_QWORD *)(v185 + 56) = 0;
          *(_BYTE *)(v185 + 64) = 1;
          v188 = (void **)(v185 + 288);
          if (*(_BYTE *)(v185 + 312))
          {
            v189 = *v188;
            if (*v188)
            {
              *(_QWORD *)(v185 + 296) = v189;
              operator delete(v189);
            }
          }
          *v188 = 0;
          *(_QWORD *)(v185 + 296) = 0;
          *(_QWORD *)(v185 + 304) = 0;
          *(_BYTE *)(v185 + 312) = 1;
          v190 = v522;
          v191 = (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3;
          if (v191 >= 4)
            v191 = 4;
          if (v191)
          {
            v192 = 0;
            do
            {
              v193 = *(_QWORD *)(v190 + 8 * v192);
              v194 = (float32x2_t)0x3F0000003F000000;
              if (v193)
              {
                v195 = (char *)__dynamic_cast(*(const void **)(v190 + 8 * v192), (const struct __class_type_info *)&unk_1E95AE110, (const struct __class_type_info *)&unk_1E95ADE40, 0);
                if (v195)
                  v194 = *(float32x2_t *)(v195 + 20);
              }
              v196 = (*(float (**)(uint64_t))(*(_QWORD *)v193 + 16))(v193);
              v197 = (*(float (**)(_QWORD))(**(_QWORD **)(v522 + 8 * v192) + 24))(*(_QWORD *)(v522 + 8 * v192));
              v199 = *(double **)(v185 + 48);
              v198 = *(_QWORD *)(v185 + 56);
              if ((unint64_t)v199 >= v198)
              {
                v201 = (double *)*v186;
                v202 = ((char *)v199 - (_BYTE *)*v186) >> 4;
                v203 = v202 + 1;
                if ((unint64_t)(v202 + 1) >> 60)
LABEL_463:
                  sub_1D3D6D4F8();
                v204 = v198 - (_QWORD)v201;
                if (v204 >> 3 > v203)
                  v203 = v204 >> 3;
                _CF = (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0;
                v205 = 0xFFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v205 = v203;
                if (v205)
                {
                  v205 = (unint64_t)sub_1D3D6DB64(v205);
                  v201 = *(double **)(v185 + 40);
                  v199 = *(double **)(v185 + 48);
                }
                else
                {
                  v206 = 0;
                }
                v207 = (double *)(v205 + 16 * v202);
                *v207 = v196;
                v207[1] = v197;
                v208 = v207;
                if (v199 != v201)
                {
                  do
                  {
                    *((_OWORD *)v208 - 1) = *((_OWORD *)v199 - 1);
                    v208 -= 2;
                    v199 -= 2;
                  }
                  while (v199 != v201);
                  v201 = (double *)*v186;
                }
                v200 = v207 + 2;
                *(_QWORD *)(v185 + 40) = v208;
                *(_QWORD *)(v185 + 48) = v207 + 2;
                *(_QWORD *)(v185 + 56) = v205 + 16 * v206;
                if (v201)
                  operator delete(v201);
              }
              else
              {
                *v199 = v196;
                v199[1] = v197;
                v200 = v199 + 2;
              }
              *(_QWORD *)(v185 + 48) = v200;
              v209 = vcvtq_f64_f32(v194);
              v211 = *(char **)(v185 + 296);
              v210 = *(_QWORD *)(v185 + 304);
              if ((unint64_t)v211 >= v210)
              {
                v472 = v209;
                v213 = (char *)*v188;
                v214 = (v211 - (_BYTE *)*v188) >> 4;
                v215 = v214 + 1;
                if ((unint64_t)(v214 + 1) >> 60)
LABEL_462:
                  sub_1D3D6D4F8();
                v216 = v210 - (_QWORD)v213;
                if (v216 >> 3 > v215)
                  v215 = v216 >> 3;
                _CF = (unint64_t)v216 >= 0x7FFFFFFFFFFFFFF0;
                v217 = 0xFFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v217 = v215;
                if (v217)
                {
                  v217 = (unint64_t)sub_1D3D6DB64(v217);
                  v213 = *(char **)(v185 + 288);
                  v211 = *(char **)(v185 + 296);
                }
                else
                {
                  v218 = 0;
                }
                v219 = (float64x2_t *)(v217 + 16 * v214);
                *v219 = v472;
                f64 = (_OWORD *)v219[1].f64;
                if (v211 != v213)
                {
                  do
                  {
                    v219[-1] = *((float64x2_t *)v211 - 1);
                    --v219;
                    v211 -= 16;
                  }
                  while (v211 != v213);
                  v213 = (char *)*v188;
                }
                *(_QWORD *)(v185 + 288) = v219;
                *(_QWORD *)(v185 + 296) = f64;
                *(_QWORD *)(v185 + 304) = v217 + 16 * v218;
                if (v213)
                  operator delete(v213);
              }
              else
              {
                *(float64x2_t *)v211 = v209;
                f64 = v211 + 16;
              }
              *(_QWORD *)(v185 + 296) = f64;
              ++v192;
              v190 = v522;
              v220 = (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3;
              if (v220 >= 4)
                v220 = 4;
            }
            while (v192 < v220);
          }
          v221 = (void **)(v185 + 72);
          if (*(_BYTE *)(v185 + 96))
          {
            v222 = *v221;
            if (*v221)
            {
              *(_QWORD *)(v185 + 80) = v222;
              operator delete(v222);
            }
          }
          *v221 = 0;
          *(_QWORD *)(v185 + 80) = 0;
          *(_QWORD *)(v185 + 88) = 0;
          *(_BYTE *)(v185 + 96) = 1;
          sub_1D3E25C1C((void **)(v185 + 72), 3uLL);
          v223 = (void **)(v185 + 320);
          if (*(_BYTE *)(v185 + 344))
          {
            v224 = *v223;
            if (*v223)
            {
              *(_QWORD *)(v185 + 328) = v224;
              operator delete(v224);
            }
          }
          *v223 = 0;
          *(_QWORD *)(v185 + 328) = 0;
          *(_QWORD *)(v185 + 336) = 0;
          *(_BYTE *)(v185 + 344) = 1;
          v225 = (char *)operator new(0x30uLL);
          v227 = *(char **)(v185 + 320);
          v226 = *(char **)(v185 + 328);
          v228 = v225;
          if (v226 != v227)
          {
            do
            {
              *((_OWORD *)v228 - 1) = *((_OWORD *)v226 - 1);
              v228 -= 16;
              v226 -= 16;
            }
            while (v226 != v227);
            v226 = (char *)*v223;
          }
          *(_QWORD *)(v185 + 320) = v228;
          *(_QWORD *)(v185 + 328) = v225;
          *(_QWORD *)(v185 + 336) = v225 + 48;
          if (v226)
            operator delete(v226);
          v229 = v522;
          v230 = (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3;
          if (v230 >= 7)
            v230 = 7;
          if (v230 >= 5)
          {
            v231 = 4;
            do
            {
              v232 = *(_QWORD *)(v229 + 8 * v231);
              v233 = (float32x2_t)0x3F0000003F000000;
              if (v232)
              {
                v234 = (char *)__dynamic_cast(*(const void **)(v229 + 8 * v231), (const struct __class_type_info *)&unk_1E95AE110, (const struct __class_type_info *)&unk_1E95ADE40, 0);
                if (v234)
                  v233 = *(float32x2_t *)(v234 + 20);
              }
              v235 = (*(float (**)(uint64_t))(*(_QWORD *)v232 + 16))(v232);
              v236 = (*(float (**)(_QWORD))(**(_QWORD **)(v522 + 8 * v231) + 24))(*(_QWORD *)(v522 + 8 * v231));
              v237 = (double *)__dst;
              v238 = (double *)v515;
              while (v237 != v238)
              {
                if (*v237 == v235 && v237[1] == v236)
                {
                  v240 = (char *)v238 - (char *)(v237 + 4);
                  if (v238 != v237 + 4)
                    memmove(v237, v237 + 4, (char *)v238 - (char *)(v237 + 4));
                  v238 = (double *)((char *)v237 + v240);
                  v515 = (float64x2_t *)((char *)v237 + v240);
                }
                else
                {
                  v237 += 4;
                }
              }
              v242 = *(double **)(v185 + 80);
              v241 = *(_QWORD *)(v185 + 88);
              if ((unint64_t)v242 >= v241)
              {
                v244 = (double *)*v221;
                v245 = ((char *)v242 - (_BYTE *)*v221) >> 4;
                v246 = v245 + 1;
                if ((unint64_t)(v245 + 1) >> 60)
                  goto LABEL_463;
                v247 = v241 - (_QWORD)v244;
                if (v247 >> 3 > v246)
                  v246 = v247 >> 3;
                _CF = (unint64_t)v247 >= 0x7FFFFFFFFFFFFFF0;
                v248 = 0xFFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v248 = v246;
                if (v248)
                {
                  v248 = (unint64_t)sub_1D3D6DB64(v248);
                  v244 = *(double **)(v185 + 72);
                  v242 = *(double **)(v185 + 80);
                }
                else
                {
                  v249 = 0;
                }
                v250 = (double *)(v248 + 16 * v245);
                *v250 = v235;
                v250[1] = v236;
                v251 = v250;
                if (v242 != v244)
                {
                  do
                  {
                    *((_OWORD *)v251 - 1) = *((_OWORD *)v242 - 1);
                    v251 -= 2;
                    v242 -= 2;
                  }
                  while (v242 != v244);
                  v244 = (double *)*v221;
                }
                v243 = v250 + 2;
                *(_QWORD *)(v185 + 72) = v251;
                *(_QWORD *)(v185 + 80) = v250 + 2;
                *(_QWORD *)(v185 + 88) = v248 + 16 * v249;
                if (v244)
                  operator delete(v244);
              }
              else
              {
                *v242 = v235;
                v242[1] = v236;
                v243 = v242 + 2;
              }
              v252 = vcvtq_f64_f32(v233);
              *(_QWORD *)(v185 + 80) = v243;
              v254 = *(char **)(v185 + 328);
              v253 = *(_QWORD *)(v185 + 336);
              if ((unint64_t)v254 >= v253)
              {
                v473 = v252;
                v256 = (char *)*v223;
                v257 = (v254 - (_BYTE *)*v223) >> 4;
                v258 = v257 + 1;
                if ((unint64_t)(v257 + 1) >> 60)
                  goto LABEL_462;
                v259 = v253 - (_QWORD)v256;
                if (v259 >> 3 > v258)
                  v258 = v259 >> 3;
                _CF = (unint64_t)v259 >= 0x7FFFFFFFFFFFFFF0;
                v260 = 0xFFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v260 = v258;
                if (v260)
                {
                  v260 = (unint64_t)sub_1D3D6DB64(v260);
                  v256 = *(char **)(v185 + 320);
                  v254 = *(char **)(v185 + 328);
                }
                else
                {
                  v261 = 0;
                }
                v262 = (float64x2_t *)(v260 + 16 * v257);
                *v262 = v473;
                v255 = (_OWORD *)v262[1].f64;
                if (v254 != v256)
                {
                  do
                  {
                    v262[-1] = *((float64x2_t *)v254 - 1);
                    --v262;
                    v254 -= 16;
                  }
                  while (v254 != v256);
                  v256 = (char *)*v223;
                }
                *(_QWORD *)(v185 + 320) = v262;
                *(_QWORD *)(v185 + 328) = v255;
                *(_QWORD *)(v185 + 336) = v260 + 16 * v261;
                if (v256)
                  operator delete(v256);
              }
              else
              {
                *(float64x2_t *)v254 = v252;
                v255 = v254 + 16;
              }
              *(_QWORD *)(v185 + 328) = v255;
              ++v231;
              v229 = v522;
              v263 = (uint64_t)(*((_QWORD *)&v522 + 1) - v522) >> 3;
              if (v263 >= 7)
                v263 = 7;
            }
            while (v231 < v263);
          }
        }
        v264 = (unsigned int *)(v517 + 10);
        v265 = atomic_load((unint64_t *)&v524);
        v6 = v469;
        v5 = v470;
        v7 = v468;
        sub_1D3E366D0(v265 + 112, v264);
        v266 = *(_DWORD *)sub_1D3E3690C(v517[11]) != 0;
        v267 = atomic_load((unint64_t *)&v524);
        *(_WORD *)(v267 + 104) = v266 | 0x100;
        v268 = atomic_load((unint64_t *)&v524);
        v520 = 0;
        v519 = &off_1E95AF9B0;
        v521 = 0;
        v269 = v492;
        if (v492)
        {
          v270 = v492 + 2;
          do
            v271 = __ldxr(v270);
          while (__stxr(v271 + 1, v270));
          if (v521)
            sub_1D3D6D13C(v521);
        }
        v521 = v269;
        v273 = *((_QWORD *)v269 + 2);
        v272 = *((_QWORD *)v269 + 3);
        if ((unint64_t)(v272 - v273 - 1) <= 0xB8B)
        {
          Mutable = CFDataCreateMutable(allocator, v272 - v273);
          v275 = Mutable;
          if (Mutable)
          {
            MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
            CFDataSetLength(v275, v272 - v273);
            if (v272 != v273)
            {
              v277 = 0;
              do
              {
                MutableBytePtr[v277] = *(_BYTE *)(*((_QWORD *)v521 + 2) + v277);
                ++v277;
              }
              while (v272 - v273 != v277);
            }
            *(_QWORD *)&buf.a = v275;
            v278 = (unint64_t *)(v268 + 24);
            do
              v279 = __ldaxr((unint64_t *)&buf);
            while (__stlxr(0, (unint64_t *)&buf));
            do
              v280 = (const void *)__ldaxr(v278);
            while (__stlxr(v279, v278));
            if (v280)
              CFRelease(v280);
            sub_1D3DB386C((unint64_t *)&buf);
          }
        }
        sub_1D3D7F558(&v519);
        if (*((_QWORD *)v492 + 3) != *((_QWORD *)v492 + 2))
        {
          v281 = *((_DWORD *)v517 + 18);
          if (v281 <= 9)
          {
            if (v281 == 1)
            {
              *(_QWORD *)&buf.a = CFRetain(CFSTR("QR"));
              v290 = atomic_load((unint64_t *)&v524);
              v291 = (unint64_t *)(v290 + 16);
              do
                v292 = __ldaxr((unint64_t *)&buf);
              while (__stlxr(0, (unint64_t *)&buf));
              do
                v293 = (const void *)__ldaxr(v291);
              while (__stlxr(v292, v291));
              if (v293)
                CFRelease(v293);
              sub_1D3D8C70C((unint64_t *)&buf);
              if ((**((_BYTE **)v492 + 2) & 0xF0) != 0x50)
              {
LABEL_354:
                v300 = atomic_load((unint64_t *)&v524);
                *(_DWORD *)(v300 + 32) = 1065353216;
                *(_BYTE *)(v300 + 36) = 1;
                v301 = atomic_load((unint64_t *)&v524);
                if (!atomic_load((unint64_t *)(v301 + 16)))
                  goto LABEL_404;
                if (!*(_BYTE *)(v301 + 64))
                  goto LABEL_404;
                v303 = *(_QWORD *)(v301 + 48) - *(_QWORD *)(v301 + 40);
                if (v303 < 0x40)
                  goto LABEL_404;
                if (!*(_BYTE *)(v301 + 312) || *(_QWORD *)(v301 + 296) - *(_QWORD *)(v301 + 288) != v303)
                {
                  _os_assumes_log();
                  if (!*(_BYTE *)(v301 + 312))
LABEL_464:
                    sub_1D3D74BBC();
                }
                v304 = *v462;
                if (v462[1] == *v462)
                  goto LABEL_404;
                v305 = 0;
                while (1)
                {
                  v306 = atomic_load((unint64_t *)(v304 + 8 * v305));
                  if (atomic_load((unint64_t *)(v306 + 16)))
                  {
                    v308 = (const __CFString *)atomic_load((unint64_t *)(v306 + 16));
                    v309 = (const __CFString *)atomic_load((unint64_t *)(v301 + 16));
                    if (CFStringCompare(v308, v309, 0) == kCFCompareEqualTo)
                    {
                      v310 = atomic_load((unint64_t *)(v304 + 8 * v305));
                      if (*(_BYTE *)(v310 + 64))
                      {
                        if (*(_QWORD *)(v310 + 48) - *(_QWORD *)(v310 + 40) >= 0x40uLL)
                        {
                          v311 = (unint64_t *)(v304 + 8 * v305);
                          v312 = atomic_load(v311);
                          if (!*(_BYTE *)(v312 + 312)
                            || (v313 = atomic_load(v311),
                                *(_QWORD *)(v313 + 296) - *(_QWORD *)(v313 + 288) != *(_QWORD *)(v310 + 48)
                                                                                   - *(_QWORD *)(v310 + 40)))
                          {
                            _os_assumes_log();
                          }
                          v314 = (unint64_t *)(v304 + 8 * v305);
                          v315 = atomic_load(v314);
                          if (!*(_BYTE *)(v315 + 312))
                            goto LABEL_464;
                          v316 = atomic_load(v314);
                          v317 = (const __CFString *)atomic_load((unint64_t *)(v306 + 16));
                          if (CFStringCompare(v317, CFSTR("Aztec"), 0))
                          {
                            v318 = (const __CFString *)atomic_load((unint64_t *)(v306 + 16));
                            v319 = CFStringCompare(v318, CFSTR("MicroQR"), 0) == kCFCompareEqualTo;
                          }
                          else
                          {
                            v319 = 1;
                          }
                          v320 = (const __CFString *)atomic_load((unint64_t *)(v306 + 16));
                          if (CFStringCompare(v320, CFSTR("QR"), 0) == kCFCompareEqualTo)
                          {
                            if (*(_BYTE *)(v316 + 96))
                            {
                              v326 = *(double **)(v316 + 72);
                              if (*(_QWORD *)(v316 + 80) - (_QWORD)v326 == 48)
                              {
                                if (*(_BYTE *)(v301 + 96))
                                {
                                  v327 = *(_QWORD *)(v301 + 72);
                                  if (*(_QWORD *)(v301 + 80) - v327 == 48)
                                  {
                                    v328 = 0;
                                    v329 = 0;
                                    v330 = sqrt((v326[1] - v326[3]) * (v326[1] - v326[3])+ (*v326 - v326[2]) * (*v326 - v326[2]))/ 20.0;
                                    do
                                    {
                                      if (vabdd_f64(v326[v328], *(double *)(v327 + v328 * 8)) < v330
                                        && vabdd_f64(v326[v328 + 1], *(double *)(v327 + v328 * 8 + 8)) < v330)
                                      {
                                        ++v329;
                                      }
                                      v328 += 2;
                                    }
                                    while (v328 != 6);
                                    if (v329 == 3)
                                      v319 = 1;
                                  }
                                }
                              }
                            }
                          }
                          v321 = 0;
                          v322 = 0;
                          do
                          {
                            if (!*(_BYTE *)(v310 + 64) || !*(_BYTE *)(v301 + 64))
                              goto LABEL_464;
                            v474 = vmul_f32(vabs_f32(vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(*(_QWORD *)(v301 + 288) + v321), *(float64x2_t *)(*(_QWORD *)(v315 + 288) + v321)))), v463);
                            r1b = vabs_f32(vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(*(_QWORD *)(v310 + 40) + v321), *(float64x2_t *)(*(_QWORD *)(v301 + 40) + v321))));
                            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
                            {
                              LODWORD(buf.a) = 134349568;
                              *(double *)((char *)&buf.a + 4) = v474.f32[0];
                              WORD2(buf.b) = 2050;
                              *(double *)((char *)&buf.b + 6) = r1b.f32[0];
                              HIWORD(buf.c) = 2050;
                              buf.d = r1b.f32[1];
                              _os_log_debug_impl(&dword_1D3D6B000, oslog, OS_LOG_TYPE_DEBUG, "tolerance: %{public}.2f; dX: %{public}.2f, dY: %{public}.2f",
                                (uint8_t *)&buf,
                                0x20u);
                            }
                            v323 = vcgt_f32(v474, r1b);
                            if ((v323.i32[0] & v323.i32[1] & 1) != 0)
                            {
                              v324 = 1;
                            }
                            else
                            {
                              v325 = vcgt_f32(vmul_f32(v474, v461), r1b);
                              v324 = v319 & v325.i32[0] & v325.i32[1];
                            }
                            v322 += v324;
                            v321 += 16;
                          }
                          while (v321 != 64);
                          if (v322 == 4)
                            break;
                        }
                      }
                    }
                  }
                  ++v305;
                  v304 = *v462;
                  if (v305 >= (uint64_t)(v462[1] - *v462) >> 3)
                    goto LABEL_404;
                }
                if ((v305 & 0x8000000000000000) != 0)
                {
LABEL_404:
                  v335 = (unint64_t *)v462[1];
                  v334 = v462[2];
                  if ((unint64_t)v335 >= v334)
                  {
                    v339 = ((uint64_t)v335 - *v462) >> 3;
                    if ((unint64_t)(v339 + 1) >> 61)
                      sub_1D3D6D4F8();
                    v340 = v334 - *v462;
                    v341 = v340 >> 2;
                    if (v340 >> 2 <= (unint64_t)(v339 + 1))
                      v341 = v339 + 1;
                    if ((unint64_t)v340 >= 0x7FFFFFFFFFFFFFF8)
                      v342 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v342 = v341;
                    v529 = v457;
                    if (v342)
                      v342 = (unint64_t)sub_1D3D6D8A0(v342);
                    else
                      v343 = 0;
                    v525 = v342;
                    v526 = v342 + 8 * v339;
                    v527 = v526;
                    v528 = v342 + 8 * v343;
                    do
                      v344 = __ldaxr((unint64_t *)&v524);
                    while (__stlxr(0, (unint64_t *)&v524));
                    *(_QWORD *)(v342 + 8 * v339) = v344;
                    v527 += 8;
                    v338 = v462;
                    sub_1D3DB37F8(v462, &v525);
                    v337 = (_QWORD *)v462[1];
                    sub_1D3D75F10((uint64_t)&v525);
                  }
                  else
                  {
                    do
                      v336 = __ldaxr((unint64_t *)&v524);
                    while (__stlxr(0, (unint64_t *)&v524));
                    *v335 = v336;
                    v337 = v335 + 1;
                    v338 = v462;
                    v462[1] = v337;
                  }
                  v338[1] = v337;
                }
                else
                {
                  v331 = (unint64_t *)(*v462 + 8 * v305);
                  do
                    v332 = __ldaxr((unint64_t *)&v524);
                  while (__stlxr(0, (unint64_t *)&v524));
                  do
                    v333 = (const void *)__ldaxr(v331);
                  while (__stlxr(v332, v331));
                  if (v333)
                    CFRelease(v333);
                }
                r1a = 1;
                goto LABEL_421;
              }
            }
            else
            {
              if (v281 != 2)
                goto LABEL_354;
              *(_QWORD *)&buf.a = CFRetain(CFSTR("DataMatrix"));
              v282 = atomic_load((unint64_t *)&v524);
              v283 = (unint64_t *)(v282 + 16);
              do
                v284 = __ldaxr((unint64_t *)&buf);
              while (__stlxr(0, (unint64_t *)&buf));
              do
                v285 = (const void *)__ldaxr(v283);
              while (__stlxr(v284, v283));
              if (v285)
                CFRelease(v285);
              sub_1D3D8C70C((unint64_t *)&buf);
              if (**((unsigned __int8 **)v492 + 2) != 232)
                goto LABEL_354;
            }
            v294 = atomic_load((unint64_t *)&v524);
            if (!*(_BYTE *)(v294 + 208))
            {
              v295 = atomic_load((unint64_t *)&v524);
              if (*(_BYTE *)(v295 + 208))
                sub_1D3DB386C((unint64_t *)(v295 + 200));
              *(_QWORD *)(v295 + 200) = 0;
              *(_OWORD *)(v295 + 168) = 0u;
              *(_OWORD *)(v295 + 184) = 0u;
              *(_BYTE *)(v295 + 208) = 1;
            }
            v296 = atomic_load((unint64_t *)&v524);
            *(_BYTE *)(v296 + 168) = 1;
            goto LABEL_354;
          }
          if (v281 == 11)
          {
            *(_QWORD *)&buf.a = CFRetain(CFSTR("MicroQR"));
            v297 = atomic_load((unint64_t *)&v524);
            v298 = (unint64_t *)(v297 + 16);
            do
              v299 = __ldaxr((unint64_t *)&buf);
            while (__stlxr(0, (unint64_t *)&buf));
            do
              v289 = (const void *)__ldaxr(v298);
            while (__stlxr(v299, v298));
            if (v289)
              goto LABEL_352;
          }
          else
          {
            if (v281 != 10)
              goto LABEL_354;
            *(_QWORD *)&buf.a = CFRetain(CFSTR("Aztec"));
            v286 = atomic_load((unint64_t *)&v524);
            v287 = (unint64_t *)(v286 + 16);
            do
              v288 = __ldaxr((unint64_t *)&buf);
            while (__stlxr(0, (unint64_t *)&buf));
            do
              v289 = (const void *)__ldaxr(v287);
            while (__stlxr(v288, v287));
            if (v289)
LABEL_352:
              CFRelease(v289);
          }
          sub_1D3D8C70C((unint64_t *)&buf);
          goto LABEL_354;
        }
LABEL_421:
        *(_QWORD *)&buf.a = &v522;
        sub_1D3D6D79C((void ***)&buf);
        sub_1D3D7F558(&p_buf);
        sub_1D3D7F7E4((unsigned int **)&v517);
        sub_1D3D74F14((unint64_t *)&v524);
        v158 = (unsigned int **)*((_QWORD *)v460 + 1);
LABEL_422:
        ++v159;
      }
      while (v159 != v158);
      v157 = v499;
LABEL_424:
      v156 = v460 + 6;
    }
    while (v460 + 6 != v157);
LABEL_427:
    v454 |= r1a;
    *(_QWORD *)&buf.a = &v498;
    sub_1D3E36958((void ***)&buf);
    if (v449)
    {
      if ((v454 & 1) != 0)
      {
LABEL_467:
        sub_1D3D7FC24(&v502);
        v454 = 1;
        break;
      }
    }
    else if (((*(_BYTE *)(a1[1] + 48) != 0) & v454) != 0)
    {
      goto LABEL_467;
    }
    v345 = v505;
    if (v505)
    {
      v346 = v505 + 2;
      do
        v347 = __ldxr(v346);
      while (__stxr(v347 + 1, v346));
    }
    v475 = v345;
    v498 = 0;
    if (!v449)
    {
      if (v452)
        goto LABEL_442;
      v355 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v345 + 16))(v345);
      if ((int)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v475 + 24))(v475) * v355) > 0x10000)
        goto LABEL_455;
      v356 = operator new();
      v349 = (unsigned int *)v356;
      v357 = v475;
      if (v475)
      {
        v358 = v475 + 2;
        do
          v359 = __ldxr(v358);
        while (__stxr(v359 + 1, v358));
      }
      *(_QWORD *)&v522 = v357;
      sub_1D3DB505C(v356, v357);
      p_p_buf = (unsigned int **)&v522;
LABEL_452:
      v364 = v349 + 2;
      do
        v365 = __ldxr(v364);
      while (__stxr(v365 + 1, v364));
      v498 = v349;
      sub_1D3D91AD4(p_p_buf);
LABEL_455:
      v354 = v498;
      if (v498)
      {
        v366 = v498 + 2;
        do
          v367 = __ldxr(v366);
        while (__stxr(v367 + 1, v366));
      }
      goto LABEL_458;
    }
    if (v452 == 1)
    {
      v360 = operator new();
      v349 = (unsigned int *)v360;
      v361 = v475;
      if (v475)
      {
        v362 = v475 + 2;
        do
          v363 = __ldxr(v362);
        while (__stxr(v363 + 1, v362));
      }
      p_buf = (CGAffineTransform *)v361;
      p_p_buf = (unsigned int **)&p_buf;
      sub_1D3DC03FC(v360, (unsigned int **)&p_buf);
      goto LABEL_452;
    }
    if (!v452)
    {
      v348 = operator new();
      v349 = (unsigned int *)v348;
      v350 = v475;
      if (v475)
      {
        v351 = v475 + 2;
        do
          v352 = __ldxr(v351);
        while (__stxr(v352 + 1, v351));
      }
      *(_QWORD *)&buf.a = v350;
      sub_1D3DB505C(v348, v350);
      p_p_buf = (unsigned int **)&buf;
      goto LABEL_452;
    }
LABEL_442:
    v354 = 0;
LABEL_458:
    if (v504)
      sub_1D3D6D13C(v504);
    v504 = v354;
    sub_1D3D91BB4(&v498);
    sub_1D3D91AD4(&v475);
    ++v452;
    sub_1D3D7FC24(&v502);
  }
  while (v504);
LABEL_468:
  v368 = (float64x2_t *)__dst;
  v369 = v515;
  v370 = (float64x2_t *)__dst;
  if (__dst != v515)
  {
    do
    {
      if (__p == v456)
      {
LABEL_473:
        v368 += 2;
      }
      else
      {
        v371 = __p;
        while (1)
        {
          v372 = vabsq_f64(vaddq_f64(v368[1], v371[1]));
          v373 = vmovn_s64(vcgtq_f64(vaddq_f64(v372, v372), vabdq_f64(*v371, *v368)));
          if ((v373.i32[0] & v373.i32[1] & 1) != 0)
            break;
          v371 += 2;
          if (v371 == v456)
            goto LABEL_473;
        }
        v374 = v368[1];
        *v371 = *v368;
        v371[1] = v374;
        v375 = (char *)v369 - (char *)&v368[2];
        if (v369 != &v368[2])
          memmove(v368, &v368[2], (char *)v369 - (char *)&v368[2]);
        v369 = (float64x2_t *)((char *)v368 + v375);
        v515 = (float64x2_t *)((char *)v368 + v375);
      }
    }
    while (v368 != v369);
    v368 = (float64x2_t *)__dst;
    v370 = v369;
  }
  if ((char *)v370 - (char *)v368 < 1)
  {
    v48 = (CGPoint *)v456;
    goto LABEL_516;
  }
  v376 = ((char *)v370 - (char *)v368) >> 5;
  v377 = v456;
  v378 = (char *)v456 - (char *)__p;
  v379 = (float64x2_t *)((char *)__p + (((char *)v456 - (char *)__p) & 0xFFFFFFFFFFFFFFE0));
  if (v376 <= (rect_24 - (char *)v456) >> 5)
  {
    v386 = ((char *)v456 - (char *)v379) >> 5;
    if (v386 >= v376)
    {
      v387 = &v368[2 * v376];
      v389 = v456;
LABEL_496:
      v390 = &v389[-2 * v376];
      v48 = (CGPoint *)v389;
      while (v390 < v377)
      {
        v391 = (CGPoint)*v390;
        v392 = (CGPoint)v390[1];
        v390 += 2;
        *v48 = v391;
        v48[1] = v392;
        v48 += 2;
      }
      v393 = &v379[2 * v376];
      if (v389 != v393)
        memmove(&v389[-2 * (((char *)v389 - (char *)v393) >> 5)], v379, (char *)v389 - (char *)v393);
      if (v387 != v368)
        memmove(v379, v368, (char *)v387 - (char *)v368);
      goto LABEL_516;
    }
    v387 = &v368[2 * v386];
    v388 = (char *)((char *)v370 - (char *)v387);
    if (v370 != v387)
      memmove(v456, &v368[2 * v386], (char *)v370 - (char *)v387);
    v389 = (float64x2_t *)&v388[(_QWORD)v456];
    if ((char *)v456 - (char *)v379 >= 1)
    {
      v377 = v456;
      goto LABEL_496;
    }
    v48 = (CGPoint *)&v388[(_QWORD)v456];
LABEL_516:
    v49 = v448;
    goto LABEL_517;
  }
  v380 = v378 >> 5;
  v381 = (v378 >> 5) + v376;
  if (v381 >> 59)
    sub_1D3D6D4F8();
  if ((rect_24 - (char *)__p) >> 4 > v381)
    v381 = (rect_24 - (char *)__p) >> 4;
  if ((unint64_t)(rect_24 - (char *)__p) >= 0x7FFFFFFFFFFFFFE0)
    v382 = 0x7FFFFFFFFFFFFFFLL;
  else
    v382 = v381;
  if (v382)
  {
    v383 = (float64x2_t *)sub_1D3E36A08(v382);
    v385 = v384;
  }
  else
  {
    v383 = 0;
    v385 = 0;
  }
  v394 = &v383[2 * v380];
  v395 = (char *)&v394[2 * v376];
  v396 = 32 * v376;
  v397 = v394;
  do
  {
    v398 = *v368;
    v399 = v368[1];
    v368 += 2;
    *v397 = v398;
    v397[1] = v399;
    v397 += 2;
    v396 -= 32;
  }
  while (v396);
  v49 = v448;
  if (v456 != __p)
  {
    v400 = 2 * v380;
    v401 = __p - 2;
    do
    {
      v402 = (char *)&v383[v400];
      v403 = v401[v400 + 1];
      *((float64x2_t *)v402 - 2) = v401[v400];
      *((float64x2_t *)v402 - 1) = v403;
      v400 -= 2;
    }
    while (v400 * 16);
    v394 = v383;
  }
  if (v456 != v379)
  {
    v404 = v395;
    memmove(v395, v379, (char *)v456 - (char *)v379);
    v395 = v404;
  }
  rect_24 = (char *)&v383[2 * v385];
  v48 = (CGPoint *)&v395[(char *)v456 - (char *)v379];
  if (__p)
    operator delete(__p);
  __p = v394;
LABEL_517:
  v515 = (float64x2_t *)__dst;
  if (!v449)
  {
    if (((*(_BYTE *)(a1[1] + 48) != 0) & v454) != 0)
      goto LABEL_523;
LABEL_521:
    sub_1D3D91BB4(&v504);
    sub_1D3D91AD4(&v505);
    goto LABEL_43;
  }
  if ((v454 & 1) == 0)
    goto LABEL_521;
LABEL_523:
  sub_1D3D91BB4(&v504);
  sub_1D3D91AD4(&v505);
  v454 = 1;
LABEL_524:
  if (*(_BYTE *)(a1[1] + 49))
  {
    v410 = __p;
    if (__p != (float64x2_t *)v48)
    {
      v411 = (double *)__p;
      do
      {
        v412 = (unint64_t *)*v462;
        v413 = (unint64_t *)v462[1];
        while (1)
        {
          if (v412 == v413)
          {
            v411 += 4;
            goto LABEL_546;
          }
          v414 = atomic_load(v412);
          if (*(_BYTE *)(v414 + 96) && *(_QWORD *)(v414 + 72) != *(_QWORD *)(v414 + 80))
          {
            v415 = atomic_load(v412);
            if (!*(_BYTE *)(v415 + 344)
              || (v416 = atomic_load(v412),
                  v417 = *(_QWORD *)(v416 + 328) - *(_QWORD *)(v416 + 320),
                  v418 = *(_QWORD *)(v414 + 72),
                  v419 = *(_QWORD *)(v414 + 80),
                  v417 != v419 - v418))
            {
              _os_assumes_log();
              v418 = *(_QWORD *)(v414 + 72);
              v419 = *(_QWORD *)(v414 + 80);
            }
            if (v419 != v418)
              break;
          }
LABEL_541:
          ++v412;
        }
        v420 = 0;
        v421 = 0;
        while (1)
        {
          if (!*(_BYTE *)(v414 + 96) || (v422 = atomic_load(v412), !*(_BYTE *)(v422 + 344)))
            sub_1D3D74BBC();
          v423 = *(_QWORD *)(v422 + 320);
          v424 = *(double *)(v418 + v420) - *v411;
          v425 = v411[2] + *(double *)(v423 + v420);
          v426 = fabsf(v425);
          if (fabsf(v424) < (float)(v426 + v426))
          {
            v427 = v411[3] + *(double *)(v423 + v420 + 8);
            v428 = fabsf(v427);
            v429 = *(double *)(v418 + v420 + 8) - v411[1];
            if (fabsf(v429) < (float)(v428 + v428))
              break;
          }
          ++v421;
          v418 = *(_QWORD *)(v414 + 72);
          v420 += 16;
          if (v421 >= (*(_QWORD *)(v414 + 80) - v418) >> 4)
            goto LABEL_541;
        }
        v430 = (char *)v48 - (char *)(v411 + 4);
        if (v430)
          memmove(v411, v411 + 4, v430);
        v48 = (CGPoint *)((char *)v411 + v430);
LABEL_546:
        ;
      }
      while (v411 != (double *)v48);
      if (__p != (float64x2_t *)v48)
      {
        *(_QWORD *)&buf.a = CFArrayCreateMutable(allocator, ((char *)v48 - (char *)__p) >> 5, MEMORY[0x1E0C9B378]);
        v431 = (CGPoint *)__p;
        do
        {
          v432 = (__CFArray *)atomic_load((unint64_t *)&buf);
          p_buf = (CGAffineTransform *)CGPointCreateDictionaryRepresentation(*v431);
          v433 = (const void *)atomic_load((unint64_t *)&p_buf);
          CFArrayAppendValue(v432, v433);
          sub_1D3D8BAAC((unint64_t *)&p_buf);
          v431 += 2;
        }
        while (v431 != v48);
        v434 = (CGAffineTransform *)atomic_load(v462 + 3);
        if (v434)
          v434 = (CGAffineTransform *)CFRetain(v434);
        p_buf = v434;
        v435 = (__CFDictionary *)atomic_load((unint64_t *)&p_buf);
        v436 = (const void *)atomic_load((unint64_t *)&buf);
        CFDictionarySetValue(v435, CFSTR("LocatorPoints"), v436);
        sub_1D3D740C8((unint64_t *)&p_buf);
        sub_1D3D74C60((unint64_t *)&buf);
      }
    }
  }
  else
  {
    v410 = __p;
  }
LABEL_554:
  sub_1D3D7FBF4(&v512);
  sub_1D3E369D8(&v513);
  if (__dst)
  {
    v515 = (float64x2_t *)__dst;
    operator delete(__dst);
  }
  if (v410)
    operator delete(v410);
  if ((v454 & 1) != 0)
    return 0;
  else
    return 19;
}

void sub_1D3E36290(_Unwind_Exception *a1)
{
  unsigned int **v2;
  void *v3;
  unsigned int *v4;
  void *v5;
  void *v6;

  sub_1D3D74C60(&STACK[0x490]);
  sub_1D3D7FBF4(v2);
  sub_1D3E369D8(&v4);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  if (v3)
    operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1D3E363A8()
{
  sub_1D3D91AD4((unsigned int **)&STACK[0x230]);
  JUMPOUT(0x1D3E363ECLL);
}

void sub_1D3E363CC()
{
  JUMPOUT(0x1D3E363D4);
}

void sub_1D3E363F8()
{
  sub_1D3D91BB4((unsigned int **)&STACK[0x2B8]);
  JUMPOUT(0x1D3E36410);
}

void sub_1D3E36424()
{
  JUMPOUT(0x1D3E36438);
}

unsigned int *sub_1D3E364B4(unsigned int *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  if (a4)
  {
    if (a4 >> 61)
      sub_1D3D6D4F8();
    v6 = result;
    result = (unsigned int *)sub_1D3D6D8A0(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      v10 = result;
      do
      {
        *(_QWORD *)v10 = 0;
        v11 = *a2;
        if (*a2)
        {
          v12 = (unsigned int *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          result = *(unsigned int **)v10;
          if (*(_QWORD *)v10)
            result = sub_1D3D6D13C(result);
        }
        *(_QWORD *)v10 = v11;
        v10 += 2;
        ++a2;
        v9 += 8;
      }
      while (a2 != a3);
      v7 = v10;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1D3E36584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D3D7F844(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E365C0(_QWORD *a1, uint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D3D6D4F8();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)sub_1D3DB485C(v7);
  else
    v8 = 0;
  v9 = v7 + 24 * v2;
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  sub_1D3E364B4((unsigned int *)v9, *a2, a2[1], a2[1] - *a2);
  v13 += 24;
  sub_1D3E09140(a1, v12);
  v10 = a1[1];
  sub_1D3E36A54((uint64_t)v12);
  return v10;
}

void sub_1D3E366BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3E36A54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E366D0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *i;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  _QWORD *v26;
  _QWORD *v27;

  if (!*(_BYTE *)(a1 + 24))
  {
    sub_1D3D7F3AC(a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
  if ((_QWORD *)a1 != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 16))
    {
      v5 = *(uint64_t **)a1;
      v7 = (uint64_t **)(a1 + 8);
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = a1 + 8;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      if (v5[1])
        v8 = v5[1];
      else
        v8 = (uint64_t)v5;
      if (v8)
      {
        v9 = sub_1D3E0D084(v8);
        if (v4 == v3)
        {
          v11 = (_QWORD *)v8;
        }
        else
        {
          v10 = v4;
          do
          {
            v11 = v9;
            v12 = *((_DWORD *)v10 + 7);
            *(_DWORD *)(v8 + 28) = v12;
            *(_DWORD *)(v8 + 32) = *((_DWORD *)v10 + 8);
            v13 = *v7;
            v14 = (uint64_t **)(a1 + 8);
            v15 = (uint64_t **)(a1 + 8);
            if (*v7)
            {
              do
              {
                while (1)
                {
                  v14 = (uint64_t **)v13;
                  if (v12 >= *((_DWORD *)v13 + 7))
                    break;
                  v13 = (uint64_t *)*v13;
                  v15 = v14;
                  if (!*v14)
                    goto LABEL_16;
                }
                v13 = (uint64_t *)v13[1];
              }
              while (v13);
              v15 = v14 + 1;
            }
LABEL_16:
            sub_1D3D7F928((uint64_t **)a1, (uint64_t)v14, v15, (uint64_t *)v8);
            if (v9)
              v9 = sub_1D3E0D084((uint64_t)v9);
            else
              v9 = 0;
            v16 = (_QWORD *)v10[1];
            if (v16)
            {
              do
              {
                v4 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v4 = (_QWORD *)v10[2];
                v17 = *v4 == (_QWORD)v10;
                v10 = v4;
              }
              while (!v17);
            }
            if (!v11)
              break;
            v8 = (uint64_t)v11;
            v10 = v4;
          }
          while (v4 != v3);
        }
        sub_1D3D7F520(v11);
        if (!v9)
          goto LABEL_35;
        for (i = (_QWORD *)v9[2]; i; i = (_QWORD *)i[2])
          v9 = i;
        v18 = v9;
      }
      else
      {
        v18 = 0;
      }
      sub_1D3D7F520(v18);
    }
LABEL_35:
    if (v4 != v3)
    {
      v20 = (uint64_t **)(a1 + 8);
      do
      {
        v21 = (uint64_t *)operator new(0x28uLL);
        v22 = *(_QWORD *)((char *)v4 + 28);
        *(uint64_t *)((char *)v21 + 28) = v22;
        v23 = *v20;
        v24 = (uint64_t **)(a1 + 8);
        v25 = (uint64_t **)(a1 + 8);
        if (*v20)
        {
          do
          {
            while (1)
            {
              v24 = (uint64_t **)v23;
              if (*((_DWORD *)v23 + 7) <= (int)v22)
                break;
              v23 = (uint64_t *)*v23;
              v25 = v24;
              if (!*v24)
                goto LABEL_43;
            }
            v23 = (uint64_t *)v23[1];
          }
          while (v23);
          v25 = v24 + 1;
        }
LABEL_43:
        sub_1D3D7F928((uint64_t **)a1, (uint64_t)v24, v25, v21);
        v26 = (_QWORD *)v4[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v4[2];
            v17 = *v27 == (_QWORD)v4;
            v4 = v27;
          }
          while (!v17);
        }
        v4 = v27;
      }
      while (v27 != v3);
    }
  }
  return a1;
}

uint64_t *sub_1D3E3690C(uint64_t *a1)
{
  int v1;

  if (!a1)
LABEL_7:
    sub_1D3D93CBC("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v1 = *((_DWORD *)a1 + 7);
      if (v1 < 10)
        break;
      a1 = (uint64_t *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v1 == 9)
      return a1 + 4;
    a1 = (uint64_t *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

void sub_1D3E36958(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1D3D7F844(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int **sub_1D3E369D8(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_1D3D6D13C(v2);
  return a1;
}

void *sub_1D3E36A08(unint64_t a1)
{
  if (a1 >> 59)
    sub_1D3D6D50C();
  return operator new(32 * a1);
}

void sub_1D3E36A40()
{
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E36A54(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_1D3D7F844(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D3E36AB4()
{
  JUMPOUT(0x1D8254C54);
}

void sub_1D3E36AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  unint64_t v26;
  __int128 v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = *(double *)(a1 + 24);
  v8 = *(double *)(a1 + 32);
  v9 = *(double *)(a1 + 40);
  v10 = *(double *)(a1 + 48);
  v11 = *(double *)(a1 + 56) + v9 * v6 + v7 * v5;
  v12 = *(double *)(a1 + 64) + v10 * v6 + v8 * v5;
  v13 = v9 * 0.5 + v7 * 0.5;
  v14 = v10 * 0.5 + v8 * 0.5;
  v16 = *(double **)(v4 + 8);
  v15 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(double **)v4;
    v19 = ((uint64_t)v16 - *(_QWORD *)v4) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      sub_1D3D6D4F8();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 4 > v20)
      v20 = v21 >> 4;
    v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0;
    v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22)
      v23 = v20;
    if (v23)
    {
      v23 = (unint64_t)sub_1D3E36A08(v23);
      v18 = *(double **)v4;
      v16 = *(double **)(v4 + 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = (double *)(v23 + 32 * v19);
    *v25 = v11;
    v25[1] = v12;
    v26 = v23 + 32 * v24;
    v25[2] = v13;
    v25[3] = v14;
    v17 = v25 + 4;
    if (v16 != v18)
    {
      do
      {
        v27 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v25 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v25 - 1) = v27;
        v25 -= 4;
        v16 -= 4;
      }
      while (v16 != v18);
      v18 = *(double **)v4;
    }
    *(_QWORD *)v4 = v25;
    *(_QWORD *)(v4 + 8) = v17;
    *(_QWORD *)(v4 + 16) = v26;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v16 = v11;
    v16[1] = v12;
    v17 = v16 + 4;
    v16[2] = v13;
    v16[3] = v14;
  }
  *(_QWORD *)(v4 + 8) = v17;
}

void sub_1D3E36C24(void **a1)
{
  void *v1;

  if (a1)
  {
    v1 = *a1;
    if (v1)
      free(v1);
  }
}

void sub_1D3E36C38(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t sub_1D3E36CA0()
{
  uint64_t result;

  result = pthread_once(&stru_1EDB89228, (void (*)(void))sub_1D3E3715C);
  if ((_DWORD)result)
    exit(1);
  return result;
}

void sub_1D3E36CD0(int *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a2 + 8);
  if (v4)
    free(v4);
  if (*((_QWORD *)a1 + 1))
  {
    v5 = malloc_type_malloc(4 * *a1, 0x100004052888210uLL);
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)a2 = *a1;
    memcpy(v5, *((const void **)a1 + 1), 4 * *a1);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)a2 = 0;
  }
}

void sub_1D3E36D4C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 64);
    if (v2)
      free(v2);
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    v3 = *(void **)(a1 + 80);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
}

void sub_1D3E36D94(int *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = a2 + 56;
  v5 = *(void **)(a2 + 64);
  if (v5)
    free(v5);
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(void **)(a2 + 80);
  if (v6)
    free(v6);
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  v7 = *((_OWORD *)a1 + 1);
  v8 = *((_OWORD *)a1 + 2);
  v9 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)a1 + 4);
  v10 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  sub_1D3E36CD0(a1 + 14, v4);
  sub_1D3E36CD0(a1 + 18, a2 + 72);
}

void sub_1D3E36E20(uint64_t a1)
{
  void *v2;

  sub_1D3E36D4C(*(_QWORD *)(a1 + 64));
  v2 = *(void **)(a1 + 64);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 64) = 0;
}

void sub_1D3E36E54(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D3E36E20(a1);
}

void sub_1D3E36E84(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t i;
  __int128 v10;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = v5;
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  v6 = *(void **)(a2 + 16);
  if (v6 != v4)
  {
    if (v6)
      free(v6);
    v7 = malloc_type_malloc(*(_QWORD *)(a1 + 8) + 1, 0x100004077774924uLL);
    *(_QWORD *)(a2 + 16) = v7;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      for (i = 0; i < v8; ++i)
      {
        *(_BYTE *)(*(_QWORD *)(a2 + 16) + i) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + i);
        v8 = *(_QWORD *)(a1 + 8);
      }
      v7 = *(_BYTE **)(a2 + 16);
    }
    v7[v8] = 0;
  }
  v10 = *(_OWORD *)(a1 + 28);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(_OWORD *)(a2 + 28) = v10;
  sub_1D3E36D94(*(int **)(a1 + 64), *(_QWORD *)(a2 + 64));
}

void sub_1D3E36F54(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  if (v2)
    free(v2);
  *(_QWORD *)a1 = 0;
  sub_1D3E36D4C(*(_QWORD *)(a1 + 80));
  v3 = *(void **)(a1 + 80);
  if (v3)
    free(v3);
  *(_QWORD *)(a1 + 80) = 0;
}

void sub_1D3E36F98(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_QWORD *)a2)
    free(*(void **)a2);
  v4 = malloc_type_malloc(4 * *(int *)(a1 + 8), 0x100004052888210uLL);
  *(_QWORD *)a2 = v4;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= 1)
  {
    v6 = *(int **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    do
    {
      v8 = *v6++;
      *v4++ = v8;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a1 + 12);
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(a1 + 20);
  v9 = *(_OWORD *)(a1 + 28);
  v10 = *(_OWORD *)(a1 + 44);
  v11 = *(_OWORD *)(a1 + 60);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 76);
  *(_OWORD *)(a2 + 60) = v11;
  *(_OWORD *)(a2 + 44) = v10;
  *(_OWORD *)(a2 + 28) = v9;
  sub_1D3E36D94(*(int **)(a1 + 80), *(_QWORD *)(a2 + 80));
}

uint64_t sub_1D3E37044(int a1, CFStringRef theString, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v16;
  char *v17;
  uint64_t result;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  int *v23;

  v16 = CFStringGetLength(theString) + 1;
  v17 = (char *)malloc_type_malloc(v16, 0x100004077774924uLL);
  result = CFStringGetCString(theString, v17, v16, 0x600u);
  if (dword_1EDB89220)
    exit(1);
  v19 = dword_1EDB89DD8;
  if (dword_1EDB89DD8 <= 31)
  {
    if (dword_1EDB89DD8 < 1)
    {
LABEL_7:
      v23 = &dword_1EDB895D0[16 * (uint64_t)dword_1EDB89DD8];
      *v23 = a1;
      v23[1] = 0;
      *((_QWORD *)v23 + 1) = v17;
      *((_QWORD *)v23 + 2) = theString;
      v23[6] = a3;
      *((_BYTE *)v23 + 28) = a4;
      *(_WORD *)((char *)v23 + 29) = 0;
      *((_BYTE *)v23 + 31) = 0;
      *((_QWORD *)v23 + 4) = a5;
      *((_QWORD *)v23 + 5) = a6;
      *((_QWORD *)v23 + 6) = a7;
      *((_QWORD *)v23 + 7) = a8;
      dword_1EDB89DD8 = v19 + 1;
    }
    else
    {
      v20 = dword_1EDB895D0;
      v21 = dword_1EDB89DD8;
      while (1)
      {
        v22 = *v20;
        v20 += 16;
        if (v22 == a1)
          break;
        if (!--v21)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_1D3E3715C()
{
  uint64_t result;

  if (dword_1EDB89220 == -1)
  {
    dword_1EDB89220 = 0;
    sub_1D3E37044(0, CFSTR("EAN13"), 30, 1, (uint64_t)sub_1D3E3EDE4, (uint64_t)sub_1D3E3D2F0, (uint64_t)sub_1D3E3EEF8, 0);
    sub_1D3E37044(1, CFSTR("EAN8"), 22, 1, (uint64_t)sub_1D3E3EE40, (uint64_t)sub_1D3E3E794, (uint64_t)sub_1D3E3EF14, 0);
    sub_1D3E37044(2, CFSTR("UPCE"), 17, 1, (uint64_t)sub_1D3E3EE9C, (uint64_t)sub_1D3E3E960, (uint64_t)sub_1D3E3EF20, 0);
    sub_1D3E37044(3, CFSTR("Code93"), 16, 0, (uint64_t)sub_1D3E40BB0, (uint64_t)sub_1D3E40584, (uint64_t)sub_1D3E40C00, 0);
    sub_1D3E37044(4, CFSTR("Code93i"), 16, 0, (uint64_t)sub_1D3E427F4, (uint64_t)sub_1D3E42144, (uint64_t)sub_1D3E44118, 0);
    sub_1D3E37044(5, CFSTR("Code39"), 15, 1, (uint64_t)sub_1D3E4043C, (uint64_t)sub_1D3E4040C, (uint64_t)sub_1D3E40484, 0);
    sub_1D3E37044(6, CFSTR("Code39_fullAscii"), 15, 1, (uint64_t)sub_1D3E4043C, (uint64_t)sub_1D3E40418, (uint64_t)sub_1D3E40484, 0);
    sub_1D3E37044(7, CFSTR("Code39_checksum"), 20, 1, (uint64_t)sub_1D3E4043C, (uint64_t)sub_1D3E40424, (uint64_t)sub_1D3E404AC, 0);
    sub_1D3E37044(8, CFSTR("Code39_fullAscii_checksum"), 20, 1, (uint64_t)sub_1D3E4043C, (uint64_t)sub_1D3E40430, (uint64_t)sub_1D3E404AC, 0);
    sub_1D3E37044(9, CFSTR("Code128"), 13, 1, (uint64_t)sub_1D3E3F640, (uint64_t)sub_1D3E3F238, (uint64_t)sub_1D3E3FC38, 0);
    sub_1D3E37044(10, CFSTR("I2of5"), 14, 0, (uint64_t)sub_1D3E4E3D8, (uint64_t)sub_1D3E4E328, (uint64_t)sub_1D3E4E41C, 0);
    sub_1D3E37044(11, CFSTR("I2of5_checksum"), 14, 0, (uint64_t)sub_1D3E4E3D8, (uint64_t)sub_1D3E4E370, (uint64_t)sub_1D3E4E41C, 0);
    sub_1D3E37044(12, CFSTR("ITF14"), 39, 0, (uint64_t)sub_1D3E4E3D8, (uint64_t)sub_1D3E4E3B8, (uint64_t)sub_1D3E4E44C, 0);
    sub_1D3E37044(13, CFSTR("PDF417"), 12, 1, (uint64_t)sub_1D3E48E8C, (uint64_t)sub_1D3E44A68, (uint64_t)sub_1D3E48F14, (uint64_t)sub_1D3E464E0);
    sub_1D3E37044(14, CFSTR("MicroPDF417"), 11, 1, (uint64_t)sub_1D3E21584, (uint64_t)sub_1D3E1E534, (uint64_t)sub_1D3E21854, (uint64_t)sub_1D3E1F0BC);
    sub_1D3E37044(15, CFSTR("MSIPlessey"), 15, 0, (uint64_t)sub_1D3DBA44C, (uint64_t)sub_1D3DBA0A8, (uint64_t)sub_1D3DBA488, 0);
    result = sub_1D3E37044(16, CFSTR("GS1DataBarExpanded"), 12, 1, (uint64_t)sub_1D3DE6158, (uint64_t)sub_1D3DE3FE4, (uint64_t)sub_1D3DE6190, 0);
    dword_1EDB89220 = 1;
  }
  return result;
}

BOOL sub_1D3E37508(const __CFString *a1, _DWORD *a2)
{
  CFIndex v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  const char **v9;

  v4 = CFStringGetLength(a1) + 1;
  v5 = (char *)malloc_type_malloc(v4, 0x100004077774924uLL);
  if (CFStringGetCString(a1, v5, v4, 0x600u) && (v6 = dword_1EDB89DD8, dword_1EDB89DD8 >= 1))
  {
    v7 = 0;
    v8 = 1;
    v9 = (const char **)&qword_1EDB895D8;
    while (strcmp(v5, *v9))
    {
      v8 = ++v7 < v6;
      v9 += 8;
      if (v6 == v7)
        goto LABEL_8;
    }
    if (a2)
      *a2 = v7;
  }
  else
  {
    v8 = 0;
  }
LABEL_8:
  free(v5);
  return v8;
}

uint64_t sub_1D3E375DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v25[4];
  void *v26[2];
  __int128 v27;
  uint64_t v28;

  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  memset(v25, 0, sizeof(v25));
  v13 = malloc_type_malloc(0x58uLL, 0x1080040FF0494E1uLL);
  v26[0] = v13;
  *((_QWORD *)v13 + 8) = 0;
  *((_DWORD *)v13 + 18) = 0;
  *((_QWORD *)v13 + 10) = 0;
  *v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  *(_OWORD *)((char *)v13 + 44) = 0u;
  sub_1D3E36D94(*(int **)(a5 + 64), (uint64_t)v13);
  v28 = *(_QWORD *)(a5 + 96);
  if (dword_1EDB89DD8 < 1)
  {
    v15 = 14;
  }
  else
  {
    v14 = 0;
    v15 = 14;
    v16 = &qword_1EDB895F8;
    do
    {
      LODWORD(v25[0]) = v14;
      v17 = *(_DWORD *)v26[0] & (1 << v14);
      if (v17)
        v18 = a8 == 0;
      else
        v18 = 1;
      if (!v18)
        v17 = *((unsigned __int8 *)v16 - 12);
      if (v17)
      {
        BYTE8(v27) = a8;
        v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD))*v16)(a1, a2, a3, a4, v25, a6, a7);
        v15 = (_DWORD)v15 == 14 ? v19 : v15;
        if (v19 <= 1)
        {
          v20 = v19;
          sub_1D3E36E84((uint64_t)v25, a5);
          v15 = v20;
          if (*((float *)&v25[1] + 2) > 0.8)
            break;
        }
      }
      ++v14;
      v16 += 8;
    }
    while (v14 < dword_1EDB89DD8);
    v13 = v26[0];
  }
  sub_1D3E36D4C((uint64_t)v13);
  if (v26[0])
    free(v26[0]);
  v26[0] = 0;
  if (*(_QWORD *)&v25[1] != *(_QWORD *)(a5 + 16) && *(_QWORD *)&v25[1])
    free(*(void **)&v25[1]);
  return v15;
}

uint64_t sub_1D3E377AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6)
{
  int v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;

  v6 = dword_1EDB89DD8;
  if (dword_1EDB89DD8 < 1)
  {
    v13 = 0;
  }
  else
  {
    v11 = result;
    v12 = 0;
    v13 = 0;
    v14 = &qword_1EDB89600;
    do
    {
      if (((1 << v12) & a6) != 0)
      {
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v14)(v11, a2, a3, a4);
        if ((_DWORD)result)
          v15 = 1 << v12;
        else
          v15 = 0;
        v13 |= v15;
        v6 = dword_1EDB89DD8;
      }
      ++v12;
      v14 += 8;
    }
    while (v12 < v6);
  }
  *a5 = v13;
  return result;
}

void sub_1D3E37884()
{
  JUMPOUT(0x1D8254C54);
}

void sub_1D3E37898(int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v11;
  uint64_t *v12;
  void **v13;
  void *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20[3];
  uint64_t v21[3];
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;

  v9 = *a4;
  if (!*a4)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1E95AF190;
    v9[1] = v9 + 1;
    v9[2] = v9 + 1;
    v9[3] = 0;
    v11 = *a4;
    *a4 = v9;
    if (v11)
    {
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      v9 = *a4;
    }
  }
  v36 = 0;
  v37 = 0;
  v35 = 0;
  sub_1D3DB8410(&v35, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v12 = v9 + 1;
  sub_1D3E37B3C(&v22, a1, a2, (uint64_t)&v35, 0, v12);
  sub_1D3E389D4(a5, &v22);
  sub_1D3DB92AC(&v22);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (*(_DWORD *)a5)
  {
    memset(v20, 0, sizeof(v20));
    sub_1D3DB8410(v20, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
    sub_1D3E37B3C(v21, a1, a2, (uint64_t)v20, 1, v12);
    sub_1D3E389D4((uint64_t)&v22, v21);
    *(_QWORD *)a5 = v22;
    v13 = (void **)(a5 + 8);
    if (*(char *)(a5 + 31) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = *(_OWORD *)v23;
    *(_QWORD *)(a5 + 24) = v24;
    HIBYTE(v24) = 0;
    LODWORD(v23[0]) = 0;
    v14 = *(void **)(a5 + 64);
    v15 = v26;
    *(_OWORD *)(a5 + 32) = v25;
    *(_OWORD *)(a5 + 48) = v15;
    if (v14)
    {
      *(_QWORD *)(a5 + 72) = v14;
      operator delete(v14);
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 72) = 0;
      *(_QWORD *)(a5 + 80) = 0;
    }
    v17 = a5 + 104;
    v16 = *(_QWORD **)(a5 + 104);
    *(_OWORD *)(a5 + 64) = *(_OWORD *)__p;
    *(_QWORD *)(a5 + 80) = v28;
    __p[1] = 0;
    v28 = 0;
    __p[0] = 0;
    *(_DWORD *)(a5 + 88) = v29;
    sub_1D3E0BCE8(v16);
    v18 = v31;
    *(_QWORD *)(a5 + 96) = v30;
    *(_QWORD *)(a5 + 104) = v18;
    v19 = v32;
    *(_QWORD *)(a5 + 112) = v32;
    if (v19)
    {
      v18[2] = v17;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
      v18 = 0;
    }
    else
    {
      *(_QWORD *)(a5 + 96) = v17;
    }
    *(_BYTE *)(a5 + 120) = v33;
    *(_QWORD *)(a5 + 124) = v34;
    sub_1D3E0BCE8(v18);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
    sub_1D3DB92AC(v21);
    if (v20[0])
      operator delete(v20[0]);
  }
}

void sub_1D3E37AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_1D3DB92AC(&a12);
  if (__p)
    operator delete(__p);
  sub_1D3E2BB94(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E37B3C(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, int a5, uint64_t *a6)
{
  unint64_t v8;
  __int128 v9;
  _OWORD *v10;
  int *v11;
  int *v12;
  double v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  BOOL v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *i;
  int v25;
  int v26;
  int v27;
  float v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  char *v43;
  char *v44;
  int v45;
  BOOL v46;
  _BYTE *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  int v53;
  int v54;
  double v55;
  double v56;
  int v57;
  uint64_t v58;
  float v59;
  void *v60;
  float v61;
  float v62;
  int v63;
  char *v64;
  double v65;
  float v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  char *v82;
  float v83;
  uint64_t v84;
  int v85;
  int v86;
  _DWORD *v87;
  uint64_t j;
  uint64_t v89;
  float v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  float v96;
  double v97;
  float v98;
  float v99;
  _BYTE *v100;
  int *v101;
  int v102;
  uint64_t *v103;
  unint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  int v108;
  float v109;
  uint64_t v110;
  char *v111;
  char *v112;
  BOOL v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  char **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char **v127;
  uint64_t v128;
  _QWORD *v129;
  BOOL v130;
  BOOL v131;
  char **v132;
  _DWORD *v133;
  _DWORD *v134;
  char **v135;
  _DWORD *v136;
  char *v137;
  char **v138;
  unint64_t v139;
  char **v140;
  unint64_t v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  char *v153;
  char *v154;
  char ***v155;
  char **v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  char *v162;
  unint64_t v163;
  float v164;
  double v165;
  uint64_t *v166;
  uint64_t *v167;
  double v168;
  int v169;
  int v170;
  uint64_t v171;
  char *v172;
  _OWORD *v173;
  int v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  int v181;
  __int16 v182;
  char *v183;
  char **v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _BYTE v189[40];
  void *__p;
  uint64_t v191;
  uint64_t v192;
  _OWORD v193[3];
  __int128 v194;
  char *v195;
  int v196;
  char v197;
  uint64_t v198;

  v8 = 0;
  v198 = *MEMORY[0x1E0C80C00];
  v183 = (char *)&v183;
  v184 = &v183;
  v185 = 0;
  v9 = 0uLL;
  *(_OWORD *)((char *)v193 + 4) = 0u;
  *(_OWORD *)((char *)&v193[1] + 4) = 0u;
  v10 = &v189[8];
  v11 = (int *)&v187 + 1;
  v12 = (int *)&v187;
  v13 = (double)a2;
  v14 = -1105618534;
  *(double *)&v15 = 0.3;
  while (2)
  {
    v188 = -1;
    *(_DWORD *)v189 = -1;
    v16 = ((v8 & 1) == 0) ^ a5;
    *v10 = v9;
    v10[1] = v9;
    v186 = 0;
    v187 = 0;
    while (2)
    {
      v17 = *a3;
      v18 = (_BYTE *)a3[1];
      if (v8)
      {
        v40 = *((_DWORD *)v183 + 10);
        v41 = 715827883 * (v40 - *((_DWORD *)v183 + 9));
        v42 = HIDWORD(v41) + (v41 >> 63) + v40;
        v19 = v8;
        v20 = v8;
        i = (_BYTE *)*a3;
        v23 = (_BYTE *)a3[1];
        if (v42 >= (int)v18 - (int)v17)
          goto LABEL_73;
      }
      else
      {
        v19 = 0;
        v20 = 0;
        v42 = 0;
      }
LABEL_4:
      if (a5)
        v20 = !v20;
      v21 = (_BYTE *)(v17 + v42);
      if (v18 == v21)
        goto LABEL_152;
      while (*v21 != 1)
      {
        if (++v21 == v18)
        {
          v21 = v18;
          break;
        }
      }
      if (v21 == v18)
      {
LABEL_152:
        v8 = v19;
        goto LABEL_153;
      }
      v22 = 0;
      v23 = v21;
      for (i = v21; ; v21 = i)
      {
        do
        {
          if (*i == (*v21 == 0))
            goto LABEL_15;
          ++i;
        }
        while (i != v18);
        i = v18;
LABEL_15:
        *((_DWORD *)&v186 + v22) = (_DWORD)i - (_DWORD)v21;
        if (i == v18)
          goto LABEL_152;
        if (++v22 == 4)
          break;
LABEL_66:
        ;
      }
      v25 = HIDWORD(v186);
      v26 = HIDWORD(v186) + v186;
      if (v20)
        v27 = HIDWORD(v187) + v187;
      else
        v27 = HIDWORD(v186) + v186;
      v28 = (float)v27 / (float)(HIDWORD(v187) + v187 + HIDWORD(v186) + v186);
      if (v28 < 0.79167 || v28 > 0.89286)
        goto LABEL_65;
      if ((int)v186 <= SHIDWORD(v186))
        v29 = (int *)&v186;
      else
        v29 = (int *)&v186 + 1;
      if ((int)v186 <= SHIDWORD(v186))
        v30 = (int *)&v186 + 1;
      else
        v30 = (int *)&v186;
      if ((int)v187 <= SHIDWORD(v187))
      {
        if (SHIDWORD(v186) >= (int)v186)
          v33 = v186;
        else
          v33 = HIDWORD(v186);
        if (SHIDWORD(v186) <= (int)v186)
          v25 = v186;
        if ((int)v187 >= v33)
          v31 = v29;
        else
          v31 = v12;
        if (SHIDWORD(v187) >= v25)
          v32 = v11;
        else
          v32 = v30;
      }
      else
      {
        if (SHIDWORD(v187) >= *v29)
          v31 = v29;
        else
          v31 = v11;
        if ((int)v187 >= *v30)
          v32 = v12;
        else
          v32 = v30;
      }
      v34 = *v32;
      if (!v20)
      {
        if ((int)v187 - HIDWORD(v187) >= 0)
          v38 = v187 - HIDWORD(v187);
        else
          v38 = HIDWORD(v187) - v187;
        if (v38 >= 3)
          v39 = 3 * *v31;
        else
          v39 = ((HIDWORD(v187) + v187 + (HIDWORD(v187) + (int)v187 < 0)) & 0xFFFFFFFE)
              + (HIDWORD(v187) + (int)v187) / 2;
        if (v34 < 4 * v39)
          goto LABEL_73;
        goto LABEL_65;
      }
      v35 = (int)v186 - HIDWORD(v186) >= 0 ? v186 - HIDWORD(v186) : HIDWORD(v186) - (int)v186;
      if (v35 >= 3)
      {
        v37 = 3 * *v31;
      }
      else
      {
        v36 = v26 >= 0 ? HIDWORD(v186) + v186 : v26 + 1;
        v37 = (v36 & 0xFFFFFFFE) + (v36 >> 1);
      }
      if (v34 >= (int)(4 * v37))
      {
LABEL_65:
        v23 += v26;
        v186 = v187;
        v22 = 2;
        goto LABEL_66;
      }
      v43 = (char *)&v186 + 4;
      v44 = (char *)v11;
      do
      {
        v45 = *((_DWORD *)v43 - 1);
        *((_DWORD *)v43 - 1) = *(_DWORD *)v44;
        *(_DWORD *)v44 = v45;
        v44 -= 4;
        v46 = v43 >= v44;
        v43 += 4;
      }
      while (!v46);
LABEL_73:
      if (v23 >= i)
        goto LABEL_152;
      v177 = a1;
      if (v16)
      {
        v47 = v23;
        while (v47 != (_BYTE *)v17)
        {
          v48 = *--v47;
          if (v48 == *v23)
          {
            v49 = (_DWORD)v47 + 1;
            goto LABEL_85;
          }
        }
        v49 = v17;
      }
      else if (v18 == ++i)
      {
LABEL_82:
        v49 = (int)v23;
        LODWORD(i) = (_DWORD)v18;
      }
      else
      {
        while (*i)
        {
          if (++i == v18)
            goto LABEL_82;
        }
        v49 = (int)v23;
      }
LABEL_85:
      v172 = (char *)v11;
      v173 = v10;
      v50 = (_DWORD)i - v17;
      v51 = (_DWORD)i - v49;
      v52 = 0.0;
      v174 = a5;
      if ((int)i - v49 >= 23)
      {
        v170 = v49 - v17;
        v168 = *(double *)&v15;
        v166 = a3;
        __p = 0;
        v191 = 0;
        v192 = 0;
        v58 = a4;
        sub_1D3DB8410(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
        v59 = 0.0;
        v60 = __p;
        v57 = v50;
        v165 = v13;
        v164 = *(float *)&v14;
        if (v50 <= v170)
        {
          v61 = 0.0;
          v62 = 0.0;
          a5 = v174;
          a4 = v58;
        }
        else
        {
          a5 = v174;
          a4 = v58;
          if (v170 < 0)
          {
            v61 = 0.0;
            v62 = 0.0;
          }
          else
          {
            v61 = 0.0;
            v62 = 0.0;
            if (v191 - (uint64_t)__p >= (unint64_t)v50)
            {
              v162 = (char *)__p;
              bzero(&v194, 0x400uLL);
              v60 = v162;
              v57 = v50;
              v63 = v170;
              v64 = &v162[v170];
              v65 = 0.0;
              v66 = 0.0;
              do
              {
                v67 = *v64++;
                v66 = v66 + (float)v67;
                v65 = v65 + (double)(int)(v67 * v67);
                ++*((_DWORD *)&v194 + v67);
                ++v63;
              }
              while (v63 < v50);
              v68 = 0;
              v69 = 0;
              v70 = 0;
              v62 = v65 / (double)(v51 + 1) - (float)((float)(v66 / (float)(v51 + 1)) * (float)(v66 / (float)(v51 + 1)));
              v71 = (int)((double)v51 * v168);
              a5 = v174;
              a4 = v58;
              while (1)
              {
                v72 = *((_DWORD *)&v194 + v68);
                if (v72 + v69 >= v71)
                  break;
                v70 += v72 * v68++;
                v69 += v72;
                if (v68 == 256)
                  goto LABEL_99;
              }
              v70 += (v71 - v69) * v68;
LABEL_99:
              v73 = 0;
              v74 = 0;
              v61 = (float)(v70 / v71);
              v75 = 255;
              while (1)
              {
                v76 = *((_DWORD *)&v194 + v75);
                if (v76 + v73 >= v71)
                  break;
                v74 += v76 * v75--;
                v73 += v76;
                if (v75 == -1)
                  goto LABEL_104;
              }
              v74 += (v71 - v73) * v75;
LABEL_104:
              v59 = (float)(v74 / v71);
            }
          }
        }
        if (v60)
        {
          operator delete(v60);
          v57 = v50;
          a4 = v58;
          a5 = v174;
        }
        v77 = 0;
        v78 = (float)v51;
        v79 = (float)v51 / 15.0;
        v80 = 1.0 / (float)(v62 + v62);
        v54 = v170;
        v81 = *(_QWORD *)a4 + v170;
        v53 = -1;
        v82 = (char *)&unk_1D3E75808;
        v14 = LODWORD(v164);
        v83 = v164;
        a3 = v166;
        do
        {
          if (v16)
          {
            v84 = 0;
            v85 = 0;
            do
            {
              v85 += *(_DWORD *)&v82[v84];
              *(_DWORD *)((char *)&v194 + v84) = (int)(float)((float)((float)v85 * v79) + 0.5);
              v84 += 4;
            }
            while (v84 != 16);
            LODWORD(v195) = (int)(float)((float)((float)(v85 + 1) * v79) + 0.5);
          }
          else
          {
            LODWORD(v194) = (int)(float)(v79 + 0.5);
            v86 = 1;
            v87 = (_DWORD *)&v194 + 1;
            for (j = 12; j != -4; j -= 4)
            {
              v86 += *(_DWORD *)&v82[j];
              *v87++ = (int)(float)((float)((float)v86 * v79) + 0.5);
            }
          }
          v89 = 0;
          v90 = 0.0;
          do
          {
            if (v89)
              v91 = *((_DWORD *)&v194 + (v89 - 1));
            else
              v91 = 0;
            v92 = *((int *)&v194 + v89);
            if (v91 < (int)v92)
            {
              v93 = v92 - v91;
              v94 = (unsigned __int8 *)(v81 + v91);
              do
              {
                v95 = *v94++;
                v96 = (float)v95;
                if (((v16 ^ v89) & 1) != 0)
                  v97 = fmin((float)(v96 - v59), 0.0);
                else
                  v97 = fmax((float)(v96 - v61), 0.0);
                v98 = v97;
                v90 = v90 + (float)(v80 * (float)(v98 * v98));
                --v93;
              }
              while (v93);
            }
            ++v89;
          }
          while (v89 != 5);
          v99 = (float)-v90 / v78;
          if (v99 > v83)
          {
            v53 = v77;
            v83 = v99;
          }
          ++v77;
          v82 += 16;
        }
        while (v77 != 6);
        if (v53 < 0)
        {
          v57 = -1;
          v53 = -1;
          v54 = -1;
          v55 = 0.0;
          v56 = 0.0;
          v13 = v165;
        }
        else
        {
          v56 = (double)v170;
          v55 = (double)v57;
          v13 = v165;
          v52 = v165;
        }
        *(double *)&v15 = v168;
      }
      else
      {
        v53 = -1;
        v54 = -1;
        v55 = 0.0;
        v56 = 0.0;
        v57 = -1;
      }
      v188 = __PAIR64__(v54, v53);
      *(_QWORD *)v189 = v57;
      *(double *)&v189[8] = v56;
      *(double *)&v189[16] = v52;
      *(double *)&v189[24] = v55;
      *(double *)&v189[32] = v52;
      v100 = (_BYTE *)a3[1];
      if (v53 < 0)
      {
LABEL_135:
        a1 = v177;
        v11 = (int *)v172;
        v10 = v173;
        if (v100 != v23)
        {
          v105 = *v23 == 0;
          while (*v23 != v105)
          {
            if (++v23 == v100)
            {
              v23 = v100;
              break;
            }
          }
          if (v100 == v23)
          {
LABEL_144:
            LODWORD(v23) = (_DWORD)v100;
          }
          else
          {
            v106 = *v23 == 0;
            while (*v23 != v106)
            {
              if (++v23 == v100)
                goto LABEL_144;
            }
          }
        }
        v42 = (_DWORD)v23 - *(_DWORD *)a3;
        v8 = v185;
        if (v42 < 0)
          continue;
        v17 = *a3;
        v18 = (_BYTE *)a3[1];
        v19 = v185;
        v20 = v185;
        goto LABEL_4;
      }
      break;
    }
    v101 = v12;
    v102 = v54;
    v169 = v57;
    v171 = a4;
    LODWORD(v194) = 0;
    LODWORD(__p) = 0;
    v103 = a3;
    v104 = sub_1D3E38D40(*a3, v100, (int *)&v188, v16, 1, (int *)&v194);
    if ((_DWORD)v104 == 0x7FFFFFFF)
    {
      v100 = (_BYTE *)v103[1];
      a5 = v174;
      a4 = v171;
      a3 = v103;
      v12 = v101;
      goto LABEL_135;
    }
    v167 = v103;
    v107 = sub_1D3E38D40(*v103, (_BYTE *)v103[1], (int *)&v188, v16, 0, (int *)&__p);
    v108 = v102 - v194;
    HIDWORD(v188) = v102 - v194;
    v109 = v52;
    *(double *)&v189[8] = (float)(v102 - v194);
    *(double *)&v189[16] = v109;
    v163 = v107;
    v110 = v107;
    if (v107 != 0x7FFFFFFFLL)
    {
      *(_DWORD *)v189 = (_DWORD)__p + v169;
      v169 += (int)__p;
      *(double *)&v189[24] = (float)v169;
      *(double *)&v189[32] = v109;
    }
    v12 = v101;
    v193[0] = *(_OWORD *)&v189[4];
    v193[1] = *(_OWORD *)&v189[20];
    LODWORD(v193[2]) = *(_DWORD *)&v189[36];
    v111 = (char *)operator new(0x58uLL);
    v11 = (int *)v172;
    *((_QWORD *)v111 + 2) = v104;
    *((_QWORD *)v111 + 3) = v163;
    *((_DWORD *)v111 + 8) = v53;
    *((_DWORD *)v111 + 9) = v108;
    *((_DWORD *)v111 + 10) = v169;
    *((_DWORD *)v111 + 19) = v193[2];
    *(_OWORD *)(v111 + 60) = v193[1];
    *(_OWORD *)(v111 + 44) = v193[0];
    *((_WORD *)v111 + 40) = 1;
    *(_DWORD *)(v111 + 82) = v181;
    *((_WORD *)v111 + 43) = v182;
    v112 = v183;
    *(_QWORD *)v111 = v183;
    *((_QWORD *)v111 + 1) = &v183;
    *((_QWORD *)v112 + 1) = v111;
    v8 = v185 + 1;
    v183 = v111;
    ++v185;
    v113 = v110 == 0x7FFFFFFF;
    a1 = v177;
    a5 = v174;
    a4 = v171;
    a3 = v167;
    v9 = 0uLL;
    v10 = v173;
    if (!v113)
      continue;
    break;
  }
LABEL_153:
  if (!v8)
  {
LABEL_225:
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    v118 = (unint64_t *)(a1 + 2);
    goto LABEL_226;
  }
  if (!sub_1D3E3923C((uint64_t)&v183))
  {
    v119 = a6;
    v175 = v8;
    v176 = a6[2];
    v120 = a6[1];
    v121 = a6;
    v122 = a2;
    v178 = a1;
    if ((uint64_t *)v120 != a6)
    {
      v123 = v184;
      v124 = (uint64_t *)a6[1];
      do
      {
        if (v123 != &v183)
        {
          v125 = v124[2];
          v126 = v124[3];
          v127 = v123;
          do
          {
            if (v125 != v126)
            {
              v128 = v125;
              do
              {
                if (sub_1D3E392E0((_DWORD *)v127 + 4, (_DWORD *)v128))
                {
                  *((_BYTE *)v127 + 81) = 1;
                  *(_BYTE *)(v128 + 65) = 1;
                }
                v128 += 72;
              }
              while (v128 != v126);
            }
            v127 = (char **)v127[1];
          }
          while (v127 != &v183);
        }
        v124 = (uint64_t *)v124[1];
      }
      while (v124 != a6);
      v129 = (_QWORD *)(v120 + 16);
      if (*(_DWORD *)(v120 + 40) <= a2)
      {
        v121 = (uint64_t *)v120;
        v119 = a6;
        while (1)
        {
          v131 = sub_1D3E3933C((char *)v121[2], (char *)v129[1], (uint64_t)&v183);
          v130 = v131;
          v121 = (uint64_t *)v121[1];
          if (v121 == a6)
            break;
          v129 = v121 + 2;
          if (*((_DWORD *)v121 + 10) > a2)
            goto LABEL_172;
        }
        v121 = a6;
        if (v131)
          goto LABEL_213;
      }
      else
      {
        v130 = 0;
        v121 = (uint64_t *)v120;
        v119 = a6;
LABEL_172:
        if (sub_1D3E3933C((char *)v121[2], (char *)v129[1], (uint64_t)&v183) || v130)
          goto LABEL_213;
      }
      if ((uint64_t *)v120 != v119)
      {
        v132 = v184;
        while (v132 != &v183)
        {
          v133 = *(_DWORD **)(v120 + 16);
          v134 = *(_DWORD **)(v120 + 24);
          v135 = v132;
          while (v133 != v134)
          {
            v136 = v133;
            while (!sub_1D3E392E0((_DWORD *)v135 + 4, v136))
            {
              v136 += 18;
              if (v136 == v134)
                goto LABEL_187;
            }
            v135 = (char **)v135[1];
            if (v135 == &v183)
              goto LABEL_213;
          }
LABEL_187:
          v120 = *(_QWORD *)(v120 + 8);
          if ((uint64_t *)v120 == v119)
            goto LABEL_188;
        }
        goto LABEL_213;
      }
LABEL_188:
      v122 = a2;
    }
    v194 = 0uLL;
    v195 = 0;
    v196 = v122;
    v197 = 0;
    if (v175 <= 0x38E38E38E38E38ELL)
    {
      v137 = (char *)operator new(72 * v175);
      *(_QWORD *)&v194 = v137;
      *((_QWORD *)&v194 + 1) = v137;
      v195 = &v137[72 * v175];
      v138 = v184;
      if (v184 == &v183)
      {
        v146 = 0;
        goto LABEL_202;
      }
      v139 = -1;
      v140 = v184;
      do
      {
        v141 = v139;
        v140 = (char **)v140[1];
        ++v139;
      }
      while (v140 != &v183);
      if (v175 > v139)
      {
        v142 = v137;
        do
        {
          *(_OWORD *)v142 = *((_OWORD *)v138 + 1);
          v143 = *((_OWORD *)v138 + 2);
          v144 = *((_OWORD *)v138 + 3);
          v145 = *((_OWORD *)v138 + 4);
          *((_QWORD *)v142 + 8) = v138[10];
          *((_OWORD *)v142 + 2) = v144;
          *((_OWORD *)v142 + 3) = v145;
          *((_OWORD *)v142 + 1) = v143;
          v138 = (char **)v138[1];
          v142 += 72;
        }
        while (v138 != &v183);
LABEL_201:
        v146 = v142 - v137;
LABEL_202:
        *((_QWORD *)&v194 + 1) = &v137[v146];
        v150 = operator new(0x30uLL);
        v150[1] = v194;
        *((_QWORD *)v150 + 4) = v195;
        v195 = 0;
        v194 = 0uLL;
        *((_DWORD *)v150 + 10) = v196;
        *((_BYTE *)v150 + 44) = v197;
        v151 = *v121;
        *(_QWORD *)(v151 + 8) = v150;
        *(_QWORD *)v150 = v151;
        *v121 = (uint64_t)v150;
        *((_QWORD *)v150 + 1) = v121;
        v152 = (uint64_t *)v119[1];
        ++v119[2];
        if (v152 == v119)
        {
LABEL_213:
          a1 = v178;
          if (v176)
          {
            sub_1D3E393F8(v178, v119, 0);
            if (v178[2])
            {
              v159 = v178;
              while (1)
              {
                v159 = (uint64_t *)v159[1];
                if (v159 == v178)
                  break;
                if (*((_BYTE *)v159 + 81))
                  return sub_1D3DB92AC(&v183);
              }
            }
            sub_1D3E393F8((uint64_t *)&v194, v119, 1);
            sub_1D3E394B0(v178, &v194);
            sub_1D3DB92AC(&v194);
            if (v178[2])
            {
              v160 = v178;
              while (1)
              {
                v160 = (uint64_t *)v160[1];
                if (v160 == v178)
                  break;
                if (*((_BYTE *)v160 + 81))
                  return sub_1D3DB92AC(&v183);
              }
            }
            sub_1D3DB92AC(v178);
          }
          goto LABEL_225;
        }
        while (1)
        {
          v153 = (char *)v152[2];
          v154 = (char *)v152[3];
          if (0x8E38E38E38E38E39 * ((v154 - v153) >> 3) != v185)
          {
LABEL_207:
            if (v153 == v154)
            {
              v157 = *v152;
              v158 = (uint64_t *)v152[1];
              *(_QWORD *)(v157 + 8) = v158;
              *(_QWORD *)v152[1] = v157;
              --v119[2];
              sub_1D3E393C8(v152);
              v152 = v158;
              goto LABEL_205;
            }
            v155 = &v184;
            while (1)
            {
              v156 = *v155;
              if (*v155 == &v183)
                break;
              v155 = (char ***)(v156 + 1);
              if (sub_1D3E392E0(v153, (_DWORD *)v156 + 4))
              {
                v153 += 72;
                goto LABEL_207;
              }
            }
          }
          v152 = (uint64_t *)v152[1];
LABEL_205:
          if (v152 == v119)
            goto LABEL_213;
        }
      }
      operator delete(v137);
      v194 = 0uLL;
      v195 = 0;
      if (v139 <= 0x38E38E38E38E38DLL)
      {
        sub_1D3E39C34(&v194, v141 + 2);
        v137 = (char *)*((_QWORD *)&v194 + 1);
        v142 = (char *)*((_QWORD *)&v194 + 1);
        do
        {
          *(_OWORD *)v142 = *((_OWORD *)v138 + 1);
          v147 = *((_OWORD *)v138 + 2);
          v148 = *((_OWORD *)v138 + 3);
          v149 = *((_OWORD *)v138 + 4);
          *((_QWORD *)v142 + 8) = v138[10];
          *((_OWORD *)v142 + 2) = v148;
          *((_OWORD *)v142 + 3) = v149;
          *((_OWORD *)v142 + 1) = v147;
          v138 = (char **)v138[1];
          v142 += 72;
        }
        while (v138 != &v183);
        goto LABEL_201;
      }
    }
    sub_1D3D6D4F8();
  }
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  v115 = v183;
  v114 = (uint64_t *)v184;
  v116 = *v184;
  *((_QWORD *)v116 + 1) = *((_QWORD *)v183 + 1);
  **((_QWORD **)v115 + 1) = v116;
  v117 = *a1;
  *(_QWORD *)(v117 + 8) = v114;
  *v114 = v117;
  *a1 = (uint64_t)v115;
  *((_QWORD *)v115 + 1) = a1;
  a1[2] = v8;
  v118 = &v185;
LABEL_226:
  *v118 = 0;
  return sub_1D3DB92AC(&v183);
}

void sub_1D3E38990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1D3DB92AC(&a27);
  _Unwind_Resume(a1);
}

double sub_1D3E389D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int i;
  unsigned int v15;
  int j;
  char v17;
  std::string::size_type size;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  std::string *p_p;
  double result;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  std::string __p;
  void *v36;
  _BYTE *v37;

  v3 = a2[2];
  if (!v3)
  {
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 36) = 0u;
    *(_OWORD *)(a1 + 52) = 0u;
    *(_OWORD *)(a1 + 68) = 0u;
    *(_QWORD *)(a1 + 84) = 0;
    *(_QWORD *)(a1 + 96) = a1 + 104;
    *(_BYTE *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    return result;
  }
  if (*(_DWORD *)(*a2 + 24) == 0x7FFFFFFF)
    v5 = -2;
  else
    v5 = -1;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_1D3D81DF8(&v36, 12 * (v5 + 2 * (int)v3), &__p);
  v6 = 0;
  v7 = a2[1];
  v8 = *(_DWORD *)(v7 + 24);
  v9 = 11;
  do
  {
    if (((v8 >> v9) & 1) != 0)
    {
      if (v37 - (_BYTE *)v36 <= v6)
        sub_1D3DB6E04();
      *((_BYTE *)v36 + v6) = 1;
    }
    ++v6;
    --v9;
  }
  while (v6 != 12);
  v10 = *(_QWORD *)(v7 + 8);
  if ((_QWORD *)v10 != a2)
  {
    LODWORD(v11) = 12;
    do
    {
      v12 = *(_DWORD *)(v10 + 16);
      v13 = v11 + 12;
      v11 = (int)v11;
      for (i = 11; i != -1; --i)
      {
        if (((v12 >> i) & 1) != 0)
        {
          if (v37 - (_BYTE *)v36 <= v11)
            sub_1D3DB6E04();
          *((_BYTE *)v36 + v11) = 1;
        }
        ++v11;
      }
      v15 = *(_DWORD *)(v10 + 24);
      if (v15 != 0x7FFFFFFF)
      {
        v11 = v13;
        for (j = 11; j != -1; --j)
        {
          if (((v15 >> j) & 1) != 0)
          {
            if (v37 - (_BYTE *)v36 <= v11)
              sub_1D3DB6E04();
            *((_BYTE *)v36 + v11) = 1;
          }
          ++v11;
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while ((_QWORD *)v10 != a2);
  }
  sub_1D3DB67C0(&__p, (uint64_t *)&v36);
  v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v21 = a2;
    v19 = *a2;
    v20 = v21[1];
    v23 = *(_DWORD *)(v20 + 36);
    v22 = *(_DWORD *)(v20 + 40);
    v25 = *(_DWORD *)(v19 + 36);
    v24 = *(_DWORD *)(v19 + 40);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_1D3E2BCA8(&v33, (unsigned __int8 *)p_p, (unsigned __int8 *)p_p + size, size);
    *(float *)&result = (float)(v24 - v25) / 49.0;
    v28 = (int)*(double *)(v20 + 48) | ((unint64_t)(int)*(double *)(v20 + 56) << 32);
    v29 = (int)*(double *)(v19 + 64) | ((unint64_t)(int)*(double *)(v19 + 72) << 32);
    *(_QWORD *)a1 = 0x200000000000;
    *(_OWORD *)(a1 + 8) = v33;
    v30 = v34;
    v33 = 0uLL;
    v34 = 0;
    *(_QWORD *)(a1 + 24) = v30;
    *(_QWORD *)(a1 + 32) = v28;
    *(_QWORD *)(a1 + 40) = v29;
    *(_QWORD *)(a1 + 48) = v29;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 56) = v28;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 96) = a1 + 104;
    *(_BYTE *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    v31 = v36;
    v32 = v37;
    *(float *)(a1 + 124) = (float)(v22 - v23) / 49.0;
    *(_DWORD *)(a1 + 128) = LODWORD(result);
    if (v32 == v31)
      sub_1D3DB6E04();
    *(_BYTE *)(a1 + 120) = *v31 != 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  if (v17 < 0)
LABEL_33:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_34:
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  return result;
}

void sub_1D3E38CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  sub_1D3E2BB94(v20);
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

unint64_t sub_1D3E38D40(uint64_t a1, _BYTE *a2, int *a3, int a4, int a5, int *a6)
{
  unint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  BOOL v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t i;
  float v30;
  int v31;
  uint64_t v32;
  float v33;
  int32x4_t *v34;
  _DWORD *v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  float v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  __int32 v46;
  float v47;
  uint64_t v48;
  char *v49;
  float v50;
  uint64_t v51;
  char *v52;
  int v53;
  float v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t j;
  __int32 v66;
  int v67;
  _DWORD *v68;
  uint64_t k;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  _DWORD v74[4];
  _DWORD v75[4];
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;

  v78 = 0u;
  v79 = 0u;
  if (a5)
  {
    v10 = sub_1D3DB90EC(a1, a1 + a3[1], (uint64_t)&v78);
    if (v10 >= v11)
      goto LABEL_18;
  }
  else
  {
    v13 = (_BYTE *)(a1 + a3[2]);
    v14 = sub_1D3DB91B0(v13, a2, (uint64_t)&v78);
    v16 = v15 != a2 || v79.i32[3] == 0;
    if (v16)
      v17 = v14;
    else
      v17 = v13;
    if (v16)
      v18 = v15;
    else
      v18 = a2;
    if (v17 >= v18)
      goto LABEL_18;
    v19 = &v79.i8[12];
    v20 = &v78.i8[4];
    do
    {
      v21 = *((_DWORD *)v20 - 1);
      *((_DWORD *)v20 - 1) = *(_DWORD *)v19;
      *(_DWORD *)v19 = v21;
      v19 -= 4;
      v22 = v20 >= v19;
      v20 += 4;
    }
    while (!v22);
  }
  v23 = vaddvq_s32(vaddq_s32(v79, v78));
  *a6 = v23;
  v24 = (float)v23 / 17.0;
  v25 = (float)(a3[2] - a3[1]) / 15.0;
  if ((float)(vabds_f32(v24, v25) / v25) > 0.3)
  {
LABEL_18:
    v26 = 0;
    v27 = 0x7FFFFFFF;
    return v27 | (unint64_t)(v26 << 32);
  }
  for (i = 0; i != 8; ++i)
  {
    v30 = (float)v78.i32[i] / v24;
    v31 = (int)(float)(v30 + 0.5);
    if (v31 <= 0)
    {
      if (v30 < 0.3)
        goto LABEL_18;
      v31 = 1;
    }
    else if (v31 >= 9)
    {
      if (v30 > 8.7)
        goto LABEL_18;
      v31 = 8;
    }
    v32 = i >> 1;
    v33 = v30 - (float)v31;
    if ((i & 1) != 0)
      v34 = &v76;
    else
      v34 = &v77;
    if ((i & 1) != 0)
      v35 = v74;
    else
      v35 = v75;
    v34->i32[v32] = v31;
    *(float *)&v35[v32] = v33;
  }
  v36 = vaddvq_s32(v77);
  v37 = vaddvq_s32(v76);
  v38 = vaddvq_s32(vaddq_s32(v76, v77));
  v39 = v36 > 13;
  v40 = v37 > 13;
  v41 = v37 < 4;
  if (v38 == 16)
  {
    if ((v36 & 1) != 0)
    {
      v26 = 0;
      v27 = 0x7FFFFFFF;
      if ((v37 & 1) == 0 || v36 > 13)
        return v27 | (unint64_t)(v26 << 32);
      goto LABEL_53;
    }
    if ((v37 & 1) != 0)
      goto LABEL_18;
    v41 = 1;
LABEL_48:
    if (v36 <= 3)
      goto LABEL_49;
    goto LABEL_70;
  }
  if (v38 != 17)
  {
    if (v38 != 18)
      goto LABEL_18;
    if ((v36 & 1) != 0)
    {
      if ((v37 & 1) == 0)
        goto LABEL_18;
      v39 = 1;
    }
    else
    {
      if ((v37 & 1) != 0)
        goto LABEL_18;
      v40 = 1;
    }
    goto LABEL_48;
  }
  if ((v36 & 1) == 0)
  {
    if ((v37 & 1) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
  if ((v37 & 1) != 0)
    goto LABEL_18;
  v39 = v36 >= v37 || v36 > 13;
  v41 = v36 >= v37 || v37 < 4;
  v40 = v37 > 13 || v36 < v37;
  if (v36 < 4 || v36 < v37)
  {
LABEL_49:
    if (v39)
      goto LABEL_18;
LABEL_53:
    v42 = *(float *)v75;
    v43 = 1;
    v44 = (char *)v75;
    do
    {
      if (v42 < *(float *)&v75[v43])
      {
        v42 = *(float *)&v75[v43];
        v44 = (char *)&v75[v43];
      }
      ++v43;
    }
    while (v43 != 4);
    v45 = v44 - (char *)v75;
    v46 = *(__int32 *)((char *)v77.i32 + v44 - (char *)v75) + 1;
    goto LABEL_76;
  }
LABEL_70:
  if (!v39)
  {
    if (v41)
      goto LABEL_77;
    goto LABEL_84;
  }
  v47 = *(float *)v75;
  v48 = 1;
  v49 = (char *)v75;
  do
  {
    if (*(float *)&v75[v48] < v47)
    {
      v47 = *(float *)&v75[v48];
      v49 = (char *)&v75[v48];
    }
    ++v48;
  }
  while (v48 != 4);
  v45 = v49 - (char *)v75;
  v46 = *(__int32 *)((char *)v77.i32 + v49 - (char *)v75) - 1;
LABEL_76:
  *(__int32 *)((char *)v77.i32 + v45) = v46;
  if (v41)
  {
LABEL_77:
    if (v40)
      goto LABEL_18;
    v50 = *(float *)v74;
    v51 = 1;
    v52 = (char *)v74;
    do
    {
      if (v50 < *(float *)&v74[v51])
      {
        v50 = *(float *)&v74[v51];
        v52 = (char *)&v74[v51];
      }
      ++v51;
    }
    while (v51 != 4);
    v53 = 1;
    goto LABEL_90;
  }
LABEL_84:
  if (!v40)
    goto LABEL_91;
  v54 = *(float *)v74;
  v55 = 1;
  v52 = (char *)v74;
  do
  {
    if (*(float *)&v74[v55] < v54)
    {
      v54 = *(float *)&v74[v55];
      v52 = (char *)&v74[v55];
    }
    ++v55;
  }
  while (v55 != 4);
  v53 = -1;
LABEL_90:
  *(__int32 *)((char *)v76.i32 + v52 - (char *)v74) += v53;
LABEL_91:
  v56 = 0;
  v57 = 0;
  v58 = *a3;
  if (a4)
    v59 = (a5 ^ 1) - 1;
  else
    v59 = (a5 ^ 1) + 1;
  v60 = v59 + 4 * v58;
  if (v58)
    v61 = 0;
  else
    v61 = a5;
  v62 = v61 & a4;
  v63 = v60;
  v64 = (_DWORD *)((char *)&unk_1D3E75868 + 32 * v60 + 24);
  for (j = 3; j != -1; --j)
  {
    v66 = v77.i32[j];
    if (!v62)
      v57 += v66 * *v64;
    v56 += v66;
    v64 -= 2;
  }
  v67 = 0;
  v68 = (_DWORD *)((char *)&unk_1D3E75868 + 32 * v63 + 28);
  for (k = 3; k != -1; --k)
  {
    if ((v62 & 1) == 0)
      v67 += v76.i32[k] * *v68;
    v68 -= 2;
  }
  v26 = 0;
  v27 = 0x7FFFFFFF;
  if ((v56 & 1) == 0 && (v56 - 14) >= 0xFFFFFFF6)
  {
    v26 = (v67 + v57);
    v70 = (13 - v56) >> 1;
    v71 = dword_1D3E75B48[v70];
    v72 = 9 - v71;
    v73 = sub_1D3DFDC3C(v77.i32, 4u, v71, 0);
    v27 = sub_1D3DFDC3C(v76.i32, 4u, v72, 1) + dword_1D3E75B5C[v70] * v73 + dword_1D3E75B70[v70];
  }
  return v27 | (unint64_t)(v26 << 32);
}

BOOL sub_1D3E3923C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int i;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v1 + 24) == 0x7FFFFFFF)
    return 0;
  v3 = *(_DWORD *)(v1 + 28);
  v4 = *(_QWORD *)(v1 + 8);
  for (i = 2; v4 != a1; v4 = *(_QWORD *)(v4 + 8))
  {
    v3 += *(_DWORD *)(v4 + 20);
    if (*(_DWORD *)(v4 + 24) == 0x7FFFFFFF)
    {
      ++i;
    }
    else
    {
      v3 += *(_DWORD *)(v4 + 28);
      i += 2;
    }
  }
  return v3 % 211 + 211 * i - 844 == *(_DWORD *)(v1 + 16);
}

BOOL sub_1D3E392E0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
}

BOOL sub_1D3E3933C(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  _BOOL8 result;

  if (0x8E38E38E38E38E39 * ((a2 - a1) >> 3) != *(_QWORD *)(a3 + 16))
    return 0;
  v4 = a1;
  if (a1 == a2)
    return 1;
  v5 = a3;
  do
  {
    v5 = *(_QWORD *)(v5 + 8);
    result = sub_1D3E392E0(v4, (_DWORD *)(v5 + 16));
    v4 += 72;
  }
  while (result && v4 != a2);
  return result;
}

void sub_1D3E393C8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *sub_1D3E393F8(uint64_t *a1, _QWORD *a2, int a3)
{
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2[2] < 0x1AuLL)
  {
    if (a3)
    {
      v6 = (_QWORD *)a2[1];
      v8 = (uint64_t)&v8;
      v9 = &v8;
      v10 = 0;
      sub_1D3E39574(a1, (uint64_t)a2, a2, (uint64_t)v6, v6, (uint64_t)&v8);
    }
    else
    {
      v7 = (_QWORD *)a2[1];
      v8 = (uint64_t)&v8;
      v9 = &v8;
      v10 = 0;
      sub_1D3E39710(a1, v7, a2, (uint64_t)&v8);
    }
    return sub_1D3E39518(&v8);
  }
  else
  {
    result = sub_1D3E39518(a2);
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0;
  }
  return result;
}

void sub_1D3E39498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D3E39518((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E394B0(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1D3DB92AC(a1);
  v5 = a2[2];
  if (v5)
  {
    v7 = *a2;
    v6 = (uint64_t *)a2[1];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    v9 = *a1;
    *(_QWORD *)(v9 + 8) = v6;
    *v6 = v9;
    *a1 = v7;
    *(_QWORD *)(v7 + 8) = a1;
    a1[2] += v5;
    a2[2] = 0;
  }
  return result;
}

_QWORD *sub_1D3E39518(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      v4 = (_QWORD *)result[1];
      sub_1D3E393C8(result);
      result = v4;
    }
  }
  return result;
}

_QWORD *sub_1D3E39574(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *i;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20[3];

  v20[0] = (uint64_t)v20;
  v20[1] = (uint64_t)v20;
  v20[2] = 0;
  for (i = (_QWORD *)a6; ; sub_1D3E39890(v20, v20, i[2], i[3]))
  {
    i = (_QWORD *)i[1];
    if (i == (_QWORD *)a6)
      break;
  }
  if (a3 == a5)
  {
LABEL_9:
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0;
  }
  else
  {
    while (1)
    {
      sub_1D3E399BC(a1, (uint64_t)v20);
      sub_1D3E39890(a1, a1, *(_QWORD *)(*a3 + 16), *(_QWORD *)(*a3 + 24));
      if ((sub_1D3E39A6C((uint64_t)a1) & 1) != 0)
      {
        if (sub_1D3E3923C((uint64_t)a1))
          break;
        sub_1D3E39ADC(v18, a6);
        v13 = sub_1D3E39B60(*a3 + 16);
        v14 = v18[0];
        *v13 = v18[0];
        v13[1] = v18;
        *(_QWORD *)(v14 + 8) = v13;
        v18[0] = (uint64_t)v13;
        ++v19;
        sub_1D3E39574(v17, a2, *a3, a4, a5, v18);
        sub_1D3E394B0(a1, v17);
        sub_1D3DB92AC(v17);
        v15 = a1[2];
        sub_1D3E39518(v18);
        if (v15)
          break;
      }
      sub_1D3DB92AC(a1);
      a3 = (_QWORD *)*a3;
      if (a3 == a5)
        goto LABEL_9;
    }
  }
  return sub_1D3DB92AC(v20);
}

void sub_1D3E396D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D3E39518((uint64_t *)va);
  sub_1D3DB92AC(v5);
  sub_1D3DB92AC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E39710(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16[3];

  v16[0] = (uint64_t)v16;
  v16[1] = (uint64_t)v16;
  v16[2] = 0;
  for (i = (_QWORD *)a4; ; sub_1D3E39890(v16, v16, i[2], i[3]))
  {
    i = (_QWORD *)i[1];
    if (i == (_QWORD *)a4)
      break;
  }
  if (a2 == a3)
  {
LABEL_9:
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0;
  }
  else
  {
    while (1)
    {
      sub_1D3E399BC(a1, (uint64_t)v16);
      sub_1D3E39890(a1, a1, a2[2], a2[3]);
      if ((sub_1D3E39A6C((uint64_t)a1) & 1) != 0)
      {
        if (sub_1D3E3923C((uint64_t)a1))
          break;
        sub_1D3E39ADC(v14, a4);
        v9 = sub_1D3E39B60((uint64_t)(a2 + 2));
        v10 = v14[0];
        *v9 = v14[0];
        v9[1] = v14;
        *(_QWORD *)(v10 + 8) = v9;
        v14[0] = (uint64_t)v9;
        ++v15;
        sub_1D3E39710(v13, a2[1], a3, v14);
        sub_1D3E394B0(a1, v13);
        sub_1D3DB92AC(v13);
        v11 = a1[2];
        sub_1D3E39518(v14);
        if (v11)
          break;
      }
      sub_1D3DB92AC(a1);
      a2 = (_QWORD *)a2[1];
      if (a2 == a3)
        goto LABEL_9;
    }
  }
  return sub_1D3DB92AC(v16);
}

void sub_1D3E39850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D3E39518((uint64_t *)va);
  sub_1D3DB92AC(v5);
  sub_1D3DB92AC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E39890(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (a3 != a4)
  {
    v7 = result;
    result = operator new(0x58uLL);
    v8 = result;
    *result = 0;
    result[1] = 0;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_OWORD *)(a3 + 32);
    v11 = *(_OWORD *)(a3 + 48);
    result[10] = *(_QWORD *)(a3 + 64);
    *((_OWORD *)result + 3) = v10;
    *((_OWORD *)result + 4) = v11;
    *((_OWORD *)result + 2) = v9;
    *((_OWORD *)result + 1) = *(_OWORD *)a3;
    v12 = a3 + 72;
    v13 = 1;
    if (a3 + 72 != a4)
    {
      v14 = result;
      do
      {
        result = operator new(0x58uLL);
        *result = v14;
        result[1] = 0;
        *((_OWORD *)result + 1) = *(_OWORD *)v12;
        v15 = *(_OWORD *)(v12 + 16);
        v16 = *(_OWORD *)(v12 + 32);
        v17 = *(_OWORD *)(v12 + 48);
        result[10] = *(_QWORD *)(v12 + 64);
        *((_OWORD *)result + 3) = v16;
        *((_OWORD *)result + 4) = v17;
        *((_OWORD *)result + 2) = v15;
        v14[1] = result;
        ++v13;
        v12 += 72;
        v14 = result;
      }
      while (v12 != a4);
    }
    v18 = *a2;
    *(_QWORD *)(v18 + 8) = v8;
    *v8 = v18;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v13;
  }
  return result;
}

void sub_1D3E39988(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1D3E399A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E399BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x58uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      v8 = *(_OWORD *)(v3 + 32);
      v9 = *(_OWORD *)(v3 + 48);
      v10 = *(_OWORD *)(v3 + 64);
      *((_QWORD *)v7 + 10) = *(_QWORD *)(v3 + 80);
      v7[3] = v9;
      v7[4] = v10;
      v7[2] = v8;
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1D3E39A58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D3DB92AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E39A6C(uint64_t a1)
{
  _UNKNOWN **v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = &off_1E95B4048;
  while (*(_QWORD *)(a1 + 16) > (unint64_t)v1[1])
  {
LABEL_3:
    v1 += 2;
    if (v1 == &off_1E95B40E8)
      return 0;
  }
  if (*(_QWORD *)(a1 + 8) != a1)
  {
    v2 = *v1;
    v3 = *(_QWORD *)(a1 + 8);
    while (*(_DWORD *)(v3 + 32) == *v2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      ++v2;
      if (v3 == a1)
        return 1;
    }
    goto LABEL_3;
  }
  return 1;
}

uint64_t *sub_1D3E39ADC(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = sub_1D3E39B60(i + 16);
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1D3E39B4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D3E39518(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1D3E39B60(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;

  v2 = operator new(0x30uLL);
  v3 = v2;
  v2[1] = 0u;
  *v2 = 0u;
  *((_QWORD *)v2 + 4) = 0;
  v5 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = v4 - *(_QWORD *)a1;
  if (v4 != *(_QWORD *)a1)
  {
    sub_1D3E39C34((_QWORD *)v2 + 2, 0x8E38E38E38E38E39 * (v6 >> 3));
    v7 = (char *)*((_QWORD *)v3 + 3);
    memmove(v7, v5, v6 - 6);
    *((_QWORD *)v3 + 3) = &v7[8 * (v6 >> 3)];
  }
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 24);
  *((_BYTE *)v3 + 44) = *(_BYTE *)(a1 + 28);
  return v3;
}

void sub_1D3E39C10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1D3E39C34(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1D3D6D4F8();
  v3 = 9 * a2;
  result = (char *)operator new(72 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

_QWORD *sub_1D3E39C84(_QWORD *a1)
{
  *a1 = &off_1E95AF190;
  sub_1D3E39518(a1 + 1);
  return a1;
}

void sub_1D3E39CB4(_QWORD *a1)
{
  *a1 = &off_1E95AF190;
  sub_1D3E39518(a1 + 1);
  JUMPOUT(0x1D8254C54);
}

_QWORD *sub_1D3E39CF4(_QWORD *a1)
{
  *a1 = &off_1E95AEFB0;
  sub_1D3D96F10((uint64_t)(a1 + 1));
  return a1;
}

void sub_1D3E39D24(_QWORD *a1)
{
  *a1 = &off_1E95AEFB0;
  sub_1D3D96F10((uint64_t)(a1 + 1));
  JUMPOUT(0x1D8254C54);
}

uint64_t sub_1D3E39D64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1D3E39D6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

void *sub_1D3E39D74(uint64_t a1, int a2, unint64_t *a3, int a4)
{
  const void *v5;
  int v7;
  void *v8;
  unint64_t v9;
  std::logic_error *exception;

  if (a2 < 0 || *(_DWORD *)(a1 + 36) <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D3D93D0C(exception, "Requested row is outside the image");
    __cxa_throw(exception, (struct type_info *)off_1E95AAC08, MEMORY[0x1E0DE42E0]);
  }
  v5 = (const void *)(**(_QWORD **)(a1 + 8) + (*(int *)(a1 + 28) + (uint64_t)a2) * *(int *)(a1 + 40) + *(int *)(a1 + 24));
  if (a4)
  {
    v7 = *(_DWORD *)(a1 + 32);
    v8 = (void *)*a3;
    v9 = a3[1] - *a3;
    if (v7 <= v9)
    {
      if (v7 < v9)
        a3[1] = (unint64_t)v8 + v7;
    }
    else
    {
      sub_1D3E3AF38(a3, v7 - v9);
      v7 = *(_DWORD *)(a1 + 32);
      v8 = (void *)*a3;
    }
    if (v7)
    {
      memmove(v8, v5, v7);
      return (void *)*a3;
    }
    else
    {
      return v8;
    }
  }
  return (void *)v5;
}

void sub_1D3E39E54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3E39E68(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::logic_error *exception;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 32) <= (signed int)a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D3D93D0C(exception, "Requested row is outside the image");
    __cxa_throw(exception, (struct type_info *)off_1E95AAC08, MEMORY[0x1E0DE42E0]);
  }
  v6 = *(int *)(a1 + 36);
  v7 = *a3;
  v8 = a3[1];
  v9 = v8 - *a3;
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      v8 = v7 + v6;
      a3[1] = v7 + v6;
    }
  }
  else
  {
    sub_1D3E3AF38(a3, v6 - v9);
    v7 = *a3;
    v8 = a3[1];
  }
  if (v8 != v7)
  {
    v10 = 0;
    do
    {
      *(_BYTE *)(v7 + v10) = *(_BYTE *)(**(_QWORD **)(a1 + 8)
                                      + *(int *)(a1 + 40) * (uint64_t)((int)v10 + *(_DWORD *)(a1 + 28))
                                      + *(int *)(a1 + 24)
                                      + a2);
      ++v10;
      v7 = *a3;
    }
    while (a3[1] - *a3 > v10);
  }
}

void sub_1D3E39F50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D3E39F64(int32x2_t *a1, unint64_t *a2, int a3, float a4)
{
  int32x2_t *v7;
  int32x2_t v8;
  float v10;
  float v12;
  float v17;
  float v18;
  BOOL v19;
  int32x2_t *v20;
  int32x2_t *v21;
  int *v22;
  float v23;
  BOOL v24;
  int *v25;
  int32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int32x2_t *v32;
  uint64_t v33;
  int32x2_t v34;
  float v35;
  float32x2_t v37;
  int32x2_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  int32x2_t *v43;
  uint64_t v44;
  int32x2_t v45;
  float v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int32x2_t *v51;
  int32x2_t v52;
  unint64_t v53;
  uint64_t v54;
  int32x2_t *v55;
  int32x2_t *v56;
  int32x2_t v57;
  __int32 v58;
  int *i;
  int32x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unint64_t *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int32x2_t *v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  unint64_t v90;
  size_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _BYTE *v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  float v105;
  float v106;
  int v107;
  float v108;
  int v109;
  float32x2_t v110;
  int v111;
  unint64_t *v112;

  v7 = a1;
  a2[1] = *a2;
  v8 = a1[4];
  _S8 = tanf(a4);
  if (a3)
    v10 = (float)a3 / cosf(a4);
  else
    v10 = 0.0;
  _D2 = vmul_f32(vcvt_f32_s32(v8), (float32x2_t)0x3F0000003F000000);
  v12 = -_D2.f32[0];
  __asm { FMLS            S12, S8, V2.S[0] }
  v17 = _D2.f32[1];
  v18 = -_D2.f32[1];
  v19 = _S12 < (float)-_D2.f32[1] || _S12 > _D2.f32[1];
  v108 = -_D2.f32[1];
  v110 = _D2;
  if (v19)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v20 = (int32x2_t *)operator new(8uLL);
    v18 = v108;
    _D2 = v110;
    v21 = v20;
    v22 = (int *)&v20[1];
    v20->i32[0] = (int)v12;
    v20->i32[1] = (int)_S12;
  }
  v23 = v10 + (float)(_D2.f32[0] * _S8);
  v24 = v23 < v18 || v23 > v17;
  v112 = a2;
  if (v24)
  {
    v25 = v22;
    v26 = (int32x2_t *)v22;
  }
  else
  {
    v105 = v10 + (float)(_D2.f32[0] * _S8);
    v27 = (char *)v22 - (char *)v21;
    v28 = ((char *)v22 - (char *)v21) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      goto LABEL_169;
    if (v27 >> 2 > v29)
      v29 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    v31 = (char *)sub_1D3D6D8A0(v30);
    v32 = (int32x2_t *)&v31[8 * v28];
    _D2 = v110;
    v26 = (int32x2_t *)&v31[8 * v33];
    *v32 = vcvt_s32_f32((float32x2_t)__PAIR64__(LODWORD(v105), v110.u32[0]));
    v25 = (int *)&v32[1];
    while (v22 != (int *)v21)
    {
      v34 = *(int32x2_t *)(v22 - 2);
      v22 -= 2;
      v32[-1] = v34;
      --v32;
    }
    if (v21)
    {
      operator delete(v21);
      _D2 = v110;
    }
    v21 = v32;
    v18 = v108;
  }
  if (fabsf(_S8) < 0.00000011921)
    goto LABEL_68;
  v35 = (float)(v17 - v10) / _S8;
  if (v35 < v12 || v35 > _D2.f32[0])
    goto LABEL_35;
  if (v25 < (int *)v26)
  {
    v37.i32[1] = _D2.i32[1];
    v37.f32[0] = (float)(v17 - v10) / _S8;
    *(int32x2_t *)v25 = vcvt_s32_f32(v37);
    v25 += 2;
LABEL_35:
    v38 = (int32x2_t *)v25;
    goto LABEL_48;
  }
  v39 = ((char *)v25 - (char *)v21) >> 3;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61)
    goto LABEL_169;
  if (((char *)v26 - (char *)v21) >> 2 > v40)
    v40 = ((char *)v26 - (char *)v21) >> 2;
  if ((unint64_t)((char *)v26 - (char *)v21) >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v40;
  v42 = (char *)sub_1D3D6D8A0(v41);
  v43 = (int32x2_t *)&v42[8 * v39];
  _D2.i32[0] = v110.i32[0];
  v26 = (int32x2_t *)&v42[8 * v44];
  *v43 = vcvt_s32_f32((float32x2_t)__PAIR64__(v110.u32[1], (float)(v17 - v10) / _S8));
  v38 = v43 + 1;
  while (v25 != (int *)v21)
  {
    v45 = *(int32x2_t *)(v25 - 2);
    v25 -= 2;
    v43[-1] = v45;
    --v43;
  }
  if (v21)
  {
    operator delete(v21);
    _D2.i32[0] = v110.i32[0];
  }
  v21 = v43;
  v18 = v108;
LABEL_48:
  v46 = (float)(v18 - v10) / _S8;
  if (v46 < v12 || v46 > _D2.f32[0])
  {
    v25 = (int *)v38;
    goto LABEL_68;
  }
  if (v38 < v26)
  {
    v38->i32[0] = (int)v46;
    v38->i32[1] = (int)v18;
    v25 = (int *)&v38[1];
    goto LABEL_68;
  }
  v106 = (float)(v18 - v10) / _S8;
  v48 = v38 - v21;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_169:
    sub_1D3D6D4F8();
  if (((char *)v26 - (char *)v21) >> 2 > v49)
    v49 = ((char *)v26 - (char *)v21) >> 2;
  if ((unint64_t)((char *)v26 - (char *)v21) >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v49;
  v51 = (int32x2_t *)((char *)sub_1D3D6D8A0(v50) + 8 * v48);
  *v51 = vcvt_s32_f32((float32x2_t)__PAIR64__(LODWORD(v108), LODWORD(v106)));
  v25 = (int *)&v51[1];
  while (v38 != v21)
  {
    v52 = v38[-1];
    --v38;
    v51[-1] = v52;
    --v51;
  }
  if (v21)
    operator delete(v21);
  v21 = v51;
LABEL_68:
  v53 = 126 - 2 * __clz(((char *)v25 - (char *)v21) >> 3);
  if (v25 == (int *)v21)
    v54 = 0;
  else
    v54 = v53;
  sub_1D3E3B0B8((unint64_t)v21, v25, v54, 1);
  v55 = v21;
  if (v25 != (int *)v21)
  {
    v56 = v21 - 1;
    while (&v56[2] != (int32x2_t *)v25)
    {
      v58 = v56[1].i32[0];
      ++v56;
      v57.i32[0] = v58;
      if (v58 == v56[1].i32[0] && v56->i32[1] == v56[1].i32[1])
      {
        for (i = (int *)&v56[2]; i != v25; i += 2)
        {
          if (v57.i32[0] != *i || v56->i32[1] != i[1])
          {
            v57 = *(int32x2_t *)i;
            v56[1] = *(int32x2_t *)i;
            ++v56;
          }
        }
        if (&v56[1] != (int32x2_t *)v25)
        {
          v55 = v56 + 1;
          goto LABEL_90;
        }
        break;
      }
    }
    v55 = (int32x2_t *)v25;
  }
LABEL_90:
  if ((char *)v55 - (char *)v21 == 16)
  {
    if (v21 != v55)
    {
      v62 = v21;
      do
      {
        *v62 = vcvt_s32_f32(vadd_f32(v110, vcvt_f32_s32(*v62)));
        ++v62;
      }
      while (v62 != v55);
    }
    v63 = (uint64_t)*v21;
    v64 = (uint64_t)v21[1];
    operator delete(v21);
    v65 = HIDWORD(v64);
    v66 = HIDWORD(v63);
    v67 = v7[4].i32[0] - 1;
    if (v67 >= (int)v63)
      v68 = v63;
    else
      v68 = v7[4].i32[0] - 1;
    if ((int)v63 < 0)
      v68 = 0;
    v69 = v7[4].i32[1] - 1;
    if (v69 < SHIDWORD(v63))
      LODWORD(v66) = v7[4].i32[1] - 1;
    if (v63 >= 0)
      v70 = v66;
    else
      v70 = 0;
    if (v67 >= (int)v64)
      v71 = v64;
    else
      v71 = v7[4].i32[0] - 1;
    if ((int)v64 >= 0)
      v72 = v71;
    else
      v72 = 0;
    if (v69 < SHIDWORD(v64))
      LODWORD(v65) = v7[4].i32[1] - 1;
    if (v64 >= 0)
      v73 = v65;
    else
      v73 = 0;
    if (v72 > v68)
      v74 = 1;
    else
      v74 = -1;
    if (v72 - v68 >= 0)
      v75 = v72 - v68;
    else
      v75 = v68 - v72;
    v111 = v73;
    if (v73 > v70)
      v76 = 1;
    else
      v76 = -1;
    if (v73 - v70 >= 0)
      v77 = v73 - v70;
    else
      v77 = v70 - v73;
    if (v75 <= v77)
      v78 = -v77;
    else
      v78 = v75;
    v79 = v78 / 2;
    v80 = -v75;
    v81 = a2;
    v82 = (_BYTE *)a2[1];
    v109 = v72;
    v104 = v75;
    v107 = v74;
    v102 = -v75;
    v103 = v76;
    while (1)
    {
      v83 = **(_QWORD **)&v7[1] + (v7[3].i32[1] + (uint64_t)v70) * v7[5].i32[0] + v7[3].i32[0];
      v84 = v68;
      v85 = v81[2];
      if ((unint64_t)v82 >= v85)
      {
        v86 = v7;
        v87 = *v81;
        v88 = &v82[-v87];
        v89 = (uint64_t)&v82[-v87 + 1];
        if (v89 < 0)
          sub_1D3D6D4F8();
        v90 = v85 - v87;
        if (2 * v90 > v89)
          v89 = 2 * v90;
        if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
          v91 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
          v92 = (char *)operator new(v91);
        else
          v92 = 0;
        v93 = &v88[(_QWORD)v92];
        v88[(_QWORD)v92] = *(_BYTE *)(v83 + v84);
        v94 = (uint64_t)&v88[(_QWORD)v92 + 1];
        if (v82 == (_BYTE *)v87)
        {
          v7 = v86;
          v81 = v112;
        }
        else
        {
          v95 = &v82[~v87];
          v7 = v86;
          do
          {
            v96 = *--v82;
            (v95--)[(_QWORD)v92] = v96;
          }
          while (v82 != (_BYTE *)v87);
          v81 = v112;
          v82 = (_BYTE *)*v112;
          v93 = v92;
        }
        *v81 = (unint64_t)v93;
        v81[1] = v94;
        v81[2] = (unint64_t)&v92[v91];
        if (v82)
          operator delete(v82);
        v82 = (_BYTE *)v94;
        v72 = v109;
        v75 = v104;
        v74 = v107;
        v80 = v102;
        v76 = v103;
      }
      else
      {
        *v82++ = *(_BYTE *)(v83 + v84);
      }
      v81[1] = (unint64_t)v82;
      if ((_DWORD)v84 == v72 && v70 == v111)
        break;
      if (v79 <= v80)
        v97 = 0;
      else
        v97 = v74;
      v68 = v97 + v84;
      if (v79 <= v80)
        v98 = 0;
      else
        v98 = v77;
      v99 = v79 - v98;
      if (v79 >= v77)
        v100 = 0;
      else
        v100 = v76;
      v70 += v100;
      if (v79 >= v77)
        v101 = 0;
      else
        v101 = v75;
      v79 = v99 + v101;
    }
  }
  else if (v21)
  {
    operator delete(v21);
  }
}

void sub_1D3E3A5AC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D3E3A5C4()
{
  return 1;
}

__n128 sub_1D3E3A5CC@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, __n128 *a6@<X8>)
{
  int v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 result;
  std::logic_error *exception;
  __n128 v24;

  if ((a3 | a2 | a4 | a5) < 0 || a4 + a2 > *(_DWORD *)(a1 + 32) || a5 + a3 > *(_DWORD *)(a1 + 36))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D3D93D0C(exception, "Crop rectangle does not fit within image data.");
    __cxa_throw(exception, (struct type_info *)off_1E95AAC08, MEMORY[0x1E0DE42E0]);
  }
  v10 = *(_DWORD *)(a1 + 24) + a2;
  v11 = *(_DWORD *)(a1 + 28) + a3;
  v12 = operator new(0x48uLL);
  v13 = (unint64_t)v12;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E95B0318;
  v14 = (unint64_t)(v12 + 3);
  v15 = *(_QWORD *)(a1 + 16);
  v24.n128_u64[0] = *(_QWORD *)(a1 + 8);
  v24.n128_u64[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = sub_1D3E3AE74((uint64_t)(v12 + 3), v10, v11, a4, a5, &v24, *(_DWORD *)(a1 + 40));
  v19 = (std::__shared_weak_count *)v24.n128_u64[1];
  if (v24.n128_u64[1])
  {
    v20 = (unint64_t *)(v24.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v18);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  result.n128_u64[0] = v14;
  result.n128_u64[1] = v13;
  *a6 = result;
  return result;
}

void sub_1D3E3A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_1D3D96F10((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3E3A754()
{
  return 1;
}

void sub_1D3E3A75C(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  int v5;
  int *v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  int v39;
  uint64_t *v40;
  int v41;
  const void *v42;
  uint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unint64_t v50;
  char v51;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::logic_error *exception;
  __int128 v62;
  __n128 v63;

  v5 = (a2 + 360) % 360;
  if (v5 <= 179)
  {
    if (!v5)
    {
      v25 = operator new(0x48uLL);
      v26 = v25;
      v25[1] = 0;
      v25[2] = 0;
      *v25 = &off_1E95B0318;
      v27 = v25 + 3;
      v28 = *(_DWORD *)(a1 + 32);
      v29 = *(_DWORD *)(a1 + 36);
      v30 = *(_QWORD *)(a1 + 16);
      v63.n128_u64[0] = *(_QWORD *)(a1 + 8);
      v63.n128_u64[1] = v30;
      v31 = v28;
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v31 = *(_DWORD *)(a1 + 32);
      }
      v34 = sub_1D3E3AE74((uint64_t)(v25 + 3), 0, 0, v28, v29, &v63, v31);
      v35 = (std::__shared_weak_count *)v63.n128_u64[1];
      if (v63.n128_u64[1])
      {
        v36 = (unint64_t *)(v63.n128_u64[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v34);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      *(_QWORD *)&v38 = v27;
      *((_QWORD *)&v38 + 1) = v26;
      *a3 = v38;
      return;
    }
    if (v5 == 90)
    {
      v6 = (int *)(a1 + 36);
      sub_1D3E3AC08(&v63, *(_DWORD *)(a1 + 36) * *(_DWORD *)(a1 + 32));
      v7 = v63.n128_u64[0];
      v8 = *v6;
      if (*v6 <= 0)
      {
        LODWORD(v13) = *(_DWORD *)(a1 + 32);
      }
      else
      {
        v9 = 0;
        v10 = *(_QWORD *)v63.n128_u64[0];
        v11 = *(_DWORD *)(a1 + 40);
        v12 = **(_QWORD **)(a1 + 8) + v11 * (uint64_t)*(int *)(a1 + 28) + *(int *)(a1 + 24);
        LODWORD(v13) = *(_DWORD *)(a1 + 32);
        do
        {
          if ((int)v13 >= 1)
          {
            v14 = 0;
            do
            {
              *(_BYTE *)(v10 + *(_DWORD *)(a1 + 36) + ~v9 + *(_DWORD *)(a1 + 36) * (int)v14) = *(_BYTE *)(v12 + v14);
              ++v14;
              v13 = *(int *)(a1 + 32);
            }
            while (v14 < v13);
            v8 = *(_DWORD *)(a1 + 36);
            v11 = *(_DWORD *)(a1 + 40);
          }
          ++v9;
          v12 += v11;
        }
        while (v9 < v8);
      }
      v57 = v63.n128_u64[1];
      sub_1D3E3AC80(&v62, 0, 0, v8, v13, v7, v63.n128_u64[1], v6);
      *a3 = v62;
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
LABEL_59:
        if (v59)
          return;
        (*(void (**)(unint64_t))(*(_QWORD *)v57 + 16))(v57);
        v56 = (std::__shared_weak_count *)v57;
        goto LABEL_61;
      }
      return;
    }
LABEL_63:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D3E0463C(exception);
    __cxa_throw(exception, (struct type_info *)off_1E95AAC18, MEMORY[0x1E0DE4360]);
  }
  if (v5 == 180)
  {
    v39 = *(_DWORD *)(a1 + 32);
    v40 = *(uint64_t **)(a1 + 8);
    v41 = *(_DWORD *)(a1 + 36);
    v42 = (const void *)*v40;
    if (*(_QWORD *)(a1 + 24) || (v43 = v40[1], v41 * v39 != (_DWORD)v43 - (_DWORD)v42))
    {
      sub_1D3E3AD98(&v63, *v40, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), v39, v41);
      v45 = (unint64_t *)v63.n128_u64[0];
    }
    else
    {
      v44 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v44 + 8) = 0u;
      *(_QWORD *)v44 = &off_1E95B0388;
      *((_QWORD *)v44 + 3) = 0;
      v45 = (unint64_t *)(v44 + 24);
      *((_OWORD *)v44 + 2) = 0u;
      sub_1D3DB8410((_QWORD *)v44 + 3, v42, v43, v43 - (_QWORD)v42);
      v63.n128_u64[0] = (unint64_t)(v44 + 24);
      v63.n128_u64[1] = (unint64_t)v44;
    }
    v46 = *v45;
    v47 = v45[1];
    v48 = (_BYTE *)(v47 - 1);
    if (*v45 != v47 && (unint64_t)v48 > v46)
    {
      v50 = v46 + 1;
      do
      {
        v51 = *(_BYTE *)(v50 - 1);
        *(_BYTE *)(v50 - 1) = *v48;
        *v48-- = v51;
      }
      while (v50++ < (unint64_t)v48);
      v45 = (unint64_t *)v63.n128_u64[0];
    }
    sub_1D3E3AC80(&v62, 0, 0, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), (unint64_t)v45, v63.n128_u64[1], (int *)(a1 + 32));
    *a3 = v62;
    v53 = v63.n128_u64[1];
    if (v63.n128_u64[1])
    {
      v54 = (unint64_t *)(v63.n128_u64[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v53 + 16))(v53);
        v56 = (std::__shared_weak_count *)v53;
LABEL_61:
        std::__shared_weak_count::__release_weak(v56);
        return;
      }
    }
    return;
  }
  if (v5 != 270)
    goto LABEL_63;
  v15 = (int *)(a1 + 36);
  sub_1D3E3AC08(&v63, *(_DWORD *)(a1 + 36) * *(_DWORD *)(a1 + 32));
  v16 = v63.n128_u64[0];
  v17 = *v15;
  if (*v15 <= 0)
  {
    LODWORD(v22) = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v18 = 0;
    v19 = *(_QWORD *)v63.n128_u64[0];
    v20 = *(_DWORD *)(a1 + 40);
    v21 = **(_QWORD **)(a1 + 8) + v20 * (uint64_t)*(int *)(a1 + 28) + *(int *)(a1 + 24);
    LODWORD(v22) = *(_DWORD *)(a1 + 32);
    do
    {
      if ((int)v22 >= 1)
      {
        v23 = 0;
        v24 = -1;
        do
        {
          *(_BYTE *)(v19 + v18 + *(_DWORD *)(a1 + 36) * ((int)v22 + v24)) = *(_BYTE *)(v21 + v23++);
          v22 = *(int *)(a1 + 32);
          --v24;
        }
        while (v23 < v22);
        v17 = *(_DWORD *)(a1 + 36);
        v20 = *(_DWORD *)(a1 + 40);
      }
      ++v18;
      v21 += v20;
    }
    while (v18 < v17);
  }
  v57 = v63.n128_u64[1];
  sub_1D3E3AC80(&v62, 0, 0, v17, v22, v16, v63.n128_u64[1], v15);
  *a3 = v62;
  if (v57)
  {
    v60 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldaxr(v60);
    while (__stlxr(v59 - 1, v60));
    goto LABEL_59;
  }
}

void sub_1D3E3ABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D3E3AC08(_QWORD *a1, int a2)
{
  _QWORD *v4;
  _QWORD *result;
  char v6;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E95B0388;
  v6 = 0;
  result = sub_1D3D81DF8(v4 + 3, a2, &v6);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1D3E3AC68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1D3E3AC80(_QWORD *a1, int a2, int a3, int a4, int a5, unint64_t a6, unint64_t a7, int *a8)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;

  v16 = operator new(0x48uLL);
  v17 = v16;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E95B0318;
  v18 = v16 + 3;
  v25.n128_u64[0] = a6;
  v25.n128_u64[1] = a7;
  if (a7)
  {
    v19 = (unint64_t *)(a7 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = sub_1D3E3AE74((uint64_t)(v16 + 3), a2, a3, a4, a5, &v25, *a8);
  v22 = (std::__shared_weak_count *)v25.n128_u64[1];
  if (v25.n128_u64[1])
  {
    v23 = (unint64_t *)(v25.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *a1 = v18;
  a1[1] = v17;
}

void sub_1D3E3AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  sub_1D3D96F10((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_1D3E3AD98(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  _QWORD *v14;
  void **v15;
  char *v16;
  char *v17;

  v14 = operator new(0x30uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E95B0388;
  v14[4] = 0;
  v14[5] = 0;
  v14[3] = 0;
  v15 = (void **)(v14 + 3);
  *a1 = v14 + 3;
  a1[1] = v14;
  if (a7 * a6)
    sub_1D3E3AF38(v14 + 3, a7 * a6);
  if (a7 >= 1)
  {
    v16 = (char *)*v15;
    v17 = (char *)(a2 + a5 * (uint64_t)a3 + a4);
    do
    {
      if (a6)
        memmove(v16, v17, a6);
      v17 += a3;
      v16 += a6;
      --a7;
    }
    while (a7);
  }
}

void sub_1D3E3AE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D3D96F10(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D3E3AE74(uint64_t a1, int a2, int a3, int a4, int a5, __n128 *a6, int a7)
{
  __n128 result;
  std::logic_error *exception;

  *(_QWORD *)a1 = &off_1E95AEFB0;
  result = *a6;
  *(__n128 *)(a1 + 8) = *a6;
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = a7;
  if ((a3 | a2 | a4 | a5) < 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested offset is outside the image");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E95AAC08, MEMORY[0x1E0DE42E0]);
  }
  return result;
}

void sub_1D3E3AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1D3D96F10(a10);
  _Unwind_Resume(a1);
}

void sub_1D3E3AF38(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1D3D6D4F8();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_1D3E3B05C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95B0388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D3E3B06C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E95B0388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8254C54);
}

void sub_1D3E3B09C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

unint64_t sub_1D3E3B0B8(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  BOOL v22;
  int *v23;
  int v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  int v29;
  BOOL v30;
  BOOL v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  BOOL v48;
  BOOL v49;
  int *v50;
  int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  int *v54;
  int v55;
  int v56;
  BOOL v57;
  BOOL v58;
  int32x2_t v59;
  int v60;
  int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  int v64;
  int v65;
  BOOL v66;
  BOOL v67;
  int *v68;
  int v69;
  _BOOL4 v70;
  int32x2_t v71;
  int v72;
  int v73;
  _BOOL4 v74;
  uint64_t v75;
  int v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  _BOOL4 v83;
  int32x2_t v84;
  int *v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  _BOOL4 v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  BOOL v101;
  BOOL v102;
  int *v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  uint64_t v107;
  int32x2_t *v108;
  int32x2_t v109;
  int32x2_t v110;
  __int32 v111;
  __int8 v112;
  int32x2_t *v113;
  BOOL v114;
  int32x2_t v115;
  unint64_t v116;
  int32x2_t *v117;
  uint64_t v118;
  int32x2_t v119;
  int32x2_t v120;
  int v121;
  __int8 v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  int32x2_t v126;
  int32x2_t *v127;
  int32x2_t *v128;
  uint64_t v129;
  uint64_t v130;
  int32x2_t v131;
  unsigned __int8 v132;
  int32x2_t v133;
  __int8 v134;
  uint64_t v135;
  unint64_t v136;
  int32x2_t *v137;
  int32x2_t v138;
  int32x2_t v139;
  __int8 v140;
  int32x2_t *v141;
  int32x2_t v142;
  __int8 v143;
  int v145;
  int v146;
  int v147;
  int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  int v155;
  BOOL v156;
  BOOL v157;

  v7 = (int *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *(a2 - 2);
        v86 = v69 == *v9;
        v70 = v69 < *v9;
        if (v86)
          v70 = *(a2 - 1) < v9[1];
        if (v70)
        {
          v71 = *(int32x2_t *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v8;
          *(int32x2_t *)v8 = v71;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_1D3E3B998(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)sub_1D3E3BA70(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        result = (unint64_t)sub_1D3E3BA70(v9, v9 + 2, v9 + 4, v9 + 6);
        v72 = *(a2 - 2);
        v73 = v9[6];
        v86 = v72 == v73;
        v74 = v72 < v73;
        if (v86)
          v74 = *(a2 - 1) < v9[7];
        if (v74)
        {
          v75 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = *(_QWORD *)v8;
          *(_QWORD *)v8 = v75;
          LODWORD(v75) = v9[6];
          v76 = v9[4];
          v86 = (_DWORD)v75 == v76;
          v77 = (int)v75 < v76;
          if (v86)
            v77 = v9[7] < v9[5];
          if (v77)
          {
            v79 = *((_QWORD *)v9 + 2);
            v78 = *((_QWORD *)v9 + 3);
            *((_QWORD *)v9 + 2) = v78;
            *((_QWORD *)v9 + 3) = v79;
            v80 = v9[2];
            v86 = v80 == (_DWORD)v78;
            v81 = v80 > (int)v78;
            if (v86)
              v81 = v9[3] > SHIDWORD(v78);
            if (v81)
            {
              v82 = *((_QWORD *)v9 + 1);
              *((_QWORD *)v9 + 1) = v78;
              *((_QWORD *)v9 + 2) = v82;
              v83 = v9[1] > SHIDWORD(v78);
              if (*v9 != (_DWORD)v78)
                v83 = *v9 > (int)v78;
              if (v83)
              {
                v84 = *(int32x2_t *)v9;
                *(_QWORD *)v9 = v78;
                *((int32x2_t *)v9 + 1) = v84;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v85 = v9 + 2;
          v86 = v9 == a2 || v85 == a2;
          v87 = v86;
          if ((a4 & 1) != 0)
          {
            if ((v87 & 1) == 0)
            {
              v88 = 0;
              v89 = v9;
              do
              {
                v90 = v89[2];
                v91 = v89[3];
                v92 = *v89;
                v93 = v89[1];
                v89 = v85;
                v94 = v91 < v93;
                v86 = v90 == v92;
                v95 = v90 < v92;
                if (!v86)
                  v94 = v95;
                if (v94)
                {
                  v96 = *(_QWORD *)v89;
                  v97 = HIDWORD(*(_QWORD *)v89);
                  v98 = v88;
                  while (1)
                  {
                    v99 = (char *)v9 + v98;
                    *(_QWORD *)((char *)v9 + v98 + 8) = *(_QWORD *)((char *)v9 + v98);
                    if (!v98)
                      break;
                    v100 = *((_DWORD *)v99 - 2);
                    v101 = *((_DWORD *)v99 - 1) > (int)v97;
                    v86 = v100 == (_DWORD)v96;
                    v102 = v100 > (int)v96;
                    if (!v86)
                      v101 = v102;
                    v98 -= 8;
                    if (!v101)
                    {
                      v103 = (int *)((char *)v9 + v98 + 8);
                      goto LABEL_114;
                    }
                  }
                  v103 = v9;
LABEL_114:
                  *(_QWORD *)v103 = v96;
                }
                v85 = v89 + 2;
                v88 += 8;
              }
              while (v89 + 2 != a2);
            }
          }
          else if ((v87 & 1) == 0)
          {
            do
            {
              v145 = v7[2];
              v146 = v7[3];
              v147 = *v7;
              v148 = v7[1];
              v7 = v85;
              v149 = v146 < v148;
              v86 = v145 == v147;
              v150 = v145 < v147;
              if (v86)
                v150 = v149;
              if (v150)
              {
                v151 = *(_QWORD *)v85;
                v152 = HIDWORD(*(_QWORD *)v85);
                do
                {
                  v153 = v85;
                  v154 = *((_QWORD *)v85 - 1);
                  v85 -= 2;
                  *(_QWORD *)v153 = v154;
                  v155 = *(v153 - 4);
                  v156 = *(v153 - 3) > (int)v152;
                  v86 = v155 == (_DWORD)v151;
                  v157 = v155 > (int)v151;
                  if (!v86)
                    v156 = v157;
                }
                while (v156);
                *(_QWORD *)v85 = v151;
              }
              v85 = v7 + 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v104 = (v11 - 2) >> 1;
            v105 = v104;
            do
            {
              v106 = v105;
              if (v104 >= v105)
              {
                v107 = (2 * v105) | 1;
                v108 = (int32x2_t *)&v9[2 * v107];
                if (2 * v106 + 2 >= (uint64_t)v11)
                {
                  v111 = v108->i32[0];
                }
                else
                {
                  v109 = v108[1];
                  v110 = vcgt_s32(v109, *v108);
                  v111 = (__int32)*v108;
                  v112 = v110.i8[4];
                  if (v111 != v109.i32[0])
                    v112 = v110.i8[0];
                  if ((v112 & 1) != 0)
                  {
                    v111 = (__int32)v108[1];
                    ++v108;
                    v107 = 2 * v106 + 2;
                  }
                }
                v113 = (int32x2_t *)&v9[2 * v106];
                result = v113->u32[1];
                v86 = v111 == v113->i32[0];
                v114 = v111 < v113->i32[0];
                if (v86)
                  v114 = v108->i32[1] < (int)result;
                if (!v114)
                {
                  v115 = *v113;
                  v116 = HIDWORD(*(unint64_t *)v113);
                  do
                  {
                    v117 = v113;
                    v113 = v108;
                    *v117 = *v108;
                    if (v104 < v107)
                      break;
                    v118 = (2 * v107) | 1;
                    v108 = (int32x2_t *)&v9[2 * v118];
                    v107 = 2 * v107 + 2;
                    if (v107 >= (uint64_t)v11)
                    {
                      v121 = v108->i32[0];
                      v107 = v118;
                    }
                    else
                    {
                      v119 = v108[1];
                      v120 = vcgt_s32(v119, *v108);
                      v121 = (int)*v108;
                      v122 = v120.i8[4];
                      if (v121 != v119.i32[0])
                        v122 = v120.i8[0];
                      if ((v122 & 1) != 0)
                      {
                        v121 = (int)v108[1];
                        ++v108;
                      }
                      else
                      {
                        v107 = v118;
                      }
                    }
                    v123 = v108->i32[1] < (int)v116;
                    v86 = v121 == v115.i32[0];
                    result = v121 < v115.i32[0];
                    if (!v86)
                      v123 = result;
                  }
                  while (!v123);
                  *v113 = v115;
                }
              }
              v105 = v106 - 1;
            }
            while (v106);
            v124 = (unint64_t)v10 >> 3;
            do
            {
              v125 = 0;
              v126 = *(int32x2_t *)v9;
              v127 = (int32x2_t *)v9;
              do
              {
                v128 = &v127[v125 + 1];
                v129 = (2 * v125) | 1;
                v130 = 2 * v125 + 2;
                if (v130 < v124)
                {
                  v131 = v128[1];
                  v132 = vceq_s32(*v128, v131).u8[0];
                  v133 = vcgt_s32(v131, *v128);
                  result = v133.u32[0];
                  v134 = (v132 & 1) != 0 ? v133.i8[4] : v133.i8[0];
                  if ((v134 & 1) != 0)
                  {
                    ++v128;
                    v129 = v130;
                  }
                }
                *v127 = *v128;
                v127 = v128;
                v125 = v129;
              }
              while (v129 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
              a2 -= 2;
              if (v128 == (int32x2_t *)a2)
              {
                *v128 = v126;
              }
              else
              {
                *v128 = *(int32x2_t *)a2;
                *(int32x2_t *)a2 = v126;
                v135 = (char *)v128 - (char *)v9 + 8;
                if (v135 >= 9)
                {
                  v136 = (((unint64_t)v135 >> 3) - 2) >> 1;
                  v137 = (int32x2_t *)&v9[2 * v136];
                  v138 = *v128;
                  v139 = vcgt_s32(*v128, *v137);
                  v140 = (vceq_s32(*v137, *v128).u8[0] & 1) != 0 ? v139.i8[4] : v139.i8[0];
                  if ((v140 & 1) != 0)
                  {
                    do
                    {
                      v141 = v128;
                      v128 = v137;
                      *v141 = *v137;
                      if (!v136)
                        break;
                      v136 = (v136 - 1) >> 1;
                      v137 = (int32x2_t *)&v9[2 * v136];
                      v142 = vcgt_s32(v138, *v137);
                      v143 = (vceq_s32(*v137, v138).u8[0] & 1) != 0 ? v142.i8[4] : v142.i8[0];
                    }
                    while ((v143 & 1) != 0);
                    *v128 = v138;
                  }
                }
              }
            }
            while (v124-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[2 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)sub_1D3E3B998(&v7[2 * (v11 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1D3E3B998(v7, &v7[2 * (v11 >> 1)], a2 - 2);
          sub_1D3E3B998(v7 + 2, v13 - 2, a2 - 4);
          sub_1D3E3B998(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
          result = (unint64_t)sub_1D3E3B998(v13 - 2, v13, &v7[2 * v12 + 2]);
          v14 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v7 - 2);
          v86 = v15 == *v7;
          v16 = v15 < *v7;
          if (v86)
            v16 = *(v7 - 1) < v7[1];
          if (!v16)
          {
            v42 = *(_QWORD *)v7;
            v43 = HIDWORD(*(_QWORD *)v7);
            v44 = *(a2 - 2);
            v86 = v44 == *(_QWORD *)v7;
            v45 = v44 > (int)*(_QWORD *)v7;
            if (v86)
              v45 = *(a2 - 1) > (int)v43;
            if (v45)
            {
              v9 = v7;
              do
              {
                v46 = v9[2];
                v47 = v9[3];
                v9 += 2;
                v48 = v47 > (int)v43;
                v86 = v46 == (_DWORD)v42;
                v49 = v46 > (int)v42;
                if (v86)
                  v49 = v48;
              }
              while (!v49);
            }
            else
            {
              v50 = v7 + 2;
              do
              {
                v9 = v50;
                if (v50 >= a2)
                  break;
                v51 = *v50;
                v52 = v9[1] > (int)v43;
                v86 = v51 == (_DWORD)v42;
                v53 = v51 > (int)v42;
                if (!v86)
                  v52 = v53;
                v50 = v9 + 2;
              }
              while (!v52);
            }
            v54 = a2;
            if (v9 < a2)
            {
              v54 = a2;
              do
              {
                v55 = *(v54 - 2);
                v56 = *(v54 - 1);
                v54 -= 2;
                v57 = v56 > (int)v43;
                v86 = v55 == (_DWORD)v42;
                v58 = v55 > (int)v42;
                if (v86)
                  v58 = v57;
              }
              while (v58);
            }
            while (v9 < v54)
            {
              v59 = *(int32x2_t *)v9;
              *(_QWORD *)v9 = *(_QWORD *)v54;
              *(int32x2_t *)v54 = v59;
              do
              {
                v60 = v9[2];
                v61 = v9[3];
                v9 += 2;
                v62 = v61 > (int)v43;
                v86 = v60 == (_DWORD)v42;
                v63 = v60 > (int)v42;
                if (v86)
                  v63 = v62;
              }
              while (!v63);
              do
              {
                v64 = *(v54 - 2);
                v65 = *(v54 - 1);
                v54 -= 2;
                v66 = v65 > (int)v43;
                v86 = v64 == (_DWORD)v42;
                v67 = v64 > (int)v42;
                if (v86)
                  v67 = v66;
              }
              while (v67);
            }
            v68 = v9 - 2;
            if (v9 - 2 != v7)
              *(_QWORD *)v7 = *(_QWORD *)v68;
            a4 = 0;
            *(_QWORD *)v68 = v42;
            continue;
          }
        }
        v17 = *(_QWORD *)v7;
        v18 = HIDWORD(*(_QWORD *)v7);
        v19 = v7;
        do
        {
          v20 = v19;
          v21 = v19[2];
          v19 += 2;
          v22 = v21 < (int)v17;
          if (v21 == (_DWORD)v17)
            v22 = v20[3] < (int)v18;
        }
        while (v22);
        v23 = a2;
        if (v20 == v7)
        {
          v23 = a2;
          do
          {
            if (v19 >= v23)
              break;
            v28 = *(v23 - 2);
            v29 = *(v23 - 1);
            v23 -= 2;
            v30 = v29 < (int)v18;
            v86 = v28 == (_DWORD)v17;
            v31 = v28 < (int)v17;
            if (v86)
              v31 = v30;
          }
          while (!v31);
        }
        else
        {
          do
          {
            v24 = *(v23 - 2);
            v25 = *(v23 - 1);
            v23 -= 2;
            v26 = v25 < (int)v18;
            v86 = v24 == (_DWORD)v17;
            v27 = v24 < (int)v17;
            if (v86)
              v27 = v26;
          }
          while (!v27);
        }
        if (v19 < v23)
        {
          v32 = v19;
          v33 = v23;
          do
          {
            v34 = *(_QWORD *)v32;
            *(_QWORD *)v32 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v34;
            do
            {
              v20 = v32;
              v35 = v32[2];
              v32 += 2;
              v36 = v35 < (int)v17;
              if (v35 == (_DWORD)v17)
                v36 = v20[3] < (int)v18;
            }
            while (v36);
            do
            {
              v37 = *(v33 - 2);
              v38 = *(v33 - 1);
              v33 -= 2;
              v39 = v38 < (int)v18;
              v86 = v37 == (_DWORD)v17;
              v40 = v37 < (int)v17;
              if (v86)
                v40 = v39;
            }
            while (!v40);
          }
          while (v32 < v33);
        }
        if (v20 != v7)
          *(_QWORD *)v7 = *(_QWORD *)v20;
        *(_QWORD *)v20 = v17;
        if (v19 < v23)
        {
LABEL_42:
          result = sub_1D3E3B0B8(v7, v20, a3, a4 & 1);
          a4 = 0;
          v9 = v20 + 2;
          continue;
        }
        v41 = sub_1D3E3BB40(v7, v20);
        v9 = v20 + 2;
        result = sub_1D3E3BB40(v20 + 2, a2);
        if (!(_DWORD)result)
        {
          if (v41)
            continue;
          goto LABEL_42;
        }
        a2 = v20;
        if (!v41)
          goto LABEL_2;
        return result;
    }
  }
}

