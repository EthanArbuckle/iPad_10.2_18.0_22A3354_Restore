E5RT::ExecutionStream *cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::AJAXExtendE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5)
{
  void *v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  unint64_t v21;
  _BYTE v22[48];

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  v9 = __p;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __p[1] = (void *)__len;
    v21 = v11 | 0x8000000000000000;
    __p[0] = v9;
    goto LABEL_11;
  }
  HIBYTE(v21) = __len;
  if (__len)
LABEL_11:
    memmove(v9, __src, __len);
  *((_BYTE *)v9 + __len) = 0;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v22, a5);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(a1, (uint64_t)&v19);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkIOTypes(a1);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts((E5RT::ExecutionStreamOperation **)a1);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v18 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  E5RT::ExecutionStream::PreWireInUseAllocations(*(E5RT::ExecutionStream **)a1);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(a1, 0);
  return a1;
}

void sub_248CAC3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t *v22;
  uint64_t v24;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
  v24 = *v22;
  *v22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::espresso_inference::E5MLModuleSettings::~E5MLModuleSettings(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkIOTypes(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  E5RT::IOPort *InputPortRef;
  _OWORD *v3;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v5;
  E5RT::IOPort *v6;
  uint64_t v7;
  _OWORD *v8;
  E5RT::IOPort *v9;
  uint64_t v10;
  _OWORD *v11;
  E5RT::IOPort *OutputPortRef;
  _OWORD *v13;
  E5RT::IOPort *v14;
  _QWORD *v15;
  E5RT::IOPort *v16;
  _QWORD *v17;
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  void *__p;
  void *v23;
  char *v24;
  _BYTE v25[16];
  _BYTE v26[16];
  void *v27;
  void *v28;
  _OWORD *v29;
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];

  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_new_token_mask");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  E5RT::TensorDataType::TensorDataType();
  v3 = operator new(0x20uLL);
  v28 = v3 + 2;
  v29 = v3 + 2;
  *v3 = xmmword_248D72C08;
  v3[1] = unk_248D72C18;
  v27 = v3;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v26, (uint64_t)&v27);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  *((_QWORD *)this + 3) = E5RT::TensorDescriptor::GetNumElements(v5);
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_cached_keys");
  v6 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v7 = *((_QWORD *)this + 3);
  v8 = operator new(0x28uLL);
  v23 = (char *)v8 + 40;
  v24 = (char *)v8 + 40;
  *v8 = xmmword_248D72BD0;
  v8[1] = xmmword_248D72BD0;
  *((_QWORD *)v8 + 4) = v7;
  __p = v8;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v6, (uint64_t)v25, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  std::string::basic_string[abi:ne180100]<0>(&v27, "in_cached_values");
  v9 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v10 = *((_QWORD *)this + 3);
  v11 = operator new(0x28uLL);
  v23 = (char *)v11 + 40;
  v24 = (char *)v11 + 40;
  *v11 = xmmword_248D72BD0;
  v11[1] = xmmword_248D72BD0;
  *((_QWORD *)v11 + 4) = v10;
  __p = v11;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v9, (uint64_t)v21, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v21);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkInputTokenIDTensorType(this);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkSelfAttentionTensorType((E5RT::ExecutionStreamOperation **)this);
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_logits");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v13 = operator new(0x20uLL);
  v23 = v13 + 2;
  v24 = (char *)(v13 + 2);
  *v13 = xmmword_248D72C28;
  v13[1] = unk_248D72C38;
  __p = v13;
  cgm::token_generation_inference::ajax::utils::checkTensorType(OutputPortRef, (uint64_t)v20, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v20);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_cached_keys");
  v14 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v15 = operator new(0x28uLL);
  v23 = v15 + 5;
  v24 = (char *)(v15 + 5);
  v15[4] = 1;
  *(_OWORD *)v15 = xmmword_248D72C48;
  *((_OWORD *)v15 + 1) = unk_248D72C58;
  __p = v15;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v14, (uint64_t)v19, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v19);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  std::string::basic_string[abi:ne180100]<0>(&v27, "out_cached_values");
  v16 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v17 = operator new(0x28uLL);
  v23 = v17 + 5;
  v24 = (char *)(v17 + 5);
  v17[4] = 1;
  *(_OWORD *)v17 = xmmword_248D72C48;
  *((_OWORD *)v17 + 1) = unk_248D72C58;
  __p = v17;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v16, (uint64_t)v18, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v18);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v30);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v31);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v32);
}

void sub_248CAC86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a13);
  if (*(char *)(v24 - 81) < 0)
    operator delete(*(void **)(v24 - 104));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 80));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 64));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v24 - 48));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, unint64_t a2)
{
  void *v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p;
  std::__shared_weak_count *v15;
  char v16;
  std::__shared_weak_count *v17;

  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  v4 = (void *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v5 < 2)
    v4 = 0;
  if ((uint64_t)(v5 & 0xFFFFFFFFFFFFFFFELL) >= 1)
    memset_pattern16(v4, &unk_248D72BF0, 2 * (((v5 & 0xFFFFFFFFFFFFFFFELL) >> 1) - ((v5 & 0xFFFFFFFFFFFFFFFELL) != 1)) + 2);
  if (v16 < 0)
    operator delete(__p);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(this, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_mask");
  v6 = (void *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v7 < 2)
    v6 = 0;
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) >= 1)
    bzero(v6, 2 * (((v7 & 0xFFFFFFFFFFFFFFFELL) >> 1) - ((v7 & 0xFFFFFFFFFFFFFFFELL) != 1)) + 2);
  if (v16 < 0)
    operator delete(__p);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(this, (uint64_t)&__p);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&__p, a2);
  v8 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_248CACB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v15 + 16);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, __int16 a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _WORD *v6;
  void *__p;
  char v8;

  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  v3 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  v5 = v4;
  if (v8 < 0)
    operator delete(__p);
  if (v5 >= 2)
    v6 = (_WORD *)v3;
  else
    v6 = 0;
  *v6 = a2;
}

void sub_248CACBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  char v5;
  void *v6;
  char v7;

  std::string::basic_string[abi:ne180100]<0>(&v6, "in_cached_keys");
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort((_OWORD *)a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values");
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort((_OWORD *)(a2 + 16));
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 3);
  if (v5 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
}

void sub_248CACC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v20);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this, __int16 a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  void *__p[2];
  char v27;

  v5 = *((_QWORD *)this + 3);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setInputTokenID(this, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_mask");
  v6 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  v7 = a3 % v5;
  if (v8 >= 2)
    v9 = v6;
  else
    v9 = 0;
  if (v27 < 0)
    operator delete(__p[0]);
  *(_WORD *)(v9 + 2 * v7) = 15360;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setSelfAttentionBuffer((E5RT::ExecutionStreamOperation **)this, a3);
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)this);
  *(_WORD *)(v9 + 2 * v7) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_keys");
  v10 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  v12 = v11;
  std::string::basic_string[abi:ne180100]<0>(v24, "in_cached_keys");
  v13 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v12 >= 2)
    v15 = (void *)v10;
  else
    v15 = 0;
  if (v14 >= 2)
    v16 = v13;
  else
    v16 = 0;
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v15, v12 >> 1, 0, 1uLL, v16, v14 >> 1, v7, *((_QWORD *)this + 3), 1);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_values");
  v17 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  v19 = v18;
  std::string::basic_string[abi:ne180100]<0>(v24, "in_cached_values");
  v20 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v19 >= 2)
    v22 = (void *)v17;
  else
    v22 = 0;
  if (v21 >= 2)
    v23 = v20;
  else
    v23 = 0;
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v22, v19 >> 1, 0, 1uLL, v23, v21 >> 1, v7, *((_QWORD *)this + 3), 1);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(__p[0]);
}

void sub_248CACEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::setSelfAttentionBuffer(E5RT::ExecutionStreamOperation **this, unint64_t a2)
{
  uint64_t InputPorts;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  unint64_t v18;
  int32x2_t v20;
  void *__p;
  char v29;
  _BYTE v30[40];

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v30, InputPorts);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  v4 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  if (v5 >= 2)
    v6 = v4;
  else
    v6 = 0;
  if (v29 < 0)
    operator delete(__p);
  v7 = 0;
  _S3 = (float)a2;
  v9 = 1;
  if (a2 + 1 > 1)
    v9 = a2 + 1;
  v10 = (uint64x2_t)vdupq_n_s64(v9 - 1);
  v11 = (int64x2_t)xmmword_248D72BE0;
  v12 = vdupq_n_s64(2uLL);
  __asm { FCVT            H3, S3 }
  v18 = (v9 + 1) & 0xFFFFFFFFFFFFFFFELL;
  __asm { FCVT            S3, H3 }
  do
  {
    v20 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)v11));
    if ((v20.i8[0] & 1) != 0)
    {
      _S5 = (float)v7;
      __asm
      {
        FCVT            H5, S5
        FCVT            S5, H5
      }
      _S5 = _S5 - _S3;
      __asm { FCVT            H5, S5 }
      *(_WORD *)(v6 + 2 * v7) = LOWORD(_S5);
    }
    if ((v20.i8[4] & 1) != 0)
    {
      _S4 = (float)(v7 + 1);
      __asm
      {
        FCVT            H4, S4
        FCVT            S4, H4
      }
      _S4 = _S4 - _S3;
      __asm { FCVT            H4, S4 }
      *(_WORD *)(v6 + 2 * v7 + 2) = LOWORD(_S4);
    }
    v7 += 2;
    v11 = vaddq_s64(v11, v12);
  }
  while (v18 != v7);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v30);
}

void sub_248CAD014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  std::runtime_error *exception;
  uint64_t v30;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;

  v4 = a2[1];
  v5 = *a3;
  v6 = a3[1] - *a3;
  if (v4 - *a2 != v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Tried to purge key-value cache, but the number of source destinations does not match the number of target destinations.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (v4 != *a2)
  {
    v30 = a4;
    v9 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v34, "in_cached_values");
      v10 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      v12 = v11;
      v13 = *(unsigned int *)(*a2 + 4 * v9);
      v14 = *(_QWORD *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values");
      v15 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      if (v12 >= 2)
        v17 = (void *)v10;
      else
        v17 = 0;
      if (v16 >= 2)
        v18 = v15;
      else
        v18 = 0;
      _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v17, v12 >> 1, v13, v14, v18, v16 >> 1, *(unsigned int *)(*a3 + 4 * v9), *(_QWORD *)(a1 + 24), 1);
      if (v33 < 0)
        operator delete(__p[0]);
      if (v35 < 0)
        operator delete(v34[0]);
      std::string::basic_string[abi:ne180100]<0>(v34, "in_cached_keys");
      v19 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      v21 = v20;
      v22 = *(unsigned int *)(*a2 + 4 * v9);
      v23 = *(_QWORD *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_keys");
      v24 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
      if (v21 >= 2)
        v26 = (void *)v19;
      else
        v26 = 0;
      if (v25 >= 2)
        v27 = v24;
      else
        v27 = 0;
      _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v26, v21 >> 1, v22, v23, v27, v25 >> 1, *(unsigned int *)(*a3 + 4 * v9), *(_QWORD *)(a1 + 24), 1);
      if (v33 < 0)
        operator delete(__p[0]);
      if (v35 < 0)
        operator delete(v34[0]);
      ++v9;
    }
    while (v9 < (uint64_t)(a2[1] - *a2) >> 2);
    v5 = *a3;
    v6 = a3[1] - *a3;
    a4 = v30;
  }
  return *(unsigned int *)(v6 + v5 - 4) - a4;
}

void sub_248CAD280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkInputTokenIDTensorType(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *this)
{
  E5RT::IOPort *InputPortRef;
  _QWORD *v2;
  _BYTE v3[16];
  void *__p;
  void *v5;
  char *v6;
  _BYTE v7[16];

  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  E5RT::TensorDataType::TensorDataType();
  v2 = operator new(0x18uLL);
  v5 = v2 + 3;
  v6 = (char *)(v2 + 3);
  v2[2] = 2;
  *(_OWORD *)v2 = xmmword_248D72C70;
  __p = v2;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v3, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v3);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v7);
}

void sub_248CAD3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v17 - 32));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::checkSelfAttentionTensorType(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  E5RT::IOPort *InputPortRef;
  E5RT::ExecutionStreamOperation *v4;
  int64x2_t *v5;
  _BYTE v6[16];
  void *__p;
  int64x2_t *v8;
  int64x2_t *v9;
  _BYTE v10[40];
  _BYTE v11[16];

  E5RT::TensorDataType::TensorDataType();
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v10, InputPorts);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  E5RT::TensorDataType::TensorDataType();
  v4 = this[3];
  v5 = (int64x2_t *)operator new(0x20uLL);
  v8 = v5 + 2;
  v9 = v5 + 2;
  v5->i64[0] = 1;
  v5->i64[1] = (uint64_t)v4;
  v5[1] = vdupq_n_s64(1uLL);
  __p = v5;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v6, (uint64_t)&__p);
  if (__p)
  {
    v8 = (int64x2_t *)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v11);
}

void sub_248CAD4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a17);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v17 - 32));
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2519DD758, MEMORY[0x24BEDAAF0]);
}

void sub_248CAD628(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_248CAD85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_248CADD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_248CADD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_248CAE360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void *_ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(void *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  _WORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;

  v27 = result;
  v28 = a2;
  v25 = a5;
  v26 = a6;
  if ((a6 - a7 - a9) / a8 != (a2 - a3 - a9) / a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Number of src strides dont match number of dst strides");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (!a9)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v23, 0);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Strided Chunk length < 0: ", &v23, &v24);
    std::runtime_error::runtime_error(v22, &v24);
    __cxa_throw(v22, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v9 = a3;
  v10 = a9 - 1;
  if (a9 - 1 + a3 < a2)
  {
    v12 = a7;
    v15 = result;
    do
    {
      if (v10 + v12 >= v26)
        break;
      if (a9 == 1)
      {
        *(_WORD *)(a5 + 2 * v12) = v15[v9];
      }
      else
      {
        v16 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v27, v9, a9);
        v18 = v17;
        v19 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v25, v12, a9);
        result = _ZN3cgm26token_generation_inference4ajax5utils4copyIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEES7_(v16, v18, v19, v20);
        a2 = v28;
      }
      v9 += a4;
      v12 += a8;
    }
    while (v10 + v9 < a2);
  }
  return result;
}

void sub_248CAE5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *_ZN3cgm26token_generation_inference4ajax5utils4copyIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEES7_(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  std::runtime_error *exception;

  if (a2 != a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "dimensions mismatch");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (a2)
    return memmove(__dst, __src, 2 * a2);
  return __src;
}

void sub_248CAE6E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_2519DD750, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 2 * a2;
}

void sub_248CAE768(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8A0] + 16);
  return result;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_248CAE7FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_248CAEA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_248CAEAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>(uint64_t a1)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::AJAXE5MLModelBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  E5RT::ProgramLibrary *v5;
  std::__shared_weak_count *v6;
  E5RT::ProgramLibrary *v7;
  std::string::size_type v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  E5RT::ProgramLibrary *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  E5RT::ProgramLibrary *v22;
  std::__shared_weak_count *v23;
  std::string v24;
  E5RT::ProgramLibrary *v25;
  E5RT::ProgramLibrary *v26;
  std::__shared_weak_count *v27;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a1 + 16;
  *(_OWORD *)a1 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  E5RT::ProgramLibrary::OpenLibrary();
  v5 = v25;
  v26 = v25;
  if (v25)
  {
    v6 = (std::__shared_weak_count *)operator new();
    v7 = v25;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DDDA0;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  }
  else
  {
    v6 = 0;
  }
  v27 = v6;
  v25 = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1, (uint64_t *)&v24);
  v8 = v24.__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = 0;
  if (v8)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v8 + 8))(v8);
  v22 = v5;
  v23 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable(&v22, &v24);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v4, (__int128 *)&v24);
  size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v25;
  v25 = 0;
  if (v17)
    (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v17 + 8))(v17);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

void sub_248CAEEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_2519DDE00;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::create(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v5;
  __int128 *v6;
  size_t size;
  std::string *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::runtime_error *exception;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  E5RT::ProgramLibrary *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  std::__shared_weak_count *v20;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v19 = *this;
  E5RT::ProgramLibrary::OpenLibrary();
  if (v17)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DDDA0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  }
  else
  {
    v5 = 0;
  }
  v18 = v5;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v6 = *(__int128 **)(E5RT::ProgramLibrary::GetExportedFunctions(v17) + 16);
  if (!v6)
  {
LABEL_28:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Failed to load base model due to no valid E5 functions found.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v19);
  }
  while (1)
  {
    std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](&v19, v6 + 1);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    if (size == strlen("load_embeddings"))
    {
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v19;
      else
        v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
      v9 = memcmp(v8, "load_embeddings", size) != 0;
    }
    else
    {
      v9 = 1;
    }
    v10 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (v9)
      break;
    v6 = *(__int128 **)v6;
    if (!v6)
      goto LABEL_28;
  }
  v14 = operator new();
  cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::AJAXE5MLModelBase(v14, (uint64_t)this);
  *a2 = v14;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_248CAF2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase::getSharedConstants(cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "in_embeddings");
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)&v8 + 1) = *((_QWORD *)this + 2);
    v9 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(a2, (unsigned __int8 *)__p, 1);
  }
  else
  {
    v9 = 0;
    *(_OWORD *)__p = 0u;
    v8 = 0u;
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(a2, (unsigned __int8 *)__p, 1);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&v8 + 8);
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
}

void sub_248CAF484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::~pair(uint64_t a1)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ProgramLibrary  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, a2, (__int128 *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_248CAF68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

E5RT::ProgramLibrary *cgm::token_generation_inference::ajax::AJAXE5MLModelLoader::createModelFromBundle@<X0>(TGIE5ModelConfiguration *this@<X0>, cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel **a2@<X8>)
{
  std::string *p_var1;
  _BOOL4 v6;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *v7;
  E5RT::ProgramLibrary *result;
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel **v9;
  uint64_t *v10;
  NSObject *v11;
  std::string::size_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *v21;
  std::string *v22;
  char *v23;
  NSObject *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  E5RT::TensorDescriptor *v36;
  uint64_t v37;
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *v38;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *p_p;
  uint64_t v43;
  std::runtime_error *exception;
  std::runtime_error *v45;
  std::runtime_error *v46;
  _QWORD *ExportedFunctions;
  void *v48[2];
  char v49;
  std::string __p;
  char v51;
  std::string *v52;
  std::string *v53;
  unint64_t v54;
  E5RT::ProgramLibrary *v55;
  std::string v56;
  std::string v57;
  uint64_t v58;
  std::__fs::filesystem::path::__string_view v59;

  v58 = *MEMORY[0x24BDAC8D0];
  p_var1 = (std::string *)&this->var1;
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)&this->var1, (uint64_t)&v57);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".mil");
  v59.__data_ = (const std::string_view::value_type *)&__p;
  v6 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v57, v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_5;
  }
  else if (v6)
  {
LABEL_5:
    if (this->var0 == 2)
    {
      v7 = (cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *)operator new();
      result = (E5RT::ProgramLibrary *)cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::FlexibleShapeAJAXE5MLModel(v7, this);
    }
    else
    {
      if (this->var0 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v57, "Cannot load a MIL model without being told the ModelType");
        cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v57);
      }
      v7 = (cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *)operator new();
      result = (E5RT::ProgramLibrary *)cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(v7, this);
    }
    *a2 = v7;
    return result;
  }
  if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, this->var1.var0.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var0.var1.var1);
  else
    v57 = *p_var1;
  E5RT::ProgramLibrary::OpenLibrary();
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v55);
  v9 = a2;
  TGIE5ModelConfiguration::e5FunctionNames(this, (uint64_t *)&v52);
  if (v52 == v53)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(v57.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_248CAA000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "No function names in the model configuration, reading from the model bundle", (uint8_t *)&v57, 2u);
    }
    v10 = (uint64_t *)ExportedFunctions[2];
    if (v10)
    {
      v11 = MEMORY[0x24BDACB70];
      do
      {
        v12 = (std::string::size_type *)(v10 + 2);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v13 = (std::string::size_type)(v10 + 2);
          if (*((char *)v10 + 39) < 0)
            v13 = *v12;
          LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = v13;
          _os_log_impl(&dword_248CAA000, v11, OS_LOG_TYPE_INFO, "Found exported function in model bundle: %s", (uint8_t *)&v57, 0xCu);
        }
        v14 = v53;
        if ((unint64_t)v53 >= v54)
        {
          v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v52, (__int128 *)v10 + 1);
        }
        else
        {
          if (*((char *)v10 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v53, (const std::string::value_type *)v10[2], v10[3]);
          }
          else
          {
            v15 = *(_OWORD *)v12;
            v53->__r_.__value_.__r.__words[2] = v10[4];
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          v16 = v14 + 1;
        }
        v53 = v16;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
  }
  v17 = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v55);
  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v57, "load_embeddings");
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v17, (unsigned __int8 *)&v57);
  v19 = v18;
  v20 = v9;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v19)
      goto LABEL_34;
LABEL_39:
    v23 = (char *)v52;
    v22 = v53;
    if (v52 == v53)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      v51 = 0;
    }
    else
    {
      v24 = MEMORY[0x24BDACB70];
      do
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          v25 = (std::string::size_type)v23;
          if (v23[23] < 0)
            v25 = *(_QWORD *)v23;
          LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = v25;
          _os_log_impl(&dword_248CAA000, v24, OS_LOG_TYPE_INFO, "Found exported function in model bundle: %s", (uint8_t *)&v57, 0xCu);
        }
        if (cgm::token_generation_inference::ajax::utils::isPromptFunctionName(v23))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            LOWORD(v57.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_248CAA000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Creating enumerated shape model", (uint8_t *)&v57, 2u);
          }
          v38 = (cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *)operator new();
          cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::EnumeratedShapeAJAXE5MLModel(v38, this);
          *v9 = v38;
          goto LABEL_35;
        }
        v23 += 24;
      }
      while (v23 != (char *)v22);
      v27 = v52;
      v26 = v53;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v51 = 0;
      v20 = v9;
      if (v52 != v53)
      {
        while (!cgm::token_generation_inference::ajax::utils::isExtendFunctionName((char *)v27))
        {
          if (++v27 == v26)
            goto LABEL_81;
        }
        std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&__p, v27);
LABEL_81:
        if (v51)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            _os_log_impl(&dword_248CAA000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Creating static shape model with extend function name: %s", (uint8_t *)&v57, 0xCu);
          }
          TGIE5ModelConfiguration::mutableWeightsSymbolToPath(this, (unsigned __int8 **)&__p, (uint64_t)&v57);
          v43 = operator new();
          if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0)
            std::string::__init_copy_ctor_external(&v56, this->var1.var0.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var0.var1.var1);
          else
            v56 = *p_var1;
          cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::StaticShapeAJAXE5MLModel(v43, &v56, &__p, &v57);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          *v20 = v43;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v57);
          goto LABEL_92;
        }
      }
    }
    v49 = 4;
    strcpy((char *)v48, "main");
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v48))
    {
      v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v45, "Bundle does not contain extend or main function.");
      __cxa_throw(v45, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v48);
    v29 = v28;
    if (!v28)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v30 = *((_QWORD *)v28 + 5);
    v31 = (std::__shared_weak_count *)*((_QWORD *)v29 + 6);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    if (this->var0 == 1)
      goto LABEL_63;
    if (this->var0)
      goto LABEL_68;
    v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    std::string::basic_string[abi:ne180100]<0>(&v57, "out_logits");
    v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v34, (unsigned __int8 *)&v57);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (!v35)
    {
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Missing port output logits required to determine ane vs gpu");
      __cxa_throw(v46, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v36 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v35 + 5));
    if (E5RT::TensorDescriptor::GetRank(v36) == 4)
    {
LABEL_63:
      TGIE5ModelConfiguration::mutableWeightsSymbolToPath(this, (unsigned __int8 **)v48, (uint64_t)&v57);
      v37 = operator new();
      if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v56, this->var1.var0.var0.var0.var0.var1.var0, this->var1.var0.var0.var0.var0.var1.var1);
      else
        v56 = *p_var1;
      cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::StaticShapeAJAXE5MLModel(v37, &v56, v48, &v57);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      *v20 = v37;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v57);
    }
    else
    {
LABEL_68:
      v39 = (cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *)operator new();
      cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::FlexibleShapeAJAXE5MLModel(v39, this);
      *v20 = v39;
    }
    if (v31)
    {
      v40 = (unint64_t *)&v31->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
LABEL_92:
    if (v51 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_35;
  }
  if (!v18)
    goto LABEL_39;
LABEL_34:
  v21 = (cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *)operator new();
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(v21, this);
  *v9 = v21;
LABEL_35:
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  result = v55;
  v55 = 0;
  if (result)
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_248CAFEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,__int16 *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  MEMORY[0x2495AA834](v41, 0x10B3C405ED29779);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v42 - 144);
  if (a28 && a27 < 0)
    operator delete(__p);
  __p = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v44 = a35;
  a35 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  _Unwind_Resume(a1);
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t *TGIE5ModelConfiguration::e5FunctionNames@<X0>(TGIE5ModelConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::for_each[abi:ne180100]<std::__wrap_iter<TGIE5Function const*>,TGIE5ModelConfiguration::e5FunctionNames(void)::{lambda(std::__wrap_iter<TGIE5Function const*> const&)#1}>(*(__int128 **)&this[1].var0, (__int128 *)this[1].var1.var0.var0.var0.var0.var1.var0, a2);
}

void sub_248CB0278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t TGIE5ModelConfiguration::mutableWeightsSymbolToPath@<X0>(_QWORD *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  std::string v18;
  char v19;
  _QWORD v20[2];

  v18.__r_.__value_.__s.__data_[0] = 0;
  v19 = 0;
  v5 = a1[7];
  v6 = a1[8];
  if (v5 != v6)
  {
    v7 = *((_BYTE *)a2 + 23);
    if (v7 >= 0)
      v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v8 = a2[1];
    if (v7 >= 0)
      v9 = (unsigned __int8 *)a2;
    else
      v9 = *a2;
    do
    {
      v10 = *(unsigned __int8 *)(v5 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
      else
        v11 = *(unsigned __int8 **)(v5 + 8);
      if (v11 == v8)
      {
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v5, v9, *(_QWORD *)(v5 + 8)))
          {
LABEL_21:
            std::optional<TGIE5Function>::operator=[abi:ne180100]<TGIE5Function const&,void>(&v18, (std::string *)v5);
            break;
          }
        }
        else
        {
          if (!*(_BYTE *)(v5 + 23))
            goto LABEL_21;
          v12 = 0;
          while (*(unsigned __int8 *)(v5 + v12) == v9[v12])
          {
            if (v10 == ++v12)
              goto LABEL_21;
          }
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v14 = a1[4];
  v13 = a1[5];
  v20[0] = &v18;
  v20[1] = a3;
  if (v14 != v13)
  {
    do
    {
      v15 = _ZZNK23TGIE5ModelConfiguration26mutableWeightsSymbolToPathERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEENKUlRKT_E_clI25TGIE5AdapterConfigurationEEDaSB_(v20, v14);
      v14 += 72;
      v16 = v14 == v13 || v15;
    }
    while ((v16 & 1) == 0);
  }
  return std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
}

void sub_248CB0418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::for_each[abi:ne180100]<std::__wrap_iter<TGIE5Function const*>,TGIE5ModelConfiguration::e5FunctionNames(void)::{lambda(std::__wrap_iter<TGIE5Function const*> const&)#1}>(__int128 *a1, __int128 *a2, uint64_t *a3)
{
  __int128 *v5;
  unint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v5);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v5);
        v6 += 24;
      }
      a3[1] = v6;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_248CB0504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_248CB0618(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::optional<TGIE5Function>::operator=[abi:ne180100]<TGIE5Function const&,void>(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[16])
  {
    std::string::operator=(this, __str);
    this[1].__r_.__value_.__r.__words[0] = __str[1].__r_.__value_.__r.__words[0];
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 32), (std::string *)((char *)__str + 32));
  }
  else
  {
    std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function const&,TGIE5Function*>(this, (__int128 *)__str);
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

std::string *std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function const&,TGIE5Function*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), a2 + 2);
  return this;
}

void sub_248CB09E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_248CB0A30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

BOOL _ZZNK23TGIE5ModelConfiguration26mutableWeightsSymbolToPathERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEENKUlRKT_E_clI25TGIE5AdapterConfigurationEEDaSB_(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int8 *v6;
  void **v7;
  std::string v8;
  __int128 *v9;

  if (*(_BYTE *)(*a1 + 64))
  {
    result = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(*a1 + 32), (unsigned __int8 *)a2);
    if (!result)
      return result;
    if (*(char *)(a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
    else
      v8 = *(std::string *)(a2 + 48);
  }
  else if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(std::string *)(a2 + 48);
  }
  v5 = a1[1];
  v9 = (__int128 *)(a2 + 24);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)(a2 + 24), (uint64_t)&std::piecewise_construct, &v9);
  v7 = (void **)(v6 + 40);
  if ((char)v6[63] < 0)
    operator delete(*v7);
  *(std::string *)v7 = v8;
  return 1;
}

void sub_248CB0BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;

  v2 = a1[24];
  if (a1[24])
  {
    v3 = a1[23];
    if ((v3 & 0x80u) == 0)
      v4 = a1[23];
    else
      v4 = *((_QWORD *)a1 + 1);
    v5 = a2[23];
    v6 = (char)v5;
    if ((v5 & 0x80u) != 0)
      v5 = *((_QWORD *)a2 + 1);
    if (v4 == v5)
    {
      if (v6 < 0)
        a2 = *(unsigned __int8 **)a2;
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        v7 = v3 - 1;
        do
        {
          v9 = *a1++;
          v8 = v9;
          v11 = *a2++;
          v10 = v11;
          v13 = v7-- != 0;
          v14 = v8 == v10;
          v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_248CB0EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CB0F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<TGIE5Function,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_248CB10C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_248CB1238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2519DD760, MEMORY[0x24BEDAB00]);
}

void sub_248CB1434(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

E5RT::ExecutionStream *cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::AJAXPromptE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2, void *__src, size_t __len, uint64_t a5)
{
  void *v9;
  size_t v10;
  size_t v11;
  std::string v13;
  void *__p[2];
  unint64_t v15;
  _BYTE v16[48];

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  v9 = __p;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __p[1] = (void *)__len;
    v15 = v11 | 0x8000000000000000;
    __p[0] = v9;
    goto LABEL_11;
  }
  HIBYTE(v15) = __len;
  if (__len)
LABEL_11:
    memmove(v9, __src, __len);
  *((_BYTE *)v9 + __len) = 0;
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v16, a5);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(a1, (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::checkIOTypes(a1);
  return a1;
}

void sub_248CB16A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t *v20;
  uint64_t v22;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 1));
  v22 = *v20;
  *v20 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::checkIOTypes(cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *this)
{
  E5RT::IOPort *InputPortRef;
  _QWORD *v3;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v5;
  E5RT::IOPort *v6;
  uint64_t v7;
  _QWORD *v8;
  E5RT::IOPort *OutputPortRef;
  uint64_t v10;
  _OWORD *v11;
  E5RT::IOPort *v12;
  uint64_t v13;
  _OWORD *v14;
  _BYTE v15[16];
  _BYTE v16[16];
  void *__p;
  void *v18;
  char *v19;
  _BYTE v20[16];
  _BYTE v21[16];
  void *v22;
  void *v23;
  char *v24;
  _BYTE v25[16];
  _BYTE v26[16];

  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDataType::TensorDataType();
  std::string::basic_string[abi:ne180100]<0>(&v22, "in_new_token_id_2U8LE");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  E5RT::TensorDataType::TensorDataType();
  v3 = operator new(0x18uLL);
  v23 = v3 + 3;
  v24 = (char *)(v3 + 3);
  v3[2] = 2;
  *(_OWORD *)v3 = xmmword_248D72CF8;
  v22 = v3;
  cgm::token_generation_inference::ajax::utils::checkTensorType(InputPortRef, (uint64_t)v21, (uint64_t)&v22);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v21);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v5) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v22, "in_relative_positions");
  v6 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v7 = *((_QWORD *)this + 3);
  v8 = operator new(0x20uLL);
  v18 = v8 + 4;
  v19 = (char *)(v8 + 4);
  *v8 = 1;
  v8[1] = v7;
  v8[2] = 1;
  v8[3] = v7;
  __p = v8;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v6, (uint64_t)v20, (uint64_t)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v20);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  std::string::basic_string[abi:ne180100]<0>(&v22, "out_cached_keys");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v10 = *((_QWORD *)this + 3);
  v11 = operator new(0x28uLL);
  v18 = (char *)v11 + 40;
  v19 = (char *)v11 + 40;
  *v11 = xmmword_248D72BD0;
  v11[1] = xmmword_248D72BD0;
  *((_QWORD *)v11 + 4) = v10;
  __p = v11;
  cgm::token_generation_inference::ajax::utils::checkTensorType(OutputPortRef, (uint64_t)v16, (uint64_t)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v16);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  std::string::basic_string[abi:ne180100]<0>(&v22, "out_cached_values");
  v12 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::TensorDataType::TensorDataType();
  v13 = *((_QWORD *)this + 3);
  v14 = operator new(0x28uLL);
  v18 = (char *)v14 + 40;
  v19 = (char *)v14 + 40;
  *v14 = xmmword_248D72BD0;
  v14[1] = xmmword_248D72BD0;
  *((_QWORD *)v14 + 4) = v13;
  __p = v14;
  cgm::token_generation_inference::ajax::utils::checkTensorType(v12, (uint64_t)v15, (uint64_t)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v15);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
}

void sub_248CB19C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a11);
  if (*(char *)(v20 - 65) < 0)
    operator delete(*(void **)(v20 - 88));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v20 - 64));
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v20 - 48));
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::setUp(E5RT::ExecutionStreamOperation **this, const cgm::token_generation_inference::ajax::utils::AJAXKVCache *a2)
{
  uint64_t OutputPortRef;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  E5RT::ExecutionStreamOperation *v27;
  E5RT::ExecutionStreamOperation *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64x2_t v33;
  _WORD *v34;
  int32x2_t v35;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *__p[2];
  char v48;

  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_keys");
  OutputPortRef = E5RT::ExecutionStreamOperation::GetOutputPortRef();
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v45 = *(_QWORD *)a2;
  v46 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(OutputPortRef, (uint64_t)&v45);
  v8 = v46;
  if (v46)
  {
    v9 = (unint64_t *)&v46->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v48 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_cached_values");
  v11 = E5RT::ExecutionStreamOperation::GetOutputPortRef();
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v43 = *((_QWORD *)a2 + 2);
  v44 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(v11, (uint64_t)&v43);
  v15 = v44;
  if (v44)
  {
    v16 = (unint64_t *)&v44->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v48 < 0)
    operator delete(__p[0]);
  cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(this);
  v18 = (std::__shared_weak_count *)this[2];
  v42 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v42)
  {
    v21 = (unint64_t *)&v42->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  E5RT::ExecutionStream::PreWireInUseAllocations(*this);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
  v23 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  v25 = v24 >> 1;
  if (v24 >= 2)
    v26 = (void *)v23;
  else
    v26 = 0;
  if (v48 < 0)
    operator delete(__p[0]);
  if ((uint64_t)(2 * v25) >= 1)
    memset_pattern16(v26, &unk_248D72BF0, 2 * (((2 * v25) >> 1) - (2 * v25 != 1)) + 2);
  v27 = this[3];
  if (v27)
  {
    v28 = 0;
    v29 = (unint64_t)v27 + 1;
    v30 = -(uint64_t)v27;
    v31 = (uint64_t)v26 + 2 * (_QWORD)v27 - 2;
    do
    {
      if ((uint64_t)((char *)v27 - 1) >= (uint64_t)v28)
      {
        v32 = 0;
        v33 = (uint64x2_t)vdupq_n_s64((unint64_t)v27 + ~(unint64_t)v28);
        v34 = (_WORD *)v31;
        do
        {
          v35 = vmovn_s64((int64x2_t)vcgeq_u64(v33, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v32), (int8x16_t)xmmword_248D72BE0)));
          if ((v35.i8[0] & 1) != 0)
          {
            _S3 = (float)(uint64_t)(v30 + v32 + 1);
            __asm { FCVT            H3, S3 }
            *v34 = LOWORD(_S3);
          }
          if ((v35.i8[4] & 1) != 0)
          {
            _S2 = (float)(uint64_t)(v30 + v32 + 2);
            __asm { FCVT            H2, S2 }
            *(v34 - 1) = LOWORD(_S2);
          }
          v32 += 2;
          v34 -= 2;
        }
        while ((v29 & 0xFFFFFFFFFFFFFFFELL) != v32);
      }
      v28 = (E5RT::ExecutionStreamOperation *)((char *)v28 + 1);
      --v29;
      ++v30;
      v31 += 2 * (_QWORD)v27;
    }
    while (v28 != v27);
  }
}

void sub_248CB1DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::forward(E5RT::ExecutionStream **a1, int **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  int *v8;
  int *v9;
  int v10;
  void *__p;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_id_2U8LE");
  v4 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan();
  v6 = v5 >> 1;
  if (v5 >= 2)
    v7 = (_WORD *)v4;
  else
    v7 = 0;
  if (v13 < 0)
    operator delete(__p);
  if ((uint64_t)(2 * v6) >= 1)
    bzero(v7, 2 * (((2 * v6) >> 1) - (2 * v6 != 1)) + 2);
  v8 = *a2;
  v9 = a2[1];
  while (v8 != v9)
  {
    v10 = *v8++;
    *v7++ = v10;
  }
  return E5RT::ExecutionStream::ExecuteStreamSync(*a1);
}

void sub_248CB1EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::getMaxStateLength(cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *this)
{
  return *((_QWORD *)this + 3);
}

std::runtime_error *cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(std::runtime_error *a1, int a2, std::string *a3)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a3);
  result->__vftable = (std::runtime_error_vtbl *)&unk_2519DDE60;
  LODWORD(result[1].__vftable) = a2;
  return result;
}

{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a3);
  result->__vftable = (std::runtime_error_vtbl *)&unk_2519DDE60;
  LODWORD(result[1].__vftable) = a2;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::AJAXE5Error::getErrorCode(cgm::token_generation_inference::ajax::AJAXE5Error *this)
{
  return *((unsigned int *)this + 4);
}

void cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  std::to_string(&v16, a1);
  v5 = std::string::insert(&v16, 0, "Context length of ", 0x12uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v17, " was exceeded during ", 0x15uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&v18, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v19, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v20);
  *(_QWORD *)a3 = &unk_2519DDE60;
  *(_DWORD *)(a3 + 16) = 2;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_248CB20A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::AJAXE5Error::~AJAXE5Error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2495AA834);
}

void cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;

  v5 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5 != v4)
  {
    v7 = v5 + 1;
    if (v5 + 1 == v4)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = a3 + 2;
      do
      {
        v10 = v7;
        v11 = v5[1] - *v5;
        v12 = v11 - 1;
        if (v11 != 1)
        {
          v13 = *v5 + 1;
          v14 = (((uint64_t)v5 - *(_QWORD *)a2) >> 3) + 1;
          if ((unint64_t)v8 >= *v9)
          {
            v15 = *a3;
            v16 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a3);
            v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(*v9 - (_QWORD)v15) >> 3) > v17)
              v17 = 0x5555555555555556 * ((uint64_t)(*v9 - (_QWORD)v15) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v9 - (_QWORD)v15) >> 3) >= 0x555555555555555)
              v18 = 0xAAAAAAAAAAAAAAALL;
            else
              v18 = v17;
            if (v18)
            {
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v18);
              v15 = *a3;
              v8 = a3[1];
            }
            else
            {
              v19 = 0;
            }
            v20 = (uint64_t *)&v19[24 * v16];
            *v20 = v13;
            v20[1] = v12;
            v20[2] = v14;
            v21 = v20;
            if (v8 != v15)
            {
              do
              {
                v22 = *(_OWORD *)(v8 - 3);
                *(v21 - 1) = *(v8 - 1);
                *(_OWORD *)(v21 - 3) = v22;
                v21 -= 3;
                v8 -= 3;
              }
              while (v8 != v15);
              v15 = *a3;
            }
            v8 = v20 + 3;
            *a3 = v21;
            a3[1] = v20 + 3;
            a3[2] = (uint64_t *)&v19[24 * v18];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v8 = v13;
            v8[1] = v12;
            v8[2] = v14;
            v8 += 3;
          }
          a3[1] = v8;
          v4 = *(_QWORD **)(a2 + 8);
        }
        v7 = v10 + 1;
        v5 = v10;
      }
      while (v10 + 1 != v4);
    }
    v23 = *(v4 - 1);
    if (v23 != a1 - 1)
    {
      v24 = v23 + 1;
      v25 = ~v23 + a1;
      v26 = ((uint64_t)v4 - *(_QWORD *)a2) >> 3;
      v27 = (unint64_t)a3[2];
      if ((unint64_t)v8 >= v27)
      {
        v29 = *a3;
        v30 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v29) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), v33);
          v29 = *a3;
          v8 = a3[1];
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[24 * v30];
        v36 = &v34[24 * v33];
        *(_QWORD *)v35 = v24;
        *((_QWORD *)v35 + 1) = v25;
        *((_QWORD *)v35 + 2) = v26;
        v28 = (uint64_t *)(v35 + 24);
        if (v8 != v29)
        {
          do
          {
            v37 = *(_OWORD *)(v8 - 3);
            *((_QWORD *)v35 - 1) = *(v8 - 1);
            *(_OWORD *)(v35 - 24) = v37;
            v35 -= 24;
            v8 -= 3;
          }
          while (v8 != v29);
          v29 = *a3;
        }
        *a3 = (uint64_t *)v35;
        a3[1] = v28;
        a3[2] = (uint64_t *)v36;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v8 = v24;
        v8[1] = v25;
        v28 = v8 + 3;
        v8[2] = v26;
      }
      a3[1] = v28;
    }
  }
}

void sub_248CB242C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

cgm::token_generation_inference::common::logging::CGMTGILogger *cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(cgm::token_generation_inference::common::logging::CGMTGILogger *result, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  cgm::token_generation_inference::common::logging::CGMTGILogger *v12;
  NSObject *v13;
  _BOOL8 v14;
  uint64_t v15;
  NSObject *v16;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *__p;
  _QWORD *v25;
  _BYTE buf[24];
  void *v27;
  _BYTE v28[20];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a4 && *a3 != a3[1])
  {
    v12 = result;
    v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(result);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v14)
    {
      v15 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 2048;
      v27 = a5;
      *(_WORD *)v28 = 2048;
      *(_QWORD *)&v28[2] = a6;
      *(_WORD *)&v28[10] = 2048;
      *(_QWORD *)&v28[12] = a7;
      _os_log_impl(&dword_248CAA000, v13, OS_LOG_TYPE_INFO, "Filling cache holes for {numHoles=%zu, currentCacheSize=%zu, maxCacheSize=%zu, sequentialElementsPerToken=%zu, numSequencesPerToken=%zu}", buf, 0x34u);
    }
    v16 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v14);
    v17 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v16);
    v18 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v17);
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = v18;
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248CAA000, v19, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "Fill_Cache_Holes", "", buf, 2u);
      }
    }
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIaEEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke;
    v27 = &__block_descriptor_tmp;
    *(_QWORD *)v28 = v17;
    *(_QWORD *)&v28[8] = a3;
    cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(a4, (uint64_t)a3, (uint64_t **)&__p);
    v20 = __p;
    if (a7)
    {
      v21 = 0;
      v22 = v25;
      do
      {
        if (v20 != v22)
        {
          v23 = v20;
          do
          {
            memmove((char *)v12 + (*v23 + v21 * (_QWORD)a5 - v23[2]) * a6, (char *)v12 + (*v23 + v21 * (_QWORD)a5) * a6, v23[1] * a6);
            v23 += 3;
          }
          while (v23 != v22);
        }
        ++v21;
      }
      while (v21 != a7);
    }
    if (v20)
    {
      v25 = v20;
      operator delete(v20);
    }
    return (cgm::token_generation_inference::common::logging::CGMTGILogger *)(*(uint64_t (**)(_BYTE *))&buf[16])(buf);
  }
  return result;
}

{
  cgm::token_generation_inference::common::logging::CGMTGILogger *v12;
  NSObject *v13;
  _BOOL8 v14;
  uint64_t v15;
  NSObject *v16;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *__p;
  _QWORD *v25;
  _BYTE buf[24];
  void *v27;
  _BYTE v28[20];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a4 && *a3 != a3[1])
  {
    v12 = result;
    v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(result);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v14)
    {
      v15 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 2048;
      v27 = a5;
      *(_WORD *)v28 = 2048;
      *(_QWORD *)&v28[2] = a6;
      *(_WORD *)&v28[10] = 2048;
      *(_QWORD *)&v28[12] = a7;
      _os_log_impl(&dword_248CAA000, v13, OS_LOG_TYPE_INFO, "Filling cache holes for {numHoles=%zu, currentCacheSize=%zu, maxCacheSize=%zu, sequentialElementsPerToken=%zu, numSequencesPerToken=%zu}", buf, 0x34u);
    }
    v16 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v14);
    v17 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v16);
    v18 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v17);
    if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = v18;
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_248CAA000, v19, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "Fill_Cache_Holes", "", buf, 2u);
      }
    }
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke;
    v27 = &__block_descriptor_tmp_7;
    *(_QWORD *)v28 = v17;
    *(_QWORD *)&v28[8] = a3;
    cgm::token_generation_inference::ajax::kvcache_utils::buildCacheFillPlan(a4, (uint64_t)a3, (uint64_t **)&__p);
    v20 = __p;
    if (a7)
    {
      v21 = 0;
      v22 = v25;
      do
      {
        if (v20 != v22)
        {
          v23 = v20;
          do
          {
            memmove((char *)v12 + 2 * (*v23 + v21 * (_QWORD)a5 - v23[2]) * a6, (char *)v12 + 2 * (*v23 + v21 * (_QWORD)a5) * a6, 2 * a6 * v23[1]);
            v23 += 3;
          }
          while (v23 != v22);
        }
        ++v21;
      }
      while (v21 != a7);
    }
    if (v20)
    {
      v25 = v20;
      operator delete(v20);
    }
    return (cgm::token_generation_inference::common::logging::CGMTGILogger *)(*(uint64_t (**)(_BYTE *))&buf[16])(buf);
  }
  return result;
}

void sub_248CB266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void (*a15)(char *))
{
  a15(&a13);
  _Unwind_Resume(a1);
}

void sub_248CB28C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void (*a15)(char *))
{
  a15(&a13);
  _Unwind_Resume(a1);
}

void ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIaEEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  v3 = *((_QWORD *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      v5 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) - **((_QWORD **)a1 + 5)) >> 3;
      v6 = 134217984;
      v7 = v5;
      _os_signpost_emit_with_name_impl(&dword_248CAA000, v4, OS_SIGNPOST_INTERVAL_END, v3, "Fill_Cache_Holes", "Number of holes: %zu", (uint8_t *)&v6, 0xCu);
    }
  }
}

void ___ZN3cgm26token_generation_inference4ajax13kvcache_utilsL15_fillCacheHolesIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKNSt3__16vectorImNS8_9allocatorImEEEEmmmm_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  v3 = *((_QWORD *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      v5 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) - **((_QWORD **)a1 + 5)) >> 3;
      v6 = 134217984;
      v7 = v5;
      _os_signpost_emit_with_name_impl(&dword_248CAA000, v4, OS_SIGNPOST_INTERVAL_END, v3, "Fill_Cache_Holes", "Number of holes: %zu", (uint8_t *)&v6, 0xCu);
    }
  }
}

void cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions(cgm::token_generation_inference::ajax::utils *this@<X0>, E5RT::E5CompilerOptions **a2@<X8>)
{
  _OWORD *v3;
  void *__p;
  void *v5;
  char *v6;
  void **p_p;
  char v8;
  void *v9[2];
  char v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  E5RT::E5CompilerOptions::Create(this);
  E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(*a2);
  E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps(*a2);
  E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup(*a2);
  v3 = operator new(0x10uLL);
  __p = v3;
  *v3 = xmmword_248D72D30;
  v5 = v3 + 1;
  v6 = (char *)(v3 + 1);
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "*");
  __p = 0;
  v5 = 0;
  v6 = 0;
  p_p = &__p;
  v8 = 0;
  __p = operator new(0x18uLL);
  v5 = __p;
  v6 = (char *)__p + 24;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)v9, &v11, (std::string *)__p);
  E5RT::E5CompilerOptions::SetMilEntryPoints();
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v10 < 0)
    operator delete(v9[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "OptimizeKernelCoalescing=true,BSSLimit=3758096384,EnableAggressiveNETransposeFusion=true");
  E5RT::E5CompilerOptions::SetCustomAneCompilerOptions();
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
}

void sub_248CB2BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t *v23;
  uint64_t v25;

  if (a15 < 0)
    operator delete(__p);
  v25 = *v23;
  *v23 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions(cgm::token_generation_inference::ajax::utils *this)
{
  _QWORD *v1;
  void *__p;
  void *v3;
  char *v4;
  void **p_p;
  char v6;
  void *v7[2];
  char v8;
  __int128 v9;

  *(_QWORD *)&v9 = *MEMORY[0x24BDAC8D0];
  E5RT::E5CompilerOptions::Create(this);
  v1 = operator new(8uLL);
  __p = v1;
  *v1 = 2;
  v3 = v1 + 1;
  v4 = (char *)(v1 + 1);
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "*");
  __p = 0;
  v3 = 0;
  v4 = 0;
  p_p = &__p;
  v6 = 0;
  __p = operator new(0x18uLL);
  v3 = __p;
  v4 = (char *)__p + 24;
  v3 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v4, (__int128 *)v7, &v9, (std::string *)__p);
  E5RT::E5CompilerOptions::SetMilEntryPoints();
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_248CB2DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t *v20;
  uint64_t v22;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a20 < 0)
    operator delete(__p);
  v22 = *v20;
  *v20 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::makeProgramLibrary(const std::__fs::filesystem::path *this@<X0>, const E5RT::E5CompilerOptions *a2@<X2>, _QWORD *a3@<X8>)
{
  _BOOL8 v7;
  _BOOL4 v8;
  NSObject *v9;
  const std::__fs::filesystem::path *v10;
  _BOOL8 v11;
  _BOOL4 v12;
  NSObject *v13;
  const std::__fs::filesystem::path *v14;
  cgm::token_generation_inference::common::logging::CGMTGILogger *IsNewCompileRequired;
  int v16;
  NSObject *v17;
  std::runtime_error *exception;
  uint64_t v19;
  std::string __p;
  std::__fs::filesystem::path buf;
  uint64_t v22;
  std::__fs::filesystem::path::__string_view v23;
  std::__fs::filesystem::path::__string_view v24;

  v22 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&buf);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".bundle");
  v23.__data_ = (const std::string_view::value_type *)&__p;
  v7 = std::__fs::filesystem::operator==[abi:ne180100](&buf, v23);
  v8 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_5;
  }
  else if (v8)
  {
LABEL_5:
    v9 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = this;
      else
        v10 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl(&dword_248CAA000, v9, OS_LOG_TYPE_INFO, "Loading precompiled model from path %s", (uint8_t *)&buf, 0xCu);
    }
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&buf.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      buf.__pn_ = this->__pn_;
    E5RT::ProgramLibrary::OpenLibrary();
    *a3 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&buf);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".mil");
  v24.__data_ = (const std::string_view::value_type *)&__p;
  v11 = std::__fs::filesystem::operator==[abi:ne180100](&buf, v24);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Unexpected model path extension.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &buf.__pn_);
  }
  v13 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v11);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = this;
    else
      v14 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    _os_log_impl(&dword_248CAA000, v13, OS_LOG_TYPE_INFO, "Loading MIL model from path %s", (uint8_t *)&buf, 0xCu);
  }
  cgm::token_generation_inference::ajax::utils::createE5Compiler(a2);
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
  else
    buf.__pn_ = this->__pn_;
  IsNewCompileRequired = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::E5Compiler::IsNewCompileRequired();
  v16 = (int)IsNewCompileRequired;
  if ((SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!(_DWORD)IsNewCompileRequired)
      goto LABEL_35;
LABEL_33:
    v17 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(IsNewCompileRequired);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_248CAA000, v17, OS_LOG_TYPE_INFO, "MIL model will require on-demand compilation during load", (uint8_t *)&buf, 2u);
    }
    goto LABEL_35;
  }
  operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (v16)
    goto LABEL_33;
LABEL_35:
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
  else
    buf.__pn_ = this->__pn_;
  E5RT::E5Compiler::Compile();
  *a3 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (v19)
    (*(void (**)())(*(_QWORD *)v19 + 8))();
}

void sub_248CB3198(uint64_t a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::string *a8)
{
  __break(1u);
}

void sub_248CB3284(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t *v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  __cxa_end_catch();
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v22 = *v21;
  *v21 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  JUMPOUT(0x248CB3360);
}

void sub_248CB32CC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x248CB3360);
}

void sub_248CB32DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  JUMPOUT(0x248CB3310);
}

void sub_248CB3330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x248CB335CLL);
}

void sub_248CB3358(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::createE5Compiler(cgm::token_generation_inference::ajax::utils *this)
{
  int v1;
  void *__p;
  char v4;
  _BYTE v5[16];

  v1 = (int)this;
  MEMORY[0x2495AA414](v5);
  if (v1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/var/mobile/Library/com.apple.modelcatalog/compiled/e5bundlecache/");
    E5RT::E5CompilerConfigOptions::SetBundleCacheLocation();
    if (v4 < 0)
      operator delete(__p);
  }
  E5RT::E5Compiler::MakeCompiler();
  return MEMORY[0x2495AA420](v5);
}

void sub_248CB33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x2495AA420](&a16);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::utils::modelRequiresCompilation(cgm::token_generation_inference::ajax::utils *this, const std::__fs::filesystem::path *a2, const E5RT::E5CompilerOptions *a3)
{
  uint64_t IsNewCompileRequired;
  uint64_t v5;
  std::string __p;
  uint64_t v8;

  cgm::token_generation_inference::ajax::utils::createE5Compiler(a3);
  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    __p = *(std::string *)this;
  IsNewCompileRequired = E5RT::E5Compiler::IsNewCompileRequired();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v8;
  v8 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return IsNewCompileRequired;
}

void sub_248CB34B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_248CB3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

_QWORD *cgm::token_generation_inference::ajax::utils::operator<<(_QWORD *a1, E5RT::TensorDataType *a2)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int ComponentSize;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  int NumComponents;
  std::string *v17;
  std::string::size_type v18;
  _QWORD v20[5];
  std::string v21;
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x24BDAC8D0];
  LODWORD(v21.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v21.__r_.__value_.__l.__size_, "uint");
  v22 = 1;
  std::string::basic_string[abi:ne180100]<0>(v23, "int");
  v24 = 4;
  std::string::basic_string[abi:ne180100]<0>(v25, "float");
  std::unordered_map<E5RT::ComponentDataType,std::string>::unordered_map((uint64_t)v20, (int *)&v21, 3);
  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v25[i + 2]) < 0)
      operator delete((void *)v25[i]);
  }
  LODWORD(v21.__r_.__value_.__l.__data_) = E5RT::TensorDataType::GetComponentDataType(a2);
  v5 = std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::find<E5RT::ComponentDataType>(v20, (int *)&v21);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v5[3];
  v6 = v5 + 3;
  v7 = v8;
  v9 = *((char *)v6 + 23);
  if (v9 >= 0)
    v10 = (uint64_t)v6;
  else
    v10 = v7;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v6 + 23);
  else
    v11 = v6[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  ComponentSize = E5RT::TensorDataType::GetComponentSize(a2);
  std::to_string(&v21, 8 * ComponentSize);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v13, size);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"x", 1);
  NumComponents = E5RT::TensorDataType::GetNumComponents(a2);
  std::to_string(&v21, NumComponents);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v21;
  else
    v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    v18 = v21.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table((uint64_t)v20);
  return a1;
}

void sub_248CB380C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *cgm::token_generation_inference::ajax::utils::operator<<(_QWORD *a1, E5RT::TensorDescriptor *this)
{
  uint64_t TensorShape;
  unint64_t *v5;
  unint64_t *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *TensorStrides;
  uint64_t v12;
  uint64_t v13;
  std::string v15;

  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v5 = *(unint64_t **)TensorShape;
  v6 = *(unint64_t **)(TensorShape + 8);
  if (*(unint64_t **)TensorShape != v6)
  {
    do
    {
      std::to_string(&v15, *v5);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v15;
      else
        v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      else
        size = v15.__r_.__value_.__l.__size_;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      ++v5;
    }
    while (v5 != v6);
  }
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"@ ", 2);
  E5RT::TensorDescriptor::GetTensorDataType(this);
  cgm::token_generation_inference::ajax::utils::operator<<(v10, (E5RT::TensorDataType *)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" :", 2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v15);
  TensorStrides = (uint64_t *)E5RT::TensorDescriptor::GetTensorStrides(this);
  v12 = *TensorStrides;
  v13 = TensorStrides[1];
  if (*TensorStrides != v13)
  {
    do
    {
      v12 += 8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
    while (v12 != v13);
  }
  return a1;
}

void sub_248CB39E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::utils::checkTensorType(E5RT::IOPort *a1, uint64_t a2, uint64_t a3)
{
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error *v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  std::string v16;

  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(a1);
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  E5RT::TensorDescriptor::GetTensorDataTypeRef(v5);
  if (E5RT::operator!=())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid dtype");
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  result = E5RT::TensorDescriptor::GetTensorShape(v5);
  v7 = *(uint64_t **)a3;
  v8 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  v9 = *(_QWORD **)result;
  v10 = *(_QWORD **)(result + 8);
  if (v8 != ((uint64_t)v10 - *(_QWORD *)result) >> 3)
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid rank");
    std::runtime_error::runtime_error(v15, &v16);
    v15->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  if (v10 != v9)
  {
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v12 = *v7++;
      v11 = v12;
      if (v12 != -1 && v11 != *v9)
      {
        v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v16, "I/O has invalid shape");
        std::runtime_error::runtime_error(v13, &v16);
        v13->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_248CB3BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::fillWithALiBi(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v7;
  int v8;
  long double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  int64x2_t v24;
  int32x2_t v25;
  _QWORD *v32;
  int64x2_t v35;
  uint64x2_t v36;
  _QWORD v37[2];

  v32 = (_QWORD *)result;
  if (a5)
  {
    v7 = a5 * a3;
    v8 = 1 << (int)log2((double)a2);
    v9 = exp2(-8.0 / (double)v8);
    v10 = 0;
    v11 = v8;
    v12 = a3 - 1;
    v35 = vdupq_n_s64(2uLL);
    v13 = a4;
    do
    {
      if (v13 >= v12)
        v14 = a3 - 1;
      else
        v14 = v13;
      if (v10 + a4 >= v12)
        v15 = a3 - 1;
      else
        v15 = v10 + a4;
      result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(v32, v10 * a3);
      v37[0] = result;
      v37[1] = v16;
      if (a2)
      {
        v17 = 0;
        v18 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
        v36 = (uint64x2_t)vdupq_n_s64(v15);
        do
        {
          if (v17 >= v11)
            v19 = 0.5;
          else
            v19 = 1.0;
          v20 = pow(v9, v19 + (double)((int)v17 % (int)v11));
          result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v37, v7 * v17, a3);
          if (a3)
          {
            v21 = 0;
            v22 = -v20;
            v23 = v13;
            v24 = (int64x2_t)xmmword_248D72BE0;
            do
            {
              v25 = vmovn_s64((int64x2_t)vcgeq_u64(v36, (uint64x2_t)v24));
              if ((v25.i8[0] & 1) != 0)
              {
                _D3 = v22 * (double)v21;
                __asm { FCVT            H3, D3 }
                *(_WORD *)(result + 2 * (v23 % a3)) = LOWORD(_D3);
              }
              if ((v25.i8[4] & 1) != 0)
              {
                _D2 = v22 * (double)(v21 + 1);
                __asm { FCVT            H2, D2 }
                *(_WORD *)(result + 2 * ((v23 - 1) % a3)) = LOWORD(_D2);
              }
              v21 += 2;
              v24 = vaddq_s64(v24, v35);
              v23 -= 2;
            }
            while (v18 != v21);
          }
          ++v17;
        }
        while (v17 != a2);
      }
      ++v10;
      ++v13;
    }
    while (v10 != a5);
  }
  return result;
}

uint64_t _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_2519DD750, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 2 * a2;
}

void sub_248CB3E38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::ajax::utils::isPromptFunctionName(char *a1)
{
  uint64_t v1;
  BOOL v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;

  v1 = a1[23];
  v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v2)
    v3 = *(char **)a1;
  else
    v3 = a1;
  v4 = &v3[v1];
  if (v1 >= 10)
  {
    v5 = v3;
    do
    {
      v6 = (char *)memchr(v5, 97, v1 - 9);
      if (!v6)
        break;
      if (*(_QWORD *)v6 == 0x6D6F72705F656E61 && *((_WORD *)v6 + 4) == 29808)
        return v6 != v4 && v6 - v3 != -1;
      v5 = v6 + 1;
      v1 = v4 - (_BYTE *)v5;
    }
    while (v4 - (_BYTE *)v5 > 9);
  }
  v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

BOOL cgm::token_generation_inference::ajax::utils::isExtendFunctionName(char *a1)
{
  uint64_t v1;
  BOOL v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;

  v1 = a1[23];
  v2 = (v1 & 0x80u) != 0;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v2)
    v3 = *(char **)a1;
  else
    v3 = a1;
  v4 = &v3[v1];
  if (v1 >= 10)
  {
    v5 = v3;
    do
    {
      v6 = (char *)memchr(v5, 97, v1 - 9);
      if (!v6)
        break;
      if (*(_QWORD *)v6 == 0x657478655F656E61 && *((_WORD *)v6 + 4) == 25710)
        return v6 != v4 && v6 - v3 != -1;
      v5 = v6 + 1;
      v1 = v4 - (_BYTE *)v5;
    }
    while (v4 - (_BYTE *)v5 > 9);
  }
  v6 = v4;
  return v6 != v4 && v6 - v3 != -1;
}

uint64_t cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans@<X0>(E5RT::MemoryObject **this@<X0>, uint64_t *a2@<X8>)
{
  E5RT::BufferObject *v4;
  uint64_t DataSpan;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  E5RT::BufferObject *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;

  v4 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*this);
  DataSpan = E5RT::BufferObject::GetDataSpan(v4);
  v7 = v6 >> 1;
  if (v6 >= 2)
    v8 = DataSpan;
  else
    v8 = 0;
  v9 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(this[2]);
  result = E5RT::BufferObject::GetDataSpan(v9);
  *a2 = v8;
  a2[1] = v7;
  if (v11 >= 2)
    v12 = result;
  else
    v12 = 0;
  a2[2] = v12;
  a2[3] = v11 >> 1;
  return result;
}

void cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this, unint64_t a2)
{
  __int16 v4;
  _WORD *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;

  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans((E5RT::MemoryObject **)this, (uint64_t *)&v5);
  if (a2)
  {
    v4 = 0;
    _ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(v5, v6, &v4, a2, *((_QWORD *)this + 4), *((_QWORD *)this + 4) - a2);
    v4 = 0;
    _ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(v7, v8, &v4, a2, *((_QWORD *)this + 4), *((_QWORD *)this + 4) - a2);
  }
  else
  {
    if ((uint64_t)(2 * v6) >= 1)
      bzero(v5, 2 * (((2 * v6) >> 1) - (2 * v6 != 1)) + 2);
    if ((uint64_t)(2 * v8) >= 1)
      bzero(v7, 2 * (((2 * v8) >> 1) - (2 * v8 != 1)) + 2);
  }
}

_WORD *_ZN3cgm26token_generation_inference4ajax5utils17fillStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEERKS6_mmm(_WORD *result, unint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;

  v13 = result;
  v14 = a2;
  v6 = a6 - 1;
  if (a6 - 1 + a4 < a2)
  {
    v9 = a4;
    do
    {
      if (a6 == 1)
      {
        v13[v9] = *a3;
      }
      else
      {
        result = (_WORD *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v13, v9, a6);
        if (2 * v11 >= 1)
        {
          v12 = ((unint64_t)(2 * v11) >> 1) + 1;
          do
          {
            *result++ = *a3;
            --v12;
          }
          while (v12 > 1);
        }
      }
      v9 += a5;
    }
    while (v6 + v9 < v14);
  }
  return result;
}

void *cgm::token_generation_inference::ajax::utils::AJAXKVCache::overwrite(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this, E5RT::MemoryObject **a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  void *v9[4];

  cgm::token_generation_inference::ajax::utils::AJAXKVCache::reset(this, 0);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans(a2, (uint64_t *)v9);
  v4 = (unint64_t)a2[4];
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::asSpans((E5RT::MemoryObject **)this, v8);
  v5 = *((_QWORD *)this + 4);
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v9[0], (unint64_t)v9[1], 0, v4, v8[0], v8[1], 0, v5, v6);
  return _ZN3cgm26token_generation_inference4ajax5utils17copyStridedChunksIDF16_EEvN4E5RT4SpanIT_Lm18446744073709551615EEEmmS7_mmm(v9[2], (unint64_t)v9[3], 0, v4, v8[2], v8[3], 0, v5, v6);
}

uint64_t cgm::token_generation_inference::ajax::utils::AJAXKVCache::getStateLength(cgm::token_generation_inference::ajax::utils::AJAXKVCache *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation *a1, int a2)
{
  uint64_t InputPorts;
  uint64_t v4;
  uint64_t OutputPorts;
  _BYTE v7[40];
  _BYTE v8[40];
  _BYTE v9[40];
  E5RT::ExecutionStreamOperation *v10;
  int v11;

  v10 = a1;
  v11 = a2;
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v9, InputPorts);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v9);
  v4 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v8, v4);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v8);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v7, OutputPorts);
  cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()((uint64_t)&v10, (uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v7);
}

void sub_248CB42CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(E5RT::ExecutionStreamOperation const&,E5RT::BufferType)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **i;
  unint64_t *p_shared_owners;
  unint64_t v4;
  E5RT::OperandDescriptor *PortDescriptorRef;
  uint64_t v6;
  std::__shared_weak_count *v7;

  for (i = *(uint64_t ***)(a2 + 16); i; i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPort *)i[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5]);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)())v7->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v7);
          if (v6)
            continue;
LABEL_8:
          PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)i[5]);
          E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
          E5RT::TensorDescriptor::AllocateMemory();
          E5RT::IOPort::BindMemoryObject();
          v6 = 0;
          continue;
        }
      }
      if (!v6)
        goto LABEL_8;
    }
  }
}

void sub_248CB445C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(cgm::token_generation_inference::ajax::utils *this, const E5RT::ExecutionStreamOperation *a2, E5RT::ExecutionStreamOperation *a3)
{
  uint64_t InputPorts;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OutputPorts;
  uint64_t v10;
  _BYTE v12[40];
  _QWORD v13[5];
  _BYTE v14[40];
  _QWORD v15[5];
  _BYTE v16[40];
  _QWORD v17[5];

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v17, InputPorts);
  v6 = E5RT::ExecutionStreamOperation::GetInputPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v16, v6);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v17, (uint64_t)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v17);
  v7 = E5RT::ExecutionStreamOperation::GetInOutPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v15, v7);
  v8 = E5RT::ExecutionStreamOperation::GetInOutPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v14, v8);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v15, (uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v15);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v13, OutputPorts);
  v10 = E5RT::ExecutionStreamOperation::GetOutputPorts(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v12, v10);
  cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v12);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v13);
}

void sub_248CB4588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::shareMemoryBetweenOperations(E5RT::ExecutionStreamOperation const&,E5RT::ExecutionStreamOperation&)::$_0::operator()(_QWORD *a1, uint64_t a2)
{
  __int128 *i;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string __p;
  E5RT::IOPort *v25;
  std::__shared_weak_count *v26;

  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
  {
    std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](&__p, i + 1);
    if ((E5RT::IOPort::IsDynamic(v25) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject(v25);
      if (v22)
        v4 = 1;
      else
        v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a1, (unsigned __int8 *)&__p) == 0;
      if (!v23)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)())v23->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v23);
        if (!v4)
        {
LABEL_11:
          v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
          if (!v7)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          E5RT::IOPort::GetMemoryObject(*((E5RT::IOPort **)v7 + 5));
          v21 = v26;
          if (v26)
          {
            v8 = (unint64_t *)&v26->__shared_owners_;
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 1, v8));
          }
          if (v23)
          {
            v10 = (unint64_t *)&v23->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          E5RT::IOPort::BindMemoryObject();
          if (v23)
          {
            v12 = (unint64_t *)&v23->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)())v23->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (v21)
          {
            v14 = (unint64_t *)&v21->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (v23)
          {
            v16 = (unint64_t *)&v23->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)())v23->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
      else
      {
LABEL_10:
        if (!v4)
          goto LABEL_11;
      }
    }
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_248CB4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::makeLinearTokenTreeIndexes(cgm::token_generation_inference::ajax::utils *this@<X0>, uint64_t *a2@<X8>)
{
  cgm::token_generation_inference::ajax::utils *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  void *__p;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (this)
  {
    v4 = 0;
    do
    {
      v4 = (cgm::token_generation_inference::ajax::utils *)((char *)v4 + 1);
      std::vector<unsigned long>::vector(&__p, (unint64_t)v4);
      v5 = __p;
      v6 = v11;
      if (__p != v11)
      {
        v7 = 0;
        do
          *v5++ = v7++;
        while (v5 != v6);
      }
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v9 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a2, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a2, (uint64_t)&__p);
        v9 = v8 + 24;
      }
      a2[1] = v9;
      if (__p)
      {
        v11 = __p;
        operator delete(__p);
      }
    }
    while (v4 != this);
  }
}

void sub_248CB4914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v10[3];
  void **v11;

  cgm::token_generation_inference::ajax::utils::makeLinearTokenTreeIndexes((cgm::token_generation_inference::ajax::utils *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)), v10);
  v4 = a1;
  v2 = *a1;
  v3 = v4[1];
  if (v3 - v2 != v10[1] - v10[0])
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  if (v2 != v3)
  {
    v5 = (_QWORD *)(v10[0] + 8);
    do
    {
      v6 = *(_QWORD *)(v2 + 8) - *(_QWORD *)v2;
      v7 = (const void *)*(v5 - 1);
      if (v6 != *v5 - (_QWORD)v7 || memcmp(*(const void **)v2, v7, v6))
        goto LABEL_8;
      v2 += 24;
      v5 += 3;
    }
    while (v2 != v3);
  }
  v8 = 1;
LABEL_9:
  v11 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v8;
}

void cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(_WORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  void *__p;
  _QWORD *v18;

  std::vector<unsigned long>::vector(&__p, a4);
  v14 = __p;
  v15 = v18;
  if (__p != v18)
  {
    v16 = 1;
    do
      *v14++ = v16++;
    while (v14 != v15);
  }
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, 0, &__p, a5, a6, a7, a4 + a3);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_248CB4AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_WORD *cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(_WORD *result, unint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _WORD *v34;
  _QWORD *v35;
  uint64_t v36;
  std::runtime_error *exception;
  std::runtime_error *v44;
  std::string v45;
  uint64_t v46[3];
  _QWORD v47[6];

  v47[5] = *MEMORY[0x24BDAC8D0];
  v10 = (_QWORD *)*a5;
  v9 = (_QWORD *)a5[1];
  v11 = (uint64_t)v9 - *a5;
  v12 = a3 + (v11 >> 3);
  if (v12 - 2049 <= 0xFFFFFFFFFFFFF7FFLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The max relative position must be less than 2048 due to FP16 accuracy");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (a2 < v12 * a6)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v47[1] = 0;
    v47[2] = 7;
    v46[2] = 7;
    v47[0] = a2;
    memset(&v45, 0, sizeof(v45));
    v46[0] = 1;
    v46[1] = (uint64_t)v47;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v45, "Relative positions span should be of shape [context, query], not {}", 67, v46);
    std::runtime_error::runtime_error(v44, &v45);
    __cxa_throw(v44, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v14 = *(_QWORD **)a8;
  v15 = *(_QWORD **)(a8 + 8);
  if (v15 == *(_QWORD **)a8)
  {
    v17 = *(_QWORD **)(a8 + 8);
    if (!a9)
      return result;
  }
  else
  {
    v16 = ((uint64_t)v15 - *(_QWORD *)a8) >> 3;
    v17 = *(_QWORD **)a8;
    do
    {
      v18 = v16 >> 1;
      v19 = &v17[v16 >> 1];
      v21 = *v19;
      v20 = v19 + 1;
      v16 += ~(v16 >> 1);
      if (v21 < a3)
        v17 = v20;
      else
        v16 = v18;
    }
    while (v16);
    if (!a9)
      return result;
  }
  v22 = 0;
  v23 = 0;
  v24 = a6 + a3;
  v25 = v17 - v14 - a3;
  v26 = a4 + a3;
  v27 = &result[a4 * (a6 + a3)];
  result += a4;
  v28 = v11 >> 3;
  if ((unint64_t)(v11 >> 3) <= 1)
    v28 = 1;
  v29 = 2 * v24;
  do
  {
    if (v14 == v15 || *v14 != v22)
    {
      if (v9 != v10)
      {
        v30 = result;
        v31 = v26;
        v32 = v10;
        v33 = v28;
        v34 = v27;
        v35 = v17;
        do
        {
          if (v35 == v15 || v31 != *v35)
          {
            v36 = v25 + v23 - *v32;
            if (v36 + v35 - v17 < 0)
            {
              _S0 = (float)(v36 + v35 - v17 + 1);
              __asm { FCVT            H0, S0 }
              if ((a7 & 1) != 0)
                *v34 = _H0;
              else
                *v30 = _H0;
            }
          }
          else
          {
            ++v35;
          }
          v34 = (_WORD *)((char *)v34 + v29);
          ++v32;
          ++v31;
          ++v30;
          --v33;
        }
        while (v33);
      }
      ++v23;
    }
    else
    {
      ++v14;
    }
    ++v22;
    ++v27;
    result += a6;
  }
  while (v22 != a9);
  return result;
}

void sub_248CB4D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::utils::setTreeRelativePositions(_WORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p;
  uint64_t *v47;
  uint64_t *v48;

  __p = 0;
  v47 = 0;
  v48 = 0;
  v14 = *(_QWORD **)a5;
  v13 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 != v13)
  {
    v15 = 0;
    do
    {
      v16 = (uint64_t)(v14[1] - *v14) >> 3;
      if (v15 >= v48)
      {
        v18 = (uint64_t *)__p;
        v19 = ((char *)v15 - (_BYTE *)__p) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v21 = (char *)v48 - (_BYTE *)__p;
        if (((char *)v48 - (_BYTE *)__p) >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v48, v22);
          v18 = (uint64_t *)__p;
          v15 = v47;
        }
        else
        {
          v23 = 0;
        }
        v24 = (uint64_t *)&v23[8 * v19];
        *v24 = v16;
        v17 = v24 + 1;
        while (v15 != v18)
        {
          v25 = *--v15;
          *--v24 = v25;
        }
        __p = v24;
        v47 = v17;
        v48 = (uint64_t *)&v23[8 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v16;
        v17 = v15 + 1;
      }
      v47 = v17;
      v14 += 3;
      v15 = v17;
    }
    while (v14 != v13);
  }
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a4, &__p, a6, a7, a8, a3);
  v26 = (uint64_t *)__p;
  if (v47 != __p)
  {
    v27 = 0;
    v28 = ((char *)v47 - (_BYTE *)__p) >> 3;
    v29 = *(_QWORD **)a5;
    if (v28 <= 1)
      v28 = 1;
    do
    {
      v30 = (_QWORD *)v29[3 * v27];
      v31 = v29[3 * v27 + 1] - (_QWORD)v30;
      if (v31)
      {
        if ((unint64_t)(v31 >> 3) <= 1)
          v32 = 1;
        else
          v32 = v31 >> 3;
        v33 = 1 - (v31 >> 3);
        do
        {
          if (v33 <= 0)
          {
            _S0 = (float)v33;
            __asm { FCVT            H0, S0 }
            v40 = *v30 + a3;
            v41 = v40 + (v27 + a4) * (a6 + a3);
            v42 = v27 + a4 + v40 * a6;
            if (a7)
              v42 = v41;
            a1[v42] = _H0;
          }
          ++v33;
          ++v30;
          --v32;
        }
        while (v32);
      }
      ++v27;
    }
    while (v27 != v28);
  }
  if (v26)
  {
    v47 = v26;
    operator delete(v26);
  }
}

void sub_248CB4FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::utils::setRelativePositions(_WORD *a1, unint64_t a2, unint64_t a3, _QWORD *a4, unint64_t a5, unint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  _QWORD *v19;
  std::runtime_error *v20;
  std::string v21;
  uint64_t v22[3];
  _QWORD v23[8];

  v23[7] = *MEMORY[0x24BDAC8D0];
  if (*a4 == a4[1])
    goto LABEL_5;
  if (cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(a4))
  {
    v16 = a4[1];
    if (*a4 != v16)
      a6 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *a4) >> 3);
LABEL_5:
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a6 + a5, a7, 0, (uint64_t)a8);
    return;
  }
  v17 = a8[1];
  if (*a8 != v17 && *(_QWORD *)(v17 - 8) >= a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v19 = a8;
    v20 = exception;
    v23[0] = *(_QWORD *)(v19[1] - 8);
    v23[1] = 0;
    v23[3] = 0;
    v23[4] = 231;
    v23[2] = a3;
    memset(&v21, 0, sizeof(v21));
    v22[0] = 2;
    v22[1] = (uint64_t)v23;
    v22[2] = 231;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v21, "Tree attention not supported with holes in query; last hole is {}, past {}",
      74,
      v22);
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(v20, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (a5)
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(a1, a2, a3, a5, a7, 0, (uint64_t)a8);
  cgm::token_generation_inference::ajax::utils::setTreeRelativePositions(a1, a2, a5 + a3, a5, (uint64_t)a4, a7, 0, (uint64_t)a8);
}

void sub_248CB51D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  std::runtime_error *exception;
  std::string v13;
  std::vector<std::string> *i;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 == 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    a4->__begin_ = 0;
    std::vector<std::string>::reserve(a4, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    v9 = (unsigned __int8 *)*a2;
    v10 = (unsigned __int8 *)a2[1];
    for (i = a4; v9 != v10; v9 += 24)
    {
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a3, v9);
      if (!v11)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6), (unsigned __int8 **)(v8 + 16)) != *((_QWORD *)v11 + 6))std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)&i, (__int128 *)v9);
    }
  }
  else
  {
    if (v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v13, "Unexpectedly asked to run with more than 1 mutable weight symbol adapted.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v13);
    }
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

void sub_248CB538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_248CB5478(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::setCausalMaskAndPositionIds(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v8 = a7 + a6;
  v10 = *a5;
  v9 = a5[1];
  if (v9 == *a5)
  {
    v19 = a7;
    if (a7)
    {
      v20 = 0;
      do
      {
        v21 = a6 + 1;
        if ((unint64_t)(a6 + 1) > 1)
          v22 = a6 + 1;
        else
          v22 = 1;
        v23 = 2 * v22;
        *a3++ = a6;
        v24 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v25, v20, v8);
        bzero(v24, v23);
        v20 += v8;
        a6 = v21;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = (_WORD *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v25, v11 * v8, v8);
      v13 = *(uint64_t **)v10;
      v14 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
      if (v14)
      {
        v15 = v14 >> 3;
        if (v15 <= 1)
          v16 = 1;
        else
          v16 = v15;
        v17 = -1;
        do
        {
          v18 = *v13++;
          if (v18 == 1)
          {
            *v12 = 0;
            ++v17;
          }
          ++v12;
          --v16;
        }
        while (v16);
      }
      else
      {
        v17 = -1;
      }
      a3[v11++] = v17;
      v10 += 24;
    }
    while (v10 != v9);
  }
}

_QWORD *cgm::token_generation_inference::ajax::utils::createKVCacheEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t **a3@<X4>, uint64_t **a4@<X5>, unint64_t *a5@<X6>, _QWORD *a6@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  size_t v23;
  unint64_t v24;
  unint64_t v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *a5;
  v9 = a5[1];
  v11 = (*a3)[2];
  v32 = **a3;
  v12 = **a4 * v32 / (unint64_t)(*a3)[3] * v9;
  v13 = (char *)operator new[]();
  bzero(v13, v12);
  v14 = (char *)operator new[]();
  v23 = v12;
  bzero(v14, v12);
  v24 = v9;
  v26 = v9 + v10;
  if (v10 < v9 + v10)
  {
    v15 = 0;
    v30 = **a4;
    v31 = v11;
    v16 = (*a4)[2];
    v17 = (*a4)[3];
    v18 = a2 + v17 * v10;
    v19 = a1 + v17 * v10;
    do
    {
      v28 = v18;
      v29 = v10;
      v27 = v19;
      if (v32)
      {
        v20 = 0;
        do
        {
          if (v11)
          {
            v21 = 0;
            do
            {
              memcpy(&v13[v15], (const void *)(v19 + v21), v17);
              memcpy(&v14[v15], (const void *)(v18 + v21), v17);
              v15 += v17;
              v21 += v16;
              --v11;
            }
            while (v11);
          }
          ++v20;
          v11 = v31;
          v18 += v30;
          v19 += v30;
        }
        while (v20 != v32);
      }
      v10 = v29 + 1;
      v18 = v28 + v17;
      v19 = v27 + v17;
    }
    while (v29 + 1 != v26);
  }
  result = (_QWORD *)operator new();
  *a6 = result;
  *result = v13;
  result[1] = v14;
  result[2] = v23;
  result[3] = v24;
  return result;
}

void sub_248CB5750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x2495AA81C](v2, 0x1000C8077774924);
  MEMORY[0x2495AA81C](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

char *cgm::token_generation_inference::ajax::utils::setKVCacheEntry(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, uint64_t **a6, unint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *(_QWORD **)a8;
  if (*(_QWORD *)(*(_QWORD *)a8 + 24) + a7 > a7)
  {
    v10 = 0;
    v25 = **a5;
    v11 = (*a5)[2];
    v12 = **a6;
    v14 = (*a6)[2];
    v13 = (*a6)[3];
    v15 = a3 + v13 * a7;
    v16 = &result[v13 * a7];
    v17 = a7;
    v24 = v11;
    do
    {
      if (v25)
      {
        v21 = v17;
        v22 = v16;
        v18 = 0;
        v23 = v15;
        do
        {
          if (v11)
          {
            v19 = 0;
            do
            {
              memcpy(&v16[v19], (const void *)(**(_QWORD **)a8 + v10), v13);
              result = (char *)memcpy((void *)(v15 + v19), (const void *)(*(_QWORD *)(*(_QWORD *)a8 + 8) + v10), v13);
              v10 += v13;
              v19 += v14;
              --v11;
            }
            while (v11);
          }
          ++v18;
          v15 += v12;
          v16 += v12;
          v11 = v24;
        }
        while (v18 != v25);
        v8 = *(_QWORD **)a8;
        v16 = v22;
        v15 = v23;
        v17 = v21;
      }
      ++v17;
      v15 += v13;
      v16 += v13;
    }
    while (v17 < v8[3] + a7);
  }
  return result;
}

uint64_t cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(cgm::token_generation_inference::ajax::utils *this, E5RT::ExecutionStreamOperation *a2)
{
  uint64_t InputPorts;
  _QWORD *i;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *j;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t OutputPorts;
  _QWORD *k;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BYTE v19[16];
  _QWORD *v20;
  _BYTE v21[16];
  _QWORD *v22;
  _BYTE v23[16];
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v23, InputPorts);
  for (i = v24; i; i = (_QWORD *)*i)
  {
    v25 = 0;
    v26 = 0;
    E5RT::IOPort::BindMemoryObject();
    v5 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v23);
  v8 = E5RT::ExecutionStreamOperation::GetInOutPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v21, v8);
  for (j = v22; j; j = (_QWORD *)*j)
  {
    v25 = 0;
    v26 = 0;
    E5RT::IOPort::BindMemoryObject();
    v10 = v26;
    if (v26)
    {
      v11 = (unint64_t *)&v26->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v21);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v19, OutputPorts);
  for (k = v20; k; k = (_QWORD *)*k)
  {
    v25 = 0;
    v26 = 0;
    E5RT::IOPort::BindMemoryObject();
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v19);
}

void sub_248CB5A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2 - 48);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(E5RT::ExecutionStreamOperation *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 *i;
  unsigned __int8 *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v4 = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInputPorts(a1) + 16);
  if (v4)
  {
    while (1)
    {
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, v4 + 16);
      if (!v5)
        break;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
      v37 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      E5RT::IOPort::BindMemoryObject();
      if (v37)
      {
        v9 = (unint64_t *)&v37->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v4 = *(unsigned __int8 **)v4;
      if (!v4)
        goto LABEL_12;
    }
LABEL_52:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
LABEL_12:
  for (i = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInOutPorts(a1) + 16); i; i = *(unsigned __int8 **)i)
  {
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, i + 16);
    if (!v12)
      goto LABEL_52;
    v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
    v36 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    E5RT::IOPort::BindMemoryObject();
    if (v36)
    {
      v16 = (unint64_t *)&v36->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v18 = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetOutputPorts(a1) + 16);
  if (v18)
  {
    while (E5RT::IOPort::IsDynamic(*((E5RT::IOPort **)v18 + 5)))
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
      v33 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      E5RT_Private::GetMaxPortDescriptor();
      if (v35)
      {
        v22 = (unint64_t *)&v35->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)())v35->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (!v33)
        goto LABEL_37;
      v24 = (unint64_t *)&v33->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        if (v34)
          break;
      }
      else
      {
LABEL_37:
        if (v34)
          break;
      }
LABEL_47:
      v18 = *(unsigned __int8 **)v18;
      if (!v18)
        return;
    }
    v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, v18 + 16);
    if (!v26)
      goto LABEL_52;
    v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
    v32 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    E5RT::IOPort::BindMemoryObject();
    if (v32)
    {
      v30 = (unint64_t *)&v32->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    goto LABEL_47;
  }
}

void sub_248CB5D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(E5RT::ExecutionStreamOperation *a1, _QWORD *a2)
{
  uint64_t InputPorts;
  unsigned __int8 *i;
  E5RT::BufferObject *v6;
  void *DataSpan;
  int64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *j;
  E5RT::BufferObject *v14;
  void *v15;
  int64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t OutputPorts;
  unsigned __int8 *k;
  E5RT::BufferObject *v22;
  void *v23;
  int64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BYTE v29[16];
  unsigned __int8 *v30;
  _BYTE v31[16];
  unsigned __int8 *v32;
  _BYTE v33[16];
  unsigned __int8 *v34;
  E5RT::MemoryObject *v35;
  std::__shared_weak_count *v36;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v33, InputPorts);
  for (i = v34; i; i = *(unsigned __int8 **)i)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, i + 16))
    {
      E5RT::IOPort::GetMemoryObject(*((E5RT::IOPort **)i + 5));
      if (v35)
      {
        v6 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v35);
        DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v6);
        if (v8 >= 1)
          bzero(DataSpan, v8);
      }
      v9 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v33);
  v12 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v31, v12);
  for (j = v32; j; j = *(unsigned __int8 **)j)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, j + 16))
    {
      E5RT::IOPort::GetMemoryObject(*((E5RT::IOPort **)j + 5));
      if (v35)
      {
        v14 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v35);
        v15 = (void *)E5RT::BufferObject::GetDataSpan(v14);
        if (v16 >= 1)
          bzero(v15, v16);
      }
      v17 = v36;
      if (v36)
      {
        v18 = (unint64_t *)&v36->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v31);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v29, OutputPorts);
  for (k = v30; k; k = *(unsigned __int8 **)k)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(a2, k + 16))
    {
      E5RT::IOPort::GetMemoryObject(*((E5RT::IOPort **)k + 5));
      if (v35)
      {
        v22 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v35);
        v23 = (void *)E5RT::BufferObject::GetDataSpan(v22);
        if (v24 >= 1)
          bzero(v23, v24);
      }
      v25 = v36;
      if (v36)
      {
        v26 = (unint64_t *)&v36->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v29);
}

void sub_248CB5F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2 - 48);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::espresso_inference::EspressoInferenceException::~EspressoInferenceException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2495AA834);
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_248CB60D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_248CB61A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_248CB62B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248CB6320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char v5;
  char v6;
  char **v7;
  __int128 v8;
  uint64_t v9;
  std::locale v10;
  char v11;
  char *v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[256];
  char *v17;
  __int128 v18;
  uint64_t (*v19)(char *, std::string::size_type, uint64_t);
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = xmmword_248D72D40;
  v17 = v16;
  v19 = std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke;
  v20 = v16;
  v4 = *a4;
  v12[0] = a2;
  v12[1] = &a2[a3];
  v13 = 0;
  v14 = 0;
  v15 = v4;
  v8 = *(_OWORD *)a4;
  v9 = a4[2];
  v5 = 0;
  v6 = 0;
  v7 = &v17;
  LOBYTE(v10.__locale_) = 0;
  v11 = 0;
  std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v12, (uint64_t **)&v7);
  if (v11)
    std::locale::~locale(&v10);
  v19(v17, *((_QWORD *)&v18 + 1), (uint64_t)v20);
}

void sub_248CB66E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::__format::__vformat_to[abi:ne180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char **a1, uint64_t **a2)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  int v7;
  char *v8;
  uint64_t *v10;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  if (*a1 != v4)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 125)
        break;
      if (v7 != 123)
        goto LABEL_10;
      if (++v3 == v4)
        std::__throw_format_error[abi:ne180100]("The format string terminates at a '{'");
      if (*v3 == 123)
      {
LABEL_10:
        v8 = v3 + 1;
        v10 = v5;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v10, v3);
        v3 = v8;
        if (v8 == v4)
          return v5;
      }
      else
      {
        *a2 = v5;
        v3 = std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3, v4, a1, a2);
        v5 = *a2;
        if (v3 == v4)
          return v5;
      }
    }
    if (++v3 == v4 || *v3 != 125)
      std::__throw_format_error[abi:ne180100]("The format string contains an invalid escape sequence");
    goto LABEL_10;
  }
  return v5;
}

uint64_t std::__format::__output_buffer<char>::__output_buffer[abi:ne180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke(char *a1, std::string::size_type __n_add, uint64_t a3)
{
  std::string *v4;
  std::string::size_type size;
  std::string::size_type v6;

  v4 = *(std::string **)(a3 + 296);
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    v6 = *(_QWORD *)(a3 + 296);
  }
  return std::string::__insert_with_size<char *,char *>(v4, v6 + size, a1, &a1[__n_add], __n_add);
}

uint64_t std::string::__insert_with_size<char *,char *>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(this, __n_add, v7, a3, a4);
  std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_248CB693C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<char *,char *>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<char *,char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_248CB6AC4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_248CB6AE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__throw_format_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::format_error::format_error[abi:ne180100](exception, a1);
}

void sub_248CB6B30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, char **a3, _QWORD *a4)
{
  char *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  char *v17;
  _QWORD v19[3];
  BOOL v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, (uint64_t)a3);
  if (v7 == a2)
    goto LABEL_14;
  v9 = *v7;
  v20 = v9 == 58;
  if (v9 == 125)
    goto LABEL_5;
  if (v9 != 58)
LABEL_14:
    std::__throw_format_error[abi:ne180100]("The argument index should end with a ':' or a '}'");
  ++v7;
LABEL_5:
  *a3 = v7;
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = &v20;
  v10 = a4[1];
  if (v10 <= v8)
  {
    LOBYTE(v22) = 0;
  }
  else if (v10 > 0xC)
  {
    v15 = (__int128 *)(a4[2] + 32 * v8);
    v16 = v15[1];
    v21 = *v15;
    v22 = v16;
  }
  else
  {
    v11 = (uint64_t *)(a4[2] + 16 * v8);
    v13 = *v11;
    v12 = v11[1];
    v14 = (a4[3] >> (5 * v8)) & 0x1FLL;
    *(_QWORD *)&v21 = v13;
    *((_QWORD *)&v21 + 1) = v12;
    LOBYTE(v22) = v14;
  }
  std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)v19, (uint64_t)&v21);
  v17 = *a3;
  if (*a3 == a2 || *v17 != 125)
    std::__throw_format_error[abi:ne180100]("The replacement field misses a terminating '}'");
  return v17 + 1;
}

uint64_t **std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](uint64_t **a1, char *a2)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *a2;
  v5 = **a1;
  v6 = (*a1)[2];
  v3[2] = v6 + 1;
  *(_BYTE *)(v5 + v6) = v4;
  if (v3[2] == v3[1])
  {
    ((void (*)(uint64_t))v3[3])(*v3);
    v3[2] = 0;
  }
  return a1;
}

std::runtime_error *std::format_error::format_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_2519DDF80;
  return result;
}

void std::format_error::~format_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x2495AA834);
}

char *std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  char *v3;
  int v4;
  int v5;

  v3 = a1;
  v4 = *a1;
  if (v4 == 125 || v4 == 58)
  {
    std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](a3);
    return v3;
  }
  if (v4 == 48)
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
      if (v5 == 2)
        std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
    }
    else
    {
      *(_DWORD *)(a3 + 16) = 1;
    }
    return a1 + 1;
  }
  if ((v4 - 58) <= 0xF5u)
    std::__throw_format_error[abi:ne180100]("The argument index starts with an invalid character");
  return std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((unint64_t)a1, a2, a3);
}

void std::__visit_format_arg[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_248CB6DF0(uint64_t a1, unsigned __int8 *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(a1, a2);
}

void sub_248CB6DF8(uint64_t a1, unsigned __int8 *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(a1, a2);
}

void sub_248CB6E00(uint64_t a1, int *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(a1, a2);
}

void sub_248CB6E08(uint64_t a1, uint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(a1, a2);
}

void sub_248CB6E10(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},__int128 &>(a1, a2);
}

void sub_248CB6E18(uint64_t a1, unsigned int *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(a1, a2);
}

void sub_248CB6E20(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(a1, a2);
}

void sub_248CB6E28(uint64_t a1, unint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned __int128 &>(a1, a2);
}

uint64_t *sub_248CB6E30(uint64_t a1, float *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(a1, a2);
}

uint64_t *sub_248CB6E38(uint64_t a1, double *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(a1, a2);
}

uint64_t *sub_248CB6E40(uint64_t a1, double *a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(a1, a2);
}

uint64_t *sub_248CB6E48(uint64_t a1, char **a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(a1, a2);
}

_QWORD *sub_248CB6E50(uint64_t a1, uint64_t a2)
{
  return std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(a1, a2);
}

void sub_248CB6E58(uint64_t a1, uint64_t *a2)
{
  std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(a1, a2);
}

uint64_t sub_248CB6E60(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a2 + 8))(*a1, a1[1], *(_QWORD *)a2);
}

void sub_248CB6E78()
{
  std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
}

char *std::__format::__detail::__parse_manual[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(unint64_t a1, char *a2, uint64_t a3)
{
  char *result;
  int v5;

  result = std::__format::__parse_number[abi:ne180100]<char const*>(a1, a2);
  v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    if (v5 == 2)
      std::__throw_format_error[abi:ne180100]("Using manual argument numbering in automatic argument numbering mode");
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t std::basic_format_parse_context<char>::next_arg_id[abi:ne180100](uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
      std::__throw_format_error[abi:ne180100]("Using automatic argument numbering in manual argument numbering mode");
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 2;
  }
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 + 1;
  return v2;
}

char *std::__format::__parse_number[abi:ne180100]<char const*>(unint64_t a1, char *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  if ((uint64_t)&a2[-a1] <= 9)
    v2 = (unsigned __int8 *)a2;
  else
    v2 = (unsigned __int8 *)(a1 + 9);
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = *(char *)a1 - 48;
  if ((unsigned __int8 *)(a1 + 1) == v2)
  {
LABEL_8:
    if (v2 == (unsigned __int8 *)a2)
    {
      return a2;
    }
    else
    {
      v6 = *v2;
      if ((v6 - 48) > 9)
      {
        return (char *)v2;
      }
      else if ((v6 + 10 * (unint64_t)v4 - 48) >> 31
             || (v3 = (unsigned __int8 *)(a1 + 2), (char *)(a1 + 2) != a2) && *v3 - 48 <= 9)
      {
        std::__throw_format_error[abi:ne180100]("The numeric value of the format specifier is too large");
      }
    }
  }
  else
  {
    a1 += (unint64_t)&v2[~a1];
    while (1)
    {
      v5 = *v3;
      if ((v5 - 58) < 0xFFFFFFF6)
        break;
      v4 = v5 + 10 * v4 - 48;
      if (++v3 == v2)
        goto LABEL_8;
    }
  }
  return (char *)v3;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},BOOL &>(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>((uint64_t)&v8, "a BOOL");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3 != 0, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char &>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_char[abi:ne180100]<char>((uint64_t)&v8, "a character");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},int &>(uint64_t a1, int *a2)
{
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},__int128 &>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  char v13;

  v4 = *a2;
  v3 = a2[1];
  v9 = 0;
  v10 = -1;
  v11 = 32;
  v12 = 0;
  v13 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    *v5 = v6;
  }
  v7 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *v7 = v8;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned int &>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  char v12;

  v3 = *a2;
  v8 = 0;
  v9 = -1;
  v10 = 32;
  v11 = 0;
  v12 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v8, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v8, "an integer");
    *v4 = v5;
  }
  v6 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v8, v3, v6);
  *v6 = v7;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},unsigned __int128 &>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  char v13;

  v4 = *a2;
  v3 = a2[1];
  v9 = 0;
  v10 = -1;
  v11 = 32;
  v12 = 0;
  v13 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v9, *(unsigned __int8 ***)a1, 0x137u);
    std::__format_spec::__process_parsed_integer[abi:ne180100]<char>((uint64_t)&v9, "an integer");
    *v5 = v6;
  }
  v7 = *(_QWORD **)(a1 + 8);
  std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v9, v4, v3, v7);
  *v7 = v8;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},float &>(uint64_t a1, float *a2)
{
  float v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},double &>(uint64_t a1, double *a2)
{
  double v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},long double &>(uint64_t a1, double *a2)
{
  double v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *a2;
  v11 = 0;
  v12 = -1;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    v5 = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1, 0x13Fu);
    if (BYTE1(v11) - 13 >= 6)
    {
      if (BYTE1(v11) > 0xCu || ((1 << SBYTE1(v11)) & 0x1801) == 0)
        std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a floating-point");
    }
    else if ((SWORD1(v11) & 0x80000000) == 0 && v12 == -1)
    {
      v12 = 6;
    }
    *v4 = v5;
  }
  v7 = *(uint64_t ***)(a1 + 8);
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v7);
  result = std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, v8, v9, v3);
  *v7 = result;
  return result;
}

uint64_t *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},char const*&>(uint64_t a1, char **a2)
{
  char *v3;
  unsigned __int8 **v4;
  uint64_t **v5;
  uint64_t *result;
  int v7;
  unint64_t v8;
  char v9;
  __int16 v10;
  char v11;

  v3 = *a2;
  v7 = 1;
  v8 = 0xFFFFFFFF00000000;
  v9 = 32;
  v10 = 0;
  v11 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    *v4 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  v5 = *(uint64_t ***)(a1 + 8);
  result = std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  *v5 = result;
  return result;
}

_QWORD *std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::string_view &>(uint64_t a1, uint64_t a2)
{
  char *v3;
  size_t v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  unint64_t v12;
  char v13;
  __int16 v14;
  char v15;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = 0xFFFFFFFF00000000;
  v13 = 32;
  v14 = 0;
  v15 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v5 = *(unsigned __int8 ***)a1;
    *v5 = std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v11, *(unsigned __int8 ***)a1);
  }
  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)*v6;
  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v11, v6);
  result = std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v3, v4, v7, v8, v9);
  *v6 = result;
  return result;
}

void std::invoke[abi:ne180100]<char const* std::__format::__handle_replacement_field[abi:ne180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},void const*&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  __int16 v10;
  char v11;

  v3 = *a2;
  v7 = 0;
  v8 = -1;
  v9 = 32;
  v10 = 0;
  v11 = 0;
  if (**(_BYTE **)(a1 + 16))
  {
    v4 = *(unsigned __int8 ***)a1;
    *v4 = std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(&v7, *(unsigned __int8 ***)a1);
  }
  v5 = *(_QWORD **)(a1 + 8);
  std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v7, v3, v5);
  *v5 = v6;
}

void std::formatter<BOOL,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  if (*(unsigned __int8 *)(a1 + 1) > 1u)
  {
    v7 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v7);
  }
  else
  {
    v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (_QWORD **)a3, v5, v6);
  }
}

unsigned __int8 *std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2, unsigned __int16 a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v8;
  unsigned __int8 *v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  _BOOL4 v16;
  char *v17;

  v3 = *a2;
  v4 = a2[1];
  v17 = (char *)v3;
  if (v3 == v4)
    return v3;
  v8 = std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(a1, (unsigned __int8 **)&v17, v4, (a3 >> 6) & 1);
  v9 = (unsigned __int8 *)v17;
  if (v8)
    v10 = v17 == (char *)v4;
  else
    v10 = 0;
  if (!v10)
  {
    if ((a3 & 1) == 0)
      goto LABEL_14;
    v11 = *v17;
    switch(v11)
    {
      case ' ':
        v12 = *a1 | 0x18;
        break;
      case '+':
        v12 = *a1 & 0xE7 | 0x10;
        break;
      case '-':
        v12 = *a1 & 0xE7 | 8;
        break;
      default:
LABEL_14:
        if ((a3 & 2) == 0 || *v9 != 35 || (*a1 |= 0x20u, ++v9, v17 = (char *)v9, v9 != v4))
        {
          if ((a3 & 4) == 0 || *v9 != 48)
            goto LABEL_22;
          if ((*a1 & 7) == 0)
            *a1 = *a1 & 0xF8 | 4;
          v17 = (char *)(v9 + 1);
          if (v9 + 1 != v4)
          {
LABEL_22:
            v13 = std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, (unint64_t *)&v17, (char *)v4, (uint64_t)a2);
            v14 = (unsigned __int8 *)v17;
            if (!v13 || v17 != (char *)v4)
            {
              if ((a3 & 8) == 0
                || (v16 = std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)a1, &v17, (char *)v4, (uint64_t)a2), v14 = (unsigned __int8 *)v17, !v16)|| v17 != (char *)v4)
              {
                if ((a3 & 0x10) == 0 || *v14 != 76 || (*a1 |= 0x40u, ++v14, v17 = (char *)v14, v14 != v4))
                {
                  if ((a3 & 0x80) == 0 || *v14 != 110 || (*a1 |= 0x80u, v17 = (char *)(v14 + 1), v14 + 1 != v4))
                  {
                    if ((a3 & 0x20) != 0)
                      std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>((uint64_t)a1, &v17);
                    v3 = (unsigned __int8 *)v17;
                    if ((a3 & 0x100) == 0)
                      return v3;
                    if (v17 != (char *)v4)
                    {
                      v4 = (unsigned __int8 *)v17;
                      if (*v17 != 125)
                        std::__throw_format_error[abi:ne180100]("The format specifier should consume the input or end with a '}'");
                    }
                  }
                }
              }
            }
          }
        }
        return v4;
    }
    *a1 = v12;
    v17 = (char *)++v9;
    if (v9 == v4)
      return v4;
    goto LABEL_14;
  }
  return v4;
}

uint64_t std::__format_spec::__process_parsed_BOOL[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2;
  _BYTE *v3;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    if (v2 > 1)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v3 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v3 & 7) == 0)
      *v3 = *v3 & 0xF8 | 1;
  }
  return result;
}

uint64_t std::__format_spec::__parser<char>::__parse_fill_align[abi:ne180100]<char const*>(_BYTE *a1, unsigned __int8 **a2, unsigned __int8 *a3, int a4)
{
  unsigned __int8 *v8;
  int v9;
  char v10;
  int v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v15;
  size_t v16;
  unsigned __int8 *v17[2];

  v17[0] = *a2;
  v17[1] = a3;
  if ((std::__unicode::__code_point_view<char>::__consume[abi:ne180100](v17) & 0x80000000) != 0)
    std::__throw_format_error[abi:ne180100]("The format specifier contains malformed Unicode characters");
  v8 = v17[0];
  if (v17[0] >= a3)
    goto LABEL_7;
  v9 = (char)*v17[0];
  switch(v9)
  {
    case '<':
      v10 = 1;
      goto LABEL_17;
    case '>':
      v10 = 3;
LABEL_17:
      *a1 = *a1 & 0xF8 | v10;
      v15 = *a2;
      v16 = v8 - *a2;
      if (v16 == 1)
      {
        std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100]((uint64_t)a1, (char)*v15, a4);
        v15 = *a2;
      }
      else if (v8 == v15)
      {
LABEL_21:
        v13 = &v8[v16];
        goto LABEL_22;
      }
      memmove(a1 + 12, v15, v16);
      v8 = *a2;
      goto LABEL_21;
    case '^':
      v10 = 2;
      goto LABEL_17;
  }
LABEL_7:
  v11 = (char)**a2;
  switch(v11)
  {
    case '<':
      v12 = 1;
      break;
    case '>':
      v12 = 3;
      break;
    case '^':
      v12 = 2;
      break;
    default:
      return 0;
  }
  *a1 = *a1 & 0xF8 | v12;
  v13 = *a2;
LABEL_22:
  *a2 = v13 + 1;
  return 1;
}

uint64_t std::__format_spec::__parser<char>::__parse_width[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4)
{
  unint64_t v6;
  int v7;
  char *v9;
  char *v10;
  int v11;

  v6 = *a2;
  v7 = *(unsigned __int8 *)*a2;
  if (v7 == 123)
  {
    v9 = (char *)(v6 + 1);
    *a2 = (unint64_t)v9;
    v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v9, a3, a4);
    *(_WORD *)(a1 + 2) |= 0x4000u;
  }
  else
  {
    if (v7 == 48)
      std::__throw_format_error[abi:ne180100]("The width option should not have a leading zero");
    if ((v7 - 58) < 0xFFFFFFF6)
      return 0;
    v10 = std::__format::__parse_number[abi:ne180100]<char const*>(v6, a3);
  }
  *(_DWORD *)(a1 + 4) = v11;
  *a2 = (unint64_t)v10;
  return 1;
}

BOOL std::__format_spec::__parser<char>::__parse_precision[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(uint64_t a1, char **a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  unsigned __int8 *v8;
  int v9;
  char *v10;
  int v11;
  int v12;

  v4 = *a2;
  v5 = **a2;
  if (v5 == 46)
  {
    v8 = (unsigned __int8 *)(v4 + 1);
    *a2 = v4 + 1;
    if (v4 + 1 == a3)
      std::__throw_format_error[abi:ne180100]("End of input while parsing format specifier precision");
    v9 = *v8;
    if (v9 == 123)
    {
      *a2 = v4 + 2;
      v10 = std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(v4 + 2, a3, a4);
      *(_WORD *)(a1 + 2) |= 0x8000u;
      *(_DWORD *)(a1 + 8) = v11;
    }
    else
    {
      if ((v9 - 58) <= 0xFFFFFFF5)
        std::__throw_format_error[abi:ne180100]("The precision option does not contain a value or an argument index");
      v10 = std::__format::__parse_number[abi:ne180100]<char const*>((unint64_t)v8, a3);
      *(_DWORD *)(a1 + 8) = v12;
      *(_WORD *)(a1 + 2) &= ~0x8000u;
    }
    *a2 = v10;
  }
  return v5 == 46;
}

uint64_t std::__format_spec::__parser<char>::__parse_type[abi:ne180100]<char const*>(uint64_t result, char **a2)
{
  _BYTE *v2;
  int v3;
  char v4;
  int v5;

  v2 = *a2;
  v3 = **a2;
  if (v3 <= 96)
  {
    v5 = v3 - 65;
    v4 = 12;
    switch(v5)
    {
      case 0:
        goto LABEL_19;
      case 1:
        v4 = 3;
        goto LABEL_19;
      case 4:
        v4 = 14;
        goto LABEL_19;
      case 5:
        v4 = 16;
        goto LABEL_19;
      case 6:
        v4 = 18;
LABEL_19:
        *(_BYTE *)(result + 1) = v4;
        *a2 = v2 + 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(**a2)
    {
      case 'a':
        v4 = 11;
        goto LABEL_19;
      case 'b':
        v4 = 2;
        goto LABEL_19;
      case 'c':
        v4 = 10;
        goto LABEL_19;
      case 'd':
        v4 = 5;
        goto LABEL_19;
      case 'e':
        v4 = 13;
        goto LABEL_19;
      case 'f':
        v4 = 15;
        goto LABEL_19;
      case 'g':
        v4 = 17;
        goto LABEL_19;
      case 'o':
        v4 = 4;
        goto LABEL_19;
      case 'p':
        v4 = 8;
        goto LABEL_19;
      case 's':
        v4 = 1;
        goto LABEL_19;
      case 'x':
        v4 = 6;
        goto LABEL_19;
      default:
        return result;
    }
  }
  return result;
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:ne180100](unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v1 = *a1;
  v2 = **a1;
  v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255)
    v4 = 8;
  else
    v4 = v3;
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      v5 = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80)
        goto LABEL_35;
      *a1 = v1 + 1;
      v6 = *v1;
      *a1 = v1 + 2;
      v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80)
        v5 = v7;
      else
        v5 = 2147549181;
      break;
    case 3:
      if (a1[1] - v1 < 3)
        goto LABEL_35;
      v8 = 1;
      do
        v9 = v1[v8] & 0xC0;
      while (v9 == 128 && (_DWORD)v8++ != 2);
      if (v9 != 128)
        goto LABEL_35;
      v5 = 2147549181;
      *a1 = v1 + 1;
      v11 = *v1 & 0xF;
      *a1 = v1 + 2;
      v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v13 >= 0x800)
      {
        if ((v12 & 0xF800) == 0xD800)
          v5 = 2147549181;
        else
          v5 = v13;
      }
      break;
    case 4:
      if (a1[1] - v1 < 4)
        goto LABEL_35;
      v14 = 1;
      do
        v15 = v1[v14] & 0xC0;
      while (v15 == 128 && (_DWORD)v14++ != 3);
      if (v15 != 128)
        goto LABEL_35;
      v5 = 2147549181;
      *a1 = v1 + 1;
      v17 = *v1 & 7;
      *a1 = v1 + 2;
      v18 = (v17 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v19 = v18 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      v20 = v1[3] & 0x3F | (v19 << 6);
      if (v20 >= 0x10000)
      {
        if (v20 >= 0x110000)
          v5 = 2147549181;
        else
          v5 = v20;
      }
      break;
    default:
LABEL_35:
      v5 = 2147549181;
      *a1 = v1 + 1;
      break;
  }
  return v5;
}

void std::__format_spec::__parser<char>::__validate_fill_character[abi:ne180100](uint64_t a1, int a2, int a3)
{
  if (a3 && a2 == 58 || a2 == 125 || a2 == 123)
    std::__throw_format_error[abi:ne180100]("The fill option contains an invalid value");
}

char *std::__format_spec::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(char *a1, char *a2, uint64_t a3)
{
  char *v4;

  if (a1 == a2)
    std::__throw_format_error[abi:ne180100]("End of input while parsing an argument index");
  v4 = std::__format::__parse_arg_id[abi:ne180100]<char const*,std::basic_format_parse_context<char>>(a1, a2, a3);
  if (v4 == a2 || *v4 != 125)
    std::__throw_format_error[abi:ne180100]("The argument index is invalid");
  return v4 + 1;
}

void std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](const char *a1)
{
  size_t v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  const char *v7;
  std::string v8;
  std::string v9;
  __int128 v10;
  int64_t v11;

  std::string::basic_string[abi:ne180100]<0>(&v8, "The type option contains an invalid value for ");
  v2 = strlen(a1);
  v3 = std::string::append(&v8, a1, v2);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v9, " formatting argument", 0x14uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v7 = (const char *)&v10;
  else
    v7 = (const char *)v10;
  std::__throw_format_error[abi:ne180100](v7);
}

void sub_248CB82F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:ne180100](uint64_t result, char a2, const char *a3, int a4)
{
  unsigned int v4;
  int v5;
  const char *v6;

  if ((a2 & 1) == 0 && (*(_BYTE *)result & 0x18) != 0)
  {
    v6 = "sign";
    goto LABEL_23;
  }
  if ((a2 & 2) == 0 && (*(_BYTE *)result & 0x20) != 0)
  {
    v6 = "alternate form";
    goto LABEL_23;
  }
  if ((a2 & 4) == 0 && (*(_BYTE *)result & 7) == 4)
  {
    v6 = "zero-padding";
    goto LABEL_23;
  }
  if ((a2 & 8) == 0 && *(_DWORD *)(result + 8) != -1)
  {
    v6 = "precision";
    goto LABEL_23;
  }
  if ((a2 & 0x10) == 0 && (*(_BYTE *)result & 0x40) != 0)
  {
    v6 = "locale-specific form";
LABEL_23:
    std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](a3, v6);
  }
  v4 = *(unsigned __int8 *)(result + 1);
  if (*(_BYTE *)(result + 1))
  {
    if (v4 >= 0x20)
      std::__throw_format_error[abi:ne180100]("The type does not fit in the mask");
    v5 = 1 << v4;
  }
  else
  {
    v5 = 1;
  }
  if ((v5 & a4) == 0)
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a3);
  return result;
}

void std::__format_spec::__throw_invalid_option_format_error[abi:ne180100](const char *a1, const char *a2)
{
  size_t v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  size_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const char *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  __int128 v19;
  int64_t v20;

  std::string::basic_string[abi:ne180100]<0>(&v15, "The format specifier for ");
  v4 = strlen(a1);
  v5 = std::string::append(&v15, a1, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v16, " does not allow the ", 0x14uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = strlen(a2);
  v10 = std::string::append(&v17, a2, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v18, " option", 7uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20 = v12->__r_.__value_.__r.__words[2];
  v19 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v14 = (const char *)&v19;
  else
    v14 = (const char *)v19;
  std::__throw_format_error[abi:ne180100](v14);
}

void sub_248CB851C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__format_BOOL[abi:ne180100]<char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(int a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  char *v9;
  const std::locale::facet *v11;
  uint64_t v12;
  char *locale;
  size_t v14;
  _QWORD *v15;
  std::locale v16;
  size_t v17;
  unsigned __int8 v18;

  if ((a3 & 0x40) != 0)
  {
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v16);
    v11 = std::locale::use_facet(&v16, MEMORY[0x24BEDB588]);
    std::locale::~locale(&v16);
    v12 = 56;
    if (a1)
      v12 = 48;
    (*(void (**)(std::locale *__return_ptr, const std::locale::facet *))((char *)&v11->~facet + v12))(&v16, v11);
    if ((v18 & 0x80u) == 0)
      locale = (char *)&v16;
    else
      locale = (char *)v16.__locale_;
    if ((v18 & 0x80u) == 0)
      v14 = v18;
    else
      v14 = v17;
    v15 = std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(locale, v14, *a2, a3, a4);
    if ((char)v18 < 0)
      operator delete(v16.__locale_);
    return v15;
  }
  else
  {
    if (a1)
      v8 = 4;
    else
      v8 = 5;
    if (a1)
      v9 = "true";
    else
      v9 = "false";
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v8, *a2, a3, a4, v8);
  }
}

void sub_248CB86B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  v7 = v6;
  std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)a1, a2);
  return (v5 << 8) | (v7 << 32) | v4 & 0x7F;
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_248CB8780(unsigned int a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  uint64_t v7;

  return std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)&v7, 0, 0xAu);
}

std::locale *std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]@<X0>(uint64_t a1@<X0>, std::locale *a2@<X8>)
{
  std::locale *v3;
  std::locale v5;

  v3 = (std::locale *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 40))
  {
    MEMORY[0x2495AA738](&v5);
    std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(v3, &v5);
    std::locale::~locale(&v5);
  }
  return std::locale::locale(a2, v3);
}

void sub_248CB88E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  if (a4 <= 0)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
    return a3;
  }
  else
  {
    v10 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, __len, HIDWORD(a4), 1);
    return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, __len, a3, a4, a5, v10);
  }
}

std::locale *std::optional<std::locale>::operator=[abi:ne180100]<std::locale,void>(std::locale *this, const std::locale *a2)
{
  if (LOBYTE(this[1].__locale_))
  {
    std::locale::operator=(this, a2);
  }
  else
  {
    std::locale::locale(this, a2);
    LOBYTE(this[1].__locale_) = 1;
  }
  return this;
}

uint64_t std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>(unsigned __int8 *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;

  result = 0;
  if (a2 && a3)
  {
    if ((char)*a1 < 0)
    {
      v8 = a1;
    }
    else
    {
      v7 = 0;
      v8 = &a1[a3 - 1];
      while (1)
      {
        if (a2 - 1 == v7)
          return a2;
        if (a3 - 1 == v7)
          break;
        v9 = (char)a1[++v7];
        if (v9 < 0)
        {
          a3 = a3 - v7 + 1;
          v8 = &a1[v7 - 1];
          return v8
               - a1
               + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
        }
      }
      if (((char)a1[a3] & 0x80000000) == 0)
        return a3;
      a3 = 1;
    }
    return v8
         - a1
         + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(v8, &a1[a2], a3, a4);
  }
  return result;
}

_QWORD *std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >> 32 > a6)
    __asm { BR              X10 }
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a3, __src, __len);
  return a3;
}

void sub_248CB8B10()
{
  JUMPOUT(0x248CB8B18);
}

_QWORD *std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(_QWORD *result, char *__src, size_t __len)
{
  size_t v3;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v3 = __len;
  v5 = result;
  v7 = result[1];
  v6 = result[2];
  if (v6 + __len >= v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD))result[3])(*result);
    v6 = 0;
    v5[2] = 0;
    v7 = v5[1];
  }
  if (v3 >= v7)
  {
    do
    {
      if (v5[1] >= v3)
        v8 = v3;
      else
        v8 = v5[1];
      if (v8)
        memmove((void *)(*v5 + v6), __src, v8);
      v5[2] = v8;
      __src += v8;
      v3 -= v8;
      result = (_QWORD *)((uint64_t (*)(_QWORD, size_t, _QWORD))v5[3])(*v5, v8, v5[4]);
      v6 = 0;
      v5[2] = 0;
    }
    while (v3);
  }
  else
  {
    if (v3)
    {
      result = memmove((void *)(*v5 + v6), __src, v3);
      v6 = v5[2];
    }
    v5[2] = v6 + v3;
  }
  return result;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:ne180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  char v17;

  v14 = a1;
  v15 = a2;
  v16 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100](&v14) & 0x7FFFFFFF;
  v17 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v16);
  if (a1 == a2)
    return 0;
  v8 = 0;
  do
  {
    v9 = v16;
    v10 = v14;
    if (v14 == v15)
      v17 = 15;
    else
      v10 = std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100]((uint64_t)&v14);
    v11 = std::__width_estimation_table::__estimated_width[abi:ne180100](v9);
    v12 = v8 + v11;
    if (!a4 && v12 > a3)
      break;
    if (v10 == a2)
    {
      v8 += v11;
      return v8;
    }
    v8 += v11;
  }
  while (v12 <= a3);
  return v8;
}

uint64_t std::__width_estimation_table::__estimated_width[abi:ne180100](unsigned int a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  if (a1 - 262142 < 0xFFFC1102)
    return 1;
  v2 = 108;
  v3 = (unsigned int *)&std::__width_estimation_table::__entries;
  do
  {
    v4 = v2 >> 1;
    v5 = &v3[v2 >> 1];
    v7 = *v5;
    v6 = v5 + 1;
    v2 += ~(v2 >> 1);
    if (((a1 << 14) | 0x3FFF) < v7)
      v2 = v4;
    else
      v3 = v6;
  }
  while (v2);
  v1 = 1;
  if (v3 != (unsigned int *)&std::__width_estimation_table::__entries)
  {
    if ((*(v3 - 1) & 0x3FFF) + (*(v3 - 1) >> 14) < a1)
      return 1;
    else
      return 2;
  }
  return v1;
}

uint64_t std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](unsigned int a1)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = 1496;
  v2 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    v3 = v1 >> 1;
    v4 = &v2[v1 >> 1];
    v6 = *v4;
    v5 = v4 + 1;
    v1 += ~(v1 >> 1);
    if (((a1 << 11) | 0x7FF) < v6)
      v1 = v3;
    else
      v2 = v5;
  }
  while (v1);
  v7 = 16;
  if (v2 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    v8 = *(v2 - 1);
    v9 = ((v8 >> 4) & 0x7F) + (v8 >> 11);
    v10 = v8 & 0xF;
    if (v9 >= a1)
      return v10;
    else
      return 16;
  }
  return v7;
}

unsigned __int8 *std::__unicode::__extended_grapheme_cluster_view<char>::__get_break[abi:ne180100](uint64_t a1)
{
  int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  v2 = 0;
  v8 = 1;
  while (1)
  {
    v3 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      break;
    v4 = *(unsigned __int8 *)(a1 + 20);
    v5 = std::__unicode::__code_point_view<char>::__consume[abi:ne180100]((unsigned __int8 **)a1) & 0x7FFFFFFF;
    *(_DWORD *)(a1 + 16) = v5;
    v6 = std::__extended_grapheme_custer_property_boundary::__get_property[abi:ne180100](v5);
    *(_BYTE *)(a1 + 20) = v6;
    v2 |= v4 == 3;
    if (std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](&v8, v2 & 1, v4, v6))
      return v3;
  }
  *(_BYTE *)(a1 + 20) = 15;
  return v3;
}

BOOL std::__unicode::__at_extended_grapheme_cluster_break[abi:ne180100](_BYTE *a1, int a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 v4;
  BOOL v6;

  if (!a3 && a4 == 5)
    return 0;
  if (a3 > 5 || (v4 = 1, ((1 << a3) & 0x23) == 0))
  {
    if (a4 > 5 || (v4 = 1, ((1 << a4) & 0x23) == 0))
    {
      if (a3 == 12 || a3 == 6)
      {
        if ((a4 - 11) >= 2u)
          goto LABEL_16;
      }
      else if (a3 != 4 || a4 - 4 >= 9 || ((0x10Du >> (a4 - 4)) & 1) == 0)
      {
LABEL_16:
        v6 = a3 == 11 || a3 == 7;
        if (v6 && a4 == 11 || a4 <= 0xD && ((1 << a4) & 0x2404) != 0 || a3 == 8 || a3 == 13 && a2 && a4 == 3)
          return 0;
        v4 = 1;
        if (a3 == 9 && a4 == 9)
        {
          v4 = *a1 == 0;
          *a1 ^= 1u;
        }
        return v4;
      }
      return 0;
    }
  }
  return v4;
}

_QWORD *std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(_QWORD *a1, size_t __len, int a3)
{
  size_t v3;
  unsigned int v5;
  size_t v6;
  int __src;

  v3 = __len;
  v5 = __clz(~(_BYTE)a3) - 24;
  __src = a3;
  if ((_BYTE)a3 == 0xFF)
    v6 = 8;
  else
    v6 = v5;
  if ((_DWORD)v6)
  {
    if (__len)
    {
      do
      {
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, (char *)&__src, v6);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, __len, (char)a3);
  }
  return a1;
}

_QWORD *std::__format::__output_buffer<char>::__fill[abi:ne180100](_QWORD *result, size_t __len, int __c)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;

  v5 = (uint64_t)result;
  v7 = result[1];
  v6 = result[2];
  if (v6 + __len >= v7)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD))result[3])(*result);
    v6 = 0;
    *(_QWORD *)(v5 + 16) = 0;
    v7 = *(_QWORD *)(v5 + 8);
  }
  if (v7 <= __len)
  {
    do
    {
      v8 = *(_QWORD *)v5;
      if (*(_QWORD *)(v5 + 8) >= __len)
        v9 = __len;
      else
        v9 = *(_QWORD *)(v5 + 8);
      if (v9)
      {
        memset((void *)(v8 + v6), __c, v9);
        v8 = *(_QWORD *)v5;
      }
      *(_QWORD *)(v5 + 16) = v9;
      __len -= v9;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(v5 + 24))(v8, v9, *(_QWORD *)(v5 + 32));
      v6 = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    while (__len);
  }
  else
  {
    if (__len)
    {
      result = memset((void *)(*(_QWORD *)v5 + v6), __c, __len);
      v6 = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)(v5 + 16) = v6 + __len;
  }
  return result;
}

void std::__format_spec::__parser<char>::__get_width[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD v12[2];
  char v13;
  _BYTE v14[31];

  *(_QWORD *)&v14[23] = *MEMORY[0x24BDAC8D0];
  v3 = *(_WORD *)(a1 + 2);
  v4 = *(_DWORD *)(a1 + 4);
  if ((v3 & 0x4000) != 0)
  {
    v5 = v4;
    v6 = a2[1];
    if (v6 <= v4)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      v9 = a2[2] + 32 * v4;
      v2 = *(_QWORD *)v9;
      v5 = *(_QWORD *)(v9 + 8);
      LOBYTE(v8) = *(_BYTE *)(v9 + 16);
      v11[0] = *(_QWORD *)(v9 + 17);
      *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v7 = a2[2];
      v8 = (a2[3] >> (5 * v4)) & 0x1FLL;
      v2 = *(_QWORD *)(v7 + 16 * v4);
      v5 = *(_QWORD *)(v7 + 16 * v4 + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    v13 = v8;
    *(_QWORD *)v14 = v11[0];
    *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v11 + 7);
    std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, (uint64_t)v12);
  }
}

void std::__format_spec::__parser<char>::__get_precision[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD v12[2];
  char v13;
  _BYTE v14[31];

  *(_QWORD *)&v14[23] = *MEMORY[0x24BDAC8D0];
  v3 = *(__int16 *)(a1 + 2);
  v4 = *(_DWORD *)(a1 + 8);
  if (v3 < 0)
  {
    v5 = v4;
    v6 = a2[1];
    if (v6 <= v4)
    {
      LOBYTE(v8) = 0;
    }
    else if (v6 > 0xC)
    {
      v9 = a2[2] + 32 * v4;
      v2 = *(_QWORD *)v9;
      v5 = *(_QWORD *)(v9 + 8);
      LOBYTE(v8) = *(_BYTE *)(v9 + 16);
      v11[0] = *(_QWORD *)(v9 + 17);
      *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v7 = a2[2];
      v8 = (a2[3] >> (5 * v4)) & 0x1FLL;
      v2 = *(_QWORD *)(v7 + 16 * v4);
      v5 = *(_QWORD *)(v7 + 16 * v4 + 8);
    }
    v12[0] = v2;
    v12[1] = v5;
    v13 = v8;
    *(_QWORD *)v14 = v11[0];
    *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v11 + 7);
    std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v10, (uint64_t)v12);
  }
}

void std::__visit_format_arg[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_248CB92CC(uint64_t a1, unsigned int *a2)
{
  uint64_t result;

  result = *a2;
  if ((result & 0x80000000) != 0)
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  return result;
}

void sub_248CB9310()
{
  std::__throw_format_error[abi:ne180100]("Replacement argument isn't a standard signed or unsigned integer type");
}

void sub_248CB931C()
{
  std::__throw_format_error[abi:ne180100]("The argument index value is too large for the number of arguments supplied");
}

unint64_t std::invoke[abi:ne180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},long long &>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;

  result = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
    std::__throw_format_error[abi:ne180100]("An argument index may not have a negative value");
  if (result >> 31)
    std::__throw_format_error[abi:ne180100]("The value of the argument index exceeds its maximum value");
  return result;
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, unsigned int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned int>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_248CB9644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(_QWORD *a1, char *__src, char *a3, int a4, uint64_t *a5, char a6, unint64_t a7, unint64_t a8)
{
  __int16 v8;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;

  v8 = a7;
  v11 = a3;
  v13 = HIDWORD(a7);
  LODWORD(v14) = *((unsigned __int8 *)a5 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = a5[1];
  v15 = a4 - (_DWORD)__src - 1 + v14;
  v16 = a7 & 7;
  v29 = HIDWORD(a8);
  if ((_DWORD)v16 == 4)
  {
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
    if ((int)v13 > v15)
      std::__format::__output_buffer<char>::__fill[abi:ne180100](a1, (int)v13 - v15, 48);
  }
  else
  {
    if (SHIDWORD(a7) > v15)
      __asm { BR              X10 }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, __src, a3 - __src);
  }
  v17 = *((unsigned __int8 *)a5 + 23);
  v18 = (char)v17;
  v19 = (char *)a5 + v17;
  if (v18 >= 0)
    v20 = v19;
  else
    v20 = (char *)(*a5 + a5[1]);
  if (v18 >= 0)
    v21 = a5;
  else
    v21 = (uint64_t *)*a5;
  v22 = (char *)v21 + 1;
  while (1)
  {
    v24 = v20 - 1;
    v23 = *(v20 - 1);
    if ((v8 & 0xFF00) == 0x700)
    {
      v25 = &v11[v23];
      std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>((uint64_t)a1, v11, &v11[v23], (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
      v11 = v25;
    }
    else
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(a1, v11, v23);
      v11 += *v24;
    }
    if (v20 == v22)
      break;
    v26 = *a1;
    v27 = a1[2];
    a1[2] = v27 + 1;
    *(_BYTE *)(v26 + v27) = a6;
    --v20;
    if (a1[2] == a1[1])
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      a1[2] = 0;
      v20 = v24;
    }
  }
  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v29);
}

uint64_t std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  if (a4 >> 32 > a2 - a1)
    __asm { BR              X10 }
  std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(a3, a1, a2, a6);
  return a3;
}

void sub_248CB9910()
{
  JUMPOUT(0x248CB9918);
}

uint64_t std::__formatter::__hex_to_upper[abi:ne180100](int a1)
{
  if ((a1 - 97) >= 6)
    return (char)a1;
  else
    return (char)(a1 - 32);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned int>(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  char *v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  char *v12;
  unsigned int v13;
  BOOL v14;

  v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5)
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    if (v5 == 3)
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
    if (v5 != 7)
    {
      v10 = a2 - (_QWORD)a1;
      v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned int>(a3, a4);
      if (v10 < v11)
        return (char *)a2;
      v4 = (char *)a1 + v11;
      v12 = v4 - 1;
      v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[v13 % a4];
        v14 = v13 >= a4;
        v13 /= a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 9)
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  v7 = (1233 * (32 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= (((__PAIR64__(v7, a3) - std::__itoa::__pow10_32[v7]) >> 32) + 1))
    return (char *)std::__itoa::__base_10_u32[abi:ne180100](a1, a3);
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (a1 < a2)
    return 1;
  v3 = a1;
  v4 = a2 * a2;
  v5 = v4 * v4;
  result = 4;
  while (1)
  {
    if (v3 < v4)
      return (result - 2);
    if (v3 < a2 * a2 * a2)
      break;
    if (v3 < v5)
      return result;
    v3 /= v5;
    result = (result + 4);
    if (v3 < a2)
      return (result - 3);
  }
  return (result - 1);
}

_WORD *std::__itoa::__base_10_u32[abi:ne180100](_WORD *a1, unsigned int a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;

  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      if (a2 > 0x3B9AC9FF)
      {
        return std::__itoa::__append10[abi:ne180100]<unsigned int>(a1, a2);
      }
      else
      {
        *(_BYTE *)a1 = a2 / 0x5F5E100 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        v7 = a2 % 0x5F5E100 % 0xF4240;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v7 / 0x2710uLL];
        v7 %= 0x2710u;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v7 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v7 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        v9 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(_BYTE *)a1 = v3 + 48;
        v4 = (429497 * (unint64_t)(a2 % 0xF4240)) >> 32;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v4];
        v5 = a2 % 0xF4240 - 10000 * v4;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v5 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v5 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    v6 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v6];
      v10 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v10 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v10 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(_BYTE *)a1 = v6 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(5243 * (a2 % 0x2710)) >> 19];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(a2 % 0x2710
                                                                                  - 100
                                                                                  * ((unsigned __int16)((5243 * (a2 % 0x2710)) >> 16) >> 3))];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    v8 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v8];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(_BYTE *)a1 = v8 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(_BYTE *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned int>(_WORD *a1, unsigned int a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[a2 / 0x5F5E100uLL];
  a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240uLL];
  v2 = a2 % 0x5F5E100 % 0xF4240;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  _BYTE *v8;

  v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x11)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  v8 = (_BYTE *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x41)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned int>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x101)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

uint64_t std::__format::__output_buffer<char>::__transform[abi:ne180100]<char *,char (*)(char),char>(uint64_t result, char *a2, char *a3, uint64_t (*a4)(_QWORD))
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;

  v6 = a2;
  v7 = result;
  v8 = a3 - a2;
  v10 = *(_QWORD *)(result + 8);
  v9 = *(_QWORD *)(result + 16);
  if (v9 + v8 >= v10)
  {
    result = (*(uint64_t (**)(_QWORD))(result + 24))(*(_QWORD *)result);
    v9 = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v10 = *(_QWORD *)(v7 + 8);
  }
  if (v8 >= v10)
  {
    do
    {
      v13 = *(_QWORD *)v7;
      if (*(_QWORD *)(v7 + 8) >= v8)
        v14 = v8;
      else
        v14 = *(_QWORD *)(v7 + 8);
      if (v14)
      {
        v15 = (_BYTE *)(v13 + v9);
        v16 = v14;
        v17 = v6;
        do
        {
          v18 = *v17++;
          *v15++ = a4(v18);
          --v16;
        }
        while (v16);
        v13 = *(_QWORD *)v7;
      }
      v6 += v14;
      *(_QWORD *)(v7 + 16) = v14;
      v8 -= v14;
      result = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(v7 + 24))(v13, v14, *(_QWORD *)(v7 + 32));
      v9 = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    while (v8);
  }
  else
  {
    if (v6 != a3)
    {
      v11 = (_BYTE *)(*(_QWORD *)v7 + v9);
      do
      {
        v12 = *v6++;
        result = a4(v12);
        *v11++ = result;
      }
      while (v6 != a3);
      v9 = *(_QWORD *)(v7 + 16);
    }
    *(_QWORD *)(v7 + 16) = v9 + v8;
  }
  return result;
}

void std::__formatter_char<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, unsigned __int8 a2, _QWORD *a3)
{
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 __src;

  v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 10 || v5 == 0)
  {
    v7 = (_QWORD *)*a3;
    v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    __src = a2;
    std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((char *)&__src, 1uLL, v7, v8, v9, 1);
  }
  else
  {
    v10 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)a1, a3);
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v10);
  }
}

uint64_t std::__format_spec::__process_parsed_char[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  _BYTE *v6;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 - 2 >= 6)
  {
    v3 = v2 > 0x13;
    v4 = (1 << v2) & 0x80401;
    if (v3 || v4 == 0)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v6 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v6 & 7) == 0)
      *v6 = *v6 & 0xF8 | 1;
  }
  return result;
}

void std::__formatter_integer<char>::format[abi:ne180100]<int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = -a2;
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, (uint64_t)a3, v6);
  }
}

uint64_t std::__format_spec::__process_parsed_integer[abi:ne180100]<char>(uint64_t result, const char *a2)
{
  int v2;
  _BYTE *v4;

  v2 = *(unsigned __int8 *)(result + 1);
  if ((v2 - 2) >= 6 && v2 != 0)
  {
    if (v2 != 10)
      std::__format_spec::__throw_invalid_type_format_error[abi:ne180100](a2);
    v4 = (_BYTE *)result;
    result = std::__format_spec::__parser<char>::__validate[abi:ne180100](result, 48, a2, -1);
    if ((*v4 & 7) == 0)
      *v4 = *v4 & 0xF8 | 1;
  }
  return result;
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 != (char)a1)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  }
  else
  {
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = -a2;
    std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v7, (uint64_t)a3, v6);
  }
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 != (char)a1)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_248CBA4C0(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  _BYTE v7[6];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)v7, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, signed int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_248CBA8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

char *std::__to_chars_integral[abi:ne180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, signed int a4)
{
  char *v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  char *v12;
  unint64_t v13;
  BOOL v14;

  v4 = (char *)a2;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  v5 = v6 >> 1;
  if (v5 != 4)
  {
    if (!v5)
      return (char *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    if (v5 == 3)
      return (char *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
    if (v5 != 7)
    {
      v10 = a2 - (_QWORD)a1;
      v11 = std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(a3, a4);
      if (v10 < v11)
        return (char *)a2;
      v4 = (char *)a1 + v11;
      v12 = v4 - 1;
      v13 = a3;
      do
      {
        *v12-- = a0123456789abcd[(v13 % a4)];
        v14 = v13 >= a4;
        v13 /= (unint64_t)a4;
      }
      while (v14);
      return v4;
    }
    return (char *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>((uint64_t)a1, a2, a3);
  }
  if (a2 - (uint64_t)a1 > 19)
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  v7 = (1233 * (64 - __clz(a3 | 1))) >> 12;
  if (a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1)
    return (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  return v4;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a2 > a1)
    return 1;
  v3 = a1;
  v4 = a2 * a2;
  v5 = (v4 * v4);
  result = 4;
  while (1)
  {
    if (v3 < v4)
      return (result - 2);
    if (v3 < v4 * a2)
      break;
    if (v3 < v5)
      return result;
    v3 /= v5;
    result = (result + 4);
    if (v3 < a2)
      return (result - 3);
  }
  return (result - 1);
}

_WORD *std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](_WORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if (!HIDWORD(a2))
    return std::__itoa::__base_10_u32[abi:ne180100](a1, a2);
  if (a2 > 0x2540BE3FFLL)
  {
    a1 = std::__itoa::__base_10_u32[abi:ne180100](a1, a2 / 0x2540BE400);
    v2 %= 0x2540BE400uLL;
  }
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a1, v2);
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned long long>(_WORD *a1, unint64_t a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[(a2 / 0x5F5E100)];
  v2 = a2 % 0x5F5E100;
  a1[1] = std::__itoa::__digits_base_10[v2 / 0xF4240uLL];
  v2 %= 0xF4240u;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _BYTE *v8;

  v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x11)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 4;
      *(_DWORD *)(v5 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v5 -= 4;
      v7 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v7);
  }
  v8 = (_BYTE *)(v5 - 1);
  do
  {
    *v8-- = a01[v6 & 1];
    v7 = v6 > 1;
    v6 >>= 1;
  }
  while (v7);
  return v4;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;

  v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v4 = a1 + v3;
  if (a3 < 0x41)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + v3;
    do
    {
      v6 = a3 >> 6;
      *(_WORD *)(v5 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x40);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a01234567[v6 & 7];
    v8 = v6 > 7;
    v6 >>= 3;
  }
  while (v8);
  return v4;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned long long>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;

  v3 = 67 - __clz(a3 | 1);
  if (a2 - a1 < (uint64_t)(v3 >> 2))
    return a2;
  v4 = a1 + (v3 >> 2);
  if (a3 < 0x101)
  {
    v6 = a3;
    v5 = v4;
  }
  else
  {
    v5 = a1 + (v3 >> 2);
    do
    {
      v6 = a3 >> 8;
      *(_WORD *)(v5 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v5 -= 2;
      a3 = v6;
    }
    while (v6 > 0x100);
  }
  v7 = (_BYTE *)(v5 - 1);
  do
  {
    *v7-- = a0123456789abcd_0[v6 & 0xF];
    v8 = v6 > 0xF;
    v6 >>= 4;
  }
  while (v8);
  return v4;
}

void std::__formatter_integer<char>::format[abi:ne180100]<__int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int128 v9;

  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
  {
    std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, (_QWORD *)*a4, v8, v7);
  }
  else
  {
    v9 = __PAIR128__(a3 ^ (unint64_t)(a3 >> 63), a2 ^ (a3 >> 63)) - __PAIR128__(a3 >> 63, a3 >> 63);
    std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v9, *((uint64_t *)&v9 + 1), (uint64_t)a4, v8);
  }
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,__int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char __src;

  if (__PAIR128__(-1, -257) >= __PAIR128__((unint64_t)(a1 >= 0x80) + a2 - 1, a1 - 128))
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_248CBAEC8(unint64_t a1, unint64_t a2, _QWORD **a3, unint64_t a4, unint64_t a5, char a6)
{
  char v7;
  _BYTE v8[3];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, &v7, (uint64_t)v8, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, _QWORD **a3, unint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, _BYTE *a9, signed int a10)
{
  char *v10;
  char v14;
  char v15;
  int v16;
  char *v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  char *v21;
  const std::locale::facet *v22;
  char *locale;
  _QWORD *v24;
  std::string::value_type *v25;
  char *v26;
  std::string::value_type v27;
  uint64_t v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  std::string::value_type *v31;
  int v32;
  BOOL v33;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 v37;
  int v38;
  unsigned __int8 v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  std::string __p;
  std::locale v46;
  uint64_t v47;
  unsigned __int8 v48;

  v10 = a7;
  v14 = a4;
  if ((a6 & 1) != 0)
  {
    v15 = 45;
LABEL_7:
    *a7 = v15;
    v17 = a7 + 1;
    goto LABEL_8;
  }
  v16 = (a4 >> 3) & 3;
  if (v16 == 2)
  {
    v15 = 43;
    goto LABEL_7;
  }
  v17 = a7;
  if (v16 == 3)
  {
    v15 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      v18 = *a9;
      if (*a9)
      {
        v19 = a9 + 1;
        do
        {
          *v17++ = v18;
          v20 = *v19++;
          v18 = v20;
        }
        while (v20);
      }
    }
  }
  v21 = (char *)std::__to_chars_integral[abi:ne180100]<unsigned __int128>(v17, a8, a1, a2, a10);
  if ((v14 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a3, &v46);
  v22 = std::locale::use_facet(&v46, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v46);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v22->__vftable[1].__on_zero_shared)(&v46, v22);
  if ((char)v48 < 0)
  {
    locale = (char *)v46.__locale_;
    if (!v47)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v48)
      goto LABEL_44;
    locale = (char *)&v46;
  }
  if (v21 - v17 <= *locale)
  {
    if ((v48 & 0x80) != 0)
    {
      locale = (char *)v46.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v36 = HIDWORD(a4);
    if ((v14 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a3, v10, v17 - v10);
      v37 = a4 & 0xF8 | 3;
      if (SHIDWORD(a4) >= (int)v17 - (int)v10)
        v38 = (_DWORD)v17 - (_DWORD)v10;
      else
        v38 = HIDWORD(a4);
      v36 = (HIDWORD(a4) - v38);
      v39 = 48;
      v10 = v17;
    }
    else
    {
      v39 = BYTE4(a5);
      v37 = a4;
    }
    v40 = *a3;
    v41 = a4 & 0xFFFFFF00 | (v36 << 32) | v37;
    v42 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v39 << 32);
    if ((a4 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21, (uint64_t)v40, v41, v42, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v10, v21 - v10, v40, v41, v42, v21 - v10);
  }
  v24 = *a3;
  memset(&__p, 0, sizeof(__p));
  if ((v48 & 0x80u) == 0)
    v25 = (std::string::value_type *)&v46;
  else
    v25 = (std::string::value_type *)v46.__locale_;
  if ((v48 & 0x80u) == 0)
    v26 = (char *)&v46 + v48;
  else
    v26 = (char *)v46.__locale_ + v47;
  v27 = *v25;
  v28 = v21 - v17 - *v25;
  if (v28 >= 1)
  {
    v29 = v26 - 1;
    do
    {
      std::string::push_back(&__p, v27);
      if (v25 == v29)
      {
        v27 = *v29;
        v25 = v29;
      }
      else
      {
        v30 = v25 + 1;
        v31 = v25 + 1;
        do
        {
          v32 = *v31++;
          v27 = v32;
          if (v32)
            v33 = 1;
          else
            v33 = v30 == v29;
          v30 = v31;
        }
        while (!v33);
        v25 = v31 - 1;
      }
      v28 -= v27;
    }
    while (v28 > 0);
  }
  std::string::push_back(&__p, v27 + v28);
  v34 = ((uint64_t (*)(const std::locale::facet *))v22->__vftable[1].~facet_0)(v22);
  v35 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v24, v10, v17, (int)v21, (uint64_t *)&__p, v34, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v46.__locale_);
  return v35;
}

void sub_248CBB2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

_WORD *std::__to_chars_integral[abi:ne180100]<unsigned __int128>(_BYTE *a1, uint64_t a2, unint64_t a3, unint64_t a4, signed int a5)
{
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;

  v5 = a4;
  v6 = a3;
  v7 = (_BYTE *)a2;
  HIDWORD(v9) = a5;
  LODWORD(v9) = a5 - 2;
  v8 = v9 >> 1;
  if (v8 != 4)
  {
    if (!v8)
      return (_WORD *)std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    if (v8 == 3)
      return (_WORD *)std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
    if (v8 != 7)
    {
      v18 = a2 - (_QWORD)a1;
      v19 = std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(a3, a4, a5);
      if (v18 >= v19)
      {
        v7 = &a1[v19];
        v20 = v7 - 1;
        do
        {
          v21 = __udivti3();
          v22 = __PAIR128__(v5, v6) >= a5;
          *v20-- = a0123456789abcd[(v6 - v21 * a5)];
          v6 = v21;
          v5 = v23;
        }
        while (v22);
      }
      return v7;
    }
    return (_WORD *)std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>((uint64_t)a1, a2, a3, a4);
  }
  v10 = a2 - (_QWORD)a1;
  if (a4)
  {
    if (v10 > 38)
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
    v11 = (1233 * (128 - __clz(a4))) >> 12;
    if (v10 >= v11 - (__PAIR128__(a4, a3) < std::__itoa::__pow10_128[v11]) + 1)
      return std::__itoa::__base_10_u128[abi:ne180100](a1, a3, a4);
  }
  else
  {
    if (v10 > 19)
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
    v13 = (1233 * (64 - __clz(a3 | 1))) >> 12;
    if (v10 >= v13 - (std::__itoa::__pow10_64[v13] > a3) + 1)
      return std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](a1, a3);
  }
  return v7;
}

uint64_t std::__to_chars_integral_width[abi:ne180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;

  if (__PAIR128__(a2, a1) < a3)
    return 1;
  v5 = a3 * a3;
  v6 = a3 * a3 * a3;
  v3 = 4;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v5)
      return (v3 - 2);
    if (__PAIR128__(a2, a1) < v6)
      break;
    if (__PAIR128__(a2, a1) < v5 * v5)
      return v3;
    a1 = __udivti3();
    v3 = (v3 + 4);
    if (__PAIR128__(a2, a1) < a3)
      return (v3 - 3);
  }
  return (v3 - 1);
}

_WORD *std::__itoa::__base_10_u128[abi:ne180100](_BYTE *a1, unint64_t a2, unint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  unint64_t v5;
  _WORD *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  _WORD *v10;
  _WORD *v11;
  unint64_t v12;
  unsigned int v13;

  v3 = a1;
  if (__PAIR128__(a3, a2) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
  {
    *a1 = __udivti3() | 0x30;
    v7 = __udivti3();
    *((_BYTE *)v3 + 1) = v7 / 0x5F5E100 + 48;
    v3[1] = std::__itoa::__digits_base_10[v7 % 0x5F5E100 / 0xF4240];
    v8 = v7 % 0x5F5E100 % 0xF4240;
    v3[2] = std::__itoa::__digits_base_10[v8 / 0x2710uLL];
    v8 %= 0x2710u;
    v3[3] = std::__itoa::__digits_base_10[(unsigned __int16)v8 / 0x64u];
    v3[4] = std::__itoa::__digits_base_10[(unsigned __int16)v8 % 0x64u];
    v9 = __udivti3();
    v10 = v3 + 5;
LABEL_8:
    v6 = std::__itoa::__append10[abi:ne180100]<unsigned long long>(v10, v9);
    goto LABEL_9;
  }
  v4 = __udivti3();
  v5 = v4;
  if (HIDWORD(v4))
  {
    if (v4 > 0x2540BE3FFLL)
    {
      v3 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4 / 0x2540BE400);
      v5 %= 0x2540BE400uLL;
    }
    v10 = v3;
    v9 = v5;
    goto LABEL_8;
  }
  v6 = std::__itoa::__base_10_u32[abi:ne180100](v3, v4);
LABEL_9:
  v11 = v6;
  v12 = __umodti3();
  *(_BYTE *)v11 = v12 / 0x2540BE400 / 0x5F5E100 + 48;
  v13 = v12 / 0x2540BE400 % 0x5F5E100;
  *(_WORD *)((char *)v11 + 1) = std::__itoa::__digits_base_10[v13 / 0xF4240];
  v13 %= 0xF4240u;
  *(_WORD *)((char *)v11 + 3) = std::__itoa::__digits_base_10[v13 / 0x2710uLL];
  v13 %= 0x2710u;
  *(_WORD *)((char *)v11 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v13 / 0x64u];
  *(_WORD *)((char *)v11 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v13 % 0x64u];
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>((_WORD *)((char *)v11 + 9), v12 % 0x2540BE400);
}

uint64_t std::__itoa::__integral<2u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  BOOL v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  __int128 v15;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = 128 - v4;
  if (a2 - a1 < v6)
    return a2;
  v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    v9 = a3;
    v12 = a4;
    v8 = v7;
  }
  else
  {
    v8 = a1 + v6;
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 4;
      v11 = a3 <= 0x10F;
      v12 = a4 >> 4;
      *(_DWORD *)(v8 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v8 -= 4;
      a3 = v9;
      a4 >>= 4;
    }
    while (!v11);
  }
  v13 = (_BYTE *)(v8 - 1);
  do
  {
    v14 = v9 & 1;
    v11 = v9 <= 1;
    *((_QWORD *)&v15 + 1) = v12;
    *(_QWORD *)&v15 = v9;
    v9 = v15 >> 1;
    v12 >>= 1;
    *v13-- = a01[v14];
  }
  while (!v11);
  return v7;
}

uint64_t std::__itoa::__integral<8u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  __int128 v14;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6)
    return a2;
  v7 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    v9 = a3;
    v8 = v7;
  }
  else
  {
    v8 = a1 + v6;
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 6;
      a4 >>= 6;
      *(_WORD *)(v8 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x40);
  }
  v11 = (_BYTE *)(v8 - 1);
  do
  {
    v12 = v9 & 7;
    v13 = v9 <= 7;
    *((_QWORD *)&v14 + 1) = a4;
    *(_QWORD *)&v14 = v9;
    v9 = v14 >> 3;
    a4 >>= 3;
    *v11-- = a01234567[v12];
  }
  while (!v13);
  return v7;
}

uint64_t std::__itoa::__integral<16u>::__to_chars[abi:ne180100]<unsigned __int128>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  __int128 v14;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = 131 - v4;
  if (a2 - a1 < (uint64_t)(v6 >> 2))
    return a2;
  v7 = a1 + (v6 >> 2);
  if (__PAIR128__(a4, a3) < 0x101)
  {
    v9 = a3;
    v8 = v7;
  }
  else
  {
    v8 = a1 + (v6 >> 2);
    do
    {
      *((_QWORD *)&v10 + 1) = a4;
      *(_QWORD *)&v10 = a3;
      v9 = v10 >> 8;
      a4 >>= 8;
      *(_WORD *)(v8 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v8 -= 2;
      a3 = v9;
    }
    while (v9 > 0x100);
  }
  v11 = (_BYTE *)(v8 - 1);
  do
  {
    v12 = v9 & 0xF;
    v13 = v9 <= 0xF;
    *((_QWORD *)&v14 + 1) = a4;
    *(_QWORD *)&v14 = v9;
    v9 = v14 >> 4;
    a4 >>= 4;
    *v11-- = a0123456789abcd_0[v12];
  }
  while (!v13);
  return v7;
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned int,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v6);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned int,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned long long,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v6 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if ((v6 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, (_QWORD *)*a3, v6, v5);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v6);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned long long,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char __src;

  if (a1 >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a2, a3, a4, 1);
}

void std::__formatter_integer<char>::format[abi:ne180100]<unsigned __int128,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a4);
  if ((v8 & 0xFF00) == 0xA00)
    std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, a3, (_QWORD *)*a4, v8, v7);
  else
    std::__formatter::__format_integer[abi:ne180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, a3, (uint64_t)a4, v8);
}

_QWORD *std::__formatter::__format_char[abi:ne180100]<char,unsigned __int128,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char __src;

  if (__PAIR128__(a2, a1) >= 0x80)
    std::__throw_format_error[abi:ne180100]("Integral value outside the range of the char type");
  __src = a1;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, 1uLL, a3, a4, a5, 1);
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<float,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, float a4)
{
  int v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  uint64_t *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v31;
  std::locale v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  int v38;
  unint64_t v39;
  void *__p;
  _QWORD v41[33];

  v41[32] = *MEMORY[0x24BDAC8D0];
  v7 = LODWORD(a4) >> 31;
  if ((LODWORD(a4) & 0x7FFFFFFFu) >= 0x7F800000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 149;
  else
    v9 = a3;
  v37 = v9;
  v38 = 0;
  if (v9 >= 150)
  {
    v37 = 149;
    v38 = v9 - 149;
    v39 = 194;
LABEL_9:
    v10 = v41;
    goto LABEL_10;
  }
  v39 = v9 + 45;
  if ((v9 + 45) < 0x101)
    goto LABEL_9;
  v10 = operator new(v9 + 45);
LABEL_10:
  __p = v10;
  std::__formatter::__format_buffer[abi:ne180100]<float,float>((uint64_t)&v37, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v11 = v34;
    if (v34 == v36)
    {
      v36 = v34 + 1;
      *v34 = 46;
      v12 = v36 - 1;
      if (v35 != v36 - 1)
      {
        if (v35 + 1 == v12)
        {
          v14 = *v35;
          *v35 = *v12;
          *v12 = v14;
        }
        else
        {
          v13 = *(v36 - 1);
          memmove(v35 + 1, v35, v36 - 1 - v35);
          *v35 = v13;
        }
      }
      v11 = v35;
      v34 = v35++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v15 = 1;
      else
        v15 = a3;
      if ((a3 & 0x80000000) != 0)
        v15 = 6;
      if (v35 == v36)
        v16 = (_DWORD)v33 - (_DWORD)v11;
      else
        v16 = -1;
      v17 = v16 + v15;
      v18 = &v35[~(unint64_t)v11];
      if ((uint64_t)v18 < v17)
        v38 += v17 - (_DWORD)v18;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v25 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v32);
    v26 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(v25, (uint64_t)&v37, &v33, &v32, a2, a3);
    std::locale::~locale(&v32);
  }
  else
  {
    v19 = (char *)__p;
    v20 = v36 - (_BYTE *)__p;
    v21 = v38;
    if (v36 - (_BYTE *)__p + v38 >= a2 >> 32)
    {
      if (!v38 || v35 == v36)
      {
        v26 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v26, v21, 48);
      }
      else
      {
        v26 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v35 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v26, v21, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v26, v35, v36 - v35);
      }
    }
    else
    {
      v22 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v33)
        {
          v31 = v22;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v31, (char *)__p);
          ++v19;
        }
        v23 = a2 & 0xF8 | 3;
        v24 = 48;
      }
      else
      {
        v24 = BYTE4(a3);
        v23 = a2;
      }
      v27 = a2 & 0xFFFFFFFFFFFFFF00 | v23;
      v28 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v24 << 32);
      if ((_DWORD)v21)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v19, (uint64_t)v36, (uint64_t)v22, v27);
      else
        v29 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19, v36 - v19, v22, v27, v28, v20);
      v26 = v29;
    }
  }
  if (v39 >= 0x101)
    operator delete(__p);
  return v26;
}

void sub_248CBC08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x101)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  char v5;
  int v6;
  char *p_src;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 v11;
  char __src;
  _BYTE v14[3];

  if ((a4 & 1) != 0)
  {
    v5 = 45;
  }
  else
  {
    v6 = (a2 >> 3) & 3;
    if (v6 == 2)
    {
      v5 = 43;
    }
    else
    {
      if (v6 != 3)
      {
        p_src = &__src;
        goto LABEL_8;
      }
      v5 = 32;
    }
  }
  p_src = v14;
  __src = v5;
LABEL_8:
  if (BYTE1(a2) <= 0x10u && ((1 << SBYTE1(a2)) & 0x15000) != 0)
  {
    v8 = 6;
  }
  else
  {
    v8 = 6;
    if (BYTE1(a2) != 18)
      v8 = 0;
  }
  v9 = 3;
  if (!a5)
    v9 = 0;
  v10 = &aInfnaninfnan[v8 + v9];
  *(_WORD *)p_src = *(_WORD *)v10;
  p_src[2] = v10[2];
  if ((a2 & 7) == 4)
    v11 = a2 & 0xF8 | 3;
  else
    v11 = a2;
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(&__src, p_src - &__src + 3, a1, a2 & 0xFFFFFFFFFFFFFF00 | v11, a3, p_src - &__src + 3);
}

void std::__formatter::__format_buffer[abi:ne180100]<float,float>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_248CBC22C(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x2495AA7D4](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_248CBC2D8(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_248CBC2F4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>((uint64_t)a1, *a1, a3, v3);
}

_QWORD *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,float,char>(_QWORD *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  const std::locale::facet *v11;
  char *v12;
  char *v13;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v16;
  char *v17;
  std::string::value_type v18;
  uint64_t v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  std::string::size_type v33;
  char *v34;
  std::string *v35;
  char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  int64_t __len;
  std::string v49;
  std::string __p;

  v11 = std::locale::use_facet(this, MEMORY[0x24BEDB588]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  v12 = a3[2];
  v13 = *a3;
  if (v12 >= a3[1])
    v12 = a3[1];
  __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_29;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_29;
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    size = __p.__r_.__value_.__l.__size_;
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v49, 0, sizeof(v49));
  v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v18 = p_p->__r_.__value_.__s.__data_[0];
  v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    v20 = v17 - 1;
    do
    {
      std::string::push_back(&v49, v18);
      if (p_p == (std::string *)v20)
      {
        v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        v21 = &p_p->__r_.__value_.__s.__data_[1];
        v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          v23 = *v22++;
          v18 = v23;
          if (v23)
            v24 = 1;
          else
            v24 = v21 == v20;
          v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v49, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v49;
LABEL_29:
  v25 = HIDWORD(a6);
  v26 = *(char **)(a2 + 16);
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = a5 & 7;
  if (a5 >> 32 > (uint64_t)(a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0)))
  {
    if (v28 == 4)
      v29 = 3;
    else
      v29 = a5 & 7;
    __asm { BR              X11 }
  }
  if (v28 == 4 && v13 != v26)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v26);
  }
  v30 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v25);
  v31 = v30;
  if (v28 != 4)
  {
    v32 = *(char **)(a2 + 16);
    if (v13 != v32)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v32);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v34 = &__p.__r_.__value_.__s.__data_[1];
      v35 = &__p;
      goto LABEL_47;
    }
LABEL_51:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, __len);
    goto LABEL_52;
  }
  v33 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_51;
  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v34 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_47:
  v36 = (char *)v35 + v33;
  v37 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    v38 = v36 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, *(v36 - 1));
    if (v36 == v34)
      break;
    v13 += *(v36 - 1);
    v39 = *v31;
    v40 = v31[2];
    v31[2] = v40 + 1;
    *(_BYTE *)(v39 + v40) = v37;
    --v36;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
      v36 = v38;
    }
  }
LABEL_52:
  v41 = a3[1];
  if (v41 != a3[3])
  {
    v42 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    v43 = *v31;
    v44 = v31[2];
    v31[2] = v44 + 1;
    *(_BYTE *)(v43 + v44) = v42;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v31, *(int *)(a2 + 4), 48);
    v41 = a3[3];
  }
  v45 = a3[2];
  if (v45 != v41)
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v45, v41 - v45);
  v46 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v31, 0, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v46;
}

void sub_248CBC734()
{
  JUMPOUT(0x248CBC548);
}

void sub_248CBC740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_248CBC7FC(int a1, int a2, _QWORD *a3, int a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;

  v23 = HIDWORD(a5);
  v24 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a3, v19, SHIDWORD(a5));
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v24, v22, v18 - v22);
  std::__format::__output_buffer<char>::__fill[abi:ne180100](v24, v20, 48);
  std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v24, v18, v21 - (_QWORD)v18);
  return std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v24, 0, v23);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x2495AA7D4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<float,float>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x2495AA7D4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 5), 112, 3uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<float,float>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<float,float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x2495AA7D4](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v32;
  std::locale v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  void *__p;
  _QWORD v42[129];

  v42[128] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)&a4 >> 63;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 1074;
  else
    v9 = a3;
  v38 = v9;
  v39 = 0;
  if (v9 < 1075)
  {
    v10 = v9 + 316;
    v40 = v10;
    if ((v9 + 316) < 0x401)
    {
      v11 = v42;
      goto LABEL_10;
    }
  }
  else
  {
    v38 = 1074;
    v39 = v9 - 1074;
    v10 = 1390;
    v40 = 1390;
  }
  v11 = operator new(v10);
LABEL_10:
  __p = v11;
  std::__formatter::__format_buffer[abi:ne180100]<double,double>((uint64_t)&v38, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v12 = v35;
    if (v35 == v37)
    {
      v37 = v35 + 1;
      *v35 = 46;
      v13 = v37 - 1;
      if (v36 != v37 - 1)
      {
        if (v36 + 1 == v13)
        {
          v15 = *v36;
          *v36 = *v13;
          *v13 = v15;
        }
        else
        {
          v14 = *(v37 - 1);
          memmove(v36 + 1, v36, v37 - 1 - v36);
          *v36 = v14;
        }
      }
      v12 = v36;
      v35 = v36++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v16 = 1;
      else
        v16 = a3;
      if ((a3 & 0x80000000) != 0)
        v16 = 6;
      if (v36 == v37)
        v17 = (_DWORD)v34 - (_DWORD)v12;
      else
        v17 = -1;
      v18 = v17 + v16;
      v19 = &v36[~(unint64_t)v12];
      if ((uint64_t)v19 < v18)
        v39 += v18 - (_DWORD)v19;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v26 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v33);
    v27 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v26, (uint64_t)&v38, &v34, &v33, a2, a3);
    std::locale::~locale(&v33);
  }
  else
  {
    v20 = (char *)__p;
    v21 = v37 - (_BYTE *)__p;
    v22 = v39;
    if (v37 - (_BYTE *)__p + v39 >= a2 >> 32)
    {
      if (!v39 || v36 == v37)
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v37 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
      }
      else
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v27, v36, v37 - v36);
      }
    }
    else
    {
      v23 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v34)
        {
          v32 = v23;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v32, (char *)__p);
          ++v20;
        }
        v24 = a2 & 0xF8 | 3;
        v25 = 48;
      }
      else
      {
        v25 = BYTE4(a3);
        v24 = a2;
      }
      v28 = a2 & 0xFFFFFFFFFFFFFF00 | v24;
      v29 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v25 << 32);
      if ((_DWORD)v22)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v20, (uint64_t)v37, (uint64_t)v23, v28);
      else
        v30 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, v37 - v20, v23, v28, v29, v21);
      v27 = v30;
    }
  }
  if (v40 >= 0x401)
    operator delete(__p);
  return v27;
}

void sub_248CBCF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__format_buffer[abi:ne180100]<double,double>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_248CBCFE0(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x2495AA78C](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_248CBD08C(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_248CBD0A8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>((uint64_t)a1, *a1, a3, v3);
}

_QWORD *std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(_QWORD *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  const std::locale::facet *v11;
  char *v12;
  char *v13;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v16;
  char *v17;
  std::string::value_type v18;
  uint64_t v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  char *v26;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  std::string::size_type v33;
  char *v34;
  std::string *v35;
  char *v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  int64_t __len;
  std::string v49;
  std::string __p;

  v11 = std::locale::use_facet(this, MEMORY[0x24BEDB588]);
  ((void (*)(std::string *__return_ptr))v11->__vftable[1].__on_zero_shared)(&__p);
  v12 = a3[2];
  v13 = *a3;
  if (v12 >= a3[1])
    v12 = a3[1];
  __len = v12 - v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_29;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__len <= *__p.__r_.__value_.__l.__data_)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
      goto LABEL_29;
    }
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_29;
    if (__len <= __p.__r_.__value_.__s.__data_[0])
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_29;
    }
    p_p = &__p;
    size = __p.__r_.__value_.__l.__size_;
    v16 = __p.__r_.__value_.__r.__words[0];
  }
  memset(&v49, 0, sizeof(v49));
  v17 = (char *)(v16 + size);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v18 = p_p->__r_.__value_.__s.__data_[0];
  v19 = __len - p_p->__r_.__value_.__s.__data_[0];
  if (v19 >= 1)
  {
    v20 = v17 - 1;
    do
    {
      std::string::push_back(&v49, v18);
      if (p_p == (std::string *)v20)
      {
        v18 = *v20;
        p_p = (std::string *)v20;
      }
      else
      {
        v21 = &p_p->__r_.__value_.__s.__data_[1];
        v22 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          v23 = *v22++;
          v18 = v23;
          if (v23)
            v24 = 1;
          else
            v24 = v21 == v20;
          v21 = v22;
        }
        while (!v24);
        p_p = (std::string *)(v22 - 1);
      }
      v19 -= v18;
    }
    while (v19 > 0);
  }
  std::string::push_back(&v49, v18 + v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v49;
LABEL_29:
  v25 = HIDWORD(a6);
  v26 = *(char **)(a2 + 16);
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = a5 & 7;
  if (a5 >> 32 > (uint64_t)(a3[3] - v26 + *(int *)(a2 + 4) + v27 - (v27 != 0)))
  {
    if (v28 == 4)
      v29 = 3;
    else
      v29 = a5 & 7;
    __asm { BR              X11 }
  }
  if (v28 == 4 && v13 != v26)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v26);
  }
  v30 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v25);
  v31 = v30;
  if (v28 != 4)
  {
    v32 = *(char **)(a2 + 16);
    if (v13 != v32)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100]((uint64_t **)&v49, v32);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v34 = &__p.__r_.__value_.__s.__data_[1];
      v35 = &__p;
      goto LABEL_47;
    }
LABEL_51:
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, __len);
    goto LABEL_52;
  }
  v33 = __p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_51;
  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v34 = (char *)(__p.__r_.__value_.__r.__words[0] + 1);
LABEL_47:
  v36 = (char *)v35 + v33;
  v37 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
  while (1)
  {
    v38 = v36 - 1;
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v13, *(v36 - 1));
    if (v36 == v34)
      break;
    v13 += *(v36 - 1);
    v39 = *v31;
    v40 = v31[2];
    v31[2] = v40 + 1;
    *(_BYTE *)(v39 + v40) = v37;
    --v36;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
      v36 = v38;
    }
  }
LABEL_52:
  v41 = a3[1];
  if (v41 != a3[3])
  {
    v42 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet)(v11);
    v43 = *v31;
    v44 = v31[2];
    v31[2] = v44 + 1;
    *(_BYTE *)(v43 + v44) = v42;
    if (v31[2] == v31[1])
    {
      ((void (*)(_QWORD))v31[3])(*v31);
      v31[2] = 0;
    }
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, a3[1] + 1, a3[2] - (a3[1] + 1));
    std::__format::__output_buffer<char>::__fill[abi:ne180100](v31, *(int *)(a2 + 4), 48);
    v41 = a3[3];
  }
  v45 = a3[2];
  if (v45 != v41)
    std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v31, v45, v41 - v45);
  v46 = std::__formatter::__fill[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v31, 0, v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v46;
}

void sub_248CBD4E8()
{
  JUMPOUT(0x248CBD2FCLL);
}

void sub_248CBD4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x2495AA78C](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<double,double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x2495AA78C](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 6), 112, 4uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,double>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x2495AA78C](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

_QWORD *std::__formatter::__format_floating_point[abi:ne180100]<long double,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t **a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v32;
  std::locale v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  void *__p;
  _QWORD v42[129];

  v42[128] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)&a4 >> 63;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return std::__formatter::__format_floating_point_non_finite[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>(*a1, a2, a3, a4 < 0.0, 0);
  v8 = (unint64_t)a2 >> 8;
  if ((_DWORD)a3 == -1)
    v9 = 1074;
  else
    v9 = a3;
  v38 = v9;
  v39 = 0;
  if (v9 < 1075)
  {
    v10 = v9 + 316;
    v40 = v10;
    if ((v9 + 316) < 0x401)
    {
      v11 = v42;
      goto LABEL_10;
    }
  }
  else
  {
    v38 = 1074;
    v39 = v9 - 1074;
    v10 = 1390;
    v40 = 1390;
  }
  v11 = operator new(v10);
LABEL_10:
  __p = v11;
  std::__formatter::__format_buffer[abi:ne180100]<double,long double>((uint64_t)&v38, v7, (a3 & 0x80000000) == 0, (a2 >> 3) & 3, v8);
  if ((a2 & 0x20) != 0)
  {
    v12 = v35;
    if (v35 == v37)
    {
      v37 = v35 + 1;
      *v35 = 46;
      v13 = v37 - 1;
      if (v36 != v37 - 1)
      {
        if (v36 + 1 == v13)
        {
          v15 = *v36;
          *v36 = *v13;
          *v13 = v15;
        }
        else
        {
          v14 = *(v37 - 1);
          memmove(v36 + 1, v36, v37 - 1 - v36);
          *v36 = v14;
        }
      }
      v12 = v36;
      v35 = v36++;
    }
    if ((BYTE1(a2) - 17) <= 1u)
    {
      if (a3 <= 1)
        v16 = 1;
      else
        v16 = a3;
      if ((a3 & 0x80000000) != 0)
        v16 = 6;
      if (v36 == v37)
        v17 = (_DWORD)v34 - (_DWORD)v12;
      else
        v17 = -1;
      v18 = v17 + v16;
      v19 = &v36[~(unint64_t)v12];
      if ((uint64_t)v19 < v18)
        v39 += v18 - (_DWORD)v19;
    }
  }
  if ((a2 & 0x40) != 0)
  {
    v26 = *a1;
    std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a1, &v33);
    v27 = std::__formatter::__format_locale_specific_form[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(v26, (uint64_t)&v38, &v34, &v33, a2, a3);
    std::locale::~locale(&v33);
  }
  else
  {
    v20 = (char *)__p;
    v21 = v37 - (_BYTE *)__p;
    v22 = v39;
    if (v37 - (_BYTE *)__p + v39 >= a2 >> 32)
    {
      if (!v39 || v36 == v37)
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v37 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
      }
      else
      {
        v27 = *a1;
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a1, (char *)__p, v36 - (_BYTE *)__p);
        std::__format::__output_buffer<char>::__fill[abi:ne180100](v27, v22, 48);
        std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(v27, v36, v37 - v36);
      }
    }
    else
    {
      v23 = *a1;
      if ((a2 & 7) == 4)
      {
        if (__p != v34)
        {
          v32 = v23;
          std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v32, (char *)__p);
          ++v20;
        }
        v24 = a2 & 0xF8 | 3;
        v25 = 48;
      }
      else
      {
        v25 = BYTE4(a3);
        v24 = a2;
      }
      v28 = a2 & 0xFFFFFFFFFFFFFF00 | v24;
      v29 = a3 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v25 << 32);
      if ((_DWORD)v22)
        std::__formatter::__write_using_trailing_zeros[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)v20, (uint64_t)v37, (uint64_t)v23, v28);
      else
        v30 = std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, v37 - v20, v23, v28, v29, v21);
      v27 = v30;
    }
  }
  if (v40 >= 0x401)
    operator delete(__p);
  return v27;
}

void sub_248CBDC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, void *__p)
{
  if (a16 >= 0x401)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__formatter::__format_buffer[abi:ne180100]<double,long double>(uint64_t a1, char a2, uint64_t a3, int a4, int a5)
{
  char v5;

  if ((a2 & 1) != 0)
  {
    v5 = 45;
  }
  else if (a4 == 2)
  {
    v5 = 43;
  }
  else
  {
    if (a4 != 3)
      goto LABEL_8;
    v5 = 32;
  }
  **(_BYTE **)(a1 + 16) = v5;
LABEL_8:
  __asm { BR              X11 }
}

uint64_t sub_248CBDCC8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v4 = *a1;
  *v3 = a3;
  result = MEMORY[0x2495AA7B0](a3, *((_QWORD *)a1 + 2) + *((_QWORD *)a1 + 1), 2, v4);
  v3[2] = result;
  v3[3] = result;
  if ((_DWORD)v4)
    v6 = v4 + 1;
  else
    v6 = 0;
  v3[1] = result - v6;
  return result;
}

uint64_t sub_248CBDD74(int *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  int v5;

  if (v3)
    v5 = *a1;
  else
    v5 = -1;
  return std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>((uint64_t)a1, v5, a3, v4);
}

uint64_t sub_248CBDD90(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>((uint64_t)a1, *a1, a3, v3);
}

_BYTE *std::__formatter::__format_buffer_general_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  *(_DWORD *)(a1 + 4) = 0;
  *a4 = a3;
  v6 = MEMORY[0x2495AA7B0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 3, a2);
  a4[3] = v6;
  result = (_BYTE *)(a3 + 1);
  if (a3 + 1 != v6)
  {
    v8 = v6 - (_QWORD)result;
    if (v6 - (uint64_t)result < 4)
    {
LABEL_8:
      a4[2] = v6;
    }
    else
    {
      v9 = 6;
      if (v8 < 6)
        v9 = v6 - (_QWORD)result;
      v10 = -v9;
      while (*(_BYTE *)(v6 + v10) != 101)
      {
        if (++v10 == -3)
          goto LABEL_8;
      }
      a4[2] = v6 + v10;
      if (v10)
      {
        if (*result == 46)
          v11 = (_BYTE *)(a3 + 1);
        else
          v11 = (_BYTE *)v6;
        goto LABEL_12;
      }
    }
    result = memchr(result, 46, v8);
    if (result)
      v11 = result;
    else
      v11 = (_BYTE *)v6;
LABEL_12:
    a4[1] = v11;
    return result;
  }
  a4[1] = v6;
  a4[2] = v6;
  return result;
}

_BYTE *std::__formatter::__format_buffer_default[abi:ne180100]<double,long double>@<X0>(std::__1 *this@<X1>, uint64_t a2@<X0>, char *a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;

  *a4 = this;
  v7 = std::to_chars(this, (char *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 8)), a3, a5);
  v8 = (_BYTE *)v7;
  a4[3] = v7;
  v9 = v7 - (_QWORD)this;
  v10 = (_BYTE *)v7;
  if (v7 - (uint64_t)this >= 4)
  {
    if (v9 >= 6)
      v9 = 6;
    v11 = -(uint64_t)v9;
    while (*(_BYTE *)(v7 + v11) != 101)
    {
      if (++v11 == -3)
      {
        v10 = (_BYTE *)v7;
        goto LABEL_9;
      }
    }
    v10 = (_BYTE *)(v7 + v11);
  }
LABEL_9:
  a4[2] = v10;
  result = memchr((char *)this + 1, 46, v10 - ((char *)this + 1));
  if (result)
    v13 = result;
  else
    v13 = v10;
  if (v13 == v10)
    v13 = v8;
  a4[1] = v13;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;

  *a4 = a3;
  if (a2 == -1)
    result = std::to_chars();
  else
    result = MEMORY[0x2495AA7B0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 4);
  a4[3] = result;
  v8 = *(unsigned __int8 *)(a3 + 1);
  v7 = a3 + 1;
  if (v8 == 46)
  {
    v9 = result - 2;
    v10 = memchr((void *)(result - 6), 112, 4uLL);
    result = v7;
    if (v10)
      v7 = (uint64_t)v10;
    else
      v7 = v9;
  }
  a4[1] = result;
  a4[2] = v7;
  return result;
}

uint64_t std::__formatter::__format_buffer_hexadecimal_upper_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  int v8;

  result = std::__formatter::__format_buffer_hexadecimal_lower_case[abi:ne180100]<double,long double>(a1, a2, a3, a4);
  v6 = (_BYTE *)*a4;
  v7 = (_BYTE *)a4[2];
  if ((_BYTE *)*a4 != v7)
  {
    do
    {
      v8 = (char)*v6;
      if ((v8 - 97) < 6)
        LOBYTE(v8) = v8 - 32;
      *v6++ = v8;
    }
    while (v6 != v7);
    v6 = (_BYTE *)a4[2];
  }
  *v6 = 80;
  return result;
}

uint64_t std::__formatter::__format_buffer_scientific_lower_case[abi:ne180100]<double,long double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a4 = a3;
  result = MEMORY[0x2495AA7B0](a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8), 1, a2);
  a4[3] = result;
  v7 = a3 + 1;
  if (*(_BYTE *)(a3 + 1) == 46)
  {
    a4[1] = v7;
    v8 = result - a3 - 2;
    v7 = result;
    if (v8 >= 4)
    {
      v9 = 6;
      if ((unint64_t)v8 < 6)
        v9 = result - a3 - 2;
      v10 = -v9;
      while (*(_BYTE *)(result + v10) != 101)
      {
        if (++v10 == -3)
        {
          v7 = result;
          goto LABEL_11;
        }
      }
      v7 = result + v10;
    }
  }
  else
  {
    a4[1] = result;
  }
LABEL_11:
  a4[2] = v7;
  return result;
}

unsigned __int8 *std::__formatter_string<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *result;
  unsigned int v4;

  result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x128u);
  v4 = a1[1];
  if (v4 >= 2 && v4 != 19)
    std::__throw_format_error[abi:ne180100]("The type option contains an invalid value for a string formatting argument");
  return result;
}

uint64_t *std::formatter<char const*,char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, char *a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t *v14;

  v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  if (SHIDWORD(v5) > 0 || (int)v6 >= 0)
  {
    v8 = v5;
    v9 = v6;
    v10 = strlen(a2);
    return std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a2, v10, *a3, v8, v9);
  }
  else
  {
    v11 = *a3;
    if (*a2)
    {
      do
      {
        v14 = v11;
        std::back_insert_iterator<std::__format::__output_buffer<char>>::operator=[abi:ne180100](&v14, a2);
      }
      while (*++a2);
    }
  }
  return v11;
}

_QWORD *std::__formatter::__write_string[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;

  if ((a5 & 0x80000000) != 0)
    return std::__formatter::__write_string_no_precision[abi:ne180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
  v9 = std::__format_spec::__estimate_column_width[abi:ne180100]<char,char const*>((unsigned __int8 *)__src, a2, a5, 0);
  return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, v10 - (_QWORD)__src, a3, a4, a5, v9);
}

unsigned __int8 *std::__formatter_pointer<char>::parse[abi:ne180100]<std::basic_format_parse_context<char>>(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *result;
  int v4;

  result = std::__format_spec::__parser<char>::__parse[abi:ne180100]<std::basic_format_parse_context<char>>(a1, a2, 0x124u);
  v4 = a1[1];
  if ((v4 - 8) >= 2 && v4 != 0)
    std::__format_spec::__throw_invalid_type_format_error[abi:ne180100]("a pointer");
  return result;
}

void std::__formatter_pointer<char>::format[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, uint64_t a2, _QWORD *a3)
{
  __int16 v5;
  __int16 v6;

  v5 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a3);
  v6 = 1536;
  if ((v5 & 0xFF00) == 0x900)
    v6 = 1792;
  std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a2, (uint64_t)a3, v5 | v6 | 0x20);
}

void std::__formatter::__format_integer[abi:ne180100]<unsigned long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

_QWORD *sub_248CBE2FC(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  _BYTE v7[6];

  return std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)v7, 0, 10);
}

_QWORD *std::__formatter::__format_integer[abi:ne180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, _QWORD **a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, signed int a9)
{
  char *v9;
  char v13;
  char v14;
  int v15;
  _WORD *v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  const std::locale::facet *v21;
  char *locale;
  _QWORD *v23;
  std::string::value_type *v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int v31;
  BOOL v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  std::string __p;
  std::locale v45;
  uint64_t v46;
  unsigned __int8 v47;

  v9 = a6;
  v13 = a3;
  if ((a5 & 1) != 0)
  {
    v14 = 45;
LABEL_7:
    *a6 = v14;
    v16 = a6 + 1;
    goto LABEL_8;
  }
  v15 = (a3 >> 3) & 3;
  if (v15 == 2)
  {
    v14 = 43;
    goto LABEL_7;
  }
  v16 = a6;
  if (v15 == 3)
  {
    v14 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v17 = *a8;
      if (*a8)
      {
        v18 = a8 + 1;
        do
        {
          *(_BYTE *)v16 = v17;
          v16 = (_WORD *)((char *)v16 + 1);
          v19 = *v18++;
          v17 = v19;
        }
        while (v19);
      }
    }
  }
  v20 = std::__to_chars_integral[abi:ne180100]<unsigned long long>(v16, a7, a1, a9);
  if ((v13 & 0x40) == 0)
    goto LABEL_44;
  std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>::locale[abi:ne180100]((uint64_t)a2, &v45);
  v21 = std::locale::use_facet(&v45, MEMORY[0x24BEDB588]);
  std::locale::~locale(&v45);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v45, v21);
  if ((char)v47 < 0)
  {
    locale = (char *)v45.__locale_;
    if (!v46)
    {
LABEL_43:
      operator delete(locale);
      goto LABEL_44;
    }
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    locale = (char *)&v45;
  }
  if (v20 - (char *)v16 <= *locale)
  {
    if ((v47 & 0x80) != 0)
    {
      locale = (char *)v45.__locale_;
      goto LABEL_43;
    }
LABEL_44:
    v35 = HIDWORD(a3);
    if ((v13 & 7) == 4)
    {
      std::__format::__output_buffer<char>::__copy[abi:ne180100]<char>(*a2, v9, (char *)v16 - v9);
      v36 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v16 - (int)v9)
        v37 = (_DWORD)v16 - (_DWORD)v9;
      else
        v37 = HIDWORD(a3);
      v35 = (HIDWORD(a3) - v37);
      v38 = 48;
      v9 = (char *)v16;
    }
    else
    {
      v38 = BYTE4(a4);
      v36 = a3;
    }
    v39 = *a2;
    v40 = a3 & 0xFFFFFF00 | (v35 << 32) | v36;
    v41 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v38 << 32);
    if ((a3 & 0xFF00) == 0x700)
      return (_QWORD *)std::__formatter::__write_transformed[abi:ne180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20, (uint64_t)v39, v40, v41, (uint64_t (*)(_QWORD))std::__formatter::__hex_to_upper[abi:ne180100]);
    else
      return std::__formatter::__write[abi:ne180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v9, v20 - v9, v39, v40, v41, v20 - v9);
  }
  v23 = *a2;
  memset(&__p, 0, sizeof(__p));
  if ((v47 & 0x80u) == 0)
    v24 = (std::string::value_type *)&v45;
  else
    v24 = (std::string::value_type *)v45.__locale_;
  if ((v47 & 0x80u) == 0)
    v25 = (char *)&v45 + v47;
  else
    v25 = (char *)v45.__locale_ + v46;
  v26 = *v24;
  v27 = v20 - (char *)v16 - *v24;
  if (v27 >= 1)
  {
    v28 = v25 - 1;
    do
    {
      std::string::push_back(&__p, v26);
      if (v24 == v28)
      {
        v26 = *v28;
        v24 = v28;
      }
      else
      {
        v29 = v24 + 1;
        v30 = v24 + 1;
        do
        {
          v31 = *v30++;
          v26 = v31;
          if (v31)
            v32 = 1;
          else
            v32 = v29 == v28;
          v29 = v30;
        }
        while (!v32);
        v24 = v30 - 1;
      }
      v27 -= v26;
    }
    while (v27 > 0);
  }
  std::string::push_back(&__p, v26 + v27);
  v33 = ((uint64_t (*)(const std::locale::facet *))v21->__vftable[1].~facet_0)(v21);
  v34 = std::__formatter::__write_using_decimal_separators[abi:ne180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v23, v9, (char *)v16, (int)v20, (uint64_t *)&__p, v33, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v45.__locale_);
  return v34;
}

void sub_248CBE6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_248CBE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_248CBE8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::unordered_map<E5RT::ComponentDataType,std::string>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__emplace_unique_key_args<E5RT::ComponentDataType,std::pair<E5RT::ComponentDataType const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_248CBEA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__emplace_unique_key_args<E5RT::ComponentDataType,std::pair<E5RT::ComponentDataType const,std::string> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__construct_node_hash<std::pair<E5RT::ComponentDataType const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_248CBEC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__construct_node_hash<std::pair<E5RT::ComponentDataType const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CBECFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::ComponentDataType,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::__unordered_map_hasher<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::hash<E5RT::ComponentDataType>,std::equal_to<E5RT::ComponentDataType>,true>,std::__unordered_map_equal<E5RT::ComponentDataType,std::__hash_value_type<E5RT::ComponentDataType,std::string>,std::equal_to<E5RT::ComponentDataType>,std::hash<E5RT::ComponentDataType>,true>,std::allocator<std::__hash_value_type<E5RT::ComponentDataType,std::string>>>::find<E5RT::ComponentDataType>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2495AA6CC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2495AA6D8](v13);
  return a1;
}

void sub_248CBEF9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2495AA6D8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x248CBEF7CLL);
}

void sub_248CBEFE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_248CBF118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

BOOL cgm::token_generation_inference::ajax::ane::isExtendOp(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  _QWORD *InputPorts;
  unsigned __int8 *v3;
  void *__p[2];
  char v6;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_step");
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 != 0;
}

void sub_248CBF23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::isExtendFunction(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  v1 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_step");
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_248CBF2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::doesFunctionComputeLogits(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  v1 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_248CBF344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::ane::doesOpComputeLogits(E5RT::ExecutionStreamOperation **a1)
{
  _QWORD *OutputPorts;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_248CBF3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::OperandDescriptor *a2)
{
  E5RT::TensorDescriptor *v2;

  v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  return *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v2) + 8);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  E5RT::IOPort *InputPortRef;
  E5RT::TensorDescriptor *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  char v10;
  E5RT::OperandDescriptor *v11;
  std::__shared_weak_count *v12;

  std::string::basic_string[abi:ne180100]<0>(&__p, "in_relative_positions_CT");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetPortDescriptor(InputPortRef);
  if (v10 < 0)
    operator delete(__p);
  v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v11);
  v4 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v3) + 8);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_248CBF4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::ane::getContextLength(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  return cgm::token_generation_inference::ajax::ane::getContextLength(*a1, a2);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::OperandDescriptor *a2)
{
  E5RT::TensorDescriptor *v2;

  v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  return *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v2) + 8);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane *this, const E5RT::ExecutionStreamOperation *a2)
{
  E5RT::IOPort *InputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v4;
  uint64_t v5;
  void *__p;
  char v8;

  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_ids");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
  v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v5 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v4) + 8);
  if (v8 < 0)
    operator delete(__p);
  return v5;
}

void sub_248CBF564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::ane::getQueryLength(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  return cgm::token_generation_inference::ajax::ane::getQueryLength(*a1, a2);
}

BOOL cgm::token_generation_inference::ajax::ane::anyOpComputingLogits@<W0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error *exception;
  std::string v14;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    goto LABEL_13;
  while (1)
  {
    result = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits((E5RT::ExecutionStreamOperation **)v2);
    if (result)
      break;
    v2 += 32;
    if (v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == a1[1])
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "No ops computing logits were found on the model.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v14);
  }
  *a2 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(v2 + 8);
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a2[2] = *(_QWORD *)(v2 + 16);
  v10 = *(_QWORD *)(v2 + 24);
  a2[3] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_248CBF68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::ane::vocabSizeFromExtendOps(uint64_t *a1)
{
  E5RT::IOPort *OutputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  cgm::token_generation_inference::ajax::ane::anyOpComputingLogits(a1, &v14);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  if (v13 < 0)
    operator delete(__p);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
  v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v4 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v3) + 8);
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4;
}

void sub_248CBF7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::ane::maxContextLengthFromExtendOps(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  E5RT::IOPort *v8;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v1 - 32);
  v2 = *(std::__shared_weak_count **)(v1 - 24);
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v22 = *(_QWORD *)(v1 - 16);
  v5 = *(std::__shared_weak_count **)(v1 - 8);
  v23 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "state_keys_LHC");
  v8 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  if (v19 < 0)
    operator delete(__p);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v8);
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  v11 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v10) + 32);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v11;
}

void sub_248CBF914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unint64_t cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
    return 0;
  v6 = 0;
  result = 0;
  v8 = v4 >> 3;
  if (v8 <= 1)
    v8 = 1;
  while (1)
  {
    v9 = result ? v2[result] + ~v2[result - 1] : *v2;
    if (a1 - v6 <= v9)
      break;
    v6 += v9;
    if (v8 == ++result)
      return v8;
  }
  return result;
}

void cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary(E5RT::ProgramLibrary **a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *ExportedFunctions;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(*a1);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, a2);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v19 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v17 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v17 = 0;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  *a3 = v16;
  if (v16)
  {
    v13 = (_QWORD *)operator new();
    *v13 = &unk_2519DDE00;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v16;
  }
  else
  {
    v13 = 0;
  }
  a3[1] = v13;
  if (v18)
    (*(void (**)())(*(_QWORD *)v18 + 8))();
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_248CBFB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ane::filterFunctions(E5RT::ProgramLibrary **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  std::vector<std::string>::const_iterator v16;
  std::vector<std::string>::const_iterator v17;
  unsigned __int8 **v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  for (i = *(__int128 **)(E5RT::ProgramLibrary::GetExportedFunctions(*a1) + 16); i; i = *(__int128 **)i)
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v8 + 48))(v8, (uint64_t *)i + 2, *((_QWORD *)i + 5)))
    {
      v9 = *(_QWORD *)(a4 + 8);
      if (v9 >= *(_QWORD *)(a4 + 16))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, i + 1);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, i + 1);
        v10 = v9 + 24;
      }
      *(_QWORD *)(a4 + 8) = v10;
    }
  }
  if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a2 + 56))
  {
    TGIE5ModelConfiguration::e5FunctionNames((TGIE5ModelConfiguration *)a2, &v21);
    v11 = *(unsigned __int8 ***)a4;
    v12 = *(unsigned __int8 ***)(a4 + 8);
    if (*(unsigned __int8 ***)a4 == v12)
    {
LABEL_14:
      v15 = v12;
    }
    else
    {
      v13 = v22;
      while (1)
      {
        v14 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v21, v13, v11);
        v13 = v22;
        if (v14 == v22)
          break;
        v11 += 3;
        if (v11 == v12)
          goto LABEL_14;
      }
      v15 = v12;
      if (v11 != v12)
      {
        v18 = v11 + 3;
        v15 = v11;
        while (v18 != v12)
        {
          v19 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v21, v22, v18);
          if (v19 != v22)
          {
            if (*((char *)v15 + 23) < 0)
              operator delete(*v15);
            v20 = *(_OWORD *)v18;
            v15[2] = v18[2];
            *(_OWORD *)v15 = v20;
            v15 += 3;
            *((_BYTE *)v18 + 23) = 0;
            *(_BYTE *)v18 = 0;
          }
          v18 += 3;
        }
      }
    }
    v16.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a4 + 8);
    v17.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)v15;
    std::vector<std::string>::erase((std::vector<std::string> *)a4, v17, v16);
    v23 = (void **)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  }
}

void sub_248CBFD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext(cgm::token_generation_inference::ajax::ane **a1, const E5RT::ExecutionStreamOperation *a2)
{
  unint64_t QueryLength;
  const E5RT::ExecutionStreamOperation *v5;
  unint64_t ContextLength;
  const E5RT::ExecutionStreamOperation *v7;
  unint64_t v8;
  const E5RT::ExecutionStreamOperation *v9;
  _BOOL4 v10;

  QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(*a1, a2);
  ContextLength = cgm::token_generation_inference::ajax::ane::getContextLength(*a1, v5);
  v8 = cgm::token_generation_inference::ajax::ane::getQueryLength(*(cgm::token_generation_inference::ajax::ane **)a2, v7);
  v10 = ContextLength < cgm::token_generation_inference::ajax::ane::getContextLength(*(cgm::token_generation_inference::ajax::ane **)a2, v9);
  if (QueryLength == v8)
    return v10;
  else
    return QueryLength < v8;
}

unint64_t cgm::token_generation_inference::ajax::ane::stepForContextLength(unint64_t this, unint64_t a2)
{
  return this / a2 * a2;
}

uint64_t cgm::token_generation_inference::ajax::ane::checkIOPorts(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[40];
  _BYTE v12[40];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v13, "in_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v14, "in_relative_positions_CT");
  std::string::basic_string[abi:ne180100]<0>(v15, "in_new_token_ids");
  std::string::basic_string[abi:ne180100]<0>(v16, "in_step");
  std::string::basic_string[abi:ne180100]<0>(v17, "state_keys_LHC");
  std::string::basic_string[abi:ne180100]<0>(v18, "state_values_LHC");
  std::string::basic_string[abi:ne180100]<0>(v19, "embeddings");
  std::string::basic_string[abi:ne180100]<0>(v20, "out_logits");
  std::string::basic_string[abi:ne180100]<0>(v21, "placeholder_out_opt_logits");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v13, 9);
  for (i = 0; i != -27; i -= 3)
  {
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v13[0] = a1;
  v13[1] = v12;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v11, v5);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v11);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v10, v6);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map((uint64_t)v9, v7);
  cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()((unsigned __int8 *)v13, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v9);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
}

void sub_248CBFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

unsigned __int8 *cgm::token_generation_inference::ajax::ane::checkIOPorts(std::string const&,E5RT::ProgramFunction const&)::$_0::operator()(unsigned __int8 *result, uint64_t a2)
{
  uint64_t **v2;
  unsigned __int8 *v3;
  std::runtime_error *exception;
  std::string v5;
  uint64_t v6[3];
  _QWORD v7[8];

  v2 = (uint64_t **)result;
  v7[7] = *MEMORY[0x24BDAC8D0];
  v3 = (unsigned __int8 *)(a2 + 16);
  while (1)
  {
    v3 = *(unsigned __int8 **)v3;
    if (!v3)
      break;
    result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v2[1], v3 + 16);
    if (!result)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::make_format_args[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>,std::string const,std::string const>((uint64_t *)v3 + 2, *v2, v7);
      memset(&v5, 0, sizeof(v5));
      v6[0] = 2;
      v6[1] = (uint64_t)v7;
      v6[2] = v7[4];
      std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v5, "Found unknown port named {} on function {}.", 43, v6);
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v5);
    }
  }
  return result;
}

void sub_248CC017C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::utils::getAneQoSForNSQoS(cgm::token_generation_inference::ajax::utils *this, NSQualityOfService a2)
{
  std::runtime_error *exception;
  std::string v4;

  if ((uint64_t)this <= 16)
  {
    if (this != (cgm::token_generation_inference::ajax::utils *)-1)
    {
      if (this != (cgm::token_generation_inference::ajax::utils *)9)
        goto LABEL_12;
      return 7;
    }
    return 5;
  }
  if (this == (cgm::token_generation_inference::ajax::utils *)17)
    return 5;
  if (this != (cgm::token_generation_inference::ajax::utils *)33)
  {
    if (this == (cgm::token_generation_inference::ajax::utils *)25)
      return 4;
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v4, "Could not find corresponding ANE priority for the thread QoS");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v4);
  }
  return 3;
}

void sub_248CC0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable(E5RT::ProgramLibrary **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ExportedFunctions;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  E5RT::ProgramLibrary *v7;
  E5RT::ProgramLibrary *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  E5RT::ExecutionStream *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  E5RT::IOPort *OutputPortRef;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  void *v24[2];
  __int128 v25;
  int v26;
  void *__p[2];
  char v28;
  E5RT::ProgramLibrary *v29[2];
  E5RT::ExecutionStreamOperation *v30;
  std::__shared_weak_count *v31;

  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(*a1);
  std::string::basic_string[abi:ne180100]<0>(v24, "load_embeddings");
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)v24);
  v6 = v5;
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (v6)
      goto LABEL_3;
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  if (!v5)
    goto LABEL_31;
LABEL_3:
  v7 = *a1;
  v8 = a1[1];
  v29[0] = v7;
  v29[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)((char *)v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "load_embeddings");
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 1065353216;
  cgm::token_generation_inference::ajax::ane::loadOperationFromLibrary(v29, (unsigned __int8 *)__p, &v30);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
  if (v28 < 0)
    operator delete(__p[0]);
  if (v8)
  {
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v8 + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
  v13 = (E5RT::ExecutionStream *)cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(v30, 0);
  E5RT::ExecutionStream::CreateExecutionStream(v13);
  v23 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync((E5RT::ExecutionStream *)__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v24, "embeddings");
  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::IOPort::GetMemoryObject(OutputPortRef);
  if (SBYTE7(v25) < 0)
    operator delete(v24[0]);
  v19 = __p[0];
  __p[0] = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_248CC04E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  __int128 v4;
  E5RT::ProgramLibrary *v5;
  unint64_t *v6;
  std::string::size_type v7;
  std::__fs::filesystem::path *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  NSObject *v11;
  unsigned __int8 *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  E5RT::ProgramLibrary *v36;
  uint64_t ExportedFunctions;
  uint64_t *i;
  unsigned __int8 *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::vector<unsigned int>::size_type v45;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::runtime_error *exception;
  std::runtime_error *v53;
  _QWORD *v54;
  E5RT::ProgramLibrary *v55[2];
  std::string v56;
  std::__fs::filesystem::path *v57[2];
  __int128 v58;
  int v59;
  std::string buf[2];
  E5RT::ProgramLibrary *v61[2];
  std::vector<std::string> v62;
  E5RT::ProgramLibrary *v63;
  std::__shared_weak_count *v64;
  std::vector<std::string> v65;
  E5RT::ProgramLibrary *v66;
  std::__shared_weak_count *v67;
  E5RT::ProgramLibrary *v68;
  E5RT::ProgramLibrary *v69;
  __int128 *v70;
  std::string *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_2519DDFB8;
  *((_QWORD *)this + 5) = &unk_2519DE038;
  if (*((char *)&a2[2].var1.var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, a2[2].var1.var0.var0.var0.var0.var1.var0, a2[2].var1.var0.var0.var0.var0.var1.var1);
  }
  else
  {
    v4 = *(_OWORD *)a2[2].var1.var0.var0.var0.var0.var0.var0;
    *((_QWORD *)this + 8) = *((_QWORD *)&a2[2].var1.var0.var0.var0.var0.var1 + 2);
    *((_OWORD *)this + 3) = v4;
  }
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 225) = 0u;
  v54 = (_QWORD *)((char *)this + 176);
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions(this, (E5RT::E5CompilerOptions **)v57);
  cgm::token_generation_inference::ajax::utils::makeProgramLibrary((const std::__fs::filesystem::path *)&a2->var1, (const E5RT::E5CompilerOptions *)LOBYTE(a2[2].var1.var0.var0.var1.var0[0]), buf);
  v5 = (E5RT::ProgramLibrary *)buf[0].__r_.__value_.__r.__words[0];
  v68 = (E5RT::ProgramLibrary *)buf[0].__r_.__value_.__r.__words[0];
  if (buf[0].__r_.__value_.__r.__words[0])
  {
    v6 = (unint64_t *)operator new();
    v7 = buf[0].__r_.__value_.__r.__words[0];
    *v6 = (unint64_t)&unk_2519DDDA0;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
  }
  else
  {
    v6 = 0;
  }
  v69 = (E5RT::ProgramLibrary *)v6;
  buf[0].__r_.__value_.__r.__words[0] = 0;
  v8 = v57[0];
  v57[0] = 0;
  if (v8)
    (*(void (**)(std::__fs::filesystem::path *))(v8->__pn_.__r_.__value_.__r.__words[0] + 8))(v8);
  std::string::basic_string[abi:ne180100]<0>(buf, "in_embeddings");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((_QWORD *)&a2[1].var1.var0.var0.var0.var0.var1 + 2, (unsigned __int8 *)buf);
  v10 = v9;
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf[0].__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_11;
  }
  else if (v9)
  {
LABEL_11:
    cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v9);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_248CAA000, v11, OS_LOG_TYPE_DEFAULT, "Shared embedding table found in shared constants.", (uint8_t *)buf, 2u);
    }

    std::string::basic_string[abi:ne180100]<0>(buf, "in_embeddings");
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((_QWORD *)&a2[1].var1.var0.var0.var0.var0.var1 + 2, (unsigned __int8 *)buf);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v54, (uint64_t *)v12 + 5);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    goto LABEL_33;
  }
  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v9);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_248CAA000, v13, OS_LOG_TYPE_DEFAULT, "Created new embedding table since none found in shared constants.", (uint8_t *)buf, 2u);
  }

  v66 = v5;
  v67 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v14 = v6 + 1;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::loadEmbeddingTable(&v66, buf);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v54, (__int128 *)buf);
  size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v19 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v5 = v68;
  v6 = (unint64_t *)v69;
LABEL_33:
  v63 = v5;
  v64 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v22 = v6 + 1;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v74[0] = &off_2519DE1E0;
  v75 = v74;
  cgm::token_generation_inference::ajax::ane::filterFunctions(&v63, (uint64_t)a2, (uint64_t)v74, (uint64_t)&v65);
  v24 = v75;
  if (v75 == v74)
  {
    v25 = 4;
    v24 = v74;
    goto LABEL_40;
  }
  if (v75)
  {
    v25 = 5;
LABEL_40:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  v26 = v64;
  if (v64)
  {
    v27 = (unint64_t *)&v64->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v69;
  v61[0] = v68;
  v61[1] = v69;
  if (v69)
  {
    v30 = (unint64_t *)((char *)v69 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v72[0] = &off_2519DE270;
  v73 = v72;
  cgm::token_generation_inference::ajax::ane::filterFunctions(v61, (uint64_t)a2, (uint64_t)v72, (uint64_t)&v62);
  v32 = v73;
  if (v73 == v72)
  {
    v33 = 4;
    v32 = v72;
    goto LABEL_53;
  }
  if (v73)
  {
    v33 = 5;
LABEL_53:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  if (v29)
  {
    v34 = (unint64_t *)&v29->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v62.__begin_ == v62.__end_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "No extend functions found, can't run this model.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, buf);
  }
  TGIE5ModelConfiguration::mutableWeightsSymbolToPath(a2, (unsigned __int8 **)v62.__begin_, (uint64_t)buf);
  v36 = v68;
  if (*(char **)&a2[1].var0 == a2[1].var1.var0.var0.var0.var0.var1.var0)
  {
    ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(v68);
    *(_OWORD *)v57 = 0u;
    v58 = 0u;
    v59 = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)v57, (unint64_t)(float)*(unint64_t *)(ExportedFunctions + 24));
    for (i = *(uint64_t **)(ExportedFunctions + 16); i; i = (uint64_t *)*i)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)i[5] + 72))(&v56);
      v70 = (__int128 *)(i + 2);
      v39 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v57, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v70);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v39 + 40));
      *(std::string *)(v39 + 40) = v56;
      memset(&v56, 0, sizeof(v56));
      v71 = &v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    }
    cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols((uint64_t)buf, (__int128 **)&v65, v57, (std::vector<std::string> *)&v56);
    std::vector<std::string>::__vdeallocate(&v65);
    v65 = (std::vector<std::string>)v56;
    memset(&v56, 0, sizeof(v56));
    v71 = &v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    cgm::token_generation_inference::ajax::utils::filterFunctionsByMutableWeightSymbols((uint64_t)buf, (__int128 **)&v62, v57, (std::vector<std::string> *)&v56);
    std::vector<std::string>::__vdeallocate(&v62);
    v62 = (std::vector<std::string>)v56;
    memset(&v56, 0, sizeof(v56));
    v71 = &v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    if (v62.__begin_ == v62.__end_)
    {
      v53 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v56, "No extend functions found for the provided adapter, can't run this model.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v53, 1, &v56);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v57);
    v36 = v68;
  }
  v40 = (std::__shared_weak_count *)v69;
  v55[0] = v36;
  v55[1] = v69;
  if (v69)
  {
    v41 = (unint64_t *)((char *)v69 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prepareStreamOps((uint64_t *)this, v55, (uint64_t)buf, (uint64_t)&v65, (uint64_t)&v62);
  if (v40)
  {
    v43 = (unint64_t *)&v40->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(this);
  *((_QWORD *)this + 10) = cgm::token_generation_inference::ajax::ane::vocabSizeFromExtendOps((uint64_t *)this + 19);
  v45 = cgm::token_generation_inference::ajax::ane::maxContextLengthFromExtendOps((uint64_t)this + 152);
  *((_QWORD *)this + 9) = v45;
  std::vector<int>::reserve((std::vector<unsigned int> *)this + 8, v45);
  std::vector<unsigned long>::reserve((void **)this + 27, *((_QWORD *)this + 9));
  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v46);
  v47 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel((uint64_t *)this + 10, (uint64_t *)this + 9, v47);

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)buf);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v48 = (std::__shared_weak_count *)v69;
  if (v69)
  {
    v49 = (unint64_t *)((char *)v69 + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return this;
}

void sub_248CC0D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void **v44;
  uint64_t v45;
  int v46;
  void **v47;
  void **v48;
  void *v49;
  uint64_t v50;
  void *v52;
  void *v53;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&a20);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a26);
      a20 = &a37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      a20 = &a43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v50 - 200);
      v52 = *v48;
      if (*v48)
      {
        *(_QWORD *)(v43 + 224) = v52;
        operator delete(v52);
      }
      v53 = *v47;
      if (*v47)
      {
        *(_QWORD *)(v43 + 200) = v53;
        operator delete(v53);
      }
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a10);
      a20 = (char *)v45;
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      a20 = (char *)(v45 - 24);
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      if (*(char *)(v43 + 71) < 0)
        operator delete(*v44);
      cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v43);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

_QWORD *std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prepareStreamOps(uint64_t *a1, E5RT::ProgramLibrary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  _QWORD *ExportedFunctions;
  unsigned __int8 *v12;
  uint64_t *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  E5RT::TensorDescriptor *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  E5RT::TensorDescriptor *v28;
  uint64_t v29;
  _BOOL8 doesFunctionComputeLogits;
  _BOOL4 v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t (*v35)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v36;
  uint64_t (*v37)(uint64_t *, uint64_t *);
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (**v46)(uint64_t *, uint64_t *);
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  __int128 v50;
  int64x2_t v51;
  char *v52;
  uint64_t (*v53)(uint64_t *, uint64_t *);
  unint64_t v54;
  uint64_t v55;
  E5RT::ExecutionStream *v56;
  uint64_t *v57;
  cgm::token_generation_inference::ajax::ane *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const E5RT::ExecutionStreamOperation *v62;
  std::__shared_weak_count *v63;
  uint64_t (*v64)(uint64_t *, uint64_t *);
  cgm::token_generation_inference::ajax::ane **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  cgm::token_generation_inference::ajax::ane **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  int64x2_t v96;
  char *v97;
  std::vector<std::string> v98;
  uint64_t (*v99)(uint64_t *, uint64_t *);
  cgm::token_generation_inference::ajax::ane *v100;
  std::__shared_weak_count *v101;
  cgm::token_generation_inference::ajax::ane *v102;
  std::__shared_weak_count *v103;
  uint64_t (*v104)(uint64_t *, uint64_t *);
  _BYTE __p[24];
  char *v106;
  char **v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  memset(&v98, 0, sizeof(v98));
  std::vector<std::string>::reserve(&v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3)- 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v98, v98.__end_, *(std::string **)a4, *(__int128 **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v98, v98.__end_, *(std::string **)a5, *(__int128 **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3));
  v96 = 0uLL;
  v97 = 0;
  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::reserve((char **)&v96, 0xAAAAAAAAAAAAAAABLL * (((char *)v98.__end_ - (char *)v98.__begin_) >> 3));
  begin = v98.__begin_;
  for (i = v98.__end_; begin != i; ++begin)
  {
    ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(*a2);
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)begin);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v14 = (char *)*((_QWORD *)v12 + 5);
    v13 = (uint64_t *)*((_QWORD *)v12 + 6);
    v93 = v14;
    v94 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 1);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    cgm::token_generation_inference::ajax::ane::checkIOPorts((uint64_t)begin, (uint64_t)v14);
    v102 = (cgm::token_generation_inference::ajax::ane *)v14;
    v103 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v17 = (unint64_t *)(v13 + 1);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    E5RT::PrecompiledComputeOpCreateOptions::Create();
    v19 = v103;
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
    v22 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v93 + 32))(v93);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
    v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v22, __p);
    if (!v23)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v24 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v23 + 5));
    v25 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v24) + 8);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v26 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v93 + 32))(v93);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions_CT");
    v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v26, __p);
    if (!v27)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v28 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v27 + 5));
    v29 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v28) + 8);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    doesFunctionComputeLogits = cgm::token_generation_inference::ajax::ane::doesFunctionComputeLogits((uint64_t)v93);
    v31 = doesFunctionComputeLogits;
    cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)doesFunctionComputeLogits);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__p = 134218496;
      *(_QWORD *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 2048;
      *(_QWORD *)&__p[14] = v29;
      *(_WORD *)&__p[22] = 1024;
      LODWORD(v106) = v31;
      _os_log_debug_impl(&dword_248CAA000, v32, OS_LOG_TYPE_DEBUG, "Loading operation with (query_length, context_length): (%zu, %zu) and computesLogits: %i.", __p, 0x1Cu);
    }

    if (v94)
    {
      v33 = (unint64_t *)&v94->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v35 = v99;
    v100 = (cgm::token_generation_inference::ajax::ane *)v99;
    if (v99)
    {
      v36 = (std::__shared_weak_count *)operator new();
      v37 = v99;
      v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DE140;
      v36->__shared_owners_ = 0;
      v36->__shared_weak_owners_ = 0;
      v36[1].__vftable = (std::__shared_weak_count_vtbl *)v37;
    }
    else
    {
      v36 = 0;
    }
    v101 = v36;
    v99 = 0;
    v38 = v96.i64[1];
    if (v96.i64[1] >= (unint64_t)v97)
    {
      v40 = (v96.i64[1] - v96.i64[0]) >> 4;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v42 = (uint64_t)&v97[-v96.i64[0]];
      if ((uint64_t)&v97[-v96.i64[0]] >> 3 > v41)
        v41 = v42 >> 3;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      v107 = &v97;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)&v97, v43);
      v46 = (uint64_t (**)(uint64_t *, uint64_t *))&v44[16 * v40];
      *v46 = v35;
      v46[1] = (uint64_t (*)(uint64_t *, uint64_t *))v36;
      v100 = 0;
      v101 = 0;
      v47 = (_QWORD *)v96.i64[1];
      v48 = (_QWORD *)v96.i64[0];
      if (v96.i64[1] == v96.i64[0])
      {
        v51 = vdupq_n_s64(v96.u64[1]);
        v49 = &v44[16 * v40];
      }
      else
      {
        v49 = &v44[16 * v40];
        do
        {
          v50 = *((_OWORD *)v47 - 1);
          v47 -= 2;
          *((_OWORD *)v49 - 1) = v50;
          v49 -= 16;
          *v47 = 0;
          v47[1] = 0;
        }
        while (v47 != v48);
        v51 = v96;
      }
      v39 = v46 + 2;
      v96.i64[0] = (uint64_t)v49;
      v96.i64[1] = (uint64_t)(v46 + 2);
      *(int64x2_t *)&__p[8] = v51;
      v52 = v97;
      v97 = &v44[16 * v45];
      v106 = v52;
      *(_QWORD *)__p = v51.i64[0];
      std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *(_QWORD *)v96.i64[1] = v35;
      *(_QWORD *)(v38 + 8) = v36;
      v39 = (_QWORD *)(v38 + 16);
    }
    v96.i64[1] = (uint64_t)v39;
    v53 = v99;
    v99 = 0;
    if (v53)
      (*(void (**)(uint64_t (*)(uint64_t *, uint64_t *)))(*(_QWORD *)v53 + 8))(v53);
  }
  MEMORY[0x2495AA474](__p, &v96);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::reserve(&v93, (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::back_insert_iterator<std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>>>((uint64_t)&v100, *(uint64_t **)__p, *(uint64_t **)&__p[8], &v93);
  v54 = 126 - 2 * __clz(((char *)v94 - v93) >> 4);
  v100 = (cgm::token_generation_inference::ajax::ane *)cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext;
  if (v94 == (std::__shared_weak_count *)v93)
    v55 = 0;
  else
    v55 = v54;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>((__int128 *)v93, (uint64_t *)v94, (uint64_t (**)(uint64_t *, uint64_t *))&v100, v55, 1);
  v57 = (uint64_t *)v94;
  if (v94 != (std::__shared_weak_count *)v93)
  {
    do
    {
      v58 = (cgm::token_generation_inference::ajax::ane *)*(v57 - 2);
      v57 -= 2;
      v102 = v58;
      v59 = v57[1];
      v103 = (std::__shared_weak_count *)v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      E5RT::ExecutionStream::CreateExecutionStream(v56);
      v100 = (cgm::token_generation_inference::ajax::ane *)v104;
      if (v104)
      {
        v63 = (std::__shared_weak_count *)operator new();
        v64 = v104;
        v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DE2F0;
        v63->__shared_owners_ = 0;
        v63->__shared_weak_owners_ = 0;
        v63[1].__vftable = (std::__shared_weak_count_vtbl *)v64;
      }
      else
      {
        v63 = 0;
      }
      v101 = v63;
      if (cgm::token_generation_inference::ajax::ane::isExtendOp(v102, v62))
      {
        v65 = (cgm::token_generation_inference::ajax::ane **)a1[20];
        if ((unint64_t)v65 >= a1[21])
        {
          v56 = (E5RT::ExecutionStream *)std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(a1 + 19, &v102, &v100);
        }
        else
        {
          *v65 = v102;
          v66 = v103;
          v65[1] = (cgm::token_generation_inference::ajax::ane *)v103;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69 = v101;
          v65[2] = v100;
          v65[3] = (cgm::token_generation_inference::ajax::ane *)v69;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v56 = (E5RT::ExecutionStream *)(v65 + 4);
        }
        a1[20] = (uint64_t)v56;
      }
      else
      {
        v72 = (cgm::token_generation_inference::ajax::ane **)a1[17];
        if ((unint64_t)v72 >= a1[18])
        {
          v56 = (E5RT::ExecutionStream *)std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(a1 + 16, &v102, &v100);
        }
        else
        {
          *v72 = v102;
          v73 = v103;
          v72[1] = (cgm::token_generation_inference::ajax::ane *)v103;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v76 = v101;
          v72[2] = v100;
          v72[3] = (cgm::token_generation_inference::ajax::ane *)v76;
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v56 = (E5RT::ExecutionStream *)(v72 + 4);
        }
        a1[17] = (uint64_t)v56;
      }
      v79 = v101;
      if (v101)
      {
        v80 = (unint64_t *)&v101->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = v103;
      if (v103)
      {
        v83 = (unint64_t *)&v103->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
    }
    while (v57 != (uint64_t *)v93);
  }
  v85 = (uint64_t *)a1[16];
  v86 = (uint64_t *)a1[17];
  v87 = 126 - 2 * __clz(((char *)v86 - (char *)v85) >> 5);
  if (v86 == v85)
    v88 = 0;
  else
    v88 = v87;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(v85, v86, (uint64_t (**)(uint64_t *, uint64_t *))&v100, v88, 1);
  v89 = (uint64_t *)a1[19];
  v90 = (uint64_t *)a1[20];
  v91 = 126 - 2 * __clz(((char *)v90 - (char *)v89) >> 5);
  if (v90 == v89)
    v92 = 0;
  else
    v92 = v91;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(v89, v90, (uint64_t (**)(uint64_t *, uint64_t *))&v100, v92, 1);
  v102 = (cgm::token_generation_inference::ajax::ane *)&v93;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  v93 = __p;
  std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  *(_QWORD *)__p = &v96;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = &v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_248CC1820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  a26 = (uint64_t *)&a15;
  std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  __int128 v2;
  E5RT::ExecutionStreamOperation **v3;
  E5RT::ExecutionStreamOperation **v4;
  uint64_t InputPorts;
  uint64_t v6;
  uint64_t OutputPorts;
  size_t v8;
  unsigned __int8 *i;
  unsigned __int8 *v10;
  void **v11;
  unsigned __int8 *v12;
  E5RT::ExecutionStreamOperation **v13;
  E5RT::ExecutionStreamOperation **v14;
  E5RT::ExecutionStreamOperation *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void ***v26;
  void *__p;
  std::__shared_weak_count *v28;
  char v29;
  _OWORD v30[2];
  int v31;
  _BYTE v32[40];
  _BYTE v33[40];
  _BYTE v34[40];
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  E5RT::ExecutionStreamOperation **v39;
  E5RT::ExecutionStreamOperation **v40;
  uint64_t v41;
  void **p_p;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::reserve((uint64_t *)&v39, ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 5)+ ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 5));
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>((uint64_t *)&v39, v40, *((uint64_t **)this + 19), *((_QWORD **)this + 20), (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 5);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>((uint64_t *)&v39, v40, *((uint64_t **)this + 16), *((_QWORD **)this + 17), (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 5);
  v2 = 0uLL;
  v36 = 0u;
  v37 = 0u;
  v38 = 1065353216;
  v35 = &v36;
  v3 = v39;
  v4 = v40;
  if (v39 == v40)
  {
    v8 = 0;
  }
  else
  {
    do
    {
      InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v34, InputPorts);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v35, (uint64_t)v34);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v34);
      v6 = E5RT::ExecutionStreamOperation::GetInOutPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v33, v6);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v35, (uint64_t)v33);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v33);
      OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*v3);
      std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v32, OutputPorts);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()((unsigned __int8 *)&v35, (uint64_t)v32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v32);
      v3 += 4;
    }
    while (v3 != v4);
    v8 = (unint64_t)(float)*((unint64_t *)&v37 + 1);
    v2 = 0uLL;
  }
  v30[0] = v2;
  v30[1] = v2;
  v31 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)v30, v8);
  for (i = (unsigned __int8 *)v37; i; i = *(unsigned __int8 **)i)
  {
    __p = i + 16;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v36, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    E5RT::BufferObject::AllocMemory();
    __p = i + 16;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v30, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)v10 + 5, (uint64_t *)&p_p);
    v11 = p_p;
    p_p = 0;
    if (v11)
      (*((void (**)(void **))*v11 + 1))(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_embeddings");
  p_p = &__p;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v30, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((_QWORD *)v12 + 5, (uint64_t *)this + 22);
  if (v29 < 0)
    operator delete(__p);
  v13 = v39;
  v14 = v40;
  while (v13 != v14)
  {
    v15 = *v13;
    v16 = (std::__shared_weak_count *)v13[1];
    __p = *v13;
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(v15, v30);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    E5RT::ExecutionStream::EncodeOperation();
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    E5RT::ExecutionStream::PreWireInUseAllocations(v13[2]);
    v23 = v28;
    if (v28)
    {
      v24 = (unint64_t *)&v28->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v13 += 4;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v30);
  v26 = (void ***)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v36);
  *(_QWORD *)&v36 = &v39;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](v26);
}

void sub_248CC1CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void ***v36;

  if (a17 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a18);
  v36 = (void ***)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v34 - 128);
  *(_QWORD *)(v34 - 128) = v34 - 88;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(cgm::token_generation_inference::ajax::AJAXE5MLModel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &unk_2519DE0D0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x2495AA834](v2, 0x81C40B8603338);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

BOOL cgm::token_generation_inference::ajax::`anonymous namespace'::compareStreamOps(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];
  cgm::token_generation_inference::ajax::ane *v16;
  std::__shared_weak_count *v17;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v16 = *(cgm::token_generation_inference::ajax::ane **)a1;
  v17 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (std::__shared_weak_count *)a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = cgm::token_generation_inference::ajax::ane::compareOpsByQueryContext(&v16, (const E5RT::ExecutionStreamOperation *)v15);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_248CC20B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

unsigned __int8 *cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(void)::$_0::operator()(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  E5RT::TensorDescriptor *v10;
  unint64_t Size;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  E5RT::OperandDescriptor *v17;
  std::__shared_weak_count *v18;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = v2[39];
      v5 = (char)v4;
      if ((v4 & 0x80u) != 0)
        v4 = *((_QWORD *)v2 + 3);
      if (v4 != 13
        || (v5 >= 0 ? (v6 = (uint64_t *)(v2 + 16)) : (v6 = (uint64_t *)*((_QWORD *)v2 + 2)),
            (v7 = *v6, v8 = *(uint64_t *)((char *)v6 + 5), v7 == 0x6465626D655F6E69)
          ? (v9 = v8 == 0x73676E6964646562)
          : (v9 = 0),
            !v9))
      {
        E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v2 + 5));
        v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v17);
        Size = E5RT::TensorDescriptor::GetSize(v10);
        v12 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *v3;
        v17 = (E5RT::OperandDescriptor *)(v2 + 16);
        result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v2 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
        if (Size > *((_QWORD *)result + 5))
        {
          v16 = *v3;
          v17 = (E5RT::OperandDescriptor *)(v2 + 16);
          result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v2 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
          *((_QWORD *)result + 5) = Size;
        }
      }
      v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return result;
}

void sub_248CC2224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_2519DDF08;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, _QWORD *a2)
{
  unint64_t v4;
  _QWORD v5[3];
  void **v6;

  if (a2[1] != *a2)
  {
    v4 = 0;
    while (*((_QWORD *)this + 11) || *((_QWORD *)this + 17) == *((_QWORD *)this + 16))
    {
      memset(v5, 0, sizeof(v5));
      v4 += cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(this, a2, v5, v4);
      v6 = (void **)v5;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      if (v4 == (uint64_t)(a2[1] - *a2) >> 2)
        return;
    }
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt((uint64_t)this, a2);
  }
}

void sub_248CC2388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  const E5RT::ExecutionStreamOperation *v5;
  cgm::token_generation_inference::common::logging::CGMTGILogger *QueryLength;
  NSObject *v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *exception;
  unint64_t v27;
  cgm::token_generation_inference::ajax::ane *v28[3];
  std::__shared_weak_count *v29;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 88))
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt();
  if (*(_BYTE *)(a1 + 240))
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt();
  v4 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v4 > *(_QWORD *)(a1 + 72))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v27 = *(_QWORD *)(a1 + 72);
    std::string::basic_string[abi:ne180100]<0>(v28, "prompt");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v27, (uint64_t)v28, (uint64_t)exception);
  }
  cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t *)(a1 + 128), 0, v4, v28);
  QueryLength = (cgm::token_generation_inference::common::logging::CGMTGILogger *)cgm::token_generation_inference::ajax::ane::getQueryLength(v28[0], v5);
  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(QueryLength);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v25 = (uint64_t)(a2[1] - *a2) >> 2;
    LODWORD(__p[0]) = 134218240;
    *(void **)((char *)__p + 4) = QueryLength;
    WORD2(__p[1]) = 2048;
    *(void **)((char *)&__p[1] + 6) = (void *)v25;
    _os_log_debug_impl(&dword_248CAA000, v7, OS_LOG_TYPE_DEBUG, "Selected prompt op with query length: %zu for num tokens %zu\n", (uint8_t *)__p, 0x16u);
  }

  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions_CT");
  v8 = (_WORD *)_ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v10 = v9;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if ((uint64_t)(2 * v10) >= 1)
    memset_pattern16(v8, &unk_248D72BF0, 2 * (((2 * v10) >> 1) - (2 * v10 != 1)) + 2);
  v11 = (uint64_t)(a2[1] - *a2) >> 2;
  memset(__p, 0, 24);
  cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(v8, v10, 0, v11, (uint64_t)QueryLength, 0, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
  v12 = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = (char *)*a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    do
    {
      v15 = *(_DWORD *)&v13[4 * v14];
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab(a1, v15);
      *(_DWORD *)(v12 + 4 * v14++) = v15;
      v13 = (char *)*a2;
    }
    while (v14 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(v28[2]);
  *(_QWORD *)(a1 + 112) = 0;
  v16 = (char *)*a2;
  v17 = (char *)a2[1];
  v18 = (uint64_t)&v17[-*a2] >> 2;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 104) = QueryLength;
  *(_QWORD *)(a1 + 88) += v18;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(a1 + 192), *(_QWORD *)(a1 + 200), v16, v17, v18);
  v19 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)v28[1];
  if (v28[1])
  {
    v23 = (unint64_t *)((char *)v28[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_248CC26D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

unint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  const E5RT::ExecutionStreamOperation *v9;
  cgm::token_generation_inference::ajax::ane *v10;
  const E5RT::ExecutionStreamOperation *v11;
  unint64_t QueryLength;
  const E5RT::ExecutionStreamOperation *v13;
  cgm::token_generation_inference::common::logging::CGMTGILogger *ContextLength;
  NSObject *v15;
  _BOOL4 doesOpComputeLogits;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v35;
  _WORD *v36;
  unint64_t v37;
  const std::string::value_type **v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  void *v44;
  cgm::token_generation_inference::ajax::utils *v45;
  NSQualityOfService v46;
  int AneQoSForNSQoS;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v48;
  NSObject *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *exception;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v67;
  std::string v68;
  void *__p[2];
  std::string::size_type v70;
  std::string v71;
  _QWORD v72[2];
  cgm::token_generation_inference::ajax::ane *v73[3];
  std::__shared_weak_count *v74;
  std::string buf;
  _BOOL4 v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2[1] - *a2) >> 2;
  v5 = v4 - a4;
  if (v4 < a4)
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend();
  if (*((_BYTE *)this + 240))
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend();
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded((uint64_t **)this, v5, *a3 != a3[1]);
  v9 = (const E5RT::ExecutionStreamOperation *)*((_QWORD *)this + 11);
  if ((unint64_t)v9 + ((uint64_t)(a2[1] - *a2) >> 2) - a4 > *((_QWORD *)this + 9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v62 = *((_QWORD *)this + 9);
    std::string::basic_string[abi:ne180100]<0>(&buf, "singleExtend");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v62, (uint64_t)&buf, (uint64_t)exception);
  }
  cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t *)this + 19, v9, v5, v73);
  v10 = v73[0];
  QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(v73[0], v11);
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::alignContextForQueryLength(this, QueryLength, ((uint64_t)(a2[1] - *a2) >> 2) - a4);
  ContextLength = (cgm::token_generation_inference::common::logging::CGMTGILogger *)cgm::token_generation_inference::ajax::ane::getContextLength(v10, v13);
  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(ContextLength);
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    doesOpComputeLogits = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits(v73);
    v17 = *((_QWORD *)this + 11);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134219008;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)ContextLength;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = QueryLength;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    v76 = doesOpComputeLogits;
    v77 = 2048;
    v78 = v17;
    v79 = 2048;
    v80 = v5;
    _os_log_impl(&dword_248CAA000, v15, OS_LOG_TYPE_INFO, "Using extend_%zu_%zu computingLogits: %i for %zu context, %zu token(s)", (uint8_t *)&buf, 0x30u);
  }

  v18 = *((_QWORD *)this + 11);
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_step");
  v64 = v5;
  v19 = (_DWORD *)cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  v63 = a3;
  v65 = QueryLength;
  v20 = v18 / QueryLength * QueryLength;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *v19 = v20;
  v21 = *((_QWORD *)this + 11);
  v22 = v21 - v20;
  if (v21 - v20 > (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2)
    __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 290, "mContextTokens.size() >= numContextTokensNeeded");
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_new_token_ids");
  v23 = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v21 != v20)
  {
    v24 = 0;
    if (v22 <= 1)
      v25 = 1;
    else
      v25 = v22;
    v26 = (unsigned int *)v23;
    do
    {
      if (*(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v24 + v20)) == -1)
        v27 = 0;
      else
        v27 = *(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v24 + v20));
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab((uint64_t)this, v27);
      *v26++ = v27;
      ++v24;
      --v25;
    }
    while (v25);
  }
  v28 = v65 - v22;
  if (v65 != v22)
  {
    v29 = 0;
    if (v28 <= 1)
      v30 = 1;
    else
      v30 = v65 - v22;
    do
    {
      if (v29 >= ((uint64_t)(a2[1] - *a2) >> 2) - a4)
        break;
      v31 = *(_DWORD *)(*a2 + 4 * a4 + 4 * v29);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab((uint64_t)this, v31);
      *(_DWORD *)(v23 + 4 * (v29 + v22)) = v31;
      ++v29;
    }
    while (v30 != v29);
  }
  if (v28 >= v64)
    v32 = v64;
  else
    v32 = v65 - v22;
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_relative_positions_CT");
  v72[0] = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v72[1] = v33;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v34 = (_WORD *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v72, 0, *((_QWORD *)this + 9) * v65);
  v36 = v34;
  v37 = v35;
  if ((uint64_t)(2 * v35) >= 1)
    memset_pattern16(v34, &unk_248D72BF0, 2 * (((2 * v35) >> 1) - (2 * v35 != 1)) + 2);
  cgm::token_generation_inference::ajax::utils::setRelativePositions(v36, v37, v20, v63, v22, v32, v65, (_QWORD *)this + 27);
  v38 = (const std::string::value_type **)((char *)this + 48);
  if (*((char *)this + 71) < 0)
  {
    v39 = *((_QWORD *)this + 7);
    if (!v39)
      goto LABEL_46;
    std::string::__init_copy_ctor_external(&v71, *v38, v39);
  }
  else
  {
    if (!*((_BYTE *)this + 71))
      goto LABEL_46;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)v38;
    v71.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
  std::to_string(&v68, *((_QWORD *)this + 12));
  v40 = std::string::insert(&v68, 0, "Inference_", 0xAuLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&buf, "_", 1uLL);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v70 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  E5RT::ExecutionStreamOperation::SerializeInferenceFrameData();
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_46:
  objc_msgSend(MEMORY[0x24BDD17F0], "currentThread");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (cgm::token_generation_inference::ajax::utils *)objc_msgSend(v44, "qualityOfService");
  AneQoSForNSQoS = cgm::token_generation_inference::ajax::utils::getAneQoSForNSQoS(v45, v46);

  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v48);
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(AneQoSForNSQoS, v49);

  v67 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  E5RT_Private::SetANEExecutionPriorityForStream();
  if (v67)
  {
    v52 = (unint64_t *)&v67->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(v73[2]);
  *((_QWORD *)this + 14) = v22;
  *((_QWORD *)this + 15) = v32 + v22;
  *((_QWORD *)this + 13) = v65;
  *((_QWORD *)this + 11) += v32;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)this + 8, *((_QWORD *)this + 25), (char *)(*a2 + 4 * a4), (char *)(*a2 + 4 * a4 + 4 * v32), v32);
  ++*((_QWORD *)this + 12);
  v54 = v74;
  if (v74)
  {
    v55 = (unint64_t *)&v74->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)v73[1];
  if (v73[1])
  {
    v58 = (unint64_t *)((char *)v73[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return v32;
}

void sub_248CC2E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42)
{
  void *v42;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  _Unwind_Resume(a1);
}

unint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t result;
  std::runtime_error *exception;
  std::string v8;

  if (cgm::token_generation_inference::ajax::utils::tokenTreeIndexesAreLinear(a3))
    return (**(uint64_t (***)(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *, _QWORD *))a1)(a1, a2);
  result = cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(a1, a2, a3, 0);
  if (result != (uint64_t)(a2[1] - *a2) >> 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Model query length exceeded for tree decoding.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v8);
  }
  return result;
}

void sub_248CC301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t `non-virtual thunk to'cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::forward((cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *)(a1 - 40), a2, a3);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::checkTokenInVocab(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  std::runtime_error *exception;
  uint64_t v5;
  std::string v6;
  uint64_t v7[3];
  _QWORD v8[8];

  v2 = this;
  v8[7] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(this + 80) <= (signed int)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    v8[0] = a2;
    v8[1] = 0;
    v5 = *(_QWORD *)(v2 + 80);
    v8[3] = 0;
    v8[4] = 227;
    v8[2] = v5;
    memset(&v6, 0, sizeof(v6));
    v7[0] = 2;
    v7[1] = (uint64_t)v8;
    v7[2] = 227;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v6, "Input token {} is not in bounds [0, {})", 39, v7);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 4, &v6);
  }
  return this;
}

void sub_248CC3150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(uint64_t **this, unint64_t a2, char a3)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  E5RT::IOPort *v9;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::BufferObject *v11;
  cgm::token_generation_inference::common::logging::CGMTGILogger *DataSpan;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  E5RT::IOPort *v17;
  E5RT::OperandDescriptor *v18;
  E5RT::BufferObject *v19;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  std::__shared_weak_count *v33;
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *v37;

  if (this[27] != this[28])
  {
    v37 = (cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *)this;
    if ((a3 & 1) != 0 || (char *)this[9] - (char *)this[11] < a2)
    {
      v4 = this[19];
      v6 = *v4;
      v5 = (std::__shared_weak_count *)v4[1];
      v35 = v6;
      v36 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "state_keys_LHC");
      v9 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
      if (v34 < 0)
        operator delete(__p);
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v9);
      E5RT::IOPort::GetMemoryObject(v9);
      v11 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)__p);
      DataSpan = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::BufferObject::GetDataSpan(v11);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()((uint64_t *)&v37, PortDescriptorRef, DataSpan, v13);
      v14 = v33;
      if (v33)
      {
        v15 = (unint64_t *)&v33->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "state_values_LHC");
      v17 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
      if (v34 < 0)
        operator delete(__p);
      v18 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v17);
      E5RT::IOPort::GetMemoryObject(v17);
      v19 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)__p);
      v20 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::BufferObject::GetDataSpan(v19);
      cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()((uint64_t *)&v37, v18, v20, v21);
      v22 = v33;
      if (v33)
      {
        v23 = (unint64_t *)&v33->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = this[27];
      this[11] = (uint64_t *)((char *)this[11] - (this[28] - v25));
      this[28] = v25;
      v26 = this[24];
      v27 = this[25];
      LODWORD(__p) = -1;
      v28 = (uint64_t *)std::remove[abi:ne180100]<std::__wrap_iter<int *>,int>(v26, v27, &__p);
      if (this[25] != v28)
        this[25] = v28;
      v29 = v36;
      if (v36)
      {
        v30 = (unint64_t *)&v36->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
}

void sub_248CC33E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::ane::findBestStreamOpForQuery<cgm::token_generation_inference::ajax::utils::StreamOpPair>(uint64_t *a1@<X0>, const E5RT::ExecutionStreamOperation *a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  cgm::token_generation_inference::ajax::ane *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t QueryLength;
  const E5RT::ExecutionStreamOperation *v18;
  unint64_t ContextLength;
  _BOOL4 doesOpComputeLogits;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  BOOL v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error *exception;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;

  v46 = 0u;
  v47 = 0u;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    goto LABEL_57;
  v8 = 0;
  v9 = -1;
  while (1)
  {
    v10 = *(cgm::token_generation_inference::ajax::ane **)v4;
    v11 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)v45 = *(_QWORD *)v4;
    *(_QWORD *)&v45[8] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)&v45[16] = *(_QWORD *)(v4 + 16);
    *(_QWORD *)&v45[24] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    QueryLength = cgm::token_generation_inference::ajax::ane::getQueryLength(v10, a2);
    ContextLength = cgm::token_generation_inference::ajax::ane::getContextLength(*(cgm::token_generation_inference::ajax::ane **)v45, v18);
    doesOpComputeLogits = cgm::token_generation_inference::ajax::ane::doesOpComputeLogits((E5RT::ExecutionStreamOperation **)v45);
    v21 = (unint64_t)a2 % QueryLength;
    if (QueryLength >= a3)
      v22 = a3;
    else
      v22 = QueryLength;
    if (v21 + v22 <= QueryLength)
      v23 = 0;
    else
      v23 = QueryLength;
    if ((unint64_t)a2 + QueryLength - v21 + v23 > ContextLength)
      goto LABEL_16;
    if (QueryLength < a3)
    {
      v31 = QueryLength == v8;
      v32 = ContextLength < v9 && QueryLength == v8;
      if (ContextLength != v9)
        v31 = 0;
      if (QueryLength > v8 || v32 || v31 && !doesOpComputeLogits)
      {
        std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](&v46, (uint64_t *)v45);
        std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](&v47, (uint64_t *)&v45[16]);
        v24 = 0;
        v8 = QueryLength;
        v9 = ContextLength;
        goto LABEL_17;
      }
LABEL_16:
      v24 = 0;
      goto LABEL_17;
    }
    if (doesOpComputeLogits)
    {
      v33 = *(_OWORD *)v45;
      v34 = *(_OWORD *)&v45[16];
      *(_OWORD *)v45 = 0uLL;
      *a4 = v33;
      a4[1] = v34;
      *(_OWORD *)&v45[16] = 0uLL;
      v24 = 1;
    }
    else
    {
      v24 = 3;
    }
LABEL_17:
    v25 = *(std::__shared_weak_count **)&v45[24];
    if (*(_QWORD *)&v45[24])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v45[24] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *(std::__shared_weak_count **)&v45[8];
    if (*(_QWORD *)&v45[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&v45[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v24 != 3 && v24)
      break;
    v4 += 32;
    if (v4 == v5)
    {
      if (v9 != -1)
      {
        v35 = v46;
        v36 = v47;
        v46 = 0uLL;
        *a4 = v35;
        a4[1] = v36;
        v47 = 0uLL;
        goto LABEL_46;
      }
LABEL_57:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v45, "Could not find op to run next query");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, (std::string *)v45);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_46:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_248CC3744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::alignContextForQueryLength(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v7;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;

  v3 = *((_QWORD *)this + 11) % a2;
  v4 = a2 - v3;
  if (v3)
    v5 = v4 >= a3;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = 0;
    v8 = (void **)((char *)this + 216);
    v9 = (char *)this + 232;
    v10 = (void **)((char *)this + 192);
    v11 = (char *)this + 208;
    if (v4 <= 1)
      v12 = 1;
    else
      v12 = a2 - v3;
    do
    {
      v13 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v13 + 1;
      v15 = (char *)*((_QWORD *)this + 28);
      v14 = *((_QWORD *)this + 29);
      if ((unint64_t)v15 >= v14)
      {
        v17 = (char *)*v8;
        v18 = (v15 - (_BYTE *)*v8) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v9, v21);
          v17 = (char *)*((_QWORD *)this + 27);
          v15 = (char *)*((_QWORD *)this + 28);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        *(_QWORD *)v23 = v13;
        v16 = v23 + 8;
        while (v15 != v17)
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        *((_QWORD *)this + 27) = v23;
        *((_QWORD *)this + 28) = v16;
        *((_QWORD *)this + 29) = &v22[8 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v15 = v13;
        v16 = v15 + 8;
      }
      *((_QWORD *)this + 28) = v16;
      v26 = (char *)*((_QWORD *)this + 25);
      v25 = *((_QWORD *)this + 26);
      if ((unint64_t)v26 >= v25)
      {
        v28 = (char *)*v10;
        v29 = (v26 - (_BYTE *)*v10) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v11, v32);
          v28 = (char *)*((_QWORD *)this + 24);
          v26 = (char *)*((_QWORD *)this + 25);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = -1;
        v27 = v34 + 4;
        while (v26 != v28)
        {
          v35 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *((_QWORD *)this + 24) = v34;
        *((_QWORD *)this + 25) = v27;
        *((_QWORD *)this + 26) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v26 = -1;
        v27 = v26 + 4;
      }
      *((_QWORD *)this + 25) = v27;
      ++v7;
    }
    while (v7 != v12);
  }
}

uint64_t cgm::token_generation_inference::ajax::utils::inputSpan<int>()
{
  E5RT::IOPort *InputPortRef;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;
  uint64_t result;
  unint64_t v4;

  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 4)
    return 0;
  return result;
}

uint64_t _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE()
{
  E5RT::IOPort *InputPortRef;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;
  uint64_t result;
  unint64_t v4;

  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 2)
    return 0;
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::fillCacheHolesIfNeeded(unsigned long,BOOL)::$_0::operator()(uint64_t *a1, E5RT::OperandDescriptor *this, cgm::token_generation_inference::common::logging::CGMTGILogger *a3, unint64_t a4)
{
  uint64_t v7;
  E5RT::TensorDescriptor *v8;
  E5RT::TensorDescriptor *v9;
  _QWORD *TensorShape;
  unsigned int NumComponents;
  unsigned int v12;
  uint64_t v13;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v14;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v15;
  std::runtime_error *v16;
  std::runtime_error *exception;
  std::string v18;
  _BYTE v19[16];

  v7 = *a1;
  v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  E5RT::TensorDescriptor::GetTensorDataType(v8);
  v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  TensorShape = (_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v9);
  NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType *)v19);
  if (TensorShape[1] - *TensorShape != 40)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v18, "Unexpected KV cache shape.");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v18);
  }
  v12 = NumComponents;
  v13 = *(_QWORD *)(*TensorShape + 16) * *(_QWORD *)*TensorShape;
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v19) == 4
    && E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v19) == 2)
  {
    if (a4 >= 2)
      v14 = a3;
    else
      v14 = 0;
    cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(v14, a4 >> 1, (_QWORD *)(v7 + 216), *(_QWORD *)(v7 + 88), *(void **)(v7 + 72), v12, v13);
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v19) != 1
      || E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v19) != 1)
    {
      v16 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "Unexpected KV cache dtype.");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v16, 1, &v18);
    }
    if (a4)
      v15 = a3;
    else
      v15 = 0;
    cgm::token_generation_inference::ajax::kvcache_utils::fillCacheHoles(v15, a4, (_QWORD *)(v7 + 216), *(_QWORD *)(v7 + 88), *(void **)(v7 + 72), v12, v13);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v19);
}

void sub_248CC3BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a16);
  _Unwind_Resume(a1);
}

_DWORD *std::remove[abi:ne180100]<std::__wrap_iter<int *>,int>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getLastForwardLogits(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p;
  char v18;
  _QWORD v19[2];
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;

  v5 = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 15);
  cgm::token_generation_inference::ajax::ane::anyOpComputingLogits((uint64_t *)this + 19, &v20);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v19[0] = _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v19[1] = v6;
  if (v18 < 0)
    operator delete(__p);
  v7 = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEm(v19, *((_QWORD *)this + 14));
  *a2 = v4 - v5;
  a2[1] = v7;
  v8 = *((_QWORD *)this + 13);
  a2[2] = v9;
  a2[3] = v8;
  v10 = *((_QWORD *)this + 10);
  a2[4] = 1;
  a2[5] = v10;
  v11 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_248CC3D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE()
{
  E5RT::IOPort *OutputPortRef;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;
  uint64_t result;
  unint64_t v4;

  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(OutputPortRef);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  result = E5RT::BufferObject::GetDataSpan(v2);
  if (v4 < 2)
    return 0;
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset(std::vector<int> *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *exception;
  std::vector<int> *v7;
  void *v8;
  unint64_t begin;
  _QWORD v10[3];

  if (this[3].__end_cap_.__value_ < (int *)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v7 = this;
    v8 = exception;
    begin = (unint64_t)v7[3].__begin_;
    std::string::basic_string[abi:ne180100]<0>(v10, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(begin, (uint64_t)v10, (uint64_t)v8);
  }
  v4 = cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(a2, (uint64_t)&this[9]);
  if (v4 > ((char *)this[9].__end_ - (char *)this[9].__begin_) >> 3)
    cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset();
  v5 = v4;
  std::vector<unsigned long>::resize((uint64_t)&this[9], v4);
  this[3].__end_cap_.__value_ = (int *)(v5 + a2);
  std::vector<int>::resize(this + 8, v5 + a2);
}

void sub_248CC3EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeSteps(_QWORD *a1, uint64_t a2)
{
  int *v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::__sort<std::__less<int,int> &,int *>();
  v3 = v19;
  if (v19 != v18)
  {
    v4 = 0;
    v5 = "mContextTokens[shiftedStep] != -1";
    v3 = v18;
    while (1)
    {
      v6 = v3[v4] - v4;
      v7 = v6 + cgm::token_generation_inference::ajax::ane::numHolesBeforeStep(v6 + 1, (uint64_t)(a1 + 27));
      v17 = v7;
      v8 = a1[24];
      if (*(_DWORD *)(v8 + 4 * v7) == -1)
        break;
      if (v7 >= (a1[25] - v8) >> 2)
      {
        v16 = 513;
        v5 = "shiftedStep < mContextTokens.size()";
LABEL_17:
        __assert_rtn("purgeSteps", "ane_ajax_e5ml_model.mm", v16, v5);
      }
      *(_DWORD *)(v8 + 4 * v7) = -1;
      v9 = (char *)a1[27];
      v10 = a1[28] - (_QWORD)v9;
      if (v10)
      {
        v11 = v10 >> 3;
        do
        {
          v12 = v11 >> 1;
          v13 = (unint64_t *)&v9[8 * (v11 >> 1)];
          v15 = *v13;
          v14 = (char *)(v13 + 1);
          v11 += ~(v11 >> 1);
          if (v7 < v15)
            v11 = v12;
          else
            v9 = v14;
        }
        while (v11);
      }
      std::vector<unsigned long>::insert((uint64_t)(a1 + 27), v9, (char *)&v17);
      ++v4;
      v3 = v18;
      if (v4 >= v19 - v18)
        goto LABEL_12;
    }
    v16 = 512;
    goto LABEL_17;
  }
LABEL_12:
  if (v3)
  {
    v19 = v3;
    operator delete(v3);
  }
}

void sub_248CC40C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_248CC42EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeSteps(uint64_t a1, uint64_t a2)
{
  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeSteps((_QWORD *)(a1 - 40), a2);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 10);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::purgeUnusedKeyValueCache()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unsupported for now");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_248CC4380(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::utils ***this)
{
  NSObject *v2;
  uint64_t result;
  cgm::token_generation_inference::ajax::utils **v4;
  cgm::token_generation_inference::ajax::utils **v5;
  cgm::token_generation_inference::ajax::utils *v6;
  E5RT::ExecutionStreamOperation *v7;
  cgm::token_generation_inference::ajax::utils **v8;
  cgm::token_generation_inference::ajax::utils **v9;
  cgm::token_generation_inference::ajax::utils *v10;
  E5RT::ExecutionStreamOperation *v11;
  __int16 v12[8];

  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 0;
    _os_log_impl(&dword_248CAA000, v2, OS_LOG_TYPE_DEFAULT, "ANE model moving to dynamic state. Unwiring and deallocating IO buffers", (uint8_t *)v12, 2u);
  }

  result = ((uint64_t (*)(cgm::token_generation_inference::ajax::utils ***, _QWORD))(*this)[1])(this, 0);
  v4 = this[19];
  v5 = this[20];
  while (v4 != v5)
  {
    E5RT::ExecutionStream::ResetStream(v4[2]);
    v6 = *v4;
    v4 += 4;
    result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(v6, v7);
  }
  v8 = this[16];
  v9 = this[17];
  while (v8 != v9)
  {
    E5RT::ExecutionStream::ResetStream(v8[2]);
    v10 = *v8;
    v8 += 4;
    result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(v10, v11);
  }
  *((_BYTE *)this + 240) = 1;
  return result;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::moveToFullyLoadedState(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  NSObject *v2;
  uint8_t v3[16];

  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_248CAA000, v2, OS_LOG_TYPE_DEFAULT, "ANE model moving to fully loaded state from dynamic state. Allocating and wiring new IO buffers", v3, 2u);
  }

  cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::allocateAndBindMemoryForStreamOps(this);
  *((_BYTE *)this + 240) = 0;
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::clearAllState(E5RT::ExecutionStreamOperation ***this)
{
  NSObject *v2;
  os_signpost_id_t v3;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v4;
  NSObject *v5;
  NSObject *v6;
  void (**v7)(_QWORD);
  E5RT::ExecutionStreamOperation **v8;
  E5RT::ExecutionStreamOperation *v9;
  uint8_t v10[40];
  _QWORD aBlock[5];
  void *v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_signpost_id_generate(v2);

  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl(&dword_248CAA000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v3, "TGI_ANE_Clear_State", "", v10, 2u);
  }

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN3cgm26token_generation_inference4ajax16ANEAJAXE5MLModel13clearAllStateEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  aBlock[4] = v3;
  v7 = (void (**)(_QWORD))_Block_copy(aBlock);
  ((void (*)(E5RT::ExecutionStreamOperation ***, _QWORD))(*this)[1])(this, 0);
  v8 = this[19];
  if (this[20] == v8)
    __assert_rtn("clearAllState", "ane_ajax_e5ml_model.mm", 567, "mExtendStreamOps.size() > 0 && \"Expected ANE model to always have at least 1 extend op.\"");
  v9 = *v8;
  std::string::basic_string[abi:ne180100]<0>(v12, "in_embeddings");
  std::unordered_set<std::string>::unordered_set((uint64_t)v10, (unsigned __int8 *)v12, 1);
  cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(v9, v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  if (v13 < 0)
    operator delete(v12[0]);
  v7[2](v7);

}

void sub_248CC4678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN3cgm26token_generation_inference4ajax16ANEAJAXE5MLModel13clearAllStateEv_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *((_QWORD *)a1 + 4);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_248CAA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TGI_ANE_Clear_State", "", v5, 2u);
  }

}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::~ANEAJAXE5MLModel(cgm::token_generation_inference::ajax::ANEAJAXE5MLModel *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_2519DDFB8;
  *((_QWORD *)this + 5) = &unk_2519DE038;
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  v4 = (void **)((char *)this + 152);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 128);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_2519DDFB8;
  *((_QWORD *)this + 5) = &unk_2519DE038;
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  v4 = (void **)((char *)this + 152);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 128);
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
  MEMORY[0x2495AA834]();
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::make_format_args[abi:ne180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>,std::string const,std::string const>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v3 = *((unsigned __int8 *)result + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = result[1];
  if (v4 >= 0)
    v5 = result;
  else
    v5 = (uint64_t *)*result;
  *a3 = v5;
  a3[1] = v3;
  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  a3[3] = v6;
  a3[4] = 429;
  a3[2] = v8;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::AJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::AJAXE5MLModel *this)
{
  return (*(uint64_t (**)(cgm::token_generation_inference::ajax::AJAXE5MLModel *, _QWORD))(*(_QWORD *)this + 8))(this, 0);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 32;
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 16);
      result = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::unique_ptr<E5RT::ExecutionStreamOperation> *,std::back_insert_iterator<std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4)
{
  uint64_t *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  _QWORD v27[5];

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      if (*v5)
      {
        v8 = (_QWORD *)operator new();
        v9 = *v5;
        *v8 = &unk_2519DDE00;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = v9;
      }
      else
      {
        v8 = 0;
      }
      *v5 = 0;
      v11 = a4[1];
      v10 = (unint64_t)a4[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = (v11 - *a4) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = v10 - (_QWORD)*a4;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v27[4] = a4 + 2;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>>((uint64_t)(a4 + 2), v16);
        v19 = &v17[16 * v13];
        *(_QWORD *)v19 = v7;
        *((_QWORD *)v19 + 1) = v8;
        v21 = *a4;
        v20 = a4[1];
        if (v20 == *a4)
        {
          v24 = a4[1];
          v22 = &v17[16 * v13];
        }
        else
        {
          v22 = &v17[16 * v13];
          do
          {
            v23 = *((_OWORD *)v20 - 1);
            v20 -= 16;
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 16;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 1) = 0;
          }
          while (v20 != v21);
          v24 = *a4;
          v20 = a4[1];
        }
        v12 = v19 + 16;
        *a4 = v22;
        v27[0] = v24;
        v27[1] = v24;
        a4[1] = v19 + 16;
        v27[2] = v20;
        v25 = a4[2];
        a4[2] = &v17[16 * v18];
        v27[3] = v25;
        std::__split_buffer<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::~__split_buffer((uint64_t)v27);
      }
      else
      {
        *(_QWORD *)v11 = v7;
        *((_QWORD *)v11 + 1) = v8;
        v12 = v11 + 16;
      }
      a4[1] = v12;
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_248CC4D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>(__int128 *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  char v31;
  BOOL v32;
  uint64_t (*v33)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

LABEL_1:
  v10 = (uint64_t *)a1;
  while (2)
  {
    a1 = (__int128 *)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = *a3;
        v34 = (std::__shared_weak_count *)*(a2 - 1);
        v55 = *(a2 - 2);
        v56 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        v37 = v10[1];
        v53 = *v10;
        v54 = (std::__shared_weak_count *)v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = v33(&v55, &v53);
        v41 = v54;
        if (v54)
        {
          v42 = (unint64_t *)&v54->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v56;
        if (v56)
        {
          v45 = (unint64_t *)&v56->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v40)
        {
          v47 = *v10;
          *v10 = *(a2 - 2);
          *(a2 - 2) = v47;
          v48 = v10[1];
          v10[1] = *(a2 - 1);
          *(a2 - 1) = v48;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v11 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10, a2, a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
          return;
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(&v10[2 * (v12 >> 1)], v10, a2 - 2, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10, &v10[2 * (v12 >> 1)], a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10 + 2, v14 - 2, a2 - 4, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v10 + 4, &v10[2 * v13 + 2], a2 - 6, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v14 - 2, v14, &v10[2 * v13 + 2], a3);
          v15 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *a3;
          v17 = (std::__shared_weak_count *)*(v10 - 1);
          v51 = *(v10 - 2);
          v52 = v17;
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = v10[1];
          v49 = *v10;
          v50 = (std::__shared_weak_count *)v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = v16(&v51, &v49);
          v24 = v50;
          if (v50)
          {
            v25 = (unint64_t *)&v50->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v52;
          if (v52)
          {
            v28 = (unint64_t *)&v52->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if ((v23 & 1) == 0)
          {
            v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(a1, (__int128 *)a2, a3);
            a5 = 0;
            continue;
          }
        }
        v30 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>((uint64_t)a1, (__int128 *)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
        if ((v31 & 1) == 0)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,false>(a1, v30, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v30 + 2;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t *)a1, v30, a3);
        v10 = v30 + 2;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(v30 + 2, a2, a3))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v30;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v44 = *a3;
        v45 = (std::__shared_weak_count *)*(a2 - 3);
        v82 = *(a2 - 4);
        v83 = v45;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldxr(p_shared_owners);
          while (__stxr(v47 + 1, p_shared_owners));
        }
        v48 = (std::__shared_weak_count *)*(a2 - 1);
        v84 = *(a2 - 2);
        v85 = v48;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = v10[1];
        v78 = *v10;
        v79 = (std::__shared_weak_count *)v51;
        if (v51)
        {
          v52 = (unint64_t *)(v51 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = v10[3];
        v80 = v10[2];
        v81 = (std::__shared_weak_count *)v54;
        if (v54)
        {
          v55 = (unint64_t *)(v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v57 = v44(&v82, &v78);
        v58 = v81;
        if (v81)
        {
          v59 = (unint64_t *)&v81->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = v79;
        if (v79)
        {
          v62 = (unint64_t *)&v79->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = v85;
        if (v85)
        {
          v65 = (unint64_t *)&v85->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = v83;
        if (v83)
        {
          v68 = (unint64_t *)&v83->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (v57)
          std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, (__int128 *)a2 - 2);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, (uint64_t)(v10 + 4), (__int128 *)a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (__int128 *)a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (uint64_t)(v10 + 12), (__int128 *)a2 - 2, a3);
        return;
      default:
        if (v11 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v10, (uint64_t)a2, a2, a3);
          return;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)&v10[4 * (v12 >> 1)];
        if ((unint64_t)v11 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(&a1[4 * (v12 >> 1)], (uint64_t)a1, (__int128 *)a2 - 2, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, (uint64_t)&a1[4 * (v12 >> 1)], (__int128 *)a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1 + 4, (uint64_t)(v14 - 2), (__int128 *)a2 - 4, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1 + 8, (uint64_t)&a1[4 * v13 + 4], (__int128 *)a2 - 6, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)v14 - 4, (uint64_t)v14, (__int128 *)&a1[4 * v13 + 4], a3);
          std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, v14);
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *a3;
          v16 = (std::__shared_weak_count *)*(a1 - 3);
          v74 = *(a1 - 4);
          v75 = v16;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = (std::__shared_weak_count *)*(a1 - 1);
          v76 = *(a1 - 2);
          v77 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = a1[1];
          v70 = *a1;
          v71 = (std::__shared_weak_count *)v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = a1[3];
          v72 = a1[2];
          v73 = (std::__shared_weak_count *)v25;
          if (v25)
          {
            v26 = (unint64_t *)(v25 + 8);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = v15(&v74, &v70);
          v29 = v73;
          if (v73)
          {
            v30 = (unint64_t *)&v73->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v71;
          if (v71)
          {
            v33 = (unint64_t *)&v71->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = v77;
          if (v77)
          {
            v36 = (unint64_t *)&v77->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v38 = v75;
          if (v75)
          {
            v39 = (unint64_t *)&v75->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          if ((v28 & 1) == 0)
          {
            v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>((__int128 *)a1, (__int128 *)a2, a3);
            a5 = 0;
            continue;
          }
        }
        v41 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>((uint64_t)a1, (unint64_t)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
        if ((v42 & 1) == 0)
        {
LABEL_45:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(a1, v41, a3, a4, a5 & 1);
          a5 = 0;
          v10 = (uint64_t *)(v41 + 2);
          continue;
        }
        v43 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)a1, v41, a3);
        v10 = (uint64_t *)(v41 + 2);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)(v41 + 2), (__int128 *)a2, a3))
        {
          if (v43)
            continue;
          goto LABEL_45;
        }
        a2 = (uint64_t *)v41;
        if (!v43)
          goto LABEL_1;
        return;
    }
  }
}

void sub_248CC51BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  if ((_QWORD *)a1 != a2)
  {
    v5 = (_QWORD *)(a1 + 16);
    if ((_QWORD *)(a1 + 16) != a2)
    {
      v7 = a1;
      do
      {
        v8 = v5;
        v9 = *a3;
        v10 = *(std::__shared_weak_count **)(v7 + 24);
        v47 = *(_QWORD *)(v7 + 16);
        v48 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *(std::__shared_weak_count **)(v7 + 8);
        v45 = *(_QWORD *)v7;
        v46 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = v9(&v47, &v45);
        v17 = v46;
        if (v46)
        {
          v18 = (unint64_t *)&v46->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = v48;
        if (!v48)
          goto LABEL_19;
        v21 = (unint64_t *)&v48->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (v16)
          {
LABEL_20:
            v44 = *(_OWORD *)(v7 + 16);
            *v8 = 0;
            v8[1] = 0;
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v7);
            v23 = a1;
            if (v7 != a1)
            {
              while (1)
              {
                v24 = *a3;
                v43 = v44;
                if (*((_QWORD *)&v44 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v27 = v7 - 16;
                v41 = *(_QWORD *)(v7 - 16);
                v28 = *(std::__shared_weak_count **)(v7 - 8);
                v42 = v28;
                if (v28)
                {
                  v29 = (unint64_t *)&v28->__shared_owners_;
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = v24((uint64_t *)&v43, &v41);
                v32 = v42;
                if (v42)
                {
                  v33 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                v35 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
                if (!*((_QWORD *)&v43 + 1))
                  goto LABEL_36;
                v36 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                  if ((v31 & 1) == 0)
                  {
LABEL_43:
                    v23 = v7;
                    break;
                  }
                }
                else
                {
LABEL_36:
                  if (!v31)
                    goto LABEL_43;
                }
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, (__int128 *)(v7 - 16));
                v7 -= 16;
                if (v27 == a1)
                {
                  v23 = a1;
                  break;
                }
              }
            }
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v23, &v44);
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
            if (*((_QWORD *)&v44 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
        }
        else
        {
LABEL_19:
          if (v16)
            goto LABEL_20;
        }
        v5 = v8 + 2;
        v7 = (uint64_t)v8;
      }
      while (v8 + 2 != a2);
    }
  }
}

void sub_248CC5490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 16;
    if (a1 + 16 != a2)
    {
      do
      {
        v7 = v5;
        v8 = *a3;
        v9 = *(std::__shared_weak_count **)(v4 + 24);
        v46 = *(_QWORD *)(v4 + 16);
        v47 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *(std::__shared_weak_count **)(v4 + 8);
        v44 = *(_QWORD *)v4;
        v45 = v12;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = v8(&v46, &v44);
        v16 = v45;
        if (v45)
        {
          v17 = (unint64_t *)&v45->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v47;
        if (!v47)
          goto LABEL_18;
        v20 = (unint64_t *)&v47->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (v15)
          {
LABEL_19:
            v43 = *(_OWORD *)v7;
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            v22 = v7;
            do
            {
              while (1)
              {
                v23 = v22;
                v22 = v4;
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v23, (__int128 *)v4);
                v24 = *a3;
                v42 = v43;
                if (*((_QWORD *)&v43 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v4 -= 16;
                v40 = *(_QWORD *)(v22 - 16);
                v27 = *(std::__shared_weak_count **)(v22 - 8);
                v41 = v27;
                if (v27)
                {
                  v28 = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                v30 = v24((uint64_t *)&v42, &v40);
                v31 = v41;
                if (v41)
                {
                  v32 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
                if (*((_QWORD *)&v42 + 1))
                {
                  v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                    break;
                }
                if ((v30 & 1) == 0)
                  goto LABEL_38;
              }
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            while ((v30 & 1) != 0);
LABEL_38:
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v22, &v43);
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
        }
        else
        {
LABEL_18:
          if (v15)
            goto LABEL_19;
        }
        v5 = v7 + 16;
        v4 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
}

void sub_248CC5744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  std::__shared_weak_count **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count **v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  std::__shared_weak_count **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t (*v72)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;

  v8 = *a4;
  v10 = (std::__shared_weak_count **)(a2 + 1);
  v9 = (std::__shared_weak_count *)a2[1];
  v105 = *a2;
  v106 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count **)(a1 + 1);
  v13 = (std::__shared_weak_count *)a1[1];
  v103 = *a1;
  v104 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v8(&v105, &v103);
  v18 = v104;
  if (v104)
  {
    v19 = (unint64_t *)&v104->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v106;
  if (v106)
  {
    v22 = (unint64_t *)&v106->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *a4;
  v25 = (std::__shared_weak_count **)(a3 + 1);
  if ((v17 & 1) != 0)
  {
    v26 = *v25;
    v93 = *a3;
    v94 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (std::__shared_weak_count *)a2[1];
    v91 = *a2;
    v92 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = v24(&v93, &v91);
    v33 = v92;
    if (v92)
    {
      v34 = (unint64_t *)&v92->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v94;
    if (v94)
    {
      v37 = (unint64_t *)&v94->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *a1;
    if (v32)
    {
      *a1 = *a3;
      *a3 = v39;
      result = 1;
LABEL_87:
      v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_88;
    }
    *a1 = *a2;
    *a2 = v39;
    v71 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v71;
    v72 = *a4;
    v73 = (std::__shared_weak_count *)a3[1];
    v89 = *a3;
    v90 = v73;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v71 = *v10;
    }
    v87 = *a2;
    v88 = v71;
    if (v71)
    {
      v76 = (unint64_t *)&v71->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = v72(&v89, &v87);
    v79 = v88;
    if (v88)
    {
      v80 = (unint64_t *)&v88->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v90;
    if (!v90)
      goto LABEL_85;
    v83 = (unint64_t *)&v90->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      if (v78)
        goto LABEL_86;
    }
    else
    {
LABEL_85:
      if (v78)
      {
LABEL_86:
        v85 = *a2;
        *a2 = *a3;
        *a3 = v85;
        result = 2;
        v14 = v10;
        goto LABEL_87;
      }
    }
    return 1;
  }
  v41 = *v25;
  v101 = *a3;
  v102 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (std::__shared_weak_count *)a2[1];
  v99 = *a2;
  v100 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v24(&v101, &v99);
  v48 = v100;
  if (v100)
  {
    v49 = (unint64_t *)&v100->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v102;
  if (!v102)
    goto LABEL_51;
  v52 = (unint64_t *)&v102->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_51:
    if ((v47 & 1) != 0)
      goto LABEL_52;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if ((v47 & 1) == 0)
    return 0;
LABEL_52:
  v54 = *a2;
  *a2 = *a3;
  *a3 = v54;
  v55 = a2[1];
  a2[1] = a3[1];
  a3[1] = v55;
  v56 = *a4;
  v57 = (std::__shared_weak_count *)a2[1];
  v97 = *a2;
  v98 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = (std::__shared_weak_count *)a1[1];
  v95 = *a1;
  v96 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = v56(&v97, &v95);
  v64 = v96;
  if (v96)
  {
    v65 = (unint64_t *)&v96->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v98;
  if (!v98)
    goto LABEL_67;
  v68 = (unint64_t *)&v98->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (v63)
      goto LABEL_68;
  }
  else
  {
LABEL_67:
    if (v63)
    {
LABEL_68:
      v70 = *a1;
      *a1 = *a2;
      *a2 = v70;
      result = 2;
LABEL_88:
      v86 = *v14;
      *v14 = *v10;
      *v10 = v86;
      return result;
    }
  }
  return 1;
}

void sub_248CC5C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  __int128 *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t (*v22)(uint64_t *, uint64_t *);
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t (*v37)(uint64_t *, uint64_t *);
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t (*v50)(uint64_t *, uint64_t *);
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t *, uint64_t *);
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (*v78)(uint64_t *, uint64_t *);
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;

  v4 = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v114 = *(_QWORD *)a1;
  v7 = v114;
  *((_QWORD *)&v114 + 1) = v6;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a3;
  v112 = v7;
  v113 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
  v110 = *((_QWORD *)a2 - 2);
  v111 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v8(&v112, &v110);
  v15 = v111;
  if (v111)
  {
    v16 = (unint64_t *)&v111->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v113;
  if (!v113)
    goto LABEL_16;
  v19 = (unint64_t *)&v113->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_16:
    if ((v14 & 1) != 0)
      goto LABEL_17;
LABEL_37:
    v21 = a1 + 1;
    if (a1 + 1 >= v4)
      goto LABEL_60;
    v35 = a1;
    while (1)
    {
      v36 = v21;
      v37 = *a3;
      v106 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)v35 + 3);
      v104 = *(_QWORD *)v21;
      v105 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = v37((uint64_t *)&v106, &v104);
      v44 = v105;
      if (v105)
      {
        v45 = (unint64_t *)&v105->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_54;
      v48 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        if ((v43 & 1) != 0)
        {
LABEL_59:
          v21 = v36;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_54:
        if ((v43 & 1) != 0)
          goto LABEL_59;
      }
      v21 = v36 + 1;
      v35 = v36;
      if (v36 + 1 >= v4)
        goto LABEL_60;
    }
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if ((v14 & 1) == 0)
    goto LABEL_37;
LABEL_17:
  v21 = a1;
  do
  {
    v22 = *a3;
    v109 = v114;
    if (*((_QWORD *)&v114 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
    v107 = *((_QWORD *)v21 + 2);
    v108 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v22((uint64_t *)&v109, &v107);
    v29 = v108;
    if (v108)
    {
      v30 = (unint64_t *)&v108->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    ++v21;
  }
  while ((v28 & 1) == 0);
LABEL_60:
  if (v21 < v4)
  {
    do
    {
      v50 = *a3;
      v103 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v101 = *((_QWORD *)v4 - 2);
      v102 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = v50((uint64_t *)&v103, &v101);
      v57 = v102;
      if (v102)
      {
        v58 = (unint64_t *)&v102->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      --v4;
    }
    while ((v56 & 1) != 0);
  }
  while (v21 < v4)
  {
    v63 = *(_QWORD *)v21;
    *(_QWORD *)v21 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v63;
    v64 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v64;
    do
    {
      v65 = *a3;
      v100 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
      v98 = *((_QWORD *)v21 + 2);
      v99 = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = v65((uint64_t *)&v100, &v98);
      v72 = v99;
      if (v99)
      {
        v73 = (unint64_t *)&v99->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      ++v21;
    }
    while (!v71);
    do
    {
      v78 = *a3;
      v97 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v95 = *((_QWORD *)v4 - 2);
      v81 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v96 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v78((uint64_t *)&v97, &v95);
      v85 = v96;
      if (v96)
      {
        v86 = (unint64_t *)&v96->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      --v4;
    }
    while ((v84 & 1) != 0);
  }
  if (v21 - 1 != a1)
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)a1, v21 - 1);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v21 - 1), &v114);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  return v21;
}

void sub_248CC62D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1 - 112);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1 - 96);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<E5RT::ExecutionStreamOperation> *,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  unint64_t v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, __int128 *);
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, __int128 *);
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t *, __int128 *);
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t *, __int128 *);
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  __int128 v102;

  v102 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1;
  do
  {
    while (1)
    {
      v7 = (__int128 *)v6;
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(std::__shared_weak_count **)(v6 + 24);
      v6 += 16;
      v10 = *a3;
      v100 = v9;
      v101 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v99 = v102;
      if (*((_QWORD *)&v102 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v10(&v100, &v99);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v101;
      if (v101)
      {
        v20 = (unint64_t *)&v101->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
          break;
      }
      if ((v15 & 1) == 0)
        goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  while ((v15 & 1) != 0);
LABEL_20:
  if (v7 == (__int128 *)a1)
  {
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v36 = *a3;
        v38 = *((_QWORD *)a2 - 2);
        v37 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v97 = v38;
        v98 = v37;
        if (v37)
        {
          v39 = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v96 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = v36(&v97, &v96);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v98;
        if (v98)
        {
          v48 = (unint64_t *)&v98->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (v6 >= (unint64_t)a2)
          v50 = 1;
        else
          v50 = v43;
      }
      while ((v50 & 1) == 0);
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v23 = *((_QWORD *)a2 - 2);
        v22 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v24 = *a3;
        v94 = v23;
        v95 = v22;
        if (v22)
        {
          v25 = (unint64_t *)&v22->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v93 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v24(&v94, &v93);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        if (*((_QWORD *)&v93 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v95;
        if (v95)
        {
          v34 = (unint64_t *)&v95->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
            break;
        }
        if ((v29 & 1) != 0)
          goto LABEL_61;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    while ((v29 & 1) == 0);
  }
LABEL_61:
  if (v6 < (unint64_t)a2)
  {
    v51 = (__int128 *)v6;
    v52 = a2;
    do
    {
      v53 = *(_QWORD *)v51;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_QWORD *)v52 = v53;
      v54 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      *((_QWORD *)v52 + 1) = v54;
      do
      {
        while (1)
        {
          v7 = v51;
          v56 = *((_QWORD *)v51 + 2);
          v55 = (std::__shared_weak_count *)*((_QWORD *)v51++ + 3);
          v57 = *a3;
          v91 = v56;
          v92 = v55;
          if (v55)
          {
            v58 = (unint64_t *)&v55->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v90 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = v57(&v91, &v90);
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
          if (*((_QWORD *)&v90 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = v92;
          if (v92)
          {
            v67 = (unint64_t *)&v92->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
              break;
          }
          if ((v62 & 1) == 0)
            goto LABEL_84;
        }
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      while ((v62 & 1) != 0);
      do
      {
        while (1)
        {
LABEL_84:
          v69 = *((_QWORD *)v52-- - 2);
          v70 = *a3;
          v88 = v69;
          v71 = (std::__shared_weak_count *)*((_QWORD *)v52 + 1);
          v89 = v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v87 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v74 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v76 = v70(&v88, &v87);
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = v89;
          if (!v89)
            break;
          v81 = (unint64_t *)&v89->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (v82)
            break;
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
          if (v76)
            goto LABEL_100;
        }
      }
      while (!v76);
LABEL_100:
      ;
    }
    while (v51 < v52);
  }
  if (v7 != (__int128 *)a1)
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a1, v7);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v7, &v102);
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  return v7;
}

void sub_248CC6874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v13 - 96);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t (*v27)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = (std::__shared_weak_count *)*(a2 - 1);
      v69 = *(a2 - 2);
      v70 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = a1[1];
      v67 = *a1;
      v68 = (std::__shared_weak_count *)v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v8(&v69, &v67);
      v16 = v68;
      if (v68)
      {
        v17 = (unint64_t *)&v68->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v70;
      if (v70)
      {
        v20 = (unint64_t *)&v70->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v15)
      {
        v22 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v22;
        v23 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v24 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a1 + 2, a1 + 4, a3);
      v25 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v26 = 0;
      break;
  }
  while (1)
  {
    v27 = *a3;
    v28 = (std::__shared_weak_count *)v25[1];
    v65 = *v25;
    v66 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(std::__shared_weak_count **)(v24 + 8);
    v63 = *(_QWORD *)v24;
    v64 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = v27(&v65, &v63);
    v35 = v64;
    if (v64)
    {
      v36 = (unint64_t *)&v64->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
        break;
    }
    if (v34)
      goto LABEL_39;
LABEL_69:
    v24 = (uint64_t)v25;
    v25 += 2;
    if (v25 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v34)
    goto LABEL_69;
LABEL_39:
  v62 = *(_OWORD *)v25;
  *v25 = 0;
  v25[1] = 0;
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v25, (__int128 *)v24);
  v41 = (uint64_t)a1;
  if ((uint64_t *)v24 != a1)
  {
    while (1)
    {
      v42 = *a3;
      v61 = v62;
      if (*((_QWORD *)&v62 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (uint64_t *)(v24 - 16);
      v59 = *(_QWORD *)(v24 - 16);
      v46 = *(std::__shared_weak_count **)(v24 - 8);
      v60 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = v42((uint64_t *)&v61, &v59);
      v50 = v60;
      if (v60)
      {
        v51 = (unint64_t *)&v60->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (!*((_QWORD *)&v61 + 1))
        goto LABEL_55;
      v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        if ((v49 & 1) == 0)
        {
LABEL_62:
          v41 = v24;
          break;
        }
      }
      else
      {
LABEL_55:
        if (!v49)
          goto LABEL_62;
      }
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v24, (__int128 *)(v24 - 16));
      v24 -= 16;
      if (v45 == a1)
      {
        v41 = (uint64_t)a1;
        break;
      }
    }
  }
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v41, &v62);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (++v26 != 8)
    goto LABEL_69;
  return v25 + 2 == a2;
}

void sub_248CC6D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t (*v10)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a2, a3, a5);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a4[1];
  v68 = *a4;
  v69 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v10(&v68, &v66);
  v18 = v67;
  if (v67)
  {
    v19 = (unint64_t *)&v67->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v69;
  if (!v69)
    goto LABEL_16;
  v22 = (unint64_t *)&v69->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  v25 = a3[1];
  a3[1] = a4[1];
  a4[1] = v25;
  v26 = *a5;
  v27 = (std::__shared_weak_count *)a3[1];
  v64 = *a3;
  v65 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)a2[1];
  v62 = *a2;
  v63 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v64, &v62);
  v34 = v63;
  if (v63)
  {
    v35 = (unint64_t *)&v63->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v65;
  if (!v65)
    goto LABEL_32;
  v38 = (unint64_t *)&v65->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v33)
      return;
  }
  else
  {
LABEL_32:
    if (!v33)
      return;
  }
  v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  v42 = *a5;
  v43 = (std::__shared_weak_count *)a2[1];
  v60 = *a2;
  v61 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = a1[1];
  v58 = *a1;
  v59 = (std::__shared_weak_count *)v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v42(&v60, &v58);
  v50 = v59;
  if (v59)
  {
    v51 = (unint64_t *)&v59->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v61;
  if (v61)
  {
    v54 = (unint64_t *)&v61->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v49)
  {
    v56 = *a1;
    *a1 = *a2;
    *a2 = v56;
    v57 = a1[1];
    a1[1] = a2[1];
    a2[1] = v57;
  }
}

void sub_248CC708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t (*v12)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *, uint64_t *);
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t *);
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t *, uint64_t *);
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = (std::__shared_weak_count *)a5[1];
  v90 = *a5;
  v91 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = a4[1];
  v88 = *a4;
  v89 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v12(&v90, &v88);
  v20 = v89;
  if (v89)
  {
    v21 = (unint64_t *)&v89->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v91;
  if (!v91)
    goto LABEL_16;
  v24 = (unint64_t *)&v91->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v19)
      return;
  }
  else
  {
LABEL_16:
    if (!v19)
      return;
  }
  v26 = *a4;
  *a4 = *a5;
  *a5 = v26;
  v27 = a4[1];
  a4[1] = a5[1];
  a5[1] = v27;
  v28 = *a6;
  v29 = a4[1];
  v86 = *a4;
  v87 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = a3[1];
  v84 = *a3;
  v85 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = v28(&v86, &v84);
  v36 = v85;
  if (v85)
  {
    v37 = (unint64_t *)&v85->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v87;
  if (!v87)
    goto LABEL_32;
  v40 = (unint64_t *)&v87->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v35)
      return;
  }
  else
  {
LABEL_32:
    if (!v35)
      return;
  }
  v42 = *a3;
  *a3 = *a4;
  *a4 = v42;
  v43 = a3[1];
  a3[1] = a4[1];
  a4[1] = v43;
  v44 = *a6;
  v45 = a3[1];
  v82 = *a3;
  v83 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = a2[1];
  v80 = *a2;
  v81 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v44(&v82, &v80);
  v52 = v81;
  if (v81)
  {
    v53 = (unint64_t *)&v81->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v83;
  if (!v83)
    goto LABEL_48;
  v56 = (unint64_t *)&v83->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (!v51)
      return;
  }
  else
  {
LABEL_48:
    if (!v51)
      return;
  }
  v58 = *a2;
  *a2 = *a3;
  *a3 = v58;
  v59 = a2[1];
  a2[1] = a3[1];
  a3[1] = v59;
  v60 = *a6;
  v61 = a2[1];
  v78 = *a2;
  v79 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = a1[1];
  v76 = *a1;
  v77 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = v60(&v78, &v76);
  v68 = v77;
  if (v77)
  {
    v69 = (unint64_t *)&v77->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v79;
  if (v79)
  {
    v72 = (unint64_t *)&v79->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v67)
  {
    v74 = *a1;
    *a1 = *a2;
    *a2 = v74;
    v75 = a1[1];
    a1[1] = a2[1];
    a2[1] = v75;
  }
}

void sub_248CC74DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*,std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, __int128 *))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t *, __int128 *);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *a4;
        v16 = (std::__shared_weak_count *)v14[1];
        v36 = *v14;
        v37 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = a1[1];
        v34 = *a1;
        v35 = (std::__shared_weak_count *)v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v15(&v36, (__int128 *)&v34);
        v23 = v35;
        if (v35)
        {
          v24 = (unint64_t *)&v35->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
            break;
        }
        if (v22)
          goto LABEL_23;
LABEL_24:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_28;
        }
      }
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v22)
        goto LABEL_24;
LABEL_23:
      v29 = *v14;
      *v14 = *a1;
      *a1 = v29;
      v30 = v14[1];
      v14[1] = a1[1];
      a1[1] = v30;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, a4, v9, a1);
      goto LABEL_24;
    }
LABEL_28:
    if (v8 >= 17)
    {
      v31 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>((uint64_t)a1, v6, (uint64_t (**)(__int128 *, uint64_t *))a4, v31);
        v6 -= 16;
      }
      while (v31-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_248CC7728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, __int128 *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, __int128 *);
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(__int128 *, uint64_t *);
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;

  v4 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = a4;
  v73 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v9 = ((uint64_t)a4 - a1) >> 3;
  v10 = v9 + 1;
  v11 = a1 + 16 * (v9 + 1);
  v12 = v9 + 2;
  if (v9 + 2 >= a3)
    goto LABEL_21;
  v13 = *a2;
  v87 = *(_OWORD *)v11;
  if (*((_QWORD *)&v87 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(v11 + 24);
  v85 = *(_QWORD *)(v11 + 16);
  v86 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v13((uint64_t *)&v87, (__int128 *)&v85);
  v20 = v86;
  if (v86)
  {
    v21 = (unint64_t *)&v86->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v19 & 1) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (v19)
  {
LABEL_20:
    v11 += 16;
    v10 = v12;
  }
LABEL_21:
  v26 = (uint64_t (*)(uint64_t *, uint64_t *))*a2;
  v27 = *(std::__shared_weak_count **)(v11 + 8);
  v83 = *(_QWORD *)v11;
  v84 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)v5[1];
  v81 = *v5;
  v82 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v83, &v81);
  v34 = v82;
  if (v82)
  {
    v35 = (unint64_t *)&v82->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v84;
  if (!v84)
    goto LABEL_36;
  v38 = (unint64_t *)&v84->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v33 & 1) != 0)
      return;
  }
  else
  {
LABEL_36:
    if ((v33 & 1) != 0)
      return;
  }
  v80 = *(_OWORD *)v5;
  *v5 = 0;
  v5[1] = 0;
  do
  {
    v40 = v11;
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v11);
    if (v73 < v10)
      break;
    v41 = 2 * v10;
    v10 = (2 * v10) | 1;
    v11 = a1 + 16 * v10;
    v42 = v41 + 2;
    if (v41 + 2 < a3)
    {
      v43 = (uint64_t (*)(__int128 *, uint64_t *))*a2;
      v44 = *(_OWORD *)v11;
      v79 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = *(std::__shared_weak_count **)(v11 + 24);
      v77 = *(_QWORD *)(v11 + 16);
      v78 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v43(&v79, &v77);
      v51 = v78;
      if (v78)
      {
        v52 = (unint64_t *)&v78->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          if ((v50 & 1) == 0)
            goto LABEL_57;
LABEL_56:
          v11 += 16;
          v10 = v42;
          goto LABEL_57;
        }
      }
      if (v50)
        goto LABEL_56;
    }
LABEL_57:
    v57 = *a2;
    v58 = *(std::__shared_weak_count **)(v11 + 8);
    v75 = *(_QWORD *)v11;
    v76 = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v74 = v80;
    if (*((_QWORD *)&v80 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v57(&v75, &v74);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v76;
    if (v76)
    {
      v68 = (unint64_t *)&v76->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v5 = (uint64_t *)v40;
  }
  while (!v63);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v40, &v80);
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_248CC7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v17 - 112);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if ((__int128 *)v7 == v9)
    {
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, &v13);
    }
    else
    {
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, v9);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_248CC7CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t *);
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    a1 += 16 * v6 + 16;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_22;
    v12 = *a2;
    v13 = *(_OWORD *)a1;
    v29 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(std::__shared_weak_count **)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v19 = v12(&v29, &v27);
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_20;
    v24 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25)
    {
LABEL_20:
      if (!v19)
        goto LABEL_22;
LABEL_21:
      a1 += 16;
      v6 = v11;
      goto LABEL_22;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v19 & 1) != 0)
      goto LABEL_21;
LABEL_22:
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9, (__int128 *)a1);
  }
  while (v6 <= v8);
  return a1;
}

void sub_248CC7E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<E5RT::ExecutionStreamOperation>,std::shared_ptr<E5RT::ExecutionStreamOperation>),std::shared_ptr<E5RT::ExecutionStreamOperation>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, uint64_t *);
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(__int128 *, uint64_t *);
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = *a3;
    v10 = *v8;
    v46 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(a2 - 8);
    v14 = a2 - 16;
    v44 = *(_QWORD *)(a2 - 16);
    v45 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = v9(&v46, &v44);
    v18 = v45;
    if (v45)
    {
      v19 = (unint64_t *)&v45->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (!*((_QWORD *)&v46 + 1))
      goto LABEL_17;
    v22 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v17)
        return;
    }
    else
    {
LABEL_17:
      if (!v17)
        return;
    }
    v43 = *(_OWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    do
    {
      v24 = (uint64_t)v8;
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v14, v8);
      if (!v7)
        break;
      v7 = (v7 - 1) >> 1;
      v8 = (__int128 *)(a1 + 16 * v7);
      v25 = *a3;
      v26 = *v8;
      v42 = v26;
      if (*((_QWORD *)&v26 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v41 = v43;
      if (*((_QWORD *)&v43 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v25(&v42, (uint64_t *)&v41);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v14 = v24;
    }
    while ((v31 & 1) != 0);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v24, &v43);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_248CC8110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__emplace_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperation> &,std::shared_ptr<E5RT::ExecutionStream> &>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[5];

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v22[4] = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v22[0] = v12;
  v22[1] = v13;
  v22[3] = &v12[32 * v11];
  *(_QWORD *)v13 = *a2;
  v14 = a2[1];
  *((_QWORD *)v13 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_QWORD *)v13 + 2) = *a3;
  v17 = a3[1];
  *((_QWORD *)v13 + 3) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v22[2] = v13 + 32;
  std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v22);
  v20 = a1[1];
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_248CC825C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 32);
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v8[1] = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 32;
      v8 -= 2;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1 + 16);
    result = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1);
    v1 += 32;
  }
  return result;
}

uint64_t std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(v4 + 16) = v2 - 32;
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2 - 16);
      result = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t (*v15)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  char v42;
  BOOL v43;
  uint64_t (*v44)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

void sub_248CC8A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;

  va_start(va, a14);
  v18 = v14;
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v16 - 120);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t (*v38)(uint64_t *, uint64_t *);
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  if ((_QWORD *)a1 != a2)
  {
    v5 = (_QWORD *)(a1 + 32);
    if ((_QWORD *)(a1 + 32) != a2)
    {
      v7 = a1;
      do
      {
        v8 = v5;
        v9 = *a3;
        v10 = *(std::__shared_weak_count **)(v7 + 40);
        v82 = *(_QWORD *)(v7 + 32);
        v83 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *(std::__shared_weak_count **)(v7 + 56);
        v84 = *(_QWORD *)(v7 + 48);
        v85 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(std::__shared_weak_count **)(v7 + 8);
        v78 = *(_QWORD *)v7;
        v79 = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(std::__shared_weak_count **)(v7 + 24);
        v20 = v7 + 16;
        v80 = *(_QWORD *)(v7 + 16);
        v81 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = v9(&v82, &v78);
        v24 = v81;
        if (v81)
        {
          v25 = (unint64_t *)&v81->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = v79;
        if (v79)
        {
          v28 = (unint64_t *)&v79->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = v85;
        if (v85)
        {
          v31 = (unint64_t *)&v85->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v83;
        if (!v83)
          goto LABEL_35;
        v34 = (unint64_t *)&v83->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          if (v23)
          {
LABEL_36:
            v36 = *(_OWORD *)(v7 + 32);
            *v8 = 0;
            v8[1] = 0;
            v37 = *(_OWORD *)(v7 + 48);
            v76 = v36;
            v77 = v37;
            *(_QWORD *)(v7 + 48) = 0;
            *(_QWORD *)(v7 + 56) = 0;
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v7);
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v8 + 2), (__int128 *)(v7 + 16));
            if (v7 == a1)
            {
              v7 = a1;
            }
            else
            {
              do
              {
                v38 = *a3;
                v74 = v76;
                if (*((_QWORD *)&v76 + 1))
                {
                  v39 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
                  do
                    v40 = __ldxr(v39);
                  while (__stxr(v40 + 1, v39));
                }
                v75 = v77;
                if (*((_QWORD *)&v77 + 1))
                {
                  v41 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = v7 - 32;
                v70 = *(_QWORD *)(v7 - 32);
                v44 = *(std::__shared_weak_count **)(v7 - 24);
                v71 = v44;
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldxr(v45);
                  while (__stxr(v46 + 1, v45));
                }
                v47 = v7 - 16;
                v72 = *(_QWORD *)(v7 - 16);
                v48 = *(std::__shared_weak_count **)(v7 - 8);
                v73 = v48;
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                }
                v51 = v38((uint64_t *)&v74, &v70);
                v52 = v73;
                if (v73)
                {
                  v53 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                v55 = v71;
                if (v71)
                {
                  v56 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v58 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
                if (*((_QWORD *)&v75 + 1))
                {
                  v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v61 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
                if (!*((_QWORD *)&v74 + 1))
                  goto LABEL_68;
                v62 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                  if ((v51 & 1) == 0)
                    goto LABEL_76;
                }
                else
                {
LABEL_68:
                  if (!v51)
                    goto LABEL_76;
                }
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, (__int128 *)(v7 - 32));
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7 + 16, (__int128 *)(v7 - 16));
                v20 = v7 - 16;
                v7 -= 32;
              }
              while (v43 != a1);
              v7 = a1;
              v20 = v47;
            }
LABEL_76:
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, &v76);
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v20, &v77);
            v64 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            if (*((_QWORD *)&v77 + 1))
            {
              v65 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
          }
        }
        else
        {
LABEL_35:
          if (v23)
            goto LABEL_36;
        }
        v5 = v8 + 4;
        v7 = (uint64_t)v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_248CC8F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v28 - 120);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *, uint64_t *);
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 32;
    if (a1 + 32 != a2)
    {
      do
      {
        v7 = v5;
        v8 = *a3;
        v9 = *(std::__shared_weak_count **)(v4 + 40);
        v82 = *(_QWORD *)(v4 + 32);
        v83 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *(std::__shared_weak_count **)(v4 + 56);
        v13 = (__int128 *)(v4 + 48);
        v84 = *(_QWORD *)(v4 + 48);
        v85 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(std::__shared_weak_count **)(v4 + 8);
        v78 = *(_QWORD *)v4;
        v79 = v16;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(std::__shared_weak_count **)(v4 + 24);
        v80 = *(_QWORD *)(v4 + 16);
        v81 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v8(&v82, &v78);
        v23 = v81;
        if (v81)
        {
          v24 = (unint64_t *)&v81->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v79;
        if (v79)
        {
          v27 = (unint64_t *)&v79->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v85;
        if (v85)
        {
          v30 = (unint64_t *)&v85->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v83;
        if (!v83)
          goto LABEL_34;
        v33 = (unint64_t *)&v83->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          if (v22)
          {
LABEL_35:
            v35 = *(_OWORD *)v7;
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            v36 = *v13;
            v76 = v35;
            v77 = v36;
            *(_QWORD *)v13 = 0;
            *(_QWORD *)(v4 + 56) = 0;
            v37 = v7;
            do
            {
              while (1)
              {
                v38 = v37;
                v37 = v4;
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v38, (__int128 *)v4);
                v39 = v4 + 16;
                std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v38 + 16, (__int128 *)(v4 + 16));
                v40 = *a3;
                v74 = v76;
                if (*((_QWORD *)&v76 + 1))
                {
                  v41 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v75 = v77;
                if (*((_QWORD *)&v77 + 1))
                {
                  v43 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
                  do
                    v44 = __ldxr(v43);
                  while (__stxr(v44 + 1, v43));
                }
                v4 -= 32;
                v70 = *(_QWORD *)(v37 - 32);
                v45 = *(std::__shared_weak_count **)(v37 - 24);
                v71 = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v72 = *(_QWORD *)(v37 - 16);
                v48 = *(std::__shared_weak_count **)(v37 - 8);
                v73 = v48;
                if (v48)
                {
                  v49 = (unint64_t *)&v48->__shared_owners_;
                  do
                    v50 = __ldxr(v49);
                  while (__stxr(v50 + 1, v49));
                }
                v51 = v40((uint64_t *)&v74, &v70);
                v52 = v73;
                if (v73)
                {
                  v53 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                v55 = v71;
                if (v71)
                {
                  v56 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v58 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
                if (*((_QWORD *)&v75 + 1))
                {
                  v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v61 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
                if (*((_QWORD *)&v74 + 1))
                {
                  v62 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                    break;
                }
                if ((v51 & 1) == 0)
                  goto LABEL_70;
              }
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
            while ((v51 & 1) != 0);
LABEL_70:
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v37, &v76);
            std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v39, &v77);
            v64 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            if (*((_QWORD *)&v77 + 1))
            {
              v65 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v67 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
            if (*((_QWORD *)&v76 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
          }
        }
        else
        {
LABEL_34:
          if (v22)
            goto LABEL_35;
        }
        v5 = v7 + 32;
        v4 = v7;
      }
      while (v7 + 32 != a2);
    }
  }
}

void sub_248CC9424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v26 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t (*v85)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t (*v113)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  int v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;

  v8 = *a4;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  v176 = *(_QWORD *)a2;
  v177 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a2 + 24);
  v178 = *(_QWORD *)(a2 + 16);
  v179 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)a1[1];
  v172 = *a1;
  v173 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (std::__shared_weak_count *)a1[3];
  v174 = a1[2];
  v175 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = v8(&v176, &v172);
  v22 = v175;
  if (v175)
  {
    v23 = (unint64_t *)&v175->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v173;
  if (v173)
  {
    v26 = (unint64_t *)&v173->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v179;
  if (v179)
  {
    v29 = (unint64_t *)&v179->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v177;
  if (v177)
  {
    v32 = (unint64_t *)&v177->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *a4;
  if ((v21 & 1) == 0)
  {
    v60 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
    v168 = *(_QWORD *)a3;
    v169 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)a3 + 3);
    v170 = *((_QWORD *)a3 + 2);
    v171 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = *(std::__shared_weak_count **)(a2 + 8);
    v164 = *(_QWORD *)a2;
    v165 = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = *(std::__shared_weak_count **)(a2 + 24);
    v166 = *(_QWORD *)(a2 + 16);
    v167 = v69;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = v34(&v168, &v164);
    v73 = v167;
    if (v167)
    {
      v74 = (unint64_t *)&v167->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = v165;
    if (v165)
    {
      v77 = (unint64_t *)&v165->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = v171;
    if (v171)
    {
      v80 = (unint64_t *)&v171->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v169;
    if (!v169)
      goto LABEL_99;
    v83 = (unint64_t *)&v169->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      if ((v72 & 1) != 0)
        goto LABEL_100;
    }
    else
    {
LABEL_99:
      if ((v72 & 1) != 0)
      {
LABEL_100:
        std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a2, a3);
        v85 = *a4;
        v86 = *(std::__shared_weak_count **)(a2 + 8);
        v160 = *(_QWORD *)a2;
        v161 = v86;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v89 = *(std::__shared_weak_count **)(a2 + 24);
        v162 = *(_QWORD *)(a2 + 16);
        v163 = v89;
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
        v92 = (std::__shared_weak_count *)a1[1];
        v156 = *a1;
        v157 = v92;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = (std::__shared_weak_count *)a1[3];
        v158 = a1[2];
        v159 = v95;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        v98 = v85(&v160, &v156);
        v99 = v159;
        if (v159)
        {
          v100 = (unint64_t *)&v159->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = v157;
        if (v157)
        {
          v103 = (unint64_t *)&v157->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        v105 = v163;
        if (v163)
        {
          v106 = (unint64_t *)&v163->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v108 = v161;
        if (!v161)
          goto LABEL_131;
        v109 = (unint64_t *)&v161->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
          if (!v98)
            return 1;
        }
        else
        {
LABEL_131:
          if (!v98)
            return 1;
        }
        v111 = (uint64_t)a1;
        v112 = (__int128 *)a2;
LABEL_166:
        std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(v111, v112);
        return 2;
      }
    }
    return 0;
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
  v152 = *(_QWORD *)a3;
  v153 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)a3 + 3);
  v154 = *((_QWORD *)a3 + 2);
  v155 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(std::__shared_weak_count **)(a2 + 8);
  v148 = *(_QWORD *)a2;
  v149 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *(std::__shared_weak_count **)(a2 + 24);
  v150 = *(_QWORD *)(a2 + 16);
  v151 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v34(&v152, &v148);
  v48 = v151;
  if (v151)
  {
    v49 = (unint64_t *)&v151->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v149;
  if (v149)
  {
    v52 = (unint64_t *)&v149->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v155;
  if (v155)
  {
    v55 = (unint64_t *)&v155->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v153;
  if (v153)
  {
    v58 = (unint64_t *)&v153->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!v47)
  {
    std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, (__int128 *)a2);
    v113 = *a4;
    v114 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
    v144 = *(_QWORD *)a3;
    v145 = v114;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    v117 = (std::__shared_weak_count *)*((_QWORD *)a3 + 3);
    v146 = *((_QWORD *)a3 + 2);
    v147 = v117;
    if (v117)
    {
      v118 = (unint64_t *)&v117->__shared_owners_;
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
    v120 = *(std::__shared_weak_count **)(a2 + 8);
    v140 = *(_QWORD *)a2;
    v141 = v120;
    if (v120)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    v123 = *(std::__shared_weak_count **)(a2 + 24);
    v142 = *(_QWORD *)(a2 + 16);
    v143 = v123;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = v113(&v144, &v140);
    v127 = v143;
    if (v143)
    {
      v128 = (unint64_t *)&v143->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v141;
    if (v141)
    {
      v131 = (unint64_t *)&v141->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v133 = v147;
    if (v147)
    {
      v134 = (unint64_t *)&v147->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = v145;
    if (!v145)
      goto LABEL_164;
    v137 = (unint64_t *)&v145->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
      if (!v126)
        return 1;
    }
    else
    {
LABEL_164:
      if (!v126)
        return 1;
    }
    v111 = a2;
    v112 = a3;
    goto LABEL_166;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, a3);
  return 1;
}

void sub_248CC9CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  __int128 *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t (*v11)(uint64_t *, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  uint64_t (*v36)(uint64_t *, uint64_t *);
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t (*v62)(uint64_t *, uint64_t *);
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  char v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t (*v87)(uint64_t *, uint64_t *);
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  char v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t (*v111)(uint64_t *, uint64_t *);
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t (*v135)(uint64_t *, uint64_t *);
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  __int128 v205;

  v4 = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v204 = *(_QWORD *)a1;
  v7 = v204;
  *((_QWORD *)&v204 + 1) = v6;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v9 = (uint64_t)(a1 + 1);
  v8 = *((_QWORD *)a1 + 2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 3);
  *(_QWORD *)&v205 = v8;
  *((_QWORD *)&v205 + 1) = v10;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v11 = *a3;
  v200 = v7;
  v201 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v202 = v8;
  v203 = v10;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)a2 - 3);
  v196 = *((_QWORD *)a2 - 4);
  v197 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
  v198 = *((_QWORD *)a2 - 2);
  v199 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = v11(&v200, &v196);
  v23 = v199;
  if (v199)
  {
    v24 = (unint64_t *)&v199->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v197;
  if (v197)
  {
    v27 = (unint64_t *)&v197->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v203;
  if (v203)
  {
    v30 = (unint64_t *)&v203->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v201;
  if (!v201)
    goto LABEL_32;
  v33 = (unint64_t *)&v201->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_32:
    if ((v22 & 1) != 0)
      goto LABEL_33;
LABEL_69:
    v35 = a1 + 2;
    if (a1 + 2 >= v4)
      goto LABEL_108;
    v60 = a1;
    while (1)
    {
      v61 = v35;
      v62 = *a3;
      v188 = v204;
      if (*((_QWORD *)&v204 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v189 = v205;
      if (*((_QWORD *)&v205 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)v60 + 5);
      v184 = *(_QWORD *)v35;
      v185 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v71 = *((_QWORD *)v60 + 6);
      v70 = (std::__shared_weak_count *)*((_QWORD *)v60 + 7);
      v186 = v71;
      v187 = v70;
      if (v70)
      {
        v72 = (unint64_t *)&v70->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v74 = v62((uint64_t *)&v188, &v184);
      v75 = v187;
      if (v187)
      {
        v76 = (unint64_t *)&v187->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v185;
      if (v185)
      {
        v79 = (unint64_t *)&v185->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
      if (*((_QWORD *)&v189 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
      if (!*((_QWORD *)&v188 + 1))
        goto LABEL_102;
      v85 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
        if ((v74 & 1) != 0)
        {
LABEL_107:
          v35 = v61;
          goto LABEL_108;
        }
      }
      else
      {
LABEL_102:
        if ((v74 & 1) != 0)
          goto LABEL_107;
      }
      v35 = v61 + 2;
      v60 = v61;
      if (v61 + 2 >= v4)
        goto LABEL_108;
    }
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if ((v22 & 1) == 0)
    goto LABEL_69;
LABEL_33:
  v35 = a1;
  do
  {
    v36 = *a3;
    v194 = v204;
    if (*((_QWORD *)&v204 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v195 = v205;
    if (*((_QWORD *)&v205 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)v35 + 5);
    v190 = *((_QWORD *)v35 + 4);
    v191 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)v35 + 7);
    v192 = *((_QWORD *)v35 + 6);
    v193 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = v36((uint64_t *)&v194, &v190);
    v48 = v193;
    if (v193)
    {
      v49 = (unint64_t *)&v193->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v191;
    if (v191)
    {
      v52 = (unint64_t *)&v191->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
    if (*((_QWORD *)&v195 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v35 += 2;
  }
  while ((v47 & 1) == 0);
LABEL_108:
  if (v35 < v4)
  {
    do
    {
      v87 = *a3;
      v182 = v204;
      if (*((_QWORD *)&v204 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v183 = v205;
      if (*((_QWORD *)&v205 + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      v92 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
      v178 = *((_QWORD *)v4 - 4);
      v179 = v92;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v180 = *((_QWORD *)v4 - 2);
      v181 = v95;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      v98 = v87((uint64_t *)&v182, &v178);
      v99 = v181;
      if (v181)
      {
        v100 = (unint64_t *)&v181->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = v179;
      if (v179)
      {
        v103 = (unint64_t *)&v179->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
      if (*((_QWORD *)&v183 + 1))
      {
        v106 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
      if (*((_QWORD *)&v182 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v4 -= 2;
    }
    while ((v98 & 1) != 0);
  }
  while (v35 < v4)
  {
    std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)v35, v4);
    do
    {
      v111 = *a3;
      v176 = v204;
      if (*((_QWORD *)&v204 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v177 = v205;
      if (*((_QWORD *)&v205 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      v116 = (std::__shared_weak_count *)*((_QWORD *)v35 + 5);
      v172 = *((_QWORD *)v35 + 4);
      v173 = v116;
      if (v116)
      {
        v117 = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      v119 = (std::__shared_weak_count *)*((_QWORD *)v35 + 7);
      v174 = *((_QWORD *)v35 + 6);
      v175 = v119;
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      v122 = v111((uint64_t *)&v176, &v172);
      v123 = v175;
      if (v175)
      {
        v124 = (unint64_t *)&v175->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = v173;
      if (v173)
      {
        v127 = (unint64_t *)&v173->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v129 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
      if (*((_QWORD *)&v177 + 1))
      {
        v130 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (*((_QWORD *)&v176 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v35 += 2;
    }
    while (!v122);
    do
    {
      v135 = *a3;
      v170 = v204;
      if (*((_QWORD *)&v204 + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      v171 = v205;
      if (*((_QWORD *)&v205 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      v166 = *((_QWORD *)v4 - 4);
      v140 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
      v167 = v140;
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      v168 = *((_QWORD *)v4 - 2);
      v143 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v169 = v143;
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      v146 = v135((uint64_t *)&v170, &v166);
      v147 = v169;
      if (v169)
      {
        v148 = (unint64_t *)&v169->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      v150 = v167;
      if (v167)
      {
        v151 = (unint64_t *)&v167->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
      if (*((_QWORD *)&v171 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v157 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      v4 -= 2;
    }
    while ((v146 & 1) != 0);
  }
  if (v35 - 2 != a1)
  {
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)a1, v35 - 2);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9, v35 - 1);
  }
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v35 - 2), &v204);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v35 - 1), &v205);
  v159 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
  if (*((_QWORD *)&v205 + 1))
  {
    v160 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v163 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  return v35;
}

void sub_248CCA824(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 184);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 152);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 120);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cgm::token_generation_inference::ajax::utils::StreamOpPair *,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, __int128 *);
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t *, __int128 *);
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t (*v62)(uint64_t *, __int128 *);
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t *, __int128 *);
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  char v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t *, __int128 *);
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  int v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  __int128 v182;

  v6 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = a1 + 16;
  v8 = *(_OWORD *)(a1 + 16);
  v181 = v6;
  v182 = v8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = a1;
  do
  {
    while (1)
    {
      v10 = v9;
      v12 = *(_QWORD *)(v9 + 32);
      v11 = *(std::__shared_weak_count **)(v9 + 40);
      v9 += 32;
      v13 = *a3;
      v177 = v12;
      v178 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(std::__shared_weak_count **)(v10 + 56);
      v179 = *(_QWORD *)(v10 + 48);
      v180 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v175 = v181;
      if (*((_QWORD *)&v181 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v176 = v182;
      if (*((_QWORD *)&v182 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = v13(&v177, &v175);
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (*((_QWORD *)&v176 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      if (*((_QWORD *)&v175 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v180;
      if (v180)
      {
        v31 = (unint64_t *)&v180->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v178;
      if (v178)
      {
        v34 = (unint64_t *)&v178->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
          break;
      }
      if ((v23 & 1) == 0)
        goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  while ((v23 & 1) != 0);
LABEL_36:
  if (v10 == a1)
  {
    if (v9 >= a2)
    {
      v36 = a2;
    }
    else
    {
      do
      {
        v62 = *a3;
        v63 = *(std::__shared_weak_count **)(a2 - 24);
        v36 = a2 - 32;
        v171 = *(_QWORD *)(a2 - 32);
        v172 = v63;
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        v66 = *(std::__shared_weak_count **)(a2 - 8);
        v173 = *(_QWORD *)(a2 - 16);
        v174 = v66;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v169 = v181;
        if (*((_QWORD *)&v181 + 1))
        {
          v69 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v170 = v182;
        if (*((_QWORD *)&v182 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = v62(&v171, &v169);
        v74 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
        if (*((_QWORD *)&v170 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
        if (*((_QWORD *)&v169 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = v174;
        if (v174)
        {
          v81 = (unint64_t *)&v174->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = v172;
        if (v172)
        {
          v84 = (unint64_t *)&v172->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v9 >= v36)
          v86 = 1;
        else
          v86 = v73;
        a2 = v36;
      }
      while ((v86 & 1) == 0);
    }
  }
  else
  {
    v36 = a2;
    do
    {
      v38 = *(_QWORD *)(v36 - 32);
      v37 = *(std::__shared_weak_count **)(v36 - 24);
      v36 -= 32;
      v39 = *a3;
      v165 = v38;
      v166 = v37;
      if (v37)
      {
        v40 = (unint64_t *)&v37->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = *(std::__shared_weak_count **)(a2 - 8);
      v167 = *(_QWORD *)(a2 - 16);
      v168 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v163 = v181;
      if (*((_QWORD *)&v181 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v164 = v182;
      if (*((_QWORD *)&v182 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = v39(&v165, &v163);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
      if (*((_QWORD *)&v163 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v168;
      if (v168)
      {
        v57 = (unint64_t *)&v168->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v166;
      if (v166)
      {
        v60 = (unint64_t *)&v166->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      a2 = v36;
    }
    while ((v49 & 1) == 0);
  }
  if (v9 >= v36)
  {
    v88 = v9;
  }
  else
  {
    v87 = &v161;
    v88 = v9;
    v89 = v36;
    do
    {
      std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(v88, (__int128 *)v89);
      do
      {
        v90 = v88;
        v92 = *(_QWORD *)(v88 + 32);
        v91 = *(std::__shared_weak_count **)(v88 + 40);
        v88 += 32;
        v93 = *a3;
        v159 = v92;
        v160 = v91;
        if (v91)
        {
          v94 = (unint64_t *)&v91->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        v97 = *(_QWORD *)(v90 + 48);
        v96 = *(std::__shared_weak_count **)(v90 + 56);
        v161 = v97;
        v162 = v96;
        if (v96)
        {
          v98 = (unint64_t *)&v96->__shared_owners_;
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v157 = v181;
        if (*((_QWORD *)&v181 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v102 = v87;
        v158 = v182;
        if (*((_QWORD *)&v182 + 1))
        {
          v103 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        v105 = v93(&v159, &v157);
        v106 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
        if (*((_QWORD *)&v158 + 1))
        {
          v107 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v109 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (*((_QWORD *)&v157 + 1))
        {
          v110 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v162;
        if (v162)
        {
          v113 = (unint64_t *)&v162->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = v160;
        if (v160)
        {
          v116 = (unint64_t *)&v160->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v87 = v102;
      }
      while ((v105 & 1) != 0);
      do
      {
        while (1)
        {
          v118 = v89;
          v119 = *(_QWORD *)(v89 - 32);
          v89 -= 32;
          v120 = *a3;
          v153 = v119;
          v121 = *(std::__shared_weak_count **)(v89 + 8);
          v154 = v121;
          if (v121)
          {
            v122 = (unint64_t *)&v121->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          v155 = *(_QWORD *)(v118 - 16);
          v124 = *(std::__shared_weak_count **)(v118 - 8);
          v156 = v124;
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          v151 = v181;
          if (*((_QWORD *)&v181 + 1))
          {
            v127 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
            do
              v128 = __ldxr(v127);
            while (__stxr(v128 + 1, v127));
          }
          v152 = v182;
          if (*((_QWORD *)&v182 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          v131 = v120(&v153, &v151);
          v132 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
          if (*((_QWORD *)&v152 + 1))
          {
            v133 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v135 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
          {
            v136 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          v138 = v156;
          if (v156)
          {
            v139 = (unint64_t *)&v156->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v141 = v154;
          if (!v154)
            break;
          v142 = (unint64_t *)&v154->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (v143)
            break;
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          if (v131)
            goto LABEL_181;
        }
      }
      while (!v131);
LABEL_181:
      v87 = v102;
    }
    while (v88 < v89);
  }
  if (v88 - 32 != a1)
  {
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a1, (__int128 *)(v88 - 32));
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v7, (__int128 *)(v88 - 16));
  }
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v88 - 32, &v181);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v88 - 16, &v182);
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
  if (*((_QWORD *)&v182 + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  return v88 - 32;
}

void sub_248CCB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v37);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v38);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v39 - 224);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t (*v7)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v8;
  __int128 *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 *v35;
  int v36;
  uint64_t (*v37)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t (*v66)(uint64_t *, uint64_t *);
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;

  v5 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *a3;
      v8 = (std::__shared_weak_count *)*((_QWORD *)a2 - 3);
      v9 = a2 - 2;
      v119 = *((_QWORD *)a2 - 4);
      v120 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
      v121 = *((_QWORD *)a2 - 2);
      v122 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(std::__shared_weak_count **)(a1 + 8);
      v115 = *(_QWORD *)a1;
      v116 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(std::__shared_weak_count **)(a1 + 24);
      v117 = *(_QWORD *)(a1 + 16);
      v118 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = v7(&v119, &v115);
      v22 = v118;
      if (v118)
      {
        v23 = (unint64_t *)&v118->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v116;
      if (v116)
      {
        v26 = (unint64_t *)&v116->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v122;
      if (v122)
      {
        v29 = (unint64_t *)&v122->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v120;
      if (v120)
      {
        v32 = (unint64_t *)&v120->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v21)
        std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a1, v9);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)a1, a1 + 32, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)a1, a1 + 32, a1 + 64, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)a1, a1 + 32, a1 + 64, a1 + 96, a2 - 2, a3);
      return 1;
    default:
      v34 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t *)a1, a1 + 32, (__int128 *)(a1 + 64), a3);
      v35 = (__int128 *)(a1 + 96);
      if ((__int128 *)(a1 + 96) == a2)
        return 1;
      v36 = 0;
      break;
  }
  while (1)
  {
    v37 = *a3;
    v38 = (std::__shared_weak_count *)*((_QWORD *)v35 + 1);
    v111 = *(_QWORD *)v35;
    v112 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)v35 + 3);
    v113 = *((_QWORD *)v35 + 2);
    v114 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = *(std::__shared_weak_count **)(v34 + 8);
    v107 = *(_QWORD *)v34;
    v108 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(std::__shared_weak_count **)(v34 + 24);
    v48 = v34 + 16;
    v109 = *(_QWORD *)(v34 + 16);
    v110 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = v37(&v111, &v107);
    v52 = v110;
    if (v110)
    {
      v53 = (unint64_t *)&v110->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v108;
    if (v108)
    {
      v56 = (unint64_t *)&v108->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v114;
    if (v114)
    {
      v59 = (unint64_t *)&v114->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v112;
    if (v112)
    {
      v62 = (unint64_t *)&v112->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
        break;
    }
    if (v51)
      goto LABEL_71;
LABEL_122:
    v34 = (uint64_t)v35;
    v35 += 2;
    if (v35 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
  std::__shared_weak_count::__release_weak(v61);
  if (!v51)
    goto LABEL_122;
LABEL_71:
  v64 = *v35;
  v65 = v35[1];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v105 = v64;
  v106 = v65;
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v35, (__int128 *)v34);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v35 + 1), (__int128 *)(v34 + 16));
  if (v34 == a1)
  {
    v34 = a1;
  }
  else
  {
    do
    {
      v66 = *a3;
      v103 = v105;
      if (*((_QWORD *)&v105 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v104 = v106;
      if (*((_QWORD *)&v106 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = v34 - 32;
      v99 = *(_QWORD *)(v34 - 32);
      v72 = *(std::__shared_weak_count **)(v34 - 24);
      v100 = v72;
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v75 = v34 - 16;
      v101 = *(_QWORD *)(v34 - 16);
      v76 = *(std::__shared_weak_count **)(v34 - 8);
      v102 = v76;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = v66((uint64_t *)&v103, &v99);
      v80 = v102;
      if (v102)
      {
        v81 = (unint64_t *)&v102->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = v100;
      if (v100)
      {
        v84 = (unint64_t *)&v100->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
      if (*((_QWORD *)&v104 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (!*((_QWORD *)&v103 + 1))
        goto LABEL_103;
      v90 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        if ((v79 & 1) == 0)
          goto LABEL_111;
      }
      else
      {
LABEL_103:
        if (!v79)
          goto LABEL_111;
      }
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v34, (__int128 *)(v34 - 32));
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v34 + 16, (__int128 *)(v34 - 16));
      v48 = v34 - 16;
      v34 -= 32;
    }
    while (v71 != a1);
    v34 = a1;
    v48 = v75;
  }
LABEL_111:
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v34, &v105);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v48, &v106);
  v92 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (++v36 != 8)
    goto LABEL_122;
  return v35 + 2 == a2;
}

void sub_248CCB9E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3 - 152);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3 - 120);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 16;
  v5 = *(_OWORD *)(a1 + 16);
  v12 = v3;
  v13 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a1, a2);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v4, a2 + 1);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)a2, &v12);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(a2 + 1), &v13);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t (*v10)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t (*v62)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a2, (__int128 *)a3, a5);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
  v108 = *(_QWORD *)a4;
  v109 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)a4 + 3);
  v110 = *((_QWORD *)a4 + 2);
  v111 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a3 + 8);
  v104 = *(_QWORD *)a3;
  v105 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(a3 + 24);
  v106 = *(_QWORD *)(a3 + 16);
  v107 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v10(&v108, &v104);
  v24 = v107;
  if (v107)
  {
    v25 = (unint64_t *)&v107->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v105;
  if (v105)
  {
    v28 = (unint64_t *)&v105->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v111;
  if (v111)
  {
    v31 = (unint64_t *)&v111->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v109;
  if (!v109)
    goto LABEL_32;
  v34 = (unint64_t *)&v109->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (!v23)
      return;
  }
  else
  {
LABEL_32:
    if (!v23)
      return;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a3, a4);
  v36 = *a5;
  v37 = *(std::__shared_weak_count **)(a3 + 8);
  v100 = *(_QWORD *)a3;
  v101 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(a3 + 24);
  v102 = *(_QWORD *)(a3 + 16);
  v103 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(a2 + 8);
  v96 = *(_QWORD *)a2;
  v97 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = *(std::__shared_weak_count **)(a2 + 24);
  v98 = *(_QWORD *)(a2 + 16);
  v99 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v36(&v100, &v96);
  v50 = v99;
  if (v99)
  {
    v51 = (unint64_t *)&v99->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v97;
  if (v97)
  {
    v54 = (unint64_t *)&v97->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v103;
  if (v103)
  {
    v57 = (unint64_t *)&v103->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v101;
  if (!v101)
    goto LABEL_64;
  v60 = (unint64_t *)&v101->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    if (!v49)
      return;
  }
  else
  {
LABEL_64:
    if (!v49)
      return;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a2, (__int128 *)a3);
  v62 = *a5;
  v63 = *(std::__shared_weak_count **)(a2 + 8);
  v92 = *(_QWORD *)a2;
  v93 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(std::__shared_weak_count **)(a2 + 24);
  v94 = *(_QWORD *)(a2 + 16);
  v95 = v66;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = a1[1];
  v88 = *a1;
  v89 = (std::__shared_weak_count *)v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = a1[3];
  v90 = a1[2];
  v91 = (std::__shared_weak_count *)v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75 = v62(&v92, &v88);
  v76 = v91;
  if (v91)
  {
    v77 = (unint64_t *)&v91->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v89;
  if (v89)
  {
    v80 = (unint64_t *)&v89->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v95;
  if (v95)
  {
    v83 = (unint64_t *)&v95->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v93;
  if (v93)
  {
    v86 = (unint64_t *)&v93->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v75)
    std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, (__int128 *)a2);
}

void sub_248CCC080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t (*v12)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t (*v64)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t (*v90)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a2, a3, (__int128 *)a4, a6);
  v12 = *a6;
  v13 = (std::__shared_weak_count *)*((_QWORD *)a5 + 1);
  v144 = *(_QWORD *)a5;
  v145 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)a5 + 3);
  v146 = *((_QWORD *)a5 + 2);
  v147 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(a4 + 8);
  v140 = *(_QWORD *)a4;
  v141 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(std::__shared_weak_count **)(a4 + 24);
  v142 = *(_QWORD *)(a4 + 16);
  v143 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = v12(&v144, &v140);
  v26 = v143;
  if (v143)
  {
    v27 = (unint64_t *)&v143->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v141;
  if (v141)
  {
    v30 = (unint64_t *)&v141->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v147;
  if (v147)
  {
    v33 = (unint64_t *)&v147->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v145;
  if (!v145)
    goto LABEL_32;
  v36 = (unint64_t *)&v145->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!v25)
      return;
  }
  else
  {
LABEL_32:
    if (!v25)
      return;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a4, a5);
  v38 = *a6;
  v39 = *(std::__shared_weak_count **)(a4 + 8);
  v136 = *(_QWORD *)a4;
  v137 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *(std::__shared_weak_count **)(a4 + 24);
  v138 = *(_QWORD *)(a4 + 16);
  v139 = v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(std::__shared_weak_count **)(a3 + 8);
  v132 = *(_QWORD *)a3;
  v133 = v45;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(std::__shared_weak_count **)(a3 + 24);
  v134 = *(_QWORD *)(a3 + 16);
  v135 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v38(&v136, &v132);
  v52 = v135;
  if (v135)
  {
    v53 = (unint64_t *)&v135->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v133;
  if (v133)
  {
    v56 = (unint64_t *)&v133->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v139;
  if (v139)
  {
    v59 = (unint64_t *)&v139->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v137;
  if (!v137)
    goto LABEL_64;
  v62 = (unint64_t *)&v137->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (!v51)
      return;
  }
  else
  {
LABEL_64:
    if (!v51)
      return;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a3, (__int128 *)a4);
  v64 = *a6;
  v65 = *(std::__shared_weak_count **)(a3 + 8);
  v128 = *(_QWORD *)a3;
  v129 = v65;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = *(std::__shared_weak_count **)(a3 + 24);
  v130 = *(_QWORD *)(a3 + 16);
  v131 = v68;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = *(std::__shared_weak_count **)(a2 + 8);
  v124 = *(_QWORD *)a2;
  v125 = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *(std::__shared_weak_count **)(a2 + 24);
  v126 = *(_QWORD *)(a2 + 16);
  v127 = v74;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = v64(&v128, &v124);
  v78 = v127;
  if (v127)
  {
    v79 = (unint64_t *)&v127->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v125;
  if (v125)
  {
    v82 = (unint64_t *)&v125->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v131;
  if (v131)
  {
    v85 = (unint64_t *)&v131->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v129;
  if (!v129)
    goto LABEL_96;
  v88 = (unint64_t *)&v129->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    if (!v77)
      return;
  }
  else
  {
LABEL_96:
    if (!v77)
      return;
  }
  std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>(a2, (__int128 *)a3);
  v90 = *a6;
  v91 = *(std::__shared_weak_count **)(a2 + 8);
  v120 = *(_QWORD *)a2;
  v121 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = *(std::__shared_weak_count **)(a2 + 24);
  v122 = *(_QWORD *)(a2 + 16);
  v123 = v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = a1[1];
  v116 = *a1;
  v117 = (std::__shared_weak_count *)v97;
  if (v97)
  {
    v98 = (unint64_t *)(v97 + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  v100 = a1[3];
  v118 = a1[2];
  v119 = (std::__shared_weak_count *)v100;
  if (v100)
  {
    v101 = (unint64_t *)(v100 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v103 = v90(&v120, &v116);
  v104 = v119;
  if (v119)
  {
    v105 = (unint64_t *)&v119->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v117;
  if (v117)
  {
    v108 = (unint64_t *)&v117->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v123;
  if (v123)
  {
    v111 = (unint64_t *)&v123->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v121;
  if (v121)
  {
    v114 = (unint64_t *)&v121->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (v103)
    std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)a1, (__int128 *)a2);
}

void sub_248CCC79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_QWORD *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *a4;
        v16 = (std::__shared_weak_count *)v14[1];
        v48 = *v14;
        v49 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = (std::__shared_weak_count *)v14[3];
        v50 = v14[2];
        v51 = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = *(std::__shared_weak_count **)(a1 + 8);
        v44 = *(_QWORD *)a1;
        v45 = v22;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *(std::__shared_weak_count **)(a1 + 24);
        v46 = *(_QWORD *)(a1 + 16);
        v47 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = v15(&v48, &v44);
        v29 = v47;
        if (v47)
        {
          v30 = (unint64_t *)&v47->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v45;
        if (v45)
        {
          v33 = (unint64_t *)&v45->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = v51;
        if (v51)
        {
          v36 = (unint64_t *)&v51->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v49;
        if (v49)
        {
          v39 = (unint64_t *)&v49->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
            break;
        }
        if (v28)
          goto LABEL_39;
LABEL_40:
        v14 += 4;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_44;
        }
      }
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if (!v28)
        goto LABEL_40;
LABEL_39:
      std::swap[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair>((uint64_t)v14, (__int128 *)a1);
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a4, v9, (_QWORD *)a1);
      goto LABEL_40;
    }
LABEL_44:
    if (v8 >= 33)
    {
      v41 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, v6, a4, v41);
        v6 -= 32;
      }
      while (v41-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_248CCCAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a3);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (*v39)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t (*v100)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  int64_t v130;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;

  v4 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = a4;
  v130 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 5)
    return;
  v7 = ((uint64_t)a4 - a1) >> 4;
  v8 = v7 + 1;
  v9 = a1 + 32 * (v7 + 1);
  v10 = v7 + 2;
  if (v7 + 2 >= a3)
    goto LABEL_37;
  v11 = *a2;
  v12 = *(std::__shared_weak_count **)(v9 + 8);
  v161 = *(_QWORD *)v9;
  v162 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a1 + 32 * v8;
  v17 = *(_QWORD *)(v15 + 16);
  v16 = *(std::__shared_weak_count **)(v15 + 24);
  v163 = v17;
  v164 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(v9 + 40);
  v157 = *(_QWORD *)(v9 + 32);
  v158 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(v9 + 56);
  v159 = *(_QWORD *)(v9 + 48);
  v160 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = v11(&v161, &v157);
  v27 = v160;
  if (v160)
  {
    v28 = (unint64_t *)&v160->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v158;
  if (v158)
  {
    v31 = (unint64_t *)&v158->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v164;
  if (v164)
  {
    v34 = (unint64_t *)&v164->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v162;
  if (v162)
  {
    v37 = (unint64_t *)&v162->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if ((v26 & 1) == 0)
        goto LABEL_37;
      goto LABEL_36;
    }
  }
  if (v26)
  {
LABEL_36:
    v9 += 32;
    v8 = v10;
  }
LABEL_37:
  v39 = *a2;
  v40 = *(std::__shared_weak_count **)(v9 + 8);
  v153 = *(_QWORD *)v9;
  v154 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(v9 + 24);
  v155 = *(_QWORD *)(v9 + 16);
  v156 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (std::__shared_weak_count *)v5[1];
  v149 = *v5;
  v150 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = (std::__shared_weak_count *)v5[3];
  v151 = v5[2];
  v152 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = v39(&v153, &v149);
  v53 = v152;
  if (v152)
  {
    v54 = (unint64_t *)&v152->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v150;
  if (v150)
  {
    v57 = (unint64_t *)&v150->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v156;
  if (v156)
  {
    v60 = (unint64_t *)&v156->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v154;
  if (!v154)
    goto LABEL_68;
  v63 = (unint64_t *)&v154->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    if ((v52 & 1) != 0)
      return;
  }
  else
  {
LABEL_68:
    if ((v52 & 1) != 0)
      return;
  }
  v65 = *(_OWORD *)v5;
  v66 = *((_OWORD *)v5 + 1);
  *v5 = 0;
  v5[1] = 0;
  v147 = v65;
  v148 = v66;
  v5[2] = 0;
  v5[3] = 0;
  do
  {
    v67 = v9;
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v5, (__int128 *)v9);
    v68 = v9 + 16;
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)(v5 + 2), (__int128 *)(v9 + 16));
    if (v130 < v8)
      break;
    v69 = 2 * v8;
    v70 = (2 * v8) | 1;
    v8 = v70;
    v9 = a1 + 32 * v70;
    v71 = v69 + 2;
    if (v69 + 2 < a3)
    {
      v72 = *a2;
      v73 = *(std::__shared_weak_count **)(v9 + 8);
      v143 = *(_QWORD *)v9;
      v144 = v73;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v76 = a1 + 32 * v70;
      v78 = *(_QWORD *)(v76 + 16);
      v77 = *(std::__shared_weak_count **)(v76 + 24);
      v145 = v78;
      v146 = v77;
      if (v77)
      {
        v79 = (unint64_t *)&v77->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = *(std::__shared_weak_count **)(v9 + 40);
      v139 = *(_QWORD *)(v9 + 32);
      v140 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = *(std::__shared_weak_count **)(v9 + 56);
      v141 = *(_QWORD *)(v9 + 48);
      v142 = v84;
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v72(&v143, &v139);
      v88 = v142;
      if (v142)
      {
        v89 = (unint64_t *)&v142->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v91 = v140;
      if (v140)
      {
        v92 = (unint64_t *)&v140->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = v146;
      if (v146)
      {
        v95 = (unint64_t *)&v146->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = v144;
      if (v144)
      {
        v98 = (unint64_t *)&v144->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
          if ((v87 & 1) == 0)
            goto LABEL_105;
LABEL_104:
          v9 += 32;
          v8 = v71;
          goto LABEL_105;
        }
      }
      if (v87)
        goto LABEL_104;
    }
LABEL_105:
    v100 = *a2;
    v101 = *(std::__shared_weak_count **)(v9 + 8);
    v135 = *(_QWORD *)v9;
    v136 = v101;
    if (v101)
    {
      v102 = (unint64_t *)&v101->__shared_owners_;
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    v104 = *(std::__shared_weak_count **)(v9 + 24);
    v137 = *(_QWORD *)(v9 + 16);
    v138 = v104;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v133 = v147;
    if (*((_QWORD *)&v147 + 1))
    {
      v107 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
    v134 = v148;
    if (*((_QWORD *)&v148 + 1))
    {
      v109 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    v111 = v100(&v135, (uint64_t *)&v133);
    v112 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    if (*((_QWORD *)&v133 + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v138;
    if (v138)
    {
      v119 = (unint64_t *)&v138->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = v136;
    if (v136)
    {
      v122 = (unint64_t *)&v136->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v5 = (_QWORD *)v67;
  }
  while (!v111);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v67, &v147);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v68, &v148);
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
}

void sub_248CCD2C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3 - 152);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3 - 120);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;

  if (a4 >= 2)
  {
    v7 = *(_OWORD *)a1;
    v8 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v20 = v7;
    v21 = v8;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, a3, a4);
    v10 = v9;
    v11 = a2 - 32;
    v12 = v9 + 16;
    if (v9 == a2 - 32)
    {
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9, &v20);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v12, &v21);
    }
    else
    {
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9, (__int128 *)(a2 - 32));
      v13 = (__int128 *)(a2 - 16);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v12, v13);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v11, &v20);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)v13, &v21);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(a1, v10 + 32, a3, (v10 + 32 - a1) >> 5);
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_248CCD4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    v10 = v6 + 1;
    a1 += 32 * (v6 + 1);
    v11 = 2 * v6;
    v6 = (2 * v6) | 1;
    v12 = v11 + 2;
    if (v11 + 2 >= a3)
      goto LABEL_38;
    v13 = *a2;
    v14 = *(std::__shared_weak_count **)(a1 + 8);
    v46 = *(_QWORD *)a1;
    v47 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = v9 + 32 * v10;
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(std::__shared_weak_count **)(v17 + 24);
    v48 = v19;
    v49 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 32);
    v43 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(std::__shared_weak_count **)(a1 + 56);
    v44 = *(_QWORD *)(a1 + 48);
    v45 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v13(&v46, &v42);
    v29 = v45;
    if (v45)
    {
      v30 = (unint64_t *)&v45->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v43;
    if (v43)
    {
      v33 = (unint64_t *)&v43->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v47;
    if (!v47)
      goto LABEL_36;
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (v40)
    {
LABEL_36:
      if (!v28)
        goto LABEL_38;
LABEL_37:
      a1 += 32;
      v6 = v12;
      goto LABEL_38;
    }
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((v28 & 1) != 0)
      goto LABEL_37;
LABEL_38:
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9, (__int128 *)a1);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v9 + 16, (__int128 *)(a1 + 16));
  }
  while (v6 <= v8);
  return a1;
}

void sub_248CCD740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a3);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cgm::token_generation_inference::ajax::utils::StreamOpPair,cgm::token_generation_inference::ajax::utils::StreamOpPair),cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 32 * (v4 >> 1);
    v9 = *a3;
    v10 = *(std::__shared_weak_count **)(v8 + 8);
    v83 = *(_QWORD *)v8;
    v84 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(std::__shared_weak_count **)(v8 + 24);
    v85 = *(_QWORD *)(v8 + 16);
    v86 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(std::__shared_weak_count **)(a2 - 24);
    v17 = a2 - 32;
    v79 = *(_QWORD *)(a2 - 32);
    v80 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(std::__shared_weak_count **)(a2 - 8);
    v21 = a2 - 16;
    v81 = *(_QWORD *)(a2 - 16);
    v82 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v9(&v83, &v79);
    v25 = v82;
    if (v82)
    {
      v26 = (unint64_t *)&v82->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v80;
    if (v80)
    {
      v29 = (unint64_t *)&v80->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v86;
    if (v86)
    {
      v32 = (unint64_t *)&v86->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v84;
    if (!v84)
      goto LABEL_33;
    v35 = (unint64_t *)&v84->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v24)
        return;
    }
    else
    {
LABEL_33:
      if (!v24)
        return;
    }
    v37 = *(_OWORD *)v17;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    v38 = *(_OWORD *)v21;
    v77 = v37;
    v78 = v38;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    do
    {
      v39 = v8;
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v17, (__int128 *)v8);
      v40 = v8 + 16;
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v17 + 16, (__int128 *)(v8 + 16));
      if (!v7)
        break;
      v7 = (v7 - 1) >> 1;
      v8 = a1 + 32 * v7;
      v41 = *a3;
      v42 = *(std::__shared_weak_count **)(v8 + 8);
      v73 = *(_QWORD *)v8;
      v74 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = *(std::__shared_weak_count **)(v8 + 24);
      v75 = *(_QWORD *)(v8 + 16);
      v76 = v45;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v71 = v77;
      if (*((_QWORD *)&v77 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v72 = v78;
      if (*((_QWORD *)&v78 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = v41(&v73, (uint64_t *)&v71);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = v76;
      if (v76)
      {
        v60 = (unint64_t *)&v76->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = v74;
      if (v74)
      {
        v63 = (unint64_t *)&v74->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v17 = v39;
    }
    while ((v52 & 1) != 0);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v39, &v77);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](v40, &v78);
    v65 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v66 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
}

void sub_248CCDBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va;

  va_start(va, a16);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v18 - 120);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_248CCDEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248CCE248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2495AA834);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_248CCE428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_248CCE694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CCE73C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_248CCE87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__func()
{
  JUMPOUT(0x2495AA834);
}

_QWORD *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2519DE1E0;
  return result;
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2519DE1E0;
}

BOOL std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (cgm::token_generation_inference::ajax::ane::isExtendFunction(a3))
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 != 15)
    return 1;
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  v8 = *v7;
  v9 = *(uint64_t *)((char *)v7 + 7);
  return v8 != 0x626D655F64616F6CLL || v9 != 0x73676E6964646562;
}

uint64_t std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_0>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target_type()
{
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::~__func()
{
  JUMPOUT(0x2495AA834);
}

_QWORD *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2519DE270;
  return result;
}

void std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2519DE270;
}

BOOL std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return cgm::token_generation_inference::ajax::ane::isExtendFunction(a3);
}

uint64_t std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1,std::allocator<cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(TGIE5ModelConfiguration const&)::$_1>,BOOL ()(std::string const&,E5RT::ProgramFunction const&)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_248CCEDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CCEE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string*,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_248CCF03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string const*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_248CCF150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string*,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_248CCF460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__insert_with_size[abi:ne180100]<std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>,std::__wrap_iter<cgm::token_generation_inference::ajax::utils::StreamOpPair const*>>(uint64_t *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v31[2];
  uint64_t *v32;
  char *v33;
  uint64_t v34;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 5;
      if (v20 >= a5)
      {
        v21 = &a3[4 * a5];
      }
      else
      {
        v21 = &a3[4 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[4 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>((uint64_t)v31, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = ((uint64_t)a2 - v13) >> 5;
      v16 = v10 - v13;
      if (v16 >> 4 > v14)
        v14 = v16 >> 4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
        v17 = 0x7FFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v34 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>>(v9, v17);
      else
        v18 = 0;
      v22 = (uint64_t *)&v18[32 * v15];
      v31[0] = v18;
      v31[1] = v22;
      v32 = v22;
      v33 = &v18[32 * v17];
      v23 = &v22[4 * a5];
      do
      {
        *v22 = *v7;
        v24 = v7[1];
        v22[1] = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v22[2] = v7[2];
        v27 = v7[3];
        v22[3] = v27;
        if (v27)
        {
          v28 = (unint64_t *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v22 += 4;
        v7 += 4;
      }
      while (v22 != v23);
      v32 = v23;
      v5 = (_QWORD *)std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(a1, v31, (uint64_t)v5);
      std::__split_buffer<cgm::token_generation_inference::ajax::utils::StreamOpPair>::~__split_buffer((uint64_t)v31);
    }
  }
  return v5;
}

void sub_248CCF62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_OWORD *)v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v8[1] = *(_OWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v8 += 2;
      v9 += 32;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<cgm::token_generation_inference::ajax::utils::StreamOpPair>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>,std::reverse_iterator<cgm::token_generation_inference::ajax::utils::StreamOpPair*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(v7, a3, a1[1], (_OWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[3];
  char v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a4;
  v15 = a4;
  v14 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v4[2] = a2[2];
      v8 = a2[3];
      v4[3] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 4;
      v4 += 4;
    }
    while (a2 != a3);
    v15 = v4;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 32;
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v1 - 16);
      result = std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v3);
      v1 = v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *,cgm::token_generation_inference::ajax::utils::StreamOpPair *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a4 - 32, (__int128 *)(v7 - 32));
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a4 - 16, (__int128 *)(v7 - 16));
      a4 -= 32;
      v7 -= 32;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair const*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a4, v5);
    std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100](a4 + 2, v5 + 2);
    a4 += 4;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*,cgm::token_generation_inference::ajax::utils::StreamOpPair*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  _QWORD v6[3];
  char v7;
  _OWORD *v8;
  _OWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v4[1] = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v4 += 2;
      a2 += 32;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cgm::token_generation_inference::ajax::utils::StreamOpPair>,cgm::token_generation_inference::ajax::utils::StreamOpPair*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_248CCFC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CCFD3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_248CCFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_248CD0074(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_248CD0314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

os_log_t cgm::token_generation_inference::common::logging::createLogForCategoryString(cgm::token_generation_inference::common::logging *this, const char *a2)
{
  return os_log_create("com.apple.tokengeneration", (const char *)this);
}

void *cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(cgm::token_generation_inference::common::logging::CGMTGILogger *this)
{
  unsigned __int8 v1;
  void **p_cache;
  int v4;

  p_cache = _TtC24TokenGenerationInference26TwoStageSpeculativeDecoder.cache;
  if ((v1 & 1) == 0)
  {
    p_cache = (void **)(_TtC24TokenGenerationInference26TwoStageSpeculativeDecoder + 16);
    if (v4)
    {
      cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(void)::logger = (uint64_t)os_log_create("com.apple.tokengeneration", "OnDeviceLanguageModel");
      p_cache = (void **)(_TtC24TokenGenerationInference26TwoStageSpeculativeDecoder + 16);
    }
  }
  return p_cache[54];
}

void sub_248CD0840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, TGIE5ModelConfiguration *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void TGIE5ModelConfiguration::~TGIE5ModelConfiguration(TGIE5ModelConfiguration *this)
{
  __raw *p_var1;

  if (*((char *)&this[2].var1.var0.var0.var0.var0.var1 + 23) < 0)
    operator delete(this[2].var1.var0.var0.var0.var0.var1.var0);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)(&this[1].var1.var0.var0.var0.var0.var1 + 1));
  p_var1 = (__raw *)&this[1];
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_var1);
  p_var1 = &this->var1.var0.var0.var1;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_var1);
  if (*((char *)&this->var1.var0.var0.var0.var0.var1 + 23) < 0)
    operator delete(this->var1.var0.var0.var0.var0.var1.var0);
}

cgm::token_generation_inference::ajax::AJAXE5Error *`anonymous namespace'::e5RunnerErrorCodeFromRuntimeError(_anonymous_namespace_ *this, const std::runtime_error *a2)
{
  cgm::token_generation_inference::ajax::AJAXE5Error *result;
  uint64_t v3;

  if (result)
  {
    v3 = cgm::token_generation_inference::ajax::AJAXE5Error::getErrorCode(result) - 1;
    if (v3 > 3)
      return 0;
    else
      return (cgm::token_generation_inference::ajax::AJAXE5Error *)(v3 + 1);
  }
  return result;
}

void sub_248CD12D4()
{
  void *v0;
  void *v1;

  __cxa_end_catch();
  JUMPOUT(0x248CD10E4);
}

void sub_248CD12FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::tokenNSArrayToVector(void *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  id v3;
  unint64_t i;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  std::vector<unsigned int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  id v19;

  v3 = a1;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  v19 = v3;
  std::vector<int>::reserve(a2, objc_msgSend(v3, "count"));
  for (i = 0; i < objc_msgSend(v19, "count"); ++i)
  {
    objc_msgSend(v19, "objectAtIndexedSubscript:", i);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "intValue");
    v7 = v6;
    end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      begin = a2->__begin_;
      v12 = end - a2->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v15);
        begin = a2->__begin_;
        end = a2->__end_;
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[4 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      while (end != begin)
      {
        v18 = *--end;
        *--v17 = v18;
      }
      a2->__begin_ = v17;
      a2->__end_ = v10;
      a2->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v6;
      v10 = end + 1;
    }
    a2->__end_ = v10;

  }
}

void sub_248CD1468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_248CD15A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_248CD166C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::tokenNSArrayToUIntVector(void *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  id v3;
  unint64_t i;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  std::vector<unsigned int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  id v19;

  v3 = a1;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  v19 = v3;
  std::vector<int>::reserve(a2, objc_msgSend(v3, "count"));
  for (i = 0; i < objc_msgSend(v19, "count"); ++i)
  {
    objc_msgSend(v19, "objectAtIndexedSubscript:", i);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "unsignedIntValue");
    v7 = v6;
    end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      begin = a2->__begin_;
      v12 = end - a2->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v15);
        begin = a2->__begin_;
        end = a2->__end_;
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[4 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      while (end != begin)
      {
        v18 = *--end;
        *--v17 = v18;
      }
      a2->__begin_ = v17;
      a2->__end_ = v10;
      a2->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v6;
      v10 = end + 1;
    }
    a2->__end_ = v10;

  }
}

void sub_248CD17FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_248CD19E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248CD1CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_248CD1DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_248CD1F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _anonymous_namespace_ *v25;
  NSObject *v26;
  const std::runtime_error *v27;
  void *v28;
  cgm::token_generation_inference::ajax::AJAXE5Error *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a2 == 1)
  {
    v25 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
    objc_msgSend(*(id *)(v22 + 648), "log");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      +[E5RunnerObjC compileModelWithConfiguration:error:].cold.1((uint64_t)v25, v26);

    if (v21)
    {
      v28 = (void *)MEMORY[0x24BDD1540];
      a13 = *MEMORY[0x24BDD0FC8];
      v30 = (void *)MEMORY[0x24BDD17C8];
      (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)v25 + 16))(v25);
      objc_msgSend(v30, "stringWithFormat:", CFSTR("Failed to compile model: %s."));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      a14 = (uint64_t)v31;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &a14, &a13, 1);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "errorWithDomain:code:userInfo:", CFSTR("com.apple.TokenGenerationInference.E5Runner"), v29, v32);
      *v21 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x248CD1F14);
  }

  _Unwind_Resume(a1);
}

void `anonymous namespace'::compilerOptionsForModelType(uint64_t a1@<X0>, E5RT::E5CompilerOptions **a2@<X8>)
{
  std::runtime_error *exception;

  if (a1 == 1)
  {
    cgm::token_generation_inference::ajax::utils::makeANEAjaxCompilerOptions((cgm::token_generation_inference::ajax::utils *)1, a2);
  }
  else
  {
    if (a1 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Can't compile unknown model type.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions((cgm::token_generation_inference::ajax::utils *)2);
  }
}

void sub_248CD2160(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_248CD2224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_248CD2410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;
  NSObject *v21;

  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    objc_msgSend(*(id *)(v18 + 648), "log");
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      +[E5RunnerObjC doesModelRequireCompilationWithConfiguration:].cold.2((uint64_t)v17, (uint64_t)v20, v21);

    __cxa_end_catch();
    JUMPOUT(0x248CD23D0);
  }

  _Unwind_Resume(a1);
}

void sub_248CD25E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<TGIE5Function,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<TGIE5Function,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::vector<std::vector<unsigned long>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_248CD2890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_248CD29CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::common::IdleDurationTelemetrySampler<std::chrono::steady_clock>::shouldEmitTelemetryForNextEvent(uint64_t a1)
{
  std::chrono::steady_clock::time_point v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if ((double)(v2.__d_.__rep_ - *(_QWORD *)(a1 + 24)) / 1000000.0 >= (double)*(unint64_t *)(a1 + 8))
    {
      *(std::chrono::steady_clock::time_point *)(a1 + 24) = v2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v3 = 1;
    *(_BYTE *)(a1 + 16) = 1;
    *(std::chrono::steady_clock::time_point *)(a1 + 24) = std::chrono::steady_clock::now();
  }
  return v3;
}

void std::default_delete<TGIE5KVCacheEntry>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = a2[1];
    a2[1] = 0;
    if (v3)
      MEMORY[0x2495AA81C](v3, 0x1000C8077774924);
    v4 = *a2;
    *a2 = 0;
    if (v4)
      MEMORY[0x2495AA81C](v4, 0x1000C8077774924);
    JUMPOUT(0x2495AA834);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_248CD2B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

id OUTLINED_FUNCTION_5(uint64_t a1, void *a2)
{
  return a2;
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

_QWORD *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule::PromptExtendModule(_QWORD *this, cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *a2, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::EnumeratedShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  char *v3;
  std::vector<unsigned int> *v4;
  char *v5;
  char *v6;
  BOOL v7;
  std::vector<unsigned int>::size_type v8;

  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_2519DE3E8;
  *((_DWORD *)this + 10) = 4;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  v3 = (char *)this + 64;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  v4 = (std::vector<unsigned int> *)((char *)this + 88);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPromptExtendModules(this, a2);
  v5 = (char *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 14) = *(_QWORD *)(*((_QWORD *)this + 7) + 48);
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (char *)*((_QWORD *)v3 + 2);
      v7 = *(_QWORD *)v6 == (_QWORD)v3;
      v3 = v6;
    }
    while (v7);
  }
  v8 = *((_QWORD *)v6 + 4);
  *((_QWORD *)this + 6) = v8;
  std::vector<int>::reserve(v4, v8);
  return this;
}

void sub_248CD2C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 96) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(v2, *(_QWORD **)(v1 + 64));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v1);
  _Unwind_Resume(a1);
}

E5RT::ProgramLibrary *cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPromptExtendModules(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, TGIE5ModelConfiguration *a2)
{
  path *p_var1;
  uint64_t ExportedFunctions;
  unsigned __int8 **v6;
  uint64_t *v7;
  uint64_t v8;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  E5RT::ExecutionStreamOperation **v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  E5RT::ProgramLibrary *result;
  std::runtime_error *v30;
  std::runtime_error *exception;
  std::string v32;
  std::string v33;
  std::string v34;
  std::__shared_weak_count *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  E5RT::ProgramLibrary *v42;

  p_var1 = &a2->var1;
  if (*((char *)&a2->var1.var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, a2->var1.var0.var0.var0.var0.var1.var0, a2->var1.var0.var0.var0.var0.var1.var1);
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)p_var1->var0.var0.var0.var0.var0.var0;
    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)&a2->var1.var0.var0.var0.var0.var1 + 2);
  }
  E5RT::ProgramLibrary::OpenLibrary();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(v42);
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = (uint64_t *)&v40;
  v36 = (uint64_t *)&v37;
  v37 = 0;
  v6 = *(unsigned __int8 ***)(ExportedFunctions + 16);
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t *)(v6 + 2);
      TGIE5ModelConfiguration::mutableWeightsSymbolToPath(a2, v6 + 2, (uint64_t)&v34);
      if (cgm::token_generation_inference::ajax::utils::isPromptFunctionName((char *)v6 + 16))
        break;
      if (cgm::token_generation_inference::ajax::utils::isExtendFunctionName((char *)v6 + 16))
      {
        v11 = operator new();
        v9 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v11;
        if (*((char *)v6 + 39) < 0)
        {
          v7 = (uint64_t *)v6[2];
          v12 = v6[3];
        }
        else
        {
          v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 39);
        }
        cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::AJAXExtendE5MLModule(v11, p_var1, v7, v12, &v34);
        v32.__r_.__value_.__r.__words[0] = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v9);
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
        v13 = std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v36, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
        goto LABEL_17;
      }
LABEL_18:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v34);
      v6 = (unsigned __int8 **)*v6;
      if (!v6)
      {
        if (v41 != v38)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Number of prompt functions doesn't match number of extend functions");
          __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        goto LABEL_20;
      }
    }
    v8 = operator new();
    v9 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v8;
    if (*((char *)v6 + 39) < 0)
    {
      v7 = (uint64_t *)v6[2];
      v10 = v6[3];
    }
    else
    {
      v10 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 39);
    }
    cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::AJAXPromptE5MLModule(v8, p_var1, v7, v10, &v34);
    v32.__r_.__value_.__r.__words[0] = cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::getMaxStateLength(v9);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v13 = std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v39, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
LABEL_17:
    v13[5] = (uint64_t)v9;
    goto LABEL_18;
  }
LABEL_20:
  v14 = v36;
  if (v36 != (uint64_t *)&v37)
  {
    v15 = (uint64_t **)((char *)this + 56);
    do
    {
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)(v14 + 4);
      v16 = (E5RT::ExecutionStreamOperation **)std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v39, (unint64_t *)v14 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5];
      if (!v16)
      {
        v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v32, v14[4]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Prompt function for state length: ", &v32, &v33);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" doesn't exist", &v33, &v34);
        std::runtime_error::runtime_error(v30, &v34);
        v30->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
      }
      cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v14[5], (uint64_t)&v34);
      cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::setUp(v16, (const cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&v34);
      v17 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      size = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
      if (v34.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v23 = v14[5];
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v34.__r_.__value_.__l.__size_ = v23;
      std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>(v15, (unint64_t *)v14 + 4, v14 + 4, (__int128 *)&v34);
      v24 = (uint64_t *)v34.__r_.__value_.__l.__size_;
      v34.__r_.__value_.__l.__size_ = 0;
      if (v24)
        std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)&v34.__r_.__value_.__l.__size_, v24);
      v25 = (uint64_t *)v34.__r_.__value_.__r.__words[0];
      v34.__r_.__value_.__r.__words[0] = 0;
      if (v25)
        std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)&v34, v25);
      v26 = (uint64_t *)v14[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (uint64_t *)v14[2];
          v28 = *v27 == (_QWORD)v14;
          v14 = v27;
        }
        while (!v28);
      }
      v14 = v27;
    }
    while (v27 != (uint64_t *)&v37);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&v36, v37);
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&v39, v40);
  result = v42;
  v42 = 0;
  if (result)
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_248CD30B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33,_QWORD *a34)
{
  uint64_t v34;
  uint64_t v36;

  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&a30, a31);
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy((uint64_t)&a33, a34);
  v36 = *(_QWORD *)(v34 - 96);
  *(_QWORD *)(v34 - 96) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule::~PromptExtendModule(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = *(uint64_t **)this;
  *(_QWORD *)this = 0;
  if (v5)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)this, v5);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a1, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a2)
{
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v2;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  E5RT::MemoryObject *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::__shared_weak_count *v23;

  if (a1 + 8 == a2)
    return 0;
  v2 = a2[6];
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "Found null extend module from the map");
    std::runtime_error::runtime_error(exception, &v22);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  v3 = a1 + 14;
  if (v2 == a1[14])
    return 0;
  v4 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(v3, v2, v4);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(v2, 0);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(v2, (uint64_t)&v22);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getKVCache(*v3, (uint64_t)&v19);
  cgm::token_generation_inference::ajax::utils::AJAXKVCache::overwrite((cgm::token_generation_inference::ajax::utils::AJAXKVCache *)&v22, &v19);
  v5 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v23;
  if (v23)
  {
    v12 = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  size = (std::__shared_weak_count *)v22.__r_.__value_.__l.__size_;
  if (v22.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(v22.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *v3 = v2;
  return 1;
}

void sub_248CD349C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::purgeUnusedKeyValueCache(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;

  result = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(*(_QWORD *)(a1 + 112), a2, a3, *(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 80) -= result;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchToNextExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **this)
{
  unint64_t MaxStateLength;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **v3;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v4;
  unint64_t v5;
  BOOL v6;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **v7;

  MaxStateLength = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(this[14]);
  v3 = this + 8;
  v4 = this[8];
  if (v4)
  {
    do
    {
      v5 = *((_QWORD *)v4 + 4);
      v6 = MaxStateLength >= v5;
      if (MaxStateLength >= v5)
        v7 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)((char *)v4 + 8);
      else
        v7 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v4;
      if (!v6)
        v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v4;
      v4 = *v7;
    }
    while (*v7);
  }
  return cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(this, v3);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::reset(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, unint64_t a2)
{
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v3;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  std::runtime_error *exception;
  std::runtime_error *v11;
  std::string v12;

  v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((_QWORD *)this + 14);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Found null extend module");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  if (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v3) <= a2)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "Can't reset starting from index more than number of tokens processed");
    std::runtime_error::runtime_error(v11, &v12);
    v11->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  v5 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)((char *)this + 64);
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  if (v6)
  {
    do
    {
      v7 = v6[4];
      v8 = v7 > a2;
      if (v7 <= a2)
        v9 = v6 + 1;
      else
        v9 = v6;
      if (v8)
        v5 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
  }
  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this, v5);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(*((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this + 14), a2);
  *((_QWORD *)this + 10) = a2;
  std::vector<int>::resize((std::vector<int> *)((char *)this + 88), a2);
}

void sub_248CD36D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  uint64_t v1;

  cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(this);
  return v1;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *__p;
  char v6;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v1 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  v3 = v2;
  if (v6 < 0)
    operator delete(__p);
  if (v3 >= 2)
    return v1;
  else
    return 0;
}

void sub_248CD3794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::getLogits(this);
  *a2 = 1;
  a2[1] = result;
  a2[2] = v4;
  a2[3] = 1;
  a2[4] = v4;
  a2[5] = v4;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPrompt(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  E5RT::ExecutionStream **v15;
  int v16;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t result;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  std::runtime_error *exception;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::runtime_error *v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;

  v4 = *a2;
  v5 = a2[1];
  v6 = (v5 - *a2) >> 2;
  v7 = *(_QWORD *)(a1 + 48);
  if (v6 >= v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v39, (a2[1] - *a2) >> 2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Number of prompt tokens = ", &v39, &v40);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" greater than or equal to maxStateLength = ", &v40, &v41);
    std::to_string(&v38, *(_QWORD *)(a1 + 48));
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v38;
    else
      v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      size = v38.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v41, (const std::string::value_type *)v33, size);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v42);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  if (v4 == v5 || *(_QWORD *)(a1 + 80) >= v7)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, 0);
    return 0;
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 64);
    if (!v8)
      goto LABEL_40;
    v9 = (_QWORD *)(a1 + 64);
    do
    {
      v10 = v8[4];
      v11 = v10 >= v6;
      if (v10 >= v6)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 == (_QWORD *)(a1 + 64))
    {
LABEL_40:
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v41, (a2[1] - *a2) >> 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Couldn't find a module for the prompt with size: ", &v41, &v42);
      std::runtime_error::runtime_error(v37, &v42);
      v37->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
    }
    v14 = (_QWORD *)(a1 + 88);
    v13 = *(_QWORD *)(a1 + 88);
    v15 = (E5RT::ExecutionStream **)v9[5];
    *(_QWORD *)(a1 + 96) = v13;
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(a1 + 88), v13, v4, a2[1] - 4, (a2[1] - 4 - v4) >> 2);
    cgm::token_generation_inference::ajax::AJAXPromptE5MLModule::forward(v15, (int **)(a1 + 88));
    v16 = *((_DWORD *)a2[1] - 1);
    v17 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)v9[6];
    *(_QWORD *)(a1 + 112) = v17;
    cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(v17, v16, (uint64_t)(*(_QWORD *)(a1 + 96) - *v14) >> 2);
    v18 = *(_DWORD **)(a1 + 96);
    v19 = *(_QWORD *)(a1 + 104);
    if ((unint64_t)v18 >= v19)
    {
      v22 = (_DWORD *)*v14;
      v23 = ((uint64_t)v18 - *v14) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v19 - (_QWORD)v22;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 104, v26);
        v22 = *(_DWORD **)(a1 + 88);
        v18 = *(_DWORD **)(a1 + 96);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v23];
      v29 = &v27[4 * v26];
      *(_DWORD *)v28 = v16;
      v20 = v28 + 4;
      while (v18 != v22)
      {
        v30 = *--v18;
        *((_DWORD *)v28 - 1) = v30;
        v28 -= 4;
      }
      *(_QWORD *)(a1 + 88) = v28;
      *(_QWORD *)(a1 + 96) = v20;
      *(_QWORD *)(a1 + 104) = v29;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v18 = v16;
      v20 = v18 + 1;
    }
    *(_QWORD *)(a1 + 96) = v20;
    result = ((uint64_t)v20 - *(_QWORD *)(a1 + 88)) >> 2;
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

void sub_248CD3AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  char v33;
  uint64_t v34;

  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  if (a14 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v33 & 1) != 0)
    __cxa_free_exception(v32);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, int a2)
{
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((_QWORD *)this + 14);
  if (!v3)
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward();
  v5 = *((_QWORD *)this + 10);
  if (v5 >= cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v3))
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchToNextExtendModule((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this);
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 6);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(*((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this + 14), a2, v6);
  v8 = *((_QWORD *)this + 10) + 1;
  *((_QWORD *)this + 10) = v8;
  if (v8 >= *((_QWORD *)this + 6))
  {
    *(_DWORD *)(*((_QWORD *)this + 11) + 4 * (v6 % v7)) = a2;
  }
  else
  {
    v9 = *((_QWORD *)this + 13);
    v10 = (char *)*((_QWORD *)this + 12);
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)*((_QWORD *)this + 11);
      v13 = (v10 - v12) >> 2;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)v12;
      v15 = (uint64_t)(v9 - (_QWORD)v12) >> 1;
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 104, v16);
        v12 = (char *)*((_QWORD *)this + 11);
        v10 = (char *)*((_QWORD *)this + 12);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      v19 = &v17[4 * v16];
      *(_DWORD *)v18 = a2;
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *((_QWORD *)this + 11) = v18;
      *((_QWORD *)this + 12) = v11;
      *((_QWORD *)this + 13) = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v10 = a2;
      v11 = v10 + 4;
    }
    *((_QWORD *)this + 12) = v11;
  }
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this, char **a2)
{
  char *v3;
  char *v4;
  int v5;

  if (*((_QWORD *)this + 10))
  {
    v3 = *a2;
    v4 = a2[1];
    while (v3 != v4)
    {
      v5 = *(_DWORD *)v3;
      v3 += 4;
      cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward(this, v5);
    }
  }
  else
  {
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::loadPrompt((uint64_t)this, a2);
  }
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  NSObject *v1;

  v1 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(v1);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::~EnumeratedShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel *this)
{
  void *v2;

  *(_QWORD *)this = &off_2519DE3E8;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_2519DE3E8;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
  JUMPOUT(0x2495AA834);
}

void std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 1));
    v3 = *a2;
    *a2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x2495AA834);
  }
}

void std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;

  v3 = *(uint64_t **)(a1 + 16);
  v1 = (_QWORD *)(a1 + 16);
  v2 = v3;
  v4 = (uint64_t **)(v1 - 1);
  *v1 = 0;
  if (v3)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v1, v2);
  v5 = *v4;
  *v4 = 0;
  if (v5)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v4, v5);
}

void std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>(uint64_t **a1, unint64_t *a2, _QWORD *a3, __int128 *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  _QWORD v16[2];
  char v17;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    v11 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v12 = v7[4];
        if (v11 >= v12)
          break;
        v7 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v12 >= v11)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v13 = (char *)operator new(0x38uLL);
    v16[1] = v8;
    *((_QWORD *)v13 + 4) = *a3;
    v14 = *a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    *(_OWORD *)(v13 + 40) = v14;
    v17 = 1;
    std::__tree<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::AJAXPromptE5MLModule *>>>::__insert_node_at(a1, (uint64_t)v10, v9, (uint64_t *)v13);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
    return (uint64_t **)v13;
  }
  return v10;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::PromptExtendModule>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

E5RT::ExecutionStream *cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::EspressoE5MLModule(E5RT::ExecutionStream *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *i;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string::size_type v9;
  uint64_t v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  E5RT::ExecutionStream::CreateExecutionStream(a1);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a2 + 72))
  {
    v4 = E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths();
    for (i = *(uint64_t **)(a2 + 64); i; i = (uint64_t *)*i)
    {
      v6 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)v4);
      v4 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)v4)
      {
        v7 = i + 2;
        if (*((char *)i + 39) < 0)
          v7 = (_QWORD *)*v7;
        v8 = i + 5;
        if (*((char *)i + 63) < 0)
          v8 = (_QWORD *)*v8;
        LODWORD(v12.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_debug_impl(&dword_248CAA000, v6, OS_LOG_TYPE_DEBUG, "Loading operation with mutable weights symbol %s from weight file %s", (uint8_t *)&v12, 0x16u);
      }
    }
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)a1 + 1, (uint64_t *)&v12);
  v9 = v12.__r_.__value_.__r.__words[0];
  v12.__r_.__value_.__r.__words[0] = 0;
  if (v9)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  if (v11)
    (*(void (**)())(*(_QWORD *)v11 + 8))();
  return a1;
}

void sub_248CD452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;

  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v19);
  v21 = *v18;
  *v18 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

double cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToInputPort@<D0>(_OWORD *a1@<X8>)
{
  E5RT::IOPort *InputPortRef;
  double result;
  __int128 v4;

  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetMemoryObject(InputPortRef);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getMemoryBoundToOutputPort@<D0>(_OWORD *a1@<X8>)
{
  E5RT::IOPort *OutputPortRef;
  double result;
  __int128 v4;

  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  E5RT::IOPort::GetMemoryObject(OutputPortRef);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inputSpan()
{
  E5RT::IOPort *InputPortRef;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;

  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(InputPortRef);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  return E5RT::BufferObject::GetDataSpan(v2);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::inoutSpan()
{
  E5RT::IOPort *v0;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;

  v0 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v0);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  return E5RT::BufferObject::GetDataSpan(v2);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan()
{
  E5RT::IOPort *OutputPortRef;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;

  OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(OutputPortRef);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  return E5RT::BufferObject::GetDataSpan(v2);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  uint64_t v3;
  uint64_t OutputPorts;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  v3 = E5RT::ExecutionStreamOperation::GetInOutPorts(this[1]);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[1]);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(*(uint64_t **)(InputPorts + 16), 0);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(*(uint64_t **)(v3 + 16), 0);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(*(uint64_t **)(OutputPorts + 16), 0);
}

void std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindAllPorts(void)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  E5RT::IOPort *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (a1 != a2)
  {
    v3 = a1;
    while (1)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v3[5]);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      if (!v7)
        goto LABEL_8;
LABEL_9:
      v3 = (uint64_t *)*v3;
      if (v3 == a2)
        return;
    }
    ((void (*)())v8->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v8);
    if (v7)
      goto LABEL_9;
LABEL_8:
    cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindNewMemoryToPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)v3[5], v4);
    goto LABEL_9;
  }
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  E5RT::IOPort *v3;
  uint64_t OutputPorts;
  uint64_t **i;
  uint64_t **j;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[1]);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[1]);
  for (i = *(uint64_t ***)(InputPorts + 16); i; i = (uint64_t **)*i)
    cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)i[5], v3);
  for (j = *(uint64_t ***)(OutputPorts + 16); j; j = (uint64_t **)*j)
    cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort((cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *)j[5], v3);
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getTensorDescriptorForPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, const E5RT::IOPort *a2)
{
  uint64_t v2;
  uint64_t *p_shared_owners;
  unint64_t v4;
  std::runtime_error *exception;
  std::runtime_error *v7;
  std::string v8;
  E5RT::OperandDescriptor *v9;
  std::__shared_weak_count *v10;

  E5RT::IOPort::GetPortDescriptor(this);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "Found a null pointer to a port descriptor.");
    std::runtime_error::runtime_error(exception, &v8);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(v9))
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "All ports should be buffers.");
    std::runtime_error::runtime_error(v7, &v8);
    v7->__vftable = (std::runtime_error_vtbl *)&unk_2519DDEE0;
  }
  v2 = E5RT::OperandDescriptor::TensorDescriptor(v9);
  if (v10)
  {
    p_shared_owners = &v10->__shared_owners_;
    do
      v4 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v4 - 1, (unint64_t *)p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v2;
}

void sub_248CD4940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindNewMemoryToPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
  E5RT::TensorDescriptor *TensorDescriptorForPort;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;

  TensorDescriptorForPort = (E5RT::TensorDescriptor *)cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::getTensorDescriptorForPort(this, a2);
  E5RT::TensorDescriptor::GetSize(TensorDescriptorForPort);
  E5RT::BufferObject::AllocMemory();
  if (v7)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DDF08;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = v7;
  }
  else
  {
    v3 = 0;
  }
  v8 = v3;
  E5RT::IOPort::BindMemoryObject();
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 0;
}

void sub_248CD4A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::bindPreAllocatedMemoryToPort(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  v7 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  E5RT::IOPort::BindMemoryObject();
  if (v7)
  {
    v5 = (unint64_t *)&v7->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_248CD4B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::unbindPort(cgm::token_generation_inference::espresso_inference::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
  E5RT::IOPort::BindMemoryObject();
}

void sub_248CD4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::modelIsMilFormat(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  _BOOL8 v3;
  size_t v4;
  std::string::size_type size;
  int v6;
  std::string *v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  std::string __p;
  std::string v18;
  void *v19;
  size_t v20;
  unsigned __int8 v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, ".mil");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    v3 = 0;
    goto LABEL_30;
  }
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  if ((v21 & 0x80u) == 0)
    v4 = v21;
  else
    v4 = v20;
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
    v3 = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v18;
  else
    v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v21 & 0x80) != 0)
  {
    v3 = memcmp(v19, v7, v20) == 0;
    goto LABEL_27;
  }
  if (v21)
  {
    v8 = v21 - 1;
    v9 = &v19;
    do
    {
      v11 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v10 = v11;
      v13 = v7->__r_.__value_.__s.__data_[0];
      v7 = (std::string *)((char *)v7 + 1);
      v12 = v13;
      v15 = v8-- != 0;
      v3 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_27:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_28;
LABEL_25:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  v3 = 1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if ((char)v21 < 0)
    operator delete(v19);
  return v3;
}

void sub_248CD4CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 17) < 0)
    operator delete(*(void **)(v15 - 40));
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::modelIsE5Format(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  _BOOL8 v3;
  size_t v4;
  std::string::size_type size;
  int v6;
  std::string *v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  std::string __p;
  std::string v18;
  void *v19;
  size_t v20;
  unsigned __int8 v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, ".e5");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    v3 = 0;
    goto LABEL_30;
  }
  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  if ((v21 & 0x80u) == 0)
    v4 = v21;
  else
    v4 = v20;
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  v6 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (v4 != size)
  {
    v3 = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v18;
  else
    v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v21 & 0x80) != 0)
  {
    v3 = memcmp(v19, v7, v20) == 0;
    goto LABEL_27;
  }
  if (v21)
  {
    v8 = v21 - 1;
    v9 = &v19;
    do
    {
      v11 = *(unsigned __int8 *)v9;
      v9 = (void **)((char *)v9 + 1);
      v10 = v11;
      v13 = v7->__r_.__value_.__s.__data_[0];
      v7 = (std::string *)((char *)v7 + 1);
      v12 = v13;
      v15 = v8-- != 0;
      v3 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_27:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_28;
LABEL_25:
    operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  v3 = 1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if ((char)v21 < 0)
    operator delete(v19);
  return v3;
}

void sub_248CD4E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 17) < 0)
    operator delete(*(void **)(v15 - 40));
  _Unwind_Resume(exception_object);
}

void PresampleArgmax(uint64_t a1, int a2, int a3, int a4, int a5, void *__b)
{
  __int128 *v11;
  int v12;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  __int16 v100;
  __int16 v105;
  __int16 v110;
  __int16 v115;
  __int16 v120;
  __int16 v125;
  __int16 v130;
  __int16 v131;
  __int16 v137;
  __int16 v140;
  __int16 v145;
  __int16 v150;
  __int16 v155;
  __int16 v160;
  __int16 v165;
  __int16 v175;
  __int16 v176;
  __int16 v179;
  __int16 v184;
  __int16 v189;
  __int16 v194;
  __int16 v199;
  __int16 v204;
  __int16 v209;
  __int16 v215;
  __int16 v218;
  __int16 v223;
  __int16 v228;
  __int16 v233;
  __int16 v238;
  __int16 v244;
  __int16 v252;
  __int16 v253;
  __int16 v260;
  __int16 v265;
  __int16 v270;
  __int16 v275;
  __int16 v283;
  __int16 v287;
  __int16 v290;
  __int16 v296;
  __int16 v311;
  __int16 v328;
  __int16 v330;
  __int16 v332;
  __int16 v334;
  __int16 v336;
  __int16 v338;
  __int16 v342;
  __int16 v344;
  __int16 v346;
  __int16 v348;
  __int16 v350;
  __int16 v352;
  __int16 v356;
  __int16 v358;
  __int16 v360;
  __int16 v362;
  __int16 v364;
  __int16 v366;
  __int16 v370;
  __int16 v372;
  int16x4_t v374;
  int16x4_t v375;
  int16x4_t v376;
  int16x4_t v377;
  int16x4_t v378;
  int16x4_t v379;
  __int16 v380;
  int16x4_t v383;
  int16x4_t v385;
  __int16 v386;
  int32x4_t v387;
  uint64_t v388;
  _WORD *v389;
  int v390;
  uint64_t v391;
  uint64_t i;
  __int128 *v397;
  int v398;
  int8x16_t v400;
  int v401;
  int8x16_t v402;
  int8x16_t v403;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  __int16 v448;
  __int16 v459;
  __int16 v466;
  __int16 v472;
  __int16 v475;
  __int16 v480;
  __int16 v485;
  __int16 v490;
  __int16 v496;
  __int16 v499;
  __int16 v504;
  __int16 v509;
  __int16 v514;
  __int16 v519;
  __int16 v525;
  __int16 v529;
  BOOL v535;
  __int16 v537;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  __int16 v552;
  __int16 v554;
  __int16 v561;
  __int16 v562;
  __int16 v571;
  __int16 v577;
  __int16 v581;
  __int16 v585;
  __int16 v587;
  __int16 v589;
  __int16 v591;
  __int16 v593;
  int v595;
  __int16 v596;
  int16x4_t v598;
  int16x4_t v599;
  __int16 v600;
  int16x4_t v603;
  int16x4_t v606;
  __int16 v607;
  int32x4_t v610;
  uint64_t v611;
  __int128 *v616;
  int v617;
  int8x16_t v619;
  int v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  __int16 v637;
  __int16 v642;
  __int16 v647;
  __int16 v652;
  __int16 v657;
  __int16 v662;
  __int16 v667;
  __int16 v672;
  __int16 v673;
  __int16 v682;
  __int16 v689;
  __int16 v697;
  __int16 v700;
  __int16 v705;
  __int16 v710;
  int16x4_t v722;
  __int16 v725;
  int16x4_t v726;
  __int16 v727;
  int32x4_t v728;
  uint64_t v729;
  float16x4_t *v734;
  int8x16_t v736;
  int32x4_t v737;
  int v738;
  int32x4_t v739;
  __int128 *v754;
  int8x16_t v755;
  int32x4_t v757;
  int v758;
  int8x16_t v759;
  int32x4_t v760;
  int32x4_t v761;
  __int16 v767;
  __int16 v770;
  int16x4_t v771;
  __int16 v776;
  __int16 v781;
  __int16 v786;
  __int16 v791;
  int16x4_t v792;
  int8x16_t v793;
  __int16 v798;
  __int16 v803;
  uint64_t v813;
  uint64_t v818;
  uint64_t v823;
  int v828;
  int v829;
  int v830;
  uint64_t v831;
  float v832;
  float v833;
  float v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  float v841;
  float v842;
  float v843;
  float v844;
  float v845;
  float v846;
  float v847;
  float v848;
  float v849;
  float v850;
  float v851;
  float v852;
  float v853;
  float v854;
  float v855;
  float v856;
  float v857;
  float v858;
  float v859;
  float v860;
  float v861;
  float v862;
  float v863;
  float v864;
  float v865;
  __int16 v866;
  __int16 v867;
  __int16 v868;
  __int16 v869;
  __int16 v870;
  __int16 v871;
  __int16 v872;
  __int16 v873;
  __int16 v874;
  __int16 v875;
  __int16 v876;
  __int16 v877;
  __int16 v878;
  __int16 v879;
  __int16 v880;
  __int16 v881;
  __int16 v882;
  __int16 v883;
  __int16 v884;
  __int16 v885;
  __int16 v886;
  __int16 v887;
  float v888;
  float v889;
  float v890;
  float v891;
  float v892;
  float v893;
  __int16 v894;
  float v895;
  float v896;
  __int16 v897;
  __int16 v898;
  __int16 v899;
  __int16 v900;
  __int16 v901;
  __int16 v902;
  float v903;
  float v904;
  float v905;
  float v906;
  float v907;
  float v908;
  float v909;
  float v910;
  __int16 v911;
  __int16 v912;
  float v913;
  float v914;
  float v915;
  float v916;
  float v917;
  float v918;
  float v919;
  float v920;
  float v921;
  float v922;
  float v923;
  float v924;
  float v925;
  int v926;
  float v927;
  uint64_t v928;
  float v929;
  float v930;
  float v931;
  float v932;
  float v933;
  float v934;
  float v935;
  __int16 v936;
  __int16 v937;
  __int16 v938;
  __int16 v939;
  int32x4_t v940;
  int32x4_t v941;
  int32x4_t v942;
  float v943;
  int32x4_t v944;
  float v945;
  int8x16_t v946;
  float v947;
  int8x16_t v948;
  __int16 v949;
  int8x16_t v950;
  float v951;
  int8x16_t v952;
  float v953;
  int8x16_t v954;
  float v955;
  int8x16_t v956;
  float v957;
  int8x16_t v958;
  float v959;
  int v960;
  float v961;
  int8x16_t v962;
  float v963;
  int32x4_t v964;
  __int16 v965;
  int32x4_t v966;
  float v967;
  int32x4_t v968;
  float v969;
  int32x4_t v970;
  __int16 v971;
  int32x4_t v972;
  float v973;
  int32x4_t v974;
  float v975;
  int32x4_t v976;
  __int16 v977;
  int32x4_t v978;
  float v979;
  int32x4_t v980;
  float v981;
  int32x4_t v982;
  int32x4_t v983;
  int32x4_t v984;
  int32x4_t v985;
  int8x16_t v986;
  int32x4_t v987;
  int8x16_t v988;
  int8x16_t v989;
  int8x16_t v990;
  int8x16_t v991;
  int8x16_t v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int8x16_t v998;
  int8x16_t v999;
  int8x16_t v1000;
  int8x16_t v1001;
  float v1002;
  int32x4_t v1003;
  int8x16_t v1004;
  float v1005;
  float16x4_t v1006;
  __int128 v1007;
  _OWORD v1008[2];
  _OWORD v1009[4];
  _OWORD v1010[8];
  __int16 v1011;
  void *__p[2];
  int8x16_t v1013;
  int8x16_t v1014;
  int8x16_t v1015;
  int8x16_t v1016;
  int8x16_t v1017;
  int8x16_t v1018;
  int8x16_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  int8x16_t v1024;
  int8x16_t v1025;
  int8x16_t v1026;
  int8x16_t v1027;
  uint64_t v1028;

  v1028 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 64)
  {
    switch(a5)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        if (!a2)
          goto LABEL_432;
        v734 = (float16x4_t *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          __p[1] = 0;
          _D0 = (float16x4_t)0x400040004000400;
          __p[0] = 0;
        }
        else
        {
          _D0 = (float16x4_t)0x400040004000400;
          v736 = 0uLL;
          v737.i64[0] = 0x100000001;
          v737.i64[1] = 0x100000001;
          v738 = a2 - 1;
          v739 = 0uLL;
          do
          {
            _D4 = *v734;
            v736 = vbslq_s8((int8x16_t)vcgtq_f32(vcvtq_f32_f16(*v734), vcvtq_f32_f16(_D0)), (int8x16_t)v739, v736);
            _H5 = _D0.i16[1];
            __asm { FCVT            S5, H5 }
            _H6 = HIWORD(v734->u32[0]);
            __asm { FCVT            S6, H6 }
            _S5 = fmaxf(_S5, _S6);
            __asm
            {
              FCVT            H5, S5
              FCVT            S6, H0
              FCVT            S7, H4
            }
            *(float *)_D6.i32 = fmaxf(_S6, _S7);
            _D0.i16[0] = _D0.i16[3];
            LOWORD(_S7) = _D0.i16[2];
            __asm { FCVT            H6, S6 }
            _D6.i16[1] = LOWORD(_S5);
            v739 = vaddq_s32(v739, v737);
            __asm { FCVT            S5, H7 }
            LOWORD(_S7) = WORD2(*(unint64_t *)v734);
            __asm { FCVT            S7, H7 }
            _S5 = fmaxf(_S5, _S7);
            __asm { FCVT            H5, S5 }
            _D6.i16[2] = LOWORD(_S5);
            __asm { FCVT            S0, H0 }
            _D4.i16[0] = HIWORD(*(unint64_t *)v734);
            __asm { FCVT            S4, H4 }
            _S0 = fmaxf(_S0, *(float *)_D4.i32);
            __asm { FCVT            H0, S0 }
            _D6.i16[3] = LOWORD(_S0);
            _D0 = _D6;
            v734 = (float16x4_t *)((char *)v734 + 2 * a3);
            --v738;
          }
          while (v738);
          *(int8x16_t *)__p = v736;
          if (a5 < 1)
          {
LABEL_432:
            memcpy(__b, __p, 4 * a5);
            return;
          }
        }
        v818 = 0;
        do
        {
          _H1 = v734->i16[v818];
          v1006 = _D0;
          _H2 = *(_WORD *)((unint64_t)&v1006 & 0xFFFFFFFFFFFFFFF9 | (2 * (v818 & 3)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          if (_S1 > _S2)
            *((_DWORD *)__p + v818) = a2 - 1;
          ++v818;
        }
        while (a5 != v818);
        goto LABEL_432;
      case 5:
      case 6:
      case 7:
      case 8:
        if (!a2)
          goto LABEL_432;
        v754 = (__int128 *)(a1 + 2 * a4);
        if (a2 <= 1)
        {
          *(_OWORD *)__p = 0u;
          v1013 = 0u;
          *(_QWORD *)&_Q0 = 0x400040004000400;
          *((_QWORD *)&_Q0 + 1) = 0x400040004000400;
        }
        else
        {
          v755 = 0uLL;
          *(_QWORD *)&_Q0 = 0x400040004000400;
          *((_QWORD *)&_Q0 + 1) = 0x400040004000400;
          v757.i64[0] = 0x100000001;
          v757.i64[1] = 0x100000001;
          v758 = a2 - 1;
          v759 = 0uLL;
          v760 = 0uLL;
          v761 = 0uLL;
          do
          {
            _Q18 = *v754;
            _H6 = WORD1(_Q0);
            __asm { FCVT            S6, H6 }
            _H7 = WORD1(*v754);
            __asm { FCVT            S7, H7 }
            if (_S7 <= _S6)
              v767 = 0;
            else
              v767 = -1;
            __asm
            {
              FCVT            S16, H0
              FCVT            S17, H18
            }
            if (_S17 <= _S16)
              v770 = 0;
            else
              v770 = -1;
            v771.i16[0] = v770;
            v771.i16[1] = v767;
            _H19 = WORD2(_Q0);
            __asm { FCVT            S19, H19 }
            _H20 = WORD2(*(_QWORD *)v754);
            __asm { FCVT            S20, H20 }
            if (_S20 <= _S19)
              v776 = 0;
            else
              v776 = -1;
            v771.i16[2] = v776;
            _H21 = WORD3(_Q0);
            __asm { FCVT            S21, H21 }
            _H22 = HIWORD(*(_QWORD *)v754);
            __asm { FCVT            S24, H22 }
            if (_S24 <= _S21)
              v781 = 0;
            else
              v781 = -1;
            v771.i16[3] = v781;
            _H22 = WORD5(_Q0);
            __asm { FCVT            S22, H22 }
            _H25 = WORD1(*((_QWORD *)v754 + 1));
            __asm { FCVT            S25, H25 }
            if (_S25 <= _S22)
              v786 = 0;
            else
              v786 = -1;
            _H26 = WORD4(_Q0);
            __asm { FCVT            S26, H26 }
            _H27 = *((_QWORD *)v754 + 1);
            __asm { FCVT            S27, H27 }
            if (_S27 <= _S26)
              v791 = 0;
            else
              v791 = -1;
            v792.i16[0] = v791;
            v792.i16[1] = v786;
            v793 = (int8x16_t)vmovl_s16(v771);
            _H29 = WORD6(_Q0);
            __asm { FCVT            S29, H29 }
            _H30 = WORD6(*v754);
            __asm { FCVT            S30, H30 }
            if (_S30 <= _S29)
              v798 = 0;
            else
              v798 = -1;
            v792.i16[2] = v798;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S31, H0 }
            _H0 = HIWORD(*v754);
            __asm { FCVT            S18, H0 }
            if (_S18 <= _S31)
              v803 = 0;
            else
              v803 = -1;
            v792.i16[3] = v803;
            v759 = vbslq_s8((int8x16_t)vmovl_s16(v792), (int8x16_t)v761, v759);
            v755 = vbslq_s8(v793, (int8x16_t)v760, v755);
            v760 = vaddq_s32(v760, v757);
            v761 = vaddq_s32(v761, v757);
            _S0 = fmaxf(_S6, _S7);
            __asm { FCVT            H6, S0 }
            _S0 = fmaxf(_S16, _S17);
            __asm { FCVT            H0, S0 }
            WORD1(_Q0) = _H6;
            _S6 = fmaxf(_S19, _S20);
            __asm { FCVT            H6, S6 }
            WORD2(_Q0) = LOWORD(_S6);
            _S6 = fmaxf(_S21, _S24);
            __asm { FCVT            H6, S6 }
            WORD3(_Q0) = LOWORD(_S6);
            _S6 = fmaxf(_S26, _S27);
            __asm { FCVT            H6, S6 }
            WORD4(_Q0) = LOWORD(_S6);
            _S6 = fmaxf(_S22, _S25);
            __asm { FCVT            H6, S6 }
            WORD5(_Q0) = LOWORD(_S6);
            _S6 = fmaxf(_S29, _S30);
            __asm { FCVT            H6, S6 }
            WORD6(_Q0) = LOWORD(_S6);
            _S6 = fmaxf(_S31, _S18);
            __asm { FCVT            H6, S6 }
            HIWORD(_Q0) = LOWORD(_S6);
            v754 = (__int128 *)((char *)v754 + 2 * a3);
            --v758;
          }
          while (v758);
          *(int8x16_t *)__p = v755;
          v1013 = v759;
          if (a5 < 1)
            goto LABEL_432;
        }
        v823 = 0;
        do
        {
          _H1 = *((_WORD *)v754 + v823);
          v1007 = _Q0;
          _H2 = *(_WORD *)((unint64_t)&v1007 & 0xFFFFFFFFFFFFFFF1 | (2 * (v823 & 7)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          if (_S1 > _S2)
            *((_DWORD *)__p + v823) = a2 - 1;
          ++v823;
        }
        while (a5 != v823);
        goto LABEL_432;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        if (!a2)
          goto LABEL_432;
        v616 = (__int128 *)(a1 + 2 * a4);
        v617 = a2 - 1;
        if (a2 <= 1)
        {
          v1014 = 0u;
          v1015 = 0u;
          *(_OWORD *)__p = 0u;
          v1013 = 0u;
          *(_QWORD *)&_Q18 = 0x400040004000400;
          *((_QWORD *)&_Q18 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q0 = 0x400040004000400;
          *((_QWORD *)&_Q0 + 1) = 0x400040004000400;
        }
        else
        {
          *(_QWORD *)&_Q18 = 0x400040004000400;
          *((_QWORD *)&_Q18 + 1) = 0x400040004000400;
          v619 = 0uLL;
          v620 = a2 - 1;
          v621 = 0uLL;
          v622 = 0uLL;
          v623 = 0uLL;
          *(_QWORD *)&_Q0 = 0x400040004000400;
          *((_QWORD *)&_Q0 + 1) = 0x400040004000400;
          v625 = 0uLL;
          v626 = 0uLL;
          v627 = 0uLL;
          v628 = 0uLL;
          do
          {
            _Q11 = *v616;
            _Q22 = v616[1];
            _H2 = WORD1(_Q18);
            __asm { FCVT            S1, H2 }
            v1002 = _S1;
            _H2 = WORD1(*v616);
            __asm { FCVT            S2, H2 }
            v1005 = _S2;
            __asm
            {
              FCVT            S21, H18
              FCVT            S23, H11
            }
            if (_NF ^ _VF | _ZF)
              v637 = 0;
            else
              v637 = -1;
            _H2 = WORD2(_Q18);
            __asm { FCVT            S24, H2 }
            _H2 = WORD2(*(_QWORD *)v616);
            __asm { FCVT            S25, H2 }
            if (_NF ^ _VF | _ZF)
              v642 = 0;
            else
              v642 = -1;
            _H2 = WORD3(_Q18);
            __asm { FCVT            S26, H2 }
            _H2 = HIWORD(*(_QWORD *)v616);
            __asm { FCVT            S28, H2 }
            if (_NF ^ _VF | _ZF)
              v647 = 0;
            else
              v647 = -1;
            _H2 = WORD5(_Q18);
            __asm { FCVT            S27, H2 }
            _H2 = WORD1(*((_QWORD *)v616 + 1));
            __asm { FCVT            S29, H2 }
            if (_NF ^ _VF | _ZF)
              v652 = 0;
            else
              v652 = -1;
            _H2 = WORD4(_Q18);
            __asm { FCVT            S30, H2 }
            _H2 = *((_QWORD *)v616 + 1);
            __asm { FCVT            S31, H2 }
            if (_NF ^ _VF | _ZF)
              v657 = 0;
            else
              v657 = -1;
            _H2 = WORD6(_Q18);
            __asm { FCVT            S8, H2 }
            _H2 = WORD6(*v616);
            __asm { FCVT            S9, H2 }
            if (_NF ^ _VF | _ZF)
              v662 = 0;
            else
              v662 = -1;
            _H2 = HIWORD(_Q18);
            __asm { FCVT            S10, H2 }
            _H2 = HIWORD(*v616);
            __asm { FCVT            S11, H2 }
            if (_NF ^ _VF | _ZF)
              v667 = 0;
            else
              v667 = -1;
            _H2 = WORD1(_Q0);
            __asm { FCVT            S18, H2 }
            _H2 = WORD1(v616[1]);
            __asm { FCVT            S12, H2 }
            if (_NF ^ _VF | _ZF)
              v672 = 0;
            else
              v672 = -1;
            if (_S12 <= _S18)
              v673 = 0;
            else
              v673 = -1;
            __asm
            {
              FCVT            S13, H0
              FCVT            S14, H22
            }
            _KR14_4 = DWORD1(_Q0);
            _H1 = WORD5(_Q0);
            _S18 = fmaxf(_S18, _S12);
            _H12 = WORD4(_Q0);
            _S13 = fmaxf(_S13, _S14);
            _KR18_4 = HIDWORD(_Q0);
            __asm
            {
              FCVT            H18, S18
              FCVT            H0, S13
            }
            WORD1(_Q0) = LOWORD(_S18);
            if (_NF ^ _VF | _ZF)
              v682 = 0;
            else
              v682 = -1;
            __asm { FCVT            S18, H15 }
            _H13 = WORD2(*((_QWORD *)v616 + 2));
            __asm { FCVT            S13, H13 }
            _S18 = fmaxf(_S18, _S13);
            __asm
            {
              FCVT            S2, H2
              FCVT            H18, S18
            }
            WORD2(_Q0) = LOWORD(_S18);
            LOWORD(_S18) = HIWORD(*((_QWORD *)v616 + 2));
            __asm { FCVT            S18, H18 }
            if (_NF ^ _VF | _ZF)
              v689 = 0;
            else
              v689 = -1;
            __asm
            {
              FCVT            S1, H1
              FCVT            S12, H12
            }
            _S2 = fmaxf(_S2, _S18);
            _H18 = *((_QWORD *)v616 + 3);
            __asm
            {
              FCVT            S18, H18
              FCVT            H2, S2
            }
            WORD3(_Q0) = LOWORD(_S2);
            _S2 = fmaxf(_S12, _S18);
            __asm { FCVT            H2, S2 }
            if (_NF ^ _VF | _ZF)
              v697 = 0;
            else
              v697 = -1;
            WORD4(_Q0) = _H2;
            _H2 = WORD1(*((_QWORD *)v616 + 3));
            __asm { FCVT            S2, H2 }
            if (_S2 <= _S1)
              v700 = 0;
            else
              v700 = -1;
            __asm { FCVT            S18, H14 }
            _S1 = fmaxf(_S1, _S2);
            _H2 = WORD6(v616[1]);
            __asm { FCVT            S2, H2 }
            if (_NF ^ _VF | _ZF)
              v705 = 0;
            else
              v705 = -1;
            _S2 = fmaxf(_S18, _S2);
            __asm { FCVT            S18, H19 }
            _H19 = HIWORD(v616[1]);
            __asm { FCVT            S19, H19 }
            if (_NF ^ _VF | _ZF)
              v710 = 0;
            else
              v710 = -1;
            _S19 = fmaxf(_S18, _S19);
            _S22 = fmaxf(v1002, v1005);
            _S18 = fmaxf(_S21, _S23);
            __asm
            {
              FCVT            H18, S18
              FCVT            H21, S22
            }
            WORD1(_Q18) = _H21;
            _S21 = fmaxf(_S24, _S25);
            __asm { FCVT            H1, S1 }
            WORD5(_Q0) = _H1;
            __asm { FCVT            H1, S21 }
            WORD2(_Q18) = _H1;
            __asm { FCVT            H1, S2 }
            WORD6(_Q0) = _H1;
            _S1 = fmaxf(_S26, _S28);
            __asm { FCVT            H1, S1 }
            WORD3(_Q18) = LOWORD(_S1);
            _S1 = fmaxf(_S30, _S31);
            __asm { FCVT            H1, S1 }
            WORD4(_Q18) = LOWORD(_S1);
            _S1 = fmaxf(_S27, _S29);
            v722.i16[0] = v662;
            v722.i16[1] = v657;
            v722.i16[2] = v667;
            v722.i16[3] = v672;
            v621 = vbslq_s8((int8x16_t)vmovl_s16(v722), (int8x16_t)v626, v621);
            __asm { FCVT            H1, S1 }
            WORD5(_Q18) = LOWORD(_S1);
            __asm { FCVT            H1, S19 }
            HIWORD(_Q0) = LOWORD(_S1);
            _S1 = fmaxf(_S8, _S9);
            __asm { FCVT            H1, S1 }
            WORD6(_Q18) = LOWORD(_S1);
            _S1 = fmaxf(_S10, _S11);
            v722.i16[0] = v642;
            v722.i16[1] = v637;
            v722.i16[2] = v647;
            v722.i16[3] = v652;
            __asm { FCVT            H1, S1 }
            HIWORD(_Q18) = LOWORD(_S1);
            LOWORD(_S1) = v682;
            HIWORD(_S1) = v673;
            v725 = v689;
            v726.i16[3] = v697;
            v622 = vbslq_s8((int8x16_t)vmovl_s16(v726), (int8x16_t)v627, v622);
            v726.i16[0] = v705;
            v726.i16[1] = v700;
            v726.i16[2] = v710;
            v619 = vbslq_s8((int8x16_t)vmovl_s16(v722), (int8x16_t)v625, v619);
            if (_NF ^ _VF | _ZF)
              v727 = 0;
            else
              v727 = -1;
            v726.i16[3] = v727;
            v623 = vbslq_s8((int8x16_t)vmovl_s16(v726), (int8x16_t)v628, v623);
            v728.i64[0] = 0x100000001;
            v728.i64[1] = 0x100000001;
            v625 = vaddq_s32(v625, v728);
            v626 = vaddq_s32(v626, v728);
            v627 = vaddq_s32(v627, v728);
            v628 = vaddq_s32(v628, v728);
            v616 = (__int128 *)((char *)v616 + 2 * a3);
            --v620;
          }
          while (v620);
          *(int8x16_t *)__p = v619;
          v1013 = v621;
          v1014 = v622;
          v1015 = v623;
          if (a5 < 1)
            goto LABEL_432;
        }
        v813 = 0;
        do
        {
          _H1 = *((_WORD *)v616 + v813);
          v1008[0] = _Q18;
          v1008[1] = _Q0;
          _H2 = *((_WORD *)v1008 + (v813 & 0xF));
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          if (_S1 > _S2)
            *((_DWORD *)__p + v813) = v617;
          ++v813;
        }
        while (a5 != v813);
        goto LABEL_432;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        if (!a2)
          goto LABEL_432;
        v397 = (__int128 *)(a1 + 2 * a4);
        v398 = a2 - 1;
        if (a2 <= 1)
        {
          v1018 = 0u;
          v1019 = 0u;
          v1016 = 0u;
          v1017 = 0u;
          v1014 = 0u;
          v1015 = 0u;
          *(_QWORD *)&_Q12 = 0x400040004000400;
          *((_QWORD *)&_Q12 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q1 = 0x400040004000400;
          *((_QWORD *)&_Q1 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q26 = 0x400040004000400;
          *((_QWORD *)&_Q26 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q28 = 0x400040004000400;
          *((_QWORD *)&_Q28 + 1) = 0x400040004000400;
          *(_OWORD *)__p = 0u;
          v1013 = 0u;
        }
        else
        {
          v830 = a5;
          *(_QWORD *)&_Q12 = 0x400040004000400;
          *((_QWORD *)&_Q12 + 1) = 0x400040004000400;
          v400 = 0uLL;
          v928 = 2 * a3;
          v926 = a2 - 1;
          v401 = a2 - 1;
          v402 = 0uLL;
          v995 = 0u;
          v997 = 0u;
          v403 = 0uLL;
          v1004 = 0u;
          v999 = 0u;
          v1001 = 0u;
          *(_QWORD *)&_Q1 = 0x400040004000400;
          *((_QWORD *)&_Q1 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q26 = 0x400040004000400;
          *((_QWORD *)&_Q26 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q28 = 0x400040004000400;
          *((_QWORD *)&_Q28 + 1) = 0x400040004000400;
          v407 = 0uLL;
          v408 = 0uLL;
          v409 = 0uLL;
          v410 = 0uLL;
          v411 = 0uLL;
          v412 = 0uLL;
          v413 = 0uLL;
          v414 = 0uLL;
          do
          {
            v983 = v414;
            v985 = v413;
            v987 = v409;
            v989 = v403;
            v991 = v402;
            v993 = v400;
            _Q29 = v397[1];
            _Q3 = v397[3];
            _H2 = WORD1(_Q3);
            _H4 = WORD1(_Q28);
            __asm { FCVT            S0, H2 }
            v981 = _S0;
            __asm { FCVT            S5, H4 }
            v979 = _S5;
            __asm { FCVT            S24, H3 }
            v975 = _S24;
            __asm { FCVT            S25, H28 }
            v973 = _S25;
            _H2 = WORD2(*((_QWORD *)v397 + 6));
            _H4 = WORD2(_Q28);
            __asm { FCVT            S27, H2 }
            v969 = _S27;
            __asm { FCVT            S9, H4 }
            v967 = _S9;
            _H2 = HIWORD(*((_QWORD *)v397 + 6));
            _H4 = WORD3(_Q28);
            __asm { FCVT            S30, H4 }
            v961 = _S30;
            _H4 = WORD1(*((_QWORD *)v397 + 7));
            __asm { FCVT            S31, H2 }
            v959 = _S31;
            __asm { FCVT            S4, H4 }
            v963 = _S4;
            _H2 = WORD1(_Q1);
            __asm { FCVT            S11, H2 }
            _H2 = WORD1(_Q29);
            __asm
            {
              FCVT            S20, H1
              FCVT            S14, H2
              FCVT            S10, H29
            }
            _H2 = WORD2(_Q1);
            __asm { FCVT            S8, H2 }
            _H2 = WORD2(*((_QWORD *)v397 + 2));
            __asm { FCVT            S15, H2 }
            _H2 = WORD3(_Q1);
            __asm { FCVT            S0, H2 }
            _H2 = HIWORD(*((_QWORD *)v397 + 2));
            __asm { FCVT            S5, H2 }
            _H2 = WORD5(_Q1);
            if (_NF ^ _VF | _ZF)
              v448 = 0;
            else
              v448 = -1;
            v977 = v448;
            __asm { FCVT            S16, H2 }
            _H2 = WORD5(_Q29);
            __asm { FCVT            S7, H2 }
            _H2 = WORD4(_Q1);
            __asm { FCVT            S17, H2 }
            _H2 = WORD4(_Q29);
            __asm { FCVT            S24, H2 }
            _H2 = WORD6(_Q1);
            __asm { FCVT            S25, H2 }
            _H2 = WORD6(_Q29);
            if (_NF ^ _VF | _ZF)
              v459 = 0;
            else
              v459 = -1;
            v971 = v459;
            __asm { FCVT            S18, H2 }
            _S1 = fmaxf(_S11, _S14);
            __asm { FCVT            H2, S1 }
            _S1 = fmaxf(_S20, _S10);
            __asm { FCVT            H1, S1 }
            WORD1(_Q1) = _H2;
            _S2 = fmaxf(_S8, _S15);
            __asm { FCVT            H2, S2 }
            if (_NF ^ _VF | _ZF)
              v466 = 0;
            else
              v466 = -1;
            v965 = v466;
            WORD2(_Q1) = _H2;
            _S2 = fmaxf(_S0, _S5);
            __asm { FCVT            H2, S2 }
            WORD3(_Q1) = LOWORD(_S2);
            _S2 = fmaxf(_S17, _S24);
            __asm { FCVT            H2, S2 }
            WORD4(_Q1) = LOWORD(_S2);
            _S2 = fmaxf(_S16, _S7);
            __asm { FCVT            H2, S2 }
            WORD5(_Q1) = LOWORD(_S2);
            _S2 = fmaxf(_S25, _S18);
            __asm { FCVT            H2, S2 }
            if (_NF ^ _VF | _ZF)
              v472 = 0;
            else
              v472 = -1;
            v949 = v472;
            WORD6(_Q1) = _H2;
            _H2 = WORD5(_Q28);
            __asm { FCVT            S0, H2 }
            v947 = _S0;
            if (_S4 <= _S0)
              v475 = 0;
            else
              v475 = -1;
            _H2 = WORD4(_Q3);
            __asm { FCVT            S4, H2 }
            v943 = _S4;
            _H2 = WORD4(_Q28);
            __asm { FCVT            S0, H2 }
            v945 = _S0;
            if (_S4 <= _S0)
              v480 = 0;
            else
              v480 = -1;
            _H2 = WORD6(_Q3);
            __asm { FCVT            S0, H2 }
            v957 = _S0;
            _H2 = WORD6(_Q28);
            __asm { FCVT            S2, H2 }
            v953 = _S2;
            if (_S0 <= _S2)
              v485 = 0;
            else
              v485 = -1;
            _H2 = HIWORD(_Q3);
            __asm { FCVT            S0, H2 }
            v955 = _S0;
            _H2 = HIWORD(_Q28);
            __asm { FCVT            S2, H2 }
            v951 = _S2;
            if (_S0 <= _S2)
              v490 = 0;
            else
              v490 = -1;
            _Q24 = v397[2];
            _H2 = WORD1(_Q24);
            __asm { FCVT            S31, H2 }
            _H2 = WORD1(_Q26);
            __asm { FCVT            S27, H2 }
            if (_S31 <= _S27)
              v496 = 0;
            else
              v496 = -1;
            __asm
            {
              FCVT            S8, H24
              FCVT            S30, H26
            }
            if (_S8 <= _S30)
              v499 = 0;
            else
              v499 = -1;
            _H2 = WORD2(_Q24);
            __asm { FCVT            S11, H2 }
            _H2 = WORD2(_Q26);
            __asm { FCVT            S9, H2 }
            if (_S11 <= _S9)
              v504 = 0;
            else
              v504 = -1;
            _H2 = WORD3(_Q24);
            __asm { FCVT            S14, H2 }
            _H2 = WORD3(_Q26);
            __asm { FCVT            S10, H2 }
            if (_S14 <= _S10)
              v509 = 0;
            else
              v509 = -1;
            _H2 = WORD5(_Q24);
            __asm { FCVT            S0, H2 }
            v932 = _S0;
            _H2 = WORD5(_Q26);
            __asm { FCVT            S2, H2 }
            v930 = _S2;
            if (_S0 <= _S2)
              v514 = 0;
            else
              v514 = -1;
            _H2 = WORD4(_Q24);
            __asm { FCVT            S28, H2 }
            _H2 = WORD4(_Q26);
            __asm { FCVT            S25, H2 }
            if (_S28 <= _S25)
              v519 = 0;
            else
              v519 = -1;
            _H20 = WORD6(_Q24);
            __asm { FCVT            S0, H20 }
            v933 = _S0;
            _H20 = WORD6(_Q26);
            __asm { FCVT            S15, H20 }
            _H24 = HIWORD(_Q24);
            if (_S0 <= _S15)
              v525 = 0;
            else
              v525 = -1;
            __asm { FCVT            S0, H24 }
            v935 = _S0;
            _H26 = HIWORD(_Q26);
            __asm { FCVT            S2, H26 }
            v934 = _S2;
            if (_S0 <= _S2)
              v529 = 0;
            else
              v529 = -1;
            _H26 = WORD1(_Q12);
            __asm { FCVT            S26, H26 }
            _Q3 = *v397;
            _H13 = WORD1(*v397);
            __asm { FCVT            S13, H13 }
            v535 = _S13 <= _S26;
            _S26 = fmaxf(_S26, _S13);
            if (v535)
              v537 = 0;
            else
              v537 = -1;
            __asm
            {
              FCVT            S13, H12
              FCVT            S0, H3
            }
            _S0 = fmaxf(_S13, _S0);
            _KR10_4 = DWORD1(_Q12);
            _H4 = WORD5(_Q12);
            _H5 = WORD4(_Q12);
            _H7 = WORD6(_Q12);
            v545 = v412;
            v546 = v411;
            v547 = v410;
            _H21 = HIWORD(_Q12);
            __asm
            {
              FCVT            H12, S0
              FCVT            H0, S26
            }
            WORD1(_Q12) = LOWORD(_S0);
            __asm { FCVT            S0, H13 }
            _H26 = WORD2(*(_QWORD *)v397);
            __asm { FCVT            S26, H26 }
            if (_NF ^ _VF | _ZF)
              v552 = 0;
            else
              v552 = -1;
            _S0 = fmaxf(_S0, _S26);
            __asm { FCVT            H0, S0 }
            WORD2(_Q12) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v554 = 0;
            else
              v554 = -1;
            __asm { FCVT            S0, H2 }
            _H2 = HIWORD(*(_QWORD *)v397);
            __asm { FCVT            S2, H2 }
            _S0 = fmaxf(_S0, _S2);
            __asm { FCVT            H0, S0 }
            WORD3(_Q12) = LOWORD(_S0);
            __asm { FCVT            S0, H4 }
            LOWORD(_S2) = WORD1(*((_QWORD *)v397 + 1));
            __asm { FCVT            S2, H2 }
            if (_NF ^ _VF | _ZF)
              v561 = 0;
            else
              v561 = -1;
            if (_S2 <= _S0)
              v562 = 0;
            else
              v562 = -1;
            __asm { FCVT            S3, H5 }
            _H4 = *((_QWORD *)v397 + 1);
            __asm { FCVT            S4, H4 }
            _S3 = fmaxf(_S3, _S4);
            __asm { FCVT            H3, S3 }
            WORD4(_Q12) = LOWORD(_S3);
            _S0 = fmaxf(_S0, _S2);
            __asm { FCVT            H0, S0 }
            WORD5(_Q12) = LOWORD(_S0);
            __asm { FCVT            S0, H7 }
            _H2 = WORD6(*v397);
            __asm { FCVT            S2, H2 }
            if (_NF ^ _VF | _ZF)
              v571 = 0;
            else
              v571 = -1;
            _S0 = fmaxf(_S0, _S2);
            __asm { FCVT            H0, S0 }
            WORD6(_Q12) = LOWORD(_S0);
            LOWORD(_S0) = HIWORD(_Q1);
            __asm { FCVT            S0, H0 }
            _H2 = HIWORD(_Q29);
            __asm { FCVT            S2, H2 }
            _S3 = fmaxf(_S0, _S2);
            __asm { FCVT            H3, S3 }
            HIWORD(_Q1) = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v577 = 0;
            else
              v577 = -1;
            __asm { FCVT            S3, H21 }
            _H4 = HIWORD(*v397);
            __asm { FCVT            S4, H4 }
            if (_S4 <= _S3)
              v581 = 0;
            else
              v581 = -1;
            _S3 = fmaxf(_S3, _S4);
            _S4 = fmaxf(_S27, _S31);
            __asm { FCVT            H3, S3 }
            HIWORD(_Q12) = LOWORD(_S3);
            _S3 = fmaxf(_S30, _S8);
            __asm
            {
              FCVT            H4, S4
              FCVT            H26, S3
            }
            WORD1(_Q26) = LOWORD(_S4);
            if (_NF ^ _VF | _ZF)
              v585 = 0;
            else
              v585 = -1;
            _S3 = fmaxf(_S9, _S11);
            __asm { FCVT            H3, S3 }
            WORD2(_Q26) = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v587 = 0;
            else
              v587 = -1;
            _S3 = fmaxf(_S10, _S14);
            __asm { FCVT            H3, S3 }
            WORD3(_Q26) = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v589 = 0;
            else
              v589 = -1;
            _S3 = fmaxf(_S25, _S28);
            __asm { FCVT            H3, S3 }
            WORD4(_Q26) = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v591 = 0;
            else
              v591 = -1;
            _S3 = fmaxf(v930, v932);
            __asm { FCVT            H3, S3 }
            WORD5(_Q26) = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v593 = 0;
            else
              v593 = -1;
            _S3 = fmaxf(_S15, v933);
            __asm { FCVT            H3, S3 }
            WORD6(_Q26) = LOWORD(_S3);
            v595 = v401;
            if (_NF ^ _VF | _ZF)
              v596 = 0;
            else
              v596 = -1;
            _S3 = fmaxf(v934, v935);
            v598.i16[0] = v480;
            __asm { FCVT            H3, S3 }
            v598.i16[1] = v475;
            HIWORD(_Q26) = LOWORD(_S3);
            v599.i16[0] = v499;
            v599.i16[1] = v496;
            if (_NF ^ _VF | _ZF)
              v600 = 0;
            else
              v600 = -1;
            v599.i16[2] = v504;
            v599.i16[3] = v509;
            v1004 = vbslq_s8((int8x16_t)vmovl_s16(v599), (int8x16_t)v546, v1004);
            v598.i16[2] = v485;
            v598.i16[3] = v490;
            v997 = vbslq_s8((int8x16_t)vmovl_s16(v598), (int8x16_t)v983, v997);
            _S0 = fmaxf(v979, v981);
            *(float *)_D2.i32 = fmaxf(v973, v975);
            v603.i16[0] = v519;
            v603.i16[1] = v514;
            v603.i16[2] = v525;
            v603.i16[3] = v529;
            v999 = vbslq_s8((int8x16_t)vmovl_s16(v603), (int8x16_t)v545, v999);
            __asm
            {
              FCVT            H0, S0
              FCVT            H28, S2
            }
            WORD1(_Q28) = LOWORD(_S0);
            _S0 = fmaxf(v967, v969);
            __asm { FCVT            H0, S0 }
            WORD2(_Q28) = LOWORD(_S0);
            *(float *)_D0.i32 = fmaxf(v961, v959);
            _D2.i16[0] = v552;
            _D2.i16[1] = v537;
            _D2.i16[2] = v554;
            _D2.i16[3] = v561;
            v400 = vbslq_s8((int8x16_t)vmovl_s16(_D2), (int8x16_t)v407, v993);
            __asm { FCVT            H0, S0 }
            WORD3(_Q28) = _D0.i16[0];
            _D0.i16[0] = v571;
            _D0.i16[1] = v562;
            _D0.i16[2] = v577;
            _D0.i16[3] = v581;
            v402 = vbslq_s8((int8x16_t)vmovl_s16(_D0), (int8x16_t)v408, v991);
            *(float *)_D0.i32 = fmaxf(v945, v943);
            __asm { FCVT            H0, S0 }
            WORD4(_Q28) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v947, v963);
            _D2.i16[0] = v971;
            _D2.i16[1] = v977;
            _D2.i16[2] = v965;
            _D2.i16[3] = v949;
            __asm { FCVT            H0, S0 }
            WORD5(_Q28) = _D0.i16[0];
            _D0.i16[0] = v587;
            _D0.i16[1] = v585;
            _D0.i16[2] = v589;
            v606.i16[3] = v591;
            v995 = vbslq_s8((int8x16_t)vmovl_s16(v606), (int8x16_t)v987, v995);
            v606.i16[0] = v596;
            v606.i16[1] = v593;
            v606.i16[2] = v600;
            v1001 = vbslq_s8((int8x16_t)vmovl_s16(_D2), (int8x16_t)v985, v1001);
            if (_NF ^ _VF | _ZF)
              v607 = 0;
            else
              v607 = -1;
            v606.i16[3] = v607;
            v403 = vbslq_s8((int8x16_t)vmovl_s16(v606), (int8x16_t)v547, v989);
            _S0 = fmaxf(v953, v957);
            __asm { FCVT            H0, S0 }
            WORD6(_Q28) = LOWORD(_S0);
            _S0 = fmaxf(v951, v955);
            __asm { FCVT            H0, S0 }
            HIWORD(_Q28) = LOWORD(_S0);
            v610.i64[0] = 0x100000001;
            v610.i64[1] = 0x100000001;
            v407 = vaddq_s32(v407, v610);
            v408 = vaddq_s32(v408, v610);
            v409 = vaddq_s32(v987, v610);
            v410 = vaddq_s32(v547, v610);
            v411 = vaddq_s32(v546, v610);
            v412 = vaddq_s32(v545, v610);
            v413 = vaddq_s32(v985, v610);
            v414 = vaddq_s32(v983, v610);
            v397 = (__int128 *)((char *)v397 + v928);
            v401 = v595 - 1;
          }
          while (v595 != 1);
          *(int8x16_t *)__p = v400;
          v1013 = v402;
          v1014 = v995;
          v1015 = v403;
          v1016 = v1004;
          v1017 = v999;
          v1018 = v1001;
          v1019 = v997;
          a5 = v830;
          v398 = v926;
          if (v830 < 1)
            goto LABEL_432;
        }
        v729 = 0;
        do
        {
          _H0 = *((_WORD *)v397 + v729);
          v1009[0] = _Q12;
          v1009[1] = _Q1;
          v1009[2] = _Q26;
          v1009[3] = _Q28;
          _H2 = *((_WORD *)v1009 + (v729 & 0x1F));
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H2
          }
          if (_S0 > _S2)
            *((_DWORD *)__p + v729) = v398;
          ++v729;
        }
        while (a5 != v729);
        goto LABEL_432;
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        if (!a2)
          goto LABEL_432;
        v11 = (__int128 *)(a1 + 2 * a4);
        v12 = a2 - 1;
        if (a2 <= 1)
        {
          v1026 = 0u;
          v1027 = 0u;
          v1024 = 0u;
          v1025 = 0u;
          v1022 = 0u;
          v1023 = 0u;
          v1020 = 0u;
          v1021 = 0u;
          v1018 = 0u;
          v1019 = 0u;
          *(_QWORD *)&_Q30 = 0x400040004000400;
          *((_QWORD *)&_Q30 + 1) = 0x400040004000400;
          v1016 = 0u;
          v1017 = 0u;
          *(_QWORD *)&_Q3 = 0x400040004000400;
          *((_QWORD *)&_Q3 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q1 = 0x400040004000400;
          *((_QWORD *)&_Q1 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q28 = 0x400040004000400;
          *((_QWORD *)&_Q28 + 1) = 0x400040004000400;
          v1014 = 0u;
          v1015 = 0u;
          *(_QWORD *)&_Q17 = 0x400040004000400;
          *((_QWORD *)&_Q17 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q18 = 0x400040004000400;
          *((_QWORD *)&_Q18 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q19 = 0x400040004000400;
          *((_QWORD *)&_Q19 + 1) = 0x400040004000400;
          *(_OWORD *)__p = 0u;
          v1013 = 0u;
          *(_QWORD *)&_Q20 = 0x400040004000400;
          *((_QWORD *)&_Q20 + 1) = 0x400040004000400;
        }
        else
        {
          *(_QWORD *)&_Q30 = 0x400040004000400;
          *((_QWORD *)&_Q30 + 1) = 0x400040004000400;
          v14 = 0uLL;
          v829 = a5;
          v831 = 2 * a3;
          v828 = a2 - 1;
          v15 = 0uLL;
          v16 = 0uLL;
          v17 = 0uLL;
          v18 = 0uLL;
          v19 = 0uLL;
          v1000 = 0u;
          v20 = 0uLL;
          v998 = 0u;
          v994 = 0u;
          v996 = 0u;
          v990 = 0u;
          v992 = 0u;
          v986 = 0u;
          v988 = 0u;
          v21 = 0uLL;
          *(_QWORD *)&_Q3 = 0x400040004000400;
          *((_QWORD *)&_Q3 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q1 = 0x400040004000400;
          *((_QWORD *)&_Q1 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q28 = 0x400040004000400;
          *((_QWORD *)&_Q28 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q17 = 0x400040004000400;
          *((_QWORD *)&_Q17 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q18 = 0x400040004000400;
          *((_QWORD *)&_Q18 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q19 = 0x400040004000400;
          *((_QWORD *)&_Q19 + 1) = 0x400040004000400;
          *(_QWORD *)&_Q20 = 0x400040004000400;
          *((_QWORD *)&_Q20 + 1) = 0x400040004000400;
          v978 = 0u;
          v980 = 0u;
          v29 = 0uLL;
          v30 = 0uLL;
          v31 = 0uLL;
          v32 = 0uLL;
          v1003 = 0u;
          v982 = 0u;
          v984 = 0u;
          v974 = 0u;
          v976 = 0u;
          v970 = 0u;
          v972 = 0u;
          v966 = 0u;
          v968 = 0u;
          v964 = 0u;
          do
          {
            v940 = v31;
            v941 = v32;
            v942 = v30;
            v944 = v29;
            v946 = v21;
            v948 = v20;
            v950 = v19;
            v952 = v18;
            v954 = v17;
            v956 = v16;
            v958 = v15;
            v960 = v12;
            v962 = v14;
            _Q31 = *v11;
            _Q2 = v11[1];
            _H4 = WORD1(_Q30);
            __asm { FCVT            S23, H4 }
            _H7 = WORD1(*v11);
            __asm { FCVT            S22, H30 }
            _KR00_4 = DWORD1(_Q30);
            _H5 = WORD5(_Q30);
            _H16 = WORD1(_Q3);
            __asm
            {
              FCVT            S10, H7
              FCVT            S0, H16
            }
            _H7 = WORD1(_Q2);
            __asm
            {
              FCVT            S21, H3
              FCVT            S24, H2
            }
            _H16 = WORD2(_Q3);
            __asm
            {
              FCVT            S26, H7
              FCVT            S25, H16
            }
            _H7 = WORD2(*((_QWORD *)v11 + 2));
            _H16 = WORD3(_Q3);
            __asm { FCVT            S27, H16 }
            _H16 = HIWORD(*((_QWORD *)v11 + 2));
            __asm
            {
              FCVT            S9, H7
              FCVT            S29, H16
            }
            _H7 = WORD5(_Q3);
            __asm { FCVT            S11, H7 }
            _H7 = WORD1(*((_QWORD *)v11 + 3));
            _H16 = WORD4(_Q3);
            __asm
            {
              FCVT            S12, H7
              FCVT            S8, H16
            }
            _H7 = *((_QWORD *)v11 + 3);
            _H16 = WORD6(_Q3);
            __asm { FCVT            S13, H16 }
            _H16 = WORD6(_Q2);
            __asm
            {
              FCVT            S15, H7
              FCVT            S14, H16
            }
            _H7 = HIWORD(_Q3);
            _S16 = fmaxf(_S0, _S26);
            _S3 = fmaxf(_S21, _S24);
            __asm
            {
              FCVT            H3, S3
              FCVT            H16, S16
            }
            WORD1(_Q3) = LOWORD(_S16);
            _S16 = fmaxf(_S25, _S9);
            __asm { FCVT            H16, S16 }
            WORD2(_Q3) = LOWORD(_S16);
            _S16 = fmaxf(_S27, _S29);
            __asm { FCVT            H16, S16 }
            WORD3(_Q3) = LOWORD(_S16);
            _S16 = fmaxf(_S8, _S15);
            __asm { FCVT            H16, S16 }
            WORD4(_Q3) = LOWORD(_S16);
            _S16 = fmaxf(_S11, _S12);
            __asm { FCVT            H16, S16 }
            WORD5(_Q3) = LOWORD(_S16);
            _S16 = fmaxf(_S13, _S14);
            __asm { FCVT            H16, S16 }
            WORD6(_Q3) = LOWORD(_S16);
            LOWORD(_S16) = WORD4(_Q30);
            _KR04_4 = HIDWORD(_Q30);
            __asm { FCVT            S0, H31 }
            _S0 = fmaxf(_S22, _S0);
            __asm { FCVT            H30, S0 }
            _S22 = fmaxf(_S23, _S10);
            __asm { FCVT            H22, S22 }
            WORD1(_Q30) = LOWORD(_S22);
            __asm { FCVT            S0, H4 }
            _H4 = WORD2(*(_QWORD *)v11);
            __asm { FCVT            S4, H4 }
            _S4 = fmaxf(_S0, _S4);
            __asm { FCVT            H4, S4 }
            WORD2(_Q30) = LOWORD(_S4);
            __asm { FCVT            S0, H6 }
            LOWORD(_S4) = HIWORD(*(_QWORD *)v11);
            __asm { FCVT            S4, H4 }
            _S4 = fmaxf(_S0, _S4);
            __asm { FCVT            H4, S4 }
            WORD3(_Q30) = LOWORD(_S4);
            __asm { FCVT            S0, H16 }
            LOWORD(_S4) = *((_QWORD *)v11 + 1);
            __asm { FCVT            S4, H4 }
            _S4 = fmaxf(_S0, _S4);
            __asm { FCVT            H4, S4 }
            WORD4(_Q30) = LOWORD(_S4);
            __asm { FCVT            S0, H7 }
            LOWORD(_Q2) = HIWORD(_Q2);
            __asm { FCVT            S2, H2 }
            *(float *)&_Q2 = fmaxf(_S0, *(float *)&_Q2);
            __asm { FCVT            H2, S2 }
            HIWORD(_Q3) = _Q2;
            __asm { FCVT            S0, H5 }
            LOWORD(_Q2) = WORD1(*((_QWORD *)v11 + 1));
            __asm { FCVT            S2, H2 }
            *(float *)&_Q2 = fmaxf(_S0, *(float *)&_Q2);
            __asm { FCVT            H2, S2 }
            WORD5(_Q30) = _Q2;
            __asm { FCVT            S0, H21 }
            LOWORD(_Q2) = WORD6(*v11);
            __asm { FCVT            S2, H2 }
            *(float *)&_Q2 = fmaxf(_S0, *(float *)&_Q2);
            __asm { FCVT            H2, S2 }
            WORD6(_Q30) = _Q2;
            _Q2 = v11[7];
            LOWORD(_S4) = WORD1(_Q2);
            __asm { FCVT            S0, H4 }
            v918 = _S0;
            LOWORD(_S4) = WORD1(_Q20);
            __asm { FCVT            S4, H4 }
            v916 = _S4;
            if (_S0 <= _S4)
              v100 = 0;
            else
              v100 = -1;
            v939 = v100;
            __asm { FCVT            S0, H20 }
            v915 = _S0;
            __asm { FCVT            S4, H2 }
            v913 = _S4;
            LOWORD(_S4) = WORD2(_Q2);
            __asm { FCVT            S0, H4 }
            v917 = _S0;
            LOWORD(_S4) = WORD2(_Q20);
            __asm { FCVT            S4, H4 }
            v914 = _S4;
            if (_NF ^ _VF | _ZF)
              v105 = 0;
            else
              v105 = -1;
            v938 = v105;
            _H4 = WORD3(_Q2);
            __asm { FCVT            S0, H4 }
            v922 = _S0;
            _H4 = WORD3(_Q20);
            __asm { FCVT            S4, H4 }
            v921 = _S4;
            if (_NF ^ _VF | _ZF)
              v110 = 0;
            else
              v110 = -1;
            v937 = v110;
            _H4 = WORD5(_Q2);
            __asm { FCVT            S0, H4 }
            v924 = _S0;
            _H4 = WORD5(_Q20);
            __asm { FCVT            S4, H4 }
            v923 = _S4;
            if (_NF ^ _VF | _ZF)
              v115 = 0;
            else
              v115 = -1;
            v936 = v115;
            _H4 = WORD4(_Q2);
            __asm { FCVT            S0, H4 }
            v920 = _S0;
            _H4 = WORD4(_Q20);
            __asm { FCVT            S4, H4 }
            v919 = _S4;
            if (_NF ^ _VF | _ZF)
              v120 = 0;
            else
              v120 = -1;
            _H4 = WORD6(_Q2);
            __asm { FCVT            S0, H4 }
            v931 = _S0;
            _H4 = WORD6(_Q20);
            __asm { FCVT            S4, H4 }
            v927 = _S4;
            if (_NF ^ _VF | _ZF)
              v125 = 0;
            else
              v125 = -1;
            v902 = v125;
            _H2 = HIWORD(_Q2);
            __asm { FCVT            S0, H2 }
            v929 = _S0;
            _H2 = HIWORD(_Q20);
            __asm { FCVT            S2, H2 }
            v925 = _S2;
            if (_NF ^ _VF | _ZF)
              v130 = 0;
            else
              v130 = -1;
            v912 = v130;
            if (_S0 <= _S2)
              v131 = 0;
            else
              v131 = -1;
            v911 = v131;
            _Q2 = v11[6];
            _H4 = WORD1(_Q2);
            __asm { FCVT            S0, H4 }
            v891 = _S0;
            _H4 = WORD1(_Q19);
            __asm { FCVT            S4, H4 }
            v888 = _S4;
            if (_S0 <= _S4)
              v137 = 0;
            else
              v137 = -1;
            v900 = v137;
            __asm { FCVT            S0, H2 }
            v890 = _S0;
            __asm { FCVT            S4, H19 }
            v889 = _S4;
            if (_S0 <= _S4)
              v140 = 0;
            else
              v140 = -1;
            v899 = v140;
            _H4 = WORD2(_Q2);
            __asm { FCVT            S0, H4 }
            v895 = _S0;
            _H4 = WORD2(_Q19);
            __asm { FCVT            S4, H4 }
            v892 = _S4;
            if (_S0 <= _S4)
              v145 = 0;
            else
              v145 = -1;
            v897 = v145;
            _H4 = WORD3(_Q2);
            __asm { FCVT            S0, H4 }
            v896 = _S0;
            _H4 = WORD3(_Q19);
            __asm { FCVT            S4, H4 }
            v893 = _S4;
            if (_S0 <= _S4)
              v150 = 0;
            else
              v150 = -1;
            v901 = v150;
            _H4 = WORD5(_Q2);
            __asm { FCVT            S0, H4 }
            v909 = _S0;
            _H4 = WORD5(_Q19);
            __asm { FCVT            S4, H4 }
            v906 = _S4;
            if (_S0 <= _S4)
              v155 = 0;
            else
              v155 = -1;
            _H4 = WORD4(_Q2);
            __asm { FCVT            S0, H4 }
            v904 = _S0;
            _H4 = WORD4(_Q19);
            __asm { FCVT            S4, H4 }
            v903 = _S4;
            if (_S0 <= _S4)
              v160 = 0;
            else
              v160 = -1;
            v887 = v160;
            _H4 = WORD6(_Q2);
            __asm { FCVT            S0, H4 }
            v910 = _S0;
            _H4 = WORD6(_Q19);
            __asm { FCVT            S4, H4 }
            v907 = _S4;
            if (_S0 <= _S4)
              v165 = 0;
            else
              v165 = -1;
            v898 = v165;
            _H2 = HIWORD(_Q2);
            __asm { FCVT            S0, H2 }
            v908 = _S0;
            _H2 = HIWORD(_Q19);
            __asm { FCVT            S2, H2 }
            v905 = _S2;
            _Q2 = v11[5];
            _H4 = WORD1(_Q2);
            __asm { FCVT            S0, H4 }
            v857 = _S0;
            _H4 = WORD1(_Q18);
            __asm { FCVT            S4, H4 }
            if (_NF ^ _VF | _ZF)
              v175 = 0;
            else
              v175 = -1;
            v894 = v175;
            if (_S0 <= _S4)
              v176 = 0;
            else
              v176 = -1;
            __asm { FCVT            S0, H2 }
            v854 = _S4;
            v855 = _S0;
            __asm { FCVT            S4, H18 }
            v853 = _S4;
            if (_S0 <= _S4)
              v179 = 0;
            else
              v179 = -1;
            _H4 = WORD2(_Q2);
            __asm { FCVT            S0, H4 }
            v859 = _S0;
            _H4 = WORD2(_Q18);
            __asm { FCVT            S4, H4 }
            v856 = _S4;
            if (_S0 <= _S4)
              v184 = 0;
            else
              v184 = -1;
            v884 = v176;
            v885 = v184;
            _H4 = WORD3(_Q2);
            __asm { FCVT            S0, H4 }
            v860 = _S0;
            _H4 = WORD3(_Q18);
            __asm { FCVT            S4, H4 }
            v858 = _S4;
            if (_S0 <= _S4)
              v189 = 0;
            else
              v189 = -1;
            v882 = v179;
            v883 = v189;
            _H4 = WORD5(_Q2);
            __asm { FCVT            S5, H4 }
            _H4 = WORD5(_Q18);
            __asm { FCVT            S0, H4 }
            v865 = _S0;
            if (_S5 <= _S0)
              v194 = 0;
            else
              v194 = -1;
            _H4 = WORD4(_Q2);
            __asm { FCVT            S0, H4 }
            v852 = _S0;
            _H4 = WORD4(_Q18);
            __asm { FCVT            S4, H4 }
            v850 = _S5;
            v851 = _S4;
            if (_S0 <= _S4)
              v199 = 0;
            else
              v199 = -1;
            _H4 = WORD6(_Q2);
            __asm { FCVT            S0, H4 }
            v863 = _S0;
            _H4 = WORD6(_Q18);
            __asm { FCVT            S4, H4 }
            if (_S0 <= _S4)
              v204 = 0;
            else
              v204 = -1;
            v880 = v204;
            v881 = v194;
            _H2 = HIWORD(_Q2);
            __asm { FCVT            S0, H2 }
            v864 = _S0;
            _H2 = HIWORD(_Q18);
            __asm { FCVT            S2, H2 }
            v861 = _S4;
            v862 = _S2;
            if (_S0 <= _S2)
              v209 = 0;
            else
              v209 = -1;
            v878 = v209;
            v879 = v199;
            _Q2 = v11[4];
            _H4 = WORD1(_Q2);
            __asm { FCVT            S0, H4 }
            v840 = _S0;
            _H4 = WORD1(_Q17);
            __asm { FCVT            S4, H4 }
            v836 = _S4;
            if (_S0 <= _S4)
              v215 = 0;
            else
              v215 = -1;
            v876 = v215;
            __asm
            {
              FCVT            S0, H2
              FCVT            S4, H17
            }
            v838 = _S4;
            v839 = _S0;
            if (_S0 <= _S4)
              v218 = 0;
            else
              v218 = -1;
            v874 = v218;
            _H4 = WORD2(_Q2);
            __asm { FCVT            S0, H4 }
            v843 = _S0;
            _H4 = WORD2(_Q17);
            __asm { FCVT            S4, H4 }
            v841 = _S4;
            if (_S0 <= _S4)
              v223 = 0;
            else
              v223 = -1;
            _H4 = WORD3(_Q2);
            __asm { FCVT            S0, H4 }
            v844 = _S0;
            _H4 = WORD3(_Q17);
            __asm { FCVT            S4, H4 }
            v842 = _S4;
            if (_S0 <= _S4)
              v228 = 0;
            else
              v228 = -1;
            v871 = v228;
            v872 = v223;
            _H4 = WORD5(_Q2);
            __asm { FCVT            S5, H4 }
            _H4 = WORD5(_Q17);
            __asm { FCVT            S0, H4 }
            v848 = _S5;
            v849 = _S0;
            if (_S5 <= _S0)
              v233 = 0;
            else
              v233 = -1;
            v877 = v233;
            _H4 = WORD4(_Q2);
            __asm { FCVT            S0, H4 }
            v837 = _S0;
            _H4 = WORD4(_Q17);
            __asm { FCVT            S4, H4 }
            v835 = _S4;
            if (_S0 <= _S4)
              v238 = 0;
            else
              v238 = -1;
            v875 = v238;
            _H4 = WORD6(_Q2);
            __asm { FCVT            S0, H4 }
            v847 = _S0;
            _H4 = WORD6(_Q17);
            __asm { FCVT            S4, H4 }
            v845 = _S4;
            _H2 = HIWORD(_Q2);
            if (_S0 <= _S4)
              v244 = 0;
            else
              v244 = -1;
            v873 = v244;
            __asm { FCVT            S4, H2 }
            v834 = _S4;
            _H2 = HIWORD(_Q17);
            __asm { FCVT            S0, H2 }
            v846 = _S0;
            _Q20 = v11[3];
            _H2 = WORD1(_Q20);
            __asm { FCVT            S6, H2 }
            LOWORD(_S4) = WORD1(_Q28);
            __asm { FCVT            S5, H4 }
            if (_NF ^ _VF | _ZF)
              v252 = 0;
            else
              v252 = -1;
            if (_S6 <= _S5)
              v253 = 0;
            else
              v253 = -1;
            v869 = v252;
            v870 = v253;
            __asm
            {
              FCVT            S17, H20
              FCVT            S7, H28
            }
            _H4 = WORD2(_Q20);
            __asm { FCVT            S23, H4 }
            _H4 = WORD2(_Q28);
            __asm { FCVT            S19, H4 }
            if (_NF ^ _VF | _ZF)
              v260 = 0;
            else
              v260 = -1;
            v868 = v260;
            _H4 = WORD3(_Q20);
            __asm { FCVT            S24, H4 }
            _H4 = WORD3(_Q28);
            __asm { FCVT            S21, H4 }
            if (_NF ^ _VF | _ZF)
              v265 = 0;
            else
              v265 = -1;
            v866 = v265;
            _H4 = WORD5(_Q20);
            __asm { FCVT            S0, H4 }
            _H4 = WORD5(_Q28);
            __asm { FCVT            S2, H4 }
            v832 = _S2;
            v833 = _S0;
            if (_NF ^ _VF | _ZF)
              v270 = 0;
            else
              v270 = -1;
            _H4 = WORD4(_Q20);
            __asm { FCVT            S18, H4 }
            _H4 = WORD4(_Q28);
            __asm { FCVT            S16, H4 }
            if (_NF ^ _VF | _ZF)
              v275 = 0;
            else
              v275 = -1;
            v867 = v275;
            _H22 = WORD6(_Q20);
            __asm { FCVT            S25, H22 }
            _H22 = WORD6(_Q28);
            __asm { FCVT            S22, H22 }
            _H20 = HIWORD(_Q20);
            __asm { FCVT            S26, H20 }
            _H20 = HIWORD(_Q28);
            if (_NF ^ _VF | _ZF)
              v283 = 0;
            else
              v283 = -1;
            __asm { FCVT            S20, H20 }
            _Q28 = v11[2];
            _H27 = WORD1(_Q28);
            __asm { FCVT            S27, H27 }
            if (_NF ^ _VF | _ZF)
              v287 = 0;
            else
              v287 = -1;
            _H29 = WORD1(_Q1);
            __asm { FCVT            S29, H29 }
            if (_NF ^ _VF | _ZF)
              v290 = 0;
            else
              v290 = -1;
            _S0 = fmaxf(_S29, _S27);
            __asm { FCVT            S8, H9 }
            _H27 = HIWORD(*v11);
            __asm { FCVT            S2, H27 }
            _S14 = fmaxf(_S8, _S2);
            __asm { FCVT            H14, S14 }
            HIWORD(_Q30) = LOWORD(_S14);
            if (_NF ^ _VF | _ZF)
              v296 = 0;
            else
              v296 = -1;
            v886 = v296;
            __asm
            {
              FCVT            S14, H28
              FCVT            S15, H1
            }
            _S14 = fmaxf(_S15, _S14);
            _KR08_4 = DWORD1(_Q1);
            _H12 = WORD5(_Q1);
            _H10 = WORD4(_Q1);
            _KR0C_4 = HIDWORD(_Q1);
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S14
            }
            WORD1(_Q1) = _H0;
            __asm { FCVT            S0, H15 }
            LOWORD(_S14) = WORD2(_Q28);
            __asm { FCVT            S14, H14 }
            _S15 = fmaxf(_S0, _S14);
            __asm { FCVT            H15, S15 }
            WORD2(_Q1) = LOWORD(_S15);
            LOWORD(_S15) = WORD3(_Q28);
            __asm
            {
              FCVT            S15, H15
              FCVT            S13, H13
            }
            _S9 = fmaxf(_S13, _S15);
            __asm { FCVT            H9, S9 }
            WORD3(_Q1) = LOWORD(_S9);
            if (_NF ^ _VF | _ZF)
              v311 = 0;
            else
              v311 = -1;
            _H0 = WORD4(_Q28);
            __asm
            {
              FCVT            S0, H0
              FCVT            S9, H10
            }
            _S10 = fmaxf(_S9, _S0);
            __asm { FCVT            H10, S10 }
            WORD4(_Q1) = LOWORD(_S10);
            LOWORD(_S10) = WORD5(_Q28);
            __asm
            {
              FCVT            S10, H10
              FCVT            S12, H12
            }
            _S14 = fmaxf(_S12, _S10);
            __asm { FCVT            H14, S14 }
            WORD5(_Q1) = LOWORD(_S14);
            __asm { FCVT            S11, H11 }
            LOWORD(_S14) = WORD6(_Q28);
            __asm { FCVT            S14, H14 }
            _S31 = fmaxf(_S11, _S14);
            __asm { FCVT            H31, S31 }
            WORD6(_Q1) = LOWORD(_S31);
            _S5 = fmaxf(_S5, _S6);
            _H6 = HIWORD(_Q28);
            __asm
            {
              FCVT            S6, H6
              FCVT            S2, H2
            }
            _S28 = fmaxf(_S2, _S6);
            __asm { FCVT            H28, S28 }
            HIWORD(_Q1) = LOWORD(_S28);
            _S7 = fmaxf(_S7, _S17);
            __asm
            {
              FCVT            H5, S5
              FCVT            H28, S7
            }
            WORD1(_Q28) = LOWORD(_S5);
            if (_NF ^ _VF | _ZF)
              v328 = 0;
            else
              v328 = -1;
            _S5 = fmaxf(_S19, _S23);
            __asm { FCVT            H5, S5 }
            WORD2(_Q28) = LOWORD(_S5);
            if (_NF ^ _VF | _ZF)
              v330 = 0;
            else
              v330 = -1;
            _S5 = fmaxf(_S21, _S24);
            __asm { FCVT            H5, S5 }
            WORD3(_Q28) = LOWORD(_S5);
            if (_NF ^ _VF | _ZF)
              v332 = 0;
            else
              v332 = -1;
            _S0 = fmaxf(_S16, _S18);
            __asm { FCVT            H0, S0 }
            WORD4(_Q28) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v334 = 0;
            else
              v334 = -1;
            _S0 = fmaxf(v832, v833);
            __asm { FCVT            H0, S0 }
            WORD5(_Q28) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v336 = 0;
            else
              v336 = -1;
            _S0 = fmaxf(_S22, _S25);
            __asm { FCVT            H0, S0 }
            WORD6(_Q28) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v338 = 0;
            else
              v338 = -1;
            _S0 = fmaxf(_S20, _S26);
            _S2 = fmaxf(v836, v840);
            __asm { FCVT            H0, S0 }
            HIWORD(_Q28) = LOWORD(_S0);
            _S0 = fmaxf(v838, v839);
            __asm
            {
              FCVT            H2, S2
              FCVT            H17, S0
            }
            WORD1(_Q17) = LOWORD(_S2);
            if (_NF ^ _VF | _ZF)
              v342 = 0;
            else
              v342 = -1;
            _S0 = fmaxf(v841, v843);
            __asm { FCVT            H0, S0 }
            WORD2(_Q17) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v344 = 0;
            else
              v344 = -1;
            _S0 = fmaxf(v842, v844);
            __asm { FCVT            H0, S0 }
            WORD3(_Q17) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v346 = 0;
            else
              v346 = -1;
            _S0 = fmaxf(v835, v837);
            __asm { FCVT            H0, S0 }
            WORD4(_Q17) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v348 = 0;
            else
              v348 = -1;
            _S0 = fmaxf(v849, v848);
            __asm { FCVT            H0, S0 }
            WORD5(_Q17) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v350 = 0;
            else
              v350 = -1;
            _S0 = fmaxf(v845, v847);
            __asm { FCVT            H0, S0 }
            WORD6(_Q17) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v352 = 0;
            else
              v352 = -1;
            _S0 = fmaxf(v846, v834);
            _S2 = fmaxf(v854, v857);
            __asm { FCVT            H0, S0 }
            HIWORD(_Q17) = LOWORD(_S0);
            _S0 = fmaxf(v853, v855);
            __asm
            {
              FCVT            H2, S2
              FCVT            H18, S0
            }
            WORD1(_Q18) = LOWORD(_S2);
            if (_NF ^ _VF | _ZF)
              v356 = 0;
            else
              v356 = -1;
            _S0 = fmaxf(v856, v859);
            __asm { FCVT            H0, S0 }
            WORD2(_Q18) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v358 = 0;
            else
              v358 = -1;
            _S0 = fmaxf(v858, v860);
            __asm { FCVT            H0, S0 }
            WORD3(_Q18) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v360 = 0;
            else
              v360 = -1;
            _S0 = fmaxf(v851, v852);
            __asm { FCVT            H0, S0 }
            WORD4(_Q18) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v362 = 0;
            else
              v362 = -1;
            _S0 = fmaxf(v865, v850);
            __asm { FCVT            H0, S0 }
            WORD5(_Q18) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v364 = 0;
            else
              v364 = -1;
            _S0 = fmaxf(v861, v863);
            __asm { FCVT            H0, S0 }
            WORD6(_Q18) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v366 = 0;
            else
              v366 = -1;
            _S0 = fmaxf(v862, v864);
            _S2 = fmaxf(v888, v891);
            __asm { FCVT            H0, S0 }
            HIWORD(_Q18) = LOWORD(_S0);
            _S0 = fmaxf(v889, v890);
            __asm
            {
              FCVT            H2, S2
              FCVT            H19, S0
            }
            WORD1(_Q19) = LOWORD(_S2);
            if (_NF ^ _VF | _ZF)
              v370 = 0;
            else
              v370 = -1;
            _S0 = fmaxf(v892, v895);
            __asm { FCVT            H0, S0 }
            WORD2(_Q19) = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v372 = 0;
            else
              v372 = -1;
            _S0 = fmaxf(v893, v896);
            __asm { FCVT            H0, S0 }
            WORD3(_Q19) = LOWORD(_S0);
            v374.i16[0] = v902;
            v374.i16[1] = v120;
            v375.i16[0] = v899;
            v375.i16[1] = v900;
            v376.i16[0] = v887;
            v376.i16[1] = v155;
            v377.i16[0] = v882;
            v377.i16[1] = v884;
            v378.i16[0] = v879;
            v378.i16[1] = v881;
            v379.i16[0] = v874;
            v379.i16[1] = v876;
            if (_NF ^ _VF | _ZF)
              v380 = 0;
            else
              v380 = -1;
            v379.i16[2] = v872;
            v379.i16[3] = v871;
            v998 = vbslq_s8((int8x16_t)vmovl_s16(v379), (int8x16_t)v982, v998);
            v378.i16[2] = v880;
            v378.i16[3] = v878;
            v992 = vbslq_s8((int8x16_t)vmovl_s16(v378), (int8x16_t)v972, v992);
            v377.i16[2] = v885;
            v377.i16[3] = v883;
            v994 = vbslq_s8((int8x16_t)vmovl_s16(v377), (int8x16_t)v974, v994);
            v376.i16[2] = v898;
            v376.i16[3] = v894;
            v375.i16[2] = v897;
            v375.i16[3] = v901;
            v988 = vbslq_s8((int8x16_t)vmovl_s16(v376), (int8x16_t)v968, v988);
            v990 = vbslq_s8((int8x16_t)vmovl_s16(v375), (int8x16_t)v970, v990);
            v374.i16[2] = v912;
            v374.i16[3] = v911;
            v986 = vbslq_s8((int8x16_t)vmovl_s16(v374), (int8x16_t)v964, v986);
            _D0.i16[0] = v875;
            _D0.i16[1] = v877;
            _D0.i16[2] = v873;
            _D0.i16[3] = v869;
            _S2 = fmaxf(v903, v904);
            v383.i16[0] = v868;
            v383.i16[1] = v870;
            v383.i16[2] = v866;
            v383.i16[3] = v270;
            v996 = vbslq_s8((int8x16_t)vmovl_s16(_D0), (int8x16_t)v976, v996);
            __asm { FCVT            H0, S2 }
            WORD4(_Q19) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v906, v909);
            v1000 = vbslq_s8((int8x16_t)vmovl_s16(v383), (int8x16_t)v1003, v1000);
            __asm { FCVT            H0, S0 }
            WORD5(_Q19) = _D0.i16[0];
            _D0.i16[0] = v283;
            _D0.i16[1] = v867;
            _D0.i16[2] = v287;
            _D0.i16[3] = v290;
            v20 = vbslq_s8((int8x16_t)vmovl_s16(_D0), (int8x16_t)v984, v948);
            *(float *)_D0.i32 = fmaxf(v907, v910);
            __asm { FCVT            H0, S0 }
            WORD6(_Q19) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v905, v908);
            __asm { FCVT            H0, S0 }
            HIWORD(_Q19) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v916, v918);
            *(float *)_D2.i32 = fmaxf(v915, v913);
            __asm
            {
              FCVT            H20, S2
              FCVT            H0, S0
            }
            WORD1(_Q20) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v914, v917);
            _D2.i16[0] = v311;
            _D2.i16[1] = v886;
            _D2.i16[2] = v328;
            _D2.i16[3] = v330;
            v18 = vbslq_s8((int8x16_t)vmovl_s16(_D2), (int8x16_t)v940, v952);
            __asm { FCVT            H0, S0 }
            WORD2(_Q20) = _D0.i16[0];
            _D0.i16[0] = v334;
            _D0.i16[1] = v332;
            _D0.i16[2] = v336;
            _D0.i16[3] = v338;
            v19 = vbslq_s8((int8x16_t)vmovl_s16(_D0), (int8x16_t)v941, v950);
            *(float *)_D0.i32 = fmaxf(v921, v922);
            __asm { FCVT            H0, S0 }
            WORD3(_Q20) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v919, v920);
            __asm { FCVT            H0, S0 }
            WORD4(_Q20) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v923, v924);
            _D2.i16[0] = v344;
            _D2.i16[1] = v342;
            _D2.i16[2] = v346;
            _D2.i16[3] = v348;
            v14 = vbslq_s8((int8x16_t)vmovl_s16(_D2), (int8x16_t)v980, v962);
            __asm { FCVT            H0, S0 }
            WORD5(_Q20) = _D0.i16[0];
            _D0.i16[0] = v352;
            _D0.i16[1] = v350;
            _D0.i16[2] = v356;
            _D0.i16[3] = v358;
            v15 = vbslq_s8((int8x16_t)vmovl_s16(_D0), (int8x16_t)v944, v958);
            *(float *)_D0.i32 = fmaxf(v927, v931);
            __asm { FCVT            H0, S0 }
            WORD6(_Q20) = _D0.i16[0];
            *(float *)_D0.i32 = fmaxf(v925, v929);
            _D2.i16[0] = v938;
            _D2.i16[1] = v939;
            _D2.i16[2] = v937;
            _D2.i16[3] = v936;
            __asm { FCVT            H0, S0 }
            HIWORD(_Q20) = _D0.i16[0];
            _D0.i16[0] = v362;
            _D0.i16[1] = v360;
            _D0.i16[2] = v364;
            v385.i16[3] = v366;
            v16 = vbslq_s8((int8x16_t)vmovl_s16(v385), (int8x16_t)v978, v956);
            v385.i16[0] = v372;
            v385.i16[1] = v370;
            v385.i16[2] = v380;
            v21 = vbslq_s8((int8x16_t)vmovl_s16(_D2), (int8x16_t)v966, v946);
            if (_NF ^ _VF | _ZF)
              v386 = 0;
            else
              v386 = -1;
            v385.i16[3] = v386;
            v17 = vbslq_s8((int8x16_t)vmovl_s16(v385), (int8x16_t)v942, v954);
            v387.i64[0] = 0x100000001;
            v387.i64[1] = 0x100000001;
            v980 = vaddq_s32(v980, v387);
            v29 = vaddq_s32(v944, v387);
            v31 = vaddq_s32(v940, v387);
            v32 = vaddq_s32(v941, v387);
            v1003 = vaddq_s32(v1003, v387);
            v982 = vaddq_s32(v982, v387);
            v984 = vaddq_s32(v984, v387);
            v976 = vaddq_s32(v976, v387);
            v978 = vaddq_s32(v978, v387);
            v972 = vaddq_s32(v972, v387);
            v974 = vaddq_s32(v974, v387);
            v30 = vaddq_s32(v942, v387);
            v968 = vaddq_s32(v968, v387);
            v970 = vaddq_s32(v970, v387);
            v964 = vaddq_s32(v964, v387);
            v966 = vaddq_s32(v966, v387);
            v11 = (__int128 *)((char *)v11 + v831);
            v12 = v960 - 1;
          }
          while (v960 != 1);
          *(int8x16_t *)__p = v14;
          v1013 = v15;
          v1014 = v16;
          v1015 = v17;
          v1016 = v18;
          v1017 = v19;
          v1018 = v1000;
          v1019 = v20;
          v1020 = v998;
          v1021 = v996;
          v1022 = v994;
          v1023 = v992;
          v1024 = v990;
          v1025 = v988;
          v1026 = v21;
          v1027 = v986;
          a5 = v829;
          v12 = v828;
          if (v829 < 1)
            goto LABEL_432;
        }
        v611 = 0;
        do
        {
          _H0 = *((_WORD *)v11 + v611);
          v1010[0] = _Q30;
          v1010[1] = _Q3;
          v1010[2] = _Q1;
          v1010[3] = _Q28;
          v1010[4] = _Q17;
          v1010[5] = _Q18;
          v1010[6] = _Q19;
          v1010[7] = _Q20;
          _H2 = *((_WORD *)v1010 + (v611 & 0x3F));
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H2
          }
          if (_S0 > _S2)
            *((_DWORD *)__p + v611) = v12;
          ++v611;
        }
        while (a5 != v611);
        goto LABEL_432;
      default:
        goto LABEL_432;
    }
  }
  v388 = a5;
  memset_pattern4(__b, &PresampleArgmax::negativeOne, 4 * a5);
  v1011 = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(__p, v388, &v1011);
  v389 = __p[0];
  if (a2 < 1)
  {
    if (!__p[0])
      return;
  }
  else
  {
    v390 = 0;
    v391 = a1 + 2 * a4;
    do
    {
      for (i = 0; i != v388; ++i)
      {
        _H0 = *(_WORD *)(v391 + 2 * i);
        _H1 = v389[i];
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H0
        }
        if (_S2 > _S1)
        {
          v389[i] = _H0;
          *((_DWORD *)__b + i) = v390;
        }
      }
      ++v390;
      v391 += 2 * a3;
    }
    while (v390 != a2);
  }
  __p[1] = v389;
  operator delete(v389);
}

void PresampleTopK2(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  void *v7;
  void *v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  __int16 v68;
  __int16 v71;
  __int16 v76;
  __int16 v81;
  __int16 v86;
  __int16 v91;
  __int16 v96;
  __int16 v101;
  __int16 v107;
  __int16 v110;
  __int16 v115;
  __int16 v120;
  __int16 v125;
  __int16 v130;
  __int16 v135;
  __int16 v140;
  __int16 v146;
  __int16 v150;
  __int16 v155;
  __int16 v160;
  __int16 v165;
  __int16 v170;
  __int16 v175;
  __int16 v180;
  __int128 v181;
  __int16 v184;
  __int16 v187;
  __int16 v192;
  __int16 v197;
  __int16 v202;
  __int16 v207;
  __int16 v215;
  __int16 v222;
  __int16 v223;
  __int16 v230;
  __int16 v235;
  __int16 v240;
  __int16 v245;
  __int16 v250;
  __int16 v255;
  __int16 v261;
  __int16 v262;
  __int16 v269;
  __int16 v274;
  __int16 v279;
  __int16 v284;
  __int16 v289;
  __int16 v294;
  __int16 v297;
  __int16 v298;
  __int16 v302;
  __int16 v305;
  __int16 v308;
  __int16 v311;
  int8x16_t v314;
  __int16 v315;
  __int16 v318;
  __int16 v319;
  __int16 v374;
  __int16 v378;
  __int16 v381;
  __int16 v384;
  __int16 v387;
  __int16 v390;
  __int16 v394;
  int8x16_t v395;
  __int16 v396;
  __int16 v397;
  __int16 v398;
  __int16 v399;
  __int16 v400;
  __int16 v401;
  __int16 v402;
  __int16 v403;
  __int16 v404;
  __int16 v405;
  __int16 v406;
  __int16 v407;
  __int16 v408;
  __int16 v409;
  __int16 v410;
  __int16 v411;
  __int16 v412;
  __int16 v413;
  __int16 v414;
  __int16 v415;
  __int16 v416;
  __int16 v417;
  __int16 v418;
  __int16 v419;
  __int16 v420;
  __int16 v421;
  __int16 v422;
  __int16 v423;
  __int16 v424;
  __int16 v425;
  __int16 v426;
  __int16 v427;
  __int16 v428;
  __int16 v429;
  __int16 v430;
  __int16 v431;
  __int16 v432;
  __int16 v433;
  __int16 v434;
  __int16 v435;
  __int16 v436;
  __int16 v437;
  __int16 v446;
  __int16 v458;
  __int16 v499;
  __int16 v501;
  __int16 v503;
  __int16 v505;
  __int16 v510;
  __int16 v513;
  __int16 v515;
  __int16 v517;
  __int16 v519;
  __int16 v521;
  __int16 v526;
  __int16 v529;
  int16x4_t v536;
  __int16 v539;
  __int16 v541;
  __int16 v543;
  __int16 v545;
  __int16 v547;
  __int16 v549;
  __int16 v551;
  int16x4_t v552;
  int16x4_t v553;
  int16x4_t v554;
  int16x4_t v555;
  int16x4_t v556;
  int16x4_t v557;
  int16x4_t v558;
  int16x4_t v559;
  int16x4_t v560;
  int16x4_t v561;
  int16x4_t v562;
  int16x4_t v563;
  int16x4_t v564;
  int16x4_t v565;
  __int16 v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int16x4_t v571;
  int8x16_t v572;
  int16x4_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int16x4_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int16x4_t v582;
  int8x16_t v583;
  int8x16_t v584;
  __int16 v585;
  int8x16_t v586;
  int16x4_t v587;
  int8x16_t v588;
  int8x16_t v589;
  int16x4_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int32x4_t v595;
  uint64_t v597;
  size_t v598;
  _WORD *v601;
  int v602;
  uint64_t v603;
  _WORD *v604;
  uint64_t i;
  int v610;
  int v613;
  uint64_t v614;
  int v615;
  int8x16_t v616;
  int8x16_t v618;
  int8x16_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t v634;
  float v670;
  float v675;
  float v679;
  __int16 v684;
  __int16 v689;
  __int16 v694;
  __int16 v699;
  __int16 v704;
  __int16 v709;
  __int16 v714;
  __int16 v715;
  __int16 v721;
  __int16 v724;
  __int16 v729;
  __int16 v734;
  __int16 v739;
  __int16 v744;
  __int16 v749;
  __int16 v754;
  float v759;
  __int16 v760;
  float v763;
  __int16 v764;
  float v769;
  __int16 v770;
  float v775;
  __int16 v776;
  float v781;
  __int16 v782;
  __int16 v787;
  __int16 v792;
  float v797;
  __int16 v798;
  __int16 v801;
  __int16 v803;
  __int16 v807;
  __int16 v808;
  float v811;
  __int16 v812;
  float v815;
  __int16 v817;
  __int16 v818;
  BOOL v821;
  int16x4_t v822;
  int8x16_t v823;
  __int16 v824;
  int16x4_t v842;
  __int16 v863;
  __int16 v864;
  __int16 v865;
  __int16 v866;
  __int16 v867;
  __int16 v868;
  __int16 v869;
  __int16 v870;
  __int16 v871;
  __int16 v872;
  __int16 v873;
  __int16 v874;
  __int16 v875;
  __int16 v876;
  __int16 v877;
  __int16 v878;
  __int16 v879;
  __int16 v880;
  __int16 v881;
  __int16 v882;
  __int16 v883;
  __int16 v884;
  __int16 v885;
  __int16 v901;
  __int16 v906;
  __int16 v908;
  __int16 v910;
  __int16 v912;
  __int16 v914;
  __int16 v916;
  int16x4_t v926;
  int16x4_t v927;
  int16x4_t v928;
  __int16 v929;
  int16x4_t v930;
  int16x4_t v932;
  int16x4_t v933;
  int16x4_t v935;
  int16x4_t v936;
  int16x4_t v938;
  __int16 v939;
  int8x16_t v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int32x4_t v950;
  int8x16_t v952;
  uint64_t v953;
  int v957;
  int v959;
  uint64_t v960;
  int v961;
  int v963;
  int8x16_t v964;
  int8x16_t v965;
  int8x16_t v966;
  int8x16_t v967;
  int8x16_t v968;
  int32x4_t v969;
  int32x4_t v970;
  int32x4_t v971;
  int32x4_t v972;
  float v1013;
  float v1015;
  int8x16_t v1022;
  float v1026;
  __int16 v1048;
  __int16 v1050;
  __int16 v1053;
  __int16 v1056;
  float v1059;
  __int16 v1060;
  __int16 v1063;
  __int16 v1066;
  __int16 v1069;
  float v1072;
  __int16 v1073;
  float v1075;
  __int16 v1078;
  __int16 v1079;
  float v1082;
  __int16 v1083;
  __int16 v1088;
  int16x4_t v1089;
  int8x16_t v1092;
  __int16 v1093;
  int16x4_t v1096;
  int8x16_t v1097;
  __int16 v1098;
  __int16 v1099;
  __int16 v1100;
  __int16 v1101;
  __int16 v1102;
  __int16 v1103;
  __int16 v1104;
  __int16 v1105;
  __int16 v1106;
  __int16 v1107;
  __int16 v1108;
  __int16 v1110;
  __int16 v1113;
  __int16 v1115;
  __int16 v1117;
  __int16 v1124;
  __int16 v1126;
  int16x4_t v1135;
  int16x4_t v1136;
  int16x4_t v1138;
  int16x4_t v1140;
  int16x4_t v1141;
  __int16 v1142;
  int8x16_t v1143;
  int8x16_t v1144;
  int8x16_t v1145;
  int32x4_t v1146;
  uint64_t v1148;
  int v1151;
  int v1153;
  float16x4_t *v1154;
  int v1156;
  int8x16_t v1157;
  int32x4_t v1158;
  float32x4_t v1161;
  int32x4_t v1162;
  float32x4_t v1176;
  uint64_t v1188;
  int v1190;
  int8x16_t v1191;
  int8x16_t v1192;
  int32x4_t v1194;
  int32x4_t v1195;
  __int16 v1202;
  __int16 v1208;
  int8x16_t v1219;
  int16x4_t v1225;
  __int16 v1231;
  __int16 v1242;
  int8x16_t v1246;
  __int16 v1250;
  __int16 v1256;
  __int16 v1259;
  __int16 v1260;
  __int16 v1261;
  __int16 v1262;
  __int16 v1263;
  __int16 v1264;
  __int16 v1265;
  __int16 v1268;
  int16x4_t v1276;
  __int16 v1277;
  int16x4_t v1278;
  __int16 v1279;
  int8x16_t v1280;
  int16x4_t v1281;
  int8x16_t v1282;
  int8x16_t v1283;
  uint64_t v1284;
  int v1287;
  int v1289;
  uint64_t v1290;
  int v1293;
  __int16 *v1294;
  int v1296;
  uint64_t v1297;
  int v1300;
  __int16 *v1301;
  int v1303;
  size_t v1304;
  void *v1305;
  void *v1306;
  int v1307;
  int v1308;
  int v1309;
  int v1310;
  uint64_t v1311;
  float v1312;
  float v1313;
  float v1314;
  float v1315;
  float v1316;
  __int16 v1317;
  float v1318;
  float v1319;
  __int16 v1320;
  float v1321;
  float v1322;
  __int16 v1323;
  float v1324;
  __int16 v1325;
  uint64_t v1326;
  float v1327;
  __int16 v1328;
  float v1329;
  __int16 v1330;
  float v1331;
  float v1332;
  __int16 v1333;
  float v1334;
  __int16 v1335;
  float v1336;
  __int16 v1337;
  __int16 v1338;
  float v1339;
  __int16 v1340;
  float v1341;
  __int16 v1342;
  float v1343;
  __int16 v1344;
  __int16 v1345;
  __int16 v1346;
  __int16 v1347;
  float v1348;
  __int16 v1349;
  __int16 v1350;
  float v1351;
  __int16 v1352;
  __int16 v1353;
  __int16 v1354;
  __int16 v1355;
  float v1356;
  __int16 v1357;
  __int16 v1358;
  __int16 v1359;
  float v1360;
  __int16 v1361;
  __int16 v1362;
  float v1363;
  __int16 v1364;
  float v1365;
  float v1366;
  __int16 v1367;
  float v1368;
  __int16 v1369;
  float v1370;
  float v1371;
  __int16 v1372;
  __int16 v1373;
  float v1374;
  float v1375;
  float v1376;
  float v1377;
  float v1378;
  float v1379;
  float v1380;
  float v1381;
  __int16 v1382;
  __int16 v1383;
  __int16 v1384;
  __int16 v1385;
  float v1386;
  float v1387;
  float v1388;
  float v1389;
  float v1390;
  float v1391;
  float v1392;
  float v1393;
  __int16 v1394;
  __int16 v1395;
  float v1396;
  __int16 v1397;
  float v1398;
  __int16 v1399;
  float v1400;
  __int16 v1401;
  float v1402;
  __int16 v1403;
  float v1404;
  float v1405;
  float v1406;
  float v1407;
  float v1408;
  float v1409;
  float v1410;
  float v1411;
  float v1412;
  __int16 v1413;
  float v1414;
  __int16 v1415;
  float v1416;
  __int16 v1417;
  __int16 v1418;
  float v1419;
  __int16 v1420;
  float v1421;
  float v1422;
  __int16 v1423;
  float v1424;
  float v1425;
  float v1426;
  float v1427;
  float v1428;
  float v1429;
  float v1430;
  __int16 v1431;
  __int16 v1432;
  __int16 v1433;
  float v1434;
  float v1435;
  float v1436;
  __int16 v1437;
  __int16 v1438;
  float v1439;
  float v1440;
  float v1441;
  float v1442;
  __int16 v1443;
  __int16 v1444;
  float v1445;
  __int16 v1446;
  __int16 v1447;
  __int16 v1448;
  __int16 v1449;
  __int16 v1450;
  __int16 v1451;
  __int16 v1452;
  __int16 v1453;
  __int16 v1454;
  __int16 v1455;
  __int16 v1456;
  float v1457;
  float v1458;
  float v1459;
  __int16 v1460;
  __int16 v1461;
  __int16 v1462;
  float v1463;
  float v1464;
  float v1465;
  __int16 v1466;
  __int16 v1467;
  float v1468;
  float v1469;
  __int16 v1470;
  __int16 v1471;
  __int16 v1472;
  __int16 v1473;
  __int16 v1474;
  __int16 v1475;
  __int16 v1476;
  float v1477;
  float v1478;
  __int16 v1479;
  float v1480;
  int v1481;
  float v1482;
  uint64_t v1483;
  float v1484;
  float v1485;
  float v1486;
  float v1487;
  float v1488;
  __int16 v1489;
  float v1490;
  float v1491;
  float v1492;
  __int16 v1493;
  float v1494;
  __int16 v1495;
  float v1496;
  __int16 v1497;
  int v1498;
  float v1499;
  int8x16_t v1500;
  int8x16_t v1501;
  int8x16_t v1502;
  float v1503;
  int8x16_t v1504;
  int8x16_t v1505;
  int8x16_t v1506;
  int8x16_t v1507;
  int8x16_t v1508;
  int8x16_t v1509;
  float v1510;
  int32x4_t v1511;
  float v1512;
  int32x4_t v1513;
  float v1514;
  int32x4_t v1515;
  float v1516;
  int32x4_t v1517;
  float v1518;
  int32x4_t v1519;
  float v1520;
  int32x4_t v1521;
  float v1522;
  int32x4_t v1523;
  float v1524;
  int32x4_t v1525;
  float v1526;
  int32x4_t v1527;
  float v1528;
  int32x4_t v1529;
  float v1530;
  int32x4_t v1531;
  int32x4_t v1532;
  float v1533;
  int32x4_t v1534;
  float v1535;
  int32x4_t v1536;
  float v1537;
  int32x4_t v1538;
  float v1539;
  int8x16_t v1540;
  float v1541;
  int8x16_t v1542;
  float v1543;
  int8x16_t v1544;
  float v1545;
  int8x16_t v1546;
  float v1547;
  int8x16_t v1548;
  float v1549;
  int8x16_t v1550;
  float v1551;
  int8x16_t v1552;
  __int16 v1553;
  int8x16_t v1554;
  __int16 v1555;
  int8x16_t v1556;
  __int16 v1557;
  int8x16_t v1558;
  int8x16_t v1559;
  float v1560;
  int8x16_t v1561;
  float v1562;
  int8x16_t v1563;
  __int16 v1564;
  __int16 v1565;
  int8x16_t v1566;
  float v1567;
  __int16 v1568;
  int8x16_t v1569;
  __int16 v1570;
  int8x16_t v1571;
  __int16 v1572;
  int8x16_t v1573;
  __int16 v1574;
  int8x16_t v1575;
  __int16 v1576;
  int8x16_t v1577;
  uint64_t v1578;
  int8x16_t v1579;
  __int16 v1580;
  int8x16_t v1581;
  __int16 v1582;
  int8x16_t v1583;
  __int16 v1584;
  int8x16_t v1585;
  __int16 v1586;
  float v1587;
  float v1588;
  float v1589;
  float v1590;
  float v1591;
  __int16 v1592;
  float v1593;
  float v1594;
  __int16 v1595;
  float v1596;
  float v1597;
  __int16 v1598;
  float v1599;
  float v1600;
  float v1601;
  float v1602;
  float v1603;
  float v1604;
  float v1605;
  float v1606;
  float v1607;
  float v1608;
  float v1609;
  float v1610;
  float v1611;
  float v1612;
  float v1613;
  float v1614;
  __int16 v1615;
  float v1616;
  __int16 v1617;
  float v1618;
  __int16 v1619;
  float v1620;
  __int16 v1621;
  float v1622;
  __int16 v1623;
  float v1624;
  __int16 v1625;
  float v1626;
  __int16 v1627;
  float v1628;
  __int16 v1629;
  float v1630;
  __int16 v1631;
  float v1632;
  __int16 v1633;
  float v1634;
  __int16 v1635;
  float v1636;
  __int16 v1637;
  float v1638;
  __int16 v1639;
  float v1640;
  int8x16_t v1641;
  float v1642;
  int8x16_t v1643;
  float v1644;
  float v1645;
  float v1646;
  float v1647;
  float v1648;
  float v1649;
  float v1650;
  float v1651;
  float v1652;
  float v1653;
  float v1654;
  float v1655;
  float v1656;
  float v1657;
  float v1658;
  float v1659;
  float v1660;
  int8x16_t v1661;
  float v1662;
  int8x16_t v1663;
  float v1664;
  int32x4_t v1665;
  float v1666;
  int32x4_t v1667;
  int v1668;
  float v1669;
  int32x4_t v1670;
  uint64_t v1671;
  float v1672;
  int32x4_t v1673;
  float v1674;
  __int16 v1675;
  int32x4_t v1676;
  float v1677;
  __int16 v1678;
  int32x4_t v1679;
  float v1680;
  __int16 v1681;
  __int16 v1682;
  int32x4_t v1683;
  __int16 v1684;
  int32x4_t v1685;
  float v1686;
  __int16 v1687;
  int8x16_t v1688;
  float v1689;
  __int16 v1690;
  int8x16_t v1691;
  float v1692;
  __int16 v1693;
  int8x16_t v1694;
  float v1695;
  __int16 v1696;
  int8x16_t v1697;
  float v1698;
  __int16 v1699;
  int8x16_t v1700;
  float v1701;
  __int16 v1702;
  int8x16_t v1703;
  float v1704;
  __int16 v1705;
  int8x16_t v1706;
  float v1707;
  __int16 v1708;
  int v1709;
  float v1710;
  float v1711;
  int8x16_t v1712;
  float v1713;
  __int16 v1714;
  int8x16_t v1715;
  float v1716;
  __int16 v1717;
  int8x16_t v1718;
  float v1719;
  float v1720;
  int8x16_t v1721;
  float v1722;
  float v1723;
  int8x16_t v1724;
  float v1725;
  float v1726;
  int8x16_t v1727;
  int8x16_t v1728;
  float v1729;
  float v1730;
  __int16 v1731;
  float v1732;
  float v1733;
  __int16 v1734;
  float v1735;
  float v1736;
  __int16 v1737;
  float v1738;
  int8x16_t v1739;
  float v1740;
  float v1741;
  int32x4_t v1742;
  float v1743;
  float v1744;
  int8x16_t v1745;
  float v1746;
  int8x16_t v1747;
  int8x16_t v1748;
  float v1749;
  int8x16_t v1750;
  __int16 v1751;
  int8x16_t v1752;
  float v1753;
  int8x16_t v1754;
  float v1755;
  int8x16_t v1756;
  float v1757;
  int8x16_t v1758;
  int8x16_t v1759;
  float v1760;
  int8x16_t v1761;
  int8x16_t v1762;
  __int16 v1763;
  int32x4_t v1764;
  int8x16_t v1765;
  float v1766;
  __int16 v1767;
  int32x4_t v1768;
  int8x16_t v1769;
  float v1770;
  float v1771;
  int32x4_t v1772;
  int8x16_t v1773;
  float v1774;
  int32x4_t v1775;
  int8x16_t v1776;
  float v1777;
  float v1778;
  int8x16_t v1779;
  int8x16_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  float v1783;
  int8x16_t v1784;
  int8x16_t v1785;
  int8x16_t v1786;
  float v1787;
  int8x16_t v1788;
  int8x16_t v1789;
  int8x16_t v1790;
  int8x16_t v1791;
  float16x4_t v1792;
  float16x4_t v1793;
  float16x4_t v1794;
  float16x4_t v1795;
  float16x4_t v1796;
  int8x16_t v1797;
  int8x16_t v1798;
  int8x16_t v1799;
  int8x16_t v1800;
  int8x16_t v1801;
  int8x16_t v1802;
  int8x16_t v1803;
  int8x16_t v1804;
  int8x16_t v1805;
  int8x16_t v1806;
  int8x16_t v1807;
  int8x16_t v1808;
  int8x16_t v1809;
  _OWORD v1810[2];
  _OWORD v1811[2];
  int8x16_t v1812;
  int8x16_t v1813;
  int8x16_t v1814;
  int8x16_t v1815;
  int8x16_t v1816;
  int8x16_t v1817;
  int8x16_t v1818;
  int8x16_t v1819;
  int8x16_t v1820;
  int8x16_t v1821;
  int8x16_t v1822;
  int8x16_t v1823;
  int8x16_t v1824;
  int8x16_t v1825;
  int8x16_t v1826;
  int8x16_t v1827;
  _OWORD v1828[4];
  _OWORD v1829[4];
  int8x16_t v1830;
  int8x16_t v1831;
  int8x16_t v1832;
  int8x16_t v1833;
  int8x16_t v1834;
  int8x16_t v1835;
  int8x16_t v1836;
  int8x16_t v1837;
  int8x16_t v1838;
  int8x16_t v1839;
  int8x16_t v1840;
  int8x16_t v1841;
  int8x16_t v1842;
  int8x16_t v1843;
  int8x16_t v1844;
  int8x16_t v1845;
  int8x16_t v1846;
  int8x16_t v1847;
  int8x16_t v1848;
  int8x16_t v1849;
  int8x16_t v1850;
  int8x16_t v1851;
  int8x16_t v1852;
  int8x16_t v1853;
  int8x16_t v1854;
  int8x16_t v1855;
  int8x16_t v1856;
  int8x16_t v1857;
  int8x16_t v1858;
  int8x16_t v1859;
  int8x16_t v1860;
  int8x16_t v1861;
  _OWORD v1862[8];
  _OWORD v1863[8];
  __int16 v1864;
  void *__p[2];
  int8x16_t v1866;
  int8x16_t v1867;
  int8x16_t v1868;
  int8x16_t v1869;
  int8x16_t v1870;
  int8x16_t v1871;
  int8x16_t v1872;
  int8x16_t v1873;
  int8x16_t v1874;
  int8x16_t v1875;
  int8x16_t v1876;
  int8x16_t v1877;
  int8x16_t v1878;
  int8x16_t v1879;
  int8x16_t v1880;
  void *v1881[2];
  int8x16_t v1882;
  int8x16_t v1883;
  int8x16_t v1884;
  int8x16_t v1885;
  int8x16_t v1886;
  int8x16_t v1887;
  int8x16_t v1888;
  int8x16_t v1889;
  int8x16_t v1890;
  int8x16_t v1891;
  int8x16_t v1892;
  int8x16_t v1893;
  int8x16_t v1894;
  int8x16_t v1895;
  int8x16_t v1896;
  uint64_t v1897;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v11 = v7;
  v12 = v6;
  v13 = v4;
  v14 = v3;
  v15 = v2;
  v16 = v1;
  v1897 = *MEMORY[0x24BDAC8D0];
  if (v5 <= 64)
  {
    switch(v5)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        v1154 = (float16x4_t *)(v1 + 2 * v4);
        if (v2 <= 1)
        {
          *(_OWORD *)v1881 = 0u;
          *(_OWORD *)__p = 0u;
          _D0 = (float16x4_t)0x400040004000400;
          _D1 = (float16x4_t)0x400040004000400;
        }
        else
        {
          _D0 = (float16x4_t)0x400040004000400;
          _Q2 = 0uLL;
          _Q3.i64[0] = 0x100000001;
          _Q3.i64[1] = 0x100000001;
          v1156 = v2 - 1;
          v1157 = 0uLL;
          v1158 = 0uLL;
          _D1 = (float16x4_t)0x400040004000400;
          do
          {
            _D16 = *v1154;
            v1161 = vcvtq_f32_f16(*v1154);
            v1162 = vcgtq_f32(v1161, vcvtq_f32_f16(_D1));
            _H17 = _D0.i16[1];
            __asm { FCVT            S17, H17 }
            _H18 = HIWORD(v1154->u32[0]);
            __asm { FCVT            S18, H18 }
            _S17 = fmaxf(_S18, _S17);
            __asm
            {
              FCVT            H17, S17
              FCVT            S19, H0
              FCVT            S20, H16
            }
            *(float *)_D19.i32 = fmaxf(_S20, _S19);
            __asm { FCVT            H19, S19 }
            _D19.i16[1] = LOWORD(_S17);
            _H21 = _D0.i16[2];
            __asm { FCVT            S21, H21 }
            _H22 = WORD2(*(unint64_t *)v1154);
            __asm { FCVT            S22, H22 }
            _S21 = fmaxf(_S22, _S21);
            __asm { FCVT            H21, S21 }
            _D19.i16[2] = LOWORD(_S21);
            v1176 = vcvtq_f32_f16(_D0);
            _H0 = _D0.i16[3];
            __asm { FCVT            S0, H0 }
            _D16.i16[0] = HIWORD(*(unint64_t *)v1154);
            __asm { FCVT            S16, H16 }
            _S0 = fmaxf(*(float *)_D16.i32, _S0);
            __asm { FCVT            H0, S0 }
            _D19.i16[3] = LOWORD(_S0);
            _D0 = (float16x4_t)vbsl_s8((int8x8_t)vmovn_s32(v1162), (int8x8_t)_D1, _D19);
            LOWORD(_S17) = _D1.i16[1];
            __asm { FCVT            S17, H17 }
            _S17 = fmaxf(_S18, _S17);
            __asm
            {
              FCVT            H17, S17
              FCVT            S18, H1
            }
            *(float *)_D18.i32 = fmaxf(_S20, _S18);
            _D1.i16[0] = _D1.i16[3];
            _D19.i16[0] = _D1.i16[2];
            __asm { FCVT            H18, S18 }
            _D18.i16[1] = LOWORD(_S17);
            __asm { FCVT            S17, H19 }
            _S17 = fmaxf(_S22, _S17);
            __asm { FCVT            H17, S17 }
            _D18.i16[2] = LOWORD(_S17);
            __asm { FCVT            S1, H1 }
            _S1 = fmaxf(*(float *)_D16.i32, _S1);
            __asm { FCVT            H1, S1 }
            _D18.i16[3] = LOWORD(_S1);
            _D1 = _D18;
            v1157 = vbslq_s8((int8x16_t)v1162, _Q2, vbslq_s8((int8x16_t)vcgtq_f32(v1161, v1176), (int8x16_t)v1158, v1157));
            _Q2 = vbslq_s8((int8x16_t)v1162, (int8x16_t)v1158, _Q2);
            v1158 = vaddq_s32(v1158, _Q3);
            v1154 = (float16x4_t *)((char *)v1154 + 2 * v3);
            --v1156;
          }
          while (v1156);
          *(int8x16_t *)v1881 = _Q2;
          *(int8x16_t *)__p = v1157;
          if (v5 < 1)
          {
LABEL_843:
            v1304 = 4 * v5;
            memcpy(v12, v1881, v1304);
            memcpy(v11, __p, v1304);
            return;
          }
        }
        v1290 = 0;
        do
        {
          _Q2.i16[0] = v1154->i16[v1290];
          v1796 = _D1;
          _Q3.i16[0] = *(_WORD *)((unint64_t)&v1796 & 0xFFFFFFFFFFFFFFF9 | (2 * (v1290 & 3)));
          __asm
          {
            FCVT            S4, H2
            FCVT            S5, H3
          }
          if (_S4 <= _S5)
          {
            v1294 = (__int16 *)((unint64_t)&v1795 & 0xFFFFFFFFFFFFFFF9 | (2 * (v1290 & 3)));
            v1795 = _D0;
            _D0.i16[0] = *v1294;
            __asm { FCVT            S6, H0 }
            if (_S4 >= _S5)
              _Q3.i32[0] = _Q2.i32[0];
            if (_S4 >= _S6)
              _D0.i32[0] = _Q2.i32[0];
            *v1294 = _D0.i16[0];
            _D0 = v1795;
            v1794 = _D1;
            *(_WORD *)((unint64_t)&v1794 & 0xFFFFFFFFFFFFFFF9 | (2 * (v1290 & 3))) = _Q3.i16[0];
            v1296 = v2 - 1;
            if (_S4 <= _S6)
              v1296 = *((_DWORD *)__p + v1290);
            _D1 = v1794;
            *((_DWORD *)__p + v1290) = v1296;
            v1293 = *((_DWORD *)v1881 + v1290);
          }
          else
          {
            v1792 = _D0;
            *(_WORD *)((unint64_t)&v1792 & 0xFFFFFFFFFFFFFFF9 | (2 * (v1290 & 3))) = _Q3.i16[0];
            _D0 = v1792;
            if (_S4 < _S5)
              _Q2.i32[0] = _Q3.i32[0];
            v1793 = _D1;
            *(_WORD *)((unint64_t)&v1793 & 0xFFFFFFFFFFFFFFF9 | (2 * (v1290 & 3))) = _Q2.i16[0];
            _D1 = v1793;
            *((_DWORD *)__p + v1290) = *((_DWORD *)v1881 + v1290);
            v1293 = v2 - 1;
          }
          *((_DWORD *)v1881 + v1290++) = v1293;
        }
        while (v5 != v1290);
        goto LABEL_843;
      case 5:
      case 6:
      case 7:
      case 8:
        v1188 = v1 + 2 * v4;
        if (v2 <= 1)
        {
          v1882 = 0u;
          *(_OWORD *)v1881 = 0u;
          v1866 = 0u;
          *(_OWORD *)__p = 0u;
          _Q1.i64[0] = 0x400040004000400;
          _Q1.i64[1] = 0x400040004000400;
          _Q0.i64[0] = 0x400040004000400;
          _Q0.i64[1] = 0x400040004000400;
        }
        else
        {
          _Q2 = 0uLL;
          _Q1.i64[0] = 0x400040004000400;
          _Q1.i64[1] = 0x400040004000400;
          v1190 = v2 - 1;
          v1191 = 0uLL;
          v1192 = 0uLL;
          _Q17 = 0uLL;
          v1194 = 0uLL;
          v1195 = 0uLL;
          _Q0.i64[0] = 0x400040004000400;
          _Q0.i64[1] = 0x400040004000400;
          do
          {
            v1791 = v1192;
            _Q3 = *(_OWORD *)v1188;
            _H5 = _Q0.i16[1];
            _H18 = WORD1(*(_OWORD *)v1188);
            __asm { FCVT            S5, H5 }
            v1787 = _S5;
            __asm { FCVT            S18, H18 }
            if (_S18 <= _S5)
              v1202 = 0;
            else
              v1202 = -1;
            __asm { FCVT            S5, H0 }
            v1783 = _S5;
            __asm { FCVT            S21, H3 }
            LOWORD(_S5) = _Q0.i16[2];
            __asm { FCVT            S22, H5 }
            LOWORD(_S5) = WORD2(*(_QWORD *)v1188);
            __asm { FCVT            S23, H5 }
            _H5 = _Q0.i16[3];
            if (_NF ^ _VF | _ZF)
              v1208 = 0;
            else
              v1208 = -1;
            __asm { FCVT            S24, H5 }
            _H5 = HIWORD(*(_QWORD *)v1188);
            __asm { FCVT            S19, H5 }
            _H5 = _Q0.i16[5];
            __asm { FCVT            S26, H5 }
            _H5 = WORD1(*(_QWORD *)(v1188 + 8));
            __asm { FCVT            S27, H5 }
            _H5 = _Q0.i16[4];
            __asm { FCVT            S28, H5 }
            _H5 = *(_QWORD *)(v1188 + 8);
            v1219.i16[0] = v1208;
            __asm { FCVT            S29, H5 }
            _H5 = _Q0.i16[6];
            __asm { FCVT            S30, H5 }
            _H5 = WORD6(*(_OWORD *)v1188);
            __asm { FCVT            S31, H5 }
            v1225.i16[0] = v1208;
            _H3 = HIWORD(*(_OWORD *)v1188);
            __asm { FCVT            S8, H3 }
            _H3 = _Q1.i16[5];
            __asm { FCVT            S10, H3 }
            _H3 = _Q1.i16[4];
            if (_NF ^ _VF | _ZF)
              v1231 = 0;
            else
              v1231 = -1;
            __asm { FCVT            S11, H3 }
            _H3 = _Q1.i16[6];
            __asm { FCVT            S12, H3 }
            _H3 = _Q1.i16[7];
            __asm { FCVT            S13, H3 }
            _H3 = _Q1.i16[1];
            __asm
            {
              FCVT            S15, H3
              FCVT            S3, H1
            }
            _H5 = _Q1.i16[2];
            __asm { FCVT            S5, H5 }
            if (_NF ^ _VF | _ZF)
              v1242 = 0;
            else
              v1242 = -1;
            _H1 = _Q1.i16[3];
            __asm { FCVT            S14, H1 }
            _S1 = fmaxf(_S18, _S15);
            __asm { FCVT            H1, S1 }
            v1246 = _Q17;
            _S17 = fmaxf(_S21, _S3);
            __asm { FCVT            H17, S17 }
            _Q17.i16[1] = LOWORD(_S1);
            _S1 = fmaxf(_S23, _S5);
            __asm { FCVT            H1, S1 }
            if (_NF ^ _VF | _ZF)
              v1250 = 0;
            else
              v1250 = -1;
            _Q17.i16[2] = _H1;
            _S1 = fmaxf(_S19, _S14);
            __asm { FCVT            H1, S1 }
            _Q17.i16[3] = LOWORD(_S1);
            _S1 = fmaxf(_S29, _S11);
            __asm { FCVT            H1, S1 }
            _Q17.i16[4] = LOWORD(_S1);
            _S1 = fmaxf(_S27, _S10);
            __asm { FCVT            H1, S1 }
            _Q17.i16[5] = LOWORD(_S1);
            _S1 = fmaxf(_S31, _S12);
            __asm { FCVT            H1, S1 }
            if (_NF ^ _VF | _ZF)
              v1256 = 0;
            else
              v1256 = -1;
            _Q17.i16[6] = _H1;
            _S1 = fmaxf(_S8, _S13);
            __asm { FCVT            H1, S1 }
            _Q17.i16[7] = LOWORD(_S1);
            LOWORD(_S1) = _Q0.i16[7];
            v1219.i16[1] = v1202;
            v1219.i16[2] = v1231;
            __asm { FCVT            S20, H1 }
            v1219.i16[3] = v1242;
            v1219.i16[4] = v1256;
            if (_NF ^ _VF | _ZF)
              v1259 = 0;
            else
              v1259 = -1;
            v1219.i16[5] = v1250;
            v1219.i16[6] = v1259;
            if (_S8 <= _S20)
              v1260 = 0;
            else
              v1260 = -1;
            v1219.i16[7] = v1260;
            _Q1 = vbslq_s8(v1219, _Q0, _Q17);
            if (_S27 <= _S10)
              v1261 = 0;
            else
              v1261 = -1;
            if (_S29 <= _S11)
              v1262 = 0;
            else
              v1262 = -1;
            if (_S31 <= _S12)
              v1263 = 0;
            else
              v1263 = -1;
            if (_S8 <= _S13)
              v1264 = 0;
            else
              v1264 = -1;
            if (_S18 <= _S15)
              v1265 = 0;
            else
              v1265 = -1;
            v821 = _S21 <= _S3;
            _S0 = fmaxf(_S18, v1787);
            _S3 = fmaxf(_S21, v1783);
            if (v821)
              v1268 = 0;
            else
              v1268 = -1;
            __asm
            {
              FCVT            H5, S0
              FCVT            H0, S3
            }
            _Q0.i16[1] = _H5;
            _S3 = fmaxf(_S23, _S22);
            __asm { FCVT            H3, S3 }
            _Q0.i16[2] = LOWORD(_S3);
            _S3 = fmaxf(_S19, _S24);
            __asm { FCVT            H3, S3 }
            _Q0.i16[3] = LOWORD(_S3);
            _S3 = fmaxf(_S29, _S28);
            __asm { FCVT            H3, S3 }
            _Q0.i16[4] = LOWORD(_S3);
            _S3 = fmaxf(_S27, _S26);
            __asm { FCVT            H3, S3 }
            _Q0.i16[5] = LOWORD(_S3);
            _S3 = fmaxf(_S31, _S30);
            __asm { FCVT            H3, S3 }
            _Q0.i16[6] = LOWORD(_S3);
            _S3 = fmaxf(_S8, _S20);
            v1225.i16[1] = v1202;
            __asm { FCVT            H3, S3 }
            _Q0.i16[7] = LOWORD(_S3);
            v1276.i16[0] = v1262;
            v1276.i16[1] = v1261;
            v1276.i16[2] = v1263;
            if (_NF ^ _VF | _ZF)
              v1277 = 0;
            else
              v1277 = -1;
            v1278.i16[0] = v1268;
            v1278.i16[1] = v1265;
            v1276.i16[3] = v1264;
            v1278.i16[2] = v1277;
            if (_S19 <= _S14)
              v1279 = 0;
            else
              v1279 = -1;
            v1278.i16[3] = v1279;
            v1280 = vbslq_s8((int8x16_t)vmovl_s16(v1276), (int8x16_t)v1195, v1246);
            v1281.i16[0] = v1256;
            v1281.i16[1] = v1250;
            v1281.i16[2] = v1259;
            v1281.i16[3] = v1260;
            v1282 = (int8x16_t)vmovl_s16(v1281);
            _Q17 = vbslq_s8(v1282, v1191, v1280);
            v1191 = vbslq_s8(v1282, (int8x16_t)v1195, v1191);
            v1225.i16[2] = v1231;
            v1225.i16[3] = v1242;
            v1283 = (int8x16_t)vmovl_s16(v1225);
            v1192 = vbslq_s8(v1283, _Q2, vbslq_s8((int8x16_t)vmovl_s16(v1278), (int8x16_t)v1194, v1791));
            _Q2 = vbslq_s8(v1283, (int8x16_t)v1194, _Q2);
            _Q3.i64[0] = 0x100000001;
            _Q3.i64[1] = 0x100000001;
            v1194 = vaddq_s32(v1194, _Q3);
            v1195 = vaddq_s32(v1195, _Q3);
            v1188 += 2 * v14;
            --v1190;
          }
          while (v1190);
          *(int8x16_t *)v1881 = _Q2;
          v1882 = v1191;
          *(int8x16_t *)__p = v1192;
          v1866 = _Q17;
          if (v5 < 1)
            goto LABEL_843;
        }
        v1297 = 0;
        do
        {
          _Q2.i16[0] = *(_WORD *)(v1188 + 2 * v1297);
          v1801 = _Q0;
          _Q3.i16[0] = *(_WORD *)((unint64_t)&v1801 & 0xFFFFFFFFFFFFFFF1 | (2 * (v1297 & 7)));
          __asm
          {
            FCVT            S4, H2
            FCVT            S5, H3
          }
          if (_S4 <= _S5)
          {
            v1301 = (__int16 *)((unint64_t)&v1800 & 0xFFFFFFFFFFFFFFF1 | (2 * (v1297 & 7)));
            v1800 = _Q1;
            _Q1.i16[0] = *v1301;
            __asm { FCVT            S6, H1 }
            if (_S4 >= _S5)
              _Q3.i32[0] = _Q2.i32[0];
            if (_S4 >= _S6)
              _Q1.i32[0] = _Q2.i32[0];
            *v1301 = _Q1.i16[0];
            _Q1 = v1800;
            v1799 = _Q0;
            *(_WORD *)((unint64_t)&v1799 & 0xFFFFFFFFFFFFFFF1 | (2 * (v1297 & 7))) = _Q3.i16[0];
            v1303 = v15 - 1;
            if (_S4 <= _S6)
              v1303 = *((_DWORD *)__p + v1297);
            _Q0 = v1799;
            *((_DWORD *)__p + v1297) = v1303;
            v1300 = *((_DWORD *)v1881 + v1297);
          }
          else
          {
            v1797 = _Q1;
            *(_WORD *)((unint64_t)&v1797 & 0xFFFFFFFFFFFFFFF1 | (2 * (v1297 & 7))) = _Q3.i16[0];
            _Q1 = v1797;
            if (_S4 < _S5)
              _Q2.i32[0] = _Q3.i32[0];
            v1798 = _Q0;
            *(_WORD *)((unint64_t)&v1798 & 0xFFFFFFFFFFFFFFF1 | (2 * (v1297 & 7))) = _Q2.i16[0];
            _Q0 = v1798;
            *((_DWORD *)__p + v1297) = *((_DWORD *)v1881 + v1297);
            v1300 = v15 - 1;
          }
          *((_DWORD *)v1881 + v1297++) = v1300;
        }
        while (v5 != v1297);
        goto LABEL_843;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        v960 = v1 + 2 * v4;
        v961 = v2 - 1;
        if (v2 <= 1)
        {
          HIWORD(_S1) = 0;
          v1884 = 0u;
          v1883 = 0u;
          v1882 = 0u;
          *(_OWORD *)v1881 = 0u;
          v1868 = 0u;
          v1867 = 0u;
          _Q28.i64[0] = 0x400040004000400;
          _Q28.i64[1] = 0x400040004000400;
          _Q10.i64[0] = 0x400040004000400;
          _Q10.i64[1] = 0x400040004000400;
          v1866 = 0u;
          _Q3.i64[0] = 0x400040004000400;
          _Q3.i64[1] = 0x400040004000400;
          _Q0.i64[0] = 0x400040004000400;
          _Q0.i64[1] = 0x400040004000400;
          *(_OWORD *)__p = 0u;
        }
        else
        {
          v1310 = v5;
          _Q28.i64[0] = 0x400040004000400;
          _Q28.i64[1] = 0x400040004000400;
          _Q2 = 0uLL;
          v1671 = 2 * v3;
          v1668 = v2 - 1;
          v963 = v2 - 1;
          _Q4 = 0uLL;
          v964 = 0uLL;
          v965 = 0uLL;
          v966 = 0uLL;
          v1790 = 0u;
          v967 = 0uLL;
          v968 = 0uLL;
          v969 = 0uLL;
          v970 = 0uLL;
          v971 = 0uLL;
          v972 = 0uLL;
          _Q10.i64[0] = 0x400040004000400;
          _Q10.i64[1] = 0x400040004000400;
          _Q3.i64[0] = 0x400040004000400;
          _Q3.i64[1] = 0x400040004000400;
          _Q0.i64[0] = 0x400040004000400;
          _Q0.i64[1] = 0x400040004000400;
          do
          {
            v1728 = v968;
            v1747 = v966;
            v1758 = v965;
            v1761 = v967;
            v1764 = v972;
            v1768 = v971;
            v1772 = v970;
            v1775 = v969;
            v1779 = v964;
            v1782 = _Q4;
            v1786 = _Q2;
            _Q31 = *(_OWORD *)v960;
            _Q30 = *(_OWORD *)(v960 + 16);
            _H1 = WORD1(*(_OWORD *)v960);
            __asm { FCVT            S19, H31 }
            _H4 = WORD2(*(_QWORD *)v960);
            __asm
            {
              FCVT            S11, H1
              FCVT            S2, H4
            }
            _H1 = HIWORD(*(_QWORD *)v960);
            __asm { FCVT            S9, H1 }
            _H4 = WORD1(*(_QWORD *)(v960 + 8));
            _H1 = *(_QWORD *)(v960 + 8);
            __asm { FCVT            S8, H4 }
            _H6 = WORD1(_Q30);
            __asm { FCVT            S16, H30 }
            _H4 = WORD2(*(_QWORD *)(v960 + 16));
            _H25 = HIWORD(*(_QWORD *)(v960 + 16));
            _H5 = _Q10.i16[1];
            __asm
            {
              FCVT            S14, H1
              FCVT            S17, H5
            }
            v1725 = _S17;
            __asm { FCVT            S22, H10 }
            v1722 = _S22;
            _H1 = _Q10.i16[2];
            __asm { FCVT            S24, H1 }
            v1710 = _S24;
            _H1 = _Q28.i16[5];
            __asm
            {
              FCVT            S20, H6
              FCVT            S26, H1
            }
            v1741 = _S26;
            _H1 = _Q28.i16[4];
            __asm { FCVT            S7, H1 }
            v1744 = _S7;
            _H1 = _Q28.i16[1];
            __asm
            {
              FCVT            S5, H1
              FCVT            S23, H4
              FCVT            S4, H28
            }
            _H1 = _Q28.i16[2];
            __asm { FCVT            S18, H1 }
            _H1 = _Q28.i16[3];
            __asm
            {
              FCVT            S29, H1
              FCVT            S13, H25
            }
            v1674 = _S11;
            _S1 = fmaxf(_S11, _S5);
            __asm { FCVT            H1, S1 }
            v1013 = _S19;
            v1677 = _S19;
            _S5 = fmaxf(_S19, _S4);
            __asm { FCVT            H25, S5 }
            _Q25.i16[1] = LOWORD(_S1);
            v1015 = _S2;
            v1686 = _S2;
            _S1 = fmaxf(_S2, _S18);
            __asm { FCVT            H1, S1 }
            v1689 = _S9;
            _S5 = fmaxf(_S9, _S29);
            __asm { FCVT            H5, S5 }
            _Q25.i16[2] = LOWORD(_S1);
            _Q25.i16[3] = LOWORD(_S5);
            _S1 = fmaxf(_S14, _S7);
            __asm { FCVT            H1, S1 }
            _Q25.i16[4] = LOWORD(_S1);
            _S1 = fmaxf(_S8, _S26);
            __asm { FCVT            H1, S1 }
            _S5 = fmaxf(_S20, _S17);
            __asm { FCVT            H5, S5 }
            _Q25.i16[5] = LOWORD(_S1);
            _S1 = fmaxf(_S16, _S22);
            v1022 = _Q10;
            __asm { FCVT            H10, S1 }
            _Q10.i16[1] = LOWORD(_S5);
            _S1 = fmaxf(_S23, _S24);
            __asm { FCVT            H1, S1 }
            _Q10.i16[2] = LOWORD(_S1);
            LOWORD(_S1) = v1022.i16[3];
            __asm { FCVT            S1, H1 }
            v1707 = _S1;
            _S1 = fmaxf(_S13, _S1);
            v1026 = _S13;
            __asm { FCVT            H1, S1 }
            _Q10.i16[3] = LOWORD(_S1);
            LOWORD(_S1) = v1022.i16[4];
            __asm { FCVT            S5, H1 }
            v1680 = _S5;
            LOWORD(_S1) = *(_QWORD *)(v960 + 24);
            __asm { FCVT            S27, H1 }
            _S1 = fmaxf(_S27, _S5);
            __asm { FCVT            H1, S1 }
            _Q10.i16[4] = LOWORD(_S1);
            LOWORD(_S1) = WORD6(*(_OWORD *)v960);
            __asm { FCVT            S13, H1 }
            LOWORD(_S1) = _Q28.i16[6];
            __asm { FCVT            S1, H1 }
            _S1 = fmaxf(_S13, _S1);
            __asm { FCVT            H1, S1 }
            _Q25.i16[6] = LOWORD(_S1);
            LOWORD(_S1) = WORD1(*(_QWORD *)(v960 + 24));
            __asm { FCVT            S18, H1 }
            LOWORD(_S1) = v1022.i16[5];
            __asm { FCVT            S12, H1 }
            _S1 = fmaxf(_S18, _S12);
            __asm { FCVT            H1, S1 }
            _Q10.i16[5] = LOWORD(_S1);
            LOWORD(_S1) = v1022.i16[6];
            __asm { FCVT            S29, H1 }
            LOWORD(_S1) = WORD6(_Q30);
            __asm { FCVT            S19, H1 }
            _S1 = fmaxf(_S19, _S29);
            __asm { FCVT            H1, S1 }
            _Q10.i16[6] = LOWORD(_S1);
            LOWORD(_S1) = HIWORD(*(_OWORD *)v960);
            __asm { FCVT            S31, H1 }
            LOWORD(_S1) = _Q28.i16[7];
            __asm { FCVT            S15, H1 }
            _S1 = fmaxf(_S31, _S15);
            __asm { FCVT            H1, S1 }
            _Q25.i16[7] = LOWORD(_S1);
            LOWORD(_S1) = HIWORD(_Q30);
            __asm { FCVT            S21, H1 }
            LOWORD(_S1) = v1022.i16[7];
            __asm { FCVT            S24, H1 }
            _S1 = fmaxf(_S21, _S24);
            __asm { FCVT            H1, S1 }
            _Q10.i16[7] = LOWORD(_S1);
            LOWORD(_S1) = _Q3.i16[1];
            __asm { FCVT            S1, H1 }
            v1692 = _S1;
            if (_S11 <= _S1)
              v1048 = 0;
            else
              v1048 = -1;
            v1731 = v1048;
            __asm { FCVT            S1, H3 }
            v1695 = _S1;
            if (v1013 <= _S1)
              v1050 = 0;
            else
              v1050 = -1;
            _H2 = _Q3.i16[2];
            __asm { FCVT            S1, H2 }
            v1698 = _S1;
            if (v1015 <= _S1)
              v1053 = 0;
            else
              v1053 = -1;
            v1734 = v1053;
            _H2 = _Q3.i16[3];
            __asm { FCVT            S1, H2 }
            v1704 = _S1;
            if (_S9 <= _S1)
              v1056 = 0;
            else
              v1056 = -1;
            v1737 = v1056;
            _H2 = _Q3.i16[5];
            __asm { FCVT            S1, H2 }
            v1716 = _S1;
            v1059 = _S8;
            if (_S8 <= _S1)
              v1060 = 0;
            else
              v1060 = -1;
            _H2 = _Q3.i16[4];
            __asm { FCVT            S1, H2 }
            v1701 = _S1;
            if (_S14 <= _S1)
              v1063 = 0;
            else
              v1063 = -1;
            _H2 = _Q3.i16[6];
            __asm { FCVT            S1, H2 }
            v1713 = _S1;
            if (_S13 <= _S1)
              v1066 = 0;
            else
              v1066 = -1;
            _H2 = _Q3.i16[7];
            __asm { FCVT            S1, H2 }
            v1719 = _S1;
            if (_S31 <= _S1)
              v1069 = 0;
            else
              v1069 = -1;
            _H2 = _Q0.i16[1];
            __asm { FCVT            S9, H2 }
            v1072 = _S20;
            if (_S20 <= _S9)
              v1073 = 0;
            else
              v1073 = -1;
            __asm { FCVT            S6, H0 }
            v1075 = _S16;
            _H28 = _Q0.i16[2];
            __asm { FCVT            S7, H28 }
            if (_NF ^ _VF | _ZF)
              v1078 = 0;
            else
              v1078 = -1;
            if (_S23 <= _S7)
              v1079 = 0;
            else
              v1079 = -1;
            _H28 = _Q0.i16[3];
            __asm { FCVT            S17, H28 }
            v1082 = v1026;
            if (v1026 <= _S17)
              v1083 = 0;
            else
              v1083 = -1;
            _H28 = _Q0.i16[5];
            __asm { FCVT            S26, H28 }
            _H28 = _Q0.i16[4];
            __asm { FCVT            S16, H28 }
            if (_NF ^ _VF | _ZF)
              v1088 = 0;
            else
              v1088 = -1;
            v1092.i16[0] = v1050;
            v1089.i16[0] = v1050;
            v1092.i16[1] = v1048;
            _H28 = _Q0.i16[6];
            __asm { FCVT            S22, H28 }
            v1092.i16[2] = v1053;
            v1092.i16[3] = v1056;
            if (_NF ^ _VF | _ZF)
              v1093 = 0;
            else
              v1093 = -1;
            v1092.i16[4] = v1063;
            v1092.i16[5] = v1060;
            _H28 = _Q0.i16[7];
            __asm { FCVT            S20, H28 }
            v1092.i16[6] = v1066;
            v1092.i16[7] = v1069;
            v1097.i16[0] = v1078;
            v1096.i16[0] = v1078;
            v1097.i16[1] = v1073;
            v1097.i16[2] = v1079;
            if (_NF ^ _VF | _ZF)
              v1098 = 0;
            else
              v1098 = -1;
            v1097.i16[3] = v1083;
            v1097.i16[4] = v1093;
            if (_S21 <= _S20)
              v1099 = 0;
            else
              v1099 = -1;
            v1097.i16[5] = v1088;
            v1097.i16[6] = v1098;
            v1097.i16[7] = v1099;
            _Q10 = vbslq_s8(v1097, _Q0, _Q10);
            _Q28 = vbslq_s8(v1092, _Q3, _Q25);
            if (_S18 <= _S12)
              v1100 = 0;
            else
              v1100 = -1;
            if (_S27 <= v1680)
              v1101 = 0;
            else
              v1101 = -1;
            if (_S19 <= _S29)
              v1102 = 0;
            else
              v1102 = -1;
            v1681 = v1102;
            if (_S21 <= _S24)
              v1103 = 0;
            else
              v1103 = -1;
            if (v1072 <= v1725)
              v1104 = 0;
            else
              v1104 = -1;
            if (v1075 <= v1722)
              v1105 = 0;
            else
              v1105 = -1;
            if (_S23 <= v1710)
              v1106 = 0;
            else
              v1106 = -1;
            if (v1082 <= v1707)
              v1107 = 0;
            else
              v1107 = -1;
            if (v1059 <= v1741)
              v1108 = 0;
            else
              v1108 = -1;
            _S0 = fmaxf(v1072, _S9);
            if (_S14 <= v1744)
              v1110 = 0;
            else
              v1110 = -1;
            _S3 = fmaxf(v1075, _S6);
            __asm
            {
              FCVT            H4, S0
              FCVT            H0, S3
            }
            _Q0.i16[1] = _H4;
            if (_NF ^ _VF | _ZF)
              v1113 = 0;
            else
              v1113 = -1;
            _S3 = fmaxf(_S23, _S7);
            __asm { FCVT            H3, S3 }
            _Q0.i16[2] = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v1115 = 0;
            else
              v1115 = -1;
            _S3 = fmaxf(v1082, _S17);
            __asm { FCVT            H3, S3 }
            _Q0.i16[3] = LOWORD(_S3);
            if (_NF ^ _VF | _ZF)
              v1117 = 0;
            else
              v1117 = -1;
            _S3 = fmaxf(_S27, _S16);
            _S4 = fmaxf(_S18, _S26);
            __asm { FCVT            H3, S3 }
            _Q0.i16[4] = LOWORD(_S3);
            _S5 = fmaxf(_S19, _S22);
            _S6 = fmaxf(_S21, _S20);
            _S3 = fmaxf(v1674, v1692);
            _S7 = fmaxf(v1677, v1695);
            if (_NF ^ _VF | _ZF)
              v1124 = 0;
            else
              v1124 = -1;
            __asm
            {
              FCVT            H16, S3
              FCVT            H3, S7
            }
            _Q3.i16[1] = _H16;
            if (_NF ^ _VF | _ZF)
              v1126 = 0;
            else
              v1126 = -1;
            _S7 = fmaxf(v1686, v1698);
            __asm { FCVT            H7, S7 }
            _Q3.i16[2] = LOWORD(_S7);
            _S7 = fmaxf(v1689, v1704);
            __asm { FCVT            H7, S7 }
            _Q3.i16[3] = LOWORD(_S7);
            _S7 = fmaxf(_S14, v1701);
            __asm { FCVT            H4, S4 }
            _Q0.i16[5] = _H4;
            __asm { FCVT            H4, S7 }
            _Q3.i16[4] = _H4;
            __asm { FCVT            H4, S5 }
            _Q0.i16[6] = _H4;
            _S4 = fmaxf(v1059, v1716);
            __asm { FCVT            H4, S4 }
            _Q3.i16[5] = LOWORD(_S4);
            _S4 = fmaxf(_S13, v1713);
            v1135.i16[0] = v1101;
            v1135.i16[1] = v1100;
            __asm { FCVT            H4, S4 }
            _Q3.i16[6] = LOWORD(_S4);
            v1136.i16[0] = v1105;
            v1136.i16[1] = v1104;
            _S7 = fmaxf(_S31, v1719);
            v1138.i16[0] = v1110;
            v1138.i16[1] = v1108;
            __asm
            {
              FCVT            H6, S6
              FCVT            H7, S7
            }
            _Q3.i16[7] = LOWORD(_S7);
            _Q0.i16[7] = _H6;
            v1140.i16[0] = v1093;
            v1141.i16[0] = v1124;
            v1141.i16[1] = v1117;
            v1140.i16[1] = v1088;
            v1141.i16[2] = v1126;
            if (_NF ^ _VF | _ZF)
              v1142 = 0;
            else
              v1142 = -1;
            v1141.i16[3] = v1142;
            v1138.i16[2] = v1113;
            v1138.i16[3] = v1115;
            v1136.i16[2] = v1106;
            v1136.i16[3] = v1107;
            v1135.i16[2] = v1681;
            v1135.i16[3] = v1103;
            v1140.i16[2] = v1098;
            v1140.i16[3] = v1099;
            v1143 = (int8x16_t)vmovl_s16(v1140);
            v968 = vbslq_s8(v1143, v1758, vbslq_s8((int8x16_t)vmovl_s16(v1135), (int8x16_t)v1764, v1728));
            v965 = vbslq_s8(v1143, (int8x16_t)v1764, v1758);
            v1089.i16[1] = v1731;
            v1096.i16[1] = v1073;
            v1096.i16[2] = v1079;
            v1096.i16[3] = v1083;
            v1144 = (int8x16_t)vmovl_s16(v1096);
            v967 = vbslq_s8(v1144, v1779, vbslq_s8((int8x16_t)vmovl_s16(v1136), (int8x16_t)v1768, v1761));
            v964 = vbslq_s8(v1144, (int8x16_t)v1768, v1779);
            v1144.i16[0] = v1063;
            v1144.i16[1] = v1060;
            v1089.i16[2] = v1734;
            v1144.i16[2] = v1066;
            v1144.i16[3] = v1069;
            v1145 = (int8x16_t)vmovl_s16(*(int16x4_t *)v1144.i8);
            v1790 = vbslq_s8(v1145, v1782, vbslq_s8((int8x16_t)vmovl_s16(v1138), (int8x16_t)v1772, v1790));
            _Q4 = vbslq_s8(v1145, (int8x16_t)v1772, v1782);
            v1089.i16[3] = v1737;
            v1146 = vmovl_s16(v1089);
            v966 = vbslq_s8((int8x16_t)v1146, v1786, vbslq_s8((int8x16_t)vmovl_s16(v1141), (int8x16_t)v1775, v1747));
            _Q2 = vbslq_s8((int8x16_t)v1146, (int8x16_t)v1775, v1786);
            v1146.i64[0] = 0x100000001;
            v1146.i64[1] = 0x100000001;
            v969 = vaddq_s32(v1775, v1146);
            v970 = vaddq_s32(v1772, v1146);
            v971 = vaddq_s32(v1768, v1146);
            v972 = vaddq_s32(v1764, v1146);
            v960 += v1671;
            --v963;
          }
          while (v963);
          *(int8x16_t *)v1881 = _Q2;
          v1882 = _Q4;
          v1883 = v964;
          v1884 = v965;
          *(int8x16_t *)__p = v966;
          HIWORD(_S1) = v1790.i16[1];
          v1866 = v1790;
          v1867 = v967;
          v1868 = v968;
          v5 = v1310;
          v961 = v1668;
          if (v1310 < 1)
            goto LABEL_843;
        }
        v1284 = 0;
        do
        {
          LOWORD(_S1) = *(_WORD *)(v960 + 2 * v1284);
          v1811[0] = _Q3;
          v1811[1] = _Q0;
          _Q4.i16[0] = *((_WORD *)v1811 + (v1284 & 0xF));
          __asm
          {
            FCVT            S5, H1
            FCVT            S6, H4
          }
          if (_S5 <= _S6)
          {
            v1810[0] = _Q28;
            v1810[1] = _Q10;
            _Q2.i16[0] = *((_WORD *)v1810 + (v1284 & 0xF));
            __asm { FCVT            S7, H2 }
            if (_S5 >= _S6)
              *(float *)_Q4.i32 = _S1;
            if (_S5 < _S7)
              _S1 = *(float *)_Q2.i32;
            v1808 = _Q28;
            v1809 = _Q10;
            v1808.i16[v1284 & 0xF] = LOWORD(_S1);
            _Q28 = v1808;
            _Q10 = v1809;
            v1806 = _Q3;
            v1807 = _Q0;
            v1806.i16[v1284 & 0xF] = _Q4.i16[0];
            v1289 = v961;
            if (_S5 <= _S7)
              v1289 = *((_DWORD *)__p + v1284);
            _Q3 = v1806;
            _Q0 = v1807;
            *((_DWORD *)__p + v1284) = v1289;
            v1287 = *((_DWORD *)v1881 + v1284);
          }
          else
          {
            v1804 = _Q28;
            v1805 = _Q10;
            v1804.i16[v1284 & 0xF] = _Q4.i16[0];
            _Q28 = v1804;
            _Q10 = v1805;
            if (_S5 < _S6)
              _S1 = *(float *)_Q4.i32;
            v1802 = _Q3;
            v1803 = _Q0;
            v1802.i16[v1284 & 0xF] = LOWORD(_S1);
            _Q0 = v1803;
            _Q3 = v1802;
            *((_DWORD *)__p + v1284) = *((_DWORD *)v1881 + v1284);
            v1287 = v961;
          }
          *((_DWORD *)v1881 + v1284++) = v1287;
        }
        while (v5 != v1284);
        goto LABEL_843;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
        v614 = v1 + 2 * v4;
        v615 = v15 - 1;
        if (v15 <= 1)
        {
          HIWORD(_S0) = 0;
          v1888 = 0u;
          v1887 = 0u;
          v1886 = 0u;
          v1885 = 0u;
          v1884 = 0u;
          v1883 = 0u;
          v1882 = 0u;
          *(_OWORD *)v1881 = 0u;
          v1872 = 0u;
          v1871 = 0u;
          v1870 = 0u;
          _Q1.i64[0] = 0x400040004000400;
          _Q1.i64[1] = 0x400040004000400;
          v1781 = _Q1;
          v1869 = 0u;
          _Q18.i64[0] = 0x400040004000400;
          _Q18.i64[1] = 0x400040004000400;
          v1789 = _Q1;
          v1868 = 0u;
          v1785 = _Q1;
          v1867 = 0u;
          _Q6.i64[0] = 0x400040004000400;
          _Q6.i64[1] = 0x400040004000400;
          _Q25.i64[0] = 0x400040004000400;
          _Q25.i64[1] = 0x400040004000400;
          v1866 = 0u;
          _Q7.i64[0] = 0x400040004000400;
          _Q7.i64[1] = 0x400040004000400;
          *(_OWORD *)__p = 0u;
          _Q15.i64[0] = 0x400040004000400;
          _Q15.i64[1] = 0x400040004000400;
        }
        else
        {
          v1309 = v5;
          v616.i64[0] = 0x400040004000400;
          v616.i64[1] = 0x400040004000400;
          v1781 = v616;
          _Q1 = 0uLL;
          v1483 = 2 * v14;
          v1481 = v15 - 1;
          v618 = 0uLL;
          v619 = 0uLL;
          v620 = 0uLL;
          v621 = 0uLL;
          _Q4 = 0uLL;
          v622 = 0uLL;
          v623 = 0uLL;
          v1721 = 0u;
          v1718 = 0u;
          v624 = 0uLL;
          v1724 = 0u;
          v625 = 0uLL;
          v626 = 0uLL;
          v1715 = 0u;
          v1727 = 0u;
          v627 = 0uLL;
          v628 = 0uLL;
          v629 = 0uLL;
          v630 = 0uLL;
          v631 = 0uLL;
          v632 = 0uLL;
          v633 = 0uLL;
          v634 = 0uLL;
          _Q18.i64[0] = 0x400040004000400;
          _Q18.i64[1] = 0x400040004000400;
          v616.i64[0] = 0x400040004000400;
          v616.i64[1] = 0x400040004000400;
          v1789 = v616;
          v1785 = v616;
          _Q6.i64[0] = 0x400040004000400;
          _Q6.i64[1] = 0x400040004000400;
          _Q25.i64[0] = 0x400040004000400;
          _Q25.i64[1] = 0x400040004000400;
          _Q7.i64[0] = 0x400040004000400;
          _Q7.i64[1] = 0x400040004000400;
          _Q15.i64[0] = 0x400040004000400;
          _Q15.i64[1] = 0x400040004000400;
          do
          {
            v1643 = v626;
            v1661 = v625;
            v1663 = v624;
            v1665 = v634;
            v1667 = v633;
            v1670 = v632;
            v1673 = v631;
            v1676 = v630;
            v1679 = v629;
            v1683 = v628;
            v1685 = v627;
            v1688 = v623;
            v1691 = v622;
            v1694 = _Q4;
            v1697 = v621;
            v1700 = v620;
            v1703 = v619;
            v1706 = v618;
            v1709 = v615;
            v1712 = _Q1;
            _Q29 = *(_OWORD *)v614;
            _Q26 = *(_OWORD *)(v614 + 16);
            _H0 = WORD1(_Q26);
            __asm { FCVT            S4, H26 }
            _H1 = WORD2(*(_QWORD *)(v614 + 16));
            __asm
            {
              FCVT            S19, H0
              FCVT            S5, H1
            }
            _H2 = HIWORD(*(_QWORD *)(v614 + 16));
            _H1 = WORD1(*(_QWORD *)(v614 + 24));
            _H0 = *(_QWORD *)(v614 + 24);
            _H3 = _Q18.i16[5];
            __asm
            {
              FCVT            S21, H2
              FCVT            S22, H3
            }
            v1562 = _S22;
            _H2 = _Q18.i16[4];
            __asm { FCVT            S3, H2 }
            v1567 = _S3;
            _H2 = _Q18.i16[1];
            __asm { FCVT            S16, H2 }
            v1597 = _S16;
            __asm
            {
              FCVT            S2, H1
              FCVT            S17, H18
            }
            v1594 = _S17;
            _H1 = _Q18.i16[2];
            __asm { FCVT            S20, H1 }
            v1591 = _S20;
            _H1 = _Q18.i16[3];
            __asm { FCVT            S23, H1 }
            v1588 = _S23;
            __asm { FCVT            S8, H0 }
            v1496 = _S19;
            _S0 = fmaxf(_S19, _S16);
            __asm { FCVT            H1, S0 }
            v1494 = _S4;
            _S0 = fmaxf(_S4, _S17);
            __asm { FCVT            H0, S0 }
            _Q0.i16[1] = _H1;
            v1492 = _S5;
            _S1 = fmaxf(_S5, _S20);
            __asm { FCVT            H1, S1 }
            _Q0.i16[2] = LOWORD(_S1);
            v1490 = _S21;
            _S1 = fmaxf(_S21, _S23);
            __asm { FCVT            H1, S1 }
            _Q0.i16[3] = LOWORD(_S1);
            _S1 = fmaxf(_S8, _S3);
            __asm { FCVT            H1, S1 }
            _Q0.i16[4] = LOWORD(_S1);
            v670 = _S2;
            _S1 = fmaxf(_S2, _S22);
            __asm { FCVT            H1, S1 }
            _Q0.i16[5] = LOWORD(_S1);
            LOWORD(_S1) = WORD6(_Q26);
            __asm { FCVT            S2, H1 }
            LOWORD(_S1) = _Q18.i16[6];
            __asm { FCVT            S1, H1 }
            v1560 = _S1;
            _S1 = fmaxf(_S2, _S1);
            v675 = _S2;
            v1526 = _S2;
            __asm { FCVT            H1, S1 }
            _Q0.i16[6] = LOWORD(_S1);
            LOWORD(_S1) = HIWORD(_Q26);
            __asm { FCVT            S2, H1 }
            LOWORD(_S1) = _Q18.i16[7];
            __asm { FCVT            S1, H1 }
            v1551 = _S1;
            _S1 = fmaxf(_S2, _S1);
            v679 = _S2;
            v1760 = _S2;
            __asm { FCVT            H1, S1 }
            _Q0.i16[7] = LOWORD(_S1);
            LOWORD(_S1) = _Q15.i16[1];
            __asm { FCVT            S22, H1 }
            v1651 = _S22;
            v1578 = v614;
            _Q1 = *(_OWORD *)(v614 + 48);
            LOWORD(_S2) = WORD1(_Q1);
            __asm { FCVT            S2, H2 }
            v1755 = _S2;
            if (_S2 <= _S22)
              v684 = 0;
            else
              v684 = -1;
            v1767 = v684;
            __asm { FCVT            S2, H15 }
            v1647 = _S2;
            __asm { FCVT            S16, H1 }
            v1778 = _S16;
            LOWORD(_S2) = _Q15.i16[2];
            __asm { FCVT            S22, H2 }
            v1649 = _S22;
            LOWORD(_S2) = WORD2(_Q1);
            __asm { FCVT            S2, H2 }
            v1757 = _S2;
            if (_NF ^ _VF | _ZF)
              v689 = 0;
            else
              v689 = -1;
            v1564 = v689;
            _H2 = _Q15.i16[3];
            __asm { FCVT            S22, H2 }
            v1653 = _S22;
            _H2 = WORD3(_Q1);
            __asm { FCVT            S2, H2 }
            v1746 = _S2;
            if (_NF ^ _VF | _ZF)
              v694 = 0;
            else
              v694 = -1;
            v1763 = v694;
            _H2 = _Q15.i16[5];
            __asm { FCVT            S22, H2 }
            v1655 = _S22;
            _H2 = WORD5(_Q1);
            __asm { FCVT            S2, H2 }
            v1771 = _S2;
            if (_NF ^ _VF | _ZF)
              v699 = 0;
            else
              v699 = -1;
            v1751 = v699;
            _H2 = _Q15.i16[4];
            __asm { FCVT            S22, H2 }
            v1645 = _S22;
            _H2 = WORD4(_Q1);
            __asm { FCVT            S2, H2 }
            v1749 = _S2;
            if (_NF ^ _VF | _ZF)
              v704 = 0;
            else
              v704 = -1;
            _H2 = _Q15.i16[6];
            __asm { FCVT            S22, H2 }
            v1657 = _S22;
            _H2 = WORD6(_Q1);
            __asm { FCVT            S2, H2 }
            v1753 = _S2;
            if (_NF ^ _VF | _ZF)
              v709 = 0;
            else
              v709 = -1;
            v1557 = v709;
            _H2 = _Q15.i16[7];
            __asm { FCVT            S2, H2 }
            v1659 = _S2;
            _H1 = HIWORD(_Q1);
            __asm { FCVT            S1, H1 }
            v1774 = _S1;
            if (_NF ^ _VF | _ZF)
              v714 = 0;
            else
              v714 = -1;
            v1555 = v714;
            if (_S1 <= _S2)
              v715 = 0;
            else
              v715 = -1;
            v1553 = v715;
            _H1 = _Q7.i16[1];
            __asm { FCVT            S22, H1 }
            v1604 = _S22;
            _Q1 = *(_OWORD *)(v614 + 32);
            _H2 = WORD1(_Q1);
            __asm { FCVT            S14, H2 }
            if (_S14 <= _S22)
              v721 = 0;
            else
              v721 = -1;
            v1586 = v721;
            __asm { FCVT            S2, H7 }
            v1601 = _S2;
            __asm { FCVT            S16, H1 }
            v1743 = _S16;
            if (_S16 <= _S2)
              v724 = 0;
            else
              v724 = -1;
            _H2 = _Q7.i16[2];
            __asm { FCVT            S22, H2 }
            v1606 = _S22;
            _H2 = WORD2(_Q1);
            __asm { FCVT            S24, H2 }
            v1487 = *(float *)_D24.i32;
            if (*(float *)_D24.i32 <= _S22)
              v729 = 0;
            else
              v729 = -1;
            v1584 = v729;
            _H2 = _Q7.i16[3];
            __asm { FCVT            S22, H2 }
            v1608 = _S22;
            _H2 = WORD3(_Q1);
            __asm { FCVT            S17, H2 }
            v1485 = _S17;
            if (_S17 <= _S22)
              v734 = 0;
            else
              v734 = -1;
            v1582 = v734;
            _H2 = _Q7.i16[5];
            __asm { FCVT            S22, H2 }
            v1613 = _S22;
            _H2 = WORD5(_Q1);
            __asm { FCVT            S23, H2 }
            v1730 = _S23;
            if (_S23 <= _S22)
              v739 = 0;
            else
              v739 = -1;
            v1574 = v739;
            _H2 = _Q7.i16[4];
            __asm { FCVT            S22, H2 }
            v1603 = _S22;
            _H2 = WORD4(_Q1);
            __asm { FCVT            S2, H2 }
            v1736 = _S2;
            if (_S2 <= _S22)
              v744 = 0;
            else
              v744 = -1;
            v1572 = v744;
            _H2 = _Q7.i16[6];
            __asm { FCVT            S22, H2 }
            v1611 = _S22;
            _H2 = WORD6(_Q1);
            __asm { FCVT            S2, H2 }
            v1740 = _S2;
            if (_S2 <= _S22)
              v749 = 0;
            else
              v749 = -1;
            v1570 = v749;
            _H2 = _Q7.i16[7];
            __asm { FCVT            S2, H2 }
            v1610 = _S2;
            _H1 = HIWORD(_Q1);
            __asm { FCVT            S16, H1 }
            v1733 = _S16;
            if (_S16 <= _S2)
              v754 = 0;
            else
              v754 = -1;
            v1576 = v754;
            _H1 = _Q6.i16[1];
            __asm { FCVT            S2, H1 }
            v1541 = _S2;
            _H1 = WORD1(_Q29);
            __asm { FCVT            S1, H1 }
            v759 = _S1;
            v1528 = _S1;
            if (_S1 <= _S2)
              v760 = 0;
            else
              v760 = -1;
            v1623 = v760;
            __asm { FCVT            S1, H6 }
            v1537 = _S1;
            __asm { FCVT            S2, H29 }
            v763 = _S2;
            v1533 = _S2;
            if (_S2 <= _S1)
              v764 = 0;
            else
              v764 = -1;
            _H1 = _Q6.i16[2];
            __asm { FCVT            S2, H1 }
            v1543 = _S2;
            _H1 = WORD2(_Q29);
            __asm { FCVT            S1, H1 }
            v769 = _S1;
            v1530 = _S1;
            if (_S1 <= _S2)
              v770 = 0;
            else
              v770 = -1;
            v1625 = v770;
            _H1 = _Q6.i16[3];
            __asm { FCVT            S2, H1 }
            v1539 = _S2;
            _H1 = WORD3(_Q29);
            __asm { FCVT            S1, H1 }
            v775 = _S1;
            v1520 = _S1;
            if (_S1 <= _S2)
              v776 = 0;
            else
              v776 = -1;
            v1629 = v776;
            _H1 = _Q6.i16[5];
            __asm { FCVT            S2, H1 }
            v1549 = _S2;
            _H1 = WORD5(_Q29);
            __asm { FCVT            S1, H1 }
            v781 = _S1;
            v1503 = _S1;
            if (_S1 <= _S2)
              v782 = 0;
            else
              v782 = -1;
            v1621 = v782;
            _H1 = _Q6.i16[4];
            __asm { FCVT            S2, H1 }
            v1535 = _S2;
            _H1 = WORD4(_Q29);
            __asm { FCVT            S28, H1 }
            if (_S28 <= _S2)
              v787 = 0;
            else
              v787 = -1;
            v1637 = v787;
            _H1 = _Q6.i16[6];
            __asm { FCVT            S2, H1 }
            v1547 = _S2;
            _H1 = WORD6(_Q29);
            __asm { FCVT            S26, H1 }
            if (_S26 <= _S2)
              v792 = 0;
            else
              v792 = -1;
            v1635 = v792;
            _H1 = _Q6.i16[7];
            __asm { FCVT            S2, H1 }
            v1545 = _S2;
            _H1 = HIWORD(_Q29);
            __asm { FCVT            S1, H1 }
            v797 = _S1;
            v1499 = _S1;
            if (_S1 <= _S2)
              v798 = 0;
            else
              v798 = -1;
            v1633 = v798;
            _H1 = _Q25.i16[1];
            __asm { FCVT            S1, H1 }
            v1518 = _S1;
            if (_S19 <= _S1)
              v801 = 0;
            else
              v801 = -1;
            v1639 = v801;
            __asm { FCVT            S1, H25 }
            v1510 = _S1;
            if (_S4 <= _S1)
              v803 = 0;
            else
              v803 = -1;
            _H1 = _Q25.i16[2];
            __asm { FCVT            S1, H1 }
            v1512 = _S1;
            LOWORD(_S1) = _Q25.i16[3];
            __asm { FCVT            S1, H1 }
            v1516 = _S1;
            if (_NF ^ _VF | _ZF)
              v807 = 0;
            else
              v807 = -1;
            v1631 = v807;
            if (_S21 <= _S1)
              v808 = 0;
            else
              v808 = -1;
            v1627 = v808;
            _H1 = _Q25.i16[5];
            __asm { FCVT            S1, H1 }
            v1524 = _S1;
            v811 = v670;
            if (v670 <= _S1)
              v812 = 0;
            else
              v812 = -1;
            v1580 = v812;
            _H1 = _Q25.i16[4];
            __asm { FCVT            S1, H1 }
            v1514 = _S1;
            v815 = _S8;
            LOWORD(_S1) = _Q25.i16[6];
            __asm { FCVT            S1, H1 }
            v1522 = _S1;
            if (_NF ^ _VF | _ZF)
              v817 = 0;
            else
              v817 = -1;
            v1617 = v817;
            if (v675 <= _S1)
              v818 = 0;
            else
              v818 = -1;
            v1619 = v818;
            _H1 = _Q25.i16[7];
            __asm { FCVT            S1, H1 }
            v1599 = _S1;
            v821 = v679 <= _S1;
            v823.i16[0] = v803;
            v822.i16[0] = v803;
            v823.i16[1] = v801;
            v823.i16[2] = v807;
            if (v821)
              v824 = 0;
            else
              v824 = -1;
            v1615 = v824;
            v823.i16[3] = v808;
            v823.i16[4] = v817;
            v823.i16[5] = v812;
            v823.i16[6] = v818;
            v823.i16[7] = v824;
            v1641 = vbslq_s8(v823, _Q25, _Q0);
            _KR38_4 = v1781.i32[0];
            __asm
            {
              FCVT            S5, H0
              FCVT            S13, H2
            }
            *(float *)_Q0.i32 = fmaxf(v763, _S13);
            __asm { FCVT            H0, S0 }
            _S1 = fmaxf(v759, _S5);
            __asm { FCVT            H1, S1 }
            _Q0.i16[1] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[2];
            __asm { FCVT            S10, H1 }
            _S1 = fmaxf(v769, _S10);
            __asm { FCVT            H1, S1 }
            _Q0.i16[2] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[3];
            __asm { FCVT            S12, H1 }
            _S1 = fmaxf(v775, _S12);
            __asm { FCVT            H1, S1 }
            _Q0.i16[3] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[4];
            __asm { FCVT            S31, H1 }
            _S1 = fmaxf(_S28, _S31);
            __asm { FCVT            H1, S1 }
            _Q0.i16[4] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[5];
            __asm { FCVT            S29, H1 }
            _S1 = fmaxf(v781, _S29);
            __asm { FCVT            H1, S1 }
            _Q0.i16[5] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[6];
            __asm { FCVT            S4, H1 }
            _S1 = fmaxf(_S26, _S4);
            __asm { FCVT            H1, S1 }
            _Q0.i16[6] = LOWORD(_S1);
            LOWORD(_S1) = v1781.i16[7];
            __asm { FCVT            S20, H1 }
            *(float *)_Q1.i32 = fmaxf(v797, _S20);
            __asm { FCVT            H1, S1 }
            _Q0.i16[7] = _Q1.i16[0];
            _Q1.i16[0] = v764;
            v842.i16[0] = v764;
            _Q1.i16[1] = v760;
            _Q1.i16[2] = v770;
            _Q1.i16[3] = v776;
            _Q1.i16[4] = v787;
            _Q1.i16[5] = v782;
            _Q1.i16[6] = v792;
            _Q1.i16[7] = v798;
            v1781 = vbslq_s8(_Q1, _Q6, _Q0);
            _KR3C_4 = v1789.i32[0];
            __asm { FCVT            S8, H0 }
            *(float *)_Q0.i32 = fmaxf(_S14, _S8);
            __asm
            {
              FCVT            H0, S0
              FCVT            S30, H2
            }
            *(float *)_Q1.i32 = fmaxf(v1743, _S30);
            __asm { FCVT            H22, S1 }
            _Q22.i16[1] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[2];
            __asm { FCVT            S25, H0 }
            *(float *)_Q0.i32 = fmaxf(*(float *)_D24.i32, _S25);
            __asm { FCVT            H0, S0 }
            _Q22.i16[2] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[3];
            __asm { FCVT            S19, H0 }
            *(float *)_Q0.i32 = fmaxf(_S17, _S19);
            __asm { FCVT            H0, S0 }
            _Q22.i16[3] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[4];
            __asm { FCVT            S18, H0 }
            *(float *)_Q0.i32 = fmaxf(v1736, _S18);
            __asm { FCVT            H0, S0 }
            _Q22.i16[4] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[5];
            __asm { FCVT            S17, H0 }
            *(float *)_Q0.i32 = fmaxf(_S23, _S17);
            __asm { FCVT            H0, S0 }
            _Q22.i16[5] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[6];
            __asm { FCVT            S6, H0 }
            *(float *)_Q0.i32 = fmaxf(v1740, _S6);
            __asm { FCVT            H0, S0 }
            _Q22.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1789.i16[7];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(_S16, _S2);
            __asm { FCVT            H0, S0 }
            _Q22.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v724;
            _D24.i16[0] = v724;
            _Q0.i16[1] = v721;
            _Q0.i16[2] = v729;
            _Q0.i16[3] = v734;
            _Q0.i16[4] = v744;
            _Q0.i16[5] = v739;
            _Q0.i16[6] = v749;
            _Q0.i16[7] = v754;
            v1789 = vbslq_s8(_Q0, _Q7, _Q22);
            _KR40_4 = v1785.i32[0];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1755, _S7);
            __asm
            {
              FCVT            H0, S0
              FCVT            S16, H1
            }
            _S7 = fmaxf(v1778, *(float *)_D16.i32);
            __asm { FCVT            H23, S7 }
            _Q23.i16[1] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[2];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1757, _S7);
            __asm { FCVT            H0, S0 }
            _Q23.i16[2] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[3];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1746, _S7);
            __asm { FCVT            H0, S0 }
            _Q23.i16[3] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[4];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1749, _S7);
            __asm { FCVT            H0, S0 }
            _Q23.i16[4] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[5];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1771, _S7);
            __asm { FCVT            H0, S0 }
            _Q23.i16[5] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[6];
            __asm { FCVT            S7, H0 }
            *(float *)_Q0.i32 = fmaxf(v1753, _S7);
            __asm { FCVT            H0, S0 }
            _Q23.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1785.i16[7];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1774, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q23.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v1564;
            _D16.i16[0] = v1564;
            _Q0.i16[1] = v1767;
            _Q0.i16[2] = v1763;
            _Q0.i16[3] = v1751;
            _Q0.i16[4] = v709;
            _Q0.i16[5] = v704;
            _Q0.i16[6] = v714;
            _Q0.i16[7] = v715;
            v1785 = vbslq_s8(_Q0, _Q15, _Q23);
            if (v811 <= v1562)
              v863 = 0;
            else
              v863 = -1;
            if (v815 <= v1567)
              v864 = 0;
            else
              v864 = -1;
            if (v1526 <= v1560)
              v865 = 0;
            else
              v865 = -1;
            v1568 = v865;
            if (v1760 <= v1551)
              v866 = 0;
            else
              v866 = -1;
            v1565 = v866;
            if (v1496 <= v1597)
              v867 = 0;
            else
              v867 = -1;
            if (v1494 <= v1594)
              v868 = 0;
            else
              v868 = -1;
            if (v1492 <= v1591)
              v869 = 0;
            else
              v869 = -1;
            v1598 = v869;
            if (v1490 <= v1588)
              v870 = 0;
            else
              v870 = -1;
            v1595 = v870;
            if (v1503 <= _S29)
              v871 = 0;
            else
              v871 = -1;
            if (_S28 <= _S31)
              v872 = 0;
            else
              v872 = -1;
            if (_S26 <= _S4)
              v873 = 0;
            else
              v873 = -1;
            if (v1499 <= _S20)
              v874 = 0;
            else
              v874 = -1;
            v1592 = v874;
            if (v1528 <= _S5)
              v875 = 0;
            else
              v875 = -1;
            if (v1533 <= _S13)
              v876 = 0;
            else
              v876 = -1;
            if (v1530 <= _S10)
              v877 = 0;
            else
              v877 = -1;
            if (v1520 <= _S12)
              v878 = 0;
            else
              v878 = -1;
            if (v1730 <= _S17)
              v879 = 0;
            else
              v879 = -1;
            if (v1736 <= _S18)
              v880 = 0;
            else
              v880 = -1;
            if (v1740 <= _S6)
              v881 = 0;
            else
              v881 = -1;
            if (v1733 <= _S2)
              v882 = 0;
            else
              v882 = -1;
            if (_S14 <= _S8)
              v883 = 0;
            else
              v883 = -1;
            if (v1743 <= _S30)
              v884 = 0;
            else
              v884 = -1;
            if (v1487 <= _S25)
              v885 = 0;
            else
              v885 = -1;
            _S0 = fmaxf(v1494, v1510);
            _S2 = fmaxf(v1496, v1518);
            _S19 = fmaxf(v1492, v1512);
            _S23 = fmaxf(v1490, v1516);
            __asm
            {
              FCVT            H2, S2
              FCVT            H25, S0
            }
            _Q25.i16[1] = LOWORD(_S2);
            _S0 = fmaxf(v815, v1514);
            _S2 = fmaxf(v811, v1524);
            v1589 = fmaxf(v1526, v1522);
            _S6 = fmaxf(v1528, v1541);
            _S17 = fmaxf(v1533, v1537);
            __asm
            {
              FCVT            H18, S6
              FCVT            H6, S17
            }
            _Q6.i16[1] = _H18;
            __asm { FCVT            H3, S19 }
            _Q25.i16[2] = _H3;
            _S3 = fmaxf(v1530, v1543);
            __asm { FCVT            H3, S3 }
            _Q6.i16[2] = LOWORD(_S3);
            _S3 = fmaxf(v1520, v1539);
            __asm { FCVT            H3, S3 }
            _Q6.i16[3] = LOWORD(_S3);
            _S3 = fmaxf(_S28, v1535);
            __asm { FCVT            H4, S23 }
            _Q25.i16[3] = _H4;
            __asm { FCVT            H3, S3 }
            _Q6.i16[4] = LOWORD(_S3);
            __asm { FCVT            H0, S0 }
            _Q25.i16[4] = LOWORD(_S0);
            _S0 = fmaxf(v1503, v1549);
            __asm { FCVT            H0, S0 }
            _Q6.i16[5] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v901 = 0;
            else
              v901 = -1;
            _S0 = fmaxf(_S26, v1547);
            __asm { FCVT            H0, S0 }
            _Q6.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(v1499, v1545);
            __asm { FCVT            H0, S0 }
            _Q6.i16[7] = LOWORD(_S0);
            _S0 = fmaxf(_S14, v1604);
            _S3 = fmaxf(v1743, v1601);
            if (_NF ^ _VF | _ZF)
              v906 = 0;
            else
              v906 = -1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H7, S3
            }
            _Q7.i16[1] = _H0;
            if (_NF ^ _VF | _ZF)
              v908 = 0;
            else
              v908 = -1;
            _S0 = fmaxf(v1487, v1606);
            __asm { FCVT            H0, S0 }
            _Q7.i16[2] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v910 = 0;
            else
              v910 = -1;
            _S0 = fmaxf(v1485, v1608);
            __asm { FCVT            H0, S0 }
            _Q7.i16[3] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v912 = 0;
            else
              v912 = -1;
            _S0 = fmaxf(v1736, v1603);
            __asm { FCVT            H0, S0 }
            _Q7.i16[4] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v914 = 0;
            else
              v914 = -1;
            _S0 = fmaxf(v1730, v1613);
            __asm { FCVT            H0, S0 }
            _Q7.i16[5] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v916 = 0;
            else
              v916 = -1;
            _S0 = fmaxf(v1740, v1611);
            __asm { FCVT            H0, S0 }
            _Q7.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(v1733, v1610);
            __asm { FCVT            H0, S0 }
            _Q7.i16[7] = LOWORD(_S0);
            _S0 = fmaxf(v1755, v1651);
            _S3 = fmaxf(v1778, v1647);
            __asm
            {
              FCVT            H0, S0
              FCVT            H15, S3
            }
            _Q15.i16[1] = LOWORD(_S0);
            _S0 = fmaxf(v1757, v1649);
            __asm { FCVT            H2, S2 }
            _Q25.i16[5] = _H2;
            __asm { FCVT            H0, S0 }
            _Q15.i16[2] = LOWORD(_S0);
            _S0 = v1589;
            __asm { FCVT            H0, S0 }
            _Q25.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(v1746, v1653);
            __asm { FCVT            H0, S0 }
            _Q15.i16[3] = LOWORD(_S0);
            _S0 = fmaxf(v1749, v1645);
            v926.i16[0] = v1617;
            v926.i16[1] = v1580;
            __asm { FCVT            H0, S0 }
            _Q15.i16[4] = LOWORD(_S0);
            v927.i16[0] = v864;
            v927.i16[1] = v863;
            v928.i16[0] = v868;
            v928.i16[1] = v867;
            if (_NF ^ _VF | _ZF)
              v929 = 0;
            else
              v929 = -1;
            v930.i16[0] = v872;
            v930.i16[1] = v871;
            v930.i16[2] = v873;
            _S5 = fmaxf(v1771, v1655);
            v932.i16[0] = v876;
            v932.i16[1] = v875;
            v932.i16[2] = v877;
            v932.i16[3] = v878;
            __asm { FCVT            H5, S5 }
            _Q15.i16[5] = LOWORD(_S5);
            v933.i16[0] = v880;
            v933.i16[1] = v879;
            v933.i16[2] = v881;
            v933.i16[3] = v882;
            _S18 = fmaxf(v1753, v1657);
            v935.i16[0] = v884;
            v935.i16[1] = v883;
            v935.i16[2] = v885;
            v935.i16[3] = v901;
            __asm { FCVT            H18, S18 }
            _Q15.i16[6] = LOWORD(_S18);
            v936.i16[0] = v908;
            v936.i16[1] = v906;
            v936.i16[2] = v910;
            v936.i16[3] = v912;
            _S20 = fmaxf(v1760, v1599);
            v938.i16[0] = v916;
            v938.i16[1] = v914;
            v938.i16[2] = v929;
            if (_NF ^ _VF | _ZF)
              v939 = 0;
            else
              v939 = -1;
            v938.i16[3] = v939;
            __asm { FCVT            H20, S20 }
            _Q25.i16[7] = _H20;
            _S20 = fmaxf(v1774, v1659);
            __asm { FCVT            H20, S20 }
            _Q15.i16[7] = LOWORD(_S20);
            v942 = vbslq_s8((int8x16_t)vmovl_s16(v938), (int8x16_t)v1667, v1715);
            v930.i16[3] = v1592;
            v928.i16[2] = v1598;
            v928.i16[3] = v1595;
            v927.i16[2] = v1568;
            v927.i16[3] = v1565;
            v926.i16[2] = v1619;
            v926.i16[3] = v1615;
            v943 = (int8x16_t)vmovl_s16(v926);
            v1724 = vbslq_s8(v943, v1700, vbslq_s8((int8x16_t)vmovl_s16(v927), (int8x16_t)v1676, v1724));
            v620 = vbslq_s8(v943, (int8x16_t)v1676, v1700);
            v822.i16[1] = v1639;
            v822.i16[2] = v1631;
            v822.i16[3] = v1627;
            v944 = (int8x16_t)vmovl_s16(v822);
            v624 = vbslq_s8(v944, v1703, vbslq_s8((int8x16_t)vmovl_s16(v928), (int8x16_t)v1679, v1663));
            v619 = vbslq_s8(v944, (int8x16_t)v1679, v1703);
            v944.i16[0] = v1637;
            v944.i16[1] = v1621;
            v944.i16[2] = v1635;
            v944.i16[3] = v1633;
            v945 = (int8x16_t)vmovl_s16(*(int16x4_t *)v944.i8);
            v1718 = vbslq_s8(v945, v1706, vbslq_s8((int8x16_t)vmovl_s16(v930), (int8x16_t)v1683, v1718));
            v618 = vbslq_s8(v945, (int8x16_t)v1683, v1706);
            v945.i16[0] = v1572;
            v945.i16[1] = v1574;
            v945.i16[2] = v1570;
            v842.i16[1] = v1623;
            v945.i16[3] = v1576;
            v842.i16[2] = v1625;
            v842.i16[3] = v1629;
            v946 = (int8x16_t)vmovl_s16(v842);
            v1721 = vbslq_s8(v946, v1712, vbslq_s8((int8x16_t)vmovl_s16(v932), (int8x16_t)v1685, v1721));
            _Q1 = vbslq_s8(v946, (int8x16_t)v1685, v1712);
            v947 = (int8x16_t)vmovl_s16(*(int16x4_t *)v945.i8);
            v626 = vbslq_s8(v947, v1694, vbslq_s8((int8x16_t)vmovl_s16(v933), (int8x16_t)v1670, v1643));
            _Q4 = vbslq_s8(v947, (int8x16_t)v1670, v1694);
            _D16.i16[1] = v1767;
            _D24.i16[1] = v1586;
            _D24.i16[2] = v1584;
            _D24.i16[3] = v1582;
            v948 = (int8x16_t)vmovl_s16(_D24);
            v625 = vbslq_s8(v948, v1697, vbslq_s8((int8x16_t)vmovl_s16(v935), (int8x16_t)v1673, v1661));
            v621 = vbslq_s8(v948, (int8x16_t)v1673, v1697);
            v948.i16[0] = v1557;
            v948.i16[1] = v704;
            v948.i16[2] = v1555;
            v948.i16[3] = v1553;
            v949 = (int8x16_t)vmovl_s16(*(int16x4_t *)v948.i8);
            v1727 = vbslq_s8(v949, v1688, vbslq_s8((int8x16_t)vmovl_s16(v936), (int8x16_t)v1665, v1727));
            _Q18 = v1641;
            v623 = vbslq_s8(v949, (int8x16_t)v1665, v1688);
            _D16.i16[2] = v1763;
            _D16.i16[3] = v1751;
            v950 = vmovl_s16(_D16);
            v1715 = vbslq_s8((int8x16_t)v950, v1691, v942);
            v622 = vbslq_s8((int8x16_t)v950, (int8x16_t)v1667, v1691);
            v950.i64[0] = 0x100000001;
            v950.i64[1] = 0x100000001;
            v628 = vaddq_s32(v1683, v950);
            v629 = vaddq_s32(v1679, v950);
            v630 = vaddq_s32(v1676, v950);
            v627 = vaddq_s32(v1685, v950);
            v631 = vaddq_s32(v1673, v950);
            v632 = vaddq_s32(v1670, v950);
            v633 = vaddq_s32(v1667, v950);
            v634 = vaddq_s32(v1665, v950);
            v614 = v1578 + v1483;
            v615 = v1709 - 1;
          }
          while (v1709 != 1);
          *(int8x16_t *)v1881 = _Q1;
          v1882 = v618;
          v1883 = v619;
          v1884 = v620;
          v1885 = v621;
          v1886 = _Q4;
          v1887 = v622;
          v1888 = v623;
          *(int8x16_t *)__p = v1721;
          v1866 = v1718;
          v1867 = v624;
          v1868 = v1724;
          v1869 = v625;
          v1870 = v626;
          v1871 = v1715;
          HIWORD(_S0) = v1727.i16[1];
          v1872 = v1727;
          v5 = v1309;
          v615 = v1481;
          if (v1309 < 1)
            goto LABEL_843;
        }
        v1148 = 0;
        do
        {
          LOWORD(_S0) = *(_WORD *)(v614 + 2 * v1148);
          v1829[0] = _Q6;
          v1829[1] = _Q25;
          v1829[2] = _Q7;
          v1829[3] = _Q15;
          _Q1.i16[0] = *((_WORD *)v1829 + (v1148 & 0x1F));
          __asm
          {
            FCVT            S2, H0
            FCVT            S3, H1
          }
          if (_S2 <= _S3)
          {
            v1828[0] = v1781;
            v1828[1] = _Q18;
            v1828[2] = v1789;
            v1828[3] = v1785;
            _Q4.i16[0] = *((_WORD *)v1828 + (v1148 & 0x1F));
            __asm { FCVT            S5, H4 }
            if (_S2 >= _S3)
              *(float *)_Q1.i32 = _S0;
            if (_S2 < _S5)
              _S0 = *(float *)_Q4.i32;
            v1824 = v1781;
            v1825 = _Q18;
            v1826 = v1789;
            v1827 = v1785;
            v1824.i16[v1148 & 0x1F] = LOWORD(_S0);
            v1785 = v1827;
            v1789 = v1826;
            HIWORD(_S0) = v1824.i16[1];
            _Q18 = v1825;
            v1781 = v1824;
            v1820 = _Q6;
            v1821 = _Q25;
            v1822 = _Q7;
            v1823 = _Q15;
            v1820.i16[v1148 & 0x1F] = _Q1.i16[0];
            v1153 = v615;
            if (_S2 <= _S5)
              v1153 = *((_DWORD *)__p + v1148);
            _Q7 = v1822;
            _Q15 = v1823;
            _Q6 = v1820;
            _Q25 = v1821;
            *((_DWORD *)__p + v1148) = v1153;
            v1151 = *((_DWORD *)v1881 + v1148);
          }
          else
          {
            v1816 = v1781;
            v1817 = _Q18;
            v1818 = v1789;
            v1819 = v1785;
            v1816.i16[v1148 & 0x1F] = _Q1.i16[0];
            v1785 = v1819;
            v1789 = v1818;
            _Q4.i16[1] = v1816.i16[1];
            _Q18 = v1817;
            v1781 = v1816;
            if (_S2 < _S3)
              _S0 = *(float *)_Q1.i32;
            v1812 = _Q6;
            v1813 = _Q25;
            v1814 = _Q7;
            v1815 = _Q15;
            v1812.i16[v1148 & 0x1F] = LOWORD(_S0);
            _Q7 = v1814;
            _Q15 = v1815;
            _Q6 = v1812;
            _Q25 = v1813;
            *((_DWORD *)__p + v1148) = *((_DWORD *)v1881 + v1148);
            v1151 = v615;
          }
          *((_DWORD *)v1881 + v1148++) = v1151;
        }
        while (v5 != v1148);
        goto LABEL_843;
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        v17 = v1 + 2 * v4;
        v18 = v15 - 1;
        if (v15 <= 1)
        {
          v1896 = 0u;
          v1895 = 0u;
          v1894 = 0u;
          v1893 = 0u;
          v1892 = 0u;
          v1891 = 0u;
          v1890 = 0u;
          v1889 = 0u;
          v1888 = 0u;
          v1887 = 0u;
          v1886 = 0u;
          v1885 = 0u;
          v1884 = 0u;
          v1883 = 0u;
          v1882 = 0u;
          *(_OWORD *)v1881 = 0u;
          v1880 = 0u;
          v1879 = 0u;
          v1878 = 0u;
          v1877 = 0u;
          v1876 = 0u;
          v1875 = 0u;
          v952.i64[0] = 0x400040004000400;
          v952.i64[1] = 0x400040004000400;
          v1745 = v952;
          v1759 = v952;
          v1874 = 0u;
          v1748 = v952;
          v1873 = 0u;
          v1750 = v952;
          v1754 = v952;
          v1872 = 0u;
          v1756 = v952;
          v1871 = 0u;
          v1752 = v952;
          v1762 = v952;
          v1870 = 0u;
          v1765 = v952;
          v1869 = 0u;
          v1784 = v952;
          v1769 = v952;
          v1868 = 0u;
          v1776 = v952;
          v1867 = 0u;
          v1773 = v952;
          v1780 = v952;
          v1866 = 0u;
          _Q31.i64[0] = 0x400040004000400;
          _Q31.i64[1] = 0x400040004000400;
          *(_OWORD *)__p = 0u;
          _Q0.i64[0] = 0x400040004000400;
          _Q0.i64[1] = 0x400040004000400;
          v1788 = _Q0;
        }
        else
        {
          v1305 = v6;
          v1306 = v7;
          v19.i64[0] = 0x400040004000400;
          v19.i64[1] = 0x400040004000400;
          v1745 = v19;
          v19.i8[1] = 0;
          v19.i8[3] = 0;
          v19.i8[5] = 0;
          v19.i8[7] = 0;
          v19.i8[9] = 0;
          v19.i8[11] = 0;
          v19.i8[13] = 0;
          v19.i8[15] = 0;
          v1585 = v19;
          v1308 = v5;
          v1311 = 2 * v14;
          v1307 = v15 - 1;
          v1573 = v19;
          v1575 = v19;
          v1579 = v19;
          v1581 = v19;
          v1583 = v19;
          v20 = 0uLL;
          v1563 = v19;
          v21 = 0uLL;
          v22 = 0uLL;
          v23 = 0uLL;
          v24 = 0uLL;
          v25 = 0uLL;
          v26 = 0uLL;
          v27 = 0uLL;
          v28 = 0uLL;
          v1566 = v19;
          v1569 = v19;
          v1571 = v19;
          v1577 = v19;
          v1558 = v19;
          v1561 = v19;
          v1554 = v19;
          v1556 = v19;
          v1550 = v19;
          v1552 = v19;
          v1546 = v19;
          v1548 = v19;
          v1542 = v19;
          v1544 = v19;
          v1540 = v19;
          v1559 = v19;
          v1538 = (int32x4_t)v19;
          v1536 = (int32x4_t)v19;
          v1534 = (int32x4_t)v19;
          v1532 = (int32x4_t)v19;
          v1531 = (int32x4_t)v19;
          v1529 = (int32x4_t)v19;
          v1527 = (int32x4_t)v19;
          v1525 = (int32x4_t)v19;
          v29 = 0uLL;
          v1523 = (int32x4_t)v19;
          v1521 = (int32x4_t)v19;
          v1519 = (int32x4_t)v19;
          v1517 = (int32x4_t)v19;
          v1513 = (int32x4_t)v19;
          v1515 = (int32x4_t)v19;
          v1511 = (int32x4_t)v19;
          v19.i64[0] = 0x400040004000400;
          v19.i64[1] = 0x400040004000400;
          v1759 = v19;
          v1748 = v19;
          v1750 = v19;
          v1754 = v19;
          v1756 = v19;
          v1752 = v19;
          v1762 = v19;
          v1765 = v19;
          v1784 = v19;
          v1769 = v19;
          v1776 = v19;
          v1773 = v19;
          v1780 = v19;
          _Q31.i64[0] = 0x400040004000400;
          _Q31.i64[1] = 0x400040004000400;
          v1788 = v19;
          do
          {
            v1742 = v29;
            v1498 = v18;
            v1500 = v20;
            v1501 = v21;
            v1502 = v22;
            v1504 = v23;
            v1505 = v24;
            v1506 = v25;
            v1507 = v26;
            v1508 = v27;
            v1509 = v28;
            _Q0 = *(_OWORD *)v17;
            _H1 = WORD1(*(_OWORD *)v17);
            __asm { FCVT            S24, H1 }
            _KR00_4 = v1745.i32[0];
            __asm { FCVT            S1, H1 }
            v1419 = _S1;
            v1331 = _S24;
            _S1 = fmaxf(_S24, _S1);
            __asm
            {
              FCVT            H2, S1
              FCVT            S4, H0
            }
            v1636 = _S4;
            __asm { FCVT            S1, H3 }
            v1416 = _S1;
            _S1 = fmaxf(_S4, _S1);
            __asm { FCVT            H4, S1 }
            _Q4.i16[1] = _H2;
            _H2 = WORD2(*(_QWORD *)v17);
            __asm { FCVT            S5, H2 }
            v1634 = _S5;
            _H2 = v1745.i16[2];
            __asm { FCVT            S1, H2 }
            v1414 = _S1;
            _S2 = fmaxf(_S5, _S1);
            __asm { FCVT            H2, S2 }
            _Q4.i16[2] = LOWORD(_S2);
            LOWORD(_S2) = v1745.i16[3];
            __asm { FCVT            S1, H2 }
            v1412 = _S1;
            LOWORD(_S2) = HIWORD(*(_QWORD *)v17);
            __asm { FCVT            S2, H2 }
            v1624 = _S2;
            _S2 = fmaxf(_S2, _S1);
            __asm { FCVT            H2, S2 }
            _Q4.i16[3] = LOWORD(_S2);
            LOWORD(_S2) = *(_QWORD *)(v17 + 8);
            __asm { FCVT            S5, H2 }
            v1593 = _S5;
            LOWORD(_S2) = v1745.i16[4];
            __asm { FCVT            S1, H2 }
            v1402 = _S1;
            _S2 = fmaxf(_S5, _S1);
            __asm { FCVT            H2, S2 }
            _Q4.i16[4] = LOWORD(_S2);
            LOWORD(_S2) = WORD1(*(_QWORD *)(v17 + 8));
            __asm { FCVT            S5, H2 }
            v1596 = _S5;
            LOWORD(_S2) = v1745.i16[5];
            __asm { FCVT            S1, H2 }
            v1400 = _S1;
            _S2 = fmaxf(_S5, _S1);
            __asm { FCVT            H2, S2 }
            _Q4.i16[5] = LOWORD(_S2);
            LOWORD(_S2) = v1745.i16[6];
            __asm { FCVT            S1, H2 }
            v1398 = _S1;
            LOWORD(_S2) = WORD6(*(_OWORD *)v17);
            __asm { FCVT            S2, H2 }
            v1616 = _S2;
            _S2 = fmaxf(_S2, _S1);
            __asm { FCVT            H2, S2 }
            _Q4.i16[6] = LOWORD(_S2);
            LOWORD(_Q0) = HIWORD(*(_OWORD *)v17);
            __asm { FCVT            S1, H0 }
            v1620 = _S1;
            LOWORD(_Q0) = v1745.i16[7];
            __asm { FCVT            S0, H0 }
            v1396 = *(float *)&_Q0;
            *(float *)&_Q0 = fmaxf(_S1, *(float *)&_Q0);
            __asm { FCVT            H0, S0 }
            _Q4.i16[7] = _Q0;
            _KR04_4 = v1788.i32[0];
            __asm { FCVT            S3, H0 }
            v1484 = _S3;
            _Q0 = *(_OWORD *)(v17 + 112);
            LOWORD(_S2) = WORD1(_Q0);
            __asm { FCVT            S2, H2 }
            v1720 = _S2;
            if (_S2 <= _S3)
              v68 = 0;
            else
              v68 = -1;
            v1497 = v68;
            __asm { FCVT            S3, H5 }
            v1478 = _S3;
            __asm { FCVT            S2, H0 }
            v1723 = _S2;
            if (_S2 <= _S3)
              v71 = 0;
            else
              v71 = -1;
            v1475 = v71;
            _H2 = v1788.i16[2];
            __asm { FCVT            S3, H2 }
            v1480 = _S3;
            _H2 = WORD2(_Q0);
            __asm { FCVT            S1, H2 }
            v1648 = _S1;
            if (_S1 <= _S3)
              v76 = 0;
            else
              v76 = -1;
            v1495 = v76;
            _H2 = v1788.i16[3];
            __asm { FCVT            S3, H2 }
            v1482 = _S3;
            _H2 = WORD3(_Q0);
            __asm { FCVT            S2, H2 }
            v1672 = _S2;
            if (_S2 <= _S3)
              v81 = 0;
            else
              v81 = -1;
            v1493 = v81;
            _H2 = v1788.i16[5];
            __asm { FCVT            S3, H2 }
            v1491 = _S3;
            _H2 = WORD5(_Q0);
            __asm { FCVT            S2, H2 }
            v1430 = _S2;
            if (_S2 <= _S3)
              v86 = 0;
            else
              v86 = -1;
            v1489 = v86;
            _H2 = v1788.i16[4];
            __asm { FCVT            S3, H2 }
            v1477 = _S3;
            _H2 = WORD4(_Q0);
            __asm { FCVT            S2, H2 }
            v1711 = _S2;
            if (_S2 <= _S3)
              v91 = 0;
            else
              v91 = -1;
            v1479 = v91;
            _H2 = v1788.i16[6];
            __asm { FCVT            S3, H2 }
            v1486 = _S3;
            _H2 = WORD6(_Q0);
            __asm { FCVT            S2, H2 }
            v1666 = _S2;
            if (_S2 <= _S3)
              v96 = 0;
            else
              v96 = -1;
            v1476 = v96;
            _H2 = v1788.i16[7];
            __asm { FCVT            S2, H2 }
            v1488 = _S2;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S0, H0 }
            v1664 = _S0;
            if (_S0 <= _S2)
              v101 = 0;
            else
              v101 = -1;
            v1717 = v101;
            _H0 = _Q31.i16[1];
            __asm { FCVT            S3, H0 }
            v1459 = _S3;
            _Q0 = *(_OWORD *)(v17 + 96);
            _H2 = WORD1(_Q0);
            __asm { FCVT            S2, H2 }
            v1669 = _S2;
            if (_S2 <= _S3)
              v107 = 0;
            else
              v107 = -1;
            v1714 = v107;
            __asm { FCVT            S2, H31 }
            v1458 = _S2;
            __asm { FCVT            S1, H0 }
            v1660 = _S1;
            if (_S1 <= _S2)
              v110 = 0;
            else
              v110 = -1;
            v1418 = v110;
            _H2 = _Q31.i16[2];
            __asm { FCVT            S3, H2 }
            v1465 = _S3;
            _H2 = WORD2(_Q0);
            __asm { FCVT            S1, H2 }
            v1662 = _S1;
            if (_S1 <= _S3)
              v115 = 0;
            else
              v115 = -1;
            v1708 = v115;
            _H2 = _Q31.i16[3];
            __asm { FCVT            S3, H2 }
            v1463 = _S3;
            _H2 = WORD3(_Q0);
            __asm { FCVT            S1, H2 }
            v1658 = _S1;
            if (_S1 <= _S3)
              v120 = 0;
            else
              v120 = -1;
            v1705 = v120;
            _H2 = _Q31.i16[5];
            __asm { FCVT            S3, H2 }
            v1468 = _S3;
            _H2 = WORD5(_Q0);
            __asm { FCVT            S1, H2 }
            v1654 = _S1;
            if (_S1 <= _S3)
              v125 = 0;
            else
              v125 = -1;
            v1702 = v125;
            _H2 = _Q31.i16[4];
            __asm { FCVT            S3, H2 }
            v1457 = _S3;
            _H2 = WORD4(_Q0);
            __asm { FCVT            S1, H2 }
            v1656 = _S1;
            if (_S1 <= _S3)
              v130 = 0;
            else
              v130 = -1;
            v1699 = v130;
            _H2 = _Q31.i16[6];
            __asm { FCVT            S3, H2 }
            v1464 = _S3;
            _H2 = WORD6(_Q0);
            __asm { FCVT            S1, H2 }
            v1652 = _S1;
            if (_S1 <= _S3)
              v135 = 0;
            else
              v135 = -1;
            v1696 = v135;
            _H2 = _Q31.i16[7];
            __asm { FCVT            S2, H2 }
            v1469 = _S2;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S0, H0 }
            v1650 = _S0;
            if (_S0 <= _S2)
              v140 = 0;
            else
              v140 = -1;
            v1693 = v140;
            _KR08_4 = v1780.i32[0];
            __asm { FCVT            S21, H0 }
            v1436 = _S21;
            _Q0 = *(_OWORD *)(v17 + 80);
            _H2 = WORD1(_Q0);
            __asm { FCVT            S1, H2 }
            v1644 = _S1;
            if (_S1 <= _S21)
              v146 = 0;
            else
              v146 = -1;
            v1690 = v146;
            __asm { FCVT            S2, H28 }
            v1434 = _S2;
            __asm { FCVT            S1, H0 }
            v1642 = _S1;
            LOWORD(_S2) = v1780.i16[2];
            __asm { FCVT            S21, H2 }
            v1439 = _S21;
            if (_NF ^ _VF | _ZF)
              v150 = 0;
            else
              v150 = -1;
            v1423 = v150;
            _H2 = WORD2(_Q0);
            __asm { FCVT            S1, H2 }
            v1640 = _S1;
            _H2 = v1780.i16[3];
            __asm { FCVT            S21, H2 }
            v1440 = _S21;
            if (_NF ^ _VF | _ZF)
              v155 = 0;
            else
              v155 = -1;
            v1687 = v155;
            _H2 = WORD3(_Q0);
            __asm { FCVT            S1, H2 }
            v1638 = _S1;
            _H2 = v1780.i16[5];
            __asm { FCVT            S21, H2 }
            v1445 = _S21;
            if (_NF ^ _VF | _ZF)
              v160 = 0;
            else
              v160 = -1;
            v1684 = v160;
            _H2 = WORD5(_Q0);
            __asm { FCVT            S1, H2 }
            v1726 = _S1;
            _H2 = v1780.i16[4];
            __asm { FCVT            S22, H2 }
            v1435 = _S22;
            if (_NF ^ _VF | _ZF)
              v165 = 0;
            else
              v165 = -1;
            v1682 = v165;
            _H2 = WORD4(_Q0);
            __asm { FCVT            S1, H2 }
            v1732 = _S1;
            _H2 = v1780.i16[6];
            __asm { FCVT            S22, H2 }
            v1442 = _S22;
            if (_NF ^ _VF | _ZF)
              v170 = 0;
            else
              v170 = -1;
            v1678 = v170;
            _H2 = WORD6(_Q0);
            __asm { FCVT            S1, H2 }
            v1729 = _S1;
            _H2 = v1780.i16[7];
            __asm { FCVT            S2, H2 }
            v1441 = _S2;
            if (_NF ^ _VF | _ZF)
              v175 = 0;
            else
              v175 = -1;
            v1675 = v175;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S0, H0 }
            v1646 = _S0;
            _KR0C_4 = v1773.i32[0];
            __asm { FCVT            S1, H0 }
            v1426 = _S1;
            if (_NF ^ _VF | _ZF)
              v180 = 0;
            else
              v180 = -1;
            v1433 = v180;
            v181 = *(_OWORD *)(v17 + 64);
            _H2 = WORD1(v181);
            __asm { FCVT            S2, H2 }
            v1738 = _S2;
            if (_S2 <= _S1)
              v184 = 0;
            else
              v184 = -1;
            v1448 = v184;
            __asm { FCVT            S1, H6 }
            v1422 = _S1;
            __asm { FCVT            S2, H0 }
            v1735 = _S2;
            if (_S2 <= _S1)
              v187 = 0;
            else
              v187 = -1;
            v1431 = v187;
            _H2 = v1773.i16[2];
            __asm { FCVT            S1, H2 }
            v1424 = _S1;
            _H2 = WORD2(v181);
            __asm { FCVT            S9, H2 }
            if (_S9 <= _S1)
              v192 = 0;
            else
              v192 = -1;
            v1447 = v192;
            _H2 = v1773.i16[3];
            __asm { FCVT            S1, H2 }
            v1425 = _S1;
            _H2 = WORD3(v181);
            __asm { FCVT            S15, H2 }
            v1587 = _S15;
            if (_S15 <= _S1)
              v197 = 0;
            else
              v197 = -1;
            v1446 = v197;
            _H2 = v1773.i16[5];
            __asm { FCVT            S3, H2 }
            v1429 = _S3;
            _H2 = WORD5(v181);
            __asm { FCVT            S14, H2 }
            v1600 = _S14;
            if (_S14 <= _S3)
              v202 = 0;
            else
              v202 = -1;
            v1438 = v202;
            _H2 = v1773.i16[4];
            __asm { FCVT            S1, H2 }
            v1421 = _S1;
            _H2 = WORD4(v181);
            __asm { FCVT            S13, H2 }
            v1609 = _S13;
            if (_S13 <= _S1)
              v207 = 0;
            else
              v207 = -1;
            v1437 = v207;
            _H2 = v1773.i16[6];
            __asm { FCVT            S1, H2 }
            v1428 = _S1;
            _H2 = WORD6(v181);
            __asm { FCVT            S12, H2 }
            v1602 = _S12;
            _H2 = v1773.i16[7];
            __asm { FCVT            S1, H2 }
            v1427 = _S1;
            _H0 = HIWORD(v181);
            if (_NF ^ _VF | _ZF)
              v215 = 0;
            else
              v215 = -1;
            v1444 = v215;
            __asm { FCVT            S11, H0 }
            _KR10_4 = v1776.i32[0];
            __asm { FCVT            S1, H0 }
            v1410 = _S1;
            _Q0 = *(_OWORD *)(v17 + 48);
            v1326 = v17;
            _H2 = WORD1(_Q0);
            __asm { FCVT            S25, H2 }
            if (_NF ^ _VF | _ZF)
              v222 = 0;
            else
              v222 = -1;
            v1443 = v222;
            v1590 = _S25;
            if (_S25 <= _S1)
              v223 = 0;
            else
              v223 = -1;
            v1452 = v223;
            __asm { FCVT            S1, H5 }
            v1405 = _S1;
            __asm { FCVT            S10, H0 }
            v1607 = _S10;
            _H2 = v1776.i16[2];
            __asm { FCVT            S1, H2 }
            v1409 = _S1;
            _H2 = WORD2(_Q0);
            __asm { FCVT            S8, H2 }
            if (_NF ^ _VF | _ZF)
              v230 = 0;
            else
              v230 = -1;
            _H2 = v1776.i16[3];
            __asm { FCVT            S1, H2 }
            v1407 = _S1;
            _H2 = WORD3(_Q0);
            __asm { FCVT            S30, H2 }
            if (_NF ^ _VF | _ZF)
              v235 = 0;
            else
              v235 = -1;
            v1466 = v235;
            v1612 = _S30;
            _H2 = v1776.i16[5];
            __asm { FCVT            S1, H2 }
            v1411 = _S1;
            _H2 = WORD5(_Q0);
            __asm { FCVT            S29, H2 }
            if (_NF ^ _VF | _ZF)
              v240 = 0;
            else
              v240 = -1;
            v1470 = v240;
            v1628 = _S29;
            _H2 = v1776.i16[4];
            __asm { FCVT            S1, H2 }
            v1404 = _S1;
            _H2 = WORD4(_Q0);
            __asm { FCVT            S27, H2 }
            if (_NF ^ _VF | _ZF)
              v245 = 0;
            else
              v245 = -1;
            v1462 = v245;
            v1630 = _S27;
            _H2 = v1776.i16[6];
            __asm { FCVT            S1, H2 }
            v1408 = _S1;
            _H2 = WORD6(_Q0);
            __asm { FCVT            S26, H2 }
            if (_NF ^ _VF | _ZF)
              v250 = 0;
            else
              v250 = -1;
            v1461 = v250;
            v1632 = _S26;
            _H2 = v1776.i16[7];
            __asm { FCVT            S1, H2 }
            v1406 = _S1;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S23, H0 }
            if (_NF ^ _VF | _ZF)
              v255 = 0;
            else
              v255 = -1;
            v1394 = v255;
            v1626 = _S23;
            _KR14_4 = v1769.i32[0];
            __asm { FCVT            S1, H0 }
            v1390 = _S1;
            _Q0 = *(_OWORD *)(v17 + 32);
            _H2 = WORD1(_Q0);
            __asm { FCVT            S22, H2 }
            if (_NF ^ _VF | _ZF)
              v261 = 0;
            else
              v261 = -1;
            v1460 = v261;
            if (_S22 <= _S1)
              v262 = 0;
            else
              v262 = -1;
            v1474 = v262;
            __asm { FCVT            S1, H3 }
            v1387 = _S1;
            __asm { FCVT            S21, H0 }
            v1370 = _S22;
            v1371 = _S21;
            _H2 = v1769.i16[2];
            __asm { FCVT            S1, H2 }
            v1388 = _S1;
            _H2 = WORD2(_Q0);
            __asm { FCVT            S20, H2 }
            if (_NF ^ _VF | _ZF)
              v269 = 0;
            else
              v269 = -1;
            v1365 = _S20;
            _H2 = v1769.i16[3];
            __asm { FCVT            S1, H2 }
            v1392 = _S1;
            _H2 = WORD3(_Q0);
            __asm { FCVT            S19, H2 }
            if (_NF ^ _VF | _ZF)
              v274 = 0;
            else
              v274 = -1;
            v1473 = v274;
            v1363 = _S19;
            _H2 = v1769.i16[5];
            __asm { FCVT            S1, H2 }
            v1393 = _S1;
            _H2 = WORD5(_Q0);
            __asm { FCVT            S17, H2 }
            if (_NF ^ _VF | _ZF)
              v279 = 0;
            else
              v279 = -1;
            v1472 = v279;
            v1622 = _S17;
            _H2 = v1769.i16[4];
            __asm { FCVT            S1, H2 }
            v1386 = _S1;
            _H2 = WORD4(_Q0);
            __asm { FCVT            S18, H2 }
            if (_NF ^ _VF | _ZF)
              v284 = 0;
            else
              v284 = -1;
            v1605 = _S18;
            _H2 = v1769.i16[6];
            __asm { FCVT            S1, H2 }
            v1391 = _S1;
            _H2 = WORD6(_Q0);
            __asm { FCVT            S16, H2 }
            if (_NF ^ _VF | _ZF)
              v289 = 0;
            else
              v289 = -1;
            v1471 = v289;
            v1618 = _S16;
            _H2 = v1769.i16[7];
            __asm { FCVT            S1, H2 }
            v1389 = _S1;
            _H0 = HIWORD(_Q0);
            __asm { FCVT            S7, H0 }
            if (_NF ^ _VF | _ZF)
              v294 = 0;
            else
              v294 = -1;
            v1467 = v294;
            v1614 = _S7;
            _KR18_4 = v1765.i32[0];
            __asm { FCVT            S0, H0 }
            v1376 = _S0;
            if (_NF ^ _VF | _ZF)
              v297 = 0;
            else
              v297 = -1;
            if (_S24 <= _S0)
              v298 = 0;
            else
              v298 = -1;
            v1453 = v298;
            __asm { FCVT            S2, H1 }
            v1374 = _S2;
            _H0 = v1765.i16[2];
            __asm { FCVT            S2, H0 }
            v1377 = _S2;
            if (_NF ^ _VF | _ZF)
              v302 = 0;
            else
              v302 = -1;
            _H0 = v1765.i16[3];
            __asm { FCVT            S2, H0 }
            v1378 = _S2;
            if (_NF ^ _VF | _ZF)
              v305 = 0;
            else
              v305 = -1;
            v1456 = v305;
            _H0 = v1765.i16[5];
            __asm { FCVT            S0, H0 }
            v1381 = _S0;
            if (_NF ^ _VF | _ZF)
              v308 = 0;
            else
              v308 = -1;
            v1455 = v308;
            _H0 = v1765.i16[4];
            __asm { FCVT            S0, H0 }
            v1375 = _S0;
            if (_NF ^ _VF | _ZF)
              v311 = 0;
            else
              v311 = -1;
            v1395 = v311;
            _H0 = v1765.i16[6];
            __asm { FCVT            S24, H0 }
            v1380 = _S24;
            v314.i16[0] = v302;
            v1454 = v302;
            v314.i16[1] = v298;
            if (_NF ^ _VF | _ZF)
              v315 = 0;
            else
              v315 = -1;
            v1451 = v315;
            v314.i16[2] = v305;
            v314.i16[3] = v308;
            _H2 = v1765.i16[7];
            __asm { FCVT            S24, H2 }
            v1379 = _S24;
            v314.i16[4] = v315;
            v314.i16[5] = v311;
            if (_NF ^ _VF | _ZF)
              v318 = 0;
            else
              v318 = -1;
            v1450 = v318;
            v314.i16[6] = v318;
            if (v1620 <= _S24)
              v319 = 0;
            else
              v319 = -1;
            v1449 = v319;
            v314.i16[7] = v319;
            v1745 = vbslq_s8(v314, v1765, _Q4);
            _KR1C_4 = v1748.i32[0];
            __asm { FCVT            S0, H0 }
            v1766 = _S0;
            _S0 = fmaxf(_S22, _S0);
            __asm
            {
              FCVT            H0, S0
              FCVT            S1, H2
            }
            v1368 = _S1;
            *(float *)_Q1.i32 = fmaxf(_S21, _S1);
            __asm { FCVT            H1, S1 }
            _Q1.i16[1] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[2];
            __asm { FCVT            S0, H0 }
            v1366 = _S0;
            _S0 = fmaxf(_S20, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[2] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[3];
            __asm { FCVT            S0, H0 }
            v1360 = _S0;
            _S0 = fmaxf(_S19, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[3] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[4];
            __asm { FCVT            S0, H0 }
            v1356 = _S0;
            _S0 = fmaxf(_S18, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[4] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[5];
            __asm { FCVT            S0, H0 }
            v1351 = _S0;
            _S0 = fmaxf(_S17, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[5] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[6];
            __asm { FCVT            S0, H0 }
            v1348 = _S0;
            _S0 = fmaxf(_S16, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[6] = LOWORD(_S0);
            LOWORD(_S0) = v1748.i16[7];
            __asm { FCVT            S0, H0 }
            v1341 = _S0;
            *(float *)_Q0.i32 = fmaxf(_S7, _S0);
            __asm { FCVT            H0, S0 }
            _Q1.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v269;
            _Q0.i16[1] = v262;
            _Q0.i16[2] = v274;
            _Q0.i16[3] = v279;
            _Q0.i16[4] = v289;
            _Q0.i16[5] = v284;
            _Q0.i16[6] = v294;
            _Q0.i16[7] = v297;
            v1748 = vbslq_s8(_Q0, v1769, _Q1);
            _KR20_4 = v1750.i32[0];
            __asm { FCVT            S0, H0 }
            v1770 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S25, *(float *)_Q0.i32);
            __asm
            {
              FCVT            H0, S0
              FCVT            S1, H2
            }
            v1343 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S10, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q1.i16[1] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[2];
            __asm { FCVT            S0, H0 }
            v1339 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S8, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[2] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[3];
            __asm { FCVT            S0, H0 }
            v1327 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S30, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[3] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[4];
            __asm { FCVT            S0, H0 }
            v1334 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S27, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[4] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[5];
            __asm { FCVT            S0, H0 }
            v1336 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S29, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[5] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[6];
            __asm { FCVT            S0, H0 }
            v1332 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S26, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1750.i16[7];
            __asm { FCVT            S0, H0 }
            v1329 = *(float *)_Q0.i32;
            *(float *)_Q0.i32 = fmaxf(_S23, *(float *)_Q0.i32);
            __asm { FCVT            H0, S0 }
            _Q1.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v230;
            v1432 = v230;
            _Q0.i16[1] = v223;
            _Q0.i16[2] = v235;
            _Q0.i16[3] = v240;
            _Q0.i16[4] = v250;
            _Q0.i16[5] = v245;
            _Q0.i16[6] = v255;
            _Q0.i16[7] = v261;
            v1750 = vbslq_s8(_Q0, v1776, _Q1);
            _KR24_4 = v1754.i32[0];
            __asm
            {
              FCVT            S3, H0
              FCVT            S1, H2
            }
            v1321 = *(float *)_Q1.i32;
            v1322 = _S3;
            *(float *)_Q0.i32 = fmaxf(v1735, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            *(float *)_Q1.i32 = fmaxf(v1738, _S3);
            __asm { FCVT            H1, S1 }
            _Q0.i16[1] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[2];
            __asm { FCVT            S1, H1 }
            v1319 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S9, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[2] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[3];
            __asm { FCVT            S1, H1 }
            v1316 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S15, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[3] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[4];
            __asm { FCVT            S1, H1 }
            v1324 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S13, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[4] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[5];
            __asm { FCVT            S1, H1 }
            v1314 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S14, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[5] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[6];
            __asm { FCVT            S1, H1 }
            v1313 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S12, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[6] = _Q1.i16[0];
            _Q1.i16[0] = v1754.i16[7];
            __asm { FCVT            S1, H1 }
            v1312 = *(float *)_Q1.i32;
            *(float *)_Q1.i32 = fmaxf(_S11, *(float *)_Q1.i32);
            __asm { FCVT            H1, S1 }
            _Q0.i16[7] = _Q1.i16[0];
            _Q1.i16[0] = v1431;
            _Q1.i16[1] = v184;
            _Q1.i16[2] = v192;
            _Q1.i16[3] = v197;
            _Q1.i16[4] = v207;
            _Q1.i16[5] = v202;
            _Q1.i16[6] = v215;
            _Q1.i16[7] = v222;
            v1754 = vbslq_s8(_Q1, v1773, _Q0);
            _KR28_4 = v1756.i32[0];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1644, *(float *)_Q1.i32);
            __asm
            {
              FCVT            H0, S0
              FCVT            S3, H2
            }
            *(float *)_Q1.i32 = fmaxf(v1642, _S3);
            __asm { FCVT            H4, S1 }
            _Q4.i16[1] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[2];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1640, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[2] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[3];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1638, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[3] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[4];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1732, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[4] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[5];
            __asm { FCVT            S1, H0 }
            v1777 = *(float *)_Q1.i32;
            *(float *)_Q0.i32 = fmaxf(v1726, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[5] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[6];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1729, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1756.i16[7];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1646, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q4.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v1423;
            _Q0.i16[1] = v1690;
            _Q0.i16[2] = v1687;
            _Q0.i16[3] = v1684;
            _Q0.i16[4] = v1678;
            _Q0.i16[5] = v1682;
            _Q0.i16[6] = v1675;
            _Q0.i16[7] = v180;
            v1756 = vbslq_s8(_Q0, v1780, _Q4);
            _KR2C_4 = v1752.i32[0];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1669, _S2);
            __asm
            {
              FCVT            H0, S0
              FCVT            S3, H1
            }
            *(float *)_Q4.i32 = fmaxf(v1660, _S3);
            __asm { FCVT            H18, S4 }
            _Q18.i16[1] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[2];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1662, _S2);
            __asm { FCVT            H0, S0 }
            _Q18.i16[2] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[3];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1658, _S2);
            __asm { FCVT            H0, S0 }
            _Q18.i16[3] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[4];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1656, _S2);
            __asm { FCVT            H0, S0 }
            _Q18.i16[4] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[5];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1654, _S2);
            __asm { FCVT            H0, S0 }
            _Q18.i16[5] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[6];
            __asm { FCVT            S2, H0 }
            *(float *)_Q0.i32 = fmaxf(v1652, _S2);
            __asm { FCVT            H0, S0 }
            _Q18.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1752.i16[7];
            __asm { FCVT            S1, H0 }
            *(float *)_Q0.i32 = fmaxf(v1650, *(float *)_Q1.i32);
            __asm { FCVT            H0, S0 }
            _Q18.i16[7] = _Q0.i16[0];
            _Q0.i16[0] = v1418;
            _Q0.i16[1] = v1714;
            _Q0.i16[2] = v1708;
            _Q0.i16[3] = v1705;
            _Q0.i16[4] = v1699;
            _Q0.i16[5] = v1702;
            _Q0.i16[6] = v1696;
            _Q0.i16[7] = v1693;
            v1752 = vbslq_s8(_Q0, _Q31, _Q18);
            _Q0 = *(_OWORD *)(v1326 + 16);
            _Q18.i16[0] = WORD1(_Q0);
            __asm { FCVT            S28, H18 }
            _KR30_4 = v1759.i32[0];
            __asm { FCVT            S21, H18 }
            *(float *)_Q18.i32 = fmaxf(_S28, _S21);
            __asm
            {
              FCVT            H18, S18
              FCVT            S27, H0
              FCVT            S20, H1
            }
            _S19 = fmaxf(_S27, _S20);
            __asm { FCVT            H16, S19 }
            _Q16.i16[1] = _Q18.i16[0];
            _Q18.i16[0] = WORD2(*(_QWORD *)(v1326 + 16));
            __asm { FCVT            S14, H18 }
            _Q18.i16[0] = v1759.i16[2];
            __asm { FCVT            S17, H18 }
            *(float *)_Q18.i32 = fmaxf(_S14, _S17);
            __asm { FCVT            H18, S18 }
            _Q16.i16[2] = _Q18.i16[0];
            _Q18.i16[0] = v1759.i16[3];
            __asm { FCVT            S7, H18 }
            _Q18.i16[0] = HIWORD(*(_QWORD *)(v1326 + 16));
            __asm { FCVT            S15, H18 }
            *(float *)_Q18.i32 = fmaxf(_S15, _S7);
            __asm { FCVT            H18, S18 }
            _Q16.i16[3] = _Q18.i16[0];
            _Q18.i16[0] = *(_QWORD *)(v1326 + 24);
            __asm { FCVT            S12, H18 }
            _Q18.i16[0] = v1759.i16[4];
            __asm { FCVT            S6, H18 }
            *(float *)_Q18.i32 = fmaxf(_S12, _S6);
            __asm { FCVT            H18, S18 }
            _Q16.i16[4] = _Q18.i16[0];
            _Q18.i16[0] = WORD1(*(_QWORD *)(v1326 + 24));
            __asm { FCVT            S29, H18 }
            _Q18.i16[0] = v1759.i16[5];
            __asm { FCVT            S5, H18 }
            *(float *)_Q18.i32 = fmaxf(_S29, _S5);
            __asm { FCVT            H18, S18 }
            _Q16.i16[5] = _Q18.i16[0];
            _Q18.i16[0] = v1759.i16[6];
            __asm { FCVT            S4, H18 }
            _Q18.i16[0] = WORD6(_Q0);
            __asm { FCVT            S10, H18 }
            *(float *)_Q18.i32 = fmaxf(_S10, _S4);
            __asm { FCVT            H18, S18 }
            _Q16.i16[6] = _Q18.i16[0];
            LOWORD(_Q0) = HIWORD(_Q0);
            __asm { FCVT            S13, H0 }
            LOWORD(_Q0) = v1759.i16[7];
            __asm { FCVT            S3, H0 }
            *(float *)_Q18.i32 = fmaxf(_S13, _S3);
            __asm { FCVT            H18, S18 }
            _Q16.i16[7] = _Q18.i16[0];
            _KR34_4 = v1784.i32[0];
            __asm { FCVT            S22, H18 }
            if (_S28 <= _S22)
              v374 = 0;
            else
              v374 = -1;
            v1384 = v374;
            __asm { FCVT            S18, H1 }
            _H19 = v1784.i16[2];
            __asm { FCVT            S23, H19 }
            if (_NF ^ _VF | _ZF)
              v378 = 0;
            else
              v378 = -1;
            _H19 = v1784.i16[3];
            __asm { FCVT            S24, H19 }
            if (_NF ^ _VF | _ZF)
              v381 = 0;
            else
              v381 = -1;
            _H19 = v1784.i16[5];
            __asm { FCVT            S30, H19 }
            if (_NF ^ _VF | _ZF)
              v384 = 0;
            else
              v384 = -1;
            _H19 = v1784.i16[4];
            __asm { FCVT            S19, H19 }
            if (_NF ^ _VF | _ZF)
              v387 = 0;
            else
              v387 = -1;
            v1385 = v387;
            _H25 = v1784.i16[6];
            __asm { FCVT            S25, H25 }
            if (_NF ^ _VF | _ZF)
              v390 = 0;
            else
              v390 = -1;
            _H2 = v1762.i16[0];
            _H26 = v1784.i16[7];
            __asm { FCVT            S26, H26 }
            if (_NF ^ _VF | _ZF)
              v394 = 0;
            else
              v394 = -1;
            v395.i16[0] = v378;
            v1382 = v378;
            v395.i16[1] = v374;
            v395.i16[2] = v381;
            v395.i16[3] = v384;
            v395.i16[4] = v390;
            v395.i16[5] = v387;
            v395.i16[6] = v394;
            if (_S13 <= _S26)
              v396 = 0;
            else
              v396 = -1;
            v1383 = v396;
            v395.i16[7] = v396;
            v1759 = vbslq_s8(v395, v1784, _Q16);
            if (_S29 <= _S5)
              v397 = 0;
            else
              v397 = -1;
            v1364 = v397;
            if (_S12 <= _S6)
              v398 = 0;
            else
              v398 = -1;
            if (_S10 <= _S4)
              v399 = 0;
            else
              v399 = -1;
            v1362 = v399;
            if (_S13 <= _S3)
              v400 = 0;
            else
              v400 = -1;
            if (_S28 <= _S21)
              v401 = 0;
            else
              v401 = -1;
            v1358 = v401;
            v1359 = v400;
            if (_S27 <= _S20)
              v402 = 0;
            else
              v402 = -1;
            if (_S14 <= _S17)
              v403 = 0;
            else
              v403 = -1;
            v1373 = v403;
            if (_S15 <= _S7)
              v404 = 0;
            else
              v404 = -1;
            v1372 = v404;
            if (v1596 <= v1400)
              v405 = 0;
            else
              v405 = -1;
            v1354 = v405;
            v1355 = v402;
            if (v1593 <= v1402)
              v406 = 0;
            else
              v406 = -1;
            v1353 = v406;
            if (v1616 <= v1398)
              v407 = 0;
            else
              v407 = -1;
            v1403 = v407;
            if (v1620 <= v1396)
              v408 = 0;
            else
              v408 = -1;
            v1401 = v408;
            if (v1331 <= v1419)
              v409 = 0;
            else
              v409 = -1;
            v1350 = v409;
            if (v1636 <= v1416)
              v410 = 0;
            else
              v410 = -1;
            if (v1634 <= v1414)
              v411 = 0;
            else
              v411 = -1;
            v1420 = v411;
            if (v1624 <= v1412)
              v412 = 0;
            else
              v412 = -1;
            v1417 = v412;
            if (v1622 <= v1351)
              v413 = 0;
            else
              v413 = -1;
            v1346 = v413;
            v1347 = v410;
            if (v1605 <= v1356)
              v414 = 0;
            else
              v414 = -1;
            v1345 = v414;
            if (v1618 <= v1348)
              v415 = 0;
            else
              v415 = -1;
            v1415 = v415;
            if (v1614 <= v1341)
              v416 = 0;
            else
              v416 = -1;
            v1413 = v416;
            if (v1370 <= v1766)
              v417 = 0;
            else
              v417 = -1;
            v1342 = v417;
            if (v1371 <= v1368)
              v418 = 0;
            else
              v418 = -1;
            if (v1365 <= v1366)
              v419 = 0;
            else
              v419 = -1;
            v1399 = v419;
            if (v1363 <= v1360)
              v420 = 0;
            else
              v420 = -1;
            v1397 = v420;
            if (v1628 <= v1336)
              v421 = 0;
            else
              v421 = -1;
            v1337 = v421;
            v1338 = v418;
            if (v1630 <= v1334)
              v422 = 0;
            else
              v422 = -1;
            if (v1632 <= v1332)
              v423 = 0;
            else
              v423 = -1;
            if (v1626 <= v1329)
              v424 = 0;
            else
              v424 = -1;
            v1367 = v424;
            v1369 = v423;
            if (v1590 <= v1770)
              v425 = 0;
            else
              v425 = -1;
            v1333 = v425;
            v1335 = v422;
            if (v1607 <= v1343)
              v426 = 0;
            else
              v426 = -1;
            if (_S8 <= v1339)
              v427 = 0;
            else
              v427 = -1;
            v1361 = v427;
            if (v1612 <= v1327)
              v428 = 0;
            else
              v428 = -1;
            v1357 = v428;
            if (v1600 <= v1314)
              v429 = 0;
            else
              v429 = -1;
            v1328 = v429;
            v1330 = v426;
            if (v1609 <= v1324)
              v430 = 0;
            else
              v430 = -1;
            if (v1602 <= v1313)
              v431 = 0;
            else
              v431 = -1;
            v1352 = v431;
            if (_S11 <= v1312)
              v432 = 0;
            else
              v432 = -1;
            v1349 = v432;
            if (v1738 <= v1322)
              v433 = 0;
            else
              v433 = -1;
            v1323 = v433;
            v1325 = v430;
            if (v1735 <= v1321)
              v434 = 0;
            else
              v434 = -1;
            if (_S9 <= v1319)
              v435 = 0;
            else
              v435 = -1;
            v1344 = v435;
            if (v1587 <= v1316)
              v436 = 0;
            else
              v436 = -1;
            v1340 = v436;
            if (v1726 <= v1777)
              v437 = 0;
            else
              v437 = -1;
            v1320 = v437;
            _H0 = v1762.i16[1];
            __asm
            {
              FCVT            S1, H0
              FCVT            S5, H2
            }
            _S0 = fmaxf(v1723, _S5);
            __asm { FCVT            H5, S0 }
            _S0 = fmaxf(v1720, _S1);
            __asm { FCVT            H0, S0 }
            _Q5.i16[1] = LOWORD(_S0);
            _S28 = fmaxf(_S28, _S22);
            _S27 = fmaxf(_S27, _S18);
            if (_NF ^ _VF | _ZF)
              v446 = 0;
            else
              v446 = -1;
            _H0 = v1762.i16[2];
            __asm { FCVT            S18, H0 }
            v1315 = _S18;
            _S0 = fmaxf(v1648, _S18);
            __asm { FCVT            H0, S0 }
            _Q5.i16[2] = LOWORD(_S0);
            LOWORD(_S0) = v1762.i16[3];
            __asm { FCVT            S18, H0 }
            v1318 = _S18;
            _S0 = fmaxf(v1672, _S18);
            __asm { FCVT            H0, S0 }
            _Q5.i16[3] = LOWORD(_S0);
            LOWORD(_S0) = v1762.i16[4];
            __asm { FCVT            S18, H0 }
            _S0 = fmaxf(v1711, _S18);
            __asm { FCVT            H0, S0 }
            _Q5.i16[4] = LOWORD(_S0);
            _S23 = fmaxf(_S14, _S23);
            _S24 = fmaxf(_S15, _S24);
            _S19 = fmaxf(_S12, _S19);
            _S29 = fmaxf(_S29, _S30);
            if (_NF ^ _VF | _ZF)
              v458 = 0;
            else
              v458 = -1;
            v1317 = v458;
            _H0 = v1762.i16[5];
            __asm { FCVT            S30, H0 }
            _S0 = fmaxf(v1430, _S30);
            __asm { FCVT            H0, S0 }
            _Q5.i16[5] = LOWORD(_S0);
            LOWORD(_S0) = v1762.i16[6];
            __asm { FCVT            S15, H0 }
            _S0 = fmaxf(v1666, _S15);
            __asm { FCVT            H0, S0 }
            _Q5.i16[6] = LOWORD(_S0);
            LOWORD(_S0) = v1762.i16[7];
            __asm { FCVT            S2, H0 }
            _S0 = fmaxf(v1664, _S2);
            __asm { FCVT            H0, S0 }
            _Q5.i16[7] = LOWORD(_S0);
            _S25 = fmaxf(_S10, _S25);
            _S10 = fmaxf(_S13, _S26);
            _S0 = fmaxf(v1331, v1376);
            _S4 = fmaxf(v1636, v1374);
            __asm
            {
              FCVT            H0, S0
              FCVT            H26, S4
            }
            _Q26.i16[1] = LOWORD(_S0);
            _S0 = fmaxf(v1634, v1377);
            __asm { FCVT            H0, S0 }
            _Q26.i16[2] = LOWORD(_S0);
            _S0 = fmaxf(v1624, v1378);
            _S4 = fmaxf(v1593, v1375);
            _S6 = fmaxf(v1596, v1381);
            __asm { FCVT            H0, S0 }
            _Q26.i16[3] = LOWORD(_S0);
            _S0 = fmaxf(v1616, v1380);
            _S17 = fmaxf(v1620, v1379);
            _S18 = fmaxf(v1370, v1390);
            _S22 = fmaxf(v1371, v1387);
            __asm
            {
              FCVT            H18, S18
              FCVT            H1, S22
            }
            _Q1.i16[1] = LOWORD(_S18);
            _S18 = fmaxf(v1365, v1388);
            __asm { FCVT            H4, S4 }
            _Q26.i16[4] = LOWORD(_S4);
            __asm { FCVT            H4, S18 }
            _Q1.i16[2] = LOWORD(_S4);
            __asm { FCVT            H4, S6 }
            _Q26.i16[5] = LOWORD(_S4);
            _S4 = fmaxf(v1363, v1392);
            __asm { FCVT            H4, S4 }
            _Q1.i16[3] = LOWORD(_S4);
            _S4 = fmaxf(v1605, v1386);
            __asm { FCVT            H4, S4 }
            _Q1.i16[4] = LOWORD(_S4);
            __asm
            {
              FCVT            H4, S28
              FCVT            H6, S27
            }
            _Q6.i16[1] = LOWORD(_S4);
            _S4 = fmaxf(v1622, v1393);
            __asm { FCVT            H4, S4 }
            _Q1.i16[5] = LOWORD(_S4);
            _S4 = fmaxf(v1618, v1391);
            __asm { FCVT            H4, S4 }
            _Q1.i16[6] = LOWORD(_S4);
            _S4 = fmaxf(v1614, v1389);
            __asm { FCVT            H0, S0 }
            _Q26.i16[6] = LOWORD(_S0);
            __asm { FCVT            H0, S4 }
            _Q1.i16[7] = LOWORD(_S0);
            v1769 = _Q1;
            _S0 = fmaxf(v1590, v1410);
            _S4 = fmaxf(v1607, v1405);
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S4
            }
            _Q1.i16[1] = LOWORD(_S0);
            __asm { FCVT            H0, S23 }
            _Q6.i16[2] = LOWORD(_S0);
            _S0 = fmaxf(_S8, v1409);
            __asm { FCVT            H0, S0 }
            _Q1.i16[2] = LOWORD(_S0);
            _S0 = fmaxf(v1612, v1407);
            __asm { FCVT            H0, S0 }
            _Q1.i16[3] = LOWORD(_S0);
            _S0 = fmaxf(v1630, v1404);
            __asm { FCVT            H4, S17 }
            _Q26.i16[7] = LOWORD(_S4);
            v1765 = _Q26;
            __asm { FCVT            H0, S0 }
            _Q1.i16[4] = LOWORD(_S0);
            __asm { FCVT            H0, S24 }
            _Q6.i16[3] = LOWORD(_S0);
            _S0 = fmaxf(v1628, v1411);
            __asm { FCVT            H0, S0 }
            _Q1.i16[5] = LOWORD(_S0);
            _S0 = fmaxf(v1632, v1408);
            __asm { FCVT            H0, S0 }
            _Q1.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(v1626, v1406);
            __asm { FCVT            H4, S19 }
            _Q6.i16[4] = LOWORD(_S4);
            __asm { FCVT            H0, S0 }
            _Q1.i16[7] = LOWORD(_S0);
            v1776 = _Q1;
            _S0 = fmaxf(v1738, v1426);
            _S4 = fmaxf(v1735, v1422);
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S4
            }
            _Q1.i16[1] = LOWORD(_S0);
            __asm { FCVT            H0, S29 }
            _Q6.i16[5] = LOWORD(_S0);
            _S0 = fmaxf(_S9, v1424);
            __asm { FCVT            H0, S0 }
            _Q1.i16[2] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v499 = 0;
            else
              v499 = -1;
            _S0 = fmaxf(v1587, v1425);
            __asm { FCVT            H0, S0 }
            _Q1.i16[3] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v501 = 0;
            else
              v501 = -1;
            _S0 = fmaxf(v1609, v1421);
            __asm { FCVT            H0, S0 }
            _Q1.i16[4] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v503 = 0;
            else
              v503 = -1;
            _S0 = fmaxf(v1600, v1429);
            __asm { FCVT            H0, S0 }
            _Q1.i16[5] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v505 = 0;
            else
              v505 = -1;
            _S0 = fmaxf(v1602, v1428);
            __asm { FCVT            H0, S0 }
            _Q1.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(_S11, v1427);
            __asm { FCVT            H0, S0 }
            _Q1.i16[7] = LOWORD(_S0);
            v1773 = _Q1;
            _S0 = fmaxf(v1644, v1436);
            _S4 = fmaxf(v1642, v1434);
            if (_NF ^ _VF | _ZF)
              v510 = 0;
            else
              v510 = -1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S4
            }
            _Q1.i16[1] = _H0;
            if (_NF ^ _VF | _ZF)
              v513 = 0;
            else
              v513 = -1;
            _S0 = fmaxf(v1640, v1439);
            __asm { FCVT            H0, S0 }
            _Q1.i16[2] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v515 = 0;
            else
              v515 = -1;
            _S0 = fmaxf(v1638, v1440);
            __asm { FCVT            H0, S0 }
            _Q1.i16[3] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v517 = 0;
            else
              v517 = -1;
            _S0 = fmaxf(v1732, v1435);
            __asm { FCVT            H0, S0 }
            _Q1.i16[4] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v519 = 0;
            else
              v519 = -1;
            _S0 = fmaxf(v1726, v1445);
            __asm { FCVT            H0, S0 }
            _Q1.i16[5] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v521 = 0;
            else
              v521 = -1;
            _S0 = fmaxf(v1729, v1442);
            __asm { FCVT            H0, S0 }
            _Q1.i16[6] = LOWORD(_S0);
            _S0 = fmaxf(v1646, v1441);
            __asm { FCVT            H0, S0 }
            _Q1.i16[7] = LOWORD(_S0);
            v1780 = _Q1;
            _S0 = fmaxf(v1669, v1459);
            _S4 = fmaxf(v1660, v1458);
            if (_NF ^ _VF | _ZF)
              v526 = 0;
            else
              v526 = -1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H23, S4
            }
            _Q23.i16[1] = _H0;
            if (_NF ^ _VF | _ZF)
              v529 = 0;
            else
              v529 = -1;
            _S0 = fmaxf(v1662, v1465);
            __asm { FCVT            H0, S0 }
            _Q23.i16[2] = LOWORD(_S0);
            _S0 = fmaxf(v1658, v1463);
            __asm { FCVT            H0, S0 }
            _Q23.i16[3] = LOWORD(_S0);
            _S0 = fmaxf(v1656, v1457);
            __asm { FCVT            H4, S25 }
            _Q6.i16[6] = _H4;
            __asm { FCVT            H0, S0 }
            _Q23.i16[4] = LOWORD(_S0);
            __asm { FCVT            H0, S10 }
            _Q6.i16[7] = LOWORD(_S0);
            v1784 = _Q6;
            _S0 = fmaxf(v1654, v1468);
            __asm { FCVT            H0, S0 }
            _Q23.i16[5] = LOWORD(_S0);
            *(float *)_Q0.i32 = fmaxf(v1652, v1464);
            __asm { FCVT            H0, S0 }
            _Q23.i16[6] = _Q0.i16[0];
            _Q0.i16[0] = v1475;
            v536.i16[0] = v1475;
            _Q0.i16[1] = v1497;
            _Q0.i16[2] = v1495;
            _Q0.i16[3] = v1493;
            _Q0.i16[4] = v1479;
            _Q0.i16[5] = v1489;
            _Q0.i16[6] = v1476;
            _Q0.i16[7] = v1717;
            v1762 = vbslq_s8(_Q0, v1788, _Q5);
            *(float *)_Q0.i32 = fmaxf(v1650, v1469);
            __asm { FCVT            H0, S0 }
            _Q23.i16[7] = _Q0.i16[0];
            *(float *)_Q0.i32 = fmaxf(v1720, v1484);
            __asm { FCVT            H0, S0 }
            _S4 = fmaxf(v1723, v1478);
            __asm { FCVT            H4, S4 }
            _Q4.i16[1] = _Q0.i16[0];
            if (_NF ^ _VF | _ZF)
              v539 = 0;
            else
              v539 = -1;
            _S0 = fmaxf(v1648, v1480);
            __asm { FCVT            H0, S0 }
            _Q4.i16[2] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v541 = 0;
            else
              v541 = -1;
            _S0 = fmaxf(v1672, v1482);
            __asm { FCVT            H0, S0 }
            _Q4.i16[3] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v543 = 0;
            else
              v543 = -1;
            _S0 = fmaxf(v1711, v1477);
            __asm { FCVT            H0, S0 }
            _Q4.i16[4] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v545 = 0;
            else
              v545 = -1;
            _S0 = fmaxf(v1430, v1491);
            __asm { FCVT            H0, S0 }
            _Q4.i16[5] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v547 = 0;
            else
              v547 = -1;
            _S0 = fmaxf(v1666, v1486);
            __asm { FCVT            H0, S0 }
            _Q4.i16[6] = LOWORD(_S0);
            if (_NF ^ _VF | _ZF)
              v549 = 0;
            else
              v549 = -1;
            _S0 = fmaxf(v1664, v1488);
            __asm { FCVT            H0, S0 }
            _Q4.i16[7] = LOWORD(_S0);
            v1788 = _Q4;
            if (_NF ^ _VF | _ZF)
              v551 = 0;
            else
              v551 = -1;
            v552.i16[0] = v398;
            v552.i16[1] = v1364;
            v552.i16[2] = v1362;
            v552.i16[3] = v1359;
            v553.i16[0] = v1355;
            v553.i16[1] = v1358;
            v554.i16[0] = v1353;
            v554.i16[1] = v1354;
            v555.i16[0] = v1347;
            v555.i16[1] = v1350;
            v556.i16[0] = v1345;
            v556.i16[1] = v1346;
            v557.i16[0] = v1338;
            v557.i16[1] = v1342;
            v558.i16[0] = v1335;
            v558.i16[1] = v1337;
            v559.i16[0] = v1330;
            v559.i16[1] = v1333;
            v560.i16[0] = v1325;
            v560.i16[1] = v1328;
            v561.i16[0] = v434;
            v561.i16[1] = v1323;
            v562.i16[0] = v446;
            v562.i16[1] = v1320;
            v563.i16[0] = v503;
            v563.i16[1] = v501;
            v564.i16[0] = v515;
            v564.i16[1] = v513;
            v565.i16[0] = v526;
            v565.i16[1] = v521;
            if (v1648 <= v1315)
              v566 = 0;
            else
              v566 = -1;
            v565.i16[2] = v529;
            v565.i16[3] = v539;
            v567 = vbslq_s8((int8x16_t)vmovl_s16(v565), (int8x16_t)v1517, v1542);
            v564.i16[2] = v517;
            v564.i16[3] = v519;
            v568 = vbslq_s8((int8x16_t)vmovl_s16(v564), (int8x16_t)v1515, v1544);
            v563.i16[2] = v505;
            v563.i16[3] = v510;
            v1739 = vbslq_s8((int8x16_t)vmovl_s16(v563), (int8x16_t)v1521, v1546);
            v562.i16[2] = v1317;
            v562.i16[3] = v499;
            v569 = vbslq_s8((int8x16_t)vmovl_s16(v562), (int8x16_t)v1519, v1548);
            v561.i16[2] = v1344;
            v561.i16[3] = v1340;
            v570 = vbslq_s8((int8x16_t)vmovl_s16(v561), (int8x16_t)v1742, v1550);
            v560.i16[2] = v1352;
            v560.i16[3] = v1349;
            v559.i16[2] = v1361;
            v559.i16[3] = v1357;
            v558.i16[2] = v1369;
            v558.i16[3] = v1367;
            v557.i16[2] = v1399;
            v557.i16[3] = v1397;
            v556.i16[2] = v1415;
            v556.i16[3] = v1413;
            v555.i16[2] = v1420;
            v555.i16[3] = v1417;
            v554.i16[2] = v1403;
            v554.i16[3] = v1401;
            v553.i16[2] = v1373;
            v553.i16[3] = v1372;
            v571.i16[0] = v390;
            v571.i16[1] = v1385;
            v571.i16[2] = v394;
            v571.i16[3] = v1383;
            v572 = (int8x16_t)vmovl_s16(v571);
            v1577 = vbslq_s8(v572, v1579, vbslq_s8((int8x16_t)vmovl_s16(v552), (int8x16_t)v1532, v1577));
            v1579 = vbslq_s8(v572, (int8x16_t)v1532, v1579);
            v573.i16[0] = v1451;
            v573.i16[1] = v1395;
            v572.i16[0] = v1382;
            v572.i16[1] = v1384;
            v572.i16[2] = v381;
            v572.i16[3] = v384;
            v574 = (int8x16_t)vmovl_s16(*(int16x4_t *)v572.i8);
            v1571 = vbslq_s8(v574, v1575, vbslq_s8((int8x16_t)vmovl_s16(v553), (int8x16_t)v1534, v1571));
            v1575 = vbslq_s8(v574, (int8x16_t)v1534, v1575);
            v573.i16[2] = v1450;
            v573.i16[3] = v1449;
            v575 = (int8x16_t)vmovl_s16(v573);
            v1569 = vbslq_s8(v575, v1573, vbslq_s8((int8x16_t)vmovl_s16(v554), (int8x16_t)v1536, v1569));
            v1573 = vbslq_s8(v575, (int8x16_t)v1536, v1573);
            v575.i16[0] = v1454;
            v575.i16[1] = v1453;
            v575.i16[2] = v1456;
            v575.i16[3] = v1455;
            v576 = (int8x16_t)vmovl_s16(*(int16x4_t *)v575.i8);
            v1566 = vbslq_s8(v576, v1585, vbslq_s8((int8x16_t)vmovl_s16(v555), (int8x16_t)v1538, v1566));
            v1585 = vbslq_s8(v576, (int8x16_t)v1538, v1585);
            v576.i16[0] = v1471;
            v576.i16[1] = v284;
            v576.i16[2] = v1467;
            v576.i16[3] = v297;
            v577 = (int8x16_t)vmovl_s16(*(int16x4_t *)v576.i8);
            v1561 = vbslq_s8(v577, v1583, vbslq_s8((int8x16_t)vmovl_s16(v556), (int8x16_t)v1529, v1561));
            v1583 = vbslq_s8(v577, (int8x16_t)v1529, v1583);
            v577.i16[0] = v543;
            v577.i16[1] = v541;
            v577.i16[2] = v545;
            v577.i16[3] = v547;
            v578 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v577.i8), (int8x16_t)v1511, v1559);
            v579.i16[0] = v269;
            v579.i16[1] = v1474;
            v579.i16[2] = v1473;
            v579.i16[3] = v1472;
            v580 = (int8x16_t)vmovl_s16(v579);
            v1558 = vbslq_s8(v580, v1581, vbslq_s8((int8x16_t)vmovl_s16(v557), (int8x16_t)v1531, v1558));
            v1581 = vbslq_s8(v580, (int8x16_t)v1531, v1581);
            v580.i16[0] = v1461;
            v580.i16[1] = v1462;
            v580.i16[2] = v1394;
            v580.i16[3] = v1460;
            v581 = (int8x16_t)vmovl_s16(*(int16x4_t *)v580.i8);
            v1556 = vbslq_s8(v581, v1563, vbslq_s8((int8x16_t)vmovl_s16(v558), (int8x16_t)v1525, v1556));
            v1563 = vbslq_s8(v581, (int8x16_t)v1525, v1563);
            v581.i16[0] = v1437;
            v581.i16[1] = v1438;
            v582.i16[0] = v1432;
            v582.i16[1] = v1452;
            v582.i16[2] = v1466;
            v582.i16[3] = v1470;
            v584 = (int8x16_t)vmovl_s16(v582);
            v1554 = vbslq_s8(v584, v1500, vbslq_s8((int8x16_t)vmovl_s16(v559), (int8x16_t)v1527, v1554));
            v20 = vbslq_s8(v584, (int8x16_t)v1527, v1500);
            v581.i16[2] = v1444;
            v581.i16[3] = v1443;
            v584.i16[0] = v551;
            v584.i16[1] = v549;
            v583 = (int8x16_t)vmovl_s16(*(int16x4_t *)v581.i8);
            v1552 = vbslq_s8(v583, v1502, vbslq_s8((int8x16_t)vmovl_s16(v560), (int8x16_t)v1523, v1552));
            v584.i16[2] = v566;
            v22 = vbslq_s8(v583, (int8x16_t)v1523, v1502);
            if (v1672 <= v1318)
              v585 = 0;
            else
              v585 = -1;
            v584.i16[3] = v585;
            v586 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v584.i8), (int8x16_t)v1513, v1540);
            v587.i16[0] = v1431;
            v587.i16[1] = v1448;
            v587.i16[2] = v1447;
            v587.i16[3] = v1446;
            v588 = (int8x16_t)vmovl_s16(v587);
            v1550 = vbslq_s8(v588, v1501, v570);
            v21 = vbslq_s8(v588, (int8x16_t)v1742, v1501);
            v588.i16[0] = v1678;
            v588.i16[1] = v1682;
            v588.i16[2] = v1675;
            v588.i16[3] = v1433;
            v589 = (int8x16_t)vmovl_s16(*(int16x4_t *)v588.i8);
            v1548 = vbslq_s8(v589, v1505, v569);
            v24 = vbslq_s8(v589, (int8x16_t)v1519, v1505);
            v590.i16[0] = v1699;
            v590.i16[1] = v1702;
            v587.i16[0] = v1423;
            v587.i16[1] = v1690;
            v587.i16[2] = v1687;
            v587.i16[3] = v1684;
            v591 = (int8x16_t)vmovl_s16(v587);
            v1546 = vbslq_s8(v591, v1504, v1739);
            v23 = vbslq_s8(v591, (int8x16_t)v1521, v1504);
            v590.i16[2] = v1696;
            v590.i16[3] = v1693;
            v592 = (int8x16_t)vmovl_s16(v590);
            v1544 = vbslq_s8(v592, v1507, v568);
            v26 = vbslq_s8(v592, (int8x16_t)v1515, v1507);
            v536.i16[1] = v1497;
            v587.i16[0] = v1418;
            v587.i16[1] = v1714;
            v587.i16[2] = v1708;
            v587.i16[3] = v1705;
            v593 = (int8x16_t)vmovl_s16(v587);
            v1542 = vbslq_s8(v593, v1506, v567);
            v25 = vbslq_s8(v593, (int8x16_t)v1517, v1506);
            v587.i16[0] = v1479;
            v587.i16[1] = v1489;
            v536.i16[2] = v1495;
            v587.i16[2] = v1476;
            v587.i16[3] = v1717;
            v594 = (int8x16_t)vmovl_s16(v587);
            v1559 = vbslq_s8(v594, v1509, v578);
            v28 = vbslq_s8(v594, (int8x16_t)v1511, v1509);
            v536.i16[3] = v1493;
            v595 = vmovl_s16(v536);
            _Q31 = _Q23;
            _Q4 = vbslq_s8((int8x16_t)v595, v1508, v586);
            v1540 = _Q4;
            v27 = vbslq_s8((int8x16_t)v595, (int8x16_t)v1513, v1508);
            v595.i64[0] = 0x100000001;
            v595.i64[1] = 0x100000001;
            v1538 = vaddq_s32(v1538, v595);
            v1536 = vaddq_s32(v1536, v595);
            v1534 = vaddq_s32(v1534, v595);
            v1532 = vaddq_s32(v1532, v595);
            v1529 = vaddq_s32(v1529, v595);
            v1531 = vaddq_s32(v1531, v595);
            v1527 = vaddq_s32(v1527, v595);
            v1525 = vaddq_s32(v1525, v595);
            v29 = vaddq_s32(v1742, v595);
            v1523 = vaddq_s32(v1523, v595);
            v1519 = vaddq_s32(v1519, v595);
            v1521 = vaddq_s32(v1521, v595);
            v1517 = vaddq_s32(v1517, v595);
            v1513 = vaddq_s32(v1513, v595);
            v1515 = vaddq_s32(v1515, v595);
            v1511 = vaddq_s32(v1511, v595);
            v17 = v1326 + v1311;
            v18 = v1498 - 1;
          }
          while (v1498 != 1);
          *(int8x16_t *)v1881 = v1585;
          v1882 = v1573;
          v1883 = v1575;
          v1884 = v1579;
          v1885 = v1581;
          v1886 = v1583;
          v1887 = v20;
          v1888 = v1563;
          v1889 = v21;
          v1890 = v22;
          v1891 = v23;
          v1892 = v24;
          v1893 = v25;
          v1894 = v26;
          v1895 = v27;
          v1896 = v28;
          *(int8x16_t *)__p = v1566;
          v1866 = v1569;
          v1867 = v1571;
          v1868 = v1577;
          v1869 = v1558;
          v1870 = v1561;
          v1871 = v1554;
          v1872 = v1556;
          v1873 = v1550;
          v1874 = v1552;
          v1875 = v1546;
          v1876 = v1548;
          v1877 = v1542;
          v1878 = v1544;
          v1879 = _Q4;
          _Q0.i16[1] = v1559.i16[1];
          v1880 = v1559;
          v5 = v1308;
          v18 = v1307;
          v12 = v1305;
          v11 = v1306;
          if (v1308 < 1)
            goto LABEL_843;
        }
        v953 = 0;
        do
        {
          _Q0.i16[0] = *(_WORD *)(v17 + 2 * v953);
          v1863[0] = v1765;
          v1863[1] = v1784;
          v1863[2] = v1769;
          v1863[3] = v1776;
          v1863[4] = v1773;
          v1863[5] = v1780;
          v1863[6] = _Q31;
          HIWORD(_S1) = v1788.i16[1];
          v1863[7] = v1788;
          LOWORD(_S1) = *((_WORD *)v1863 + (v953 & 0x3F));
          __asm
          {
            FCVT            S2, H0
            FCVT            S3, H1
          }
          if (_S2 <= _S3)
          {
            v1862[0] = v1745;
            v1862[1] = v1759;
            v1862[2] = v1748;
            v1862[3] = v1750;
            v1862[4] = v1754;
            v1862[5] = v1756;
            v1862[6] = v1752;
            v1862[7] = v1762;
            _Q4.i16[0] = *((_WORD *)v1862 + (v953 & 0x3F));
            __asm { FCVT            S5, H4 }
            if (_S2 >= _S3)
              _S1 = *(float *)_Q0.i32;
            if (_S2 < _S5)
              _Q0.i32[0] = _Q4.i32[0];
            v1854 = v1745;
            v1855 = v1759;
            v1856 = v1748;
            v1857 = v1750;
            v1858 = v1754;
            v1859 = v1756;
            v1860 = v1752;
            v1861 = v1762;
            v1854.i16[v953 & 0x3F] = _Q0.i16[0];
            v1762 = v1861;
            v1752 = v1860;
            v1756 = v1859;
            v1754 = v1858;
            v1750 = v1857;
            v1748 = v1856;
            v1759 = v1855;
            v1745 = v1854;
            v1846 = v1765;
            v1847 = v1784;
            v1848 = v1769;
            v1849 = v1776;
            v1850 = v1773;
            v1851 = v1780;
            v1852 = _Q31;
            v1853 = v1788;
            v1846.i16[v953 & 0x3F] = LOWORD(_S1);
            v959 = v18;
            if (_S2 <= _S5)
              v959 = *((_DWORD *)__p + v953);
            v1788 = v1853;
            _Q31 = v1852;
            v1780 = v1851;
            v1773 = v1850;
            v1776 = v1849;
            v1769 = v1848;
            v1784 = v1847;
            _Q0.i16[1] = v1846.i16[1];
            v1765 = v1846;
            *((_DWORD *)__p + v953) = v959;
            v957 = *((_DWORD *)v1881 + v953);
          }
          else
          {
            v1838 = v1745;
            v1839 = v1759;
            v1840 = v1748;
            v1841 = v1750;
            v1842 = v1754;
            v1843 = v1756;
            v1844 = v1752;
            v1845 = v1762;
            v1838.i16[v953 & 0x3F] = LOWORD(_S1);
            v1762 = v1845;
            v1752 = v1844;
            v1756 = v1843;
            v1754 = v1842;
            v1750 = v1841;
            v1748 = v1840;
            v1759 = v1839;
            _Q4.i16[1] = v1838.i16[1];
            v1745 = v1838;
            if (_S2 < _S3)
              *(float *)_Q0.i32 = _S1;
            v1830 = v1765;
            v1831 = v1784;
            v1832 = v1769;
            v1833 = v1776;
            v1834 = v1773;
            v1835 = v1780;
            v1836 = _Q31;
            v1837 = v1788;
            v1830.i16[v953 & 0x3F] = _Q0.i16[0];
            v1788 = v1837;
            _Q31 = v1836;
            v1780 = v1835;
            v1773 = v1834;
            v1776 = v1833;
            v1769 = v1832;
            v1784 = v1831;
            _Q0.i16[1] = v1830.i16[1];
            v1765 = v1830;
            *((_DWORD *)__p + v953) = *((_DWORD *)v1881 + v953);
            v957 = v18;
          }
          *((_DWORD *)v1881 + v953++) = v957;
        }
        while (v5 != v953);
        goto LABEL_843;
      default:
        goto LABEL_843;
    }
  }
  v597 = v5;
  v598 = 4 * v5;
  memset_pattern4(v6, &PresampleTopK2::negativeOne, v598);
  memset_pattern4(v12, &PresampleTopK2::negativeOne, v598);
  LOWORD(__p[0]) = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(v1881, v597, __p);
  v1864 = -1025;
  _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(__p, v597, &v1864);
  v601 = __p[0];
  if (v15 >= 1)
  {
    v602 = 0;
    v603 = v16 + 2 * v13;
    v604 = v1881[0];
    do
    {
      for (i = 0; i != v597; ++i)
      {
        LOWORD(_S0) = *(_WORD *)(v603 + 2 * i);
        _H2 = v604[i];
        __asm
        {
          FCVT            S3, H2
          FCVT            S1, H0
        }
        if (_S1 <= _S3)
        {
          LOWORD(_S2) = v601[i];
          __asm { FCVT            S3, H2 }
          if (_S1 >= _S3)
            _S2 = _S0;
          v601[i] = _S2;
          LOWORD(_S2) = v604[i];
          __asm { FCVT            S4, H2 }
          if (_S1 < _S4)
            _S0 = _S2;
          v604[i] = _S0;
          v613 = v602;
          if (_S1 <= _S3)
            v613 = *((_DWORD *)v11 + i);
          *((_DWORD *)v11 + i) = v613;
          v610 = *((_DWORD *)v12 + i);
        }
        else
        {
          v601[i] = _H2;
          LOWORD(_S2) = v604[i];
          __asm { FCVT            S3, H2 }
          if (_S1 < _S3)
            _S0 = _S2;
          v604[i] = _S0;
          *((_DWORD *)v11 + i) = *((_DWORD *)v12 + i);
          v610 = v602;
        }
        *((_DWORD *)v12 + i) = v610;
      }
      ++v602;
      v603 += 2 * v14;
    }
    while (v602 != v15);
    v601 = __p[0];
  }
  if (v601)
  {
    __p[1] = v601;
    operator delete(v601);
  }
  if (v1881[0])
  {
    v1881[1] = v1881[0];
    operator delete(v1881[0]);
  }
}

void sub_248CDB764(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x1060];
  if (STACK[0x1060])
  {
    STACK[0x1068] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEEC2EmRKDF16_(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE11__vallocateB8ne180100Em(a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_248CDB7EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDF16_NS_9allocatorIDF16_EEE11__vallocateB8ne180100Em(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDF16_EEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS5_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDF16_EEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS5_m(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::FlexibleShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this, const TGIE5ModelConfiguration *a2)
{
  cgm::token_generation_inference::ajax::utils *v4;
  std::__fs::filesystem::path *v5;
  _QWORD *ExportedFunctions;
  unsigned __int8 *v7;
  std::__fs::filesystem::path *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  E5RT::ExecutionStreamOperation **v15;
  E5RT::ExecutionStream *v16;
  uint64_t v17;
  E5RT::PrecompiledComputeOpCreateOptions *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  E5RT::ProgramLibrary *v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  E5RT::TensorDescriptor *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  E5RT::TensorDescriptor *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *OutputPorts;
  unsigned __int8 *v38;
  E5RT::TensorDescriptor *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  E5RT::TensorDescriptor *v47;
  uint64_t TensorShape;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  E5RT::TensorDescriptor *v54;
  uint64_t TensorStrides;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  E5RT::ExecuteOptions *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v64[2];
  std::__shared_weak_count *v65;
  E5RT::PrecompiledComputeOpCreateOptions *v66;
  E5RT::ProgramLibrary *v67;
  void *__p[2];
  char v69;
  std::__fs::filesystem::path *v70;
  std::__shared_weak_count *v71;

  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_2519DE470;
  *((_QWORD *)this + 5) = &unk_2519DE4F8;
  v4 = (cgm::token_generation_inference::ajax::utils *)std::string::basic_string[abi:ne180100]<0>(__p, "main");
  cgm::token_generation_inference::ajax::utils::makeGPUAjaxCompilerOptions(v4);
  cgm::token_generation_inference::ajax::utils::makeProgramLibrary((const std::__fs::filesystem::path *)&a2->var1, (const E5RT::E5CompilerOptions *)LOBYTE(a2[2].var1.var0.var0.var1.var0[0]), &v67);
  v5 = v70;
  v70 = 0;
  if (v5)
    (*(void (**)(std::__fs::filesystem::path *))(v5->__pn_.__r_.__value_.__r.__words[0] + 8))(v5);
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v67);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (unsigned __int8 *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = (std::__fs::filesystem::path *)*((_QWORD *)v7 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  v70 = v8;
  v71 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v65 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v65 = 0;
  }
  v64[1] = (uint64_t)v8;
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v65)
  {
    v13 = &v65->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(v66);
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(v66);
  E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(v66);
  v15 = (E5RT::ExecutionStreamOperation **)((char *)this + 48);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  std::shared_ptr<E5RT::ExecutionStreamOperation>::operator=[abi:ne180100]<E5RT::ExecutionStreamOperation,std::default_delete<E5RT::ExecutionStreamOperation>,void>((_QWORD *)this + 6, v64);
  v16 = (E5RT::ExecutionStream *)v64[0];
  v64[0] = 0;
  if (v16)
    v16 = (E5RT::ExecutionStream *)(*(uint64_t (**)(E5RT::ExecutionStream *))(*(_QWORD *)v16 + 8))(v16);
  E5RT::ExecutionStream::CreateExecutionStream(v16);
  std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>((_QWORD *)this + 8, v64);
  v17 = v64[0];
  v64[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v66;
  v66 = 0;
  if (v18)
    (*(void (**)(E5RT::PrecompiledComputeOpCreateOptions *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v71;
  if (v71)
  {
    v20 = (unint64_t *)&v71->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v67;
  v67 = 0;
  if (v22)
    (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v22 + 8))(v22);
  if (v69 < 0)
    operator delete(__p[0]);
  v23 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(*v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v23, (unsigned __int8 *)__p);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v24 + 5));
  v25 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v70);
  v26 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v25) + 24);
  v27 = v71;
  if (v71)
  {
    v28 = (unint64_t *)&v71->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 10) = v26;
  v30 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v30, (unsigned __int8 *)__p);
  if (!v31)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v31 + 5));
  v32 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v70);
  v33 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v32) + 16);
  v34 = v71;
  if (v71)
  {
    v35 = (unint64_t *)&v71->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 11) = v33;
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "out_logits");
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)__p);
  if (!v38)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v38 + 5));
  v39 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v70);
  v40 = *(_QWORD *)(*(_QWORD *)E5RT::TensorDescriptor::GetTensorShape(v39) + 16);
  v41 = v71;
  if (v71)
  {
    v42 = (unint64_t *)&v71->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 12) = v40;
  if (*((char *)&a2[2].var1.var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), a2[2].var1.var0.var0.var0.var0.var1.var0, a2[2].var1.var0.var0.var0.var0.var1.var1);
  }
  else
  {
    v44 = *(_OWORD *)a2[2].var1.var0.var0.var0.var0.var0.var0;
    *((_QWORD *)this + 15) = *((_QWORD *)&a2[2].var1.var0.var0.var0.var0.var1 + 2);
    *(_OWORD *)((char *)this + 104) = v44;
  }
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  v45 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v45, (unsigned __int8 *)__p);
  if (!v46)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v46 + 5));
  v47 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v70);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v47);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 22, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  v49 = v71;
  if (v71)
  {
    v50 = (unint64_t *)&v71->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  v52 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(*((E5RT::ExecutionStreamOperation **)this + 6));
  std::string::basic_string[abi:ne180100]<0>(__p, "in_cached_values_state");
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v52, (unsigned __int8 *)__p);
  if (!v53)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v53 + 5));
  v54 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v70);
  TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v54);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)this + 25, *(const void **)TensorStrides, *(_QWORD *)(TensorStrides + 8), (uint64_t)(*(_QWORD *)(TensorStrides + 8) - *(_QWORD *)TensorStrides) >> 3);
  v56 = v71;
  if (v71)
  {
    v57 = (unint64_t *)&v71->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v69 < 0)
    operator delete(__p[0]);
  *((_BYTE *)this + 224) = 0;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::checkIOTypes(this);
  v59 = (E5RT::ExecuteOptions *)cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(*v15, 2);
  E5RT::ExecuteOptions::Create(v59);
  std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]((uint64_t)this + 160, (__int128 *)__p);
  v60 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v61 = (unint64_t *)((char *)__p[1] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return this;
}

void sub_248CDBEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  void **v26;
  void *v28;
  void *v29;

  v28 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v20 + 208) = v28;
    operator delete(v28);
  }
  v29 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v20 + 184) = v29;
    operator delete(v29);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v23);
  if (*(char *)(v20 + 127) < 0)
    operator delete(*v24);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v21);
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel((cgm::token_generation_inference::ajax::AJAXE5MLModel *)v20);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::checkIOTypes(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  std::__shared_weak_count *v2;
  E5RT::ExecutionStreamOperation **v3;
  E5RT::ExecutionStreamOperation *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *InputPorts;
  _QWORD *v8;
  _QWORD *OutputPorts;
  E5RT::IOPort *v10;
  E5RT::TensorDescriptor *v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  E5RT::IOPort *v15;
  E5RT::TensorDescriptor *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL4 isV4;
  uint64_t TensorShape;
  uint64_t v22;
  _QWORD *v23;
  std::string::size_type v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::runtime_error *v30;
  std::runtime_error *v31;
  std::runtime_error *v32;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  uint64_t v41;
  std::string __p;
  E5RT::ExecutionStreamOperation *v43;
  std::__shared_weak_count *v44;
  std::string v45;

  v4 = (E5RT::ExecutionStreamOperation *)*((_QWORD *)this + 6);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v3 = (E5RT::ExecutionStreamOperation **)((char *)this + 48);
  v43 = v4;
  v44 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_new_token_ids");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)&__p))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v45);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInOutPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_keys_state");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v8, (unsigned __int8 *)&__p))
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v30, &v45);
    __cxa_throw(v30, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values_state");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v8, (unsigned __int8 *)&__p))
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v31, &v45);
    __cxa_throw(v31, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&__p))
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v32, &v45);
    __cxa_throw(v32, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_keys_state");
  v10 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor(v10);
  v11 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_values_state");
  v15 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor(v15);
  v16 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
  v17 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (isV4)
  {
    TensorShape = E5RT::TensorDescriptor::GetTensorShape(v11);
    memset(&v45, 0, sizeof(v45));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v45, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
    v22 = E5RT::TensorDescriptor::GetTensorShape(v16);
    v23 = (_QWORD *)v45.__r_.__value_.__r.__words[0];
    v24 = v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0];
    if (v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0] != *(_QWORD *)(v22 + 8) - *(_QWORD *)v22
      || memcmp(v45.__r_.__value_.__l.__data_, *(const void **)v22, v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]))
    {
      v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v33, "Key shape must match the value shape");
      __cxa_throw(v33, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    if (v24 != 40)
    {
      v34 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "KeyValue cache shape size is not equal to 5");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v34, 1, &__p);
    }
    if (v23[1] != 1)
    {
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Second dimension of kv cache must be 1");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v35, 1, &__p);
    }
    if (v23[3] != *((_QWORD *)this + 10))
    {
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Fourth dimension of kv cache must be equal to max state length");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v36, 1, &__p);
    }
    if (v23[2] != *((_QWORD *)this + 11))
    {
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Third dimension of kv cache must be equal to number of attention heads");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v37, 1, &__p);
    }
    E5RT::TensorDataType::TensorDataType();
    E5RT::TensorDescriptor::GetTensorDataTypeRef(v11);
    if (E5RT::operator!=())
    {
      v39 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Key data type is not Float 16");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v39, 1, &__p);
    }
    E5RT::TensorDescriptor::GetTensorDataType(v16);
    v25 = E5RT::operator!=();
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
    if (v25)
    {
      v40 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Value data type is not Float 16");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v40, 1, &__p);
    }
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v41);
    if (v45.__r_.__value_.__r.__words[0])
    {
      v45.__r_.__value_.__l.__size_ = v45.__r_.__value_.__r.__words[0];
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
    && !isV4)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v45, "checkIOTypes failed, unexpected model version");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v38, 1, &v45);
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_248CDC7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
      if (a19)
      {
        a20 = (uint64_t)a19;
        operator delete(a19);
      }
      std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

char *cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  std::runtime_error *exception;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *p_p;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::runtime_error *v31;
  std::string __p;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;

  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v45, "setKVCacheEntry is only supported for V4 model");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &v45);
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  if (v6 + a2 + *(_QWORD *)(a1 + 144) > *(_QWORD *)(a1 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, "Failed to set kv cache entry, invalid range: ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("(", &v36, &v37);
    std::to_string(&v35, a2);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v35;
    else
      v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    v17 = std::string::append(&v37, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v38, &v39);
    std::to_string(&v34, v6);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v34;
    else
      v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      v20 = v34.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v39, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(")", &v40, &v41);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", tokens processed ", &v41, &v42);
    std::to_string(&v33, *(_QWORD *)(a1 + 144));
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v33;
    else
      v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      v24 = v33.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v42, (const std::string::value_type *)v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("max state length: ", &v43, &v44);
    std::to_string(&__p, *(_QWORD *)(a1 + 80));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v44, (const std::string::value_type *)p_p, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v31, 0, &v45);
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_keys_state");
  v7 = (char *)cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  v9 = v8;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v45, "in_cached_values_state");
  v10 = cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  v12 = v11;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  result = cgm::token_generation_inference::ajax::utils::setKVCacheEntry(v7, v9, v10, v12, (uint64_t **)(a1 + 176), (uint64_t **)(a1 + 200), a2, a3);
  *(_QWORD *)(a1 + 144) += v6;
  return result;
}

void sub_248CDCDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (*(char *)(v62 - 89) < 0)
    operator delete(*(void **)(v62 - 112));
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::`anonymous namespace'::isV4(E5RT::ExecutionStreamOperation **a1)
{
  _QWORD *InputPorts;
  _QWORD *v3;
  _BOOL8 v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(v8, "in_causal_mask");
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)v8))
  {
    v3 = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_position_ids");
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v3, (unsigned __int8 *)__p) != 0;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = 0;
  }
  if (v9 < 0)
    operator delete(v8[0]);
  return v4;
}

void sub_248CDCFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>()
{
  E5RT::IOPort *v0;
  E5RT::MemoryObject *MemoryObjectRef;
  E5RT::BufferObject *v2;
  uint64_t result;
  uint64_t v4;

  v0 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v0);
  v2 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  result = E5RT::BufferObject::GetDataSpan(v2);
  if (!v4)
    return 0;
  return result;
}

char *`non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::setKVCacheEntry(a1 - 40, a2, a3);
}

_QWORD *cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::createKVCacheEntry@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  std::string v13;
  uint64_t v14[3];
  std::string __p;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "createKVCacheEntry is only supported for V4 model");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 0, &__p);
  }
  v6 = a2[1];
  v7 = *(_QWORD *)(a1 + 144);
  if (v6 + *a2 > v7)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *a2;
    __p.__r_.__value_.__r.__words[2] = v6;
    v16 = 0;
    v18 = 0;
    v19 = 7399;
    v17 = v7;
    memset(&v13, 0, sizeof(v13));
    v14[0] = 3;
    v14[1] = (uint64_t)&__p;
    v14[2] = 7399;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&v13, "Failed to create kv cache entry, invalid range: (%z, %z), tokens processed: %z", 78, v14);
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v12, 0, &v13);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_keys_state");
  v8 = cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "in_cached_values_state");
  v9 = cgm::token_generation_inference::ajax::utils::inoutSpan<unsigned char>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return cgm::token_generation_inference::ajax::utils::createKVCacheEntry(v8, v9, (uint64_t **)(a1 + 176), (uint64_t **)(a1 + 200), a2, a3);
}

void sub_248CDD248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::createKVCacheEntry@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::createKVCacheEntry(a1 - 40, a2, a3);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 18);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(uint64_t a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, v2);
  v3 = (void **)v2;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_248CDD324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this, int **a2, uint64_t *a3)
{
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int *v33;
  uint64_t v34;
  int v35;
  const std::string::value_type **v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  uint64_t (***v42)(_QWORD);
  int v43;
  E5RT::ExecuteOptions *v44;
  uint64_t result;
  void *v46;
  unint64_t v47;
  std::runtime_error *exception;
  std::runtime_error *v49;
  std::string v50;
  void *__p[2];
  std::string::size_type v52;
  std::string v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string v58;

  if (*((_BYTE *)this + 224))
    cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward();
  if (*a3 != a3[1]
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v58, "prompt modules are not supported for non-V4 model");
    cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &v58);
  }
  v7 = *a2;
  v6 = a2[1];
  v8 = (char *)v6 - (char *)*a2;
  v9 = *((_QWORD *)this + 18);
  if ((unint64_t)(v9 + (v8 >> 2)) > *((_QWORD *)this + 10))
  {
    v46 = __cxa_allocate_exception(0x18uLL);
    v47 = *((_QWORD *)this + 10);
    std::string::basic_string[abi:ne180100]<0>(&v58, "forward");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v47, (uint64_t)&v58, (uint64_t)v46);
  }
  v10 = v8 >> 2;
  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize((E5RT::ExecutionStream **)this, v9, v8 >> 2, 1);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v56 = *((_QWORD *)this + 6);
  v57 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v57)
  {
    v14 = &v57->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v16 = *((_QWORD *)this + 18);
  {
    std::string::basic_string[abi:ne180100]<0>(&v58, "in_relative_positions");
    v17 = (_WORD *)_ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
    v19 = v18;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if ((uint64_t)(2 * v19) >= 1)
      memset_pattern16(v17, &unk_248D72BF0, 2 * (((2 * v19) >> 1) - (2 * v19 != 1)) + 2);
    v20 = *((_QWORD *)this + 18);
    memset(&v58, 0, sizeof(v58));
    cgm::token_generation_inference::ajax::utils::setLinearRelativePositions(v17, v19, v20, v10, v10, 1, (uint64_t)&v58);
    if (v58.__r_.__value_.__r.__words[0])
    {
      v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
      operator delete(v58.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v21 = v16 + v10;
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "in_self_attention_logit_biases");
      v50.__r_.__value_.__r.__words[0] = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
      v50.__r_.__value_.__l.__size_ = v22;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v23 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v50, 0, v21 * v10 * *((_QWORD *)this + 11));
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v50.__r_.__value_.__l.__size_ = v24;
      if ((uint64_t)(2 * v24) >= 1)
        memset_pattern16(v23, &unk_248D72BF0, 2 * (((2 * v24) >> 1) - (2 * v24 != 1)) + 2);
      cgm::token_generation_inference::ajax::utils::fillWithALiBi((uint64_t)&v50, *((_QWORD *)this + 11), v21, *((_QWORD *)this + 18), v10);
    }
    else
    {
      {
        v49 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v58, "Failed to run inference, unexpected model version");
        cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(v49, 1, &v58);
      }
      std::string::basic_string[abi:ne180100]<0>(&v58, "in_position_ids");
      v50.__r_.__value_.__r.__words[0] = cgm::token_generation_inference::ajax::utils::inputSpan<int>();
      v50.__r_.__value_.__l.__size_ = v25;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v50.__r_.__value_.__r.__words[0] = E5RT::Span<int,18446744073709551615ul>::Slice(&v50, 0, v10);
      v50.__r_.__value_.__l.__size_ = v26;
      std::string::basic_string[abi:ne180100]<0>(&v58, "in_causal_mask");
      v54 = _ZN3cgm26token_generation_inference4ajax5utils9inputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
      v55 = v27;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v28 = (void *)_ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(&v54, 0, v21 * v10);
      v30 = (uint64_t)v28;
      v31 = v29;
      v54 = (uint64_t)v28;
      v55 = v29;
      if (2 * v29 >= 1)
        memset_pattern16(v28, &unk_248D72BF0, 2 * (((unint64_t)(2 * v29) >> 1) - (2 * v29 != 1)) + 2);
      cgm::token_generation_inference::ajax::utils::setCausalMaskAndPositionIds(v30, v31, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_, a3, *((_QWORD *)this + 18), a2[1] - *a2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "in_new_token_ids");
  v32 = (_DWORD *)cgm::token_generation_inference::ajax::utils::inputSpan<int>();
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v6 != v7)
  {
    v33 = *a2;
    if (v10 <= 1)
      v34 = 1;
    else
      v34 = v10;
    do
    {
      v35 = *v33++;
      *v32++ = v35;
      --v34;
    }
    while (v34);
  }
  v36 = (const std::string::value_type **)((char *)this + 104);
  if (*((char *)this + 127) < 0)
  {
    v37 = *((_QWORD *)this + 14);
    if (!v37)
      goto LABEL_54;
    std::string::__init_copy_ctor_external(&v53, *v36, v37);
  }
  else
  {
    if (!*((_BYTE *)this + 127))
      goto LABEL_54;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v36;
    v53.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
  std::to_string(&v50, *((_QWORD *)this + 16));
  v38 = std::string::insert(&v50, 0, "Inference_", 0xAuLL);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v58, "_", 1uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v52 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  E5RT::ExecutionStreamOperation::SerializeInferenceFrameData();
  if (SHIBYTE(v52) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_54:
  v42 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 4);
  if (v42)
  {
    if (*((char *)this + 31) < 0)
    {
      if (!*((_QWORD *)this + 2))
        goto LABEL_62;
    }
    else if (!*((_BYTE *)this + 31))
    {
      goto LABEL_62;
    }
    v43 = (**v42)(v42);
    v44 = (E5RT::ExecuteOptions *)*((_QWORD *)this + 20);
    if (v43)
    {
      E5RT::ExecuteOptions::SetEnableResourceTelemetry(v44);
      E5RT::ExecuteOptions::SetExecutionIdentifier();
    }
    else
    {
      E5RT::ExecuteOptions::SetEnableResourceTelemetry(v44);
    }
  }
LABEL_62:
  result = E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 8), *((const E5RT::ExecuteOptions **)this + 20));
  *((_QWORD *)this + 18) += v10;
  ++*((_QWORD *)this + 16);
  return result;
}

void sub_248CDD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  int v33;
  uint64_t v34;

  if (*(char *)(v34 - 89) < 0)
  {
    operator delete(*(void **)(v34 - 112));
    if ((v33 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize(E5RT::ExecutionStream **this, uint64_t a2, std::string::size_type a3, int a4)
{
  E5RT::ExecutionStreamOperation **v8;
  E5RT::ExecutionStreamOperation *v9;
  uint64_t *i;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *j;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *k;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  E5RT::IOPort *v37;
  cgm::token_generation_inference::ajax::_anonymous_namespace_ *v38;
  unint64_t *v39;
  unint64_t v40;
  E5RT::IOPort *v41;
  const E5RT::TensorDescriptor *v42;
  cgm::token_generation_inference::ajax::_anonymous_namespace_ *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  const E5RT::TensorDescriptor *v47;
  void *v48;
  void *v49;
  E5RT::IOPort *InputPortRef;
  E5RT::TensorDescriptor *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  E5RT::IOPort *v57;
  E5RT::TensorDescriptor *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 *v62;
  E5RT::IOPort *v63;
  E5RT::TensorDescriptor *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 *v68;
  E5RT::IOPort *v69;
  E5RT::TensorDescriptor *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  _QWORD *v77;
  E5RT::IOPort *v78;
  E5RT::TensorDescriptor *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 *v83;
  __int128 *v84;
  __int128 *v85;
  _QWORD *OutputPorts;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  E5RT::ExecutionStream *v92;
  _QWORD *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  NSObject *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::runtime_error *exception;
  uint64_t v119[2];
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  void *__p[2];
  char v127;
  __int128 *v128;
  _OWORD v129[2];
  int v130;
  std::string *p_buf;
  std::__shared_weak_count *v132;
  __int128 v133;
  std::string v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::string::size_type v138;
  std::string buf;
  void *v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  E5RT::ExecutionStream::ResetStream(this[8]);
  v8 = this + 6;
  v9 = this[6];
  memset(v129, 0, sizeof(v129));
  v130 = 1065353216;
  for (i = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInputPorts(v9) + 16); i; i = (uint64_t *)*i)
  {
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5]);
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v133, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      v133 = *((_OWORD *)i + 1);
      v134.__r_.__value_.__r.__words[0] = i[4];
    }
    *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v129, (unsigned __int8 *)&v133, &v133);
    v11 = (std::__shared_weak_count *)v134.__r_.__value_.__r.__words[2];
    if (v134.__r_.__value_.__r.__words[2])
    {
      v12 = (unint64_t *)(v134.__r_.__value_.__r.__words[2] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v134.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v133);
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    E5RT::IOPort::BindMemoryObject();
  }
  for (j = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInOutPorts(v9) + 16); j; j = (uint64_t *)*j)
  {
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5]);
    if (*((char *)j + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v133, (const std::string::value_type *)j[2], j[3]);
    }
    else
    {
      v133 = *((_OWORD *)j + 1);
      v134.__r_.__value_.__r.__words[0] = j[4];
    }
    *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v129, (unsigned __int8 *)&v133, &v133);
    v18 = (std::__shared_weak_count *)v134.__r_.__value_.__r.__words[2];
    if (v134.__r_.__value_.__r.__words[2])
    {
      v19 = (unint64_t *)(v134.__r_.__value_.__r.__words[2] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v134.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v133);
    v21 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v135 = 0;
    v136 = 0;
    E5RT::IOPort::BindMemoryObject();
    v24 = v136;
    if (v136)
    {
      p_shared_owners = (unint64_t *)&v136->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  for (k = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetOutputPorts(v9) + 16); k; k = (uint64_t *)*k)
  {
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)k[5]);
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v133, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      v133 = *((_OWORD *)k + 1);
      v134.__r_.__value_.__r.__words[0] = k[4];
    }
    *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)v129, (unsigned __int8 *)&v133, &v133);
    v28 = (std::__shared_weak_count *)v134.__r_.__value_.__r.__words[2];
    if (v134.__r_.__value_.__r.__words[2])
    {
      v29 = (unint64_t *)(v134.__r_.__value_.__r.__words[2] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v134.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v133);
    v31 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    p_buf = 0;
    v132 = 0;
    E5RT::IOPort::BindMemoryObject();
    v34 = v132;
    if (v132)
    {
      v35 = (unint64_t *)&v132->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v133 = 0u;
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0u;
  LODWORD(v134.__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_keys_state");
  v37 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor(v37);
  v38 = (cgm::token_generation_inference::ajax::_anonymous_namespace_ *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_values_state");
  v41 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInOutPortRef();
  E5RT::IOPort::GetPortDescriptor(v41);
  v43 = (cgm::token_generation_inference::ajax::_anonymous_namespace_ *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
  if (__p[1])
  {
    v44 = (unint64_t *)((char *)__p[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_keys_state");
  v46 = __p[0];
  __p[0] = 0;
  v140 = v46;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)&buf, (__int128 *)&buf);
  v48 = v140;
  v140 = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_cached_values_state");
  __p[0] = 0;
  v140 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)&buf, (__int128 *)&buf);
  v49 = v140;
  v140 = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  __p[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&buf, "in_new_token_ids");
  InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
  E5RT::IOPort::GetPortDescriptor(InputPortRef);
  v51 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(0);
  if (__p[1])
  {
    v52 = (unint64_t *)((char *)__p[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v135 = 1;
  v136 = (std::__shared_weak_count *)a3;
  std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, &v135, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_new_token_ids");
  v54 = (__int128 *)p_buf;
  p_buf = 0;
  v128 = v54;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)__p, (__int128 *)__p);
  v55 = v128;
  v128 = 0;
  if (v55)
    (*(void (**)(__int128 *))(*(_QWORD *)v55 + 8))(v55);
  if (v127 < 0)
    operator delete(__p[0]);
  v56 = (__int128 *)p_buf;
  p_buf = 0;
  if (v56)
    (*(void (**)(__int128 *))(*(_QWORD *)v56 + 8))(v56);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_relative_positions");
    v57 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor(v57);
    v58 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    v59 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v60 = (unint64_t *)((char *)__p[1] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v135 = 2;
    v136 = (std::__shared_weak_count *)a3;
    v137 = 3;
    v138 = a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, &v135, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
    v62 = (__int128 *)p_buf;
    p_buf = 0;
    v128 = v62;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)__p, (__int128 *)__p);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_self_attention_logit_biases");
    v63 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor(v63);
    v64 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    v65 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v66 = (unint64_t *)((char *)__p[1] + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v135 = 2;
    v136 = (std::__shared_weak_count *)a3;
    v137 = 3;
    v138 = a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, &v135, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_self_attention_logit_biases");
    v68 = (__int128 *)p_buf;
    p_buf = 0;
    v128 = v68;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)__p, (__int128 *)__p);
  }
  else
  {
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&buf, "reshapeForPromptSize failed, unexpected model version");
      cgm::token_generation_inference::ajax::AJAXE5Error::AJAXE5Error(exception, 1, &buf);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "in_causal_mask");
    v69 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor(v69);
    v70 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    v71 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v72 = (unint64_t *)((char *)__p[1] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v135 = 2;
    v136 = (std::__shared_weak_count *)a3;
    v137 = 3;
    v138 = a3 + a2;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, &v135, 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_causal_mask");
    v74 = (__int128 *)p_buf;
    p_buf = 0;
    v128 = v74;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)__p, (__int128 *)__p);
    v75 = v128;
    v128 = 0;
    if (v75)
      (*(void (**)(__int128 *))(*(_QWORD *)v75 + 8))(v75);
    if (v127 < 0)
      operator delete(__p[0]);
    v76 = (__int128 *)p_buf;
    p_buf = 0;
    if (v76)
      (*(void (**)(__int128 *))(*(_QWORD *)v76 + 8))(v76);
    v77 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
    std::string::basic_string[abi:ne180100]<0>(v77, "in_position_ids");
    v78 = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    E5RT::IOPort::GetPortDescriptor(v78);
    v79 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p[0]);
    v80 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v81 = (unint64_t *)((char *)__p[1] + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v135 = 1;
    v136 = (std::__shared_weak_count *)a3;
    std::unordered_map<unsigned long,unsigned long>::unordered_map((uint64_t)&buf, &v135, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "in_position_ids");
    v83 = (__int128 *)p_buf;
    p_buf = 0;
    v128 = v83;
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>((uint64_t)&v133, (unsigned __int8 *)__p, (__int128 *)__p);
  }
  v84 = v128;
  v128 = 0;
  if (v84)
    (*(void (**)(__int128 *))(*(_QWORD *)v84 + 8))(v84);
  if (v127 < 0)
    operator delete(__p[0]);
  v85 = (__int128 *)p_buf;
  p_buf = 0;
  if (v85)
    (*(void (**)(__int128 *))(*(_QWORD *)v85 + 8))(v85);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table((uint64_t)&buf);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*v8);
  std::string::basic_string[abi:ne180100]<0>(&buf, "out_logits");
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(OutputPorts, (unsigned __int8 *)&buf);
  if (!v87)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v88 = (void *)*((_QWORD *)v87 + 5);
  v89 = (std::__shared_weak_count *)*((_QWORD *)v87 + 6);
  __p[0] = v88;
  __p[1] = v89;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!a4)
      goto LABEL_194;
  }
  else if (!a4)
  {
    goto LABEL_194;
  }
  if (E5RT::IOPort::IsDynamic((E5RT::IOPort *)v88))
  {
    E5RT::TensorDataType::TensorDataType();
    v92 = this[12];
    v93 = operator new(0x18uLL);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 3);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v93 + 3);
    *v93 = 1;
    v93[1] = a3;
    v93[2] = v92;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    E5RT::TensorDescriptor::CreateTensorDesc();
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    v123 = v88;
    v124 = v89;
    if (v89)
    {
      v94 = (unint64_t *)&v89->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    v121 = v125;
    if (v125)
    {
      v96 = (std::__shared_weak_count *)operator new();
      v97 = v125;
      v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_2519DE578;
      v96->__shared_owners_ = 0;
      v96->__shared_weak_owners_ = 0;
      v96[1].__vftable = v97;
    }
    else
    {
      v96 = 0;
    }
    v122 = v96;
    v125 = 0;
    E5RT_Private::SetMaxPortDescriptor();
    if (v122)
    {
      v98 = &v122->__shared_owners_;
      do
        v99 = __ldaxr((unint64_t *)v98);
      while (__stlxr(v99 - 1, (unint64_t *)v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    if (v124)
    {
      v100 = &v124->__shared_owners_;
      do
        v101 = __ldaxr((unint64_t *)v100);
      while (__stlxr(v101 - 1, (unint64_t *)v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    if ((unint64_t)this[19] < a3)
    {
      v119[1] = (uint64_t)__p[0];
      v120 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v102 = (unint64_t *)((char *)__p[1] + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      E5RT_Private::GetMaxPortDescriptor();
      v104 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)buf.__r_.__value_.__l.__data_);
      v105 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v106 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      if (v120)
      {
        v108 = &v120->__shared_owners_;
        do
          v109 = __ldaxr((unint64_t *)v108);
        while (__stlxr(v109 - 1, (unint64_t *)v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v110 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v104);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a3;
        _os_log_impl(&dword_248CAA000, v110, OS_LOG_TYPE_DEFAULT, "Allocating a new logits buffer for numTokens: %zu", (uint8_t *)&buf, 0xCu);
      }
      E5RT::TensorDescriptor::AllocateMemory();
      std::string::basic_string[abi:ne180100]<0>(&buf, "out_logits");
      p_buf = &buf;
      v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v129, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&p_buf);
      std::shared_ptr<E5RT::MemoryObject>::operator=[abi:ne180100]<E5RT::BufferObject,std::default_delete<E5RT::BufferObject>,void>((_QWORD *)v111 + 5, v119);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v112 = v119[0];
      v119[0] = 0;
      if (v112)
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
      this[19] = (E5RT::ExecutionStream *)a3;
    }
    v113 = v125;
    v125 = 0;
    if (v113)
      (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v135);
  }
LABEL_194:
  cgm::token_generation_inference::ajax::utils::bindBuffersToPorts(*v8, v129);
  this[17] = (E5RT::ExecutionStream *)a3;
  v114 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v115 = (unint64_t *)((char *)__p[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v133);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v129);
}

void sub_248CDE9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v32 - 160));
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_248CDECDC()
{
  JUMPOUT(0x248CDECC8);
}

BOOL cgm::token_generation_inference::ajax::`anonymous namespace'::isV3(E5RT::ExecutionStreamOperation **a1)
{
  _QWORD *InputPorts;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_relative_positions");
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_248CDED4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cgm::token_generation_inference::ajax::`anonymous namespace'::isV2(E5RT::ExecutionStreamOperation **a1)
{
  _QWORD *InputPorts;
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "in_self_attention_logit_biases");
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(InputPorts, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_248CDEDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Span<int,18446744073709551615ul>::Slice(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  std::runtime_error *exception;

  if (!a3 || ((v3 = a1[1], v3 > a2) ? (v4 = a3 + a2 > v3) : (v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_2519DD750, MEMORY[0x24BEDAAD0]);
  }
  return *a1 + 4 * a2;
}

void sub_248CDEE54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward(uint64_t a1, int **a2, uint64_t *a3)
{
  return cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward((cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *)(a1 - 40), a2, a3);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reset(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  void *exception;
  unint64_t v4;
  _QWORD v5[3];

  v2 = this;
  if (*(_QWORD *)(this + 144) < a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v4 = *(_QWORD *)(v2 + 80);
    std::string::basic_string[abi:ne180100]<0>(v5, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v4, (uint64_t)v5, (uint64_t)exception);
  }
  *(_QWORD *)(this + 144) = a2;
  return this;
}

void sub_248CDEF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v9;
  _QWORD v10[2];

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v10[0] = _ZN3cgm26token_generation_inference4ajax5utils10outputSpanIDF16_EEN4E5RT4SpanIT_Lm18446744073709551615EEERNS4_24ExecutionStreamOperationERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEE();
  v10[1] = v4;
  if (v9 < 0)
    operator delete(__p);
  result = _ZNK4E5RT4SpanIDF16_Lm18446744073709551615EE5SliceEmm(v10, 0, *((_QWORD *)this + 12) * *((_QWORD *)this + 17));
  *a2 = *((_QWORD *)this + 17);
  a2[1] = result;
  a2[2] = v6;
  a2[3] = 1;
  v7 = *((_QWORD *)this + 12);
  a2[4] = v7;
  a2[5] = v7;
  return result;
}

void sub_248CDEFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::purgeUnusedKeyValueCache()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Purging key value cache entries is not yet implemented for flexible shape models.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_248CDF034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::`anonymous namespace'::copyTensorDescriptor(cgm::token_generation_inference::ajax::_anonymous_namespace_ *this, const E5RT::TensorDescriptor *a2)
{
  uint64_t v3;

  E5RT::TensorDescriptor::GetTensorShape(this);
  E5RT::TensorDescriptor::GetTensorDataType(this);
  E5RT::TensorDescriptor::CreateTensorDesc();
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v3);
}

void sub_248CDF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::`anonymous namespace'::copyTensorDescriptor(E5RT::TensorDescriptor *a1, uint64_t a2)
{
  uint64_t TensorShape;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v7[16];
  void *__p;
  void *v9;
  uint64_t v10;

  TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = __p;
    do
    {
      v6[v5[2]] = v5[3];
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  E5RT::TensorDescriptor::GetTensorDataType(a1);
  E5RT::TensorDescriptor::CreateTensorDesc();
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_248CDF15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::moveToDynamicState(cgm::token_generation_inference::ajax::utils **this)
{
  NSObject *v2;
  E5RT::ExecutionStreamOperation *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_248CAA000, v2, OS_LOG_TYPE_DEFAULT, "GPU model moving to dynamic state.", v5, 2u);
  }
  (*((void (**)(cgm::token_generation_inference::ajax::utils **, _QWORD))*this + 1))(this, 0);
  E5RT::ExecutionStream::ResetStream(this[8]);
  result = cgm::token_generation_inference::ajax::utils::unbindAllMemoryFromOperation(this[6], v3);
  this[19] = 0;
  *((_BYTE *)this + 224) = 1;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::moveToFullyLoadedState(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  uint64_t result;

  cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::reshapeForPromptSize((E5RT::ExecutionStream **)this, 0, *((_QWORD *)this + 10), 0);
  result = cgm::token_generation_inference::ajax::utils::allocateAndBindMemoryToPorts(*((E5RT::ExecutionStreamOperation **)this + 6), 2);
  *((_BYTE *)this + 224) = 0;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::clearAllState(E5RT::ExecutionStreamOperation **this)
{
  NSObject *v2;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v3;
  NSObject *v4;
  NSObject *v5;
  E5RT::ExecutionStreamOperation *v6;
  _OWORD v8[2];
  int v9;
  _QWORD v10[2];
  void (*v11)(cgm::token_generation_inference::common::logging::CGMTGILogger *);
  void *v12;
  cgm::token_generation_inference::common::logging::CGMTGILogger *v13;

  v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL((cgm::token_generation_inference::common::logging::CGMTGILogger *)this);
  v3 = (cgm::token_generation_inference::common::logging::CGMTGILogger *)os_signpost_id_generate(v2);
  v4 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(v3);
  if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v4;
    if (os_signpost_enabled(v4))
    {
      LOWORD(v8[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_248CAA000, v5, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "TGI_GPU_Clear_State", "", (uint8_t *)v8, 2u);
    }
  }
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v11 = ___ZN3cgm26token_generation_inference4ajax26FlexibleShapeAJAXE5MLModel13clearAllStateEv_block_invoke;
  v12 = &__block_descriptor_tmp_0;
  v13 = v3;
  (*((void (**)(E5RT::ExecutionStreamOperation **, _QWORD))*this + 1))(this, 0);
  v6 = this[6];
  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  cgm::token_generation_inference::ajax::utils::zeroAllMemoryObjects(v6, v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v8);
  return ((uint64_t (*)(_QWORD *))v11)(v10);
}

void sub_248CDF350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void (*a16)(char *))
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  a16(&a14);
  _Unwind_Resume(a1);
}

void ___ZN3cgm26token_generation_inference4ajax26FlexibleShapeAJAXE5MLModel13clearAllStateEv_block_invoke(cgm::token_generation_inference::common::logging::CGMTGILogger *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(a1);
  v3 = *((_QWORD *)a1 + 4);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_248CAA000, v4, OS_SIGNPOST_INTERVAL_END, v3, "TGI_GPU_Clear_State", "", v5, 2u);
    }
  }
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::~FlexibleShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_2519DE470;
  *((_QWORD *)this + 5) = &unk_2519DE4F8;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_2519DE470;
  *((_QWORD *)this + 5) = &unk_2519DE4F8;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
  JUMPOUT(0x2495AA834);
}

_QWORD *std::shared_ptr<E5RT::ExecutionStream>::operator=[abi:ne180100]<E5RT::ExecutionStream,std::default_delete<E5RT::ExecutionStream>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_2519DE2F0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_248CDF610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_248CDF894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_248CDF908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_248CDFCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_248CDFD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::unordered_map<unsigned long,unsigned long>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_248CDFE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_248CE0040(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::StaticShapeAJAXE5MLModel(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  std::vector<unsigned int>::size_type *v8;
  std::vector<unsigned int> *v9;
  uint64_t **v10;
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  std::vector<unsigned int>::size_type MaxStateLength;
  uint64_t v18;
  std::string __p;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_2519DE5D8;
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (std::vector<unsigned int>::size_type *)(a1 + 48);
  *(_DWORD *)(a1 + 40) = 10;
  *(_OWORD *)(a1 + 64) = 0u;
  v9 = (std::vector<unsigned int> *)(a1 + 64);
  v10 = (uint64_t **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = 0u;
  E5RT::ProgramLibrary::OpenLibrary();
  v11 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)operator new();
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  v12 = *((char *)a3 + 23);
  if (v12 >= 0)
    v13 = a3;
  else
    v13 = (uint64_t *)*a3;
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)a3 + 23);
  else
    v14 = a3[1];
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::AJAXExtendE5MLModule(v11, &__p, v13, v14, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *v10;
  *v10 = (uint64_t *)v11;
  if (v15)
  {
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v10, v15);
    v11 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*v10;
  }
  MaxStateLength = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(v11);
  *v8 = MaxStateLength;
  std::vector<int>::reserve(v9, MaxStateLength);
  if (v18)
    (*(void (**)())(*(_QWORD *)v18 + 8))();
  return a1;
}

void sub_248CE0258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  cgm::token_generation_inference::ajax::AJAXE5MLModel *v15;
  void **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v20;
  void *v21;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x2495AA834](v18, 0x1020C4016EE4530);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v20 = *v17;
  *v17 = 0;
  if (v20)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v17, v20);
  v21 = *v16;
  if (*v16)
  {
    *((_QWORD *)v15 + 9) = v21;
    operator delete(v21);
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(v15);
  _Unwind_Resume(a1);
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::reset(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, std::vector<int>::size_type a2)
{
  void *exception;
  unint64_t v5;
  _QWORD v6[3];

  if (*((_QWORD *)this + 6) <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v5 = *((_QWORD *)this + 6);
    std::string::basic_string[abi:ne180100]<0>(v6, "reset");
    cgm::token_generation_inference::ajax::AJAXE5Error::createContextExceededError(v5, (uint64_t)v6, (uint64_t)exception);
  }
  *((_QWORD *)this + 7) = a2;
  std::vector<int>::resize((std::vector<int> *)((char *)this + 64), a2);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::resetInputs(*((cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **)this + 11), a2);
}

void sub_248CE0394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getMaxContextLength(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getVocabularyCount(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  uint64_t v1;

  cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(this);
  return v1;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *__p;
  char v6;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_logits");
  v1 = cgm::token_generation_inference::espresso_inference::EspressoE5MLModule::outputSpan();
  v3 = v2;
  if (v6 < 0)
    operator delete(__p);
  if (v3 >= 2)
    return v1;
  else
    return 0;
}

void sub_248CE0450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLastForwardLogits@<X0>(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getLogits(this);
  *a2 = 1;
  a2[1] = result;
  a2[2] = v4;
  a2[3] = 1;
  a2[4] = v4;
  a2[5] = v4;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::purgeUnusedKeyValueCache(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;

  result = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::purgeUnusedKeyValueCache(*(_QWORD *)(a1 + 88), a2, a3, *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 56) -= result;
  return result;
}

uint64_t cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::getNumTokensProcessed(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  return *((_QWORD *)this + 7);
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, int a2)
{
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  v3 = (cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *)*((_QWORD *)this + 11);
  if (!v3)
    cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward();
  v6 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::forwardToken(v3, a2, v5);
  v7 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7) + 1;
  *((_QWORD *)this + 7) = v8;
  if (v8 >= v7)
  {
    *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (v5 % v6)) = a2;
  }
  else
  {
    v9 = *((_QWORD *)this + 10);
    v10 = (char *)*((_QWORD *)this + 9);
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)*((_QWORD *)this + 8);
      v13 = (v10 - v12) >> 2;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)v12;
      v15 = (uint64_t)(v9 - (_QWORD)v12) >> 1;
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v16);
        v12 = (char *)*((_QWORD *)this + 8);
        v10 = (char *)*((_QWORD *)this + 9);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      v19 = &v17[4 * v16];
      *(_DWORD *)v18 = a2;
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *((_QWORD *)this + 8) = v18;
      *((_QWORD *)this + 9) = v11;
      *((_QWORD *)this + 10) = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v10 = a2;
      v11 = v10 + 4;
    }
    *((_QWORD *)this + 9) = v11;
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this, int **a2)
{
  int *v2;
  int *v3;
  int v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *v2++;
      cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward(this, v5);
    }
    while (v2 != v3);
  }
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  NSObject *v1;

  v1 = cgm::token_generation_inference::common::logging::CGMTGILogger::GENERAL(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(v1);
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::~StaticShapeAJAXE5MLModel(cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  *(_QWORD *)this = &off_2519DE5D8;
  v4 = (uint64_t *)*((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 88);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;

  *(_QWORD *)this = &off_2519DE5D8;
  v4 = (uint64_t *)*((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 88);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<cgm::token_generation_inference::ajax::AJAXExtendE5MLModule>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  cgm::token_generation_inference::ajax::AJAXE5MLModel::~AJAXE5MLModel(this);
  JUMPOUT(0x2495AA834);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_248CE0768(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_248CE08F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_248CE0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void *v12;
  uint64_t v13;
  void *v14;
  void **v15;

  if (*(char *)(v13 + 47) < 0)
    operator delete(*v15);

  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);

  a12 = (void **)&a9;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_248CE0AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_248CE0C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_248CE1054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_248CE1210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_248CE1300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248CE1380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)TGIE5ANESessionObjC;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_248CE1434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_248CE1498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_248CE163C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_248CE184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    v31 = *(NSObject **)(v26 + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      -[TGIE5BaseModelObjC load:].cold.1((uint64_t)v30, v31);
    if (v25)
    {
      v32 = (void *)MEMORY[0x24BDD1540];
      a18 = *MEMORY[0x24BDD0FC8];
      v33 = (void *)MEMORY[0x24BDD17C8];
      (*(void (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      objc_msgSend(v33, "stringWithFormat:", CFSTR("Failed to load model: %s."));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      a19 = (uint64_t)v34;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &a19, &a18, 1);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "errorWithDomain:code:userInfo:", CFSTR("TokenGenerationInference"), 4, v35);
      *v25 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x248CE1818);
  }
  _Unwind_Resume(a1);
}

void sub_248CE1A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_248CE1AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_248CE1B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *std::unique_ptr<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](v2);
    JUMPOUT(0x2495AA834);
  }
  return result;
}

void std::default_delete<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<E5RT::ExecutionStreamOperation>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x2495AA834);
  }
}

void std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2495AA834);
}

void std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<cgm::token_generation_inference::espresso_inference::AJAXE5MLModelBase  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_248CE1E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_248CE1FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type **a2)
{
  std::string::value_type *v3;

  v3 = *a2;
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::__assign_external(a1, v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, v3);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_248CE20CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_248CE223C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

__CFString *TGIE5ModelTypeObjcToString(unint64_t a1)
{
  if (a1 < 3)
    return off_2519DE6B0[a1];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown model type: %ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_248CE25FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_248CE2AC8(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, void *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,TGIE5AdapterConfiguration *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a34);
  a34 = &a31;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = (uint64_t *)&a52;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TGIE5AdapterConfiguration>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    v21[4] = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[3];
    *((_QWORD *)v17 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    std::vector<TGIE5AdapterConfiguration>::__swap_out_circular_buffer(a1, v21);
    v11 = a1[1];
    result = std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[3];
    *(_QWORD *)(v7 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_248CE2DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TGIE5AdapterConfiguration::~TGIE5AdapterConfiguration(TGIE5AdapterConfiguration *this)
{
  if (*((char *)&this[1].var0.var0.var0.var0.var1 + 23) < 0)
    operator delete(this[1].var0.var0.var0.var0.var1.var0);
  if (SHIBYTE(this->var0.var0.var1.var0[2]) < 0)
    operator delete((void *)this->var0.var0.var1.var0[0]);
  if (*((char *)&this->var0.var0.var0.var0.var1 + 23) < 0)
    operator delete(this->var0.var0.var0.var0.var1.var0);
}

void TGIE5Function::~TGIE5Function(TGIE5Function *this)
{
  if (this[1].var0.var0.var0.var0.var0.var0[8] && this[1].var0.var0.var0.var0.var0.var0[7] < 0)
    operator delete((void *)this->var0.var0.var1.var0[1]);
  if (*((char *)&this->var0.var0.var0.var0.var1 + 23) < 0)
    operator delete(this->var0.var0.var0.var0.var1.var0);
}

void sub_248CE2F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248CE3110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248CE3264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_248CE34E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t TGIIsEqualAllowingNil(objc_object *a1, objc_object *a2)
{
  unint64_t v3;
  objc_object *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 | (unint64_t)v4)
  {
    if (!v3 || v4)
      v6 = objc_msgSend((id)v3, "isEqual:", v4);
    else
      v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_248CE3600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248CE37D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<TGIE5AdapterConfiguration>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 72;
      v6 = *(_OWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 56) = *(_QWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 72) = 0;
      v7 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v7;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v8 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v8;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__split_buffer<TGIE5AdapterConfiguration>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<TGIE5Function>::__push_back_slow_path<TGIE5Function>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[64 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v11 + 3) = *((_QWORD *)a2 + 3);
  v11[32] = 0;
  v11[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v13 = a2[2];
    *((_QWORD *)v11 + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)v11 + 2) = v13;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v11[56] = 1;
  }
  v16[2] = v11 + 64;
  std::vector<TGIE5Function>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<TGIE5Function>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_248CE3B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TGIE5Function>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TGIE5Function>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_BYTE *)(v4 + v5 - 32) = 0;
      *(_BYTE *)(v6 - 8) = 0;
      if (*(_BYTE *)(v2 + v5 - 8))
      {
        v9 = *(_OWORD *)(v7 - 32);
        *(_QWORD *)(v4 + v5 - 16) = *(_QWORD *)(v7 - 16);
        *(_OWORD *)(v4 + v5 - 32) = v9;
        *(_QWORD *)(v7 - 24) = 0;
        *(_QWORD *)(v7 - 16) = 0;
        *(_QWORD *)(v7 - 32) = 0;
        *(_BYTE *)(v6 - 8) = 1;
      }
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__split_buffer<TGIE5Function>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<TGIE5Function,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<TGIE5AdapterConfiguration>::__init_with_size[abi:ne180100]<TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<TGIE5AdapterConfiguration>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_248CE3D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<TGIE5AdapterConfiguration>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<TGIE5AdapterConfiguration>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5AdapterConfiguration>,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*,TGIE5AdapterConfiguration*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<TGIE5AdapterConfiguration,TGIE5AdapterConfiguration&,TGIE5AdapterConfiguration*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_248CE3E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<TGIE5AdapterConfiguration,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<TGIE5AdapterConfiguration,TGIE5AdapterConfiguration&,TGIE5AdapterConfiguration*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_248CE3EF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<TGIE5Function>::__init_with_size[abi:ne180100]<TGIE5Function*,TGIE5Function*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<TGIE5Function>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5Function>,TGIE5Function*,TGIE5Function*,TGIE5Function*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_248CE3F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<TGIE5Function>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<TGIE5Function>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGIE5Function>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TGIE5Function>,TGIE5Function*,TGIE5Function*,TGIE5Function*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function&,TGIE5Function*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_248CE4044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 64;
    do
    {
      std::__destroy_at[abi:ne180100]<TGIE5Function,0>(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<TGIE5Function,TGIE5Function&,TGIE5Function*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 32), a2 + 2);
  return this;
}

void sub_248CE40C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

std::string *std::__fs::filesystem::path::assign[abi:ne180100]<char const*>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::result_type std::mersenne_twister_engine<unsigned long long,64ul,312ul,156ul,31ul,13043109905998158313ull,29ul,6148914691236517205ull,17ul,8202884508482404352ull,37ul,18444473444759240704ull,43ul,6364136223846793005ull>::operator()(std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned long long, 64, 312, 156, 31, 13043109905998158313, 29, 6148914691236517205, 17, 8202884508482404352, 37, 18444473444759240704, 43, 6364136223846793005>::result_type v3;
  uint64_t v4;

  i = this->__i_;
  v2 = (i + 1) % 0x138;
  v3 = this->__x_[(i + 156) % 0x138] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(this->__x_[v2] << 63) >> 63) & 0xB5026F5AA96619E9;
  this->__x_[i] = v3;
  this->__i_ = v2;
  v4 = (((v3 >> 29) & 0x5555555555555555 ^ v3) << 17) & 0x71D67FFFEDA60000 ^ (v3 >> 29) & 0x5555555555555555 ^ v3;
  return (v4 << 37) & 0xFFF7EEE000000000 ^ v4 ^ (((v4 << 37) & 0xFFF7EEE000000000 ^ v4) >> 43);
}

uint64_t BasicDecoder.__allocating_init(languageModel:sampler:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_2_0();
  BasicDecoder.init(languageModel:sampler:)(a1, a2);
  return v4;
}

uint64_t BasicDecoder.init(languageModel:sampler:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10[2];

  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v2 + 16);
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  *(_QWORD *)(v2 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v2 + 64);
  v7 = a2[3];
  v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 32))(v10, v7, v8);
  outlined init with take of LogitCollection(v10, v2 + 104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

Swift::Void __swiftcall BasicDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = v1;
  v3 = v1[7];
  v7 = *(_OWORD *)prompt.queryTokens._rawValue;
  OUTLINED_FUNCTION_4_0();
  v4 = v2[5];
  v5 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v4);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v5 + 40))(v3, &v7, v4, v5);
  swift_endAccess();
  v2[7] = v6;
}

uint64_t BasicDecoder.decodeNextChunk()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[28] = v0;
  v2 = type metadata accessor for IndexSet();
  v1[29] = v2;
  v1[30] = *(_QWORD *)(v2 - 8);
  v1[31] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, _QWORD *, uint64_t, uint64_t);

  v1 = v0[28];
  OUTLINED_FUNCTION_4_0();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 7));
  v2 = v0[10];
  v3 = v0[11];
  OUTLINED_FUNCTION_3_0();
  v0[32] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v4 = OUTLINED_FUNCTION_2_0();
  v0[33] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v1 + 56);
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 104, (uint64_t)(v0 + 12));
  v7 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  v0[34] = v5;
  *v5 = v0;
  v5[1] = BasicDecoder.decodeNextChunk();
  return v7(v4, v0 + 12, v2, v3);
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  specialized Collection.first.getter(*(_QWORD *)(v0 + 288), v0 + 136);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 160))
  {
    v3 = *(_QWORD *)(v0 + 240);
    v2 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v0 + 232);
    outlined init with take of LogitCollection((__int128 *)(v0 + 136), v0 + 16);
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    OUTLINED_FUNCTION_3_0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    v7 = IndexSet.isEmpty.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    if ((v7 & 1) != 0)
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.device);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_248CAA000, v9, v10, "Logit indexSet is empty. This is invalid", v11, 2u);
        MEMORY[0x2495AAF60](v11, -1, -1);
      }

      lazy protocol witness table accessor for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError();
      swift_allocError();
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v12 = *(_QWORD **)(v0 + 224);
      v13 = v12[11];
      v14 = v12[12];
      __swift_project_boxed_opaque_existential_1(v12 + 8, v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(v0 + 16, v13, v14);
      v16 = v12[7];
      OUTLINED_FUNCTION_4_0();
      v17 = v12[5];
      v18 = v12[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v12 + 2), v17);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 16))(v16, v15, 0, v17, v18);
      swift_endAccess();
      v12[7] = v19;
      v20 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v20 + 16) = xmmword_248D75A50;
      *(_QWORD *)(v20 + 32) = v15;
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BasicDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 280) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 288) = a1;
  outlined destroy of LogitPresampler?(v4 + 96);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  if (*(_QWORD *)(a1 + 16))
  {
    outlined init with copy of DeterministicLanguageModelProtocol(a1 + 32, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, type metadata accessor for OnDeviceInferenceSuspendedFetch, a2);
}

{
  return specialized Collection.first.getter(a1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Token();
  v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v6);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = a2(0);
  v8 = v7;
  if (v6)
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
    outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(a1 + ((v9 + 32) & ~v9), a3, a2);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v10, 1, v8);
}

uint64_t BasicDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return v0;
}

uint64_t BasicDecoder.__deallocating_deinit()
{
  BasicDecoder.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance BasicDecoder(uint64_t a1, uint64_t a2)
{
  BasicDecoder.append(prompt:)(*(TokenGenerationInference::SamplingDecoderPrompt *)&a1);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return BasicDecoder.decodeNextChunk()();
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t default argument 1 of BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  return 10;
}

float default argument 2 of BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  return 16.0;
}

uint64_t default argument 1 of E5TransformerLanguageModel.init(e5Runner:shouldFlattenPromptModules:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator;
  if (!lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for SeedableRandomNumberGenerator, &type metadata for SeedableRandomNumberGenerator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495AAE88]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of LogitPresampler?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of LogitCollection(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError;
  if (!lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationSamplingError, &type metadata for TokenGenerationSamplingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError;
  if (!lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationSamplingError, &type metadata for TokenGenerationSamplingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationSamplingError and conformance TokenGenerationSamplingError);
  }
  return result;
}

uint64_t default argument 2 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)()
{
  return 1;
}

uint64_t default argument 2 of DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)()
{
  return 1;
}

void default argument 2 of TokenGenerationConfiguration.init(decoder:tokenizerPath:sampling:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

uint64_t default argument 4 of TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  return 0;
}

uint64_t default argument 1 of BasicDecoder.init(languageModel:sampler:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  ValueMetadata *v6;
  unint64_t v7;

  v6 = &type metadata for SeedableRandomNumberGenerator;
  v7 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(_QWORD *)&v5 = 0;
  v2 = type metadata accessor for GreedySampling();
  v3 = OUTLINED_FUNCTION_2_0();
  result = outlined init with take of LogitCollection(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for GreedySampling;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for BasicDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for BasicDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BasicDecoder.__allocating_init(languageModel:sampler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of DeterministicLanguageModelProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
  }
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return 0;
}

double OUTLINED_FUNCTION_1_0()
{
  return 1.0;
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return swift_allocObject();
}

_QWORD *OUTLINED_FUNCTION_3_0()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return swift_beginAccess();
}

TokenGenerationInference::BasicDecoderPerformanceMeasurement __swiftcall BasicDecoderPerformanceMeasurement.init(totalInferenceLatency:inferenceCallCount:)(Swift::Double totalInferenceLatency, Swift::Int inferenceCallCount)
{
  uint64_t v2;
  TokenGenerationInference::BasicDecoderPerformanceMeasurement result;

  *(Swift::Double *)v2 = totalInferenceLatency;
  *(_QWORD *)(v2 + 8) = inferenceCallCount;
  result.totalInferenceLatency = totalInferenceLatency;
  result.inferenceCallCount = inferenceCallCount;
  return result;
}

Swift::Void __swiftcall BasicDecoderPerformanceMeasurement.printToOSLogForLLMWheel()()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7[2];

  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v0._countAndFlagsBits = 0xD000000000000020;
  v0._object = (void *)0x8000000248D7E6E0;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._object = (void *)0x8000000248D7E710;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  if (one-time initialization token for speculativeDecode != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.speculativeDecode);
  swift_bridgeObjectRetain();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7[0] = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v7);
    OUTLINED_FUNCTION_1_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_248CAA000, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_1();
  }

  swift_bridgeObjectRelease_n();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BasicDecoderPerformanceMeasurement(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BasicDecoderPerformanceMeasurement(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BasicDecoderPerformanceMeasurement()
{
  return &type metadata for BasicDecoderPerformanceMeasurement;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<E5NodeState>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void OUTLINED_FUNCTION_0_1()
{
  JUMPOUT(0x2495AAF60);
}

uint64_t BeamSearchDecoder.__allocating_init(languageModel:maxActiveNodesPerStep:logBeamWidth:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_2_0();
  BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)(a1, a2, a3);
  return v6;
}

uint64_t BeamSearchDecoder.init(languageModel:maxActiveNodesPerStep:logBeamWidth:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v9[2];

  v4 = v3;
  *(_QWORD *)(v4 + 112) = MEMORY[0x24BEE4AF8];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, v4 + 16);
  *(_QWORD *)(v4 + 56) = a2;
  *(float *)(v4 + 64) = a3;
  type metadata accessor for TopK();
  static TopK.makeTopKPresampler(k:)(a2, (uint64_t)v9);
  __swift_destroy_boxed_opaque_existential_1(a1);
  outlined init with take of LogitCollection(v9, v4 + 72);
  return v4;
}

Swift::Void __swiftcall BeamSearchDecoder.append(prompt:)(Swift::OpaquePointer prompt)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_51();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v1;
    v5 = v2;
    v6 = v1 + 14;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_22();
    v30 = v1 + 2;
    v7 = OUTLINED_FUNCTION_22();
    v8 = 0;
    v31 = v5;
    v32 = v3;
    do
    {
      v9 = *(_QWORD *)(v5 + 8 * v8 + 32);
      if (*(_QWORD *)(*v6 + 16))
      {
        MEMORY[0x24BDAC7A8](v7);
        v10 = swift_bridgeObjectRetain();
        v33 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay24TokenGenerationInference17BeamSearchDecoderC0I4Node33_A7FE2FA43B970D1C0025663E659989E9LLVGG_AMs5NeverOTg506_sSi24fg11Inference17ijk11C0D4Node33_mnopqrst36LLVAFIgyyd_Si6offset_AF7elementtAFs5U11OIegnrzr_TRSiA2MIgyyd_Tf1cn_n(v10, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))partial apply for closure #1 in BeamSearchDecoder.append(prompt:));
        OUTLINED_FUNCTION_42();
        OUTLINED_FUNCTION_4_0();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, (uint64_t)&demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
        v11 = *(_QWORD *)(v4[14] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        v12 = v4[14];
        *(_QWORD *)(v12 + 16) = v11 + 1;
        *(_QWORD *)(v12 + 8 * v11 + 32) = v33;
      }
      else
      {
        v13 = v4[5];
        v14 = v4[6];
        v15 = __swift_project_boxed_opaque_existential_1(v30, v13);
        v16 = *(_QWORD *)(v13 - 8);
        MEMORY[0x24BDAC7A8](v15, v15);
        OUTLINED_FUNCTION_59();
        v19 = v18 - v17;
        (*(void (**)(uint64_t))(v16 + 16))(v18 - v17);
        v20 = OUTLINED_FUNCTION_67(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v13);
        OUTLINED_FUNCTION_4_0();
        v22 = v4[5];
        v21 = v4[6];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v22);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v9, 1, v22, v21);
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BeamSearchDecoder.BeamNode>);
        v24 = OUTLINED_FUNCTION_2_0();
        *(_OWORD *)(v24 + 16) = xmmword_248D75A50;
        *(_QWORD *)(v24 + 32) = v23;
        *(_QWORD *)(v24 + 40) = v9;
        *(_DWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = -1;
        OUTLINED_FUNCTION_4_0();
        v25 = v4[14];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v4[14] = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v25 = v28;
          *v6 = v28;
        }
        v27 = *(_QWORD *)(v25 + 16);
        v5 = v31;
        v3 = v32;
        if (v27 >= *(_QWORD *)(v25 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v25 = v29;
          *v6 = v29;
        }
        *(_QWORD *)(v25 + 16) = v27 + 1;
        *(_QWORD *)(v25 + 8 * v27 + 32) = v24;
      }
      v7 = swift_endAccess();
      ++v8;
    }
    while (v3 != v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(a1 + 8 * v1 + 24);
  else
    return 0;
}

{
  if (*(_QWORD *)(a1 + 16))
    return swift_bridgeObjectRetain();
  else
    return 0;
}

float closure #1 in BeamSearchDecoder.append(prompt:)(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a6 + 16;
  swift_beginAccess();
  v12 = *(_QWORD *)(a6 + 40);
  v13 = *(_QWORD *)(a6 + 48);
  __swift_mutable_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a3, a7, 1, v12, v13);
  swift_endAccess();
  return a1;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay24TokenGenerationInference17BeamSearchDecoderC0I4Node33_A7FE2FA43B970D1C0025663E659989E9LLVGG_AMs5NeverOTg506_sSi24fg11Inference17ijk11C0D4Node33_mnopqrst36LLVAFIgyyd_Si6offset_AF7elementtAFs5U11OIegnrzr_TRSiA2MIgyyd_Tf1cn_n(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, float))
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    v4 = 0;
    v5 = (float *)(a1 + 56);
    do
    {
      v6 = a2(v4, *((_QWORD *)v5 - 3), *((_QWORD *)v5 - 2), *(_QWORD *)v5, *(v5 - 2));
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = *(_QWORD *)(v17 + 16);
      if (v13 >= *(_QWORD *)(v17 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v4;
      v5 += 8;
      *(_QWORD *)(v17 + 16) = v13 + 1;
      v14 = v17 + 32 * v13;
      *(_QWORD *)(v14 + 32) = v6;
      *(_QWORD *)(v14 + 40) = v8;
      *(_DWORD *)(v14 + 48) = v10;
      *(_QWORD *)(v14 + 56) = v12;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t BeamSearchDecoder.bestTokenPath.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float *v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v1 + 8 * v2 + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_QWORD *)(v3 + 56);
  v7 = v4 - 1;
  if (v7)
  {
    v8 = *(float *)(v3 + 48);
    v9 = (float *)(v3 + 88);
    do
    {
      v10 = *((_QWORD *)v9 - 2);
      v11 = *(v9 - 2);
      v13 = *(_QWORD *)v9;
      v9 += 8;
      v12 = v13;
      if (v8 < v11)
      {
        v5 = v10;
        v6 = v12;
        v8 = v11;
      }
      --v7;
    }
    while (v7);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v14 + 32) = v5;
  v15 = (v2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (!v15)
    return v14;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = 8 * (v2 - 1) + 24;
  v18 = &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>;
  while ((v6 & 0x8000000000000000) == 0)
  {
    v19 = *(_QWORD *)(v1 + v17);
    if (v6 >= *(_QWORD *)(v19 + 16))
      goto LABEL_19;
    v20 = v19 + 32 * v6;
    v21 = *(_QWORD *)(v20 + 40);
    v6 = *(_QWORD *)(v20 + 56);
    if ((unint64_t)(v16 + 1) >= *(_QWORD *)(v14 + 24) >> 1)
    {
      v22 = v18;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v18 = v22;
      v14 = v23;
    }
    *(_QWORD *)(v14 + 16) = v16 + 2;
    *(_QWORD *)(v14 + 8 * v16++ + 40) = v21;
    v17 -= 8;
    if (v15 == v16)
      goto LABEL_20;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v14 + 16);
  if (v25 < 2)
    return v14;
  v26 = 0;
  for (i = v25 + 3; ; --i)
  {
    v28 = *(_QWORD *)(v14 + 16);
    if (v26 >= v28)
      break;
    if (i - 4 >= v28)
      goto LABEL_27;
    v29 = v14 + 8 * v26;
    v30 = *(_QWORD *)(v29 + 32);
    *(_QWORD *)(v29 + 32) = *(_QWORD *)(v14 + 8 * i);
    *(_QWORD *)(v14 + 8 * i) = v30;
    ++v26;
    v31 = i - 5;
    if ((uint64_t)v26 >= v31)
      return v14;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD v31[4];
  uint64_t v32;

  v4 = a1 - 1;
  if (a1 >= 1)
  {
    v5 = a1;
    v6 = v1 + 14;
    swift_beginAccess();
    v7 = v1[14];
    if (*(_QWORD *)(v7 + 16) <= (unint64_t)v5)
      goto LABEL_30;
    v29 = (_QWORD *)v5;
    v3 = *(_QWORD *)(v7 + 8 * v5 + 32);
    v2 = *(_QWORD *)(v3 + 16);
    if (v2)
    {
      v31[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      v1 = v31;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v8 = v31[0];
      v9 = *(_QWORD *)(v31[0] + 16);
      v10 = (uint64_t *)(v3 + 56);
      do
      {
        v12 = *v10;
        v10 += 4;
        v11 = v12;
        v31[0] = v8;
        if (v9 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          v1 = v31;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v8 = v31[0];
        }
        *(_QWORD *)(v8 + 16) = v9 + 1;
        *(_QWORD *)(v8 + 8 * v9++ + 32) = v11;
        --v2;
      }
      while (v2);
    }
    else
    {
      swift_bridgeObjectRetain();
      v8 = MEMORY[0x24BEE4AF8];
    }
    specialized Set.init<A>(_:)(v8);
    if (v4 >= *(_QWORD *)(*v6 + 16))
      goto LABEL_31;
    v14 = *(_QWORD *)(*v6 + 8 * v4 + 32);
    if (*(_QWORD *)(v13 + 16) == *(_QWORD *)(v14 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRetain();
    v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = (uint64_t)&v28;
    v32 = Dictionary.init(dictionaryLiteral:)();
    MEMORY[0x24BDAC7A8]();
    v2 = specialized Sequence.compactMap<A>(_:)(v14, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, float))partial apply for closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v15 = *v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_32;
    while (v4 < *(_QWORD *)(v15 + 16))
    {
      *(_QWORD *)(v15 + 8 * v4 + 32) = v2;
      swift_endAccess();
      swift_bridgeObjectRelease();
      v2 = *(_QWORD *)(v3 + 16);
      if (!v2)
      {
        swift_bridgeObjectRelease();
        v4 = MEMORY[0x24BEE4AF8];
LABEL_25:
        swift_beginAccess();
        v24 = *v6;
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *v6 = v24;
        v5 = (uint64_t)v29;
        if ((v25 & 1) != 0)
        {
LABEL_26:
          if (*(_QWORD *)(v24 + 16) <= v5)
          {
            __break(1u);
          }
          else
          {
            *(_QWORD *)(v24 + 8 * v5 + 32) = v4;
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          return;
        }
LABEL_34:
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v24 = v27;
        *v6 = v27;
        goto LABEL_26;
      }
      v31[0] = v1;
      v1 = v31;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v31[0];
      v17 = (_QWORD *)v32;
      v18 = (uint64_t *)(v3 + 56);
      while (v17[2])
      {
        v30 = *(_OWORD *)(v18 - 3);
        v19 = *((_DWORD *)v18 - 2);
        v1 = v17;
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(*v18);
        if ((v21 & 1) == 0)
          goto LABEL_29;
        v22 = *(_QWORD *)(v17[7] + 8 * v20);
        v31[0] = v4;
        v5 = *(_QWORD *)(v4 + 16);
        if ((unint64_t)v5 >= *(_QWORD *)(v4 + 24) >> 1)
        {
          v1 = v31;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v4 = v31[0];
        }
        *(_QWORD *)(v4 + 16) = v5 + 1;
        v23 = v4 + 32 * v5;
        *(_OWORD *)(v23 + 32) = v30;
        *(_DWORD *)(v23 + 48) = v19;
        *(_QWORD *)(v23 + 56) = v22;
        v18 += 4;
        if (!--v2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v15 = v26;
      *v6 = v26;
    }
    __break(1u);
    goto LABEL_34;
  }
}

void specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4[1] = Set.init(minimumCapacity:)();
  if (v2 == a2)
  {
LABEL_6:
    OUTLINED_FUNCTION_25();
    return;
  }
  if (a2 < v2)
    goto LABEL_8;
  if (v2 < a2)
  {
    do
      specialized Set._Variant.insert(_:)(v4, v2++);
    while (a2 != v2);
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5[2];

  v5[1] = Set.init(minimumCapacity:)();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = *(_QWORD *)(a1 + 8 * i + 32);
      specialized Set._Variant.insert(_:)(v5, v4);
    }
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_25();
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = Set.init(minimumCapacity:)();
  v4 = a2 + 32;
  result = OUTLINED_FUNCTION_22();
  while ((a1 & 0x8000000000000000) == 0)
  {
    if (a1 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
      goto LABEL_7;
    v6 = *(_QWORD *)v4 + 72 * a1;
    v7 = *(_QWORD *)(v6 + 48);
    v8 = *(unsigned __int8 *)(v6 + 56);
    result = specialized Set._Variant.insert(_:)(&v9, a1);
    a1 = v7;
    if (v8 == 1)
    {
      OUTLINED_FUNCTION_30();
      return v10;
    }
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  id v8;
  uint64_t v9;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_52();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_7_0();
  }
  type metadata accessor for TGIE5AdapterConfigurationObjC();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TGIE5AdapterConfigurationObjC, MEMORY[0x24BEE5BD8]);
  result = Set.init(minimumCapacity:)();
  v4 = result;
  v9 = result;
  if (!v2)
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_13:
    OUTLINED_FUNCTION_7_0();
    return v4;
  }
  OUTLINED_FUNCTION_52();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = OUTLINED_FUNCTION_7_0();
  if (!v5)
    goto LABEL_13;
LABEL_5:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x2495A9EB0](i, a1);
      else
        v7 = *(id *)(a1 + 8 * i + 32);
      specialized Set._Variant.insert(_:)(&v8, v7);

    }
    OUTLINED_FUNCTION_7_0();
    return v9;
  }
  __break(1u);
  return result;
}

void closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, unsigned int a8@<S0>)
{
  char v15;
  char v16;
  uint64_t v17;

  specialized Set.contains(_:)(a1, a5);
  v16 = v15;
  if ((v15 & 1) != 0)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(*(_QWORD *)(*(_QWORD *)a6 + 16), a1);
    v17 = a8;
  }
  else
  {
    a2 = 0;
    a3 = 0;
    v17 = 0;
    a4 = 0;
  }
  *(_QWORD *)a7 = a2;
  *(_QWORD *)(a7 + 8) = a3;
  *(_QWORD *)(a7 + 16) = v17;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = (v16 & 1) == 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, float))
{
  uint64_t v2;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[40];
  void (*v19)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, float);

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v5 = (float *)(swift_bridgeObjectRetain() + 56);
  v6 = MEMORY[0x24BEE4AF8];
  v19 = a2;
  do
  {
    a2(&v15, v4, *((_QWORD *)v5 - 3), *((_QWORD *)v5 - 2), *(_QWORD *)v5, *(v5 - 2));
    v14 = v15;
    v7 = v16;
    v8 = v17;
    outlined init with take of BeamSearchDecoder.BeamNode?((uint64_t)&v15, (uint64_t)v18);
    if ((v18[32] & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v11;
      }
      v9 = *(_QWORD *)(v6 + 16);
      if (v9 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v12;
      }
      *(_QWORD *)(v6 + 16) = v9 + 1;
      v10 = v6 + 32 * v9;
      *(_OWORD *)(v10 + 32) = v14;
      *(_DWORD *)(v10 + 48) = v7;
      *(_QWORD *)(v10 + 56) = v8;
      a2 = v19;
    }
    ++v4;
    v5 += 8;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  char v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[2];
  _QWORD v15[4];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (float *)(swift_bridgeObjectRetain() + 48);
    v5 = MEMORY[0x24BEE4AF8];
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v6 = *v4;
        v7 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v4 - 2));
        if ((v8 & 1) != 0)
        {
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(a2 + 56) + 40 * v7, (uint64_t)v14);
          outlined init with take of LogitCollection(v14, (uint64_t)v15);
          __swift_project_boxed_opaque_existential_1(v15, v15[3]);
          v9 = LogitCollection.max()();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v5 = v11;
          }
          v10 = *(_QWORD *)(v5 + 16);
          if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v5 = v12;
          }
          *(_QWORD *)(v5 + 16) = v10 + 1;
          *(float *)(v5 + 4 * v10 + 32) = v6 + v9;
        }
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3);
  else
    return 0;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  specialized Dictionary.subscript.getter(a1, a2, (void (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  specialized Dictionary.subscript.getter(a1, a2, (void (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a2 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    OUTLINED_FUNCTION_39(v4);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  OUTLINED_FUNCTION_49();
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a3 + 16) && (v5 = OUTLINED_FUNCTION_47(a1, a2), (v6 & 1) != 0))
  {
    OUTLINED_FUNCTION_39(v5);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  OUTLINED_FUNCTION_49();
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    a3();
    if ((v3 & 1) != 0)
      swift_retain();
  }
  OUTLINED_FUNCTION_49();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = OUTLINED_FUNCTION_47(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = OUTLINED_FUNCTION_47(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(v3 + 56) + 24 * v4;
  v7 = *(_QWORD *)v6;
  outlined copy of MetadataSpecialToken(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
  return v7;
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = OUTLINED_FUNCTION_47(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v4);
  else
    return 0;
}

void BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11[4];
  uint64_t v12;

  v11[0] = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v11);
  v2 = v11[0];
  v12 = v11[0];
  v3 = *(_QWORD *)(v1 + 56);
  if (v3 < *(_QWORD *)(v11[0] + 16))
  {
    specialized Array.replaceSubrange<A>(_:with:)(v3);
    v2 = v12;
  }
  v4 = v1 + 112;
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<[BeamSearchDecoder.BeamNode]>, (uint64_t)&demangling cache variable for type metadata for [BeamSearchDecoder.BeamNode], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v6 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v6 + 16) = v5 + 1;
  *(_QWORD *)(v6 + 8 * v5 + 32) = v2;
  v7 = *(_QWORD *)(v1 + 112);
  swift_endAccess();
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_14:
    __break(1u);
    swift_release();
    __break(1u);
    return;
  }
  if (v8 != 1)
  {
    v9 = *(_QWORD *)(v7 + 16);
    while (v8 >= v9)
    {
      if (v9 - 1 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
        goto LABEL_13;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8 * v9 + 24) + 16) != 1)
      {
        BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(v9 - 1);
        if (v9 != 2)
        {
          --v9;
          if ((v10 & 1) != 0)
            continue;
        }
      }
      return;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

void BeamSearchDecoder.expandBeam(nextBeamNodes:logits:languageModelNode:previousNodeID:cutoff:previousScore:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, _QWORD);
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  char v56[40];

  v46 = a4;
  v45 = a3;
  v51 = a1;
  v9 = type metadata accessor for IndexSet.Index();
  v55 = *(_QWORD *)(v9 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v54 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v43 - v12;
  v13 = type metadata accessor for IndexSet();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2[3];
  v21 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v20);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  IndexSet.makeIterator()();
  v49 = v16;
  v50 = v14;
  v48 = *(void (**)(char *, uint64_t))(v14 + 8);
  v48(v16, v13);
  v22 = &v19[*(int *)(v17 + 36)];
  v43 = v47 + 16;
  v44 = a2;
  v52 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v23 = v53;
  while (1)
  {
    v52(v23, v22, v9);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    v24 = v54;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v26 = *(void (**)(char *, uint64_t))(v55 + 8);
    v26(v24, v9);
    v26(v23, v9);
    if ((v25 & 1) != 0)
      break;
    v27 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v29 = *v28;
    v27(v56, 0);
    v30 = v49;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v49, v19, v13);
    dispatch thunk of Collection.formIndex(after:)();
    v48(v30, v13);
    v31 = a2[3];
    v32 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v31);
    v33 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v29, v31, v32) + a6;
    if (v33 >= a5)
    {
      v34 = v43;
      swift_beginAccess();
      v35 = *(_QWORD *)(v47 + 40);
      v36 = *(_QWORD *)(v47 + 48);
      __swift_mutable_project_boxed_opaque_existential_1(v34, v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 16))(v45, v29, 0, v35, v36);
      swift_endAccess();
      v38 = *v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v38 = v41;
      }
      v39 = *(_QWORD *)(v38 + 16);
      if (v39 >= *(_QWORD *)(v38 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v38 = v42;
      }
      *(_QWORD *)(v38 + 16) = v39 + 1;
      v40 = v38 + 32 * v39;
      *(_QWORD *)(v40 + 32) = v37;
      *(_QWORD *)(v40 + 40) = v29;
      *(float *)(v40 + 48) = v33;
      *(_QWORD *)(v40 + 56) = v46;
      *v51 = v38;
      a2 = v44;
    }
  }
  outlined destroy of LogitPresampler?((uint64_t)v19, &demangling cache variable for type metadata for IndexingIterator<IndexSet>);
}

uint64_t BeamSearchDecoder.decode()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 368) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 368);
  OUTLINED_FUNCTION_22();
  v2 = specialized BidirectionalCollection.last.getter(*(_QWORD *)(v1 + 112));
  *(_QWORD *)(v0 + 376) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)(v2 + 16);
    v5 = MEMORY[0x24BEE4AF8];
    if (v4)
    {
      v28 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v5 = v28;
      v6 = (uint64_t *)(v3 + 32);
      v7 = *(_QWORD *)(v28 + 16);
      do
      {
        v9 = *v6;
        v6 += 4;
        v8 = v9;
        v29 = v5;
        if (v7 >= *(_QWORD *)(v5 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v5 = v29;
        }
        *(_QWORD *)(v5 + 16) = v7 + 1;
        *(_QWORD *)(v5 + 8 * v7++ + 32) = v8;
        --v4;
      }
      while (v4);
    }
    v10 = *(_QWORD *)(v0 + 368);
    specialized Set.init<A>(_:)(v5);
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v12 = v11;
    *(_QWORD *)(v0 + 384) = v11;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_22();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v10 + 16, v0 + 256);
    v13 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 288);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 256), v13);
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v10 + 72, v0 + 216);
    v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v14 + 24) + *(_QWORD *)(v14 + 24));
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v15;
    *v15 = v0;
    v15[1] = BeamSearchDecoder.decode();
    return v27(v12, v0 + 216, v13, v14);
  }
  else
  {
    v17 = *(_QWORD **)(v0 + 368);
    v18 = v17 + 2;
    OUTLINED_FUNCTION_22();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)(v17 + 2), v0 + 136);
    v19 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 136), v19);
    v21 = v17[5];
    v22 = v17[6];
    __swift_project_boxed_opaque_existential_1(v18, v21);
    v23 = *(_QWORD *)(v21 - 8);
    v24 = OUTLINED_FUNCTION_69();
    *(_QWORD *)(v0 + 416) = v24;
    (*(void (**)(void))(v23 + 16))();
    v25 = OUTLINED_FUNCTION_67(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v21);
    *(_QWORD *)(v0 + 208) = 0;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v26;
    *v26 = v0;
    v26[1] = BeamSearchDecoder.decode();
    return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v0 + 56, v25, v0 + 176, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _DWORD *v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v2, v1);
  v5 = v4;
  swift_bridgeObjectRetain();
  v6 = specialized Sequence.compactMap<A>(_:)(v3, v5);
  v7 = specialized Sequence<>.max()(v6);
  OUTLINED_FUNCTION_42();
  v8 = *(_QWORD *)(v0 + 376);
  if ((v7 & 0x100000000) != 0)
  {
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(v0 + 368) + 64);
    v21 = MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v11 = 0;
      v12 = *(float *)&v7 - v9;
      v13 = (_DWORD *)(v8 + 48);
      do
      {
        if (*(_QWORD *)(v5 + 16))
        {
          v14 = *((_QWORD *)v13 - 2);
          v15 = *(float *)v13;
          v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
          if ((v17 & 1) != 0)
          {
            _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(v5 + 56) + 40 * v16, v0 + 16);
            outlined init with take of LogitCollection((__int128 *)(v0 + 16), v0 + 96);
            BeamSearchDecoder.expandBeam(nextBeamNodes:logits:languageModelNode:previousNodeID:cutoff:previousScore:)(&v21, (_QWORD *)(v0 + 96), v14, v11, v12, v15);
            __swift_destroy_boxed_opaque_existential_1(v0 + 96);
          }
        }
        ++v11;
        v13 += 8;
      }
      while (v10 != v11);
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_42();
      v18 = v21;
    }
    else
    {
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_7_0();
      v18 = MEMORY[0x24BEE4AF8];
    }
    if (*(_QWORD *)(v18 + 16))
    {
      BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)(v18);
      OUTLINED_FUNCTION_7_0();
      v19 = BeamSearchDecoder.bestTokenPath.getter();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
    }
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError();
  swift_allocError();
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 432) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v2 + 176, &demangling cache variable for type metadata for LogitPresampler?);
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 368);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v2 = LogitCollection.max()() - *(float *)(v1 + 64);
  v11 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), v3);
  v6 = *(_QWORD *)(v3 - 8);
  v7 = OUTLINED_FUNCTION_69();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v6 + 16))(v7, v5, v3);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v3);
  BeamSearchDecoder.expandBeam(nextBeamNodes:logits:languageModelNode:previousNodeID:cutoff:previousScore:)(&v11, (_QWORD *)(v0 + 56), v8, -1, v2, 0.0);
  swift_task_dealloc();
  BeamSearchDecoder.pruneSortAppendNextStep(beamNodes:)(v11);
  swift_bridgeObjectRelease();
  v9 = BeamSearchDecoder.bestTokenPath.getter();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

{
  uint64_t v0;

  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  swift_release();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t BeamSearchDecoder.decode()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 400) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of LogitPresampler?(v4 + 216, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v4 + 408) = a1;
    outlined destroy of LogitPresampler?(v4 + 216, &demangling cache variable for type metadata for LogitPresampler?);
  }
  return swift_task_switch();
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(a1 + 16))
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
    v5 = OUTLINED_FUNCTION_54();
  }
  else
  {
    v5 = MEMORY[0x24BEE4B00];
  }
  v6 = v5;
  OUTLINED_FUNCTION_52();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, 1, &v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_25();
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Int, Int>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v4 = OUTLINED_FUNCTION_54();
  }
  else
  {
    v4 = MEMORY[0x24BEE4B00];
  }
  v6 = v4;
  v5 = OUTLINED_FUNCTION_52();
  a3(v5, 1, &v6);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_25();
}

unint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t specialized Sequence<>.max()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[2];
  if (!v1)
    return 0;
  result = a1[4];
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = a1 + 5;
    do
    {
      v7 = *v5++;
      v6 = v7;
      if (result <= v7)
        result = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

void specialized Sequence<>.max()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t (*v27)(uint64_t, _QWORD);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD v31[2];
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t, uint64_t);
  char *v37;
  char *v38;

  OUTLINED_FUNCTION_51();
  v1 = type metadata accessor for IndexSet.Index();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v31 - v6;
  v8 = type metadata accessor for IndexSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_59();
  v12 = v11 - v10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_59();
  v16 = v15 - v14;
  v33 = v9;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v36(v12, v0, v8);
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF458]);
  dispatch thunk of Sequence.makeIterator()();
  v18 = v16 + *(int *)(v13 + 36);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v35(v7, v18, v1);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v17, MEMORY[0x24BDCF460]);
  OUTLINED_FUNCTION_43();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
  v34 = v19;
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = v5;
  OUTLINED_FUNCTION_60((uint64_t)v5);
  v37 = v7;
  OUTLINED_FUNCTION_60((uint64_t)v7);
  if ((v20 & 1) == 0)
  {
    v31[1] = v20;
    v21 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_34();
    v23 = *v22;
    OUTLINED_FUNCTION_68(v21);
    OUTLINED_FUNCTION_50(v12);
    OUTLINED_FUNCTION_71();
    v32 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v33 = v12;
    v32(v12, v8);
    v24 = (uint64_t)v37;
    while (1)
    {
      v35((char *)v24, v18, v1);
      v25 = (uint64_t)v38;
      OUTLINED_FUNCTION_43();
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      OUTLINED_FUNCTION_60(v25);
      OUTLINED_FUNCTION_60(v24);
      if ((v26 & 1) != 0)
        break;
      v27 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_34();
      v29 = *v28;
      OUTLINED_FUNCTION_68(v27);
      v30 = v33;
      OUTLINED_FUNCTION_50(v33);
      OUTLINED_FUNCTION_71();
      v32(v30, v8);
      if (v23 <= v29)
        v23 = v29;
    }
  }
  outlined destroy of LogitPresampler?(v16, &demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  OUTLINED_FUNCTION_31();
}

uint64_t BeamSearchDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BeamSearchDecoder.__deallocating_deinit()
{
  BeamSearchDecoder.deinit();
  return swift_deallocClassInstance();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  OUTLINED_FUNCTION_64();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_66();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_5_0();
}

{
  OUTLINED_FUNCTION_66();
  type metadata accessor for Prompt.SpecialToken();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (uint64_t (*)(uint64_t))MEMORY[0x24BEB87B8], MEMORY[0x24BEB87C8]);
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_5_0();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1)
{
  Swift::Int v2;
  _BYTE v4[72];

  OUTLINED_FUNCTION_64();
  specialized Array<A>.hash(into:)((uint64_t)v4, (uint64_t)a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    v7 = a1[2];
    while (1)
    {
      v8 = *(_QWORD **)(*(_QWORD *)(v2 + 48) + 8 * result);
      if (v8[2] == v7)
      {
        if (!v7 || v8 == a1)
          return result;
        if (v8[4] == a1[4])
        {
          if (v7 == 1)
            return result;
          if (v8[5] == a1[5])
            break;
        }
      }
LABEL_12:
      result = (result + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        return result;
    }
    v9 = v8 + 6;
    v10 = v7 - 2;
    v11 = a1 + 6;
    while (v10)
    {
      v13 = *v9++;
      v12 = v13;
      v14 = *v11++;
      --v10;
      if (v12 != v14)
        goto LABEL_12;
    }
  }
  return result;
}

void specialized __RawDictionaryStorage.find<A>(_:hashValue:)()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  unint64_t *v20;
  uint64_t v21;

  OUTLINED_FUNCTION_51();
  v20 = v1;
  v21 = v2;
  v3 = v0;
  v5 = v4;
  v18 = v6;
  v19 = v7;
  v8 = v7(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - v10;
  v12 = -1 << *(_BYTE *)(v3 + 32);
  v13 = v5 & ~v12;
  if (((*(_QWORD *)(v3 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v3 + 48) + v15 * v13, v8);
      lazy protocol witness table accessor for type UUID and conformance UUID(v20, v19, v21);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  OUTLINED_FUNCTION_31();
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<MaskedLanguageModel.Node>, (uint64_t)&type metadata for MaskedLanguageModel.Node, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<TGICAPILanguageModel.NodeState>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  char *isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v0 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v1 + 16) + 1, 1, v1);
  OUTLINED_FUNCTION_49();
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<CompositeLanguageModel.Node>, (uint64_t)&type metadata for CompositeLanguageModel.Node, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<OnDeviceInferenceSuspendedFetch>, (uint64_t)type metadata accessor for OnDeviceInferenceSuspendedFetch, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<OneTokenHealingPrefixMatchingLanguageModel.NodeState>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<TwoStageSpeculativeDecoder.BufferedToken>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<ThreeStageSpeculativeDecoder.BufferedToken>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>, (uint64_t)specialized _ArrayBuffer._copyContents(subRange:initializing:), (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;

  v7 = *v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v3 = a3(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v7 + 16) + 1, 1, v7, a1, a2);
  OUTLINED_FUNCTION_5_0();
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;

  v9 = *v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v9;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v4 = a4(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v9 + 16) + 1, 1, v9, a1, a2, a3);
  OUTLINED_FUNCTION_5_0();
}

void specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  _QWORD *v0;
  char v1;
  char v2;
  char v3;
  _BOOL8 v4;
  uint64_t (*v5)(_BOOL8);

  OUTLINED_FUNCTION_55();
  if (!(v2 ^ v3 | v1))
  {
    v4 = OUTLINED_FUNCTION_65();
    *v0 = v5(v4);
  }
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

{
  _QWORD *v0;
  char v1;
  char v2;
  char v3;
  _BOOL8 v4;
  uint64_t (*v5)(_BOOL8);

  OUTLINED_FUNCTION_55();
  if (!(v2 ^ v3 | v1))
  {
    v4 = OUTLINED_FUNCTION_65();
    *v0 = v5(v4);
  }
}

{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

char *specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(char *result)
{
  uint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v2 >> 1))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), (int64_t)(result + 1), 1, *v1);
    *v1 = (uint64_t)result;
  }
  return result;
}

float partial apply for closure #1 in BeamSearchDecoder.append(prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;

  return closure #1 in BeamSearchDecoder.append(prompt:)(a5, a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  OUTLINED_FUNCTION_29();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_32();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_2_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_44((uint64_t)(v12 - 32) / 40);
  }
  if ((v1 & 1) != 0)
  {
    v13 = (char *)OUTLINED_FUNCTION_62();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v16, v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_5_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_20(v12 - 32);
  }
  else
  {
    v11 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, (uint64_t)v11 + 32);
  }
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)OUTLINED_FUNCTION_2_0();
    v6 = OUTLINED_FUNCTION_18(v11);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, v2 + 32);
  }
  OUTLINED_FUNCTION_16();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_29();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_32();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_2_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_44((uint64_t)(v12 - 32) / 24);
  }
  if ((v1 & 1) != 0)
  {
    v13 = (char *)OUTLINED_FUNCTION_62();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v16, v17, v18, v19);
  }
  OUTLINED_FUNCTION_5_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  OUTLINED_FUNCTION_29();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_32();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_44((uint64_t)(v12 - 32) / 8);
  }
  if ((v1 & 1) != 0)
  {
    v13 = (char *)OUTLINED_FUNCTION_62();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v14, v15);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v16, v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_5_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)OUTLINED_FUNCTION_2_0();
    v6 = OUTLINED_FUNCTION_18(v11);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, v2 + 32);
  }
  OUTLINED_FUNCTION_16();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_20(v12 - 32);
  }
  else
  {
    v11 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, (uint64_t)v11 + 32);
  }
  OUTLINED_FUNCTION_5_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)OUTLINED_FUNCTION_2_0();
    v6 = OUTLINED_FUNCTION_18(v11);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, v2 + 32);
  }
  OUTLINED_FUNCTION_16();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;

  OUTLINED_FUNCTION_14();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_12();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v2)
  {
    OUTLINED_FUNCTION_11(v6, v7, v8, v9, v10);
    v11 = (const void *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_20(v12 - 32);
  }
  else
  {
    v11 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_21();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    OUTLINED_FUNCTION_13(v6, v7, (uint64_t)v11 + 32);
  }
  OUTLINED_FUNCTION_5_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_12();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(node: Int, token: Int)>);
    v11 = (char *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_46(v12);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v9, v13);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, a4);
  }
  OUTLINED_FUNCTION_37();
}

{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_12();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  else
  {
    v6 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v6 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v6;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Float)>);
    v11 = (char *)OUTLINED_FUNCTION_6_0();
    v12 = _swift_stdlib_malloc_size(v11);
    OUTLINED_FUNCTION_46(v12);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v9, v13);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v13, a4);
  }
  OUTLINED_FUNCTION_37();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  uint64_t result;

  OUTLINED_FUNCTION_29();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v9 != v10)
    {
      OUTLINED_FUNCTION_12();
      if (v9)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (!v12)
  {
    v16 = (const void *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_11(v3, v4, v5, v6, v7);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))v1)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (const void *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_2();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_44((uint64_t)(v17 - v15) / v14);
LABEL_18:
  v1(0);
  OUTLINED_FUNCTION_72();
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + v19, v11, (unint64_t)v16 + v19, v1);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v20 = OUTLINED_FUNCTION_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v20, v21, v22, v23, v24);
  }
  return (uint64_t)v16;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return MEMORY[0x24BEE2660]();
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = &__dst[32 * v4];
    if (v5 >= v6 || &v5[32 * v4] <= __dst)
    {
      memcpy(__dst, v5, 32 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 3 * v4;
    v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 5 * v4;
    v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_7_0();
    return v6;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_36();
LABEL_11:
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (draftModel: E5TransformerLanguageModel, behavior: DraftingBehavior));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  if (v6 >= a3 + 40 * v5 || v6 + 40 * v5 <= a3)
  {
    OUTLINED_FUNCTION_11(a1, a2, a3, a4, a5);
    OUTLINED_FUNCTION_41();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_38();
    return;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_36();
LABEL_11:
  OUTLINED_FUNCTION_9();
  __break(1u);
}

{
  uint64_t v5;
  unint64_t v6;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  if (v6 >= a3 + 8 * v5 || v6 + 8 * v5 <= a3)
  {
    OUTLINED_FUNCTION_11(a1, a2, a3, a4, a5);
    OUTLINED_FUNCTION_41();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_38();
    return;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_36();
LABEL_11:
  OUTLINED_FUNCTION_9();
  __break(1u);
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_4();
    return;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_36();
LABEL_11:
  OUTLINED_FUNCTION_9();
  __break(1u);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[72 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 72 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEB86E8]);
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    result = OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    OUTLINED_FUNCTION_70();
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    OUTLINED_FUNCTION_70();
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(char *);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const void *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  char *v16;

  OUTLINED_FUNCTION_29();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_12();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_32();
  if (v3)
  {
    OUTLINED_FUNCTION_11(v7, v8, v9, v10, v11);
    v12 = (const void *)OUTLINED_FUNCTION_6_0();
    v13 = _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_44((uint64_t)(v13 - 32) / 8);
  }
  v14 = (char *)OUTLINED_FUNCTION_62();
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v15, v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v14);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_15();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_12();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v4)
  {
    OUTLINED_FUNCTION_11(v8, v9, v10, v11, v12);
    v13 = (const void *)OUTLINED_FUNCTION_6_0();
    v14 = _swift_stdlib_malloc_size(v13);
    OUTLINED_FUNCTION_20(v14 - 32);
  }
  v15 = OUTLINED_FUNCTION_28();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_15();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_12();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v4)
  {
    OUTLINED_FUNCTION_11(v8, v9, v10, v11, v12);
    v13 = (const void *)OUTLINED_FUNCTION_6_0();
    v14 = _swift_stdlib_malloc_size(v13);
    OUTLINED_FUNCTION_20(v14 - 32);
  }
  v15 = OUTLINED_FUNCTION_28();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_15();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_12();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v4)
  {
    OUTLINED_FUNCTION_11(v8, v9, v10, v11, v12);
    v13 = (const void *)OUTLINED_FUNCTION_6_0();
    v14 = _swift_stdlib_malloc_size(v13);
    OUTLINED_FUNCTION_20(v14 - 32);
  }
  v15 = OUTLINED_FUNCTION_28();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  void (*v1)(unint64_t, uint64_t, unint64_t);
  void (*v2)(_QWORD);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_15();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_12();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_11(v4, v5, v6, v7, v8);
  v14 = *(_QWORD *)(((uint64_t (*)(_QWORD))v2)(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1)
    goto LABEL_23;
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_18:
  v2(0);
  OUTLINED_FUNCTION_72();
  v21 = (unint64_t)v17 + v20;
  v22 = v0 + v20;
  if ((v3 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v22, v12, v21, v2);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v22, v12, v21);
  }
  OUTLINED_FUNCTION_30();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_15();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_12();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v4)
  {
    OUTLINED_FUNCTION_11(v8, v9, v10, v11, v12);
    v13 = (const void *)OUTLINED_FUNCTION_6_0();
    v14 = _swift_stdlib_malloc_size(v13);
    OUTLINED_FUNCTION_20(v14 - 32);
  }
  v15 = OUTLINED_FUNCTION_28();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_15();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_12();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_3_1();
    }
  }
  OUTLINED_FUNCTION_10();
  if (v4)
  {
    OUTLINED_FUNCTION_11(v8, v9, v10, v11, v12);
    v13 = (_QWORD *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_18(v13);
  }
  v14 = OUTLINED_FUNCTION_28();
  if ((v3 & 1) != 0)
  {
    v2(v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v14);
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_16();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LogitCollection>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  v12 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  swift_release_n();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_48();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v1 = (const void *)OUTLINED_FUNCTION_6_0();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_19(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_24();
    if (!v7)
      __break(1u);
  }
  OUTLINED_FUNCTION_17();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  char v3;

  OUTLINED_FUNCTION_48();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v1 = (const void *)OUTLINED_FUNCTION_6_0();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_19(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_24();
    if (!v3)
      __break(1u);
  }
  OUTLINED_FUNCTION_17();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_48();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v1 = (const void *)OUTLINED_FUNCTION_6_0();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_19(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_24();
    if (!v7)
      __break(1u);
  }
  OUTLINED_FUNCTION_17();
}

unint64_t lazy protocol witness table accessor for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError;
  if (!lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for BeamSearchDecoder.NoValidGenerationError, &type metadata for BeamSearchDecoder.NoValidGenerationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BeamSearchDecoder.NoValidGenerationError and conformance BeamSearchDecoder.NoValidGenerationError);
  }
  return result;
}

uint64_t type metadata accessor for BeamSearchDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for BeamSearchDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BeamSearchDecoder.__allocating_init(languageModel:maxActiveNodesPerStep:logBeamWidth:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for BeamSearchDecoder.NoValidGenerationError()
{
  return &type metadata for BeamSearchDecoder.NoValidGenerationError;
}

uint64_t initializeBufferWithCopyOfBuffer for BeamSearchDecoder.BeamNode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BeamSearchDecoder.BeamNode(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BeamSearchDecoder.BeamNode(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void *type metadata accessor for BeamSearchDecoder.BeamNode()
{
  return &unk_2519DE980;
}

uint64_t outlined copy of MetadataSpecialToken(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

void _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_49();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  size_t v6;
  _QWORD v7[3];

  v2 = (_QWORD *)(a2 - a1);
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    if ((uint64_t)v2 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v5 = (_QWORD *)OUTLINED_FUNCTION_6_0();
      v6 = _swift_stdlib_malloc_size(v5);
      OUTLINED_FUNCTION_45(v6);
    }
    if (specialized Sequence._copySequenceContents(initializing:)(v7, v5 + 4, (uint64_t)v2, a1, a2) == v2)
    {
LABEL_8:
      OUTLINED_FUNCTION_4();
      return;
    }
  }
  __break(1u);
}

{
  _QWORD *v4;
  size_t v5;

  if (a2)
  {
    if (a2 > 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      v4 = (_QWORD *)OUTLINED_FUNCTION_6_0();
      v5 = _swift_stdlib_malloc_size(v4);
      v4[2] = a2;
      v4[3] = 2 * ((uint64_t)(v5 - 32) / 4);
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
  }
  OUTLINED_FUNCTION_37();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  const void *v8;
  size_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    if (v5 > 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
      v8 = (const void *)OUTLINED_FUNCTION_6_0();
      v9 = _swift_stdlib_malloc_size(v8);
      OUTLINED_FUNCTION_45(v9);
    }
    if (v4 != a3)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(a2 + 8 * a3, v5);
LABEL_8:
      OUTLINED_FUNCTION_5_0();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  _OWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  Swift::Int v26;
  uint64_t v27;
  float v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  Swift::Int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return result;
    }
    goto LABEL_124;
  }
  v5 = result;
  result = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v92 = a1;
  v93 = result;
  v97 = v6;
  v95 = v3;
  if (v3 <= 0)
  {
    v9 = MEMORY[0x24BEE4AF8];
    v36 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v36 < 2)
    {
LABEL_101:
      result = swift_bridgeObjectRelease();
      if (v95 >= -1)
      {
        *(_QWORD *)(v93 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    v85 = *v92;
    while (1)
    {
      v86 = v36 - 2;
      if (v36 < 2)
        break;
      if (!v85)
        goto LABEL_133;
      v87 = *(_QWORD *)(v9 + 32 + 16 * v86);
      v88 = *(_QWORD *)(v9 + 32 + 16 * (v36 - 1) + 8);
      result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 32 * v87), (char *)(v85 + 32 * *(_QWORD *)(v9 + 32 + 16 * (v36 - 1))), v85 + 32 * v88, v97);
      if (v1)
        goto LABEL_86;
      if (v88 < v87)
        goto LABEL_119;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        v9 = result;
      }
      if (v86 >= *(_QWORD *)(v9 + 16))
        goto LABEL_120;
      v89 = (_QWORD *)(v9 + 32 + 16 * v86);
      *v89 = v87;
      v89[1] = v88;
      v90 = *(_QWORD *)(v9 + 16);
      if (v36 > v90)
        goto LABEL_121;
      result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v36 - 1)), (const void *)(v9 + 32 + 16 * v36), 16 * (v90 - v36));
      *(_QWORD *)(v9 + 16) = v90 - 1;
      v36 = v90 - 1;
      if (v90 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  v7 = 0;
  v8 = *a1;
  v91 = *a1 + 80;
  v9 = MEMORY[0x24BEE4AF8];
  v94 = v5;
  v96 = *a1;
  while (1)
  {
    v10 = v7++;
    if (v7 < v3)
    {
      v11 = *(float *)(v8 + 32 * v7 + 16);
      v12 = *(float *)(v8 + 32 * v10 + 16);
      v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        v13 = (float *)(v91 + 32 * v10);
        v14 = v11;
        while (1)
        {
          v15 = v14;
          v14 = *v13;
          if (v12 < v11 == v15 >= *v13)
            break;
          ++v7;
          v13 += 8;
          if (v7 >= v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      if (v12 < v11)
      {
        if (v7 < v10)
          goto LABEL_126;
        if (v10 < v7)
        {
          v16 = 32 * v7;
          v17 = 32 * v10;
          v18 = v7;
          v19 = v10;
          do
          {
            if (v19 != --v18)
            {
              if (!v8)
                goto LABEL_132;
              v20 = (_OWORD *)(v8 + v17);
              v21 = v8 + v16;
              v22 = *(_DWORD *)(v8 + v17 + 16);
              v23 = *(_QWORD *)(v8 + v17 + 24);
              v24 = *(_OWORD *)(v8 + v17);
              v25 = *(_OWORD *)(v8 + v16 - 16);
              *v20 = *(_OWORD *)(v8 + v16 - 32);
              v20[1] = v25;
              *(_OWORD *)(v21 - 32) = v24;
              *(_DWORD *)(v21 - 16) = v22;
              *(_QWORD *)(v21 - 8) = v23;
            }
            ++v19;
            v16 -= 32;
            v17 += 32;
          }
          while (v19 < v18);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10))
        goto LABEL_123;
      if (v7 - v10 < v5)
      {
        v26 = v10 + v5;
        if (__OFADD__(v10, v5))
          goto LABEL_127;
        if (v26 >= v3)
          v26 = v3;
        if (v26 < v10)
          goto LABEL_128;
        if (v7 != v26)
        {
          v27 = v8 + 32 * v7;
          do
          {
            v28 = *(float *)(v8 + 32 * v7 + 16);
            v29 = v10;
            v30 = v27;
            do
            {
              if (*(float *)(v30 - 16) >= v28)
                break;
              if (!v8)
                goto LABEL_130;
              v31 = *(_QWORD *)(v30 + 24);
              v32 = *(_OWORD *)v30;
              v33 = *(_OWORD *)(v30 - 16);
              *(_OWORD *)v30 = *(_OWORD *)(v30 - 32);
              *(_OWORD *)(v30 + 16) = v33;
              *(float *)(v30 - 16) = v28;
              *(_QWORD *)(v30 - 8) = v31;
              *(_OWORD *)(v30 - 32) = v32;
              v30 -= 32;
              ++v29;
            }
            while (v7 != v29);
            ++v7;
            v27 += 32;
          }
          while (v7 != v26);
          v7 = v26;
        }
      }
    }
    if (v7 < v10)
      goto LABEL_122;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
      v9 = result;
    }
    v35 = *(_QWORD *)(v9 + 16);
    v34 = *(_QWORD *)(v9 + 24);
    v36 = v35 + 1;
    v8 = v96;
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, (char *)v9);
      v8 = v96;
      v9 = result;
    }
    *(_QWORD *)(v9 + 16) = v36;
    v37 = v9 + 32;
    v38 = (Swift::Int *)(v9 + 32 + 16 * v35);
    *v38 = v10;
    v38[1] = v7;
    if (v35)
      break;
    v36 = 1;
LABEL_81:
    v5 = v94;
    v3 = v95;
    if (v7 >= v95)
      goto LABEL_90;
  }
  while (1)
  {
    v39 = v36 - 1;
    if (v36 >= 4)
    {
      v44 = v37 + 16 * v36;
      v45 = *(_QWORD *)(v44 - 64);
      v46 = *(_QWORD *)(v44 - 56);
      v50 = __OFSUB__(v46, v45);
      v47 = v46 - v45;
      if (v50)
        goto LABEL_107;
      v49 = *(_QWORD *)(v44 - 48);
      v48 = *(_QWORD *)(v44 - 40);
      v50 = __OFSUB__(v48, v49);
      v42 = v48 - v49;
      v43 = v50;
      if (v50)
        goto LABEL_108;
      v51 = v36 - 2;
      v52 = (uint64_t *)(v37 + 16 * (v36 - 2));
      v54 = *v52;
      v53 = v52[1];
      v50 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v50)
        goto LABEL_109;
      v50 = __OFADD__(v42, v55);
      v56 = v42 + v55;
      if (v50)
        goto LABEL_111;
      if (v56 >= v47)
      {
        v74 = (uint64_t *)(v37 + 16 * v39);
        v76 = *v74;
        v75 = v74[1];
        v50 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v50)
          goto LABEL_117;
        v67 = v42 < v77;
        goto LABEL_70;
      }
    }
    else
    {
      if (v36 != 3)
      {
        v68 = *(_QWORD *)(v9 + 32);
        v69 = *(_QWORD *)(v9 + 40);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
        goto LABEL_64;
      }
      v41 = *(_QWORD *)(v9 + 32);
      v40 = *(_QWORD *)(v9 + 40);
      v50 = __OFSUB__(v40, v41);
      v42 = v40 - v41;
      v43 = v50;
    }
    if ((v43 & 1) != 0)
      goto LABEL_110;
    v51 = v36 - 2;
    v57 = (uint64_t *)(v37 + 16 * (v36 - 2));
    v59 = *v57;
    v58 = v57[1];
    v60 = __OFSUB__(v58, v59);
    v61 = v58 - v59;
    v62 = v60;
    if (v60)
      goto LABEL_112;
    v63 = (uint64_t *)(v37 + 16 * v39);
    v65 = *v63;
    v64 = v63[1];
    v50 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v50)
      goto LABEL_114;
    if (__OFADD__(v61, v66))
      goto LABEL_116;
    if (v61 + v66 >= v42)
    {
      v67 = v42 < v66;
LABEL_70:
      if (v67)
        v39 = v51;
      goto LABEL_72;
    }
LABEL_64:
    if ((v62 & 1) != 0)
      goto LABEL_113;
    v70 = (uint64_t *)(v37 + 16 * v39);
    v72 = *v70;
    v71 = v70[1];
    v50 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v50)
      goto LABEL_115;
    if (v73 < v61)
      goto LABEL_81;
LABEL_72:
    v78 = v9;
    v79 = v39 - 1;
    if (v39 - 1 >= v36)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8)
      goto LABEL_131;
    v80 = (uint64_t *)(v37 + 16 * v79);
    v81 = *v80;
    v82 = (_QWORD *)(v37 + 16 * v39);
    v83 = v82[1];
    result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 32 * *v80), (char *)(v8 + 32 * *v82), v8 + 32 * v83, v97);
    if (v1)
      break;
    if (v83 < v81)
      goto LABEL_104;
    if (v39 > *(_QWORD *)(v78 + 16))
      goto LABEL_105;
    *v80 = v81;
    *(_QWORD *)(v37 + 16 * v79 + 8) = v83;
    v84 = *(_QWORD *)(v78 + 16);
    if (v39 >= v84)
      goto LABEL_106;
    v9 = v78;
    v36 = v84 - 1;
    result = (uint64_t)memmove((void *)(v37 + 16 * v39), v82 + 2, 16 * (v84 - 1 - v39));
    *(_QWORD *)(v78 + 16) = v84 - 1;
    v8 = v96;
    if (v84 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  result = swift_bridgeObjectRelease();
  if (v95 < -1)
    goto LABEL_125;
  *(_QWORD *)(v93 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t *v94;
  Swift::Int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;

  v3 = a1[1];
  swift_retain_n();
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      swift_release_n();
      return swift_release();
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v5 = v4;
  v6 = v1;
  v96 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v97 = v3;
  v101 = v7;
  v94 = a1;
  if (v3 <= 0)
  {
    v102 = (char *)MEMORY[0x24BEE4AF8];
    v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_93:
    if (v23 < 2)
    {
LABEL_106:
      swift_bridgeObjectRelease();
      if (v97 >= -1)
      {
        *(_QWORD *)(v96 + 16) = 0;
        goto LABEL_110;
      }
      goto LABEL_138;
    }
    v80 = *v94;
    v81 = v6;
    v82 = v102;
    v105 = *v94;
    while (1)
    {
      v83 = v23 - 2;
      if (v23 < 2)
        break;
      if (!v80)
        goto LABEL_142;
      v84 = v81;
      v103 = (uint64_t)v82;
      v85 = *(_QWORD *)&v82[16 * v83 + 32];
      v86 = *(_QWORD *)&v82[16 * v23 + 24];
      v87 = (char *)(v80 + 8 * v85);
      v88 = (char *)(v80 + 8 * *(_QWORD *)&v82[16 * v23 + 16]);
      v89 = v80 + 8 * v86;
      swift_retain();
      specialized _merge<A>(low:mid:high:buffer:by:)(v87, v88, v89, v101);
      v81 = v84;
      if (v84)
        goto LABEL_108;
      if (v86 < v85)
        goto LABEL_128;
      v82 = (char *)v103;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v82 = specialized _ArrayBuffer._consumeAndCreateNew()(v103);
      if (v83 >= *((_QWORD *)v82 + 2))
        goto LABEL_129;
      v90 = &v82[16 * v83 + 32];
      *(_QWORD *)v90 = v85;
      *((_QWORD *)v90 + 1) = v86;
      v91 = *((_QWORD *)v82 + 2);
      if (v23 > v91)
        goto LABEL_130;
      memmove(&v82[16 * v23 + 16], &v82[16 * v23 + 32], 16 * (v91 - v23));
      *((_QWORD *)v82 + 2) = v91 - 1;
      v23 = v91 - 1;
      v80 = v105;
      if (v91 <= 2)
        goto LABEL_106;
    }
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v95 = v5;
  v8 = 0;
  v99 = *a1;
  v93 = *a1 - 8;
  v102 = (char *)MEMORY[0x24BEE4AF8];
  v9 = v3;
  while (1)
  {
    v10 = v8 + 1;
    if (v8 + 1 >= v9)
    {
      v11 = v99;
      goto LABEL_13;
    }
    v11 = v99;
    v12 = E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(_QWORD *)(v99 + 8 * v8), *(_QWORD *)(v99 + 8 * v10));
    v10 = v8 + 2;
    if (v8 + 2 >= v9)
      goto LABEL_10;
    v13 = v8;
    do
    {
      if (((v12 ^ E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(_QWORD *)(v99 + 8 * v13 + 8), *(_QWORD *)(v99 + 8 * v13 + 16))) & 1) != 0)
      {
        v10 = v13 + 2;
        if ((v12 & 1) != 0)
          goto LABEL_81;
        goto LABEL_13;
      }
      ++v13;
    }
    while (v13 + 2 < v9);
    v10 = v9;
LABEL_10:
    if ((v12 & 1) != 0)
    {
LABEL_81:
      if (v10 >= v8)
      {
        if (v8 < v10)
        {
          v74 = v10 - 1;
          v75 = v8;
          do
          {
            if (v75 != v74)
            {
              if (!v99)
                goto LABEL_141;
              v76 = *(_QWORD *)(v99 + 8 * v75);
              *(_QWORD *)(v99 + 8 * v75) = *(_QWORD *)(v99 + 8 * v74);
              *(_QWORD *)(v99 + 8 * v74) = v76;
            }
            v55 = ++v75 < v74--;
          }
          while (v55);
        }
        goto LABEL_13;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      OUTLINED_FUNCTION_32_2();
      __break(1u);
LABEL_140:
      OUTLINED_FUNCTION_32_2();
      __break(1u);
LABEL_141:
      OUTLINED_FUNCTION_32_2();
      __break(1u);
LABEL_142:
      result = OUTLINED_FUNCTION_32_2();
      __break(1u);
      return result;
    }
LABEL_13:
    if (v10 < v9)
    {
      if (__OFSUB__(v10, v8))
        goto LABEL_132;
      if (v10 - v8 < v95)
      {
        if (__OFADD__(v8, v95))
          goto LABEL_135;
        if (v8 + v95 >= v9)
          v14 = v9;
        else
          v14 = v8 + v95;
        if (v14 < v8)
          goto LABEL_136;
        if (v10 != v14)
        {
          v15 = (unint64_t *)(v93 + 8 * v10);
          do
          {
            v16 = *(_QWORD *)(v11 + 8 * v10);
            v17 = v8;
            v18 = v15;
            do
            {
              if ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*v18, v16) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_139;
              v19 = *v18;
              v16 = v18[1];
              *v18 = v16;
              v18[1] = v19;
              --v18;
              ++v17;
            }
            while (v10 != v17);
            ++v10;
            ++v15;
          }
          while (v10 != v14);
          v10 = v14;
        }
      }
    }
    v20 = v102;
    if (v10 < v8)
      goto LABEL_131;
    v98 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v77 = (char *)OUTLINED_FUNCTION_15_3();
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77, v78, v79, v102);
    }
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    v23 = v22 + 1;
    if (v22 >= v21 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v23;
    v100 = v20 + 32;
    v24 = &v20[16 * v22 + 32];
    *(_QWORD *)v24 = v8;
    *((_QWORD *)v24 + 1) = v98;
    v102 = v20;
    if (v22)
      break;
    v23 = 1;
    v25 = v6;
LABEL_78:
    v6 = v25;
    v9 = v97;
    v8 = v98;
    if (v98 >= v97)
      goto LABEL_93;
  }
  v25 = v6;
  v26 = v20 + 32;
  while (1)
  {
    v27 = v23 - 1;
    if (v23 >= 4)
    {
      v32 = &v26[16 * v23];
      v33 = *((_QWORD *)v32 - 8);
      v34 = *((_QWORD *)v32 - 7);
      v38 = __OFSUB__(v34, v33);
      v35 = v34 - v33;
      if (v38)
        goto LABEL_116;
      v37 = *((_QWORD *)v32 - 6);
      v36 = *((_QWORD *)v32 - 5);
      v38 = __OFSUB__(v36, v37);
      v30 = v36 - v37;
      v31 = v38;
      if (v38)
        goto LABEL_117;
      v39 = v23 - 2;
      v40 = &v26[16 * v23 - 32];
      v42 = *(_QWORD *)v40;
      v41 = *((_QWORD *)v40 + 1);
      v38 = __OFSUB__(v41, v42);
      v43 = v41 - v42;
      if (v38)
        goto LABEL_118;
      v38 = __OFADD__(v30, v43);
      v44 = v30 + v43;
      if (v38)
        goto LABEL_120;
      if (v44 >= v35)
      {
        v62 = &v26[16 * v27];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v38 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v38)
          goto LABEL_126;
        v55 = v30 < v65;
        goto LABEL_67;
      }
    }
    else
    {
      if (v23 != 3)
      {
        v56 = *((_QWORD *)v20 + 4);
        v57 = *((_QWORD *)v20 + 5);
        v38 = __OFSUB__(v57, v56);
        v49 = v57 - v56;
        v50 = v38;
        goto LABEL_61;
      }
      v29 = *((_QWORD *)v20 + 4);
      v28 = *((_QWORD *)v20 + 5);
      v38 = __OFSUB__(v28, v29);
      v30 = v28 - v29;
      v31 = v38;
    }
    if ((v31 & 1) != 0)
      goto LABEL_119;
    v39 = v23 - 2;
    v45 = &v26[16 * v23 - 32];
    v47 = *(_QWORD *)v45;
    v46 = *((_QWORD *)v45 + 1);
    v48 = __OFSUB__(v46, v47);
    v49 = v46 - v47;
    v50 = v48;
    if (v48)
      goto LABEL_121;
    v51 = &v26[16 * v27];
    v53 = *(_QWORD *)v51;
    v52 = *((_QWORD *)v51 + 1);
    v38 = __OFSUB__(v52, v53);
    v54 = v52 - v53;
    if (v38)
      goto LABEL_123;
    if (__OFADD__(v49, v54))
      goto LABEL_125;
    if (v49 + v54 >= v30)
    {
      v55 = v30 < v54;
LABEL_67:
      if (v55)
        v27 = v39;
      goto LABEL_69;
    }
LABEL_61:
    if ((v50 & 1) != 0)
      goto LABEL_122;
    v58 = &v26[16 * v27];
    v60 = *(_QWORD *)v58;
    v59 = *((_QWORD *)v58 + 1);
    v38 = __OFSUB__(v59, v60);
    v61 = v59 - v60;
    if (v38)
      goto LABEL_124;
    if (v61 < v49)
      goto LABEL_78;
LABEL_69:
    v66 = v27 - 1;
    if (v27 - 1 >= v23)
    {
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    if (!v99)
      goto LABEL_140;
    v67 = &v26[16 * v66];
    v68 = *(_QWORD *)v67;
    v69 = v27;
    v70 = &v26[16 * v27];
    v71 = *((_QWORD *)v70 + 1);
    v104 = (char *)(v99 + 8 * *(_QWORD *)v67);
    v72 = (char *)(v99 + 8 * *(_QWORD *)v70);
    swift_retain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v104, v72, v99 + 8 * v71, v101);
    if (v25)
      break;
    if (v71 < v68)
      goto LABEL_113;
    if (v69 > *((_QWORD *)v102 + 2))
      goto LABEL_114;
    *(_QWORD *)v67 = v68;
    v26 = v100;
    *(_QWORD *)&v100[16 * v66 + 8] = v71;
    v73 = *((_QWORD *)v102 + 2);
    if (v69 >= v73)
      goto LABEL_115;
    v20 = v102;
    v23 = v73 - 1;
    memmove(v70, v70 + 16, 16 * (v73 - 1 - v69));
    *((_QWORD *)v102 + 2) = v73 - 1;
    if (v73 <= 2)
      goto LABEL_78;
  }
LABEL_108:
  swift_bridgeObjectRelease();
  if (v97 < -1)
    goto LABEL_134;
  *(_QWORD *)(v96 + 16) = 0;
LABEL_110:
  OUTLINED_FUNCTION_32_2();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t *v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;

  v3 = a1[1];
  swift_retain_n();
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
      {
        swift_retain();
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      swift_release_n();
      return swift_release_n();
    }
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v5 = v4;
  v6 = v1;
  v93 = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v94 = v3;
  v98 = v7;
  v91 = a1;
  if (v3 <= 0)
  {
    v99 = (char *)MEMORY[0x24BEE4AF8];
    v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_94:
    if (v23 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease();
      if (v94 >= -1)
      {
        *(_QWORD *)(v93 + 16) = 0;
        goto LABEL_109;
      }
      goto LABEL_137;
    }
    v77 = *v91;
    v78 = v6;
    v79 = v99;
    v102 = *v91;
    while (1)
    {
      v80 = v23 - 2;
      if (v23 < 2)
        break;
      if (!v77)
        goto LABEL_141;
      v81 = v78;
      v100 = (uint64_t)v79;
      v82 = *(_QWORD *)&v79[16 * v80 + 32];
      v83 = *(_QWORD *)&v79[16 * v23 + 24];
      v84 = (char *)(v77 + 8 * v82);
      v85 = (char *)(v77 + 8 * *(_QWORD *)&v79[16 * v23 + 16]);
      v86 = v77 + 8 * v83;
      swift_retain();
      specialized _merge<A>(low:mid:high:buffer:by:)(v84, v85, v86, v98);
      v78 = v81;
      if (v81)
        goto LABEL_107;
      if (v83 < v82)
        goto LABEL_127;
      v79 = (char *)v100;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v100);
      if (v80 >= *((_QWORD *)v79 + 2))
        goto LABEL_128;
      v87 = &v79[16 * v80 + 32];
      *(_QWORD *)v87 = v82;
      *((_QWORD *)v87 + 1) = v83;
      v88 = *((_QWORD *)v79 + 2);
      if (v23 > v88)
        goto LABEL_129;
      memmove(&v79[16 * v23 + 16], &v79[16 * v23 + 32], 16 * (v88 - v23));
      *((_QWORD *)v79 + 2) = v88 - 1;
      v23 = v88 - 1;
      v77 = v102;
      if (v88 <= 2)
        goto LABEL_105;
    }
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v92 = v5;
  v8 = 0;
  v96 = *a1;
  v90 = *a1 - 8;
  v99 = (char *)MEMORY[0x24BEE4AF8];
  v9 = v3;
  while (1)
  {
    v10 = v8 + 1;
    if (v8 + 1 >= v9)
    {
      v11 = v96;
      goto LABEL_13;
    }
    v11 = v96;
    v12 = E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(_QWORD *)(v96 + 8 * v10), *(_QWORD *)(v96 + 8 * v8));
    v10 = v8 + 2;
    if (v8 + 2 >= v9)
      goto LABEL_10;
    v13 = v8;
    do
    {
      if (((v12 ^ E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(_QWORD *)(v96 + 8 * v13 + 16), *(_QWORD *)(v96 + 8 * v13 + 8))) & 1) != 0)
      {
        v10 = v13 + 2;
        if ((v12 & 1) != 0)
          goto LABEL_81;
        goto LABEL_13;
      }
      ++v13;
    }
    while (v13 + 2 < v9);
    v10 = v9;
LABEL_10:
    if ((v12 & 1) != 0)
    {
LABEL_81:
      if (v10 >= v8)
      {
        if (v8 < v10)
        {
          v74 = v10 - 1;
          v75 = v8;
          do
          {
            if (v75 != v74)
            {
              if (!v96)
                goto LABEL_140;
              v76 = *(_QWORD *)(v96 + 8 * v75);
              *(_QWORD *)(v96 + 8 * v75) = *(_QWORD *)(v96 + 8 * v74);
              *(_QWORD *)(v96 + 8 * v74) = v76;
            }
            v55 = ++v75 < v74--;
          }
          while (v55);
        }
        goto LABEL_13;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      swift_release_n();
      __break(1u);
LABEL_139:
      swift_release_n();
      __break(1u);
LABEL_140:
      swift_release_n();
      __break(1u);
LABEL_141:
      result = swift_release_n();
      __break(1u);
      return result;
    }
LABEL_13:
    if (v10 < v9)
    {
      if (__OFSUB__(v10, v8))
        goto LABEL_131;
      if (v10 - v8 < v92)
      {
        if (__OFADD__(v8, v92))
          goto LABEL_134;
        if (v8 + v92 >= v9)
          v14 = v9;
        else
          v14 = v8 + v92;
        if (v14 < v8)
          goto LABEL_135;
        if (v10 != v14)
        {
          v15 = (unint64_t *)(v90 + 8 * v10);
          do
          {
            v16 = *(_QWORD *)(v11 + 8 * v10);
            v17 = v8;
            v18 = v15;
            do
            {
              if ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(v16, *v18) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_138;
              v19 = *v18;
              v16 = v18[1];
              *v18 = v16;
              v18[1] = v19;
              --v18;
              ++v17;
            }
            while (v10 != v17);
            ++v10;
            ++v15;
          }
          while (v10 != v14);
          v10 = v14;
        }
      }
    }
    v20 = v99;
    if (v10 < v8)
      goto LABEL_130;
    v95 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v99 + 2) + 1, 1, v99);
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    v23 = v22 + 1;
    if (v22 >= v21 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v23;
    v97 = v20 + 32;
    v24 = &v20[16 * v22 + 32];
    *(_QWORD *)v24 = v8;
    *((_QWORD *)v24 + 1) = v95;
    v99 = v20;
    if (v22)
      break;
    v23 = 1;
    v25 = v6;
LABEL_78:
    v6 = v25;
    v9 = v94;
    v8 = v95;
    if (v95 >= v94)
      goto LABEL_94;
  }
  v25 = v6;
  v26 = v20 + 32;
  while (1)
  {
    v27 = v23 - 1;
    if (v23 >= 4)
    {
      v32 = &v26[16 * v23];
      v33 = *((_QWORD *)v32 - 8);
      v34 = *((_QWORD *)v32 - 7);
      v38 = __OFSUB__(v34, v33);
      v35 = v34 - v33;
      if (v38)
        goto LABEL_115;
      v37 = *((_QWORD *)v32 - 6);
      v36 = *((_QWORD *)v32 - 5);
      v38 = __OFSUB__(v36, v37);
      v30 = v36 - v37;
      v31 = v38;
      if (v38)
        goto LABEL_116;
      v39 = v23 - 2;
      v40 = &v26[16 * v23 - 32];
      v42 = *(_QWORD *)v40;
      v41 = *((_QWORD *)v40 + 1);
      v38 = __OFSUB__(v41, v42);
      v43 = v41 - v42;
      if (v38)
        goto LABEL_117;
      v38 = __OFADD__(v30, v43);
      v44 = v30 + v43;
      if (v38)
        goto LABEL_119;
      if (v44 >= v35)
      {
        v62 = &v26[16 * v27];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v38 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v38)
          goto LABEL_125;
        v55 = v30 < v65;
        goto LABEL_67;
      }
    }
    else
    {
      if (v23 != 3)
      {
        v56 = *((_QWORD *)v20 + 4);
        v57 = *((_QWORD *)v20 + 5);
        v38 = __OFSUB__(v57, v56);
        v49 = v57 - v56;
        v50 = v38;
        goto LABEL_61;
      }
      v29 = *((_QWORD *)v20 + 4);
      v28 = *((_QWORD *)v20 + 5);
      v38 = __OFSUB__(v28, v29);
      v30 = v28 - v29;
      v31 = v38;
    }
    if ((v31 & 1) != 0)
      goto LABEL_118;
    v39 = v23 - 2;
    v45 = &v26[16 * v23 - 32];
    v47 = *(_QWORD *)v45;
    v46 = *((_QWORD *)v45 + 1);
    v48 = __OFSUB__(v46, v47);
    v49 = v46 - v47;
    v50 = v48;
    if (v48)
      goto LABEL_120;
    v51 = &v26[16 * v27];
    v53 = *(_QWORD *)v51;
    v52 = *((_QWORD *)v51 + 1);
    v38 = __OFSUB__(v52, v53);
    v54 = v52 - v53;
    if (v38)
      goto LABEL_122;
    if (__OFADD__(v49, v54))
      goto LABEL_124;
    if (v49 + v54 >= v30)
    {
      v55 = v30 < v54;
LABEL_67:
      if (v55)
        v27 = v39;
      goto LABEL_69;
    }
LABEL_61:
    if ((v50 & 1) != 0)
      goto LABEL_121;
    v58 = &v26[16 * v27];
    v60 = *(_QWORD *)v58;
    v59 = *((_QWORD *)v58 + 1);
    v38 = __OFSUB__(v59, v60);
    v61 = v59 - v60;
    if (v38)
      goto LABEL_123;
    if (v61 < v49)
      goto LABEL_78;
LABEL_69:
    v66 = v27 - 1;
    if (v27 - 1 >= v23)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if (!v96)
      goto LABEL_139;
    v67 = &v26[16 * v66];
    v68 = *(_QWORD *)v67;
    v69 = v27;
    v70 = &v26[16 * v27];
    v71 = *((_QWORD *)v70 + 1);
    v101 = (char *)(v96 + 8 * *(_QWORD *)v67);
    v72 = (char *)(v96 + 8 * *(_QWORD *)v70);
    swift_retain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v101, v72, v96 + 8 * v71, v98);
    if (v25)
      break;
    if (v71 < v68)
      goto LABEL_112;
    if (v69 > *((_QWORD *)v99 + 2))
      goto LABEL_113;
    *(_QWORD *)v67 = v68;
    v26 = v97;
    *(_QWORD *)&v97[16 * v66 + 8] = v71;
    v73 = *((_QWORD *)v99 + 2);
    if (v69 >= v73)
      goto LABEL_114;
    v20 = v99;
    v23 = v73 - 1;
    memmove(v70, v70 + 16, 16 * (v73 - 1 - v69));
    *((_QWORD *)v99 + 2) = v73 - 1;
    if (v73 <= 2)
      goto LABEL_78;
  }
LABEL_107:
  swift_bridgeObjectRelease();
  if (v94 < -1)
    goto LABEL_133;
  *(_QWORD *)(v93 + 16) = 0;
LABEL_109:
  swift_release_n();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::Int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return result;
    }
    goto LABEL_124;
  }
  v5 = result;
  result = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v83 = a1;
  v84 = result;
  v88 = v6;
  v86 = v3;
  if (v3 <= 0)
  {
    v9 = MEMORY[0x24BEE4AF8];
    v26 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v26 < 2)
    {
LABEL_101:
      result = swift_bridgeObjectRelease();
      if (v86 >= -1)
      {
        *(_QWORD *)(v84 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    v76 = *v83;
    while (1)
    {
      v77 = v26 - 2;
      if (v26 < 2)
        break;
      if (!v76)
        goto LABEL_133;
      v78 = *(_QWORD *)(v9 + 32 + 16 * v77);
      v79 = *(_QWORD *)(v9 + 32 + 16 * (v26 - 1) + 8);
      result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v76 + 8 * v78), (char *)(v76 + 8 * *(_QWORD *)(v9 + 32 + 16 * (v26 - 1))), v76 + 8 * v79, v88);
      if (v1)
        goto LABEL_86;
      if (v79 < v78)
        goto LABEL_119;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        v9 = result;
      }
      if (v77 >= *(_QWORD *)(v9 + 16))
        goto LABEL_120;
      v80 = (_QWORD *)(v9 + 32 + 16 * v77);
      *v80 = v78;
      v80[1] = v79;
      v81 = *(_QWORD *)(v9 + 16);
      if (v26 > v81)
        goto LABEL_121;
      result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v26 - 1)), (const void *)(v9 + 32 + 16 * v26), 16 * (v81 - v26));
      *(_QWORD *)(v9 + 16) = v81 - 1;
      v26 = v81 - 1;
      if (v81 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  v7 = 0;
  v8 = *a1;
  v82 = *a1 - 8;
  v9 = MEMORY[0x24BEE4AF8];
  v85 = v5;
  v87 = *a1;
  while (1)
  {
    v10 = v7++;
    if (v7 < v3)
    {
      v11 = *(_QWORD *)(v8 + 8 * v7);
      v12 = *(_QWORD *)(v8 + 8 * v10);
      v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        v13 = v11;
        while (1)
        {
          v14 = *(_QWORD *)(v8 + 8 * v7);
          if (v11 < v12 == v14 >= v13)
            break;
          ++v7;
          v13 = v14;
          if (v7 >= v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      if (v11 < v12)
      {
        if (v7 < v10)
          goto LABEL_126;
        if (v10 < v7)
        {
          v15 = v7 - 1;
          v16 = v10;
          do
          {
            if (v16 != v15)
            {
              if (!v8)
                goto LABEL_132;
              v17 = *(_QWORD *)(v8 + 8 * v16);
              *(_QWORD *)(v8 + 8 * v16) = *(_QWORD *)(v8 + 8 * v15);
              *(_QWORD *)(v8 + 8 * v15) = v17;
            }
            v57 = ++v16 < v15--;
          }
          while (v57);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10))
        goto LABEL_123;
      if (v7 - v10 < v5)
      {
        v18 = v10 + v5;
        if (__OFADD__(v10, v5))
          goto LABEL_127;
        if (v18 >= v3)
          v18 = v3;
        if (v18 < v10)
          goto LABEL_128;
        if (v7 != v18)
        {
          v19 = (uint64_t *)(v82 + 8 * v7);
          do
          {
            v20 = *(_QWORD *)(v8 + 8 * v7);
            v21 = v10;
            v22 = v19;
            do
            {
              v23 = *v22;
              if (v20 >= *v22)
                break;
              if (!v8)
                goto LABEL_130;
              *v22 = v20;
              v22[1] = v23;
              --v22;
              ++v21;
            }
            while (v7 != v21);
            ++v7;
            ++v19;
          }
          while (v7 != v18);
          v7 = v18;
        }
      }
    }
    if (v7 < v10)
      goto LABEL_122;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
      v9 = result;
    }
    v25 = *(_QWORD *)(v9 + 16);
    v24 = *(_QWORD *)(v9 + 24);
    v26 = v25 + 1;
    v8 = v87;
    if (v25 >= v24 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, (char *)v9);
      v8 = v87;
      v9 = result;
    }
    *(_QWORD *)(v9 + 16) = v26;
    v27 = v9 + 32;
    v28 = (Swift::Int *)(v9 + 32 + 16 * v25);
    *v28 = v10;
    v28[1] = v7;
    if (v25)
      break;
    v26 = 1;
LABEL_81:
    v5 = v85;
    v3 = v86;
    if (v7 >= v86)
      goto LABEL_90;
  }
  while (1)
  {
    v29 = v26 - 1;
    if (v26 >= 4)
    {
      v34 = v27 + 16 * v26;
      v35 = *(_QWORD *)(v34 - 64);
      v36 = *(_QWORD *)(v34 - 56);
      v40 = __OFSUB__(v36, v35);
      v37 = v36 - v35;
      if (v40)
        goto LABEL_107;
      v39 = *(_QWORD *)(v34 - 48);
      v38 = *(_QWORD *)(v34 - 40);
      v40 = __OFSUB__(v38, v39);
      v32 = v38 - v39;
      v33 = v40;
      if (v40)
        goto LABEL_108;
      v41 = v26 - 2;
      v42 = (uint64_t *)(v27 + 16 * (v26 - 2));
      v44 = *v42;
      v43 = v42[1];
      v40 = __OFSUB__(v43, v44);
      v45 = v43 - v44;
      if (v40)
        goto LABEL_109;
      v40 = __OFADD__(v32, v45);
      v46 = v32 + v45;
      if (v40)
        goto LABEL_111;
      if (v46 >= v37)
      {
        v64 = (uint64_t *)(v27 + 16 * v29);
        v66 = *v64;
        v65 = v64[1];
        v40 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v40)
          goto LABEL_117;
        v57 = v32 < v67;
        goto LABEL_70;
      }
    }
    else
    {
      if (v26 != 3)
      {
        v58 = *(_QWORD *)(v9 + 32);
        v59 = *(_QWORD *)(v9 + 40);
        v40 = __OFSUB__(v59, v58);
        v51 = v59 - v58;
        v52 = v40;
        goto LABEL_64;
      }
      v31 = *(_QWORD *)(v9 + 32);
      v30 = *(_QWORD *)(v9 + 40);
      v40 = __OFSUB__(v30, v31);
      v32 = v30 - v31;
      v33 = v40;
    }
    if ((v33 & 1) != 0)
      goto LABEL_110;
    v41 = v26 - 2;
    v47 = (uint64_t *)(v27 + 16 * (v26 - 2));
    v49 = *v47;
    v48 = v47[1];
    v50 = __OFSUB__(v48, v49);
    v51 = v48 - v49;
    v52 = v50;
    if (v50)
      goto LABEL_112;
    v53 = (uint64_t *)(v27 + 16 * v29);
    v55 = *v53;
    v54 = v53[1];
    v40 = __OFSUB__(v54, v55);
    v56 = v54 - v55;
    if (v40)
      goto LABEL_114;
    if (__OFADD__(v51, v56))
      goto LABEL_116;
    if (v51 + v56 >= v32)
    {
      v57 = v32 < v56;
LABEL_70:
      if (v57)
        v29 = v41;
      goto LABEL_72;
    }
LABEL_64:
    if ((v52 & 1) != 0)
      goto LABEL_113;
    v60 = (uint64_t *)(v27 + 16 * v29);
    v62 = *v60;
    v61 = v60[1];
    v40 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v40)
      goto LABEL_115;
    if (v63 < v51)
      goto LABEL_81;
LABEL_72:
    v68 = v9;
    v69 = v29 - 1;
    if (v29 - 1 >= v26)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8)
      goto LABEL_131;
    v70 = (uint64_t *)(v27 + 16 * v69);
    v71 = *v70;
    v72 = v27;
    v73 = (_QWORD *)(v27 + 16 * v29);
    v74 = v73[1];
    result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 8 * *v70), (char *)(v8 + 8 * *v73), v8 + 8 * v74, v88);
    if (v1)
      break;
    if (v74 < v71)
      goto LABEL_104;
    if (v29 > *(_QWORD *)(v68 + 16))
      goto LABEL_105;
    *v70 = v71;
    *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
    v75 = *(_QWORD *)(v68 + 16);
    if (v29 >= v75)
      goto LABEL_106;
    v9 = v68;
    v26 = v75 - 1;
    result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v29));
    v27 = v72;
    *(_QWORD *)(v68 + 16) = v75 - 1;
    v8 = v87;
    if (v75 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  result = swift_bridgeObjectRelease();
  if (v86 < -1)
    goto LABEL_125;
  *(_QWORD *)(v84 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 32 * a3;
    while (2)
    {
      v6 = *(float *)(v4 + 32 * a3 + 16);
      v7 = result;
      v8 = v5;
      do
      {
        if (*(float *)(v8 - 16) >= v6)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(_OWORD *)v8;
        v11 = *(_OWORD *)(v8 - 16);
        *(_OWORD *)v8 = *(_OWORD *)(v8 - 32);
        *(_OWORD *)(v8 + 16) = v11;
        *(float *)(v8 - 16) = v6;
        *(_QWORD *)(v8 - 8) = v9;
        *(_OWORD *)(v8 - 32) = v10;
        v8 -= 32;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 32;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_41;
    v19 = (char *)(a3 - 32);
    while (1)
    {
      v20 = v19 + 32;
      if (*((float *)v6 - 4) >= *(float *)(v12 - 16))
      {
        v21 = (char *)(v12 - 32);
        v23 = v20 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 32;
        if (!v23)
          goto LABEL_37;
      }
      else
      {
        v21 = v6 - 32;
        v22 = v20 != v6 || v19 >= v6;
        v6 -= 32;
        if (!v22)
          goto LABEL_37;
      }
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *((_OWORD *)v19 + 1) = v24;
LABEL_37:
      v19 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_41;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 32, a4);
  v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    do
    {
      if (*((float *)v4 + 4) >= *((float *)v6 + 4))
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 32;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 32;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      v17 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v14;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 32;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 32, v6);
  return 1;
}

{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;

  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  swift_retain();
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v11, a4);
    v12 = &a4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = v6 - 8;
      if ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*((_QWORD *)v12 - 1), *((_QWORD *)v6 - 1)) & 1) != 0)
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      else
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = v12 - 8;
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = *(_QWORD *)v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= a4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v9, a4);
  v12 = &a4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(_QWORD *)v6, *(_QWORD *)a4) & 1) == 0)
    {
      v14 = a4;
      v15 = v7 == a4;
      a4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (a4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = *(_QWORD *)v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, (v12 - a4) / 8, v6);
  swift_release_n();
  return 1;
}

{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v14;
  BOOL v15;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  BOOL v21;
  BOOL v22;

  v4 = (unint64_t *)a4;
  v6 = (unint64_t *)a2;
  v7 = (unint64_t *)a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (unint64_t *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      v20 = v6 - 1;
      if ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*(v6 - 1), *(v12 - 1)) & 1) != 0)
      {
        v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21)
          goto LABEL_35;
      }
      else
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = --v12;
        if (!v22)
          goto LABEL_35;
      }
      *v18 = *v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  v12 = &v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*v4, *v6) & 1) == 0)
    {
      v14 = v4;
      v15 = v7 == v4++;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      ++v7;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6++;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *v7 = *v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)v4, v12 - v4, (char *)v6);
  swift_release();
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 8, v6);
  return 1;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30[2];
  uint64_t v31;
  __int128 v32[3];
  uint64_t v33;

  v5 = a1;
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
  {
    v28 = *(_QWORD *)(a2 + 16);
    v7 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = 0;
    while (1)
    {
      if (v28 == v8)
      {
LABEL_18:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return;
      }
      if (v8 >= *(_QWORD *)(a2 + 16))
        break;
      v9 = v5;
      v31 = *(_QWORD *)(v5 + 8 * v8 + 32);
      v10 = v31;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v7, (uint64_t)v32);
      v33 = v10;
      outlined init with take of LogitCollection(v32, (uint64_t)v30);
      v11 = (_QWORD *)*a4;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      v14 = v11[2];
      v15 = (v12 & 1) == 0;
      if (__OFADD__(v14, v15))
        goto LABEL_21;
      v16 = v12;
      if (v11[3] >= v14 + v15)
      {
        if ((a3 & 1) != 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_16;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, LogitCollection>);
          _NativeDictionary.copy()();
          if ((v16 & 1) != 0)
            goto LABEL_16;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v16 & 1) != (v18 & 1))
          goto LABEL_23;
        v13 = v17;
        if ((v16 & 1) != 0)
        {
LABEL_16:
          v23 = (void *)swift_allocError();
          swift_willThrow();
          v24 = v23;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_24;
        }
      }
      v19 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v13 >> 6) + 64) |= 1 << v13;
      *(_QWORD *)(v19[6] + 8 * v13) = v10;
      outlined init with take of LogitCollection(v30, v19[7] + 40 * v13);
      v20 = v19[2];
      v21 = __OFADD__(v20, 1);
      v22 = v20 + 1;
      if (v21)
        goto LABEL_22;
      ++v8;
      v19[2] = v22;
      v7 += 40;
      a3 = 1;
      v5 = v9;
      if (v27 == v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_24:
    _StringGuts.grow(_:)(30);
    v25._object = (void *)0x8000000248D7EB70;
    v25._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v25);
    _print_unlocked<A, B>(_:_:)();
    v26._countAndFlagsBits = 39;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v6 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    v9 = (_QWORD *)*a3;
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v14 = v10;
    if (v9[3] < v12 + v13)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
      _NativeDictionary.copy()();
      if ((v14 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v17 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    *(_QWORD *)(v17[6] + 8 * v11) = v8;
    *(_QWORD *)(v17[7] + 8 * v11) = v7;
    v18 = v17[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_18;
    v6 += 2;
    v17[2] = v20;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v14 & 1) != (v16 & 1))
    goto LABEL_19;
  v11 = v15;
  if ((v14 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v21 = (void *)swift_allocError();
  swift_willThrow();
  v22 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v23._object = (void *)0x8000000248D7EB70;
  v23._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v23);
  _print_unlocked<A, B>(_:_:)();
  v24._countAndFlagsBits = 39;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::String v27;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    v8 = *(i - 1);
    v7 = *i;
    v9 = (_QWORD *)*a3;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v12 = v9[2];
    v13 = (v11 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    v16 = v11;
    v17 = v9[3];
    swift_bridgeObjectRetain();
    if (v17 < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, [Int]>);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v20[6] + 8 * v15) = v8;
    *(_QWORD *)(v20[7] + 8 * v15) = v7;
    v21 = v20[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_18;
    v20[2] = v23;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v16 & 1) != (v19 & 1))
    goto LABEL_19;
  v15 = v18;
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v24 = (void *)swift_allocError();
  swift_willThrow();
  v25 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x8000000248D7EB70;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)();
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt *v4;
  Swift::UInt v5;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt *)(a2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

unint64_t type metadata accessor for TGIE5AdapterConfigurationObjC()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC;
  if (!lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  }
  return result;
}

void outlined destroy of LogitPresampler?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_49();
}

void lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x2495AAEA0](a3, v5), a1);
  }
  OUTLINED_FUNCTION_49();
}

void partial apply for closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, unsigned int a6@<S0>)
{
  uint64_t v6;

  closure #2 in BeamSearchDecoder.pruneUnreachableBeamNodes(fromStep:)(a1, a2, a3, a4, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), a5, a6);
}

uint64_t outlined init with take of BeamSearchDecoder.BeamNode?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BeamSearchDecoder.BeamNode?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *OUTLINED_FUNCTION_1_2@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

size_t OUTLINED_FUNCTION_18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void OUTLINED_FUNCTION_19(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

void OUTLINED_FUNCTION_20(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_21()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_28()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_33(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_34()
{
  return dispatch thunk of Collection.subscript.read();
}

void OUTLINED_FUNCTION_39(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(v2 + 56) + 40 * a1, v1);
}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_42()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return dispatch thunk of Collection.endIndex.getter();
}

void OUTLINED_FUNCTION_44(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t OUTLINED_FUNCTION_45(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_46(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((result - 32) / 16);
  return result;
}

unint64_t OUTLINED_FUNCTION_47(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 136))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_52()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_54()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t OUTLINED_FUNCTION_60(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_61()
{
  specialized __RawDictionaryStorage.find<A>(_:hashValue:)();
}

uint64_t OUTLINED_FUNCTION_62()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_64()
{
  return Hasher.init(_seed:)();
}

BOOL OUTLINED_FUNCTION_65()
{
  unint64_t v0;

  return v0 > 1;
}

uint64_t OUTLINED_FUNCTION_66()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_67@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_68@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(v1 - 112, 0);
}

uint64_t OUTLINED_FUNCTION_69()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_70()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_71()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, _BYTE *, _BYTE *), uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  void (*v44)(__int128 *__return_ptr, _BYTE *, _BYTE *);
  uint64_t v45;
  uint64_t *v46;
  __int128 v47[2];
  __int128 __src[5];
  _BYTE __dst[80];
  uint64_t v50;

  v45 = a4;
  v44 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >= v6)
    v8 = *(_QWORD *)(a1 + 16);
  else
    v8 = *(_QWORD *)(a2 + 16);
  v50 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  v42 = v6;
  v41 = v7;
  v40 = a1;
  v39 = a2;
  v38 = v8;
  if (v8)
  {
    v9 = v7;
    v10 = a1 + 32;
    v11 = a2 + 32;
    v43 = &__dst[40];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (v6)
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v10, (uint64_t)__src);
      if (!v9)
        goto LABEL_29;
      outlined init with take of LogitCollection(__src, (uint64_t)__dst);
      v12 = v43;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v11, (uint64_t)v43);
      v44(__src, __dst, v12);
      outlined destroy of LogitPresampler?((uint64_t)__dst, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      v13 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v50;
      }
      v15 = *(_QWORD *)(v13 + 16);
      v14 = *(_QWORD *)(v13 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v16 = *((_QWORD *)&__src[1] + 1);
      v17 = *(_QWORD *)&__src[2];
      v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)__src, *((uint64_t *)&__src[1] + 1));
      v46 = &v37;
      MEMORY[0x24BDAC7A8](v18);
      v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v21 + 16))(v20);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v20, &v50, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
      --v9;
      --v6;
      v11 += 40;
      v10 += 40;
      if (!--v8)
        goto LABEL_15;
    }
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_15:
    v22 = v42;
    v23 = v41;
    v24 = v38;
    if (v42 <= v41)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v46 = (uint64_t *)&__src[2] + 1;
    v43 = &__dst[40];
    v25 = 40 * v38 + 32;
    v26 = v40 + v25;
    v27 = v39 + v25;
    while (v24 < v22)
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v26, (uint64_t)v47);
      if (v23 == v24)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        goto LABEL_27;
      }
      if (v24 >= v23)
        goto LABEL_31;
      outlined init with take of LogitCollection(v47, (uint64_t)__src);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v27, (uint64_t)v46);
      memcpy(__dst, __src, sizeof(__dst));
      v44(__src, __dst, v43);
      outlined destroy of LogitPresampler?((uint64_t)__dst, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      v28 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v50;
      }
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      if (v30 >= v29 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      ++v24;
      v31 = *((_QWORD *)&__src[1] + 1);
      v32 = *(_QWORD *)&__src[2];
      v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)__src, *((uint64_t *)&__src[1] + 1));
      MEMORY[0x24BDAC7A8](v33);
      v35 = (char *)&v37 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v36 + 16))(v35);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, (uint64_t)v35, &v50, v31, v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
      v26 += 40;
      v27 += 40;
      v22 = v42;
      v23 = v41;
      if (v42 == v24)
        goto LABEL_27;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

Swift::Int __swiftcall CompositeLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  _QWORD *v3;
  _QWORD *v4;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t);
  _BOOL8 v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  result = OUTLINED_FUNCTION_22();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = v3[2];
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 <= forPreviousNode)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = (_QWORD *)(v9 + 24 * forPreviousNode);
  v12 = v11[4];
  v13 = v11[5];
  result = specialized Dictionary.subscript.getter(token, v11[6]);
  if ((v14 & 1) == 0)
    return result;
  v29 = v10;
  OUTLINED_FUNCTION_4_0();
  v30 = v13;
  v16 = v4[6];
  v15 = v4[7];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v4 + 3), v16);
  v17 = *(uint64_t (**)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  v18 = isPrompt;
  v19 = v17(v12, token, v18, v16, v15);
  v20 = token;
  v21 = v19;
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_4_0();
  v22 = v4[12];
  v23 = v4[13];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v4 + 9), v22);
  v24 = (*(uint64_t (**)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t))(v23 + 16))(v30, token, v18, v22, v23);
  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  v25 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_4_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v26 = *(_QWORD *)(v4[2] + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v27 = v4[2];
  *(_QWORD *)(v27 + 16) = v26 + 1;
  v28 = (_QWORD *)(v27 + 24 * v26);
  v28[4] = v21;
  v28[5] = v24;
  v28[6] = v25;
  if (*(_QWORD *)(v4[2] + 16) <= (unint64_t)forPreviousNode)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  specialized Dictionary._Variant.setValue(_:forKey:)(v29, v20);
  OUTLINED_FUNCTION_9_0();
  return v29;
}

uint64_t CompositeLanguageModel.CompositeLogitCollection.init(_:_:_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v9 = OUTLINED_FUNCTION_3_2();
  v25 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v23 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v23 - v16;
  v24 = type metadata accessor for CompositeLanguageModel.CompositeLogitCollection();
  MEMORY[0x24BDAC7A8](v24);
  v19 = (float *)((char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)a1, (uint64_t)v19);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)a2, (uint64_t)(v19 + 10));
  v19[20] = a4;
  v19[21] = a5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_6_1();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  OUTLINED_FUNCTION_6_1();
  IndexSet.union(_:)();
  v20 = v25;
  v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v12, v9);
  v21(v15, v9);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))((char *)v19 + *(int *)(v24 + 32), v17, v9);
  outlined init with take of CompositeLanguageModel.CompositeLogitCollection((uint64_t)v19, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

float CompositeLanguageModel.CompositeLogitCollection.subscript.getter(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  v7 = OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_8();
  v8 = -65504.0;
  v9 = -65504.0;
  if (v7)
  {
    v10 = *((_QWORD *)v2 + 3);
    v11 = *((_QWORD *)v2 + 4);
    __swift_project_boxed_opaque_existential_1(v2, v10);
    v9 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v10, v11);
  }
  v12 = v2[20];
  v13 = *((_QWORD *)v2 + 8);
  v14 = *((_QWORD *)v2 + 9);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v2 + 5, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  v15 = OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_8();
  if (v15)
  {
    v16 = *((_QWORD *)v2 + 8);
    v17 = *((_QWORD *)v2 + 9);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v2 + 5, v16);
    v8 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, v16, v17);
  }
  return (float)(v9 * v12) + (float)(v8 * v2[21]);
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance CompositeLanguageModel.CompositeLogitCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = OUTLINED_FUNCTION_3_2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  return swift_task_switch();
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[22] + 16);
  OUTLINED_FUNCTION_4_2();
  v3 = v2;
  OUTLINED_FUNCTION_4_2();
  v5 = v4;
  if (v1)
  {
    v24 = v0;
    v6 = v0[22];
    v7 = v0[24] + 16;
    v8 = (unint64_t *)(v6 + 32);
    swift_bridgeObjectRetain();
    v25 = v7;
    result = OUTLINED_FUNCTION_22();
    while (1)
    {
      v11 = *v8++;
      v10 = v11;
      if ((v11 & 0x8000000000000000) != 0)
        break;
      if (v10 >= *(_QWORD *)(*(_QWORD *)v25 + 16))
        goto LABEL_13;
      v12 = *(_QWORD *)v25 + 24 * v10;
      v13 = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v12 + 40);
      v15 = *(_QWORD *)(v3 + 16);
      v16 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v16 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v15 + 1;
      *(_QWORD *)(v3 + 8 * v15 + 32) = v13;
      v17 = *(_QWORD *)(v5 + 16);
      if (v17 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v19;
      }
      *(_QWORD *)(v5 + 16) = v17 + 1;
      *(_QWORD *)(v5 + 8 * v17 + 32) = v14;
      result = swift_bridgeObjectRelease();
      if (!--v1)
      {
        v0 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_11:
    v0[25] = v3;
    v0[26] = v5;
    v20 = v0[24] + 24;
    OUTLINED_FUNCTION_22();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v20, (uint64_t)(v0 + 2));
    v21 = v0[5];
    v22 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v21);
    v26 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))OUTLINED_FUNCTION_7_1();
    swift_bridgeObjectRetain();
    v23 = (_QWORD *)swift_task_alloc();
    v0[27] = v23;
    *v23 = v0;
    v23[1] = CompositeLanguageModel.nextTokensLogits(nodes:presampler:);
    return v26(v3, v0[23], v21, v22);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = v0[24];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  OUTLINED_FUNCTION_22();
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v1 + 72, (uint64_t)(v0 + 7));
  v2 = v0[10];
  v3 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))OUTLINED_FUNCTION_7_1();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[30] = v4;
  *v4 = v0;
  v4[1] = CompositeLanguageModel.nextTokensLogits(nodes:presampler:);
  return v6(v0[26], v0[23], v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5K11OIegnrzr_TRAhI_pAhI_pAhI_pIgnnr_Tf1cn_n(v2, v1, (void (*)(__int128 *__return_ptr, _BYTE *, _BYTE *))partial apply for closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:), v3);
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t CompositeLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 256) = a1;
  }
  return swift_task_switch();
}

uint64_t closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  float v7;
  float v8;
  uint64_t *boxed_opaque_existential_1;
  _QWORD v11[5];
  _QWORD v12[5];

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, (uint64_t)v12);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a2, (uint64_t)v11);
  swift_beginAccess();
  v7 = *(float *)(a3 + 64);
  swift_beginAccess();
  v8 = *(float *)(a3 + 112);
  a4[3] = type metadata accessor for CompositeLanguageModel.CompositeLogitCollection();
  a4[4] = (uint64_t)&protocol witness table for CompositeLanguageModel.CompositeLogitCollection;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return CompositeLanguageModel.CompositeLogitCollection.init(_:_:_:_:)(v12, v11, (uint64_t)boxed_opaque_existential_1, v7, v8);
}

void CompositeLanguageModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of LogitPresampler?(v0 + 24, &demangling cache variable for type metadata for (lm: DeterministicLanguageModelProtocol, scale: Float));
  outlined destroy of LogitPresampler?(v0 + 72, &demangling cache variable for type metadata for (lm: DeterministicLanguageModelProtocol, scale: Float));
  OUTLINED_FUNCTION_49();
}

uint64_t CompositeLanguageModel.__deallocating_deinit()
{
  CompositeLanguageModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompositeLanguageModel()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for CompositeLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CompositeLanguageModel.Node()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CompositeLanguageModel.Node(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CompositeLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeLanguageModel.Node(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeLanguageModel.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositeLanguageModel.Node()
{
  return &type metadata for CompositeLanguageModel.Node;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance CompositeLanguageModel()
{
  return 0;
}

void protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance CompositeLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  CompositeLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
  OUTLINED_FUNCTION_49();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance CompositeLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return CompositeLanguageModel.nextTokensLogits(nodes:presampler:)(a1, a2);
}

uint64_t partial apply for closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in CompositeLanguageModel.nextTokensLogits(nodes:presampler:)(a1, a2, v3, a3);
}

uint64_t type metadata accessor for CompositeLanguageModel.CompositeLogitCollection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CompositeLanguageModel.CompositeLogitCollection;
  if (!type metadata singleton initialization cache for CompositeLanguageModel.CompositeLogitCollection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompositeLanguageModel.CompositeLogitCollection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    *(_QWORD *)(v4 + 80) = a2[10];
    v9 = *(int *)(a3 + 32);
    v10 = v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for IndexSet();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CompositeLanguageModel.CompositeLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeLanguageModel.CompositeLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248CEEBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_3_2();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for CompositeLanguageModel.CompositeLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248CEEC7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_2();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CompositeLanguageModel.CompositeLogitCollection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return type metadata accessor for IndexSet();
}

void OUTLINED_FUNCTION_4_2()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  uint64_t v0;

  return **(int **)(v0 + 24) + *(_QWORD *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return swift_endAccess();
}

BOOL OUTLINED_FUNCTION_10_0()
{
  Swift::Int v0;

  return IndexSet.contains(_:)(v0);
}

uint64_t type metadata instantiation function for DataStream()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for DataStream()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  result = type metadata accessor for AsyncThrowingStream();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v7 = type metadata accessor for AsyncThrowingStream();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 28);
    v9 = *(int *)(a3 + 32);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = type metadata accessor for UUID();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495AAE94](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t destroy for DataStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v4 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  v5 = a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = *(int *)(a3 + 32);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = type metadata accessor for UUID();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 32);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for DataStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStream()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248CEF32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 0x7FFFFFFF)
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(a1 + *(int *)(a3 + 28)));
      OUTLINED_FUNCTION_37();
      return;
    }
    v7 = type metadata accessor for UUID();
    v8 = a1 + *(int *)(a3 + 32);
  }
  OUTLINED_FUNCTION_10_1(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for DataStream()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248CEF3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_19_0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v4 = type metadata accessor for AsyncThrowingStream();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == v3)
  {
    v5 = v4;
    v6 = v1;
  }
  else
  {
    if (v3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v1 + *(int *)(v2 + 28)) = (v0 - 1);
      OUTLINED_FUNCTION_5_0();
      return;
    }
    v5 = type metadata accessor for UUID();
    v6 = v1 + *(int *)(v2 + 32);
  }
  OUTLINED_FUNCTION_6_2(v6, v0, v0, v5);
}

uint64_t type metadata accessor for DataStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DataStream);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in DataStream<A>()
{
  JUMPOUT(0x2495AAEA0);
}

uint64_t DataStream.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  OUTLINED_FUNCTION_27_0();
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  OUTLINED_FUNCTION_27_0();
  v9 = type metadata accessor for AsyncThrowingStream();
  MEMORY[0x2495A9C70](v9);
  DataStream.AsyncIterator.init(wrapped:onCancel:)((uint64_t)v8, *(_QWORD *)(v2 + *(int *)(a1 + 28)), *(_QWORD *)(v2 + *(int *)(a1 + 28) + 8), v5, a2);
  return swift_retain();
}

uint64_t DataStream.AsyncIterator.init(wrapped:onCancel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v10 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for DataStream.AsyncIterator(0, a4, v11, v12);
  v14 = (_QWORD *)(a5 + *(int *)(result + 28));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t DataStream.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t DataStream.AsyncIterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[3];
  v1 = v0[4];
  v3 = swift_task_alloc();
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 24) = v1;
  v0[6] = *(_QWORD *)(v1 + *(int *)(v2 + 28) + 8);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  type metadata accessor for Optional();
  *v4 = v0;
  v4[1] = DataStream.AsyncIterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_24_0();
  v3 = *v2;
  *v4 = v3;
  *(_QWORD *)(v0 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_9_1();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_17_0();
    return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v3 + 8));
  }
}

{
  uint64_t v0;

  swift_release();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in DataStream.AsyncIterator.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  v4 = type metadata accessor for TokenGenerationError();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in DataStream.AsyncIterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  static Task<>.checkCancellation()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for AsyncThrowingStream.Iterator();
  *v1 = v0;
  v1[1] = closure #1 in DataStream.AsyncIterator.next();
  return AsyncThrowingStream.Iterator.next()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_24_0();
  v3 = *v2;
  *v4 = v3;
  *(_QWORD *)(v0 + 96) = v1;
  swift_task_dealloc();
  if (v1)
    return OUTLINED_FUNCTION_9_1();
  swift_task_dealloc();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v3 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 96);
  v2 = (id *)(v0 + 16);
  OUTLINED_FUNCTION_5_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (OUTLINED_FUNCTION_28_0())
  {
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_12_0();
    type metadata accessor for InferenceError();
    lazy protocol witness table accessor for type InferenceError and conformance InferenceError();
    OUTLINED_FUNCTION_11_0();
    v3 = OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_15_0(v3, *MEMORY[0x24BE68978]);
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_21_0();

  }
  else
  {

    if (one-time initialization token for device != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_5_1();
    v5 = (void *)Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_25_0(v6))
    {
      OUTLINED_FUNCTION_23_0();
      v7 = (_QWORD *)OUTLINED_FUNCTION_18_0();
      *(_DWORD *)v2 = 138412290;
      OUTLINED_FUNCTION_5_1();
      v8 = _swift_stdlib_bridgeErrorToNSError();
      OUTLINED_FUNCTION_7_2(v8);
      *v7 = v1;
      OUTLINED_FUNCTION_3_3();
      OUTLINED_FUNCTION_3_3();
      OUTLINED_FUNCTION_14_0(&dword_248CAA000, v9, v10, "Passing error with unexpected type to model manager: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_3_3();

    OUTLINED_FUNCTION_22_0();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_2_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return DataStream.AsyncIterator.next()(a1, a2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_3();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s24TokenGenerationInference10DataStreamV13AsyncIteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_24_0();
  v3 = *v2;
  *v4 = v3;
  swift_task_dealloc();
  if (v1)
    **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance DataStream<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  DataStream.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in DataStream<A>.AsyncIterator()
{
  return MEMORY[0x24BEE3F20];
}

uint64_t partial apply for closure #1 in DataStream.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in DataStream.AsyncIterator.next()(a1, v4, v5);
}

unint64_t lazy protocol witness table accessor for type InferenceError and conformance InferenceError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InferenceError and conformance InferenceError;
  if (!lazy protocol witness table cache variable for type InferenceError and conformance InferenceError)
  {
    v1 = type metadata accessor for InferenceError();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BE68A00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError);
  }
  return result;
}

uint64_t type metadata accessor for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DataStream.AsyncIterator);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2495AAE4C](a1, v6, a5);
}

uint64_t type metadata instantiation function for DataStream.AsyncIterator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for DataStream.AsyncIterator()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  result = type metadata accessor for AsyncThrowingStream.Iterator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataStream.AsyncIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v7 = type metadata accessor for AsyncThrowingStream.Iterator();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DataStream.AsyncIterator(uint64_t a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for DataStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStream.AsyncIterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248CF027C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for AsyncThrowingStream.Iterator();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_10_1(a1, a2, v6);
  }
  else
  {
    OUTLINED_FUNCTION_26(*(_QWORD *)(a1 + *(int *)(a3 + 28)));
    OUTLINED_FUNCTION_37();
  }
}

uint64_t storeEnumTagSinglePayload for DataStream.AsyncIterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248CF0304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_19_0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v4 = type metadata accessor for AsyncThrowingStream.Iterator();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == v3)
  {
    OUTLINED_FUNCTION_6_2(v1, v0, v0, v4);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 28)) = (v0 - 1);
    OUTLINED_FUNCTION_5_0();
  }
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_2_2(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_3_3()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_4_3()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

id OUTLINED_FUNCTION_5_1()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_7_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return TokenGenerationError.inferenceErrorContext.getter();
}

void OUTLINED_FUNCTION_14_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_15_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_24_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

BOOL OUTLINED_FUNCTION_25_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_26@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return swift_dynamicCast();
}

uint64_t DataStreamCancellationHandler.init(requestUUID:dataStreamStateManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v2 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v5;
  v6 = v2 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID;
  v7 = OUTLINED_FUNCTION_4_4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a1, v7);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_dataStreamStateManager) = a2;
  return v2;
}

void closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(a1 + 16) = a2;
  DataStreamCancellationHandler.cancel()();
  *a3 = *(_BYTE *)(a1 + 17);
}

void DataStreamCancellationHandler.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v0 + 24) + 16));
  if (*(_BYTE *)(v0 + 17) == 1 && (*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    v8 = v0 + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_requestUUID;
    v9 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC24TokenGenerationInference29DataStreamCancellationHandler_dataStreamStateManager);
    v10 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v1);
    v11 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v13 + v11, v4, v1);
    *(_QWORD *)(v13 + v12) = v9;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in DataStreamCancellationHandler.cancel(), v13);
    swift_release();
  }
}

Swift::Void __swiftcall DataStreamCancellationHandler.setisCancelled(isCancelled:)(Swift::Bool isCancelled)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 24) + 16);
  os_unfair_lock_lock(v3);
  *(_BYTE *)(v1 + 17) = isCancelled;
  DataStreamCancellationHandler.cancel()();
  os_unfair_lock_unlock(v3);
}

uint64_t closure #1 in DataStreamCancellationHandler.cancel()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  v5[5] = swift_task_alloc();
  v5[6] = type metadata accessor for DataStreamState(0);
  v5[7] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in DataStreamCancellationHandler.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (one-time initialization token for device != -1)
    swift_once();
  v1 = v0[3];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[8];
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_6_3();
    _os_log_impl(&dword_248CAA000, v6, v7, "Handling cancellation for request %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_6_3();

  return swift_task_switch();
}

{
  uint64_t v0;

  DataStreamStateManager.stateForUUID(_:)(*(_QWORD *)(v0 + 40));
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for DataStreamState?);
    OUTLINED_FUNCTION_5_2();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56);
    outlined init with take of DataStreamState(v1, v4);
    v5 = v4 + *(int *)(v2 + 44);
    outlined destroy of TaskPriority?(v5, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    v6 = *MEMORY[0x24BE5A950];
    v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v7);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v8;
    *v8 = v0;
    v8[1] = closure #1 in DataStreamCancellationHandler.cancel();
    return DataStreamStateManager.removeState(uuid:state:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 56));
  }
}

{
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;

  outlined destroy of DataStreamState(*(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_5_2();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t DataStreamCancellationHandler.deinit()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_3_4(v1);
  swift_release();
  return v0;
}

uint64_t DataStreamCancellationHandler.__deallocating_deinit()
{
  DataStreamCancellationHandler.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DataStreamCancellationHandler()
{
  return type metadata accessor for DataStreamCancellationHandler();
}

uint64_t type metadata accessor for DataStreamCancellationHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DataStreamCancellationHandler;
  if (!type metadata singleton initialization cache for DataStreamCancellationHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for DataStreamCancellationHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  char v3;
  uint64_t var1;

  a2(&var1);
  if (!v2)
    v3 = var1;
  return v3 & 1;
}

uint64_t sub_248CF0EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_4_4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DataStreamCancellationHandler.cancel()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(OUTLINED_FUNCTION_4_4() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in DataStreamCancellationHandler.cancel();
  return closure #1 in DataStreamCancellationHandler.cancel()(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in DataStreamCancellationHandler.cancel()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_3();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_3();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_248CF1094()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t outlined init with take of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_3_4(v3);
  return a1;
}

uint64_t outlined destroy of DataStreamState(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_3_4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void DataStreamStateManager.startPromptProcessingInstrumenter(uuid:onBehalfOfUserIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19[4];
  uint64_t v20;

  OUTLINED_FUNCTION_51();
  v20 = OUTLINED_FUNCTION_16_0(v1, v2);
  v19[2] = *(_QWORD *)(v20 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2(v4, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_23_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_8_0(v7, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_15_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_52_0();
  if (!v12)
  {
    v16 = OUTLINED_FUNCTION_17_1();
LABEL_8:
    OUTLINED_FUNCTION_41_0(v16, &demangling cache variable for type metadata for DataStreamState?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_30_0();
  if ((v14 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_1(v13);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  OUTLINED_FUNCTION_11_1((uint64_t)v10, v15, 1, v0);
  v16 = OUTLINED_FUNCTION_22_1();
  if (v17)
    goto LABEL_8;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_6_4(OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_12_1();
  PromptProcessingInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)();
  v18 = type metadata accessor for PromptProcessingInstrumenter();
  OUTLINED_FUNCTION_14_1(v18);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_53();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_50_0();
LABEL_9:
  OUTLINED_FUNCTION_31();
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t (*v30)(char *);

  v30 = a1;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
  v5 = MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - v8;
  specialized _NativeDictionary.makeIterator()(v29, a3);
  v10 = v29[0];
  v11 = v29[3];
  v12 = v29[4];
  v26 = v29[1];
  v27 = (unint64_t)(v29[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_15;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v27)
      goto LABEL_25;
    v17 = *(_QWORD *)(v26 + 8 * v16);
    if (!v17)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v27)
        goto LABEL_25;
      v17 = *(_QWORD *)(v26 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v11 + 3;
      if (v11 + 3 >= v27)
        goto LABEL_25;
      v17 = *(_QWORD *)(v26 + 8 * v18);
      if (v17)
        goto LABEL_13;
      v18 = v11 + 4;
      if (v11 + 4 >= v27)
        goto LABEL_25;
      v17 = *(_QWORD *)(v26 + 8 * v18);
      if (v17)
      {
LABEL_13:
        v16 = v18;
      }
      else
      {
        v16 = v11 + 5;
        if (v11 + 5 >= v27)
          goto LABEL_25;
        v17 = *(_QWORD *)(v26 + 8 * v16);
        if (!v17)
        {
          v24 = v11 + 6;
          while (v24 < v27)
          {
            v17 = *(_QWORD *)(v26 + 8 * v24++);
            if (v17)
            {
              v16 = v24 - 1;
              goto LABEL_14;
            }
          }
LABEL_25:
          swift_release();
          v25 = 0;
          return v25 & 1;
        }
      }
    }
LABEL_14:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
LABEL_15:
    v19 = *(_QWORD *)(v10 + 48);
    v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v9, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, v20);
    v21 = *(_QWORD *)(v10 + 56);
    v22 = type metadata accessor for DataStreamState(0);
    outlined init with copy of DataStreamState(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v15, (uint64_t)&v9[*(int *)(v28 + 48)]);
    outlined init with take of (key: UUID, value: DataStreamState)((uint64_t)v9, (uint64_t)v7);
    v23 = v30(v7);
    result = outlined destroy of TaskPriority?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
    if (v3)
    {
      swift_release();
      return v25 & 1;
    }
    if ((v23 & 1) != 0)
    {
      swift_release();
      v25 = 1;
      return v25 & 1;
    }
  }
  __break(1u);
  return result;
}

void DataStreamStateManager.endPromptProcessingInstrumenter(uuid:state:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  OUTLINED_FUNCTION_51();
  v2 = v0;
  v45 = v3;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_4_4();
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  v9 = OUTLINED_FUNCTION_10_2(v8, v42);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v48 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_32_0();
  v44 = v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v42 - v15;
  v17 = OUTLINED_FUNCTION_61_0();
  v43 = *(_QWORD *)(v17 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_59();
  v21 = v20 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptProcessingInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_32_0();
  v47 = v23;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v42 - v25;
  v27 = type metadata accessor for PromptProcessingInstrumenter();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_19_1();
  v46 = v0 + 144;
  OUTLINED_FUNCTION_4_0();
  v29 = *(_QWORD *)(v0 + 144);
  if (!*(_QWORD *)(v29 + 16))
  {
    OUTLINED_FUNCTION_40_0((uint64_t)v26, 1);
LABEL_8:
    outlined destroy of TaskPriority?((uint64_t)v26, &demangling cache variable for type metadata for PromptProcessingInstrumenter?);
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_21_1();
  v42 = v5;
  OUTLINED_FUNCTION_56_0();
  if ((v31 & 1) != 0)
  {
    OUTLINED_FUNCTION_55_0((uint64_t)v26, *(_QWORD *)(v29 + 56) + *(_QWORD *)(v28 + 72) * v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  OUTLINED_FUNCTION_11_1((uint64_t)v26, v32, 1, v27);
  OUTLINED_FUNCTION_28_1((uint64_t)v26, 1, v27);
  if (v35)
    goto LABEL_8;
  OUTLINED_FUNCTION_55_0(v1, (uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
  v33 = v45;
  PromptProcessingInstrumenter.inputTokensCount.setter();
  v34 = OUTLINED_FUNCTION_60_0();
  outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(v33 + *(int *)(v34 + 44), (uint64_t)v16);
  OUTLINED_FUNCTION_28_1((uint64_t)v16, 1, v17);
  if (v35)
  {
    outlined destroy of TaskPriority?((uint64_t)v16, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  }
  else
  {
    v36 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v21, v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v44, v21, v17);
    OUTLINED_FUNCTION_43_0();
    PromptProcessingInstrumenter.errorType.setter();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v21, v17);
  }
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 216));
  v37 = v48;
  OUTLINED_FUNCTION_55_0(v48, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
  v39 = v49;
  v38 = v50;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v37, *MEMORY[0x24BE3BBD0], v50);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  v40 = OUTLINED_FUNCTION_34_0();
  v41(v40, v42);
  OUTLINED_FUNCTION_40_0(v47, 1);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_49_0();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_59_0();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v1, v27);
LABEL_13:
  OUTLINED_FUNCTION_31();
}

void DataStreamStateManager.startFirstTokenInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t TokenInferenceInstrumenter;
  uint64_t v19[4];
  uint64_t v20;

  OUTLINED_FUNCTION_51();
  v20 = OUTLINED_FUNCTION_16_0(v1, v2);
  v19[2] = *(_QWORD *)(v20 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2(v4, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_23_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_8_0(v7, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_15_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_52_0();
  if (!v12)
  {
    v16 = OUTLINED_FUNCTION_17_1();
LABEL_8:
    OUTLINED_FUNCTION_41_0(v16, &demangling cache variable for type metadata for DataStreamState?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_30_0();
  if ((v14 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_1(v13);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  OUTLINED_FUNCTION_11_1((uint64_t)v10, v15, 1, v0);
  v16 = OUTLINED_FUNCTION_22_1();
  if (v17)
    goto LABEL_8;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_6_4(OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_12_1();
  FirstTokenInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)();
  TokenInferenceInstrumenter = type metadata accessor for FirstTokenInferenceInstrumenter();
  OUTLINED_FUNCTION_14_1(TokenInferenceInstrumenter);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_53();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_50_0();
LABEL_9:
  OUTLINED_FUNCTION_31();
}

void DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_51();
  v6 = v0;
  v8 = v7;
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  v11 = OUTLINED_FUNCTION_10_2(v10, v26);
  v12 = OUTLINED_FUNCTION_57(v11);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_45_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_33_0(v14, v27);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_35_0();
  type metadata accessor for FirstTokenInferenceInstrumenter();
  OUTLINED_FUNCTION_54_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_4_0();
  v17 = *(_QWORD *)(v0 + 120);
  if (!*(_QWORD *)(v17 + 16))
  {
    v21 = OUTLINED_FUNCTION_38_0();
LABEL_8:
    OUTLINED_FUNCTION_58(v21, &demangling cache variable for type metadata for FirstTokenInferenceInstrumenter?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_56_0();
  if ((v19 & 1) != 0)
  {
    OUTLINED_FUNCTION_26_0(v1, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v3 + 72) * v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  OUTLINED_FUNCTION_11_1(v1, v20, 1, v2);
  v21 = OUTLINED_FUNCTION_28_1(v1, 1, v2);
  if (v22)
    goto LABEL_8;
  OUTLINED_FUNCTION_26_0(v5, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 192), *(_QWORD *)(v6 + 216));
  v23 = OUTLINED_FUNCTION_26_0(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_42_0(v23, *MEMORY[0x24BE3BBD8]);
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_47_0();
  v24 = OUTLINED_FUNCTION_34_0();
  v25(v24, v8);
  __swift_storeEnumTagSinglePayload(v28, 1, 1, v2);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_49_0();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_36_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
LABEL_9:
  OUTLINED_FUNCTION_31();
}

void DataStreamStateManager.startExtendInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19[4];
  uint64_t v20;

  OUTLINED_FUNCTION_51();
  v20 = OUTLINED_FUNCTION_16_0(v1, v2);
  v19[2] = *(_QWORD *)(v20 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2(v4, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_23_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_8_0(v7, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_15_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_52_0();
  if (!v12)
  {
    v16 = OUTLINED_FUNCTION_17_1();
LABEL_8:
    OUTLINED_FUNCTION_41_0(v16, &demangling cache variable for type metadata for DataStreamState?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_30_0();
  if ((v14 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_1(v13);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  OUTLINED_FUNCTION_11_1((uint64_t)v10, v15, 1, v0);
  v16 = OUTLINED_FUNCTION_22_1();
  if (v17)
    goto LABEL_8;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_6_4(OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_12_1();
  ExtendInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)();
  v18 = type metadata accessor for ExtendInferenceInstrumenter();
  OUTLINED_FUNCTION_14_1(v18);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_53();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_50_0();
LABEL_9:
  OUTLINED_FUNCTION_31();
}

void DataStreamStateManager.endExtendInferenceInstrumented(uuid:state:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_51();
  v6 = v0;
  v8 = v7;
  OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  v11 = OUTLINED_FUNCTION_10_2(v10, v26);
  v12 = OUTLINED_FUNCTION_57(v11);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_45_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_33_0(v14, v27);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_35_0();
  type metadata accessor for ExtendInferenceInstrumenter();
  OUTLINED_FUNCTION_54_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_4_0();
  v17 = *(_QWORD *)(v0 + 136);
  if (!*(_QWORD *)(v17 + 16))
  {
    v21 = OUTLINED_FUNCTION_38_0();
LABEL_8:
    OUTLINED_FUNCTION_58(v21, &demangling cache variable for type metadata for ExtendInferenceInstrumenter?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_56_0();
  if ((v19 & 1) != 0)
  {
    OUTLINED_FUNCTION_26_0(v1, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v3 + 72) * v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  OUTLINED_FUNCTION_11_1(v1, v20, 1, v2);
  v21 = OUTLINED_FUNCTION_28_1(v1, 1, v2);
  if (v22)
    goto LABEL_8;
  OUTLINED_FUNCTION_26_0(v5, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  ExtendInferenceInstrumenter.outputTokensCount.setter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 192), *(_QWORD *)(v6 + 216));
  v23 = OUTLINED_FUNCTION_26_0(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_42_0(v23, *MEMORY[0x24BE3BBC8]);
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_47_0();
  v24 = OUTLINED_FUNCTION_34_0();
  v25(v24, v8);
  __swift_storeEnumTagSinglePayload(v28, 1, 1, v2);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_49_0();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_36_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
LABEL_9:
  OUTLINED_FUNCTION_31();
}

void DataStreamStateManager.startCompletePromptInstrumenter(uuid:onBehalfOfUserIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19[4];
  uint64_t v20;

  OUTLINED_FUNCTION_51();
  v20 = OUTLINED_FUNCTION_16_0(v1, v2);
  v19[2] = *(_QWORD *)(v20 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2(v4, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_23_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_8_0(v7, v19[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_15_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_52_0();
  if (!v12)
  {
    v16 = OUTLINED_FUNCTION_17_1();
LABEL_8:
    OUTLINED_FUNCTION_41_0(v16, &demangling cache variable for type metadata for DataStreamState?);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_30_0();
  if ((v14 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_1(v13);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  OUTLINED_FUNCTION_11_1((uint64_t)v10, v15, 1, v0);
  v16 = OUTLINED_FUNCTION_22_1();
  if (v17)
    goto LABEL_8;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_6_4(OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger);
  swift_bridgeObjectRetain();
  CompletePromptRequestInstrumenter.init(signpostLogger:requestIdentifier:oneshot:onBehalfOfUserIdentifier:)();
  v18 = type metadata accessor for CompletePromptRequestInstrumenter();
  OUTLINED_FUNCTION_14_1(v18);
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_53();
  specialized Dictionary.subscript.setter();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_50_0();
LABEL_9:
  OUTLINED_FUNCTION_31();
}

uint64_t DataStreamStateManager.endCompletePromptInstrumenter(uuid:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;

  v65 = a2;
  v6 = OUTLINED_FUNCTION_4_4();
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_31_0();
  v64 = v8;
  v9 = type metadata accessor for Instrumenter();
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v58 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  OUTLINED_FUNCTION_1_4();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v51 - v16;
  v18 = OUTLINED_FUNCTION_61_0();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_19_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_32_0();
  v57 = v21;
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_35_0();
  v23 = type metadata accessor for CompletePromptRequestInstrumenter();
  v66 = *(_QWORD *)(v23 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v2 + 128;
  OUTLINED_FUNCTION_4_0();
  v59 = v2;
  v27 = *(_QWORD *)(v2 + 128);
  if (!*(_QWORD *)(v27 + 16))
  {
    v31 = OUTLINED_FUNCTION_39_0(v3, 1);
    return OUTLINED_FUNCTION_58(v31, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  }
  OUTLINED_FUNCTION_21_1();
  v55 = a1;
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v29 & 1) != 0)
  {
    OUTLINED_FUNCTION_48_0(v3, *(_QWORD *)(v27 + 56) + *(_QWORD *)(v66 + 72) * v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16));
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  v32 = v65;
  OUTLINED_FUNCTION_11_1(v3, v30, 1, v23);
  v31 = OUTLINED_FUNCTION_28_1(v3, 1, v23);
  if (v35)
    return OUTLINED_FUNCTION_58(v31, &demangling cache variable for type metadata for CompletePromptRequestInstrumenter?);
  OUTLINED_FUNCTION_48_0((uint64_t)v26, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 32));
  v34 = type metadata accessor for DataStreamState(0);
  outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(v32 + *(int *)(v34 + 44), (uint64_t)v17);
  v36 = OUTLINED_FUNCTION_28_1((uint64_t)v17, 1, v18);
  if (v35)
  {
    OUTLINED_FUNCTION_41_0(v36, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  }
  else
  {
    OUTLINED_FUNCTION_26_0(v4, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32));
    OUTLINED_FUNCTION_26_0((uint64_t)v15, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16));
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v18);
    CompletePromptRequestInstrumenter.errorType.setter();
    OUTLINED_FUNCTION_36_0(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  }
  v37 = (uint64_t *)(v32 + *(int *)(v34 + 52));
  if ((v37[13] & 1) != 0)
  {
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
  }
  else
  {
    v39 = v37[11];
    v38 = v37[12];
    LODWORD(v65) = *((_DWORD *)v37 + 20);
    v54 = v37[9];
    v53 = *(_OWORD *)(v37 + 7);
    v41 = v37[5];
    v40 = v37[6];
    v42 = v37[4];
    v51 = *((_OWORD *)v37 + 1);
    v43 = *((_DWORD *)v37 + 2);
    v44 = *v37;
    v52 = HIDWORD(v40);
    *((_QWORD *)&v68 + 1) = &type metadata for SpeculativeDecoderPerformanceMeasurement;
    v69 = lazy protocol witness table accessor for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement();
    v45 = swift_allocObject();
    *(_QWORD *)&v67 = v45;
    *(_QWORD *)(v45 + 16) = v44;
    *(_BYTE *)(v45 + 24) = v43 & 1;
    *(_OWORD *)(v45 + 32) = v51;
    *(_QWORD *)(v45 + 48) = v42;
    *(_QWORD *)(v45 + 56) = v41;
    *(_BYTE *)(v45 + 64) = v40 & 1;
    *(_DWORD *)(v45 + 68) = v52;
    *(_OWORD *)(v45 + 72) = v53;
    *(_QWORD *)(v45 + 88) = v54;
    *(_BYTE *)(v45 + 96) = v65 & 1;
    *(_QWORD *)(v45 + 104) = v39;
    *(_QWORD *)(v45 + 112) = v38;
  }
  v46 = v55;
  CompletePromptRequestInstrumenter.speculativeDecoderStats.setter();
  CompletePromptRequestInstrumenter.outputTokensCount.setter();
  CompletePromptRequestInstrumenter.inputTokensCount.setter();
  CompletePromptRequestInstrumenter.prefixKVCacheTokensMatchCount.setter();
  CompletePromptRequestInstrumenter.promptModulesKVCacheTokensMatchCount.setter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v59 + 192), *(_QWORD *)(v59 + 216));
  v47 = v66;
  v48 = v58;
  OUTLINED_FUNCTION_48_0(v58, (uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16));
  v50 = v60;
  v49 = v61;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v48, *MEMORY[0x24BE3BBE0], v61);
  dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v64, v46, v63);
  OUTLINED_FUNCTION_39_0(v57, 1);
  OUTLINED_FUNCTION_4_0();
  specialized Dictionary.subscript.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v26, v23);
}

void DataStreamStateManager.updateState(uuid:state:)()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];

  OUTLINED_FUNCTION_51();
  v2 = v1;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_59();
  v8 = v7 - v6;
  v9 = OUTLINED_FUNCTION_4_4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_59();
  v13 = v12 - v11;
  OUTLINED_FUNCTION_4_0();
  v16[2] = v4;
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_64_0((uint64_t (*)(char *))partial apply for closure #1 in DataStreamStateManager.updateState(uuid:state:), (uint64_t)v16);
  OUTLINED_FUNCTION_63();
  if ((v0 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v4, v9);
    outlined init with copy of DataStreamState(v2, v8);
    v14 = type metadata accessor for DataStreamState(0);
    OUTLINED_FUNCTION_27_1(v8, 0, v15, v14);
    OUTLINED_FUNCTION_4_0();
    specialized Dictionary.subscript.setter(v8);
    OUTLINED_FUNCTION_44_0();
  }
  OUTLINED_FUNCTION_31();
}

uint64_t DataStreamStateManager.stateForUUID(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_52_0();
  if (v3)
  {
    OUTLINED_FUNCTION_21_1();
    specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v5 & 1) != 0)
    {
      v6 = v4;
      v7 = *(_QWORD *)(v1 + 56);
      v8 = type metadata accessor for DataStreamState(0);
      outlined init with copy of DataStreamState(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v6, a1);
      v9 = a1;
      v10 = 0;
      v11 = v8;
    }
    else
    {
      v11 = type metadata accessor for DataStreamState(0);
      v9 = a1;
      v10 = 1;
    }
    return OUTLINED_FUNCTION_11_1(v9, v10, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for DataStreamState(0);
    return OUTLINED_FUNCTION_27_1(a1, 1, v13, v12);
  }
}

void DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_51();
  v1 = v0;
  v29 = v3;
  v30 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_59();
  v11 = v10 - v9;
  v12 = OUTLINED_FUNCTION_4_4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_59();
  v16 = v15 - v14;
  v17 = (int *)OUTLINED_FUNCTION_60_0();
  v18 = v7 + v17[11];
  v19 = OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_27_1(v18, 1, v20, v19);
  v21 = v7 + v17[14];
  v22 = type metadata accessor for FinishReason();
  OUTLINED_FUNCTION_27_1(v21, 1, v23, v22);
  swift_bridgeObjectRetain();
  StopSequenceMonitor.init(stopSequences:)();
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = v24;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = v24;
  *(_BYTE *)(v7 + v17[10]) = v5;
  v25 = (_QWORD *)(v7 + v17[12]);
  *v25 = v29;
  v25[1] = v1;
  v26 = v7 + v17[13];
  *(_QWORD *)(v26 + 96) = 0;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_BYTE *)(v26 + 104) = 1;
  v27 = v7 + v17[15];
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  v28 = v7 + v17[16];
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  OUTLINED_FUNCTION_48_0(v16, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
  outlined init with copy of DataStreamState(v7, v11);
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_4_0();
  specialized Dictionary.subscript.setter(v11);
  swift_endAccess();
  DataStreamStateManager.startCompletePromptInstrumenter(uuid:onBehalfOfUserIdentifier:)();
  OUTLINED_FUNCTION_31();
}

uint64_t DataStreamStateManager.removeState(uuid:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  v3[11] = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_4_4();
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 - 8);
  v3[14] = OUTLINED_FUNCTION_46_0();
  return swift_task_switch();
}

uint64_t DataStreamStateManager.removeState(uuid:state:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_4_0();
  v2 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v1;
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_64_0((uint64_t (*)(char *))partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:), v2);
  OUTLINED_FUNCTION_63();
  swift_task_dealloc();
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD **)(v0 + 72);
    v4 = OUTLINED_FUNCTION_60_0();
    if ((*((_BYTE *)v3 + *(int *)(v4 + 52) + 104) & 1) == 0)
    {
      SpeculativeDecoderPerformanceMeasurement.printToOSLogForLLMWheel()();
      v3 = *(_QWORD **)(v0 + 72);
    }
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
    __swift_storeEnumTagSinglePayload(v5, 1, 1, v4);
    OUTLINED_FUNCTION_4_0();
    specialized Dictionary.subscript.setter(v5);
    swift_endAccess();
    *(_QWORD *)(v0 + 120) = __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 152), *(_QWORD *)(v6 + 176));
    *(_QWORD *)(v0 + 128) = *v3;
    return swift_task_switch();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  Swift::OpaquePointer *v0;

  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[16]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 64);
  DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)();
  DataStreamStateManager.endExtendInferenceInstrumented(uuid:state:)();
  DataStreamStateManager.endCompletePromptInstrumenter(uuid:state:)(v2, v1);
  OUTLINED_FUNCTION_62_0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DataStreamStateManager.deinit()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  v1 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_3_4(v1);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t DataStreamStateManager.__deallocating_deinit()
{
  DataStreamStateManager.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t ObjC metadata update function for DataStreamStateManager()
{
  return type metadata accessor for DataStreamStateManager(0);
}

uint64_t type metadata accessor for DataStreamStateManager(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for DataStreamStateManager);
}

uint64_t type metadata completion function for DataStreamStateManager()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DataStreamState(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    v8 = a3[9];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for StopSequenceMonitor();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[11];
    *(_BYTE *)(v7 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v14 = (void *)(v7 + v13);
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    v18 = a3[12];
    v19 = a3[13];
    v20 = (_QWORD *)(v7 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    memcpy((void *)(v7 + v19), (char *)a2 + v19, 0x69uLL);
    v23 = a3[14];
    v24 = (void *)(v7 + v23);
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for FinishReason();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
    }
    v28 = a3[15];
    v29 = a3[16];
    v30 = v7 + v28;
    v31 = (uint64_t)a2 + v28;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    v32 = v7 + v29;
    v33 = (uint64_t)a2 + v29;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  }
  return v7;
}

uint64_t destroy for DataStreamState(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[11];
  v7 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[14];
  v9 = type metadata accessor for FinishReason();
  result = __swift_getEnumTagSinglePayload(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return result;
}

uint64_t initializeWithCopy for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for StopSequenceMonitor();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  v16 = a3[12];
  v17 = a3[13];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  memcpy((void *)(a1 + v17), (const void *)(a2 + v17), 0x69uLL);
  v21 = a3[14];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for FinishReason();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
  }
  v26 = a3[15];
  v27 = a3[16];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  return a1;
}

uint64_t assignWithCopy for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v10 = a3[11];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  v18 = a3[12];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + a3[13]), (const void *)(a2 + a3[13]), 0x69uLL);
  v21 = a3[14];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for FinishReason();
  v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (!v25)
  {
    v27 = *(_QWORD *)(v24 - 8);
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 24))(v22, v23, v24);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
LABEL_13:
  v29 = a3[15];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  *(_QWORD *)v30 = v32;
  v33 = a3[16];
  v34 = a1 + v33;
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
  *(_QWORD *)v34 = v36;
  return a1;
}

uint64_t initializeWithTake for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  v15 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  memcpy((void *)(a1 + v15), (const void *)(a2 + v15), 0x69uLL);
  v16 = a3[14];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = type metadata accessor for FinishReason();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  v21 = a3[15];
  v22 = a3[16];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = a1 + v22;
  v26 = a2 + v22;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  return a1;
}

uint64_t assignWithTake for DataStreamState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for StopSequenceMonitor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (EnumTagSinglePayload)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  v18 = a3[12];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + a3[13]), (const void *)(a2 + a3[13]), 0x69uLL);
  v23 = a3[14];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = type metadata accessor for FinishReason();
  v27 = __swift_getEnumTagSinglePayload((uint64_t)v24, 1, v26);
  v28 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26);
  if (!v27)
  {
    v29 = *(_QWORD *)(v26 - 8);
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
LABEL_13:
  v31 = a3[15];
  v32 = a3[16];
  v33 = a1 + v31;
  v34 = a2 + v31;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  v35 = a1 + v32;
  v36 = a2 + v32;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataStreamState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248CF3AC4(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for StopSequenceMonitor();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = a3[9];
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
      {
        v9 = v11;
        v10 = a3[11];
      }
      else
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
        v10 = a3[14];
      }
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for DataStreamState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_248CF3B94(_QWORD *result, uint64_t a2, int a3, int *a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for StopSequenceMonitor();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = a4[9];
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
      if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
      {
        v9 = v11;
        v10 = a4[11];
      }
      else
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
        v10 = a4[14];
      }
    }
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for DataStreamState(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for DataStreamState);
}

uint64_t type metadata accessor for DataStreamStateManager(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for DataStreamState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for StopSequenceMonitor();
  if (v0 <= 0x3F)
  {
    type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(319, &lazy cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?, (void (*)(uint64_t))MEMORY[0x24BE5A990]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(319, &lazy cache variable for type metadata for FinishReason?, (void (*)(uint64_t))MEMORY[0x24BEB8130]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t DataStreamStateManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance DataStreamStateManager()
{
  return DataStreamStateManager.unownedExecutor.getter();
}

uint64_t partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t outlined init with copy of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: UUID, value: DataStreamState)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: DataStreamState));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement;
  if (!lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for SpeculativeDecoderPerformanceMeasurement, &type metadata for SpeculativeDecoderPerformanceMeasurement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeculativeDecoderPerformanceMeasurement and conformance SpeculativeDecoderPerformanceMeasurement);
  }
  return result;
}

uint64_t sub_248CF3F50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DataStreamStateManager.updateState(uuid:state:)()
{
  return partial apply for closure #1 in DataStreamStateManager.removeState(uuid:state:)() & 1;
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_6_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 176) + 16))(*(_QWORD *)(v2 - 168), v1 + a1, *(_QWORD *)(v2 - 160));
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v0 + 16))(*(_QWORD *)(v2 - 152), *(_QWORD *)(v2 - 184), v1);
}

void OUTLINED_FUNCTION_8_0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_9_2(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_10_2@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Instrumenter();
}

uint64_t OUTLINED_FUNCTION_11_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_14_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return type metadata accessor for DataStreamState(0);
}

uint64_t OUTLINED_FUNCTION_16_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = a2;
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_18_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return outlined init with copy of DataStreamState(*(_QWORD *)(v1 + 56) + *(_QWORD *)(v2 + 72) * a1, v3);
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_26_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_27_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
}

uint64_t OUTLINED_FUNCTION_28_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of DataStreamState(v0, v1);
}

void OUTLINED_FUNCTION_30_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 184) = v0;
  specialized __RawDictionaryStorage.find<A>(_:)();
}

void OUTLINED_FUNCTION_33_0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_36_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_40_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_41_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of TaskPriority?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_42_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 104))(v3, a2, *(_QWORD *)(v4 - 168));
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_48_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  uint64_t v0;

  return outlined destroy of DataStreamState(v0);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)();
}

uint64_t OUTLINED_FUNCTION_53()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_55_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_56_0()
{
  specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_57(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of TaskPriority?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return type metadata accessor for DataStreamState(0);
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType();
}

uint64_t OUTLINED_FUNCTION_62_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_63()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_64_0(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;

  return specialized Sequence.contains(where:)(a1, a2, v2);
}

void DelayedMaskedLanguageModel.baseLanguageModel.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_0();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 24, a1);
  OUTLINED_FUNCTION_8_1();
}

void DelayedMaskedLanguageModel.baseLanguageModel.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 24;
  OUTLINED_FUNCTION_4_0();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of LogitCollection(a1, v3);
  swift_endAccess();
  OUTLINED_FUNCTION_8_1();
}

uint64_t (*DelayedMaskedLanguageModel.baseLanguageModel.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t DelayedMaskedLanguageModel.__allocating_init(_:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  outlined init with take of LogitCollection(a1, v2 + 24);
  return v2;
}

uint64_t DelayedMaskedLanguageModel.init(_:)(__int128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  outlined init with take of LogitCollection(a1, v1 + 24);
  return v1;
}

unint64_t DelayedMaskedLanguageModel.resolve(maskLanguageModel:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  unint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[40];

  if (v1[2])
  {
    OUTLINED_FUNCTION_9_3();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with copy of DeterministicLanguageModelProtocol?(a1, (uint64_t)&v22);
  if (v23)
  {
    outlined init with take of LogitCollection(&v22, (uint64_t)v24);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v24, (uint64_t)&v22);
    OUTLINED_FUNCTION_4_0();
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)(v1 + 3), (uint64_t)v19);
    type metadata accessor for MaskedLanguageModel();
    v2 = swift_allocObject();
    v3 = v20;
    v4 = v21;
    v5 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
    MEMORY[0x24BDAC7A8](v5);
    v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v8 + 16))(v7);
    specialized MaskedLanguageModel.init(_:_:)((uint64_t)&v22, (uint64_t)v7, v2, v3, v4);
    v10 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v11 = v1[2];
    v1[2] = v10;
    swift_retain();
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v11);
    v12 = v1[6];
    v13 = v1[7];
    v14 = __swift_project_boxed_opaque_existential_1(v1 + 3, v12);
    v15 = *(_QWORD *)(v12 - 8);
    MEMORY[0x24BDAC7A8](v14);
    OUTLINED_FUNCTION_5_4();
    (*(void (**)(_QWORD *))(v15 + 16))(v1);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    swift_release();
    (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v1, v12);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (!v16)
      return result;
    __break(1u);
  }
  outlined destroy of DeterministicLanguageModelProtocol?((uint64_t)&v22);
  v18 = v1[2];
  v1[2] = 1;
  return outlined consume of DelayedMaskedLanguageModel.MaskResolution(v18);
}

uint64_t outlined init with copy of DeterministicLanguageModelProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DeterministicLanguageModelProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t outlined consume of DelayedMaskedLanguageModel.MaskResolution(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

uint64_t DelayedMaskedLanguageModel.startNode.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_0();
  v1 = v0[6];
  v2 = v0[7];
  v3 = __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  v4 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_5_4();
  (*(void (**)(_QWORD *))(v4 + 16))(v0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v0, v1);
  return v5;
}

uint64_t DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch();
}

void DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  v1 = v0[18];
  v2 = *(_QWORD *)(v1 + 16);
  v0[19] = v2;
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = v1 + 24;
      OUTLINED_FUNCTION_4_0();
      outlined init with copy of DeterministicLanguageModelProtocol(v3, (uint64_t)(v0 + 2));
      v4 = v0[6];
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      v9 = (void (*)(uint64_t))(**(int **)(v4 + 24) + *(_QWORD *)(v4 + 24));
      v5 = (_QWORD *)swift_task_alloc();
      v0[22] = v5;
      v6 = OUTLINED_FUNCTION_10_3(v5, (uint64_t)DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:));
      v9(v6);
    }
    else
    {
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      v0[20] = v7;
      v8 = OUTLINED_FUNCTION_10_3(v7, (uint64_t)DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:));
      MaskedLanguageModel.nextTokensLogits(nodes:presampler:)(v8);
    }
  }
  else
  {
    OUTLINED_FUNCTION_9_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_8_1();
  }
}

uint64_t DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_6_5();
  v3[10] = v1;
  v3[11] = v2;
  v3[12] = v0;
  *v4 = *v1;
  v3[21] = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_6_5();
  v3[13] = v1;
  v3[14] = v2;
  v3[15] = v0;
  *v4 = *v1;
  v3[23] = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return OUTLINED_FUNCTION_2_5(*(_QWORD *)(v0 + 112), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(_QWORD *)(v0 + 152));
  return OUTLINED_FUNCTION_2_5(*(_QWORD *)(v0 + 88), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(_QWORD *)(v0 + 152));
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Int __swiftcall DelayedMaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  _QWORD *v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;

  v7 = v3[2];
  if (v7 == 1)
  {
    OUTLINED_FUNCTION_4_0();
    v8 = v3[6];
    v9 = v3[7];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v3 + 3), v8);
    (*(void (**)(Swift::Int, Swift::Int, Swift::Bool, uint64_t, uint64_t))(v9 + 16))(forPreviousNode, token, isPrompt, v8, v9);
    OUTLINED_FUNCTION_7_4();
    return token;
  }
  if (v7)
  {
    swift_retain();
    token = MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(forPreviousNode, token, isPrompt);
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v7);
    return token;
  }
  OUTLINED_FUNCTION_9_3();
  result = OUTLINED_FUNCTION_0_3();
  __break(1u);
  return result;
}

Swift::Int __swiftcall DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  TokenGenerationInference::SamplingDecoderPrompt v8;
  Swift::Int result;
  _QWORD v10[3];
  _QWORD v11[2];

  v4 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
  v5 = v2[2];
  if (v5 == 1)
  {
    v11[0] = *(_QWORD *)prompt.queryTokens._rawValue;
    v11[1] = v4;
    OUTLINED_FUNCTION_4_0();
    v6 = v2[6];
    v7 = v2[7];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 3), v6);
    (*(void (**)(Swift::Int, _QWORD *, uint64_t, uint64_t))(v7 + 40))(forPreviousNode, v11, v6, v7);
    OUTLINED_FUNCTION_7_4();
    return forPreviousNode;
  }
  if (v5)
  {
    v10[0] = *(_QWORD *)prompt.queryTokens._rawValue;
    v10[1] = v4;
    swift_retain();
    v8.queryTokens._rawValue = v10;
    forPreviousNode = MaskedLanguageModel.node(forPreviousNode:prompt:)(forPreviousNode, v8);
    outlined consume of DelayedMaskedLanguageModel.MaskResolution(v5);
    return forPreviousNode;
  }
  OUTLINED_FUNCTION_9_3();
  result = OUTLINED_FUNCTION_0_3();
  __break(1u);
  return result;
}

uint64_t DelayedMaskedLanguageModel.deinit()
{
  uint64_t v0;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t DelayedMaskedLanguageModel.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of DelayedMaskedLanguageModel.MaskResolution(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance DelayedMaskedLanguageModel()
{
  return DelayedMaskedLanguageModel.startNode.getter();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance DelayedMaskedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return DelayedMaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance DelayedMaskedLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance DelayedMaskedLanguageModel;
  return DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:)(a1, a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance DelayedMaskedLanguageModel(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6_5();
  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance DelayedMaskedLanguageModel(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  return DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(a1, *(TokenGenerationInference::SamplingDecoderPrompt *)&a2);
}

uint64_t type metadata accessor for DelayedMaskedLanguageModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for DelayedMaskedLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DelayedMaskedLanguageModel.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for DelayedMaskedLanguageModel.MaskResolution(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DelayedMaskedLanguageModel.MaskResolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for DelayedMaskedLanguageModel.MaskResolution(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for DelayedMaskedLanguageModel.MaskResolution(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

void *type metadata accessor for DelayedMaskedLanguageModel.MaskResolution()
{
  return &unk_2519DED08;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_2_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void OUTLINED_FUNCTION_6_5()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_10_3@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 128);
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[21] = a5;
  v6[22] = v5;
  v6[19] = a3;
  v6[20] = a4;
  v6[17] = a1;
  v6[18] = a2;
  v6[23] = *(_QWORD *)(a4 - 8);
  v6[24] = swift_task_alloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 16))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of LogitCollection((__int128 *)(v0 + 56), v0 + 16);
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
    v3 = (_QWORD *)OUTLINED_FUNCTION_16_1();
    *(_QWORD *)(v0 + 200) = v3;
    *v3 = v0;
    v3[1] = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v8)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v1, v2);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
    outlined destroy of UnbatchedDeterministicLanguageModelProtocol?(v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = swift_allocObject();
    *(_QWORD *)(v0 + 216) = v6;
    *(_OWORD *)(v6 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v6 + 32) = v5;
    v7 = (_QWORD *)OUTLINED_FUNCTION_16_1();
    *(_QWORD *)(v0 + 224) = v7;
    *v7 = v0;
    v7[1] = DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:);
    return OUTLINED_FUNCTION_39_1(v6, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_48_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t result;

  specialized Collection.first.getter(*(_QWORD *)(v0 + 240), v0 + 96);
  result = OUTLINED_FUNCTION_7_0();
  if (*(_QWORD *)(v0 + 120))
  {
    outlined init with take of LogitCollection((__int128 *)(v0 + 96), *(_QWORD *)(v0 + 136));
    OUTLINED_FUNCTION_48_1();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_48_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_48_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 240) = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

uint64_t DeterministicLanguageModelProtocol.logitsAreDense.getter()
{
  return 0;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance CompositeLanguageModel(uint64_t a1, uint64_t *a2)
{
  return OUTLINED_FUNCTION_70_0(a1, a2[1], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:), *a2);
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v27;

  v4 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    if (one-time initialization token for device != -1)
LABEL_29:
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.device);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)OUTLINED_FUNCTION_68_0();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_248CAA000, v9, v10, "Ignoring prompt modules, using flattened prompt", v11, 2u);
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_64_1();
    v12 = 0;
    v13 = MEMORY[0x24BEE4AF8];
    do
    {
      v14 = *(_QWORD *)(a3 + 8 * v12 + 32);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v13 + 16);
      if (__OFADD__(v16, v15))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v16 + v15 > *(_QWORD *)(v13 + 24) >> 1)
      {
        OUTLINED_FUNCTION_61_1();
        v13 = v17;
      }
      if (*(_QWORD *)(v14 + 16))
      {
        v18 = *(_QWORD *)(v13 + 16);
        if ((*(_QWORD *)(v13 + 24) >> 1) - v18 < v15)
          goto LABEL_27;
        v19 = (void *)(v13 + 8 * v18 + 32);
        if (v14 + 32 < (unint64_t)v19 + 8 * v15 && (unint64_t)v19 < v14 + 32 + 8 * v15)
        {
          OUTLINED_FUNCTION_0_2();
          result = OUTLINED_FUNCTION_9();
          __break(1u);
          return result;
        }
        memcpy(v19, (const void *)(v14 + 32), 8 * v15);
        if (v15)
        {
          v21 = *(_QWORD *)(v13 + 16);
          v22 = __OFADD__(v21, v15);
          v23 = v21 + v15;
          if (v22)
            goto LABEL_28;
          *(_QWORD *)(v13 + 16) = v23;
        }
      }
      else if (v15)
      {
        goto LABEL_26;
      }
      ++v12;
      OUTLINED_FUNCTION_63_0();
    }
    while (v7 != v12);
    OUTLINED_FUNCTION_51_1();
    v27 = v13;
    v4 = a4;
  }
  else
  {
    v27 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_50_1();
  }
  OUTLINED_FUNCTION_65_0();
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_51_1();
  swift_bridgeObjectRelease();
  v24 = v4(a1, v27, 1);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    if (one-time initialization token for device != -1)
LABEL_29:
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.device);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_248CAA000, v7, v8, "Ignoring prompt modules, using flattened prompt", v9, 2u);
      MEMORY[0x2495AAF60](v9, -1, -1);
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v10 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    do
    {
      v12 = *(_QWORD *)(a3 + 8 * v10 + 32);
      v13 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v11 + 16);
      if (__OFADD__(v14, v13))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v14 + v13 > *(_QWORD *)(v11 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v11 = v15;
      }
      if (*(_QWORD *)(v12 + 16))
      {
        v16 = *(_QWORD *)(v11 + 16);
        if ((*(_QWORD *)(v11 + 24) >> 1) - v16 < v13)
          goto LABEL_27;
        v17 = (void *)(v11 + 8 * v16 + 32);
        if (v12 + 32 < (unint64_t)v17 + 8 * v13 && (unint64_t)v17 < v12 + 32 + 8 * v13)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        memcpy(v17, (const void *)(v12 + 32), 8 * v13);
        if (v13)
        {
          v19 = *(_QWORD *)(v11 + 16);
          v20 = __OFADD__(v19, v13);
          v21 = v19 + v13;
          if (v20)
            goto LABEL_28;
          *(_QWORD *)(v11 + 16) = v21;
        }
      }
      else if (v13)
      {
        goto LABEL_26;
      }
      ++v10;
      swift_bridgeObjectRelease();
    }
    while (v5 != v10);
    swift_bridgeObjectRelease();
    v25 = v11;
  }
  else
  {
    v25 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, v25);
  v23 = v22;
  swift_bridgeObjectRelease();
  return v23;
}

Swift::Int __swiftcall DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int result;
  Swift::OpaquePointer tokens;

  v3 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
  if (*(_QWORD *)(v3 + 16))
  {
    if (one-time initialization token for device != -1)
      goto LABEL_31;
    while (1)
    {
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.device);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)OUTLINED_FUNCTION_68_0();
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_248CAA000, v5, v6, "Ignoring prompt modules, using flattened prompt", v7, 2u);
        OUTLINED_FUNCTION_0_1();
      }

      v8 = *(_QWORD *)(v3 + 16);
      tokens._rawValue = (void *)MEMORY[0x24BEE4AF8];
      if (!v8)
        break;
      OUTLINED_FUNCTION_50_1();
      OUTLINED_FUNCTION_64_1();
      v9 = 0;
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v11 = *(_QWORD *)(v3 + 8 * v9 + 32);
        v12 = *(_QWORD *)(v11 + 16);
        v13 = v10[2];
        if (__OFADD__(v13, v12))
          break;
        swift_bridgeObjectRetain();
        if (!swift_isUniquelyReferenced_nonNull_native() || v13 + v12 > v10[3] >> 1)
        {
          OUTLINED_FUNCTION_61_1();
          v10 = v14;
        }
        if (*(_QWORD *)(v11 + 16))
        {
          v15 = v10[2];
          if ((v10[3] >> 1) - v15 < v12)
            goto LABEL_29;
          v16 = &v10[v15 + 4];
          if (v11 + 32 < (unint64_t)&v16[v12] && (unint64_t)v16 < v11 + 32 + 8 * v12)
          {
            OUTLINED_FUNCTION_0_2();
            result = OUTLINED_FUNCTION_9();
            __break(1u);
            return result;
          }
          memcpy(v16, (const void *)(v11 + 32), 8 * v12);
          if (v12)
          {
            v18 = v10[2];
            v19 = __OFADD__(v18, v12);
            v20 = v18 + v12;
            if (v19)
              goto LABEL_30;
            v10[2] = v20;
          }
        }
        else if (v12)
        {
          goto LABEL_28;
        }
        ++v9;
        swift_bridgeObjectRelease();
        if (v8 == v9)
        {
          OUTLINED_FUNCTION_63_0();
          tokens._rawValue = v10;
          goto LABEL_26;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_once();
    }
  }
  else
  {
    tokens._rawValue = (void *)MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_50_1();
  swift_bridgeObjectRetain();
LABEL_26:
  OUTLINED_FUNCTION_50_1();
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_51_1();
  v21 = DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(forPreviousNode, tokens, 1);
  OUTLINED_FUNCTION_51_1();
  return v21;
}

Swift::Int __swiftcall DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(Swift::Int forPreviousNode, Swift::OpaquePointer tokens, Swift::Bool isPrompt)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v11)(Swift::Int, _QWORD, _BOOL8, uint64_t, uint64_t);
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;

  v6 = *((_QWORD *)tokens._rawValue + 2);
  if (v6)
  {
    v7 = v4;
    v8 = v3;
    v11 = *(uint64_t (**)(Swift::Int, _QWORD, _BOOL8, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = isPrompt;
    do
    {
      v14 = v12 + 1;
      forPreviousNode = v11(forPreviousNode, *((_QWORD *)tokens._rawValue + v12 + 4), v13, v8, v7);
      v12 = v14;
    }
    while (v6 != v14);
    OUTLINED_FUNCTION_58_0();
  }
  return forPreviousNode;
}

uint64_t DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[4];
  char v7;
  uint64_t v8;

  v8 = a1;
  v6[2] = a4;
  v6[3] = a5;
  v7 = a3;
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:), (uint64_t)v6, a2);
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch();
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_17_2();
  if (!v0)
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_20_1(v2);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_43_1(v3);
  *v4 = v1;
  v4[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  OUTLINED_FUNCTION_27_2();
  return OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:)(v5, v6);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15_2();
  if (v0)
  {
    OUTLINED_FUNCTION_46_1();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_30_1();
  if (v1)
    OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_2_6();
  if (v2)
  {
    OUTLINED_FUNCTION_44_1();
    v3 = OUTLINED_FUNCTION_32_1();
    return OUTLINED_FUNCTION_8_2(v3, v4);
  }
  else
  {
    OUTLINED_FUNCTION_22_2();
    v5 = swift_task_alloc();
    v6 = (_QWORD *)OUTLINED_FUNCTION_43_1(v5);
    *v6 = v0;
    v6[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
    v7 = OUTLINED_FUNCTION_26_1();
    return OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:)(v7, v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_17_2();
  if (!v0)
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_20_1(v2);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_43_1(v3);
  *v4 = v1;
  v4[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  OUTLINED_FUNCTION_27_2();
  return TGICAPILanguageModel.singleNextTokenLogits(node:presampler:)(v5, v6);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15_2();
  if (v0)
  {
    OUTLINED_FUNCTION_46_1();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_30_1();
  if (v1)
    OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_2_6();
  if (v2)
  {
    OUTLINED_FUNCTION_44_1();
    v3 = OUTLINED_FUNCTION_32_1();
    return OUTLINED_FUNCTION_8_2(v3, v4);
  }
  else
  {
    OUTLINED_FUNCTION_22_2();
    v5 = swift_task_alloc();
    v6 = (_QWORD *)OUTLINED_FUNCTION_43_1(v5);
    *v6 = v0;
    v6[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
    v7 = OUTLINED_FUNCTION_26_1();
    return TGICAPILanguageModel.singleNextTokenLogits(node:presampler:)(v7, v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 16);
  *(_QWORD *)(v0 + 104) = v1;
  OUTLINED_FUNCTION_17_2();
  if (!v1)
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v0 + 8));
  v3 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = v2;
  v4 = *(_QWORD *)(v3 + 32);
  swift_bridgeObjectRetain();
  v5 = swift_task_alloc();
  v6 = (_QWORD *)OUTLINED_FUNCTION_66_0(v5);
  *v6 = v0;
  v6[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(v0 + 16, v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_31_1();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 120);
  OUTLINED_FUNCTION_30_1();
  if (v2)
  {
    OUTLINED_FUNCTION_9_4();
    v1 = v11;
  }
  OUTLINED_FUNCTION_2_6();
  if (v3)
  {
    swift_bridgeObjectRelease();
    v4 = OUTLINED_FUNCTION_32_1();
    return OUTLINED_FUNCTION_8_2(v4, v5);
  }
  else
  {
    ++*(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 120) = v1;
    v6 = swift_task_alloc();
    v7 = (_QWORD *)OUTLINED_FUNCTION_66_0(v6);
    *v7 = v0;
    v7[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
    v8 = OUTLINED_FUNCTION_26_1();
    return PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(v8, v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_17_2();
  if (!v0)
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_20_1(v2);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_43_1(v3);
  *v4 = v1;
  v4[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  OUTLINED_FUNCTION_27_2();
  return PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:)(v5, v6);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15_2();
  if (v0)
  {
    OUTLINED_FUNCTION_46_1();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_30_1();
  if (v1)
    OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_2_6();
  if (v2)
  {
    OUTLINED_FUNCTION_44_1();
    v3 = OUTLINED_FUNCTION_32_1();
    return OUTLINED_FUNCTION_8_2(v3, v4);
  }
  else
  {
    OUTLINED_FUNCTION_22_2();
    v5 = swift_task_alloc();
    v6 = (_QWORD *)OUTLINED_FUNCTION_43_1(v5);
    *v6 = v0;
    v6[1] = specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
    v7 = OUTLINED_FUNCTION_26_1();
    return PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:)(v7, v8);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v3 = v2;
  if (!v1)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = (uint64_t *)(*(_QWORD *)(v0 + 56) + 32);
  v18 = v4 + 32;
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 >= v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (next: Int, logit: Float));
      Dictionary.init(dictionaryLiteral:)();
      v14 = type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection();
      v15 = OUTLINED_FUNCTION_49_1(v14);
      OUTLINED_FUNCTION_59_1(v15);
      v13 = swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    if (v8 < 0)
      break;
    v10 = *(_QWORD *)(v18 + 8 * v8);
    v11 = type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection();
    v12 = OUTLINED_FUNCTION_49_1(v11);
    OUTLINED_FUNCTION_59_1(v12);
    OUTLINED_FUNCTION_64_1();
    v13 = v10;
LABEL_7:
    specialized SetAlgebra.init<A>(_:)(v13);
    v16 = *(_QWORD *)(v3 + 16);
    if (v16 >= *(_QWORD *)(v3 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v3 = v17;
    }
    *(_QWORD *)(v3 + 16) = v16 + 1;
    result = outlined init with take of LogitCollection((__int128 *)(v0 + 16), v3 + 40 * v16 + 32);
    if (!--v1)
    {
      OUTLINED_FUNCTION_44_1();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[11] = a1;
  v6[12] = a2;
  v6[7] = a3;
  v6[8] = a4;
  v6[9] = a5;
  v6[10] = a6;
  return swift_task_switch();
}

uint64_t specialized UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = a5;
  return swift_task_switch();
}

uint64_t UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

uint64_t UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16);
  *(_QWORD *)(v0 + 96) = v1;
  OUTLINED_FUNCTION_17_2();
  if (!v1)
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v0 + 8));
  v3 = *(int **)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v0 + 104) = v3;
  swift_bridgeObjectRetain();
  v7 = (uint64_t (*)(void))((char *)v3 + *v3);
  v4 = swift_task_alloc();
  v5 = (_QWORD *)OUTLINED_FUNCTION_66_0(v4);
  *v5 = v0;
  v5[1] = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  OUTLINED_FUNCTION_27_2();
  return v7();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_31_1();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)(void);

  v1 = v0[15];
  OUTLINED_FUNCTION_30_1();
  if (v2)
  {
    OUTLINED_FUNCTION_9_4();
    v1 = v15;
  }
  OUTLINED_FUNCTION_2_6();
  if (v3)
  {
    OUTLINED_FUNCTION_44_1();
    v4 = OUTLINED_FUNCTION_32_1();
    return v5(v4);
  }
  else
  {
    v6 = (int *)v0[13];
    ++v0[14];
    v0[15] = v1;
    v16 = (uint64_t (*)(void))((char *)v6 + *v6);
    v7 = swift_task_alloc();
    v8 = (_QWORD *)OUTLINED_FUNCTION_66_0(v7);
    *v8 = v0;
    v8[1] = UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
    v9 = OUTLINED_FUNCTION_26_1();
    return OUTLINED_FUNCTION_28_2(v9, v10, v11, v12, v13, v16);
  }
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_24_2();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_33_1() || (OUTLINED_FUNCTION_62_1(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_60_1();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_35_1();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = OUTLINED_FUNCTION_52_1();
  specialized UnsafeMutablePointer.initialize(from:count:)(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_7_0();
    *v1 = v2;
    OUTLINED_FUNCTION_5_0();
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_24_2();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_33_1() || (OUTLINED_FUNCTION_62_1(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_60_1();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_35_1();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = OUTLINED_FUNCTION_52_1();
  specialized UnsafeMutablePointer.initialize(from:count:)(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_7_0();
    *v1 = v2;
    OUTLINED_FUNCTION_5_0();
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_24_2();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_33_1() || (OUTLINED_FUNCTION_62_1(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_60_1();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_35_1();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = OUTLINED_FUNCTION_52_1();
  specialized UnsafeMutablePointer.initialize(from:count:)(v8, v9);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_7_0();
    *v1 = v2;
    OUTLINED_FUNCTION_5_0();
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_24_2();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_33_1() || (OUTLINED_FUNCTION_62_1(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_60_1();
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  v7 = (*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16);
  v8 = type metadata accessor for Token();
  if (v7 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)), v3);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_7_0();
    *v1 = v2;
    OUTLINED_FUNCTION_5_0();
    return;
  }
  OUTLINED_FUNCTION_69_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    OUTLINED_FUNCTION_57_0();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_58_0();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    OUTLINED_FUNCTION_57_0();
    v4 = MEMORY[0x2495A9EBC](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    OUTLINED_FUNCTION_57_0();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_58_0();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = a1;
  if (!swift_isUniquelyReferenced_nonNull_native() || (v6 = *(_QWORD *)(v3 + 24) >> 1, v6 < v4 + v2))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v7;
    v6 = *(_QWORD *)(v7 + 24) >> 1;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = v6 - v8;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v45, (_QWORD *)(v3 + 8 * v8 + 32), v6 - v8, v5);
  if (result < v2)
    goto LABEL_12;
  if (result)
  {
    v14 = *(_QWORD *)(v3 + 16);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_42;
    }
    *(_QWORD *)(v3 + 16) = v16;
  }
  if (result != v9)
  {
LABEL_10:
    result = outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
    *v1 = v3;
    return result;
  }
LABEL_13:
  v5 = *(_QWORD *)(v3 + 16);
  result = v45[0];
  v11 = v45[1];
  v12 = v46;
  v13 = v47;
  if (!v48)
  {
LABEL_42:
    v31 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_60;
    v19 = (unint64_t)(v12 + 64) >> 6;
    if (v31 >= v19)
      goto LABEL_10;
    v32 = *(_QWORD *)(v11 + 8 * v31);
    v33 = v13 + 1;
    if (!v32)
    {
      if (v13 + 2 >= v19)
        goto LABEL_10;
      result = OUTLINED_FUNCTION_23_2();
      if (!v32)
      {
        if (v34 + 2 >= v19)
          goto LABEL_10;
        result = OUTLINED_FUNCTION_23_2();
        if (!v32)
        {
          if (v35 + 3 >= v19)
            goto LABEL_10;
          result = OUTLINED_FUNCTION_23_2();
          if (!v32)
          {
            if (v36 + 4 >= v19)
              goto LABEL_10;
            result = OUTLINED_FUNCTION_23_2();
            if (!v32)
            {
              v41 = v37 + 6;
              do
              {
                if (v41 >= v19)
                  goto LABEL_10;
                v32 = *(_QWORD *)(v39 + 8 * v41++);
              }
              while (!v32);
              v33 = v41 - 1;
              v12 = v38;
              v11 = v39;
              result = v40;
            }
          }
        }
      }
    }
    v17 = (v32 - 1) & v32;
    v18 = __clz(__rbit64(v32)) + (v33 << 6);
    v13 = v33;
    goto LABEL_15;
  }
  v17 = (v48 - 1) & v48;
  v18 = __clz(__rbit64(v48)) | (v47 << 6);
  v19 = (unint64_t)(v46 + 64) >> 6;
LABEL_15:
  v20 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v18);
  while (1)
  {
    v21 = *(_QWORD *)(v3 + 24) >> 1;
    if (v21 < v5 + 1)
    {
      v43 = v11;
      v44 = result;
      v42 = v12;
      v28 = v13;
      v29 = v17;
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v17 = v29;
      v13 = v28;
      v12 = v42;
      v11 = v43;
      v3 = v30;
      result = v44;
      v21 = *(_QWORD *)(v3 + 24) >> 1;
    }
    if (v5 < v21)
      break;
LABEL_38:
    *(_QWORD *)(v3 + 16) = v5;
  }
  while (1)
  {
    *(_QWORD *)(v3 + 32 + 8 * v5++) = v20;
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_37;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v24 >= v19)
      goto LABEL_39;
    v25 = *(_QWORD *)(v11 + 8 * v24);
    v26 = v13 + 1;
    if (!v25)
    {
      v26 = v13 + 2;
      if (v13 + 2 >= v19)
        goto LABEL_39;
      v25 = *(_QWORD *)(v11 + 8 * v26);
      if (!v25)
      {
        v26 = v13 + 3;
        if (v13 + 3 >= v19)
          goto LABEL_39;
        v25 = *(_QWORD *)(v11 + 8 * v26);
        if (!v25)
        {
          v26 = v13 + 4;
          if (v13 + 4 >= v19)
            goto LABEL_39;
          v25 = *(_QWORD *)(v11 + 8 * v26);
          if (!v25)
          {
            v26 = v13 + 5;
            if (v13 + 5 >= v19)
              goto LABEL_39;
            v25 = *(_QWORD *)(v11 + 8 * v26);
            if (!v25)
            {
              v27 = v13 + 6;
              while (v27 < v19)
              {
                v25 = *(_QWORD *)(v11 + 8 * v27++);
                if (v25)
                {
                  v26 = v27 - 1;
                  goto LABEL_36;
                }
              }
LABEL_39:
              *(_QWORD *)(v3 + 16) = v5;
              goto LABEL_10;
            }
          }
        }
      }
    }
LABEL_36:
    v17 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v26 << 6);
    v13 = v26;
LABEL_37:
    v20 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v23);
    if (v5 >= v21)
      goto LABEL_38;
  }
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel;
  return UnbatchedDeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(a1, a2, a3, (uint64_t)&protocol witness table for GrammarGuidedLanguageModel);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_56_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_25_1(v1, (uint64_t)protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel);
  return OUTLINED_FUNCTION_18_2(v2, v3, v4);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_4_3();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_10_4(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance OneTokenHealingPrefixMatchingLanguageModel()
{
  return OUTLINED_FUNCTION_0_0() & 1;
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance PrefixGuidedLanguageModel()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v1 = (_QWORD *)OUTLINED_FUNCTION_16_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_42_1(v1, (uint64_t)protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel);
  return v4(v2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance PrefixGuidedLanguageModel()
{
  return OUTLINED_FUNCTION_0_0();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance PromptLookupLanguageModel()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_56_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_25_1(v1, (uint64_t)protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel);
  return OUTLINED_FUNCTION_18_2(v2, v3, v4);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance PromptLookupLanguageModel(uint64_t a1, uint64_t *a2)
{
  return OUTLINED_FUNCTION_70_0(a1, a2[1], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:), *a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance TGICAPILanguageModel()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_56_1();
  v1 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_25_1(v1, (uint64_t)protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel);
  return OUTLINED_FUNCTION_18_2(v2, v3, v4);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance TGICAPILanguageModel(uint64_t a1, uint64_t *a2)
{
  return OUTLINED_FUNCTION_70_0(a1, a2[1], (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:), *a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance WeightedFiniteStateLanguageModel()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v1 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_42_1(v1, (uint64_t)protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance GrammarGuidedLanguageModel);
  return v4(v2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance WeightedFiniteStateLanguageModel()
{
  return OUTLINED_FUNCTION_0_0();
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t *a2)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, *a2, a2[1]);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    v3 = a1 + 8 * a2;
    if (a3 + 8 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)OUTLINED_FUNCTION_36_1();
      return OUTLINED_FUNCTION_6_6(v6, v7, v8);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = (void *)OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    v3 = a1 + 16 * a2;
    if (a3 + 16 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)OUTLINED_FUNCTION_36_1();
      return OUTLINED_FUNCTION_6_6(v6, v7, v8);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = (void *)OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    v3 = a1 + 24 * a2;
    if (a3 + 24 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)OUTLINED_FUNCTION_36_1();
      return OUTLINED_FUNCTION_6_6(v6, v7, v8);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = (void *)OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.startNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(void);

  v9 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:);
  return OUTLINED_FUNCTION_39_1(a1, a2, a3, a4, v11);
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:)(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_3();
  return OUTLINED_FUNCTION_10_4(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.logitsAreDense.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(void);

  v11 = (_QWORD *)OUTLINED_FUNCTION_16_1();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return OUTLINED_FUNCTION_28_2(a1, a2, a3, a4, a5, v13);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    if (v4 + 40 * v3 <= v2 || v2 + 40 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitCollection);
      OUTLINED_FUNCTION_19_2();
      return OUTLINED_FUNCTION_5_5();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    v6 = *(_QWORD *)(*(_QWORD *)(v5(0) - 8) + 72) * v2;
    v7 = v3 + v6;
    v8 = v4 + v6;
    if (v7 <= v4 || v8 <= v3)
    {
      OUTLINED_FUNCTION_19_2();
      return OUTLINED_FUNCTION_5_5();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    if (v4 + 16 * v3 <= v2 || v2 + 16 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, [Int]));
      OUTLINED_FUNCTION_19_2();
      return OUTLINED_FUNCTION_5_5();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_19_2();
      return OUTLINED_FUNCTION_5_5();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_29_1();
    if (v4 + 24 * v3 <= v2 || v2 + 24 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, remaining: String));
      OUTLINED_FUNCTION_19_2();
      return OUTLINED_FUNCTION_5_5();
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_53_0();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)OUTLINED_FUNCTION_36_1();
      return OUTLINED_FUNCTION_6_6(v7, v8, v9);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = (void *)OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    OUTLINED_FUNCTION_54_1();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)OUTLINED_FUNCTION_36_1();
      return OUTLINED_FUNCTION_6_6(v7, v8, v9);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = (void *)OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return OUTLINED_FUNCTION_47_1();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_35();
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
      return OUTLINED_FUNCTION_47_1();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_36();
  }
  result = OUTLINED_FUNCTION_9();
  __break(1u);
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (v3 = a1 + 8 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for TokenTreeNode();
    return swift_arrayInitWithCopy();
  }
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    a3 = 0;
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  if (!a3)
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  if (a3 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_18:
    v17 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v17 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v8 + 2;
  if (v13 + 1 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v13 = v15;
    goto LABEL_18;
  }
  v16 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
    goto LABEL_17;
  v15 = v13 + 3;
  if (v13 + 3 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v16 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    a3 = v9;
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
  {
LABEL_17:
    v13 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v10)
      goto LABEL_31;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    a3 = 0;
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  if (!a3)
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  if (a3 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_18:
    v17 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v17 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v8 + 2;
  if (v13 + 1 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v13 = v15;
    goto LABEL_18;
  }
  v16 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
    goto LABEL_17;
  v15 = v13 + 3;
  if (v13 + 3 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v16 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    a3 = v9;
    return (_QWORD *)OUTLINED_FUNCTION_38_1(result, a3, a4, v4);
  }
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
  {
LABEL_17:
    v13 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v10)
      goto LABEL_31;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_20;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_21;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a2 + 1;
    while (v6)
    {
      if (a5 == v5)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v5 >= a5)
        goto LABEL_19;
      v8 = v5 + 1;
      *v7++ = v5++;
      if (!--v6)
      {
        v5 = v8;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void (*v10)(uint64_t **, _QWORD);
  void (*v11)(uint64_t **, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14[4];

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [TokenTreeNode] and conformance [A]();
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TokenTreeNode]);
            specialized protocol witness for Collection.subscript.read in conformance [A](v14, i, a3);
            v11 = v10;
            v13 = *v12;
            swift_retain();
            v11(v14, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [TokenTreeNode] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TokenTreeNode]);
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TokenTreeNode] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t result;

  v4 = *(uint64_t **)(v2 + 32);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 24) + 16))(*v4, *a1, *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 16));
  *v4 = result;
  *a2 = result;
  return result;
}

uint64_t outlined destroy of UnbatchedDeterministicLanguageModelProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;

  *(_QWORD *)(v0 + 16) = v2;
  return outlined init with take of LogitCollection(v3, v0 + 40 * v1 + 32);
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return swift_arrayInitWithCopy();
}

void *OUTLINED_FUNCTION_6_6(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_8_2(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void OUTLINED_FUNCTION_9_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_10_4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_17_2()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_18_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_20_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_22_2()
{
  uint64_t v0;
  uint64_t v1;

  ++*(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 96) = v0;
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_25_1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_38_1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = a3;
  a1[1] = a4;
  a1[2] = ~v4;
  a1[3] = v5;
  a1[4] = v6;
  return a2;
}

uint64_t OUTLINED_FUNCTION_39_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_42_1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_43_1(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return swift_task_dealloc();
}

uint64_t *OUTLINED_FUNCTION_49_1(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v3;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  uint64_t v0;

  return v0 + 32;
}

void OUTLINED_FUNCTION_55_1()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16);
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_59_1(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return v1;
}

void OUTLINED_FUNCTION_61_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_66_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_70_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:)(a1, a4, a2, a3);
}

uint64_t destroy for E5NodeState()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for E5NodeState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for E5NodeState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for E5NodeState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for E5NodeState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for E5NodeState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for E5NodeState()
{
  return &type metadata for E5NodeState;
}

uint64_t static E5NodeState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(_BYTE *)(a1 + 48);
  result = *(unsigned __int8 *)(a2 + 48);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)) & ~(_DWORD)result;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg5021_sSo12E5RunnerObjCC24def67E3run6tokens16maxLogitsDesired16tokenTreeIndexes10presamplerSayAC15gh10_pGSaySiG_xu39AKGSgAC0P10Presampler_pSgtYaKFyScCyAJs5c55_pGXEfU_ySo0abJ8Protocol_pSg_sAP_pSgtXEfU1_yyXEfU_AcI_pX5XEfU_So0lmQ8Protocol_pSiTf1cn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t v15;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_16;
  if (v4)
  {
    v7 = result;
    v15 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (a2 < v7 || v4 < 0)
      goto LABEL_17;
    v8 = v15;
    while (a2 != v7)
    {
      result = v7 + a4;
      if (__OFADD__(v7, a4))
        goto LABEL_15;
      v9 = E5RunnerLogitsProtocol.copyLogits(tokenIndex:)(result);
      v15 = v8;
      v11 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v8 = v15;
      }
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      v14 = &protocol witness table for <A> [A];
      *(_QWORD *)&v12 = v9;
      *(_QWORD *)(v8 + 16) = v11 + 1;
      result = outlined init with take of LogitCollection(&v12, v8 + 40 * v11 + 32);
      if (a2 == ++v7)
      {
        swift_unknownObjectRelease();
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  swift_unknownObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t E5RunnerLogitsProtocol.copyLogits(tokenIndex:)(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  __int16 *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v18;

  v2 = (unint64_t)v1;
  v4 = (__int16 *)objc_msgSend(v1, sel_logitData);
  v5 = objc_msgSend(v1, sel_stridePerLogit);
  v6 = (uint64_t)objc_msgSend((id)v2, sel_stridePerToken);
  v7 = objc_msgSend((id)v2, sel_numLogitsPerToken);
  if ((unsigned __int128)(v6 * (__int128)a1) >> 64 != (v6 * a1) >> 63)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v2 = (unint64_t)v7;
  v4 += v6 * a1;
  if (v5 == (id)1)
    return UnsafeMutableBufferPointer<A>.makeFloat32Copy()((uint64_t)v4, (uint64_t)v7);
  v9 = specialized Array.init(repeating:count:)((uint64_t)v7, 0.0);
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_12;
  v10 = v9;
  if (v2)
  {
    if (v2 - 1 < *(_QWORD *)(v9 + 16))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v10 = v18;
LABEL_8:
    v11 = 0;
    do
    {
      _H0 = *v4;
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v10 + 4 * (_QWORD)v11 + 32) = _S0;
      v4 += (uint64_t)v5;
      v11 = (char *)v11 + 1;
    }
    while ((void *)v2 != v11);
  }
  return v10;
}

uint64_t E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v5 = v0[3];
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = v6;
  v6[2] = v5;
  v6[3] = v3;
  v6[4] = v1;
  v6[5] = v4;
  v6[6] = v2;
  v7 = (_QWORD *)swift_task_alloc();
  v0[9] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LogitCollection]);
  *v7 = v0;
  v7[1] = E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSArray v38;
  NSArray v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t aBlock[6];
  _QWORD v63[6];

  v57 = a5;
  v58 = a4;
  v52 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v53 = v10;
  v54 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for device != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.device);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v59 = a3;
  if (v14)
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = a6;
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v15 = 136315138;
    v18 = swift_bridgeObjectRetain();
    v19 = MEMORY[0x2495A9BC8](v18, MEMORY[0x24BEE1768]);
    v21 = v20;
    swift_bridgeObjectRelease();
    v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, aBlock);
    a3 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_248CAA000, v12, v13, "Running token(s): %s", v15, 0xCu);
    swift_arrayDestroy();
    v22 = v17;
    a6 = v16;
    MEMORY[0x2495AAF60](v22, -1, -1);
    MEMORY[0x2495AAF60](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = *(_QWORD *)(a2 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v23)
  {
    aBlock[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v25 = (uint64_t *)(a2 + 32);
    do
    {
      v26 = *v25++;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v26);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v23;
    }
    while (v23);
    v24 = aBlock[0];
    a3 = v59;
  }
  if (a3)
  {
    v27 = *(_QWORD *)(a3 + 16);
    v28 = MEMORY[0x24BEE4AF8];
    if (v27)
    {
      v50 = v24;
      v51 = a6;
      aBlock[0] = MEMORY[0x24BEE4AF8];
      v60 = v27;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v29 = v60;
      v30 = 0;
      v31 = aBlock[0];
      v61 = a3 + 32;
      do
      {
        v32 = *(_QWORD *)(v61 + 8 * v30);
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v63[0] = v28;
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)();
          v34 = 0;
          do
          {
            v35 = v34 + 1;
            objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v32 + 8 * v34 + 32));
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v34 = v35;
          }
          while (v33 != v35);
          v36 = v63[0];
          swift_bridgeObjectRelease();
          v28 = MEMORY[0x24BEE4AF8];
          v29 = v60;
        }
        else
        {
          v36 = v28;
        }
        aBlock[0] = v31;
        v37 = *(_QWORD *)(v31 + 16);
        if (v37 >= *(_QWORD *)(v31 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v29 = v60;
          v31 = aBlock[0];
        }
        ++v30;
        *(_QWORD *)(v31 + 16) = v37 + 1;
        *(_QWORD *)(v31 + 8 * v37 + 32) = v36;
      }
      while (v30 != v29);
      swift_bridgeObjectRelease();
      a6 = v51;
    }
    else
    {
      v31 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v31 = 0;
  }
  type metadata accessor for NSNumber();
  v38.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v31)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSNumber]);
    v39.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v39.super.isa = 0;
  }
  v41 = v54;
  v40 = v55;
  v42 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v52, v56);
  outlined init with copy of LogitPresampler?(a6, (uint64_t)v63);
  v43 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v44 = (v53 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v45 + v43, v41, v42);
  *(_QWORD *)(v45 + v44) = v57;
  outlined init with take of LogitPresampler?((uint64_t)v63, v45 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8));
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = partial apply for closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:);
  *(_QWORD *)(v46 + 24) = v45;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ();
  aBlock[5] = v46;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor;
  v47 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v58, sel_runTokens_tokenTreeIndexes_outputBlock_, v38.super.isa, v39.super.isa, v47);

  _Block_release(v47);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(void *a1, void *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  _QWORD v31[5];
  double v32;
  uint64_t v33;

  v10 = type metadata accessor for ContinuousClock();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_numTokens);
    if ((uint64_t)v14 < (uint64_t)a4)
      a4 = v14;
    v15 = (char *)objc_msgSend(a1, sel_numTokens);
    v16 = (char *)(v15 - a4);
    if (__OFSUB__(v15, a4))
    {
      __break(1u);
    }
    else
    {
      v31[0] = a3;
      v33 = MEMORY[0x24BEE4AF8];
      v17 = ContinuousClock.init()();
      MEMORY[0x24BDAC7A8](v17);
      v31[-6] = &v33;
      v31[-5] = a5;
      v31[-4] = a1;
      v31[-3] = v16;
      v31[-2] = a4;
      lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
      Clock.measure(_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if (one-time initialization token for device == -1)
      {
LABEL_6:
        v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)static Log.device);
        swift_unknownObjectRetain();
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = swift_slowAlloc();
          *(_DWORD *)v21 = 134218496;
          v22 = (double)Duration.components.getter();
          Duration.components.getter();
          v32 = ((double)v23 * 1.0e-18 + v22) * 1000000.0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v21 + 12) = 2048;
          v32 = COERCE_DOUBLE(objc_msgSend(a1, sel_numTokens));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          *(_WORD *)(v21 + 22) = 2048;
          swift_beginAccess();
          v32 = *(double *)(v33 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_248CAA000, v19, v20, "Took %f µsec to presample %ld token(s), making %ld logit collection(s)", (uint8_t *)v21, 0x20u);
          MEMORY[0x2495AAF60](v21, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease();
        }
        swift_beginAccess();
        v31[4] = v33;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
        CheckedContinuation.resume(returning:)();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    swift_once();
    goto LABEL_6;
  }
  if (a2)
  {
    v24 = a2;
  }
  else
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;
    v29 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v24 = @nonobjc NSError.init(domain:code:userInfo:)(v26, v28, 0, 0);
  }
  v32 = *(double *)&v24;
  v30 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  return CheckedContinuation.resume(throwing:)();
}

id closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[5];

  outlined init with copy of LogitPresampler?(a2, (uint64_t)&v15);
  if (v16)
  {
    outlined init with take of LogitCollection(&v15, (uint64_t)v17);
    v9 = v17[4];
    __swift_project_boxed_opaque_existential_1(v17, v17[3]);
    v10 = objc_msgSend(a3, sel_logitData);
    v11 = objc_msgSend(a3, sel_numLogitsPerToken);
    v12 = objc_msgSend(a3, sel_stridePerToken);
    result = objc_msgSend(a3, sel_stridePerLogit);
    if (__OFADD__(a5, a4))
    {
      __break(1u);
    }
    else if (a5 + a4 >= a4)
    {
      v14 = (*(uint64_t (**)(id, id, id, id, uint64_t))(v9 + 8))(v10, v11, v12, result, a4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
LABEL_7:
      *a1 = v14;
      return (id)swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    result = (id)outlined destroy of LogitPresampler?((uint64_t)&v15);
    if ((a5 & 0x8000000000000000) == 0)
    {
      swift_unknownObjectRetain();
      v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg5021_sSo12E5RunnerObjCC24def67E3run6tokens16maxLogitsDesired16tokenTreeIndexes10presamplerSayAC15gh10_pGSaySiG_xu39AKGSgAC0P10Presampler_pSgtYaKFyScCyAJs5c55_pGXEfU_ySo0abJ8Protocol_pSg_sAP_pSgtXEfU1_yyXEfU_AcI_pX5XEfU_So0lmQ8Protocol_pSiTf1cn_n(0, a5, (uint64_t)a3, a4);
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);

  return swift_unknownObjectRelease();
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined init with copy of LogitPresampler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_248CF98D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4 + 24))
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  return swift_deallocObject();
}

uint64_t outlined init with take of LogitPresampler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitPresampler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[LogitCollection], Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(a1, a2, v2 + v6, *(_BYTE **)(v2 + v7), v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_248CF9A08()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed E5RunnerLogitsProtocol?, @guaranteed Error?) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id @nonobjc NSError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  NSDictionary v8;
  id v9;

  v7 = (void *)MEMORY[0x2495A9A78]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  v9 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v7, a3, v8.super.isa);

  return v9;
}

id partial apply for closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)()
{
  uint64_t v0;

  return closure #1 in closure #3 in closure #1 in E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

unint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock;
  if (!lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock)
  {
    v1 = type metadata accessor for ContinuousClock();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE6E20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_Si_Sits5NeverOTg5041_sS4iIgyydd_Si6offset_Si7elementtSi_Sits5f200OIegnrzr_TR247_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSayl41G_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_l4_SitL20_SitXEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v10 + 16);
    v5 = 16 * v4;
    do
    {
      v6 = *(_QWORD *)(a1 + 32 + 8 * v3);
      v7 = *(_QWORD *)(v10 + 24);
      if (v4 + v3 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v4 + v3 + 1, 1);
      *(_QWORD *)(v10 + 16) = v4 + v3 + 1;
      v8 = v10 + v5;
      *(_QWORD *)(v8 + 32) = v6;
      *(_QWORD *)(v8 + 40) = v3;
      v5 += 16;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de85Inference26E5TransformerLanguageModelC16nextTokensLogits9treeNodes10presamplerSayAA15gh5_pGSgt34SiG_AA0N10Presampler_pSgtYaKFAaG_pW5XEfU_SayAgH_pGAFTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v27[1] = v3;
    v34 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v9 = 0;
    v10 = v34;
    v29 = a3;
    v30 = a1 + 32;
    v28 = a2 + 32;
    v11 = a3 + 40;
    while (1)
    {
      v12 = *(_QWORD *)(a3 + 16);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v30 + 8 * v9);
      if (*(_QWORD *)(a3 + 32) != v13)
      {
        v14 = 0;
        v15 = v12 - 1;
        while (v15 != v14)
        {
          v16 = *(_QWORD *)(v11 + 8 * v14++);
          if (v16 == v13)
            goto LABEL_9;
        }
        __break(1u);
        break;
      }
      v14 = 0;
LABEL_9:
      if (v14 >= *(_QWORD *)(a2 + 16))
        goto LABEL_19;
      v17 = v6;
      outlined init with copy of DeterministicLanguageModelProtocol(v28 + 40 * v14, (uint64_t)v31);
      v34 = v10;
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      ++v9;
      v20 = v32;
      v21 = v33;
      v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
      MEMORY[0x24BDAC7A8](v22);
      v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v24);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, &v34, v20, v21);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      v10 = v34;
      v6 = v17;
      v26 = v9 == v17;
      a3 = v29;
      if (v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
LABEL_16:
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5239_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSaySiG_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_ALSiXEfU2_0fG9Inference0ijkL0CSDyS2iGTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v7 = v16;
    v8 = (unint64_t *)(a1 + 32);
    do
    {
      v9 = *v8++;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized Sequence.compactMap<A>(_:)(v9, a2, a3);
      v11 = v10;
      swift_release();
      specialized Sequence.reversed()(v11);
      v13 = v12;
      v14 = *(_QWORD *)(v16 + 16);
      if (v14 >= *(_QWORD *)(v16 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v16 + 16) = v14 + 1;
      *(_QWORD *)(v16 + 8 * v14 + 32) = v13;
      --v5;
    }
    while (v5);
    swift_release();
  }
  else
  {
    swift_release();
    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v7;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v5 = 0;
    v6 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 8 * v5 + 32);
      if ((v7 & 0x8000000000000000) != 0)
        break;
      if (v7 >= *(_QWORD *)(*(_QWORD *)v4 + 16))
        goto LABEL_15;
      v8 = *(_QWORD *)v4 + 72 * v7;
      if ((*(_BYTE *)(v8 + 80) & 1) == 0)
      {
        v9 = *(_QWORD *)(v8 + 72);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v11;
        }
        v10 = *(_QWORD *)(v6 + 16);
        if (v10 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v12;
        }
        *(_QWORD *)(v6 + 16) = v10 + 1;
        *(_QWORD *)(v6 + 8 * v10 + 32) = v9;
      }
      if (v2 == ++v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_release();
  }
}

void specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a2 + 32;
  swift_retain();
  swift_beginAccess();
  v6 = MEMORY[0x24BEE4AF8];
  while ((a1 & 0x8000000000000000) == 0)
  {
    if (a1 >= *(_QWORD *)(*(_QWORD *)v5 + 16))
      goto LABEL_14;
    v7 = *(_QWORD *)v5 + 72 * a1;
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(unsigned __int8 *)(v7 + 56);
    if (*(_QWORD *)(a3 + 16))
    {
      v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v11 & 1) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v14;
        }
        v13 = *(_QWORD *)(v6 + 16);
        if (v13 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v15;
        }
        *(_QWORD *)(v6 + 16) = v13 + 1;
        *(_QWORD *)(v6 + 8 * v13 + 32) = v12;
      }
    }
    a1 = v8;
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))TGICAPILanguageModel.node(forPreviousNode:token:isPrompt:));
}

{
  specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))CompositeLanguageModel.node(forPreviousNode:token:isPrompt:));
}

{
  specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))PromptLookupLanguageModel.node(forPreviousNode:token:isPrompt:));
}

void specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = a3 & 1;
    do
    {
      v11 = *(_QWORD *)(a2 + 8 * v9++ + 32);
      a1 = a4(a1, v11, v10);
    }
    while (v5 != v9);
    OUTLINED_FUNCTION_58_0();
  }
  OUTLINED_FUNCTION_16();
}

Swift::Int specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(Swift::Int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  Swift::Int v6;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v6 = *(_QWORD *)(a2 + 8 * i + 32);
      a1 = E5TransformerLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, v6, 0);
    }
    swift_bridgeObjectRelease();
  }
  return a1;
}

void specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
LABEL_12:
    OUTLINED_FUNCTION_16();
    return;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = (uint64_t *)(a2 + 32);
  v7 = v4 + 32;
  v8 = __OFADD__(v5, 2);
  while (1)
  {
    v10 = *v6++;
    v9 = v10;
    if (a1 >= v5)
      break;
    if (a1 < 0)
      goto LABEL_14;
    v11 = *(_QWORD *)(v7 + 8 * a1);
    if (!*(_QWORD *)(v11 + 16))
      break;
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v13 & 1) == 0)
      break;
    a1 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v12);
LABEL_11:
    if (!--v3)
      goto LABEL_12;
  }
  a1 = v5 + 2;
  if (!v8)
    goto LABEL_11;
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t E5TransformerLanguageModel.currentQueryNodes.getter()
{
  OUTLINED_FUNCTION_22();
  return swift_bridgeObjectRetain();
}

uint64_t E5TransformerLanguageModel.currentQueryNodes.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  OUTLINED_FUNCTION_4_0();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*E5TransformerLanguageModel.currentQueryNodes.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(void *a1, char a2)
{
  id v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = objc_msgSend(a1, sel_maxContextLength);
  type metadata accessor for KVLRUCache();
  OUTLINED_FUNCTION_2_0();
  v5 = KVLRUCache.init(maximumTokenCount:)((uint64_t)v4);
  v6 = swift_allocObject();
  E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)((uint64_t)a1, (uint64_t)v5, a2);
  return v6;
}

void E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v3 + 17) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<E5NodeState>);
  v7 = OUTLINED_FUNCTION_2_0();
  *(_OWORD *)(v7 + 16) = xmmword_248D75A50;
  v8 = MEMORY[0x24BEE4AF8];
  v9 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 56) = 1;
  *(_QWORD *)(v7 + 64) = v9;
  *(_QWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 80) = 1;
  *(_QWORD *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 96) = 1;
  *(_QWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = static Duration.zero.getter();
  *(_QWORD *)(v3 + 56) = v10;
  ContinuousClock.init()();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes) = &outlined read-only object #0 of E5TransformerLanguageModel.init(e5Runner:kvCache:shouldFlattenPromptModules:);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes) = v8;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes) = v8;
  v11 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_kvCache) = a2;
  *(_BYTE *)(v3 + 16) = a3;
  OUTLINED_FUNCTION_16();
}

Swift::Int __swiftcall E5TransformerLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int result;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  v3 = v2;
  v4 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
  if (*((_BYTE *)v2 + 16) == 1)
  {
    v27 = MEMORY[0x24BEE4AF8];
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_18_3();
      swift_bridgeObjectRetain_n();
      v6 = 0;
      v7 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(_QWORD *)(v7 + 16);
        if (__OFADD__(v10, v9))
          break;
        OUTLINED_FUNCTION_65_0();
        if (!OUTLINED_FUNCTION_56_2() || v10 + v9 > *(_QWORD *)(v7 + 24) >> 1)
        {
          OUTLINED_FUNCTION_61_1();
          v7 = v11;
        }
        if (*(_QWORD *)(v8 + 16))
        {
          v12 = *(_QWORD *)(v7 + 16);
          if ((*(_QWORD *)(v7 + 24) >> 1) - v12 < v9)
            goto LABEL_38;
          v13 = (void *)(v7 + 8 * v12 + 32);
          if (v8 + 32 < (unint64_t)v13 + 8 * v9 && (unint64_t)v13 < v8 + 32 + 8 * v9)
            goto LABEL_40;
          memcpy(v13, (const void *)(v8 + 32), 8 * v9);
          if (v9)
          {
            v15 = *(_QWORD *)(v7 + 16);
            v16 = __OFADD__(v15, v9);
            v17 = v15 + v9;
            if (v16)
              goto LABEL_39;
            *(_QWORD *)(v7 + 16) = v17;
          }
        }
        else if (v9)
        {
          goto LABEL_37;
        }
        ++v6;
        OUTLINED_FUNCTION_50_2();
        if (v5 == v6)
        {
          OUTLINED_FUNCTION_58_0();
          v27 = v7;
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      OUTLINED_FUNCTION_61_2();
      OUTLINED_FUNCTION_31_2();
      __break(1u);
      goto LABEL_41;
    }
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_18_3();
    swift_bridgeObjectRetain();
LABEL_32:
    OUTLINED_FUNCTION_18_3();
    v2 = &v27;
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_20_2();
    return (Swift::Int)v2;
  }
  v18 = *(_QWORD *)(v4 + 16);
  if (!v18 || !forPreviousNode)
  {
    if (v18)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v19 = 0;
      v20 = MEMORY[0x24BEE4AF8];
      do
      {
        v21 = *(_QWORD *)(v4 + 8 * v19 + 32);
        swift_bridgeObjectRetain();
        v2 = &v28;
        specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(0, v21);
        OUTLINED_FUNCTION_53_1();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_15_3();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v20 = v23;
        }
        v22 = *(_QWORD *)(v20 + 16);
        if (v22 >= *(_QWORD *)(v20 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v20 = v24;
        }
        ++v19;
        *(_QWORD *)(v20 + 16) = v22 + 1;
        *(_QWORD *)(v20 + 8 * v22 + 32) = &v28;
      }
      while (v18 != v19);
      OUTLINED_FUNCTION_58_0();
    }
    else
    {
      swift_retain();
      v20 = MEMORY[0x24BEE4AF8];
    }
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes) = v20;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_112();
    return (Swift::Int)v2;
  }
LABEL_41:
  OUTLINED_FUNCTION_30_2();
  _StringGuts.grow(_:)(72);
  v26._object = (void *)0x8000000248D7EFA0;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  v29._countAndFlagsBits = OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_63_1(v29);
  OUTLINED_FUNCTION_58_0();
  v30._countAndFlagsBits = 0xD000000000000022;
  v30._object = (void *)0x8000000248D7EFC0;
  OUTLINED_FUNCTION_63_1(v30);
  v31._countAndFlagsBits = OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_63_1(v31);
  OUTLINED_FUNCTION_7_0();
  v32._countAndFlagsBits = 0xD000000000000012;
  v32._object = (void *)0x8000000248D7EFF0;
  OUTLINED_FUNCTION_63_1(v32);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.startNode.getter()
{
  return 0;
}

Swift::Int __swiftcall E5TransformerLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  uint64_t *v6;
  Swift::Int result;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (uint64_t *)(v3 + 32);
  result = OUTLINED_FUNCTION_22();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9 <= forPreviousNode)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = v8 + 72 * forPreviousNode;
  v11 = *(_QWORD *)(v10 + 40);
  result = specialized Dictionary.subscript.getter(token, *(_QWORD *)(v10 + 64));
  if ((v12 & 1) == 0)
    return result;
  if (__OFADD__(v11, 1))
    goto LABEL_10;
  v13 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_4_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v14 = *(char **)(*v6 + 16);
  result = (Swift::Int)specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
  v15 = *v6;
  *(_QWORD *)(v15 + 16) = v14 + 1;
  v16 = v15 + 72 * (_QWORD)v14;
  *(_QWORD *)(v16 + 32) = v9 + 1;
  *(_QWORD *)(v16 + 40) = v11 + 1;
  *(_QWORD *)(v16 + 48) = forPreviousNode;
  *(_BYTE *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = v13;
  *(_QWORD *)(v16 + 72) = token;
  *(_BYTE *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_BYTE *)(v16 + 96) = 1;
  if (*(_QWORD *)(*v6 + 16) <= (unint64_t)forPreviousNode)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  specialized Dictionary._Variant.setValue(_:forKey:)(v9, token);
  swift_endAccess();
  return v9;
}

uint64_t E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 <= a2)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v8 = v6 + 32;
  v9 = v6 + 32 + 72 * a1;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = v8 + 72 * a2;
  v12 = *(_QWORD *)(v11 + 8);
  v13 = v10 < v12;
  if (v10 == v12)
  {
    if (*(_BYTE *)(v9 + 48))
      v14 = -1;
    else
      v14 = *(_QWORD *)(v9 + 40);
    if (*(_BYTE *)(v11 + 48))
      v15 = -1;
    else
      v15 = *(_QWORD *)(v11 + 40);
    return v14 < v15;
  }
  return v13;
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return OUTLINED_FUNCTION_38_2();
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  OUTLINED_FUNCTION_80();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (!objc_msgSend(*(id *)(v26[14] + 24), sel_supportsNonLinearRunning))
    goto LABEL_26;
  v29 = v26[12];
  v30 = E5TransformerLanguageModel.latestCommonParent(nodes:)(v29);
  if ((specialized Sequence<>.contains(_:)(v30, v29) & 1) == 0)
    goto LABEL_8;
  v31 = v26[14];
  result = OUTLINED_FUNCTION_22();
  if ((v30 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v30 >= *(_QWORD *)(*(_QWORD *)(v31 + 32) + 16))
  {
LABEL_30:
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_107();
  if (v34)
    v30 = 0;
  else
    v30 = v33;
LABEL_8:
  v35 = (uint64_t *)(v26[14] + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  OUTLINED_FUNCTION_22();
  if ((specialized Sequence<>.contains(_:)(v30, *v35) & 1) == 0)
  {
LABEL_26:
    OUTLINED_FUNCTION_6_7();
    return v53(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  v36 = v26[12];
  v37 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v37);
  v39 = v38;
  v65 = *(_QWORD *)(v36 + 16);
  if (!v65)
    goto LABEL_25;
  v40 = v26[14] + 32;
  v64 = v26[12] + 32;
  swift_bridgeObjectRetain();
  v41 = 0;
  v63 = v26;
  while (2)
  {
    v42 = *(_QWORD *)(v64 + 8 * v41);
    v66 = v41 + 1;
    swift_retain();
    result = OUTLINED_FUNCTION_22();
    do
    {
      if ((v42 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (v42 >= *(_QWORD *)(*(_QWORD *)v40 + 16))
        goto LABEL_28;
      if (v42 == v30)
        break;
      v43 = *(_QWORD *)v40 + 72 * v42;
      v44 = *(_QWORD *)(v43 + 48);
      v45 = *(_BYTE *)(v43 + 56);
      result = static Hasher._hash(seed:_:)();
      v46 = -1 << *(_BYTE *)(v39 + 32);
      v47 = result & ~v46;
      if (((*(_QWORD *)(v39 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
        goto LABEL_21;
      v48 = *(_QWORD *)(v39 + 48);
      if (*(_QWORD *)(v48 + 8 * v47) != v42)
      {
        v49 = ~v46;
        while (1)
        {
          v47 = (v47 + 1) & v49;
          if (((*(_QWORD *)(v39 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
            break;
          if (*(_QWORD *)(v48 + 8 * v47) == v42)
            goto LABEL_22;
        }
LABEL_21:
        swift_isUniquelyReferenced_nonNull_native();
        a14 = v39;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v42, v47);
        v39 = a14;
        result = OUTLINED_FUNCTION_74();
      }
LABEL_22:
      v42 = v44;
    }
    while ((v45 & 1) == 0);
    v26 = v63;
    swift_release();
    v41 = v66;
    if (v66 != v65)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  v26[15] = v39;
  E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(MEMORY[0x24BEE4AF8], v30);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v51 = v50;
  OUTLINED_FUNCTION_50_2();
  a14 = v51;
  specialized MutableCollection<>.sort(by:)(&a14);
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_50_2();
  v60 = a14;
  v26[16] = a14;
  v61 = *(_QWORD *)(v60 + 16);
  v62 = (_QWORD *)swift_task_alloc();
  v26[17] = v62;
  *v62 = v26;
  v62[1] = E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:);
  return OUTLINED_FUNCTION_7_6(MEMORY[0x24BEE4AF8], v60, v61, v26[13]);
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_116();
  }
  else
  {
    *(_QWORD *)(v2 + 152) = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v1 = v0[19];
  v2 = v0[16];
  v3 = v0[12];
  OUTLINED_FUNCTION_52();
  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference15LogitCollection_ps5NeverOTg504_s24de85Inference26E5TransformerLanguageModelC16nextTokensLogits9treeNodes10presamplerSayAA15gh5_pGSgt34SiG_AA0N10Presampler_pSgtYaKFAaG_pW5XEfU_SayAgH_pGAFTf1cn_n(v3, v1, v2);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_7_0();
  swift_release();
  v4 = OUTLINED_FUNCTION_70_1();
  return v5(v4);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5TransformerLanguageModel.latestCommonParent(nodes:)(uint64_t a1)
{
  Swift::Int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int *v7;
  Swift::Int v8;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v1 = *(_QWORD *)(a1 + 32);
  result = specialized MutableCollection.subscript.getter(1, a1);
  v6 = (v5 >> 1) - v4;
  if (v5 >> 1 == v4)
  {
LABEL_6:
    swift_unknownObjectRelease();
    return v1;
  }
  if ((uint64_t)(v5 >> 1) > v4)
  {
    v7 = (Swift::Int *)(v3 + 8 * v4);
    do
    {
      v8 = *v7++;
      v1 = E5TransformerLanguageModel.latestCommonParent(nodeA:nodeB:)(v1, v8);
      --v6;
    }
    while (v6);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t i;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v5 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v3 = v6;
    v6 = v6 || v5 == v2;
    if (v6)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  _QWORD *v10;
  uint64_t i;
  uint64_t v12;
  BOOL v13;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return 0;
  OUTLINED_FUNCTION_85();
  if (*(_QWORD *)(v7 + 32) == v4 && *(_QWORD *)(v7 + 40) == v3)
    return 1;
  result = OUTLINED_FUNCTION_86();
  if ((result & 1) != 0)
    return 1;
  if (v5 == 1)
    return 0;
  v10 = (_QWORD *)(a3 + 56);
  for (i = 1; ; ++i)
  {
    v12 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v13 = *(v10 - 1) == v4 && *v10 == v3;
    if (v13 || (OUTLINED_FUNCTION_86() & 1) != 0)
      return 1;
    result = 0;
    v10 += 2;
    if (v12 == v5)
      return result;
  }
  __break(1u);
  return result;
}

void E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v82)(char *, char *, unint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD **, _QWORD);
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t *, unint64_t);
  Class isa;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;

  v3 = v2;
  v113 = a1;
  v5 = type metadata accessor for IndexSet.Index();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v107 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  MEMORY[0x24BDAC7A8](v8);
  v108 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for IndexSet();
  v109 = *(_QWORD *)(v112 - 8);
  v10 = MEMORY[0x24BDAC7A8](v112);
  v12 = (uint64_t *)((char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v101 - v13;
  v15 = v2 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes;
  swift_beginAccess();
  v110 = v15;
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(*(_QWORD *)v15 + 16);
  if (v17)
  {
    v18 = (unint64_t *)(v16 + 32);
    swift_beginAccess();
    v19 = 0;
    v20 = *(_QWORD *)(v3 + 32);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v20 + 40;
    do
    {
      v24 = *v18++;
      v23 = v24;
      if (v24 >= v21)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v25 = *(_QWORD *)(v22 + 72 * v23);
      v26 = __OFADD__(v19, v25);
      v19 += v25;
      if (v26)
        goto LABEL_82;
      --v17;
    }
    while (v17);
  }
  else
  {
    v19 = 0;
  }
  v114 = v12;
  v106 = v6;
  v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  swift_beginAccess();
  v27 = *v12;
  v115 = specialized Collection<>.firstIndex(of:)(a2, *v12);
  if ((v28 & 1) != 0)
  {
    __break(1u);
    goto LABEL_97;
  }
  v29 = *(char **)(v113 + 16);
  v111 = v14;
  v14 = v29;
  if (!v29)
  {
    v30 = specialized BidirectionalCollection.last.getter(v27);
    if ((v31 & 1) == 0)
    {
      if (v30 == a2)
      {
        v105 = v5;
        v32 = *(_QWORD *)(v27 + 16);
        if (v32)
        {
          v102 = 0;
          v103 = a2;
          v104 = v3;
          swift_bridgeObjectRetain();
          v33 = 0;
          v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
          do
          {
            v35 = *(_QWORD *)(v27 + 8 * v33 + 32);
            if ((v35 & 0x8000000000000000) == 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v117 = v34;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v34 = v117;
              }
              v37 = v34[2];
              if (v37 >= v34[3] >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v34 = v117;
              }
              v34[2] = v37 + 1;
              v34[v37 + 4] = v35;
            }
            ++v33;
          }
          while (v32 != v33);
          swift_bridgeObjectRelease();
          v3 = v104;
          a2 = v103;
          v14 = v102;
        }
        else
        {
          v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v38 = E5TransformerLanguageModel.nodesAreLinear(nodes:)(v34);
        swift_release();
        v5 = v105;
        if ((v38 & 1) != 0)
        {
          if (!__OFADD__(v19, v115))
          {
            v39 = v3
                + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
            if (*(_BYTE *)(v3
                          + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount
                          + 8) == 1)
            {
              *(_QWORD *)v39 = v19 + v115;
              *(_BYTE *)(v39 + 8) = 0;
            }
            if (one-time initialization token for device == -1)
              goto LABEL_28;
            goto LABEL_95;
          }
LABEL_94:
          __break(1u);
LABEL_95:
          swift_once();
LABEL_28:
          v40 = type metadata accessor for Logger();
          __swift_project_value_buffer(v40, (uint64_t)static Log.device);
          v41 = Logger.logObject.getter();
          v42 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v41, v42))
          {
            v43 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v43 = 134217984;
            v117 = (_QWORD *)a2;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_248CAA000, v41, v42, "Skipping reset because %ld is already last run node", v43, 0xCu);
            MEMORY[0x2495AAF60](v43, -1, -1);
          }

          return;
        }
      }
      goto LABEL_31;
    }
LABEL_97:
    __break(1u);
    return;
  }
LABEL_31:
  if (one-time initialization token for device != -1)
    goto LABEL_87;
  while (1)
  {
    v44 = type metadata accessor for Logger();
    v45 = __swift_project_value_buffer(v44, (uint64_t)static Log.device);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = v45;
      v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v49 = 134217984;
      v117 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_248CAA000, v46, v47, "Number of prompt modules nodes to reset %ld", v49, 0xCu);
      v50 = v49;
      v45 = v48;
      MEMORY[0x2495AAF60](v50, -1, -1);
    }

    if (v14)
    {
      v51 = (unint64_t *)(v113 + 32);
      swift_beginAccess();
      v52 = *(_QWORD *)(v3 + 32);
      v53 = *(_QWORD *)(v52 + 16);
      v54 = v52 + 40;
      v55 = v14;
      while (1)
      {
        v57 = *v51++;
        v56 = v57;
        if (v57 >= v53)
          break;
        v58 = *(_QWORD *)(v54 + 72 * v56);
        v26 = __OFSUB__(v19, v58);
        v19 -= v58;
        if (v26)
          goto LABEL_84;
        if (!--v55)
          goto LABEL_39;
      }
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_39:
    swift_beginAccess();
    specialized RangeReplaceableCollection<>.removeLast(_:)((uint64_t)v14);
    swift_endAccess();
    v59 = v115 + 1;
    if (__OFADD__(v115, 1))
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    if (*(_QWORD *)(*v12 + 16) < v59)
      goto LABEL_89;
    swift_beginAccess();
    specialized Array.replaceSubrange<A>(_:with:)(v59);
    swift_endAccess();
    swift_retain();
    v113 = v45;
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc();
      *(_DWORD *)v62 = 134218240;
      v117 = (_QWORD *)v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2048;
      swift_beginAccess();
      if ((a2 & 0x8000000000000000) != 0)
        goto LABEL_91;
      v63 = *(_QWORD *)(v3 + 32);
      v64 = v111;
      if (*(_QWORD *)(v63 + 16) <= a2)
        goto LABEL_92;
      v65 = v63 + 72 * a2;
      v66 = *(_QWORD *)(v65 + 72);
      v67 = *(_BYTE *)(v65 + 80) == 0;
      v68 = -999;
      if (v67)
        v68 = v66;
      v117 = (_QWORD *)v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_248CAA000, v60, v61, "Resetting to %ld which contains token %ld", (uint8_t *)v62, 0x16u);
      MEMORY[0x2495AAF60](v62, -1, -1);

    }
    else
    {

      swift_release();
      v64 = v111;
    }
    v69 = v19 + v115;
    if (__OFADD__(v19, v115))
      goto LABEL_90;
    v70 = a2;
    a2 = *(_QWORD *)(v3 + 24);
    objc_msgSend((id)a2, sel_resetToStep_, v19 + v115);
    v71 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
    if (*(_BYTE *)(v3
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount
                  + 8) == 1)
    {
      *(_QWORD *)v71 = v69;
      *(_BYTE *)(v71 + 8) = 0;
    }
    v72 = objc_msgSend((id)a2, sel_supportsNonLinearRunning);
    v19 = v112;
    if (!v72 || v115 < 1)
      return;
    swift_retain();
    v73 = specialized Set.init<A>(_:)(v70, v3);
    IndexSet.init()();
    if (v115 != 1)
    {
      v14 = (char *)v5;
      v74 = v73 + 56;
      v19 = 1;
      v5 = -1;
      while (1)
      {
        if (v19 >= *(_QWORD *)(*v12 + 16))
          goto LABEL_85;
        if (!*(_QWORD *)(v73 + 16))
          goto LABEL_65;
        v75 = *(_QWORD *)(*v12 + 8 * v19 + 32);
        v76 = static Hasher._hash(seed:_:)();
        v77 = -1 << *(_BYTE *)(v73 + 32);
        v78 = v76 & ~v77;
        if (((*(_QWORD *)(v74 + ((v78 >> 3) & 0xFFFFFFFFFFFFF8)) >> v78) & 1) == 0)
          goto LABEL_65;
        v79 = *(_QWORD *)(v73 + 48);
        if (*(_QWORD *)(v79 + 8 * v78) != v75)
          break;
LABEL_66:
        if (++v19 == v115)
        {
          swift_bridgeObjectRelease();
          v19 = v112;
          v5 = (uint64_t)v14;
          goto LABEL_68;
        }
      }
      v80 = ~v77;
      while (1)
      {
        v78 = (v78 + 1) & v80;
        if (((*(_QWORD *)(v74 + ((v78 >> 3) & 0xFFFFFFFFFFFFF8)) >> v78) & 1) == 0)
          break;
        if (*(_QWORD *)(v79 + 8 * v78) == v75)
          goto LABEL_66;
      }
LABEL_65:
      IndexSet.insert(_:)(v19);
      goto LABEL_66;
    }
    swift_bridgeObjectRelease();
LABEL_68:
    v81 = IndexSet.isEmpty.getter();
    v12 = v114;
    if ((v81 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t))(v109 + 8))(v64, v19);
      return;
    }
    v82 = *(void (**)(char *, char *, unint64_t))(v109 + 16);
    v83 = (uint64_t)v108;
    v82(v108, v64, v19);
    swift_retain();
    specialized Sequence.forEach(_:)(v83, v3);
    outlined destroy of ReversedCollection<IndexSet>(v83, &demangling cache variable for type metadata for ReversedCollection<IndexSet>);
    v82((char *)v12, v64, v19);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    v14 = v84;
    v85 = dispatch thunk of Collection.count.getter();
    if (!v85)
      break;
    v86 = v85;
    v105 = v5;
    v118 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = (uint64_t)v107;
    dispatch thunk of Collection.startIndex.getter();
    if (v86 < 0)
      goto LABEL_93;
    v5 = (uint64_t)&stru_2519E5000;
    while (1)
    {
      v87 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
      v89 = *v88;
      v87(&v117, 0);
      v26 = __OFSUB__(v89, 1);
      v90 = v89 - 1;
      if (v26)
        break;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v90);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      v12 = v114;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v86)
      {
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v3, v105);
        goto LABEL_76;
      }
    }
LABEL_86:
    __break(1u);
LABEL_87:
    swift_once();
  }
LABEL_76:
  v91 = *(void (**)(uint64_t *, unint64_t))(v109 + 8);
  v91(v12, v19);
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend((id)a2, sel_purgeSteps_, isa);

  v93 = Logger.logObject.getter();
  v94 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc();
    v96 = swift_slowAlloc();
    v118 = v96;
    *(_DWORD *)v95 = 136315138;
    v97 = v111;
    swift_beginAccess();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF470]);
    v98 = dispatch thunk of CustomStringConvertible.description.getter();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, &v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_248CAA000, v93, v94, "Purged %s node(s) from runner", v95, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2495AAF60](v96, -1, -1);
    MEMORY[0x2495AAF60](v95, -1, -1);

    v100 = v97;
  }
  else
  {

    v100 = v111;
  }
  v91((uint64_t *)v100, v19);
}

uint64_t E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = 0;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(int8x16_t *)(v0 + 24);
  *(_QWORD *)(v4 + 16) = v1;
  *(int8x16_t *)(v4 + 24) = vextq_s8(v5, v5, 8uLL);
  *(_QWORD *)(v4 + 40) = v0 + 16;
  *(_QWORD *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 56) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
  return E5TransformerLanguageModel.measure(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result)
    return (*(uint64_t (**)(void))(v0 + 8))();
  __break(1u);
  return result;
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_38_2();
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModuleNodes);
  v0[5] = v1;
  OUTLINED_FUNCTION_18_3();
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:);
  return E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)(v1, v0[2], v0[3]);
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v5);
  *(_QWORD *)(v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_41_1();
    return OUTLINED_FUNCTION_3_6();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(a1);
  }
}

uint64_t E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[33] = a3;
  v4[34] = v3;
  v4[31] = a1;
  v4[32] = a2;
  v5 = type metadata accessor for TokenGenerationError.Context();
  v4[35] = v5;
  v4[36] = *(_QWORD *)(v5 - 8);
  v4[37] = swift_task_alloc();
  return swift_task_switch();
}

void E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  int64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 16);
  if (v1 && (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 272) + 24), sel_supportsModularAttention) & 1) == 0)
  {
    v15 = *(_QWORD *)(v0 + 288);
    v14 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 280);
    goto LABEL_20;
  }
  v2 = E5TransformerLanguageModel.nodesAsLinear(nodes:)(*(_QWORD **)(v0 + 256));
  if (!v2)
  {
    if (!v1)
    {
      v40 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 304) = v40;
      *v40 = v0;
      v40[1] = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
      OUTLINED_FUNCTION_26_2();
      E5TransformerLanguageModel.nextTokensLogits(treeNodes:presampler:)(v41, v42);
      return;
    }
    v15 = *(_QWORD *)(v0 + 288);
    v14 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 280);
LABEL_20:
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    v17 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
    OUTLINED_FUNCTION_11_0();
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v18, v14, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEB8050], v17);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_26_2();
    __asm { BR              X0 }
  }
  v3 = v2;
  *(_QWORD *)(v0 + 328) = v2;
  v4 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v4);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 336) = v7;
  v8 = MEMORY[0x24BEE4B00];
  if (v7)
  {
    v9 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_76(v9);
      if (v10)
        break;
      if (*(_QWORD *)(v6 + 16))
      {
        OUTLINED_FUNCTION_51_2();
        OUTLINED_FUNCTION_21_2();
        if ((v11 & 1) != 0)
        {
          OUTLINED_FUNCTION_105();
          if (v12)
          {
LABEL_21:
            v21 = (_QWORD *)swift_task_alloc();
            OUTLINED_FUNCTION_35_2(v21, (uint64_t)E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:));
            OUTLINED_FUNCTION_26_2();
            E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(v22, v23, v24, v25);
            return;
          }
          while (1)
          {
            OUTLINED_FUNCTION_8_3();
            if ((v13 & 1) == 0)
              break;
            OUTLINED_FUNCTION_105();
            if (v12)
              goto LABEL_21;
          }
        }
      }
      OUTLINED_FUNCTION_104();
      if (v12)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v26 + 16);
    if (!v27)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_26_2();
      __asm { BR              X1 }
    }
    v43 = MEMORY[0x24BEE4AF8];
    v28 = v0 + 112;
    OUTLINED_FUNCTION_66_1();
    v29 = v43;
    v30 = v26 + 32;
    while (*(_QWORD *)(v8 + 16))
    {
      v31 = OUTLINED_FUNCTION_93();
      if ((v32 & 1) == 0)
        goto LABEL_32;
      OUTLINED_FUNCTION_46_2(v31);
      v43 = v29;
      v33 = *(_QWORD *)(v29 + 24);
      if (*(_QWORD *)(v29 + 16) >= v33 >> 1)
      {
        v37 = OUTLINED_FUNCTION_44_2(v33);
        OUTLINED_FUNCTION_97(v37, v38);
      }
      OUTLINED_FUNCTION_108(v28);
      v34 = OUTLINED_FUNCTION_33_2();
      v35 = OUTLINED_FUNCTION_43_2(v34);
      OUTLINED_FUNCTION_42_2(v35, v36, &v43);
      __swift_destroy_boxed_opaque_existential_1(v28);
      swift_task_dealloc();
      v29 = v43;
      v30 += 8;
      if (!--v27)
        goto LABEL_29;
    }
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  int64_t v30;
  uint64_t v31;

  if (v0[39])
  {
LABEL_2:
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_88();
    __asm { BR              X1 }
  }
  v2 = v0[40];
  v31 = v0[32];
  swift_retain();
  OUTLINED_FUNCTION_52();
  specialized MutableCollection<>.sort(by:)();
  v3 = v31;
  if (v2)
  {
    OUTLINED_FUNCTION_88();
    swift_release();
  }
  else
  {
    v0[41] = v31;
    v4 = swift_bridgeObjectRetain();
    specialized Set.init<A>(_:)(v4);
    v6 = v5;
    v7 = *(_QWORD *)(v3 + 16);
    v0[42] = v7;
    v8 = MEMORY[0x24BEE4B00];
    if (v7)
    {
      v9 = 0;
      while (1)
      {
        OUTLINED_FUNCTION_76(v9);
        if (v10)
          break;
        if (*(_QWORD *)(v6 + 16))
        {
          OUTLINED_FUNCTION_51_2();
          OUTLINED_FUNCTION_21_2();
          if ((v11 & 1) != 0)
          {
            OUTLINED_FUNCTION_105();
            if (v12)
            {
LABEL_18:
              v14 = (_QWORD *)swift_task_alloc();
              OUTLINED_FUNCTION_35_2(v14, (uint64_t)E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:));
              OUTLINED_FUNCTION_88();
              E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(v15, v16, v17, v18);
              return;
            }
            while (1)
            {
              OUTLINED_FUNCTION_8_3();
              if ((v13 & 1) == 0)
                break;
              OUTLINED_FUNCTION_105();
              if (v12)
                goto LABEL_18;
            }
          }
        }
        OUTLINED_FUNCTION_104();
        if (v12)
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      swift_bridgeObjectRelease();
      v19 = v0[32];
      v20 = *(_QWORD *)(v19 + 16);
      if (!v20)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
      v31 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_66_1();
      v21 = v31;
      v22 = v19 + 32;
      while (*(_QWORD *)(v8 + 16))
      {
        v23 = OUTLINED_FUNCTION_93();
        if ((v24 & 1) == 0)
          goto LABEL_28;
        OUTLINED_FUNCTION_46_2(v23);
        v31 = v21;
        v25 = *(_QWORD *)(v21 + 24);
        if (*(_QWORD *)(v21 + 16) >= v25 >> 1)
        {
          v29 = OUTLINED_FUNCTION_44_2(v25);
          OUTLINED_FUNCTION_97(v29, v30);
        }
        OUTLINED_FUNCTION_108((uint64_t)(v0 + 14));
        v26 = OUTLINED_FUNCTION_33_2();
        v27 = OUTLINED_FUNCTION_43_2(v26);
        OUTLINED_FUNCTION_42_2(v27, v28, &v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
        swift_task_dealloc();
        v21 = v31;
        v22 += 8;
        --v20;
        v8 = MEMORY[0x24BEE4B00];
        if (!v20)
          goto LABEL_26;
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _BOOL8 v28;
  Swift::Int v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  int64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 *v83;
  int64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;

  v1 = v0;
  v2 = 0;
  v3 = v0 + 2;
  v4 = v1 + 8;
  v85 = (uint64_t)(v1 + 14);
  v5 = (uint64_t)(v1 + 19);
  v80 = v1 + 30;
  v81 = v1 + 29;
  v6 = v1[47];
  v82 = v6 + 64;
  v83 = (__int128 *)(v1 + 24);
  v7 = -1 << *(_BYTE *)(v6 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v6 + 64);
  v84 = (unint64_t)(63 - v7) >> 6;
  v10 = v1[43];
  v89 = v1[44];
  v87 = (uint64_t)(v1 + 3);
  v90 = (__int128 *)(v1 + 9);
  v88 = v1[47];
  v77 = v6 + 104;
  v78 = (uint64_t)(v1 + 19);
  v86 = v1;
  v79 = v1 + 8;
LABEL_5:
  v11 = v10 + 56;
  if (v9)
  {
LABEL_6:
    OUTLINED_FUNCTION_114();
    v13 = v12 | (v2 << 6);
LABEL_7:
    *v3 = *(_QWORD *)(*(_QWORD *)(v88 + 48) + 8 * v13);
    outlined init with copy of DeterministicLanguageModelProtocol(*(_QWORD *)(v88 + 56) + 40 * v13, v87);
    goto LABEL_14;
  }
  while (1)
  {
    v14 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_71;
    if (v14 >= v84)
    {
      v16 = v2;
    }
    else
    {
      v15 = *(_QWORD *)(v82 + 8 * v14);
      if (v15)
        goto LABEL_11;
      v16 = v2 + 1;
      if (v2 + 2 < v84)
      {
        v15 = *(_QWORD *)(v82 + 8 * (v2 + 2));
        if (v15)
        {
          v14 = v2 + 2;
LABEL_11:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v14 << 6);
          v2 = v14;
          goto LABEL_7;
        }
        v16 = v2 + 2;
        if (v2 + 3 < v84)
        {
          v15 = *(_QWORD *)(v82 + 8 * (v2 + 3));
          if (v15)
          {
            v14 = v2 + 3;
            goto LABEL_11;
          }
          v14 = v2 + 4;
          v16 = v2 + 3;
          if (v2 + 4 < v84)
          {
            v15 = *(_QWORD *)(v82 + 8 * v14);
            if (v15)
              goto LABEL_11;
            while (v2 + 5 < v84)
            {
              v15 = *(_QWORD *)(v77 + 8 * v2++);
              if (v15)
              {
                v14 = v2 + 4;
                goto LABEL_11;
              }
            }
            v16 = v84 - 1;
          }
        }
      }
    }
    v9 = 0;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    v2 = v16;
    *(_OWORD *)v3 = 0u;
LABEL_14:
    outlined init with take of (key: Int, value: LogitCollection)?();
    if (!v1[12])
      break;
    v17 = *v4;
    outlined init with take of LogitCollection(v90, v5);
    v18 = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v10 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
    {
      v21 = *(_QWORD *)(v10 + 48);
      if (*(_QWORD *)(v21 + 8 * v20) == v17)
      {
LABEL_35:
        v23 = OUTLINED_FUNCTION_102();
        *v81 = v10;
        if ((v23 & 1) == 0)
          specialized _NativeSet.copy()();
        specialized _NativeSet._delete(at:)(v20);
        v10 = *v81;
        OUTLINED_FUNCTION_74();
        outlined init with copy of DeterministicLanguageModelProtocol(v5, (uint64_t)v83);
        v24 = OUTLINED_FUNCTION_56_2();
        *v80 = v89;
        v25 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        v27 = *(_QWORD *)(v89 + 16);
        v28 = (v26 & 1) == 0;
        v29 = v27 + v28;
        if (__OFADD__(v27, v28))
          goto LABEL_72;
        v30 = v25;
        v31 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, LogitCollection>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v24, v29))
        {
          v32 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
          if ((v31 & 1) != (v33 & 1))
          {
            OUTLINED_FUNCTION_62_2();
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            return;
          }
          v30 = v32;
        }
        v34 = *v80;
        v89 = *v80;
        if ((v31 & 1) != 0)
        {
          OUTLINED_FUNCTION_123();
          v37 = v35 + v30 * v36;
          __swift_destroy_boxed_opaque_existential_1(v37);
          outlined init with take of LogitCollection(v83, v37);
        }
        else
        {
          OUTLINED_FUNCTION_95(v34 + 8 * (v30 >> 6));
          *(_QWORD *)(v38 + 8 * v30) = v17;
          OUTLINED_FUNCTION_123();
          outlined init with take of LogitCollection(v83, v39 + v30 * v40);
          v41 = *(_QWORD *)(v34 + 16);
          v42 = __OFADD__(v41, 1);
          v43 = v41 + 1;
          if (v42)
            goto LABEL_74;
          *(_QWORD *)(v34 + 16) = v43;
        }
        v1 = v86;
        v5 = v78;
        v4 = v79;
        OUTLINED_FUNCTION_74();
        __swift_destroy_boxed_opaque_existential_1(v78);
        goto LABEL_5;
      }
      v22 = ~v19;
      while (1)
      {
        v20 = (v20 + 1) & v22;
        if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          break;
        if (*(_QWORD *)(v21 + 8 * v20) == v17)
          goto LABEL_35;
      }
    }
    __swift_destroy_boxed_opaque_existential_1(v5);
    if (v9)
      goto LABEL_6;
  }
  swift_release();
  v44 = v89;
  if (!*(_QWORD *)(v10 + 16) || (OUTLINED_FUNCTION_94(), v46))
  {
LABEL_49:
    swift_bridgeObjectRelease();
    v47 = v1[32];
    v48 = *(_QWORD *)(v47 + 16);
    if (!v48)
    {
LABEL_56:
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_63_0();
      swift_task_dealloc();
      OUTLINED_FUNCTION_62_2();
      __asm { BR              X1 }
    }
    v91 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    v49 = v91;
    v50 = (uint64_t *)(v47 + 32);
    v51 = v85;
    while (*(_QWORD *)(v44 + 16))
    {
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(*v50);
      if ((v53 & 1) == 0)
        goto LABEL_70;
      outlined init with copy of DeterministicLanguageModelProtocol(*(_QWORD *)(v44 + 56) + 40 * v52, v51);
      v91 = v49;
      v55 = *(_QWORD *)(v49 + 16);
      v54 = *(_QWORD *)(v49 + 24);
      if (v55 >= v54 >> 1)
      {
        v62 = OUTLINED_FUNCTION_44_2(v54);
        OUTLINED_FUNCTION_97(v62, v63);
      }
      v57 = v86[17];
      v56 = v86[18];
      v58 = OUTLINED_FUNCTION_108(v51);
      v59 = *(_QWORD *)(v57 - 8);
      v60 = swift_task_alloc();
      v61 = v58;
      v51 = v85;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v60, v61, v57);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v60, &v91, v57, v56);
      __swift_destroy_boxed_opaque_existential_1(v85);
      swift_task_dealloc();
      v49 = v91;
      ++v50;
      --v48;
      v44 = v89;
      if (!v48)
        goto LABEL_56;
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  while (1)
  {
    v1[44] = v89;
    v1[45] = v45;
    v1[43] = v10;
    v65 = v1[41];
    if (v45 >= *(_QWORD *)(v65 + 16))
      break;
    if (*(_QWORD *)(v10 + 16))
    {
      v66 = *(_QWORD *)(v65 + 8 * v45 + 32);
      static Hasher._hash(seed:_:)();
      OUTLINED_FUNCTION_21_2();
      if ((v68 & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v67) == v66)
        {
LABEL_67:
          v72 = (_QWORD *)swift_task_alloc();
          v1[46] = v72;
          *v72 = v1;
          v72[1] = E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:);
          OUTLINED_FUNCTION_62_2();
          E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(v73, v74, v75, v76);
          return;
        }
        while (1)
        {
          OUTLINED_FUNCTION_8_3();
          if ((v71 & 1) == 0)
            break;
          if (*(_QWORD *)(v69 + 8 * v70) == v66)
            goto LABEL_67;
        }
      }
    }
    OUTLINED_FUNCTION_94();
    if (v46)
      goto LABEL_49;
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

uint64_t E5TransformerLanguageModel.nextTokenLogits(promptModuleNodes:queryNodes:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_65_1();
  *(_QWORD *)(v0 + 312) = v3;
  *(_QWORD *)(v0 + 320) = v1;
  OUTLINED_FUNCTION_84();
  if (v1)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    OUTLINED_FUNCTION_41_1();
    return OUTLINED_FUNCTION_4_5();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_65_1();
  *(_QWORD *)(v0 + 376) = v2;
  *(_QWORD *)(v0 + 384) = v1;
  OUTLINED_FUNCTION_84();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_75();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t E5TransformerLanguageModel.nodesAsLinear(nodes:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = a1;
  if (a1[2] <= 1uLL)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  specialized MutableCollection<>.sort(by:)();
  v2 = a1;
  if (a1[2])
  {
    if ((specialized Sequence.allSatisfy(_:)(a1, a1[4], v1) & 1) == 0)
    {
      swift_release();
      return 0;
    }
    return (uint64_t)v2;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[65] = v4;
  v5[63] = a3;
  v5[64] = a4;
  v5[61] = a1;
  v5[62] = a2;
  return swift_task_switch();
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  Swift::Int v76;
  int v77;
  Swift::Int v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;

  OUTLINED_FUNCTION_80();
  a25 = v29;
  a26 = v30;
  a24 = v26;
  v31 = (unint64_t)(v26 + 19);
  v32 = v26[62];
  v33 = MEMORY[0x24BEE4AF8];
  v26[55] = MEMORY[0x24BEE4AF8];
  v26[59] = v33;
  v34 = *(_QWORD *)(v32 + 16);
  if (v34)
  {
    v35 = v26[65] + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes;
    v36 = v32 + 32;
    OUTLINED_FUNCTION_22();
    v37 = 0;
    v38 = *(_QWORD *)(*(_QWORD *)v35 + 16);
    while (v38 != v37)
    {
      if (*(_QWORD *)(*(_QWORD *)v35 + 32 + 8 * v37) != *(_QWORD *)(v36 + 8 * v37))
      {
        v38 = v37;
        break;
      }
      if (v34 == ++v37)
      {
        v38 = v34;
        break;
      }
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = v26[65] + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes;
  OUTLINED_FUNCTION_22();
  v40 = *(_QWORD *)(*(_QWORD *)v39 + 16);
  if (v40 < v38)
    goto LABEL_83;
  if (v38 == v40)
  {
LABEL_20:
    if (one-time initialization token for device == -1)
      goto LABEL_21;
    goto LABEL_84;
  }
  if (v38 < v40)
  {
    v41 = MEMORY[0x24BEE4AF8];
    v42 = v38;
    do
    {
      if (v42 >= *(_QWORD *)(*(_QWORD *)v39 + 16))
      {
        __break(1u);
        goto LABEL_79;
      }
      v43 = *(_QWORD *)(*(_QWORD *)v39 + 8 * v42 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_15_3();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v46;
      }
      v45 = *(_QWORD *)(v41 + 16);
      v44 = *(_QWORD *)(v41 + 24);
      if (v45 >= v44 >> 1)
      {
        OUTLINED_FUNCTION_44_2(v44);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v47;
      }
      ++v42;
      *(_QWORD *)(v41 + 16) = v45 + 1;
      *(_QWORD *)(v41 + 8 * v45 + 32) = v43;
    }
    while (v40 != v42);
    v26[55] = v41;
    goto LABEL_20;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  OUTLINED_FUNCTION_15_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v55 = v122;
LABEL_27:
  v56 = *(_QWORD *)(v55 + 16);
  v57 = (unint64_t *)(v26[62] + 8 * v38 + 32);
  do
  {
    v58 = *v57++;
    v34 = v58;
    if (v56 >= *(_QWORD *)(v55 + 24) >> 1)
    {
      OUTLINED_FUNCTION_61_1();
      v55 = v59;
    }
    *(_QWORD *)(v55 + 16) = v56 + 1;
    *(_QWORD *)(v55 + 8 * v56++ + 32) = v34;
    --v31;
  }
  while (v31);
  *v27 = v55;
  while (1)
  {
    v124 = v27;
    v38 = (unint64_t)(v26 + 22);
    Logger.logObject.getter();
    v60 = OUTLINED_FUNCTION_111();
    v27 = (_QWORD *)v60;
    if (os_log_type_enabled(v28, v60))
    {
      v61 = (uint8_t *)OUTLINED_FUNCTION_121();
      a15 = OUTLINED_FUNCTION_57_1();
      *(_DWORD *)v61 = 136315138;
      OUTLINED_FUNCTION_22();
      v62 = OUTLINED_FUNCTION_18_3();
      v63 = MEMORY[0x2495A9BC8](v62, MEMORY[0x24BEE1768]);
      v65 = v64;
      swift_bridgeObjectRelease();
      v26[58] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_0();
      _os_log_impl(&dword_248CAA000, v28, (os_log_type_t)v27, "Number of prompt modules to compute %s", v61, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_1();
    }

    v66 = v26[65];
    v31 = v26[61];
    v125 = v66 + 32;
    OUTLINED_FUNCTION_22();
    if ((v31 & 0x8000000000000000) != 0)
      goto LABEL_86;
    v67 = *(_QWORD *)(v66 + 32);
    v68 = v26[61];
    if (*(_QWORD *)(v67 + 16) <= v68)
      goto LABEL_87;
    v69 = v26[65];
    v70 = v67 + 72 * v68;
    v71 = *(_QWORD *)(v70 + 48);
    v72 = *(unsigned __int8 *)(v70 + 56);
    v26[57] = MEMORY[0x24BEE4B00];
    v73 = (uint64_t *)(v69 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
    OUTLINED_FUNCTION_22();
    v74 = specialized BidirectionalCollection.last.getter(*v73);
    if ((v75 & 1) != 0)
      v76 = 0;
    else
      v76 = v74;
    v26[56] = v76;
    OUTLINED_FUNCTION_22();
    if (*(_QWORD *)(v26[55] + 16) || (OUTLINED_FUNCTION_22(), *(_QWORD *)(*v124 + 16)))
    {
      v76 = 0;
      v26[56] = 0;
    }
    v77 = v71 == v76 ? v72 : 1;
    if (v77 != 1)
      break;
    v78 = E5TransformerLanguageModel.latestCommonParent(excludingNode:includingNode:)(v26[61], v76);
    v79 = v28;
    Logger.logObject.getter();
    v80 = OUTLINED_FUNCTION_111();
    if (os_log_type_enabled(v28, v80))
    {
      v81 = v26[61];
      v82 = OUTLINED_FUNCTION_57_1();
      *(_DWORD *)v82 = 134218496;
      v26[54] = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 12) = 2048;
      OUTLINED_FUNCTION_22();
      v26[52] = v26[56];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 22) = 2048;
      v26[53] = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_248CAA000, v79, v80, "latestCommonParent(%ld, %ld) found to be %ld", (uint8_t *)v82, 0x20u);
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_30_2();
    v83 = v26[61];
    v38 = MEMORY[0x24BEE4AF8];
    while ((v83 & 0x8000000000000000) == 0)
    {
      if (v83 >= *(_QWORD *)(*(_QWORD *)v125 + 16))
        goto LABEL_80;
      if (v83 != v78)
      {
        v84 = *(_QWORD *)v125 + 72 * v83;
        if ((*(_BYTE *)(v84 + 80) & 1) == 0)
        {
          v85 = *(_QWORD *)(v84 + 48);
          v86 = *(unsigned __int8 *)(v84 + 56);
          v87 = *(_QWORD *)(v84 + 72);
          if ((OUTLINED_FUNCTION_102() & 1) == 0)
          {
            v90 = OUTLINED_FUNCTION_15_3();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v90, v91, v92, v38);
            v38 = v93;
          }
          v34 = *(_QWORD *)(v38 + 16);
          v88 = *(_QWORD *)(v38 + 24);
          if (v34 >= v88 >> 1)
          {
            v94 = OUTLINED_FUNCTION_44_2(v88);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v94, v34 + 1, 1, v38);
            v38 = v95;
          }
          *(_QWORD *)(v38 + 16) = v34 + 1;
          v89 = v38 + 16 * v34;
          *(_QWORD *)(v89 + 32) = v83;
          *(_QWORD *)(v89 + 40) = v87;
          v83 = v85;
          if (!v86)
            continue;
        }
      }
      v105 = OUTLINED_FUNCTION_52();
      E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(v105, v78);
      OUTLINED_FUNCTION_7_0();
      v106 = *(_QWORD *)(v38 + 16);
      if (v106 >= 2)
      {
        if ((OUTLINED_FUNCTION_102() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          v38 = v123;
        }
        v107 = 0;
        v108 = v106 + 1;
        do
        {
          if (v107 != v108 - 2)
          {
            v109 = *(_QWORD *)(v38 + 16);
            if (v107 >= v109)
              goto LABEL_81;
            if (v108 - 2 >= v109)
              goto LABEL_82;
            v110 = v38 + 16 * v107;
            v111 = *(_OWORD *)(v110 + 32);
            *(_OWORD *)(v110 + 32) = *(_OWORD *)(v38 + 16 * v108);
            *(_OWORD *)(v38 + 16 * v108) = v111;
          }
          ++v107;
          v112 = v108 - 3;
          --v108;
        }
        while ((uint64_t)v107 < v112);
      }
      v26[66] = v38;
      OUTLINED_FUNCTION_22();
      v113 = v26[59];
      v26[67] = v113;
      v114 = *(_QWORD *)(v38 + 16);
      if (v114)
      {
        a15 = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_18_3();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v115 = a15;
        v116 = *(_QWORD *)(a15 + 16);
        v117 = 32;
        do
        {
          v118 = *(_QWORD *)(v38 + v117);
          a15 = v115;
          v119 = *(_QWORD *)(v115 + 24);
          if (v116 >= v119 >> 1)
          {
            OUTLINED_FUNCTION_44_2(v119);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v115 = a15;
          }
          *(_QWORD *)(v115 + 16) = v116 + 1;
          *(_QWORD *)(v115 + 8 * v116 + 32) = v118;
          v117 += 16;
          ++v116;
          --v114;
        }
        while (v114);
        OUTLINED_FUNCTION_20_2();
      }
      else
      {
        OUTLINED_FUNCTION_52();
        v115 = MEMORY[0x24BEE4AF8];
      }
      v26[68] = v115;
      v120 = (_QWORD *)swift_task_alloc();
      v26[69] = v120;
      OUTLINED_FUNCTION_92(v120, (uint64_t)E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:));
      v103 = v113;
      v104 = v115;
      return OUTLINED_FUNCTION_7_6(v103, v104, v101, v102);
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    swift_once();
LABEL_21:
    v48 = type metadata accessor for Logger();
    v28 = __swift_project_value_buffer(v48, (uint64_t)static Log.device);
    Logger.logObject.getter();
    v49 = OUTLINED_FUNCTION_111();
    v31 = v49;
    v27 = &loc_248D72000;
    if (os_log_type_enabled(v28, v49))
    {
      v50 = (uint8_t *)OUTLINED_FUNCTION_121();
      a15 = OUTLINED_FUNCTION_57_1();
      *(_DWORD *)v50 = 136315138;
      OUTLINED_FUNCTION_22();
      v51 = swift_bridgeObjectRetain();
      v52 = MEMORY[0x2495A9BC8](v51, MEMORY[0x24BEE1768]);
      v54 = v53;
      swift_bridgeObjectRelease();
      v26[60] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_248CAA000, v28, (os_log_type_t)v31, "Number of prompt modules to reset %s", v50, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_1();
    }

    if (v34 < v38)
    {
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v27 = v26 + 59;
    if (v34 != v38)
    {
      v31 = v34 - v38;
      if (v34 <= v38)
        goto LABEL_89;
      v55 = *v27;
      if ((OUTLINED_FUNCTION_56_2() & 1) == 0)
        goto LABEL_90;
      goto LABEL_27;
    }
  }
  v96 = v26[61];
  v97 = swift_bridgeObjectRetain();
  E5TransformerLanguageModel.reset(promptModuleNodes:toNode:)(v97, v71);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22();
  v98 = v26[59];
  v26[72] = v98;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v99 = OUTLINED_FUNCTION_2_0();
  v26[73] = v99;
  *(_OWORD *)(v99 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v99 + 32) = v96;
  OUTLINED_FUNCTION_65_0();
  v100 = (_QWORD *)swift_task_alloc();
  v26[74] = v100;
  OUTLINED_FUNCTION_92(v100, (uint64_t)E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:));
  v103 = v98;
  v104 = v99;
  return OUTLINED_FUNCTION_7_6(v103, v104, v101, v102);
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_65_1();
  *(_QWORD *)(v1 + 560) = v2;
  *(_QWORD *)(v1 + 568) = v0;
  OUTLINED_FUNCTION_84();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
  if (v0)
  {
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_82();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_82();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

void E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v2 + 16);
  v36 = v2 + 16;
  if (v3)
  {
    v4 = v0 + 72;
    v5 = (uint64_t *)(v0 + 456);
    v6 = *(_QWORD *)(v1 + 16);
    v34 = (__int128 *)(v0 + 32);
    v35 = (_OWORD *)(v0 + 16);
    v7 = v1 + 40 * v6 - 8;
    v31 = (uint64_t *)(v0 + 456);
    while (v3 <= *(_QWORD *)(*(_QWORD *)(v0 + 528) + 16))
    {
      if (!v6)
        goto LABEL_15;
      if (v6 > *(_QWORD *)(v1 + 16))
        goto LABEL_18;
      v37 = *(_OWORD *)(v36 + 16 * v3);
      *v35 = v37;
      outlined init with copy of DeterministicLanguageModelProtocol(v7, (uint64_t)v34);
      v8 = (__int128 *)v4;
      outlined init with take of LogitCollection(v34, v4);
      v9 = *v5;
      v10 = OUTLINED_FUNCTION_56_2();
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
      v13 = *(_QWORD *)(v9 + 16);
      v14 = (v12 & 1) == 0;
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        goto LABEL_19;
      v16 = v11;
      v17 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, LogitCollection>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v15))
      {
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
        if ((v17 & 1) != (v19 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          return;
        }
        v16 = v18;
      }
      if ((v17 & 1) != 0)
      {
        OUTLINED_FUNCTION_123();
        v22 = v20 + v16 * v21;
        __swift_destroy_boxed_opaque_existential_1(v22);
        v4 = (uint64_t)v8;
        outlined init with take of LogitCollection(v8, v22);
      }
      else
      {
        OUTLINED_FUNCTION_95(v9 + 8 * (v16 >> 6));
        *(_QWORD *)(v23 + 8 * v16) = v37;
        OUTLINED_FUNCTION_123();
        v4 = (uint64_t)v8;
        outlined init with take of LogitCollection(v8, v24 + v16 * v25);
        v26 = *(_QWORD *)(v9 + 16);
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_20;
        *(_QWORD *)(v9 + 16) = v28;
      }
      --v3;
      v5 = v31;
      *v31 = v9;
      OUTLINED_FUNCTION_74();
      v7 -= 40;
      --v6;
      v0 = v32;
      v1 = v33;
      if (!v3)
        goto LABEL_15;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_release();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_83();
    OUTLINED_FUNCTION_82();
    v29 = OUTLINED_FUNCTION_70_1();
    v30(v29);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 600);
  if (*(_QWORD *)(v1 + 16) == 1)
  {
    v2 = *(_QWORD *)(v0 + 488);
    outlined init with copy of DeterministicLanguageModelProtocol(v1 + 32, v0 + 112);
    OUTLINED_FUNCTION_7_0();
    specialized Dictionary.subscript.setter(v0 + 112, v2);
    OUTLINED_FUNCTION_83();
    OUTLINED_FUNCTION_82();
    v3 = OUTLINED_FUNCTION_70_1();
    OUTLINED_FUNCTION_10_4(v3, v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t E5TransformerLanguageModel.computeNode(node:promptModuleNodes:maxLogitsDesired:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 600) = a1;
  *(_QWORD *)(v3 + 608) = v1;
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_20_2();
  if (v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t specialized Sequence.allSatisfy(_:)(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1[2];
  if (!v3)
    return 1;
  v7 = a1[4];
  result = swift_beginAccess();
  v9 = *(_QWORD *)(a3 + 32);
  v10 = v9 + 32;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = v3 - 1;
  v13 = a1 + 5;
  while (a2 < v11)
  {
    v15 = v12-- != 0;
    result = v7 == a2;
    if (v7 == a2 && v15)
    {
      v16 = v10 + 72 * a2;
      a2 = *(_QWORD *)(v16 + 16);
      v17 = *v13++;
      v7 = v17;
      if ((*(_BYTE *)(v16 + 24) & 1) == 0)
        continue;
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.logitsAreDense.getter()
{
  return 1;
}

Swift::Int __swiftcall E5TransformerLanguageModel.latestCommonParent(excludingNode:includingNode:)(Swift::Int excludingNode, Swift::Int includingNode)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;

  v3 = v2;
  OUTLINED_FUNCTION_22();
  if (excludingNode < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 <= excludingNode)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= includingNode)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = v6 + 32;
  v9 = v8 + 72 * excludingNode;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = v8 + 72 * includingNode;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 >= v10)
    v13 = *(_QWORD *)(v9 + 8);
  else
    v13 = *(_QWORD *)(v11 + 8);
  v14 = v10 - v13;
  if (__OFSUB__(v10, v13))
    goto LABEL_30;
  v15 = __OFSUB__(v12, v13);
  v16 = v12 - v13;
  if (v15)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((v14 | v16) < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v17 = OUTLINED_FUNCTION_36_2(v14);
  v25 = OUTLINED_FUNCTION_96(v17, v18, v19, v20, v21, v22, v23, v24, v76);
  OUTLINED_FUNCTION_16_2(v25, v26, v27, v28, v29, v30, v31, v32, v77, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
    v104,
    v105);
  if ((v33 & 1) == 0)
  {
    v34 = v109;
    v35 = v108;
    v36 = v113;
    v37 = v112;
    v38 = v114 + 32;
    v39 = v110 + 32;
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_22();
    while ((v36 & 1) == 0)
    {
      if ((v37 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v37 >= *(_QWORD *)(*(_QWORD *)v38 + 16))
        goto LABEL_24;
      if ((v34 & 1) != 0)
        break;
      if ((v35 & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (v35 >= *(_QWORD *)(*(_QWORD *)v39 + 16))
        goto LABEL_26;
      v40 = *(_QWORD *)v38 + 72 * v37;
      v41 = v37 != v35 || v37 == excludingNode;
      v37 = *(_QWORD *)(v40 + 48);
      v36 = *(_BYTE *)(v40 + 56);
      v42 = *(_QWORD *)v39 + 72 * v35;
      v35 = *(_QWORD *)(v42 + 48);
      v34 = *(_BYTE *)(v42 + 56);
      if (!v41)
      {
        v43 = OUTLINED_FUNCTION_29_2();
        v51 = OUTLINED_FUNCTION_69_1(v43, v44, v45, v46, v47, v48, v49, v50, v76, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
                v104,
                v105,
                *((uint64_t *)&v105 + 1),
                v106,
                v107,
                v108,
                v109,
                v110,
                v111,
                v112);
        OUTLINED_FUNCTION_68_1(v51, v52, v53, v54, v55, v56, v57, v58, v78, v81, v84, v87, v90, v93, v96, v99);
        OUTLINED_FUNCTION_125();
        OUTLINED_FUNCTION_25_2();
        return result;
      }
    }
  }
LABEL_33:
  v60 = OUTLINED_FUNCTION_29_2();
  v68 = OUTLINED_FUNCTION_69_1(v60, v61, v62, v63, v64, v65, v66, v67, v76, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
          v104,
          v105,
          *((uint64_t *)&v105 + 1),
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112);
  OUTLINED_FUNCTION_68_1(v68, v69, v70, v71, v72, v73, v74, v75, v79, v82, v85, v88, v91, v94, v97, v100);
  result = OUTLINED_FUNCTION_101();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.measure(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v2;
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  *v2 = v1;
  v2[1] = E5TransformerLanguageModel.measure(_:);
  return Clock.measure(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v3);
  swift_task_dealloc();
  if (v1)
    return OUTLINED_FUNCTION_48_2(*(uint64_t (**)(void))(v2 + 8));
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 40);
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56) + 48;
  OUTLINED_FUNCTION_4_0();
  MEMORY[0x2495AA234](v3, v2, v1);
  swift_endAccess();
  return OUTLINED_FUNCTION_48_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t E5TransformerLanguageModel.nodesAreLinear(nodes:)(_QWORD *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  if (a1[2] < 2uLL)
  {
    v2 = 1;
    return v2 & 1;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)();
  if (a1[2])
  {
    v2 = specialized Sequence.allSatisfy(_:)(a1, a1[4], v1);
    swift_release();
    return v2 & 1;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.nodeTokens(node:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v18;

  v3 = v1 + 32;
  swift_retain();
  swift_beginAccess();
  v4 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (a1 >= *(_QWORD *)(*(_QWORD *)v3 + 16))
      goto LABEL_20;
    v5 = *(_QWORD *)v3 + 72 * a1;
    if ((*(_BYTE *)(v5 + 80) & 1) != 0)
      break;
    a1 = *(_QWORD *)(v5 + 48);
    v6 = *(unsigned __int8 *)(v5 + 56);
    v7 = *(_QWORD *)(v5 + 72);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v9;
    }
    v8 = *(_QWORD *)(v4 + 16);
    if (v8 >= *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v10;
    }
    *(_QWORD *)(v4 + 16) = v8 + 1;
    *(_QWORD *)(v4 + 8 * v8 + 32) = v7;
  }
  while (!v6);
  swift_release();
  v1 = *(_QWORD *)(v4 + 16);
  if (v1 >= 2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_12:
      v11 = 0;
      for (i = v1 + 3; ; --i)
      {
        if (v11 != i - 4)
        {
          v13 = *(_QWORD *)(v4 + 16);
          if (v11 >= v13)
            goto LABEL_21;
          if (i - 4 >= v13)
            goto LABEL_22;
          v14 = v4 + 8 * v11;
          v15 = *(_QWORD *)(v14 + 32);
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v4 + 8 * i);
          *(_QWORD *)(v4 + 8 * i) = v15;
        }
        ++v11;
        v16 = i - 5;
        if ((uint64_t)v11 >= v16)
          return v4;
      }
    }
LABEL_23:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v4 = v18;
    goto LABEL_12;
  }
  return v4;
}

uint64_t E5TransformerLanguageModel.nodesTokens(promptModuleNodes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = MEMORY[0x24BEE4AF8];
  do
  {
    v5 = E5TransformerLanguageModel.nodeTokens(node:)(*(_QWORD *)(a1 + 8 * v3 + 32));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v7;
    }
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 >= *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v8;
    }
    ++v3;
    *(_QWORD *)(v4 + 16) = v6 + 1;
    *(_QWORD *)(v4 + 8 * v6 + 32) = v5;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t E5TransformerLanguageModel.contextSize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;

  v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  swift_beginAccess();
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16) - 1;
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  swift_beginAccess();
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 16);
  if (!v5)
    return v2;
  v6 = (unint64_t *)(v4 + 32);
  result = swift_beginAccess();
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v8 + 40;
  while (1)
  {
    v12 = *v6++;
    v11 = v12;
    if (v12 >= v9)
      break;
    v13 = *(_QWORD *)(v10 + 72 * v11);
    v14 = __OFADD__(v2, v13);
    v2 += v13;
    if (v14)
      goto LABEL_8;
    if (!--v5)
      return v2;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.attentionMasks(promptModulesTokens:queryTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;

  v3 = E5TransformerLanguageModel.contextSize()();
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v4 = 0;
    v5 = a1 + 32;
    v6 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v4) + 16);
      if (v7)
        break;
      v27 = 0;
LABEL_29:
      v21 = __OFADD__(v3, v27);
      v3 += v27;
      if (v21)
        goto LABEL_52;
      if (++v4 == v39)
        goto LABEL_33;
    }
    v40 = v4;
    if (v3 < 0)
      goto LABEL_55;
    v8 = 0;
    v9 = 5;
    while (1)
    {
      if (v3)
      {
        v10 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v10[2] = v3;
        bzero(v10 + 4, 8 * v3);
      }
      else
      {
        v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v11 = v8 + 1;
      v12 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v13 = v12;
      v12[2] = v8 + 1;
      v12[4] = 1;
      v14 = v12 + 4;
      if (v8)
        memset_pattern16(v12 + 5, &unk_248D76020, v9 * 8 - 40);
      v15 = v10[2];
      if (__OFADD__(v15, v11))
        break;
      if (v15 + v11 > v10[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v24;
      }
      if (!v13[2])
        goto LABEL_53;
      v16 = v10[2];
      if ((v10[3] >> 1) - v16 <= v8)
        goto LABEL_48;
      v17 = &v10[v16];
      v18 = v17 + 4;
      if (v14 < &v17[v9] && v18 < &v13[v9])
        goto LABEL_54;
      memcpy(v18, v14, v9 * 8 - 32);
      v20 = v10[2];
      v21 = __OFADD__(v20, v11);
      v22 = v20 + v11;
      if (v21)
        goto LABEL_49;
      v10[2] = v22;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v25;
      }
      v23 = *(_QWORD *)(v6 + 16);
      if (v23 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v26;
      }
      *(_QWORD *)(v6 + 16) = v23 + 1;
      *(_QWORD *)(v6 + 8 * v23 + 32) = v10;
      ++v9;
      v8 = v11;
      if (v7 == v11)
      {
        v4 = v40;
        v5 = a1 + 32;
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32 + 8 * v40) + 16);
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
LABEL_33:
    v28 = *(_QWORD *)(a2 + 16);
    if (!v28)
      return v6;
    v29 = 0;
    for (i = 8 * v3 + 8; ; i += 8)
    {
      v31 = v3 + v29;
      if (__OFADD__(v3, v29))
        break;
      if ((v3 ^ 0x7FFFFFFFFFFFFFFFLL) == v29)
        goto LABEL_51;
      v32 = v31 + 1;
      if (v31 + 1 < 0)
        goto LABEL_55;
      if (v31 == -1)
      {
        v33 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v33 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v33 + 16) = v32;
        memset_pattern16((void *)(v33 + 32), &unk_248D76020, i);
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v35;
      }
      v34 = *(_QWORD *)(v6 + 16);
      if (v34 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v36;
      }
      ++v29;
      *(_QWORD *)(v6 + 16) = v34 + 1;
      *(_QWORD *)(v6 + 8 * v34 + 32) = v33;
      if (v28 == v29)
        return v6;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_55:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.cachePromptModuleNodes(promptModulesTokens:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  objc_class *v20;
  id v21;
  TGIE5KVCacheEntryObjC v22;
  Swift::OpaquePointer v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31[2];

  v31[1] = *(id *)MEMORY[0x24BDAC8D0];
  result = E5TransformerLanguageModel.contextSize()();
  v30 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = result;
    v28 = *(id *)(v29 + 24);
    swift_bridgeObjectRetain();
    v5 = 0;
    v26 = v3;
    while (1)
    {
      v6 = *(_QWORD *)(v30 + 8 * v5 + 32);
      v7 = one-time initialization token for device;
      swift_bridgeObjectRetain();
      if (v7 != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.device);
      swift_bridgeObjectRetain_n();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = swift_slowAlloc();
        v27 = (void *)swift_slowAlloc();
        v31[0] = v27;
        *(_DWORD *)v11 = 136315138;
        v12 = swift_bridgeObjectRetain();
        v13 = MEMORY[0x2495A9BC8](v12, MEMORY[0x24BEE1768]);
        v14 = v4;
        v16 = v15;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v11 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v16, (uint64_t *)v31);
        swift_bridgeObjectRelease_n();
        v4 = v14;
        v3 = v26;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_248CAA000, v9, v10, "Caching kv cache entry for tokens %s", (uint8_t *)v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2495AAF60](v27, -1, -1);
        MEMORY[0x2495AAF60](v11, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v17 = *(_QWORD *)(v6 + 16);
      v31[0] = 0;
      v18 = v4;
      v19 = (objc_class *)objc_msgSend(v28, sel_createKVCacheEntry_error_, v4, v17, v31);
      if (!v19)
      {
        v25 = v31[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        return swift_willThrow();
      }
      v20 = v19;
      v21 = v31[0];
      v22.super.isa = v20;
      v22._kvCacheEntry.__ptr_.__value_ = (TGIE5KVCacheEntry *)v6;
      KVLRUCache.insert(kvCacheEntry:tokens:)(v22, v23);
      if (v24)
        break;
      swift_bridgeObjectRelease();

      v4 += v17;
      if (__OFADD__(v18, v17))
        __break(1u);
      if (v3 == ++v5)
        return swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t E5TransformerLanguageModel.lookupLRUCache(promptModuleNodes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  id v48[5];

  v3 = v1;
  v48[3] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = E5TransformerLanguageModel.contextSize()();
  v43 = *(_QWORD *)(a1 + 16);
  v44 = a1;
  if (v43)
  {
    v6 = v5;
    v38 = v2;
    v42 = (uint64_t *)(v1
                    + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    v39 = v1;
    while (1)
    {
      v10 = *(_QWORD *)(v44 + 8 * v8 + 32);
      v11 = E5TransformerLanguageModel.nodeTokens(node:)(v10);
      v12 = (unint64_t)KVLRUCache.cacheEntry(for:)((Swift::OpaquePointer)v11);
      if (v12)
      {
        v46 = (void *)v12;
        v47 = v6;
        if (one-time initialization token for device != -1)
          swift_once();
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Log.device);
        swift_bridgeObjectRetain_n();
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.debug.getter();
        v45 = v10;
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc();
          v17 = (void *)swift_slowAlloc();
          v48[0] = v17;
          *(_DWORD *)v16 = 136315138;
          v40 = v17;
          v18 = swift_bridgeObjectRetain();
          v19 = v9;
          v20 = MEMORY[0x2495A9BC8](v18, MEMORY[0x24BEE1768]);
          v41 = v7;
          v22 = v21;
          swift_bridgeObjectRelease();
          v23 = v20;
          v9 = v19;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, (uint64_t *)v48);
          v3 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v7 = v41;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_248CAA000, v14, v15, "Found kv cache entry for tokens %s", v16, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x2495AAF60](v40, -1, -1);
          MEMORY[0x2495AAF60](v16, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v25 = *(void **)(v3 + 24);
        v48[0] = 0;
        v26 = objc_msgSend(v25, sel_setKVCacheEntry_startIndex_error_, v46, v47, v48, v38);
        v27 = v48[0];
        if (!v26)
        {
          v36 = v48[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return v9;
        }
        swift_beginAccess();
        v28 = v27;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v29 = *(_QWORD *)(*v42 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        v30 = *v42;
        *(_QWORD *)(v30 + 16) = v29 + 1;
        *(_QWORD *)(v30 + 8 * v29 + 32) = v45;
        swift_endAccess();

        v31 = *(_QWORD *)(v11 + 16);
        swift_bridgeObjectRelease();
        v6 = v47 + v31;
        if (__OFADD__(v47, v31))
        {
          __break(1u);
LABEL_25:
          __break(1u);
        }
        v32 = __OFADD__(v7, v31);
        v7 += v31;
        if (v32)
          goto LABEL_25;
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v9 = v33;
        }
        v24 = *(_QWORD *)(v9 + 16);
        if (v24 >= *(_QWORD *)(v9 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v9 = v34;
        }
        *(_QWORD *)(v9 + 16) = v24 + 1;
        *(_QWORD *)(v9 + 8 * v24 + 32) = v10;
      }
      if (v43 == ++v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
  }
  v7 = 0;
  v9 = MEMORY[0x24BEE4AF8];
LABEL_20:
  v35 = v3 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
  if (*(_BYTE *)(v3
                + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount
                + 8) == 1)
  {
    *(_QWORD *)v35 = v7;
    *(_BYTE *)(v35 + 8) = 0;
  }
  return v9;
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[27] = a5;
  v6[28] = a6;
  v6[25] = a3;
  v6[26] = a4;
  v6[23] = a1;
  v6[24] = a2;
  v7 = type metadata accessor for TokenGenerationError.Context();
  v6[29] = v7;
  v6[30] = *(_QWORD *)(v7 - 8);
  v6[31] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (*v36)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  OUTLINED_FUNCTION_80();
  v19 = v18[23];
  if ((*(_BYTE *)(v19 + 17) & 1) == 0)
  {
    v20 = (_QWORD **)(v19 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
    OUTLINED_FUNCTION_22();
    if ((specialized static Array<A>.== infix(_:_:)(*v20, outlined read-only object #0 of closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)) & 1) == 0)
    {
LABEL_52:
      __break(1u);
      return;
    }
    objc_msgSend(*(id *)(v18[23] + 24), sel_reset);
    *(_BYTE *)(v19 + 17) = 1;
  }
  v21 = v18[24];
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v23 = v18[23];
  v24 = (unint64_t *)(v21 + 32);
  v25 = OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  v18[32] = OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes;
  v26 = v23 + v25;
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_22();
  v27 = *(_QWORD *)(v23 + 32);
  v28 = v27 + 32;
  v29 = *(_QWORD *)(v27 + 16);
  v30 = *(_QWORD *)(*(_QWORD *)v26 + 16);
  do
  {
    v32 = *v24++;
    v31 = v32;
    if (v32 >= v29)
    {
      __break(1u);
      goto LABEL_45;
    }
    v33 = v28 + 72 * v31;
    v34 = *(unsigned __int8 *)(v33 + 24);
    if (v30)
    {
      if (*(_QWORD *)(v33 + 16) != *(_QWORD *)(*(_QWORD *)v26 + 32 + 8 * (v30 - 1)))
        v34 = 1;
      if (v34 != 1)
        goto LABEL_15;
    }
    else if ((v34 & 1) != 0)
    {
      goto LABEL_15;
    }
    --v22;
  }
  while (v22);
  __break(1u);
LABEL_15:
  if ((specialized Sequence<>.contains(_:)(0, v18[24]) & 1) != 0)
    goto LABEL_51;
  v35 = E5TransformerLanguageModel.lookupLRUCache(promptModuleNodes:)(v18[25]);
  v18[33] = v35;
  v44 = v35;
  v82 = v18 + 21;
  v45 = E5TransformerLanguageModel.nodesTokens(promptModuleNodes:)(v35);
  v46 = v45;
  v18[34] = v45;
  v18[21] = MEMORY[0x24BEE4AF8];
  v47 = *(_QWORD *)(v45 + 16);
  if (!v47)
  {
LABEL_35:
    v60 = v18[23];
    v61 = (_QWORD *)v18[24];
    OUTLINED_FUNCTION_30_2();
    specialized Sequence.compactMap<A>(_:)((uint64_t)v61, v60);
    v63 = v62;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    if ((E5TransformerLanguageModel.nodesAreLinear(nodes:)(v61) & 1) != 0)
    {
      if (!*(_QWORD *)(v44 + 16))
      {
        swift_bridgeObjectRelease();
        v64 = 0;
LABEL_43:
        v18[35] = v64;
        v18[36] = v18[21];
        v77 = (_QWORD *)swift_task_alloc();
        v18[37] = v77;
        *v77 = v18;
        v77[1] = closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:);
        OUTLINED_FUNCTION_6_7();
        E5RunnerObjC.run(tokens:maxLogitsDesired:tokenTreeIndexes:presampler:)(v78, v79, v80, v81);
        return;
      }
      v64 = E5TransformerLanguageModel.attentionMasks(promptModulesTokens:queryTokens:)(v46, v63);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v44 + 16))
      {
        v66 = v18[30];
        v65 = v18[31];
        v67 = v18[29];
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_63_0();
        swift_bridgeObjectRelease();
        TokenGenerationError.Context.init(debugDescription:underlyingError:)();
        v68 = type metadata accessor for TokenGenerationError();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
        OUTLINED_FUNCTION_11_0();
        v70 = v69;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v69, v65, v67);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v70, *MEMORY[0x24BEB8050], v68);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
        OUTLINED_FUNCTION_127();
        OUTLINED_FUNCTION_6_7();
        v36(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, v18 + 22, v18 + 20, v82, a15, a16, a17, a18);
        return;
      }
      v71 = v18[23];
      v72 = v18[24];
      v73 = swift_bridgeObjectRetain();
      v74 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_Si_Sits5NeverOTg5041_sS4iIgyydd_Si6offset_Si7elementtSi_Sits5f200OIegnrzr_TR247_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSayl41G_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_l4_SitL20_SitXEfU1_Tf3nnnpf_nTf1cn_n(v73);
      OUTLINED_FUNCTION_42();
      specialized Dictionary.init<A>(uniqueKeysWithValues:)(v74);
      v76 = v75;
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_65_0();
      v64 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5239_s24TokenGenerationInference26E5TransformerLanguageModelC3run015_C54BEC2A6549C4L16D2CDB56F73805ABELL17promptModuleNodes05queryS016maxLogitsDesired10presamplerSayAA15LogitCollection_pGSaySiG_ALSiAA0Y10Presampler_pSgtYaKFyyYaKXEfU_ALSiXEfU2_0fG9Inference0ijkL0CSDyS2iGTf1cn_n(v72, v71, v76);
    }
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v48 = v45 + 32;
  v49 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v50 = *(_QWORD *)v48;
    v51 = *(_QWORD *)(*(_QWORD *)v48 + 16);
    v52 = *(_QWORD *)(v49 + 16);
    if (__OFADD__(v52, v51))
      break;
    OUTLINED_FUNCTION_18_3();
    if (!OUTLINED_FUNCTION_56_2() || v52 + v51 > *(_QWORD *)(v49 + 24) >> 1)
    {
      OUTLINED_FUNCTION_61_1();
      v49 = v53;
    }
    if (*(_QWORD *)(v50 + 16))
    {
      v54 = *(_QWORD *)(v49 + 16);
      if ((*(_QWORD *)(v49 + 24) >> 1) - v54 < v51)
        goto LABEL_47;
      v55 = (void *)(v49 + 8 * v54 + 32);
      if (v50 + 32 < (unint64_t)v55 + 8 * v51 && (unint64_t)v55 < v50 + 32 + 8 * v51)
        goto LABEL_49;
      memcpy(v55, (const void *)(v50 + 32), 8 * v51);
      if (v51)
      {
        v57 = *(_QWORD *)(v49 + 16);
        v58 = __OFADD__(v57, v51);
        v59 = v57 + v51;
        if (v58)
          goto LABEL_48;
        *(_QWORD *)(v49 + 16) = v59;
      }
    }
    else if (v51)
    {
      goto LABEL_46;
    }
    OUTLINED_FUNCTION_20_2();
    v48 += 8;
    if (!--v47)
    {
      *v82 = v49;
      goto LABEL_35;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  OUTLINED_FUNCTION_61_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_6_7();
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  OUTLINED_FUNCTION_64_2(&v6);
  *(_QWORD *)(v4 + 304) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v4 + 312) = a1;
  }
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

uint64_t closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 184);
  **(_QWORD **)(v0 + 208) = *(_QWORD *)(v0 + 312);
  swift_bridgeObjectRelease();
  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentPromptModuleNodes);
  OUTLINED_FUNCTION_22();
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  if (v4)
  {
    v5 = *(void **)(*(_QWORD *)(v0 + 184)
                  + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_kvCache);
    OUTLINED_FUNCTION_18_3();
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v3 + 8 * v6++ + 32);
      v8 = E5TransformerLanguageModel.nodeTokens(node:)(v7);
      KVLRUCache.cacheEntry(for:)((Swift::OpaquePointer)v8);
      OUTLINED_FUNCTION_53_1();

    }
    while (v4 != v6);
    OUTLINED_FUNCTION_20_2();
  }
  v9 = *(_QWORD *)(v0 + 304);
  E5TransformerLanguageModel.cachePromptModuleNodes(promptModulesTokens:)(*(_QWORD *)(v0 + 272));
  if (v9)
  {
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_127();
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v11 = *(_QWORD *)(v0 + 184);
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_4_0();
  specialized Array.append<A>(contentsOf:)();
  swift_endAccess();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_122();
  specialized Array.append<A>(contentsOf:)();
  result = swift_endAccess();
  v13 = *(_QWORD *)(v11 + 40);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (!v14)
  {
    *(_QWORD *)(v11 + 40) = v15;
    swift_task_dealloc();
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_127();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

void specialized RangeReplaceableCollection<>.removeLast(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*v1 + 16);
      v3 = specialized Array.index(_:offsetBy:limitedBy:)(v2, -a1, 0, *v1);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return;
      }
      if (v2 >= v3)
      {
        specialized Array.replaceSubrange<A>(_:with:)(v3);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, _QWORD);
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52[32];
  uint64_t *v53;

  v45 = a2;
  v3 = type metadata accessor for IndexSet.Index();
  v51 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v44 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>.Iterator);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v44 - v15;
  outlined init with copy of ReversedCollection<IndexSet>(a1, (uint64_t)v10);
  v17 = type metadata accessor for IndexSet();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  v19 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v14, v10, v17);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v18, MEMORY[0x24BDCF460]);
  v49 = v20;
  dispatch thunk of Collection.endIndex.getter();
  v21 = *(void (**)(char *, uint64_t))(v19 + 8);
  v22 = v16;
  v21(v10, v17);
  v23 = &v14[*(int *)(v11 + 36)];
  v24 = v51;
  v25 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  v47 = v3;
  v48 = v7;
  v25(v23, v7, v3);
  outlined init with take of (key: Int, value: LogitCollection)?();
  v26 = &v16[*(int *)(v11 + 36)];
  v53 = (uint64_t *)(v45 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_currentQueryNodes);
  v46 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v27 = v47;
  while (1)
  {
    v28 = v48;
    v46(v48, v26, v27);
    v29 = v50;
    dispatch thunk of Collection.startIndex.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    v31 = (uint64_t)v22;
    v32 = *(void (**)(char *, uint64_t))(v51 + 8);
    v32(v29, v27);
    v32(v28, v27);
    if ((v30 & 1) != 0)
    {
      outlined destroy of ReversedCollection<IndexSet>(v31, &demangling cache variable for type metadata for ReversedCollection<IndexSet>.Iterator);
      return swift_release();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF448]);
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    v33 = v31;
    v34 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v36 = *v35;
    v34(v52, 0);
    v37 = v53;
    swift_beginAccess();
    v38 = *v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v38 = v42;
    }
    v39 = *(_QWORD *)(v38 + 16);
    if (v36 >= v39)
      break;
    v40 = v39 - 1;
    v41 = v39 - 1 - v36;
    if (v41 < 0)
      goto LABEL_10;
    memmove((void *)(v38 + 8 * v36 + 32), (const void *)(v38 + 8 * v36 + 40), 8 * v41);
    *(_QWORD *)(v38 + 16) = v40;
    *v53 = v38;
    swift_endAccess();
    v22 = (char *)v33;
  }
  __break(1u);
LABEL_10:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Zip2Sequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  if (v5 >= 1)
  {
    result = swift_beginAccess();
    v7 = *(_QWORD *)(v3 + 32);
    v8 = v7 + 32;
    v9 = *(_QWORD *)(v7 + 16);
    v10 = 1;
    while (v4 < v9)
    {
      v11 = v8 + 72 * v4;
      v4 = *(_QWORD *)(v11 + 16);
      v12 = *(_BYTE *)(v11 + 24);
      if (v10 < v5)
      {
        ++v10;
        if (!*(_BYTE *)(v11 + 24))
          continue;
      }
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_17;
  }
  v12 = 0;
LABEL_8:
  v14 = v1[3];
  v13 = v1[4];
  v15 = v1[5];
  if (v15 >= 1)
  {
    result = swift_beginAccess();
    v16 = *(_QWORD *)(v13 + 32);
    v17 = v16 + 32;
    v18 = *(_QWORD *)(v16 + 16);
    v19 = 1;
    while (v14 < v18)
    {
      v20 = v17 + 72 * v14;
      v14 = *(_QWORD *)(v20 + 16);
      v21 = *(unsigned __int8 *)(v20 + 24);
      if (v19 < v15)
      {
        ++v19;
        if (!v21)
          continue;
      }
      goto LABEL_15;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  LOBYTE(v21) = 0;
LABEL_15:
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

Swift::Int __swiftcall E5TransformerLanguageModel.latestCommonParent(nodeA:nodeB:)(Swift::Int nodeA, Swift::Int nodeB)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;

  v3 = v2;
  OUTLINED_FUNCTION_22();
  if (nodeA < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 <= nodeA)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= nodeB)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = v6 + 32;
  v9 = *(_QWORD *)(v6 + 32 + 72 * nodeA + 8);
  v10 = *(_QWORD *)(v8 + 72 * nodeB + 8);
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  if (!v11)
  {
LABEL_22:
    OUTLINED_FUNCTION_25_2();
    return result;
  }
  v12 = __OFSUB__(v9, v11);
  v13 = v9 - v11;
  if (v12)
    goto LABEL_30;
  v12 = __OFSUB__(v10, v11);
  v14 = v10 - v11;
  if (v12)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (((v13 | v14) & 0x8000000000000000) == 0)
  {
    v15 = OUTLINED_FUNCTION_36_2(v13);
    v23 = OUTLINED_FUNCTION_96(v15, v16, v17, v18, v19, v20, v21, v22, v76);
    OUTLINED_FUNCTION_16_2(v23, v24, v25, v26, v27, v28, v29, v30, v77, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
      v104,
      v105);
    if ((v31 & 1) == 0)
    {
      v32 = v109;
      v33 = v108;
      v34 = v113;
      v35 = v112;
      v36 = v114 + 32;
      v37 = v110 + 32;
      OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_22();
      while ((v34 & 1) == 0)
      {
        if ((v35 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v35 >= *(_QWORD *)(*(_QWORD *)v36 + 16))
          goto LABEL_24;
        if ((v32 & 1) != 0)
          goto LABEL_33;
        v38 = v33;
        if ((v33 & 0x8000000000000000) != 0)
          goto LABEL_25;
        if (v33 >= *(_QWORD *)(*(_QWORD *)v37 + 16))
          goto LABEL_26;
        v39 = *(_QWORD *)v36 + 72 * v35;
        v40 = *(_QWORD *)(v39 + 48);
        v34 = *(_BYTE *)(v39 + 56);
        v41 = *(_QWORD *)v37 + 72 * v33;
        v33 = *(_QWORD *)(v41 + 48);
        v32 = *(_BYTE *)(v41 + 56);
        v42 = v35 == v38;
        v35 = v40;
        if (v42)
        {
          v43 = OUTLINED_FUNCTION_29_2();
          v51 = OUTLINED_FUNCTION_69_1(v43, v44, v45, v46, v47, v48, v49, v50, v76, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
                  v104,
                  v105,
                  *((uint64_t *)&v105 + 1),
                  v106,
                  v107,
                  v108,
                  v109,
                  v110,
                  v111,
                  v112);
          OUTLINED_FUNCTION_68_1(v51, v52, v53, v54, v55, v56, v57, v58, v78, v81, v84, v87, v90, v93, v96, v99);
          OUTLINED_FUNCTION_125();
          goto LABEL_22;
        }
      }
    }
    goto LABEL_33;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  v60 = OUTLINED_FUNCTION_29_2();
  v68 = OUTLINED_FUNCTION_69_1(v60, v61, v62, v63, v64, v65, v66, v67, v76, v80, v83, v86, v89, v92, v95, v98, v101, v102, v103,
          v104,
          v105,
          *((uint64_t *)&v105 + 1),
          v106,
          v107,
          v108,
          v109,
          v110,
          v111,
          v112);
  OUTLINED_FUNCTION_68_1(v68, v69, v70, v71, v72, v73, v74, v75, v79, v82, v85, v88, v91, v94, v97, v100);
  result = OUTLINED_FUNCTION_101();
  __break(1u);
  return result;
}

uint64_t E5TransformerLanguageModel.inferenceCallCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

double E5TransformerLanguageModel.totalLatency.getter()
{
  double v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22();
  v0 = (double)OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_126();
  return (double)v1 * 1.0e-18 + v0;
}

uint64_t E5TransformerLanguageModel.fetchKVCacheUsageMetrics()()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount);
}

Swift::Void __swiftcall E5TransformerLanguageModel.clearKVCacheUsageMetrics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_prefixKVCacheTokensMatchCount;
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
  v2 = v0 + OBJC_IVAR____TtC24TokenGenerationInference26E5TransformerLanguageModel_promptModulesKVCacheTokensMatchCount;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
}

void E5TransformerLanguageModel.deinit()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  v1 = type metadata accessor for ContinuousClock();
  OUTLINED_FUNCTION_3_4(v1);
  OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_98();
  swift_release();
  OUTLINED_FUNCTION_49();
}

uint64_t E5TransformerLanguageModel.__deallocating_deinit()
{
  E5TransformerLanguageModel.deinit();
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance E5TransformerLanguageModel(Swift::Int a1, Swift::Int a2)
{
  return E5TransformerLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, 0);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance E5TransformerLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel;
  return E5TransformerLanguageModel.nextTokensLogits(nodes:presampler:)(a1, a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance E5TransformerLanguageModel()
{
  return 1;
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance E5TransformerLanguageModel(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  return E5TransformerLanguageModel.node(forPreviousNode:prompt:)(a1, *(TokenGenerationInference::SamplingDecoderPrompt *)&a2);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    v13 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9);
    *v3 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22((char *)v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_99(a1, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC, off_2519DD2E8, &demangling cache variable for type metadata for _SetStorage<TGIE5AdapterConfigurationObjC>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for TGIE5FunctionObjC, off_2519DD2F8, &demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  char v22;
  uint64_t v23;
  char v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  uint64_t result;
  Swift::Int v30;
  Swift::Int v31;
  id v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  id v34;
  id v35;
  void *v36;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    OUTLINED_FUNCTION_122();
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      OUTLINED_FUNCTION_63_0();

      OUTLINED_FUNCTION_78();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v39;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v30 = specialized _NativeSet.init(_:capacity:)(v13, result + 1, a5, a3);
    v40 = v30;
    if (*(_QWORD *)(v30 + 24) <= *(_QWORD *)(v30 + 16))
    {
      v35 = v14;
      specialized _NativeSet.resize(capacity:)();
      v31 = v40;
    }
    else
    {
      v31 = v30;
      v32 = v14;
    }
    specialized _NativeSet._unsafeInsertNew(_:)();
    *v9 = v31;
    swift_bridgeObjectRelease();
    *a1 = v14;
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 40);
    OUTLINED_FUNCTION_122();
    v17 = NSObject._rawHashValue(seed:)(v16);
    v18 = -1 << *(_BYTE *)(v12 + 32);
    v19 = v17 & ~v18;
    OUTLINED_FUNCTION_120();
    v36 = a4;
    if ((v20 & 1) != 0)
    {
      OUTLINED_FUNCTION_78();
      v21 = OUTLINED_FUNCTION_118();
      v22 = static NSObject.== infix(_:_:)();

      if ((v22 & 1) != 0)
      {
LABEL_12:

        OUTLINED_FUNCTION_63_0();
        v27 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v19);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v23 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v23;
        OUTLINED_FUNCTION_120();
        if ((v24 & 1) == 0)
          break;
        v25 = OUTLINED_FUNCTION_118();
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    OUTLINED_FUNCTION_63_0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = *v9;
    *v9 = 0x8000000000000000;
    v34 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v34, v19, isUniquelyReferenced_nonNull_native, (uint64_t)a5, a3, v36);
    *v9 = v41;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v5 = static _SetStorage.convert(_:capacity:)();
  v17 = v5;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    OUTLINED_FUNCTION_19_3();
    return v5;
  }
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, a4);
  while (1)
  {
    swift_dynamicCast();
    v5 = v17;
    if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
    {
      specialized _NativeSet.resize(capacity:)();
      v5 = v17;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v5 + 40));
    v7 = v5 + 56;
    v8 = -1 << *(_BYTE *)(v5 + 32);
    v9 = result & ~v8;
    v10 = v9 >> 6;
    if (((-1 << v9) & ~*(_QWORD *)(v5 + 56 + 8 * (v9 >> 6))) == 0)
      break;
    v11 = __clz(__rbit64((-1 << v9) & ~*(_QWORD *)(v5 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11) = v16;
    ++*(_QWORD *)(v5 + 16);
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_16;
  }
  v12 = 0;
  v13 = (unint64_t)(63 - v8) >> 6;
  while (++v10 != v13 || (v12 & 1) == 0)
  {
    v14 = v10 == v13;
    if (v10 == v13)
      v10 = 0;
    v12 |= v14;
    v15 = *(_QWORD *)(v7 + 8 * v10);
    if (v15 != -1)
    {
      v11 = __clz(__rbit64(~v15)) + (v10 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void specialized _NativeSet.resize(capacity:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  OUTLINED_FUNCTION_24_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_113();
  if (v3)
  {
    v4 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v5 = *(_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v0;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v1 + 56;
    if ((v8 & v5) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v4 << 6); ; i = v18 + (v4 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      v20 = static Hasher._hash(seed:_:)() & ~(-1 << *(_BYTE *)(v1 + 32));
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_14_2();
        while (1)
        {
          OUTLINED_FUNCTION_91();
          if (v25)
          {
            if ((v22 & 1) != 0)
              break;
          }
          if (v23 == v24)
            v23 = 0;
          if (*(_QWORD *)(v11 + 8 * v23) != -1)
          {
            OUTLINED_FUNCTION_10_5();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_2();
LABEL_31:
      *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v21) = v19;
      ++*(_QWORD *)(v1 + 16);
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_39;
      if (v14 >= v10)
        goto LABEL_33;
      ++v4;
      if (!v6[v14])
      {
        v4 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_33;
        if (!v6[v4])
        {
          v4 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_33;
          if (!v6[v4])
          {
            v15 = v14 + 3;
            if (v15 >= v10)
            {
LABEL_33:
              if (v28 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v10, (_QWORD *)(v2 + 56));
              else
                *v6 = v26;
              v0 = v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            if (!v6[v15])
            {
              while (1)
              {
                v4 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_40;
                if (v4 >= v10)
                  goto LABEL_33;
                ++v15;
                if (v6[v4])
                  goto LABEL_20;
              }
            }
            v4 = v15;
          }
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_71_0();
      v9 = v17 & v16;
    }
  }
  OUTLINED_FUNCTION_19_3();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_128(v2, v3);
  v4 = OUTLINED_FUNCTION_40_1();
  v5 = (_QWORD *)v4;
  if (*(_QWORD *)(v1 + 16))
  {
    v24 = v0;
    v6 = 1 << *(_BYTE *)(v1 + 32);
    v7 = (_QWORD *)(v1 + 56);
    if (v6 < 64)
      v8 = ~(-1 << v6);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v1 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    v11 = v4 + 56;
    swift_retain();
    v12 = 0;
    if (!v9)
      goto LABEL_7;
LABEL_6:
    OUTLINED_FUNCTION_90();
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v13);
      NSObject._rawHashValue(seed:)(v5[5]);
      OUTLINED_FUNCTION_41_2();
      if (v17)
      {
        OUTLINED_FUNCTION_14_2();
        while (1)
        {
          OUTLINED_FUNCTION_91();
          if (v17)
          {
            if ((v19 & 1) != 0)
              break;
          }
          if (v20 == v21)
            v20 = 0;
          if (*(_QWORD *)(v11 + 8 * v20) != -1)
          {
            OUTLINED_FUNCTION_10_5();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_2();
LABEL_31:
      OUTLINED_FUNCTION_45_1(v18);
      *(_QWORD *)(v5[6] + 8 * v22) = v16;
      ++v5[2];
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_39;
      if (v14 >= v10)
        goto LABEL_33;
      ++v12;
      if (!v7[v14])
      {
        v12 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_33;
        if (!v7[v12])
        {
          v12 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_33;
          if (!v7[v12])
          {
            v15 = v14 + 3;
            if (v15 >= v10)
            {
LABEL_33:
              OUTLINED_FUNCTION_19_3();
              v0 = v24;
              OUTLINED_FUNCTION_73();
              if (v23 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v23 + 63) >> 6, (_QWORD *)(v1 + 56));
              else
                *v7 = -1 << v23;
              *(_QWORD *)(v1 + 16) = 0;
              break;
            }
            if (!v7[v15])
            {
              while (1)
              {
                v12 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_40;
                if (v12 >= v10)
                  goto LABEL_33;
                ++v15;
                if (v7[v12])
                  goto LABEL_20;
              }
            }
            v12 = v15;
          }
        }
      }
LABEL_20:
      OUTLINED_FUNCTION_72_0();
    }
  }
  OUTLINED_FUNCTION_19_3();
  *v0 = v5;
  OUTLINED_FUNCTION_5_6();
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    if (!v11)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = v5;
      v21 = *(_QWORD *)(v5 + 48);
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v23(v4, v21 + v22 * i, v2);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(*(_QWORD *)(v7 + 48) + v27 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v20;
      if (v11)
        goto LABEL_6;
LABEL_7:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v34)
        goto LABEL_32;
      v18 = v35[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v34)
          goto LABEL_32;
        v18 = v35[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v34)
            goto LABEL_32;
          v18 = v35[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v34)
            {
LABEL_32:
              swift_release();
              v1 = v33;
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v35);
              else
                *v35 = -1 << v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v14 >= v34)
                  goto LABEL_32;
                v18 = v35[v14];
                ++v19;
                if (v18)
                  goto LABEL_20;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_20:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

void specialized _NativeSet._unsafeInsertNew(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_85();
  NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  v3 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(v0 + 56 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v3;
  *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8 * v3) = v1;
  ++*(_QWORD *)(v0 + 16);
  OUTLINED_FUNCTION_37();
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  OUTLINED_FUNCTION_129();
  if (!v9 & v8 && (v5 & 1) != 0)
    goto LABEL_15;
  if ((v5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v10 = *v3;
  v11 = static Hasher._hash(seed:_:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v13 + 8 * a2) == v2)
    {
LABEL_14:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v13 + 8 * a2) == v2)
          goto LABEL_14;
      }
    }
  }
LABEL_15:
  OUTLINED_FUNCTION_117();
  *(_QWORD *)(v16 + 8 * a2) = v2;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v15 + 16) = v19;
    OUTLINED_FUNCTION_37();
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6)
{
  uint64_t v6;
  uint64_t *v7;
  char v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  OUTLINED_FUNCTION_129();
  if (!v16 & v15 && (v11 & 1) != 0)
    goto LABEL_15;
  if ((v11 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v14 > v13)
    {
      specialized _NativeSet.copy()(v12);
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v17 = *v7;
  v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v7 + 40));
  v19 = -1 << *(_BYTE *)(v17 + 32);
  a2 = v18 & ~v19;
  OUTLINED_FUNCTION_115();
  if ((v20 & 1) != 0)
  {
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, a5);
    OUTLINED_FUNCTION_119();
    v21 = OUTLINED_FUNCTION_106();

    if ((v21 & 1) != 0)
    {
LABEL_14:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v22 = ~v19;
      while (1)
      {
        a2 = (a2 + 1) & v22;
        OUTLINED_FUNCTION_115();
        if ((v23 & 1) == 0)
          break;
        OUTLINED_FUNCTION_119();
        v24 = OUTLINED_FUNCTION_106();

        if ((v24 & 1) != 0)
          goto LABEL_14;
      }
    }
  }
LABEL_15:
  OUTLINED_FUNCTION_117();
  *(_QWORD *)(v26 + 8 * a2) = v6;
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v29;
    OUTLINED_FUNCTION_31();
  }
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void specialized _NativeSet.copy()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_113();
  if (!v3)
  {
LABEL_28:
    OUTLINED_FUNCTION_19_3();
    *v0 = v0;
    OUTLINED_FUNCTION_37();
    return;
  }
  v4 = (void *)OUTLINED_FUNCTION_22_3();
  if (v7)
    v8 = (unint64_t)v4 >= v6;
  else
    v8 = 1;
  if (v8)
    OUTLINED_FUNCTION_109(v4, v5);
  v9 = 0;
  v0[2] = *(_QWORD *)(v1 + 16);
  v10 = 1 << *(_BYTE *)(v1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v1 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_QWORD *)(v0[6] + 8 * i) = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v2 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v2 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v2 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v6 = (_QWORD *)*v0;
  v7 = static _SetStorage.copy(original:)();
  if (!v6[2])
  {
    OUTLINED_FUNCTION_124();
LABEL_28:
    *v1 = v7;
    OUTLINED_FUNCTION_31();
    return;
  }
  v26 = v1;
  OUTLINED_FUNCTION_73();
  v9 = v6 + 7;
  v11 = (unint64_t)(v10 + 63) >> 6;
  if ((_QWORD *)v7 != v6 || v8 >= &v6[v11 + 7])
    memmove(v8, v6 + 7, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v7 + 16) = v6[2];
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_103();
  v16 = v15 & v14;
  v18 = (unint64_t)(v17 + 63) >> 6;
  if ((v15 & v14) == 0)
    goto LABEL_10;
LABEL_9:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    OUTLINED_FUNCTION_99((uint64_t)v5, v6[6] + v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    OUTLINED_FUNCTION_99(*(_QWORD *)(v7 + 48) + v24, (uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    if (v16)
      goto LABEL_9;
LABEL_10:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v18)
      goto LABEL_26;
    v22 = v9[v21];
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_26;
      v22 = v9[v13];
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_26;
        v22 = v9[v13];
        if (!v22)
          break;
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_26:
    OUTLINED_FUNCTION_124();
    v1 = v26;
    goto LABEL_28;
  }
  v22 = v9[v23];
  if (v22)
  {
    v13 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_26;
    v22 = v9[v13];
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

void specialized _NativeSet.copy()(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t i;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_113();
  if (!v4)
  {
LABEL_26:
    OUTLINED_FUNCTION_19_3();
    *v1 = v1;
    return;
  }
  v5 = (void *)OUTLINED_FUNCTION_22_3();
  if (v8)
    v9 = (unint64_t)v5 >= v7;
  else
    v9 = 1;
  if (v9)
    OUTLINED_FUNCTION_109(v5, v6);
  v10 = 0;
  v1[2] = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_103();
  v13 = v12 & v11;
  v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_10;
LABEL_9:
  OUTLINED_FUNCTION_114();
  for (i = v16 | (v10 << 6); ; i = v22 + (v10 << 6))
  {
    v23 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    *(_QWORD *)(v1[6] + 8 * i) = v23;
    v24 = v23;
    if (v13)
      goto LABEL_9;
LABEL_10:
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v15)
      goto LABEL_26;
    ++v10;
    if (!*(_QWORD *)(v3 + 8 * v18))
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_26;
      if (!*(_QWORD *)(v3 + 8 * v10))
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_26;
        if (!*(_QWORD *)(v3 + 8 * v10))
          break;
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_71_0();
    v13 = v21 & v20;
  }
  v19 = v18 + 3;
  if (v19 >= v15)
    goto LABEL_26;
  if (*(_QWORD *)(v3 + 8 * v19))
  {
    v10 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v15)
      goto LABEL_26;
    ++v19;
    if (*(_QWORD *)(v3 + 8 * v10))
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  OUTLINED_FUNCTION_89();
  OUTLINED_FUNCTION_24_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_113();
  if (!v3)
  {
    OUTLINED_FUNCTION_19_3();
LABEL_35:
    *v0 = v1;
    OUTLINED_FUNCTION_5_6();
    return;
  }
  v20 = v0;
  v4 = 0;
  v5 = v2 + 56;
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  OUTLINED_FUNCTION_90();
  while (1)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10);
    static Hasher._hash(seed:_:)();
    OUTLINED_FUNCTION_41_2();
    if (v14)
    {
      OUTLINED_FUNCTION_14_2();
      while (1)
      {
        OUTLINED_FUNCTION_91();
        if (v14)
        {
          if ((v16 & 1) != 0)
            break;
        }
        if (v17 == v18)
          v17 = 0;
        if (*(_QWORD *)(v1 + 56 + 8 * v17) != -1)
        {
          OUTLINED_FUNCTION_10_5();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_11_2();
LABEL_31:
    OUTLINED_FUNCTION_45_1(v15);
    *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v19) = v13;
    ++*(_QWORD *)(v1 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_37;
    if (v11 >= v9)
      goto LABEL_33;
    ++v4;
    if (!*(_QWORD *)(v5 + 8 * v11))
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v9)
        goto LABEL_33;
      if (!*(_QWORD *)(v5 + 8 * v4))
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v9)
          goto LABEL_33;
        if (!*(_QWORD *)(v5 + 8 * v4))
          break;
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_72_0();
  }
  v12 = v11 + 3;
  if (v12 >= v9)
  {
LABEL_33:
    OUTLINED_FUNCTION_19_3();
    v0 = v20;
    goto LABEL_35;
  }
  if (*(_QWORD *)(v5 + 8 * v12))
  {
    v4 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v4 >= v9)
      goto LABEL_33;
    ++v12;
    if (*(_QWORD *)(v5 + 8 * v4))
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;

  OUTLINED_FUNCTION_89();
  v1 = v0;
  v2 = (_QWORD *)*v0;
  OUTLINED_FUNCTION_128(v3, v4);
  v5 = OUTLINED_FUNCTION_77();
  if (!v2[2])
  {
    OUTLINED_FUNCTION_124();
LABEL_35:
    *v1 = v5;
    OUTLINED_FUNCTION_5_6();
    return;
  }
  v28 = v0;
  OUTLINED_FUNCTION_73();
  v7 = v2 + 7;
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & v2[7];
  v10 = (unint64_t)(v6 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain();
  v12 = 0;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = v19 + (v12 << 6))
  {
    v20 = *(_QWORD *)(v5 + 40);
    v21 = *(id *)(v2[6] + 8 * i);
    v22 = NSObject._rawHashValue(seed:)(v20) & ~(-1 << *(_BYTE *)(v5 + 32));
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_14_2();
      while (1)
      {
        OUTLINED_FUNCTION_91();
        if (v27)
        {
          if ((v24 & 1) != 0)
            break;
        }
        if (v25 == v26)
          v25 = 0;
        if (*(_QWORD *)(v11 + 8 * v25) != -1)
        {
          OUTLINED_FUNCTION_10_5();
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    OUTLINED_FUNCTION_11_2();
LABEL_31:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v23) = v21;
    ++*(_QWORD *)(v5 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_37;
    if (v15 >= v10)
      goto LABEL_33;
    ++v12;
    if (!v7[v15])
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      if (!v7[v12])
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        if (!v7[v12])
          break;
      }
    }
LABEL_20:
    OUTLINED_FUNCTION_71_0();
    v9 = v18 & v17;
  }
  v16 = v15 + 3;
  if (v16 >= v10)
  {
LABEL_33:
    OUTLINED_FUNCTION_101();
    v1 = v28;
    goto LABEL_35;
  }
  if (v7[v16])
  {
    v12 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v10)
      goto LABEL_33;
    ++v16;
    if (v7[v12])
      goto LABEL_20;
  }
LABEL_38:
  __break(1u);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  if (!v12)
    goto LABEL_7;
LABEL_6:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v21 * i, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v13 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v25 * v21, v5, v2);
    ++*(_QWORD *)(v8 + 16);
    if (v12)
      goto LABEL_6;
LABEL_7:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_36;
    if (v18 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_32;
      v19 = *(_QWORD *)(v32 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_32;
        v19 = *(_QWORD *)(v32 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v32 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[2];

  OUTLINED_FUNCTION_85();
  v2 = *v1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  OUTLINED_FUNCTION_30_2();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *v0 = v2;
  return OUTLINED_FUNCTION_32_2();
}

uint64_t outlined release of E5TransformerLanguageModel.PreviousNodeIterator(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t ObjC metadata update function for E5TransformerLanguageModel()
{
  return type metadata accessor for E5TransformerLanguageModel();
}

uint64_t type metadata accessor for E5TransformerLanguageModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for E5TransformerLanguageModel;
  if (!type metadata singleton initialization cache for E5TransformerLanguageModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for E5TransformerLanguageModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ContinuousClock();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for E5TransformerLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t result;

  if (a3 != a2)
  {
    v4 = a3;
    v7 = *a4;
    swift_retain();
    v8 = v7 + 8 * v4 - 8;
    while (2)
    {
      v9 = *(_QWORD *)(v7 + 8 * v4);
      v10 = a1;
      v11 = (unint64_t *)v8;
      do
      {
        if ((E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(v9, *v11) & 1) == 0)
          break;
        if (!v7)
        {
          result = swift_release();
          __break(1u);
          return result;
        }
        v12 = *v11;
        v9 = v11[1];
        *v11 = v9;
        v11[1] = v12;
        --v11;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v8 += 8;
      if (v4 != a2)
        continue;
      break;
    }
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t result;
  unint64_t v13;

  if (a3 != a2)
  {
    v4 = a3;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v9 = *(_QWORD *)(v7 + 8 * v4);
      v10 = a1;
      v11 = (unint64_t *)v8;
      do
      {
        result = E5TransformerLanguageModel.compareNodesByPositionAndToken(_:_:)(*v11, v9);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v13 = *v11;
        v9 = v11[1];
        *v11 = v9;
        v11[1] = v13;
        --v11;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v8 += 8;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return closure #1 in E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(v2, v3, v4, v5, v7, v6);
}

uint64_t type metadata accessor for TGIE5AdapterConfigurationObjC(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of ReversedCollection<IndexSet>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<IndexSet>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined init with take of (key: Int, value: LogitCollection)?()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_85();
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v0, v1, v3);
  OUTLINED_FUNCTION_49();
}

void outlined destroy of ReversedCollection<IndexSet>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_128(a1, a2);
  OUTLINED_FUNCTION_3_4(v2);
  OUTLINED_FUNCTION_49();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_7_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return E5TransformerLanguageModel.run(promptModuleNodes:queryNodes:maxLogitsDesired:presampler:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return 0;
}

__n128 OUTLINED_FUNCTION_16_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21)
{
  return (__n128)a21;
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  uint64_t v0;

  return v0 + 56;
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_35_2@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 368) = a1;
  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_36_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 112) = a1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v1;
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_42_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v6, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_43_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(a1, v3, v2);
}

BOOL OUTLINED_FUNCTION_44_2@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_45_1(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v1 << a1;
}

uint64_t OUTLINED_FUNCTION_46_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of DeterministicLanguageModelProtocol(*(_QWORD *)(v2 + 56) + 40 * a1, v1);
}

Swift::Int OUTLINED_FUNCTION_47_2()
{
  uint64_t v0;

  return specialized DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(0, v0);
}

uint64_t OUTLINED_FUNCTION_48_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_57_1()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_63_1(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_64_2(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void OUTLINED_FUNCTION_65_1()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_66_1()
{
  int64_t v0;

  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
}

void OUTLINED_FUNCTION_67_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_68_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  return outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_69_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return outlined release of E5TransformerLanguageModel.PreviousNodeIterator((uint64_t)&a29);
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_74()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_75()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_76(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[44] = v3;
  v2[45] = a1;
  v2[43] = v1;
}

uint64_t OUTLINED_FUNCTION_77()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_78()
{
  unint64_t *v0;

  return type metadata accessor for TGIE5AdapterConfigurationObjC(0, v0);
}

uint64_t OUTLINED_FUNCTION_79()
{
  return static _SetStorage.copy(original:)();
}

uint64_t OUTLINED_FUNCTION_82()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_83()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_86()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_87()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

_QWORD *OUTLINED_FUNCTION_92@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

unint64_t OUTLINED_FUNCTION_93()
{
  uint64_t *v0;

  return specialized __RawDictionaryStorage.find<A>(_:)(*v0);
}

void OUTLINED_FUNCTION_95(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t OUTLINED_FUNCTION_96(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return specialized Zip2Sequence.makeIterator()((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_97(uint64_t a1, int64_t a2)
{
  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1);
}

uint64_t OUTLINED_FUNCTION_98()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_99@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_101()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_106()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_108(uint64_t a1)
{
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(a1, v1);
}

void *OUTLINED_FUNCTION_109@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

uint64_t OUTLINED_FUNCTION_111()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_112()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_116()
{
  return swift_release();
}

void OUTLINED_FUNCTION_117()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 56) |= v1;
}

id OUTLINED_FUNCTION_118()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

id OUTLINED_FUNCTION_119()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 48) + 8 * v0);
}

uint64_t OUTLINED_FUNCTION_121()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_122()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_124()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_125()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_126()
{
  return Duration.components.getter();
}

uint64_t OUTLINED_FUNCTION_127()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_128(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional __swiftcall GenerationSchema.extractPrefixes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  Swift::Bool v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  Swift::tuple_legal_OpaquePointer_illegal_OpaquePointer_optional result;

  v1 = v0;
  v2 = type metadata accessor for GenerationSchema.StringConstraint();
  v33 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v33 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enumerator: [String]?, constraints: GenerationSchema.StringConstraint?));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GenerationSchema();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v33 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v1, v10);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 88))(v13, v10) == *MEMORY[0x24BE3B628])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    v20 = swift_projectBox();
    v21 = *(int *)(v7 + 48);
    v22 = (uint64_t)&v9[v21];
    outlined init with copy of GenerationSchema.StringConstraint?(v20 + v21, (uint64_t)&v9[v21]);
    outlined init with take of GenerationSchema.StringConstraint?(v22, (uint64_t)v19);
    swift_release();
    outlined init with take of GenerationSchema.StringConstraint?((uint64_t)v19, (uint64_t)v17);
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v2) == 1)
    {
      outlined destroy of GenerationSchema.StringConstraint?((uint64_t)v17);
    }
    else
    {
      v30 = v33;
      v31 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v31(v6, v17, v2);
      v32 = v34;
      v31(v34, v6, v2);
      if ((*(unsigned int (**)(char *, uint64_t))(v30 + 88))(v32, v2) == *MEMORY[0x24BE3B598])
      {
        (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v2);
        v28 = *(void **)v32;
        v29 = (void *)*((_QWORD *)v32 + 1);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.device);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_248CAA000, v24, v25, "Unsupported Schema sent. Ignoring", v26, 2u);
    MEMORY[0x2495AAF60](v26, -1, -1);
  }

  v28 = 0;
  v29 = 0;
LABEL_13:
  result.value.illegal._rawValue = v29;
  result.value.legal._rawValue = v28;
  result.is_nil = v27;
  return result;
}

uint64_t outlined init with copy of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GenerationSchema.StringConstraint?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized Sequence.reversed()(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = specialized _copySequenceToContiguousArray<A>(_:)(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  swift_release();
  if (v3 < 2)
    return;
  v4 = 0;
  v5 = v3 >> 1;
  for (i = v3 + 3; ; --i)
  {
    if (v4 == i - 4)
      goto LABEL_9;
    v7 = *(_QWORD *)(v2 + 16);
    if (v4 >= v7)
      break;
    if (i - 4 >= v7)
      goto LABEL_12;
    v8 = *(_QWORD *)(v2 + 8 * v4 + 32);
    v9 = *(_QWORD *)(v2 + 8 * i);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v2 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4 + 32) = v9;
    *(_QWORD *)(v2 + 8 * i) = v8;
LABEL_9:
    if (v5 == ++v4)
      return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

void specialized Sequence.reversed()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 2)
  {
LABEL_2:
    OUTLINED_FUNCTION_5_0();
    return;
  }
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 + 3;
  while (1)
  {
    if (v3 == v5 - 4)
      goto LABEL_10;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (v5 - 4 >= v6)
      goto LABEL_13;
    v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
    v8 = *(_QWORD *)(v1 + 8 * v5);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v1 = v9;
    }
    *(_QWORD *)(v1 + 8 * v3 + 32) = v8;
    *(_QWORD *)(v1 + 8 * v5) = v7;
LABEL_10:
    ++v3;
    --v5;
    if (v4 == v3)
      goto LABEL_2;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

uint64_t GrammarGuidedLanguageModel.startNode.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_0();
  return *(_QWORD *)(v0 + 16);
}

uint64_t GrammarGuidedLanguageModel.startNode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GrammarGuidedLanguageModel.startNode.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t GrammarGuidedLanguageModel.__allocating_init(constraints:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  GrammarGuidedLanguageModel.init(constraints:)(a1);
  return v2;
}

void GrammarGuidedLanguageModel.init(constraints:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 16) = 0;
  v3 = v1 + OBJC_IVAR____TtC24TokenGenerationInference26GrammarGuidedLanguageModel_constraints;
  v4 = OUTLINED_FUNCTION_20_3();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GrammarGuidedLanguageModel.Node>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_248D75A50;
  v7 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_WORD *)(v6 + 48) = 257;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 1;
  *(_QWORD *)(v6 + 72) = v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(_QWORD *)(v1 + 24) = v6;
  OUTLINED_FUNCTION_5_0();
}

Swift::Int __swiftcall GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  NSObject *v3;
  Swift::Int *v6;
  Class isa;
  Swift::Int v8;
  Swift::Int v9;
  char v10;
  uint64_t v11;
  os_log_type_t v12;
  Swift::Int v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;

  if (isPrompt)
    return forPreviousNode;
  v6 = (Swift::Int *)&v3[3];
  OUTLINED_FUNCTION_4_0();
  isa = v3[3].isa;
  v8 = *((_QWORD *)isa + 2);
  if (v8 <= forPreviousNode)
  {
    if (one-time initialization token for guided == -1)
    {
LABEL_7:
      v11 = OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_9_5(v11, (uint64_t)static Log.guided);
      v12 = OUTLINED_FUNCTION_21_3();
      if (os_log_type_enabled(v3, v12))
      {
        *(_DWORD *)OUTLINED_FUNCTION_121() = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_7_7(&dword_248CAA000, v3, v12, "Unable to find node for token %ld. This should not happen");
        OUTLINED_FUNCTION_4_6();
      }

      return forPreviousNode;
    }
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v9 = specialized Dictionary.subscript.getter(token, *((_QWORD *)isa + 6 * forPreviousNode + 9));
  if ((v10 & 1) == 0)
    return v9;
  OUTLINED_FUNCTION_4_0();
  v13 = *v6;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v13;
  if ((result & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v13 = result;
    *v6 = result;
  }
  if (*(_QWORD *)(v13 + 16) > (unint64_t)forPreviousNode)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(v8, token);
    swift_endAccess();
    v15 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_4_0();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v16 = *(_QWORD *)(*v6 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    v17 = *v6;
    *(_QWORD *)(v17 + 16) = v16 + 1;
    v18 = v17 + 48 * v16;
    *(_QWORD *)(v18 + 32) = v8;
    *(_QWORD *)(v18 + 40) = forPreviousNode;
    *(_WORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = token;
    *(_BYTE *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = v15;
    swift_endAccess();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for GuidedGenerationError();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = OUTLINED_FUNCTION_46_0();
  v5 = type metadata accessor for IndexSet();
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = OUTLINED_FUNCTION_46_0();
  v6 = type metadata accessor for LogitMaskResponse();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = OUTLINED_FUNCTION_24_4();
  v3[20] = OUTLINED_FUNCTION_24_4();
  v3[21] = OUTLINED_FUNCTION_24_4();
  return swift_task_switch();
}

uint64_t GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  objc_class *v10;
  unint64_t isa;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  Class v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(NSObject **)(v0 + 80);
  v3 = v1 + 3;
  OUTLINED_FUNCTION_4_0();
  if (*((_QWORD *)v1[3].isa + 2) <= v2)
  {
    if (one-time initialization token for guided != -1)
LABEL_36:
      swift_once();
    v12 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v12, (uint64_t)static Log.guided);
    v13 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_17_3(v13))
    {
      v14 = *(_QWORD *)(v0 + 72);
      *(_DWORD *)OUTLINED_FUNCTION_121() = 134217984;
      *(_QWORD *)(v0 + 40) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_7(&dword_248CAA000, v1, (os_log_type_t)v3, "Unable to find node for token %ld. This should not happen");
      OUTLINED_FUNCTION_4_6();
    }
    v15 = *(_QWORD **)(v0 + 64);

    v15[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    v15[4] = &protocol witness table for <A> [A];
    *v15 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_1_5();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    return OUTLINED_FUNCTION_2_2(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    OUTLINED_FUNCTION_22_4();
    specialized Sequence.reversed()(v5, v4);
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 16);
    OUTLINED_FUNCTION_22_4();
    v9 = 0;
    v1 = MEMORY[0x24BEE4AF8];
    while (v8 != v9)
    {
      if (v9 >= *(_QWORD *)(v7 + 16))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = *(objc_class **)(v7 + 8 * v9 + 32);
      if (((unint64_t)v10 & 0x8000000000000000) != 0)
        goto LABEL_32;
      if ((unint64_t)v10 >= *((_QWORD *)v3->isa + 2))
        goto LABEL_33;
      ++v9;
      if ((*((_BYTE *)v3->isa + 48 * (_QWORD)v10 + 49) & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        isa = (unint64_t)v1[2].isa;
        if (isa >= (unint64_t)v1[3].isa >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v1[2].isa = (Class)(isa + 1);
        v1[isa + 4].isa = v10;
      }
    }
    swift_bridgeObjectRelease();
    v17 = v1[2].isa;
    if (v17)
    {
      OUTLINED_FUNCTION_22_4();
      v18 = 0;
      v19 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v20 = v1[v18 + 4].isa;
        if (((unint64_t)v20 & 0x8000000000000000) != 0)
          goto LABEL_34;
        if ((unint64_t)v20 >= *((_QWORD *)v3->isa + 2))
          goto LABEL_35;
        v21 = (uint64_t)v3->isa + 48 * (_QWORD)v20;
        if ((*(_BYTE *)(v21 + 64) & 1) == 0)
        {
          v22 = *(_QWORD *)(v21 + 56);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_18_4();
            v19 = v24;
          }
          v23 = *(_QWORD *)(v19 + 16);
          if (v23 >= *(_QWORD *)(v19 + 24) >> 1)
          {
            OUTLINED_FUNCTION_18_4();
            v19 = v25;
          }
          *(_QWORD *)(v19 + 16) = v23 + 1;
          *(_QWORD *)(v19 + 8 * v23 + 32) = v22;
        }
        if (v17 == (Class)++v18)
        {
          swift_release();
          goto LABEL_30;
        }
      }
    }
    v19 = MEMORY[0x24BEE4AF8];
LABEL_30:
    *(_QWORD *)(v0 + 176) = v19;
    swift_release();
    swift_release();
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v26;
    *v26 = v0;
    v26[1] = GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:);
    return GuidedGenerationConstraints.generateNextLogitMask(from:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t *v30;

  v1 = *(NSObject **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  (*(void (**)(NSObject *, _QWORD, uint64_t))(v3 + 32))(v1, *(_QWORD *)(v0 + 160), v4);
  (*(void (**)(uint64_t, NSObject *, uint64_t))(v3 + 16))(v2, v1, v4);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == *MEMORY[0x24BEB8B28])
  {
    v1 = *(NSObject **)(v0 + 152);
    (*(void (**)(NSObject *, _QWORD))(*(_QWORD *)(v0 + 144) + 96))(v1, *(_QWORD *)(v0 + 136));
    if (*((_QWORD *)v1->isa + 2))
    {
      v6 = *(_QWORD *)(v0 + 144);
      v8 = *(_QWORD *)(v0 + 120);
      v7 = *(_QWORD *)(v0 + 128);
      v9 = *(_QWORD *)(v0 + 112);
      v10 = *(uint64_t **)(v0 + 64);
      swift_bridgeObjectRelease();
      IndexSet.init(integer:)();
      OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      v10[3] = OUTLINED_FUNCTION_19_4();
      v10[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 32))(boxed_opaque_existential_1, v7, v9);
      goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    if (v5 == *MEMORY[0x24BEB8B30])
    {
      v13 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 152);
      v14 = *(_QWORD *)(v0 + 112);
      v15 = *(_QWORD *)(v0 + 120);
      v16 = *(uint64_t **)(v0 + 64);
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
      OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 96));
      v16[3] = OUTLINED_FUNCTION_19_4();
      v16[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
      v17 = __swift_allocate_boxed_opaque_existential_1(v16);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(v17, v12, v14);
      goto LABEL_10;
    }
    if (one-time initialization token for guided == -1)
      goto LABEL_7;
  }
  swift_once();
LABEL_7:
  v18 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_9_5(v18, (uint64_t)static Log.guided);
  v19 = OUTLINED_FUNCTION_21_3();
  if (OUTLINED_FUNCTION_17_3(v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_248CAA000, v1, (os_log_type_t)v2, "Mask calculation returned unknown enum value generateNextLogitMask. returning empty indexSet", v20, 2u);
    MEMORY[0x2495AAF60](v20, -1, -1);
  }
  v21 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 120);
  v28 = *(uint64_t **)(v0 + 64);

  IndexSet.init()();
  v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v29(v21, v24);
  v28[3] = OUTLINED_FUNCTION_19_4();
  v28[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
  v30 = __swift_allocate_boxed_opaque_existential_1(v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 32))(v30, v25, v26);
  v29(v22, v24);
LABEL_10:
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  return OUTLINED_FUNCTION_2_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);

  v1 = *(void **)(v0 + 192);
  *(_QWORD *)(v0 + 48) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
    goto LABEL_9;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 88))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88)) != *MEMORY[0x24BEB8A00])
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
LABEL_9:

    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }

  if (one-time initialization token for guided != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_15_4();
  v4 = OUTLINED_FUNCTION_9_5(v3, (uint64_t)static Log.guided);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 72);
    *(_DWORD *)OUTLINED_FUNCTION_121() = 134217984;
    *(_QWORD *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_7_7(&dword_248CAA000, v4, v5, "Grammar can not make mask at node %ld, returning empty logits");
    OUTLINED_FUNCTION_4_6();
  }
  v7 = *(_QWORD **)(v0 + 64);

  v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  v7[4] = &protocol witness table for <A> [A];
  *v7 = MEMORY[0x24BEE4AF8];

  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t GrammarGuidedLanguageModel.deinit()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  v1 = OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_3_4(v1);
  return v0;
}

uint64_t GrammarGuidedLanguageModel.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  v0 = OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_3_4(v0);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance GrammarGuidedLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance GrammarGuidedLanguageModel()
{
  return GrammarGuidedLanguageModel.startNode.getter();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance GrammarGuidedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

void sub_248D04F08(uint64_t *a1@<X8>)
{
  *a1 = GrammarGuidedLanguageModel.startNode.getter();
  OUTLINED_FUNCTION_49();
}

void sub_248D04F2C(uint64_t *a1)
{
  GrammarGuidedLanguageModel.startNode.setter(*a1);
  OUTLINED_FUNCTION_49();
}

uint64_t ObjC metadata update function for GrammarGuidedLanguageModel()
{
  return type metadata accessor for GrammarGuidedLanguageModel();
}

uint64_t type metadata accessor for GrammarGuidedLanguageModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GrammarGuidedLanguageModel;
  if (!type metadata singleton initialization cache for GrammarGuidedLanguageModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GrammarGuidedLanguageModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GuidedGenerationConstraints();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for GrammarGuidedLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.startNode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.__allocating_init(constraints:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.node(forPreviousNode:prompt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of GrammarGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 184)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 184));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return v10(a1, a2, a3);
}

uint64_t destroy for GrammarGuidedLanguageModel.Node()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GrammarGuidedLanguageModel.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GrammarGuidedLanguageModel.Node(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GrammarGuidedLanguageModel.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GrammarGuidedLanguageModel.Node()
{
  return &type metadata for GrammarGuidedLanguageModel.Node;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v5 = a2 + 24;
  swift_retain();
  result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) == 0)
  {
    v3 = 0;
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v7 = (unint64_t *)(MEMORY[0x24BEE4AF8] + 32);
    while (a1 < *(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v8 = *(_QWORD *)v5 + 48 * a1;
      v9 = *(_QWORD *)(v8 + 40);
      v10 = *(_BYTE *)(v8 + 48);
      if (!v3)
      {
        v11 = v2[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        v14 = (_QWORD *)swift_allocObject();
        v15 = (uint64_t)(_swift_stdlib_malloc_size(v14) - 32) / 8;
        v14[2] = v13;
        v14[3] = 2 * v15;
        v16 = (unint64_t)(v14 + 4);
        v17 = v2[3];
        v18 = v17 >> 1;
        if (v2[2])
        {
          if (v14 != v2 || v16 >= (unint64_t)&v2[v18 + 4])
            memmove(v14 + 4, v2 + 4, 8 * v18);
          v2[2] = 0;
        }
        v7 = (unint64_t *)(v16 + 8 * v18);
        v3 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - (v17 >> 1);
        result = swift_release();
        v2 = v14;
      }
      v20 = __OFSUB__(v3--, 1);
      if (v20)
        goto LABEL_27;
      *v7 = a1;
      if ((v10 & 1) != 0)
        goto LABEL_22;
      ++v7;
      a1 = v9;
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_21;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  result = swift_release();
  v21 = v2[3];
  if (v21 < 2)
    return (uint64_t)v2;
  v22 = v21 >> 1;
  v20 = __OFSUB__(v22, v3);
  v23 = v22 - v3;
  if (!v20)
  {
    v2[2] = v23;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_4_6()
{
  JUMPOUT(0x2495AAF60);
}

void OUTLINED_FUNCTION_7_7(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_9_5(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return type metadata accessor for Logger();
}

BOOL OUTLINED_FUNCTION_17_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_18_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return type metadata accessor for SparseLogitCollection();
}

uint64_t OUTLINED_FUNCTION_20_3()
{
  return type metadata accessor for GuidedGenerationConstraints();
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_23_3@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return swift_task_alloc();
}

uint64_t KeyValueCacheTracker.__allocating_init(e5Runner:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t KeyValueCacheTracker.init(e5Runner:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t KeyValueCacheTracker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t KeyValueCacheTracker.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyValueCacheTracker()
{
  return objc_opt_self();
}

uint64_t method lookup function for KeyValueCacheTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KeyValueCacheTracker.__allocating_init(e5Runner:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

_QWORD *KVLRUCacheNode.init(kvCacheEntry:tokens:next:previous:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[4] = a3;
  v4[5] = a4;
  swift_release();
  v4[3] = a2;
  return v4;
}

uint64_t KVLRUCacheNode.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t KVLRUCacheNode.__deallocating_deinit()
{
  KVLRUCacheNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KVLRUCacheNode()
{
  return objc_opt_self();
}

_QWORD *KVLRUCache.init(maximumTokenCount:)(uint64_t a1)
{
  _QWORD *v1;

  v1[3] = 0;
  v1[4] = 0;
  v1[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  type metadata accessor for KVLRUCacheNode();
  lazy protocol witness table accessor for type [Int] and conformance <A> [A]();
  v1[2] = Dictionary.init(dictionaryLiteral:)();
  v1[3] = 0;
  swift_release();
  v1[4] = 0;
  swift_release();
  v1[5] = 0;
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KVLRUCache.insert(kvCacheEntry:tokens:)(TGIE5KVCacheEntryObjC kvCacheEntry, Swift::OpaquePointer tokens)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  TGIE5KVCacheEntry *value;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  TGIE5KVCacheEntry *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  void *v33;
  id v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD v59[2];
  uint64_t *v60;
  char *v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v4 = v2;
  value = kvCacheEntry._kvCacheEntry.__ptr_.__value_;
  isa = kvCacheEntry.super.isa;
  v7 = type metadata accessor for TokenGenerationError.Context();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)OUTLINED_FUNCTION_3_7(v9, sel_tokenCount);
  v13 = (char *)v4[6];
  if ((uint64_t)v13 < (uint64_t)v12)
  {
    v64 = 0;
    v65 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    OUTLINED_FUNCTION_10_7(v14, 0x8000000248D7F3F0);
    v62 = OUTLINED_FUNCTION_3_7(v15, sel_tokenCount);
    v16._countAndFlagsBits = OUTLINED_FUNCTION_4_7();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000001BLL;
    v17._object = (void *)0x8000000248D7F420;
    String.append(_:)(v17);
    v62 = v13;
    v18._countAndFlagsBits = OUTLINED_FUNCTION_4_7();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
LABEL_5:
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    v26 = type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError();
    swift_allocError();
    v28 = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v27, v11, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x24BEB8050], v26);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return;
  }
  v59[1] = v3;
  swift_beginAccess();
  specialized Dictionary.subscript.getter((uint64_t)value, v4[2]);
  v19 = value;
  v21 = v20;
  v22 = swift_release();
  if (v21)
  {
    v62 = 0;
    v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    OUTLINED_FUNCTION_10_7(v23, 0x8000000248D7F3C0);
    v24._countAndFlagsBits = MEMORY[0x2495A9BC8](v19, MEMORY[0x24BEE1768]);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x79646165726C6120;
    v25._object = (void *)0xEE00747369786520;
    String.append(_:)(v25);
    goto LABEL_5;
  }
  v60 = v4 + 2;
  v59[0] = v19;
  v29 = v4[5];
  v30 = (uint64_t)OUTLINED_FUNCTION_3_7(v22, sel_tokenCount);
  if (__OFADD__(v29, v30))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  v31 = v60;
  if ((uint64_t)v13 < v29 + v30)
  {
    v32 = (_QWORD *)v4[4];
    swift_retain();
    v61 = v13;
    while (v32)
    {
      v33 = (void *)v32[2];
      swift_retain();
      v34 = objc_msgSend(v33, sel_tokenCount);
      v35 = v4[5];
      v36 = __OFSUB__(v35, v34);
      v37 = v35 - (_QWORD)v34;
      if (v36)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      v4[5] = v37;
      v38 = (_QWORD *)v32[3];
      OUTLINED_FUNCTION_0_4();
      specialized __RawDictionaryStorage.find<A>(_:)(v38);
      if ((v39 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v66 = *v31;
        v41 = v66;
        *v31 = 0x8000000000000000;
        v42 = *(_QWORD *)(v41 + 24);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[Int], KVLRUCacheNode>);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
        v43 = v66;
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        type metadata accessor for KVLRUCacheNode();
        lazy protocol witness table accessor for type [Int] and conformance <A> [A]();
        v31 = v60;
        _NativeDictionary._delete(at:)();
        *v31 = v43;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_58_0();
      }
      OUTLINED_FUNCTION_59_0();
      swift_release();
      OUTLINED_FUNCTION_11_3();
      v44 = (_QWORD *)v32[5];
      v32[4] = 0;
      v32[5] = 0;
      swift_release();
      v45 = v4[5];
      v46 = (char *)-[objc_class tokenCount](isa, sel_tokenCount);
      OUTLINED_FUNCTION_11_3();
      if (__OFADD__(v45, v46))
        goto LABEL_29;
      v32 = v44;
      if ((uint64_t)v61 >= (uint64_t)&v46[v45])
        goto LABEL_17;
    }
    v44 = 0;
LABEL_17:
    v4[4] = (uint64_t)v44;
    swift_release();
    v47 = v4[4];
    if (v47)
      v48 = (_QWORD *)(v47 + 32);
    else
      v48 = v4 + 3;
    *v48 = 0;
    v30 = swift_release();
  }
  v49 = v4[5];
  v50 = OUTLINED_FUNCTION_3_7(v30, sel_tokenCount);
  v51 = v59[0];
  if (__OFADD__(v49, v50))
    goto LABEL_31;
  v4[5] = (uint64_t)v50 + v49;
  v52 = v4[3];
  if (v52)
  {
    type metadata accessor for KVLRUCacheNode();
    v53 = OUTLINED_FUNCTION_7_8();
    swift_retain_n();
    OUTLINED_FUNCTION_57_0();
    KVLRUCacheNode.init(kvCacheEntry:tokens:next:previous:)((uint64_t)isa, v51, v52, 0);
    *(_QWORD *)(v52 + 40) = v53;
    swift_retain_n();
    swift_release();
    v4[3] = v53;
    swift_release();
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_57_0();
    v54 = swift_retain();
    OUTLINED_FUNCTION_8_4(v54);
    OUTLINED_FUNCTION_59_0();
    OUTLINED_FUNCTION_11_3();
    swift_release();
    OUTLINED_FUNCTION_58_0();
  }
  else
  {
    type metadata accessor for KVLRUCacheNode();
    v55 = OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_57_0();
    KVLRUCacheNode.init(kvCacheEntry:tokens:next:previous:)((uint64_t)isa, v51, 0, 0);
    v4[3] = v55;
    swift_release();
    v4[4] = v4[3];
    swift_retain();
    swift_release();
    v56 = v4[3];
    OUTLINED_FUNCTION_0_4();
    if (v56)
    {
      swift_bridgeObjectRetain();
      v57 = OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_8_4(v57);
      OUTLINED_FUNCTION_58_0();
    }
    else
    {
      v58 = (_QWORD *)swift_bridgeObjectRetain();
      specialized Dictionary._Variant.removeValue(forKey:)(v58);
      OUTLINED_FUNCTION_58_0();
      swift_release();
    }
    OUTLINED_FUNCTION_59_0();
  }
}

TGIE5KVCacheEntryObjC_optional __swiftcall KVLRUCache.cacheEntry(for:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  TGIE5KVCacheEntry *v4;
  Swift::Bool v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_class *v14;
  TGIE5KVCacheEntryObjC_optional result;

  v2 = v1;
  OUTLINED_FUNCTION_2_7();
  v6 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v6 + 16)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1._rawValue), (v4 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
      v10 = *(_QWORD *)(v2 + 32);
      if (v10 && v8 == v10)
        *(_QWORD *)(v2 + 32) = v9;
      swift_retain();
      swift_retain();
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v8 + 32);
      swift_retain();
      OUTLINED_FUNCTION_19_3();
      OUTLINED_FUNCTION_124();
      *(_QWORD *)(v8 + 40) = 0;
      swift_release();
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v2 + 24);
      swift_retain();
      OUTLINED_FUNCTION_19_3();
      v11 = *(_QWORD *)(v2 + 24);
      if (v11)
      {
        *(_QWORD *)(v11 + 40) = v8;
        OUTLINED_FUNCTION_22_4();
        OUTLINED_FUNCTION_19_3();
      }
      *(_QWORD *)(v2 + 24) = v8;
      OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_19_3();
      v12 = *(id *)(v8 + 16);
      swift_release();
    }
    else
    {
      v12 = *(id *)(v8 + 16);
      v13 = v12;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = (objc_class *)v12;
  result.value._kvCacheEntry.__ptr_.__value_ = v4;
  result.value.super.isa = v14;
  result.is_nil = v5;
  return result;
}

uint64_t KVLRUCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_2_7();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * i);
    *(_QWORD *)(v14 + 40) = 0;
    swift_retain();
    OUTLINED_FUNCTION_124();
    *(_QWORD *)(v14 + 32) = 0;
    OUTLINED_FUNCTION_19_3();
    result = OUTLINED_FUNCTION_124();
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v6)
      goto LABEL_21;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_21;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_21;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v6)
  {
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return v0;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_21;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t KVLRUCache.__deallocating_deinit()
{
  KVLRUCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KVLRUCache()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type TokenGenerationError and conformance TokenGenerationError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError;
  if (!lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError)
  {
    v1 = type metadata accessor for TokenGenerationError();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEB80A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [Int] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    v2 = MEMORY[0x24BEE1778];
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE12A8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return swift_beginAccess();
}

id OUTLINED_FUNCTION_3_7(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1)
{
  uint64_t v1;

  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, v1);
}

void OUTLINED_FUNCTION_10_7(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD00000000000002CLL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return swift_release();
}

uint64_t static LanguageModelError.== infix(_:_:)()
{
  return 1;
}

void LanguageModelError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int LanguageModelError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LanguageModelError()
{
  return LanguageModelError.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LanguageModelError()
{
  LanguageModelError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageModelError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LanguageModelError and conformance LanguageModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError;
  if (!lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelError, &type metadata for LanguageModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelError and conformance LanguageModelError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LanguageModelError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for LanguageModelError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248D061F0 + 4 * asc_248D76220[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248D06210 + 4 * byte_248D76225[v4]))();
}

_BYTE *sub_248D061F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248D06210(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D06218(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D06220(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D06228(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D06230(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LanguageModelError()
{
  return &type metadata for LanguageModelError;
}

uint64_t one-time initialization function for device(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_5(a1, static Log.device);
}

uint64_t one-time initialization function for guided(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_5(a1, static Log.guided);
}

uint64_t one-time initialization function for speculativeDecode(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.speculativeDecode);
}

uint64_t one-time initialization function for healing(uint64_t a1)
{
  return one-time initialization function for device(a1, static Log.healing);
}

uint64_t one-time initialization function for device(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1, uint64_t *a2)
{
  return one-time initialization function for device(a1, a2);
}

void specialized TokenSampling.makePresampler()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for BasicLogitPresampler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for BasicLogitPresampler;
}

void TokenSampling.makePresampler()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for BasicLogitPresampler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for BasicLogitPresampler;
}

uint64_t BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  vImagePixelCount v26;
  size_t v27;
  unint64_t v28;
  size_t rowBytes;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  vImage_Buffer dest;
  vImage_Buffer src;
  _UNKNOWN **v51;
  uint64_t v52;

  v45 = a4;
  v46 = a3;
  v40 = a1;
  v52 = *MEMORY[0x24BDAC8D0];
  v44 = a5;
  v7 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = MEMORY[0x24BEE4AF8];
  if (!v7)
    return v8;
  v48 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if (v7 < 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  v11 = 0;
  v8 = v48;
  v37 = a2 + 0x4000000000000000;
  v39 = 2 * a2;
  v47 = 4 * a2;
  v12 = v44;
  v13 = (__int16 *)(v40 + 2 * v44 * v46);
  v41 = 2 * v46;
  v42 = v7;
  v14 = 2 * v45;
  v38 = (unint64_t)(a2 - 0x2000000000000000) >> 62;
  v43 = a6;
  while (1)
  {
    if (v11 == v7)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v15 = v46 * v12;
    if ((unsigned __int128)(v46 * (__int128)v12) >> 64 != (v46 * v12) >> 63)
      goto LABEL_30;
    if (v45 == 1)
    {
      if (a2 <= 0)
      {
        if (a2)
          goto LABEL_37;
        v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      else
      {
        v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        OUTLINED_FUNCTION_0_6(v16);
        if (v37 < 0)
          goto LABEL_34;
      }
      src.data = (void *)(v40 + 2 * v15);
      src.height = 1;
      src.width = a2;
      src.rowBytes = v39;
      if (v38 < 3)
        goto LABEL_33;
      v26 = v6[2];
      dest.data = v6 + 4;
      dest.height = 1;
      dest.width = v26;
      dest.rowBytes = v47;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      goto LABEL_21;
    }
    if (a2 < 0)
      break;
    if (a2)
    {
      v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      OUTLINED_FUNCTION_0_6(v17);
      v18 = 0;
      v19 = v13;
      do
      {
        _H0 = *v19;
        __asm { FCVT            S0, H0 }
        *((_DWORD *)v6 + v18 + 8) = _S0;
        v19 = (__int16 *)((char *)v19 + v14);
        ++v18;
      }
      while (a2 != v18);
    }
    else
    {
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
LABEL_21:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    src.rowBytes = v27;
    v51 = &protocol witness table for <A> [A];
    src.data = v6;
    v48 = v8;
    v6 = *(_QWORD **)(v8 + 16);
    v28 = *(_QWORD *)(v8 + 24);
    if ((unint64_t)v6 >= v28 >> 1)
    {
      OUTLINED_FUNCTION_97(v28 > 1, (int64_t)v6 + 1);
      rowBytes = src.rowBytes;
      v30 = v51;
    }
    else
    {
      rowBytes = v27;
      v30 = &protocol witness table for <A> [A];
    }
    v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&src, rowBytes);
    MEMORY[0x24BDAC7A8](v31);
    v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v34 + 16))(v33);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v6, (uint64_t)v33, &v48, rowBytes, (uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&src);
    if (v43 < v44)
      goto LABEL_31;
    if (v12 >= v43)
      goto LABEL_32;
    ++v11;
    v8 = v48;
    ++v12;
    v7 = v42;
    v13 = (__int16 *)((char *)v13 + v41);
    if (v11 == v42)
      return v8;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance BasicLogitPresampler(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

TokenGenerationInference::ArgmaxLogitCollection __swiftcall ArgmaxLogitCollection.init(index:logit:)(Swift::Int index, Swift::Float logit)
{
  uint64_t v2;
  TokenGenerationInference::ArgmaxLogitCollection result;

  *(_QWORD *)v2 = index;
  *(Swift::Float *)(v2 + 8) = logit;
  result.index = index;
  result.logit = logit;
  return result;
}

uint64_t ArgmaxLogitCollection.indexSet.getter()
{
  return IndexSet.init(integer:)();
}

float ArgmaxLogitCollection.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  float result;

  result = *(float *)(v1 + 8);
  if (*(_QWORD *)v1 != a1)
    return -65504.0;
  return result;
}

Swift::Int __swiftcall ArgmaxLogitCollection.argmax()()
{
  Swift::Int *v0;

  return *v0;
}

double ArgmaxLogitCollection.topK(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v2 = OUTLINED_FUNCTION_2_0();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v2 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v2 + 32) = v1;
  return result;
}

uint64_t ArgmaxPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  _QWORD v32[2];
  __int128 v33;
  ValueMetadata *v34;
  _UNKNOWN **v35;
  uint64_t v36;

  v8 = result;
  if (a4 == 1)
    return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(result, a2, a3, 1, a5, a6);
  v9 = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = specialized static Array._allocateUninitialized(_:)(a6 - a5);
  if (a2 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a5 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000
    || a4 < (uint64_t)0xFFFFFFFF80000000
    || a5 < (uint64_t)0xFFFFFFFF80000000
    || v9 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_34;
  }
  if (v9 <= 0x7FFFFFFF)
  {
    v15 = result;
    PresampleArgmax(v8, a2, a4, a5, v9, v11);
    v32[0] = v32;
    *(_QWORD *)(v15 + 16) = v9;
    v36 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_2_8();
    v16 = v36;
    v17 = *(_QWORD *)(v15 + 16);
    result = swift_bridgeObjectRetain();
    v32[1] = v15;
    if (!v17)
    {
LABEL_26:
      swift_bridgeObjectRelease_n();
      return v16;
    }
    v18 = 0;
    v19 = v15 + 32;
    while (1)
    {
      v20 = *(int *)(v19 + 4 * v18);
      v21 = v20 * a4;
      if ((unsigned __int128)(*(int *)(v19 + 4 * v18) * (__int128)a4) >> 64 != (v20 * a4) >> 63)
        break;
      _VF = __OFADD__(v21, v18);
      v23 = v21 + v18;
      if (_VF)
        goto LABEL_28;
      _VF = __OFADD__(v23, a5);
      v24 = v23 + a5;
      if (_VF)
        goto LABEL_29;
      _H8 = *(_WORD *)(v8 + 2 * v24);
      v36 = v16;
      v27 = *(_QWORD *)(v16 + 16);
      v26 = *(_QWORD *)(v16 + 24);
      if (v27 >= v26 >> 1)
      {
        OUTLINED_FUNCTION_97(v26 > 1, v27 + 1);
        v16 = v36;
      }
      ++v18;
      __asm { FCVT            S0, H8 }
      v34 = &type metadata for ArgmaxLogitCollection;
      v35 = &protocol witness table for ArgmaxLogitCollection;
      *(_QWORD *)&v33 = v20;
      DWORD2(v33) = _S0;
      *(_QWORD *)(v16 + 16) = v27 + 1;
      result = outlined init with take of LogitCollection(&v33, v16 + 40 * v27 + 32);
      if (v17 == v18)
        goto LABEL_26;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance ArgmaxPresampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ArgmaxPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

TokenGenerationInference::TopK2LogitCollection __swiftcall TopK2LogitCollection.init(indexes:logits:)(Swift::tuple_Int_Int indexes, Swift::tuple_Float_Float logits)
{
  uint64_t v2;
  TokenGenerationInference::TopK2LogitCollection result;

  *(Swift::tuple_Int_Int *)v2 = indexes;
  *(Swift::Float *)(v2 + 16) = logits._0;
  *(Swift::Float *)(v2 + 20) = logits._1;
  result.indexes = indexes;
  result.logits._1 = logits._1;
  result.logits._0 = logits._0;
  return result;
}

uint64_t TopK2LogitCollection.indexSet.getter()
{
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  dispatch thunk of SetAlgebra.init()();
  OUTLINED_FUNCTION_4_8();
  return OUTLINED_FUNCTION_4_8();
}

float TopK2LogitCollection.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;

  result = *(float *)(v1 + 16);
  v3 = *(float *)(v1 + 20);
  if (*(_QWORD *)(v1 + 8) != a1)
    v3 = -65504.0;
  if (*(_QWORD *)v1 != a1)
    return v3;
  return result;
}

Swift::Int __swiftcall TopK2LogitCollection.argmax()()
{
  Swift::Int *v0;

  return *v0;
}

double TopK2LogitCollection.topK(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  if (a1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v3 = OUTLINED_FUNCTION_2_0();
    *(_QWORD *)&result = 1;
    *(_OWORD *)(v3 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v3 + 32) = v2;
  }
  else
  {
    v5 = v1[1];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = OUTLINED_FUNCTION_2_0();
    *(_QWORD *)&result = 2;
    *(_OWORD *)(v6 + 16) = xmmword_248D76300;
    *(_QWORD *)(v6 + 32) = v2;
    *(_QWORD *)(v6 + 40) = v5;
  }
  return result;
}

uint64_t TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  int v45;
  ValueMetadata *v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;

  v6 = a5;
  v7 = a1;
  if (a4 == 1)
    return BasicLogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, 1, a5, a6);
  v9 = MEMORY[0x24BEE4AF8];
  v49 = MEMORY[0x24BEE4AF8];
  result = a6 - a5;
  if (__OFSUB__(a6, a5))
  {
LABEL_25:
    __break(1u);
  }
  else
  {
    v10 = a4;
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(result, &v49, a5, a6, v7, a2, a4);
    v12 = v11;
    v39 = (uint64_t)&v39;
    v13 = v49;
    v48 = v9;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_8();
    v14 = v48;
    v15 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v42 = v15;
    if (v15)
    {
      v16 = 0;
      v40 = v10;
      v41 = v12 + 32;
      do
      {
        v17 = *(_QWORD *)(v13 + 16);
        if (v16 == v17)
          break;
        if (v16 >= v17)
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        v18 = *(int *)(v41 + 4 * v16);
        v19 = v18 * v10;
        if ((unsigned __int128)(*(int *)(v41 + 4 * v16) * (__int128)v10) >> 64 != (v18 * v10) >> 63)
          goto LABEL_19;
        _VF = __OFADD__(v19, v16);
        v21 = v19 + v16;
        if (_VF)
          goto LABEL_20;
        _VF = __OFADD__(v21, v6);
        v22 = v21 + v6;
        if (_VF)
          goto LABEL_21;
        v23 = *(int *)(v13 + 4 * v16 + 32);
        v24 = v23 * v10;
        if ((unsigned __int128)(*(int *)(v13 + 4 * v16 + 32) * (__int128)v10) >> 64 != (v23 * v10) >> 63)
          goto LABEL_22;
        _VF = __OFADD__(v24, v16);
        v25 = v24 + v16;
        if (_VF)
          goto LABEL_23;
        _VF = __OFADD__(v25, v6);
        v26 = v25 + v6;
        if (_VF)
          goto LABEL_24;
        v27 = v13;
        v28 = v6;
        _H8 = *(_WORD *)(v7 + 2 * v22);
        v30 = v7;
        _H9 = *(_WORD *)(v7 + 2 * v26);
        v48 = v14;
        v33 = *(_QWORD *)(v14 + 16);
        v32 = *(_QWORD *)(v14 + 24);
        if (v33 >= v32 >> 1)
        {
          OUTLINED_FUNCTION_97(v32 > 1, v33 + 1);
          v14 = v48;
        }
        ++v16;
        __asm
        {
          FCVT            S0, H8
          FCVT            S1, H9
        }
        v46 = &type metadata for TopK2LogitCollection;
        v47 = &protocol witness table for TopK2LogitCollection;
        *(_QWORD *)&v43 = v18;
        *((_QWORD *)&v43 + 1) = v23;
        v44 = _S0;
        v45 = _S1;
        *(_QWORD *)(v14 + 16) = v33 + 1;
        result = outlined init with take of LogitCollection(&v43, v14 + 40 * v33 + 32);
        v7 = v30;
        v6 = v28;
        v13 = v27;
        v10 = v40;
      }
      while (v42 != v16);
    }
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_20_2();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_20_2();
    return v14;
  }
  return result;
}

void closure #1 in TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v19;

  v8 = a5 - a4;
  if (__OFSUB__(a5, a4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v15 = specialized static Array._allocateUninitialized(_:)(a5 - a4);
  if (a7 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a8 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 < (uint64_t)0xFFFFFFFF80000000
    || a4 < (uint64_t)0xFFFFFFFF80000000
    || a7 < (uint64_t)0xFFFFFFFF80000000
    || a8 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_21;
  }
  if (v8 <= 0x7FFFFFFF)
  {
    v19 = v15;
    PresampleTopK2(a6);
    *(_QWORD *)(v19 + 16) = v8;
    *a3 = v19;
    swift_bridgeObjectRelease();
    *a2 = v8;
    return;
  }
LABEL_22:
  __break(1u);
}

uint64_t protocol witness for LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:) in conformance TopK2Presampler(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for TokenSampling.makePresampler() in conformance NucleusSampling(uint64_t a1@<X8>)
{
  specialized TokenSampling.makePresampler()(a1);
}

void specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v15 = specialized static Array._allocateUninitialized(_:)(a1);
  v18 = 0;
  v17[0] = v16;
  v17[1] = a1;
  closure #1 in TopK2Presampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)((uint64_t)v17, &v18, a2, a3, a4, a5, a6, a7);
  if (v7)
  {
    if (v18 <= a1)
    {
      *(_QWORD *)(v15 + 16) = v18;
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else if (v18 <= a1)
  {
    *(_QWORD *)(v15 + 16) = v18;
    return;
  }
  __break(1u);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of LogitCollection(&v12, v10 + 40 * a1 + 32);
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    v1 = type metadata accessor for IndexSet();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BDCF468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    v1 = type metadata accessor for IndexSet();
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BDCF470], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

uint64_t dispatch thunk of LogitPresampler.presampleLogits(buffer:numLogits:tokensStride:logitStride:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

void type metadata accessor for BasicLogitPresampler()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ArgmaxLogitCollection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ArgmaxLogitCollection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for ArgmaxLogitCollection()
{
  OUTLINED_FUNCTION_1_6();
}

void type metadata accessor for ArgmaxPresampler()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t getEnumTagSinglePayload for TopK2LogitCollection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TopK2LogitCollection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for TopK2LogitCollection()
{
  OUTLINED_FUNCTION_1_6();
}

void type metadata accessor for TopK2Presampler()
{
  OUTLINED_FUNCTION_1_6();
}

void OUTLINED_FUNCTION_0_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v1;
  bzero((void *)(a1 + 32), *(_QWORD *)(v2 - 184));
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return dispatch thunk of SetAlgebra.insert(_:)();
}

uint64_t GreedySampling.__allocating_init(randomSeed:)(uint64_t a1, char a2)
{
  id v2;
  uint64_t v3;
  __int128 v5;
  ValueMetadata *v6;
  unint64_t v7;

  if ((a2 & 1) != 0)
    v2 = 0;
  else
    v2 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a1);
  v6 = &type metadata for SeedableRandomNumberGenerator;
  v7 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(_QWORD *)&v5 = v2;
  v3 = swift_allocObject();
  outlined init with take of LogitCollection(&v5, v3 + 16);
  return v3;
}

uint64_t static TopK.makeTopKPresampler(k:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _UNKNOWN **v2;
  ValueMetadata *v3;
  _UNKNOWN **v4;
  ValueMetadata *v5;

  v2 = &protocol witness table for ArgmaxPresampler;
  v3 = &type metadata for ArgmaxPresampler;
  v4 = &protocol witness table for BasicLogitPresampler;
  v5 = &type metadata for BasicLogitPresampler;
  if (result == 2)
  {
    v5 = &type metadata for TopK2Presampler;
    v4 = &protocol witness table for TopK2Presampler;
  }
  if (result != 1)
  {
    v3 = v5;
    v2 = v4;
  }
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

unint64_t specialized Array.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, _QWORD);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(int *__return_ptr, uint64_t *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[36];
  int v28;
  uint64_t v29;

  v3 = v2;
  v23 = a1;
  v24 = a2;
  v4 = type metadata accessor for IndexSet.Index();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IndexSet();
  v9 = lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  v10 = dispatch thunk of Collection.count.getter();
  result = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = v5;
    v22 = v4;
    v29 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v12 = v29;
    result = dispatch thunk of Collection.startIndex.getter();
    if (v10 < 0)
    {
      __break(1u);
    }
    else
    {
      v13 = v7;
      while (1)
      {
        v14 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        v26 = *v15;
        v14(v27, 0);
        v23(&v28, &v26);
        if (v3)
          break;
        v25 = 0;
        v16 = v9;
        v17 = v8;
        v18 = v13;
        v19 = v28;
        v29 = v12;
        v20 = *(_QWORD *)(v12 + 16);
        if (v20 >= *(_QWORD *)(v12 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v12 = v29;
        }
        *(_QWORD *)(v12 + 16) = v20 + 1;
        *(_DWORD *)(v12 + 4 * v20 + 32) = v19;
        v13 = v18;
        v8 = v17;
        v9 = v16;
        dispatch thunk of Collection.formIndex(after:)();
        --v10;
        v3 = v25;
        if (!v10)
        {
          (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v22);
          return v29;
        }
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v22);
      return swift_release();
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v16;
    v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v10 = *v9++;
      v14 = v10;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v11 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v16;
    v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v10 = *v9++;
      v14 = v10;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v11 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      if (v12 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = static Hasher._hash(seed:_:)() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v4) != a1)
    {
      OUTLINED_FUNCTION_50_3();
      if ((v7 & 1) != 0)
      {
        do
        {
          if (*(_QWORD *)(v5 + 8 * v6) == a1)
            break;
          OUTLINED_FUNCTION_50_3();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, unint64_t, uint64_t);
  char v12;
  uint64_t v14;

  v4 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_28_3();
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v14 + 72);
    v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    do
    {
      v11(v2, *(_QWORD *)(a2 + 48) + v10 * v8, v4);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v4);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *__return_ptr, _QWORD);
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v24 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v25 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  v23 = a1;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v25)
      goto LABEL_31;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    if (!v14)
      break;
LABEL_18:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_19:
    v29 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    a1(&v26, &v29);
    if (v3)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release();
      return;
    }
    if ((v28 & 1) == 0)
    {
      v16 = v26;
      v17 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
        v10 = v21;
      }
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v10);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v19 + 1;
      v20 = v10 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v16;
      *(_DWORD *)(v20 + 40) = v17;
      a1 = v23;
    }
  }
  v15 = v9 + 1;
  if (v9 + 1 >= v25)
    goto LABEL_31;
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v9 + 2;
  if (v9 + 2 >= v25)
    goto LABEL_31;
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v9 + 3;
  if (v9 + 3 >= v25)
    goto LABEL_31;
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v9 + 4;
  if (v9 + 4 >= v25)
    goto LABEL_31;
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v9 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_31;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
}

Swift::Float __swiftcall LogitCollection.max()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  float v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t (*v22)(uint64_t, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  float v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_12_4();
  v36 = v3;
  v37 = v4;
  v6 = v5;
  v33 = v7;
  v8 = OUTLINED_FUNCTION_80_0();
  v34 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3_5();
  v9 = MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  v14 = OUTLINED_FUNCTION_3_2();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_45_0();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_19_1();
  v17 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v30 = v6;
  v31 = v0;
  v17(v33, v6);
  IndexSet.makeIterator()();
  v28 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v29 = v15;
  v28(v1, v14);
  v18 = v2 + *(int *)(v16 + 36);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v19 = -3.4028e38;
  while (1)
  {
    v32(v13, v18, v8);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v34 + 8);
    v21(v11, v8);
    v21(v13, v8);
    if ((v20 & 1) != 0)
      break;
    v22 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
    v24 = *v23;
    OUTLINED_FUNCTION_76_0((uint64_t)&v35, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v1, v2, v14);
    dispatch thunk of Collection.formIndex(after:)();
    v28(v1, v14);
    v25 = (*(float (**)(uint64_t, uint64_t))(v30 + 16))(v24, v33);
    if (v19 <= v25)
      v19 = v25;
  }
  outlined destroy of IndexingIterator<IndexSet>(v2);
  return v19;
}

void protocol witness for LogitCollection.withContiguousStorageIfAvailable<A>(_:) in conformance CompositeLanguageModel.CompositeLogitCollection(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  OUTLINED_FUNCTION_16_3(a1, a2);
}

void LogitCollection.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  __swift_storeEnumTagSinglePayload(a2, 1, 1, a1);
  OUTLINED_FUNCTION_91_0();
}

uint64_t specialized LogitCollection.argmax()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  float v14;
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char v33[32];

  v1 = type metadata accessor for IndexSet();
  v29 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v28 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IndexSet.Index();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MaskedLanguageModel.MaskedLogitCollection(0);
  v30 = v0;
  IndexSet.makeIterator()();
  v27 = 0;
  v13 = &v12[*(int *)(v10 + 36)];
  v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v32 = v4;
  v14 = -3.4028e38;
  while (1)
  {
    v31(v9, v13, v3);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v32 + 8);
    v16(v7, v3);
    v16(v9, v3);
    if ((v15 & 1) != 0)
      break;
    v17 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v17(v33, 0);
    v20 = v28;
    v21 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v28, v12, v1);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v1);
    v22 = v30[3];
    v23 = v30[4];
    __swift_project_boxed_opaque_existential_1(v30, v22);
    if (v14 < (*(float (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v22, v23))
    {
      v24 = v30[3];
      v25 = v30[4];
      __swift_project_boxed_opaque_existential_1(v30, v24);
      v14 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v19, v24, v25);
      v27 = v19;
    }
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v12);
  return v27;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  float v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29[32];

  v0 = type metadata accessor for IndexSet();
  v25 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v24 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for IndexSet.Index();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexSet.makeIterator()();
  v27 = v3;
  v28 = 0;
  v12 = &v11[*(int *)(v9 + 36)];
  v26 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v13 = -3.4028e38;
  v14 = v25;
  while (1)
  {
    v26(v8, v12, v2);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v27 + 8);
    v16(v6, v2);
    v16(v8, v2);
    if ((v15 & 1) != 0)
      break;
    v17 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v17(v29, 0);
    v20 = v24;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v24, v11, v0);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v0);
    v21 = v28;
    if (v13 < 0.0)
      v21 = v19;
    v28 = v21;
    if (v13 < 0.0)
      v13 = 0.0;
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v11);
  return v28;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  float v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29[32];

  v0 = type metadata accessor for IndexSet();
  v25 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v24 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for IndexSet.Index();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexSet.makeIterator()();
  v27 = v3;
  v28 = 0;
  v12 = &v11[*(int *)(v9 + 36)];
  v26 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v13 = -3.4028e38;
  v14 = v25;
  while (1)
  {
    v26(v8, v12, v2);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v27 + 8);
    v16(v6, v2);
    v16(v8, v2);
    if ((v15 & 1) != 0)
      break;
    v17 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v18;
    v17(v29, 0);
    v20 = v24;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v24, v11, v0);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v0);
    v21 = v28;
    if (v13 < 1.0)
      v21 = v19;
    v28 = v21;
    if (v13 < 1.0)
      v13 = 1.0;
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v11);
  return v28;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  float v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(unint64_t *, _QWORD);
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  float v27;
  uint64_t result;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v1 = type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection();
  MEMORY[0x24BDAC7A8](v1);
  v33 = (uint64_t)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IndexSet();
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexSet.Index();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v32 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v1;
  v38 = (uint64_t *)v0;
  IndexSet.makeIterator()();
  v35 = 0;
  v15 = &v14[*(int *)(v12 + 36)];
  v39 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v40 = v6;
  v16 = -3.4028e38;
  v17 = v37;
  while (1)
  {
    v39(v11, v15, v5);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v40 + 8);
    v19(v9, v5);
    v19(v11, v5);
    if ((v18 & 1) != 0)
    {
      outlined destroy of IndexingIterator<IndexSet>((uint64_t)v14);
      return v35;
    }
    v20 = (void (*)(unint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v22 = *v21;
    v20(&v42, 0);
    v23 = v36;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v36, v14, v3);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v3);
    v24 = *v38;
    if (!*(_QWORD *)(*v38 + 16))
      break;
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if ((v26 & 1) == 0)
      break;
    if (v16 < *(float *)(*(_QWORD *)(v24 + 56) + 16 * v25 + 8))
    {
      WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(v22);
      v16 = v27;
      v35 = v22;
    }
  }
  outlined init with copy of WeightedFiniteStateLanguageModel.FiniteStateLogitCollection((uint64_t)v38, v33);
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v42 = 0xD000000000000015;
  v43 = 0x8000000248D7F670;
  v41 = v22;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x206E6920746F6E20;
  v30._object = (void *)0xE800000000000000;
  String.append(_:)(v30);
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF470]);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized LogitCollection.argmax()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, _QWORD);
  Swift::Int *v19;
  Swift::Int v20;
  char *v21;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char v29[32];

  v1 = type metadata accessor for IndexSet();
  v25 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IndexSet.Index();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v23 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v0;
  IndexSet.makeIterator()();
  v23 = 0;
  v13 = &v12[*(int *)(v10 + 36)];
  v27 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v28 = v4;
  v14 = -3.4028e38;
  v15 = v25;
  while (1)
  {
    v27(v9, v13, v3);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v28 + 8);
    v17(v7, v3);
    v17(v9, v3);
    if ((v16 & 1) != 0)
      break;
    v18 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v20 = *v19;
    v18(v29, 0);
    v21 = v24;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v12, v1);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v1);
    if (IndexSet.contains(_:)(v20))
    {
      if (v14 < 0.0)
      {
LABEL_7:
        if (IndexSet.contains(_:)(v20))
          v14 = 0.0;
        else
          v14 = -65504.0;
        v23 = v20;
      }
    }
    else if (v14 < -65504.0)
    {
      goto LABEL_7;
    }
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v12);
  return v23;
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  float v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(char *, _QWORD);
  Swift::Int *v22;
  Swift::Int v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  float *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Bool v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Bool v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v41;
  float *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char v52[40];

  v46 = type metadata accessor for IndexSet();
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v2 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for IndexSet.Index();
  v3 = *(_QWORD *)(v47 - 8);
  v4 = MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v41 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompositeLanguageModel.CompositeLogitCollection();
  IndexSet.makeIterator()();
  v41 = 0;
  v10 = &v9[*(int *)(v7 + 36)];
  v50 = v3;
  v45 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v11 = v9;
  v51 = v0 + 5;
  v12 = -3.4028e38;
  v42 = (float *)v0;
  v43 = v9;
  v13 = v46;
  while (1)
  {
    v14 = v2;
    v15 = v47;
    v16 = v48;
    v45(v48, v10, v47);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    v17 = v49;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = (uint64_t)v11;
    v20 = *(void (**)(char *, uint64_t))(v50 + 8);
    v20(v17, v15);
    v20(v16, v15);
    if ((v18 & 1) != 0)
      break;
    v21 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v23 = *v22;
    v21(v52, 0);
    v24 = v44;
    v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v14, v19, v13);
    dispatch thunk of Collection.formIndex(after:)();
    v25 = *(void (**)(char *, uint64_t))(v24 + 8);
    v25(v14, v13);
    v26 = v42;
    v27 = *((_QWORD *)v42 + 3);
    v28 = *((_QWORD *)v42 + 4);
    __swift_project_boxed_opaque_existential_1(v42, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
    v29 = IndexSet.contains(_:)(v23);
    v25(v2, v13);
    v30 = -65504.0;
    if (v29)
    {
      v31 = *((_QWORD *)v26 + 3);
      v32 = *((_QWORD *)v26 + 4);
      __swift_project_boxed_opaque_existential_1(v26, v31);
      v30 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v32 + 16))(v23, v31, v32);
    }
    v33 = v26[20];
    v34 = *((_QWORD *)v26 + 8);
    v35 = *((_QWORD *)v26 + 9);
    __swift_project_boxed_opaque_existential_1(v51, v34);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
    v36 = IndexSet.contains(_:)(v23);
    v25(v2, v13);
    v37 = -65504.0;
    if (v36)
    {
      v38 = *((_QWORD *)v26 + 8);
      v39 = *((_QWORD *)v26 + 9);
      __swift_project_boxed_opaque_existential_1(v51, v38);
      v37 = (*(float (**)(Swift::Int, uint64_t, uint64_t))(v39 + 16))(v23, v38, v39);
    }
    v11 = v43;
    if (v12 < (float)((float)(v30 * v33) + (float)(v37 * v26[21])))
    {
      v12 = CompositeLanguageModel.CompositeLogitCollection.subscript.getter(v23);
      v41 = v23;
    }
  }
  outlined destroy of IndexingIterator<IndexSet>(v19);
  return v41;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  void (*v18)(char *, _QWORD);
  Swift::Int *v19;
  Swift::Int v20;
  char *v21;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char v29[32];

  v1 = type metadata accessor for IndexSet();
  v25 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for IndexSet.Index();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v23 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v0;
  IndexSet.makeIterator()();
  v23 = 0;
  v13 = &v12[*(int *)(v10 + 36)];
  v27 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v28 = v4;
  v14 = -3.4028e38;
  v15 = v25;
  while (1)
  {
    v27(v9, v13, v3);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v28 + 8);
    v17(v7, v3);
    v17(v9, v3);
    if ((v16 & 1) != 0)
      break;
    v18 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v20 = *v19;
    v18(v29, 0);
    v21 = v24;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v12, v1);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v1);
    if (IndexSet.contains(_:)(v20))
    {
      if (v14 < 1.0)
      {
LABEL_7:
        if (IndexSet.contains(_:)(v20))
          v14 = 1.0;
        else
          v14 = -65504.0;
        v23 = v20;
      }
    }
    else if (v14 < -65504.0)
    {
      goto LABEL_7;
    }
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v12);
  return v23;
}

uint64_t specialized LogitCollection.argmax()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  float v18;
  char v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(uint64_t *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31[4];

  v2 = type metadata accessor for IndexSet.Index();
  v30 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - v6;
  v8 = type metadata accessor for IndexSet();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_248D75A50;
  v28 = a1;
  *(_QWORD *)(v16 + 32) = a1;
  v31[0] = v16;
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v9, MEMORY[0x24BDCF468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  IndexSet.makeIterator()();
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27 = v10;
  v26(v12, v8);
  v25 = 0;
  v17 = &v15[*(int *)(v13 + 36)];
  v29 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v18 = -3.4028e38;
  while (1)
  {
    v29(v7, v17, v2);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v30 + 8);
    v20(v5, v2);
    v20(v7, v2);
    if ((v19 & 1) != 0)
      break;
    v21 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v23 = *v22;
    v21(v31, 0);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v12, v15, v8);
    dispatch thunk of Collection.formIndex(after:)();
    v26(v12, v8);
    if (v23 == v28)
    {
      if (v18 < 0.0)
      {
        v18 = 0.0;
        v25 = v28;
      }
    }
    else if (v18 < -65504.0)
    {
      v25 = v23;
      v18 = -65504.0;
    }
  }
  outlined destroy of IndexingIterator<IndexSet>((uint64_t)v15);
  return v25;
}

vDSP_Length specialized LogitCollection.argmax()(uint64_t a1)
{
  vDSP_Length v1;
  vDSP_Length result;
  vDSP_Length __I;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  __C = NAN;
  __I = 0;
  vDSP_maxvi((const float *)(a1 + 32), 1, &__C, &__I, v1);
  result = __I;
  if ((__I & 0x8000000000000000) != 0)
    __break(1u);
  return result;
}

Swift::Int __swiftcall LogitCollection.argmax()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t *__return_ptr, void (*)(const float *@<X0>, vDSP_Length@<X1>, _QWORD *@<X8>), _QWORD, _QWORD, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t);
  char *v22;
  float v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t (*v26)(uint64_t, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  float (*v30)(uint64_t, uint64_t, uint64_t);
  Swift::Int result;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  OUTLINED_FUNCTION_12_4();
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_80_0();
  v40 = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_3_5();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v32 - v11;
  v13 = OUTLINED_FUNCTION_3_2();
  v38 = *(_QWORD *)(v13 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_19_1();
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(uint64_t *__return_ptr, void (*)(const float *@<X0>, vDSP_Length@<X1>, _QWORD *@<X8>), _QWORD, _QWORD, uint64_t, uint64_t))(v3 + 24);
  v39 = v5;
  v18(&v41, closure #1 in LogitCollection.argmax(), 0, MEMORY[0x24BEE1768], v5, v3);
  if (v42 == 1)
  {
    v32 = 0;
    v19 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v35 = v3;
    v36 = v0;
    v19(v39, v3);
    IndexSet.makeIterator()();
    v20 = OUTLINED_FUNCTION_98_0();
    v34 = v21;
    v21(v20);
    v33 = 0;
    v22 = &v17[*(int *)(v37 + 36)];
    v37 = *(_QWORD *)(v40 + 16);
    v23 = -3.4028e38;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v37)(v12, v22, v6);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
      OUTLINED_FUNCTION_110();
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v40 + 8);
      v25(v10, v6);
      v25(v12, v6);
      if ((v24 & 1) != 0)
        break;
      v26 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
      v28 = *v27;
      OUTLINED_FUNCTION_76_0((uint64_t)&v41, v26);
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v1, v17, v13);
      dispatch thunk of Collection.formIndex(after:)();
      v29 = OUTLINED_FUNCTION_98_0();
      v34(v29);
      v30 = *(float (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
      if (v23 < ((float (*)(uint64_t, uint64_t))v30)(v28, v39))
      {
        v23 = v30(v28, v39, v35);
        v33 = v28;
      }
    }
    outlined destroy of IndexingIterator<IndexSet>((uint64_t)v17);
  }
  OUTLINED_FUNCTION_4_9();
  return result;
}

uint64_t specialized LogitCollection.topK(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  void *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _BYTE v100[56];
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _BYTE v113[56];
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)&v81 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BNNS.Shape();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v80 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v79 = (char *)&v62 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v78 = (char *)&v62 - v11;
  v12 = type metadata accessor for IndexSet();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = IndexSet.count.getter();
  if (v16 >= a1)
    v17 = a1;
  else
    v17 = v16;
  if (v17 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v18 + 32) = specialized LogitCollection.argmax()();
    return v18;
  }
  v76 = v6;
  v18 = MEMORY[0x24BEE4AF8];
  if (!v17)
    return v18;
  v70 = v5;
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v1, v12);
  MEMORY[0x24BDAC7A8](v19);
  v60 = v1;
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for specialized closure #1 in LogitCollection.topK(_:), (uint64_t)(&v62 - 2));
  v69 = 0;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v21 = specialized Array.init(repeating:count:)(0, v17);
  v22 = specialized Array.init(repeating:count:)(v17, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v77 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v20 = v57;
  }
  v71 = v20;
  v75 = v20 + 32;
  *(_QWORD *)&v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v24 = swift_allocObject();
  v73 = xmmword_248D75A50;
  *(_OWORD *)(v24 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v24 + 32) = IndexSet.count.getter();
  *(_QWORD *)&v72 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v25 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v67 = *(_OWORD *)&v113[16];
  v68 = *(_OWORD *)v113;
  v66 = *(_OWORD *)&v113[32];
  v26 = *(_QWORD *)&v113[48];
  v27 = v114;
  BNNS.Shape.stride.getter();
  v64 = *(_OWORD *)&v113[16];
  v65 = *(_OWORD *)v113;
  v63 = *(_OWORD *)&v113[32];
  v28 = *(_QWORD *)&v113[48];
  v29 = v114;
  v30 = static Float.bnnsDataType.getter();
  v31 = static Float.bnnsDataType.getter();
  v83 = 0;
  v84 = v25;
  v85 = v68;
  v86 = v67;
  v87 = v66;
  v88 = v26;
  v89 = v27;
  v90 = v65;
  v91 = v64;
  v92 = v63;
  v93 = v28;
  v94 = v29;
  v95 = v75;
  v96 = v30;
  v97 = 0;
  v98 = v31;
  v99 = 1065353216;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v21 = v58;
  }
  *(_QWORD *)&v68 = v21 + 32;
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = v73;
  v75 = v17;
  *(_QWORD *)(v32 + 32) = v17;
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v33 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v66 = *(_OWORD *)&v113[16];
  v67 = *(_OWORD *)v113;
  v65 = *(_OWORD *)&v113[32];
  v34 = *(_QWORD *)&v113[48];
  v35 = v114;
  BNNS.Shape.stride.getter();
  v63 = *(_OWORD *)&v113[16];
  v64 = *(_OWORD *)v113;
  v62 = *(_OWORD *)&v113[32];
  v36 = *(_QWORD *)&v113[48];
  v37 = v114;
  v38 = static Int32.bnnsDataType.getter();
  v39 = static Int32.bnnsDataType.getter();
  *(_DWORD *)v113 = 0;
  *(_DWORD *)&v113[4] = v33;
  *(_OWORD *)&v113[8] = v67;
  *(_OWORD *)&v113[24] = v66;
  *(_OWORD *)&v113[40] = v65;
  v114 = v34;
  v115 = v35;
  v116 = v64;
  v117 = v63;
  v118 = v62;
  v119 = v36;
  v120 = v37;
  v121 = v68;
  v122 = v38;
  v123 = 0;
  v124 = v39;
  v125 = 1065353216;
  v40 = v77;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v40 = v59;
  }
  v77 = v40;
  *(_QWORD *)&v68 = v40 + 32;
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v73;
  *(_QWORD *)(v41 + 32) = v75;
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v42 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v81 = *(_OWORD *)v100;
  v73 = *(_OWORD *)&v100[32];
  v74 = *(_OWORD *)&v100[16];
  v43 = *(_QWORD *)&v100[48];
  v44 = v101;
  BNNS.Shape.stride.getter();
  v72 = *(_OWORD *)v100;
  v66 = *(_OWORD *)&v100[32];
  v67 = *(_OWORD *)&v100[16];
  v46 = *(_QWORD *)&v100[48];
  v45 = v101;
  v47 = static Float.bnnsDataType.getter();
  v48 = static Float.bnnsDataType.getter();
  *(_DWORD *)v100 = 0;
  *(_DWORD *)&v100[4] = v42;
  *(_OWORD *)&v100[8] = v81;
  *(_OWORD *)&v100[24] = v74;
  *(_OWORD *)&v100[40] = v73;
  v101 = v43;
  v102 = v44;
  v103 = v72;
  v104 = v67;
  v105 = v66;
  v106 = v46;
  v107 = v45;
  v108 = v68;
  v109 = v47;
  v110 = 0;
  v111 = v48;
  v112 = 1065353216;
  v60 = 1;
  v61 = 0;
  v49 = v69;
  static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
  if (!v49)
  {
    v50 = *(void (**)(char *, uint64_t))(v76 + 8);
    v51 = v70;
    v50(v80, v70);
    v50(v79, v51);
    v50(v78, v51);
    v52 = *(_QWORD *)(v21 + 16);
    if (v52)
    {
      v82 = v18;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v53 = 0;
      v18 = v82;
      v54 = *(_QWORD *)(v82 + 16);
      do
      {
        v55 = *(int *)(v21 + 4 * v53 + 32);
        v82 = v18;
        if (v54 >= *(_QWORD *)(v18 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v18 = v82;
        }
        ++v53;
        *(_QWORD *)(v18 + 16) = v54 + 1;
        *(_QWORD *)(v18 + 8 * v54++ + 32) = v55;
      }
      while (v52 != v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v18;
  }

  LODWORD(v61) = 0;
  v60 = 217;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  void *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _BYTE v100[56];
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _BYTE v113[56];
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)&v81 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BNNS.Shape();
  v77 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v80 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v79 = (char *)&v62 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v78 = (char *)&v62 - v10;
  v11 = type metadata accessor for IndexSet();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1 + *(int *)(type metadata accessor for CompositeLanguageModel.CompositeLogitCollection() + 32);
  v16 = IndexSet.count.getter();
  if (v16 >= a1)
    v17 = a1;
  else
    v17 = v16;
  if (v17 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v18 + 32) = specialized LogitCollection.argmax()();
    return v18;
  }
  v18 = MEMORY[0x24BEE4AF8];
  if (!v17)
    return v18;
  v70 = v5;
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  MEMORY[0x24BDAC7A8](v19);
  v60 = v1;
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for specialized closure #1 in LogitCollection.topK(_:), (uint64_t)(&v62 - 2));
  v69 = 0;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v21 = specialized Array.init(repeating:count:)(0, v17);
  v22 = specialized Array.init(repeating:count:)(v17, 0.0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v20 = v57;
  }
  v71 = v20;
  v75 = v20 + 32;
  *(_QWORD *)&v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v24 = swift_allocObject();
  v73 = xmmword_248D75A50;
  *(_OWORD *)(v24 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v24 + 32) = IndexSet.count.getter();
  *(_QWORD *)&v72 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v25 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v67 = *(_OWORD *)&v113[16];
  v68 = *(_OWORD *)v113;
  v66 = *(_OWORD *)&v113[32];
  v26 = *(_QWORD *)&v113[48];
  v27 = v114;
  BNNS.Shape.stride.getter();
  v64 = *(_OWORD *)&v113[16];
  v65 = *(_OWORD *)v113;
  v63 = *(_OWORD *)&v113[32];
  v28 = *(_QWORD *)&v113[48];
  v29 = v114;
  v30 = static Float.bnnsDataType.getter();
  v31 = static Float.bnnsDataType.getter();
  v83 = 0;
  v84 = v25;
  v85 = v68;
  v86 = v67;
  v87 = v66;
  v88 = v26;
  v89 = v27;
  v90 = v65;
  v91 = v64;
  v92 = v63;
  v93 = v28;
  v94 = v29;
  v95 = v75;
  v96 = v30;
  v97 = 0;
  v98 = v31;
  v99 = 1065353216;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v21 = v58;
  }
  *(_QWORD *)&v68 = v21 + 32;
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = v73;
  v75 = v17;
  *(_QWORD *)(v32 + 32) = v17;
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v33 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v66 = *(_OWORD *)&v113[16];
  v67 = *(_OWORD *)v113;
  v65 = *(_OWORD *)&v113[32];
  v34 = *(_QWORD *)&v113[48];
  v35 = v114;
  BNNS.Shape.stride.getter();
  v63 = *(_OWORD *)&v113[16];
  v64 = *(_OWORD *)v113;
  v62 = *(_OWORD *)&v113[32];
  v36 = *(_QWORD *)&v113[48];
  v37 = v114;
  v38 = static Int32.bnnsDataType.getter();
  v39 = static Int32.bnnsDataType.getter();
  *(_DWORD *)v113 = 0;
  *(_DWORD *)&v113[4] = v33;
  *(_OWORD *)&v113[8] = v67;
  *(_OWORD *)&v113[24] = v66;
  *(_OWORD *)&v113[40] = v65;
  v114 = v34;
  v115 = v35;
  v116 = v64;
  v117 = v63;
  v118 = v62;
  v119 = v36;
  v120 = v37;
  v121 = v68;
  v122 = v38;
  v123 = 0;
  v124 = v39;
  v125 = 1065353216;
  v40 = v76;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v40 = v59;
  }
  v76 = v40;
  *(_QWORD *)&v68 = v40 + 32;
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v73;
  *(_QWORD *)(v41 + 32) = v75;
  __swift_storeEnumTagSinglePayload(v81, 1, 1, v72);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v42 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v81 = *(_OWORD *)v100;
  v73 = *(_OWORD *)&v100[32];
  v74 = *(_OWORD *)&v100[16];
  v43 = *(_QWORD *)&v100[48];
  v44 = v101;
  BNNS.Shape.stride.getter();
  v72 = *(_OWORD *)v100;
  v66 = *(_OWORD *)&v100[32];
  v67 = *(_OWORD *)&v100[16];
  v46 = *(_QWORD *)&v100[48];
  v45 = v101;
  v47 = static Float.bnnsDataType.getter();
  v48 = static Float.bnnsDataType.getter();
  *(_DWORD *)v100 = 0;
  *(_DWORD *)&v100[4] = v42;
  *(_OWORD *)&v100[8] = v81;
  *(_OWORD *)&v100[24] = v74;
  *(_OWORD *)&v100[40] = v73;
  v101 = v43;
  v102 = v44;
  v103 = v72;
  v104 = v67;
  v105 = v66;
  v106 = v46;
  v107 = v45;
  v108 = v68;
  v109 = v47;
  v110 = 0;
  v111 = v48;
  v112 = 1065353216;
  v60 = 1;
  v61 = 0;
  v49 = v69;
  static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
  if (!v49)
  {
    v50 = *(void (**)(char *, uint64_t))(v77 + 8);
    v51 = v70;
    v50(v80, v70);
    v50(v79, v51);
    v50(v78, v51);
    v52 = *(_QWORD *)(v21 + 16);
    if (v52)
    {
      v82 = v18;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v53 = 0;
      v18 = v82;
      v54 = *(_QWORD *)(v82 + 16);
      do
      {
        v55 = *(int *)(v21 + 4 * v53 + 32);
        v82 = v18;
        if (v54 >= *(_QWORD *)(v18 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v18 = v82;
        }
        ++v53;
        *(_QWORD *)(v18 + 16) = v54 + 1;
        *(_QWORD *)(v18 + 8 * v54++ + 32) = v55;
      }
      while (v52 != v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v18;
  }

  LODWORD(v61) = 0;
  v60 = 217;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized LogitCollection.topK(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(int *__return_ptr, uint64_t *);
  void (*v3)(int *__return_ptr, uint64_t *);
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void (*v50)(int *__return_ptr, uint64_t *);
  uint64_t v51[12];
  uint64_t *v52;
  void (*v53)(int *__return_ptr, uint64_t *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(int *__return_ptr, uint64_t *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  OUTLINED_FUNCTION_12_4();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v8);
  v10 = OUTLINED_FUNCTION_25_3(v9, v51[0]);
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_48_3(v12, v51[0]);
  v14 = MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_77_0(v14, v15, v16, v17, v18, v19, v20, v21, v51[0]);
  MEMORY[0x24BDAC7A8](v22);
  v60 = (uint64_t)v51 - v23;
  v24 = OUTLINED_FUNCTION_3_2();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_45_0();
  v26 = IndexSet.count.getter();
  if (v26 >= v7)
    v27 = v7;
  else
    v27 = v26;
  if (v27 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v47 = OUTLINED_FUNCTION_3_8();
    *(_OWORD *)(v47 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v47 + 32) = v5();
    goto LABEL_22;
  }
  if (!v27)
  {
LABEL_22:
    OUTLINED_FUNCTION_4_9();
    return;
  }
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v0, v24);
  v29 = v51;
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_67_1();
  *(_QWORD *)(v30 - 16) = v0;
  v32 = OUTLINED_FUNCTION_70_2(v3, v31);
  v53 = v3;
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v1, v24);
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_75_0();
  v33 = OUTLINED_FUNCTION_99_0();
  v57 = v3;
  if ((v33 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v32 = v48;
  }
  v54 = v32;
  v56 = v32 + 32;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v34 = (__n128 *)OUTLINED_FUNCTION_3_8();
  v35 = OUTLINED_FUNCTION_73_0(v34, (__n128)xmmword_248D75A50);
  v36 = OUTLINED_FUNCTION_95_0(v35);
  OUTLINED_FUNCTION_9_6(v36);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_4();
  v37 = OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_1_7(v37);
  if ((OUTLINED_FUNCTION_84_0() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v29 = v49;
  }
  v52 = v29 + 4;
  v38 = OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_5_7(v38);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_22_5();
  v39 = static Int32.bnnsDataType.getter();
  if ((OUTLINED_FUNCTION_0_7(v39) & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v3 = v50;
  }
  v57 = v3;
  v52 = (uint64_t *)((char *)v3 + 32);
  v40 = OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_6_8(v40);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_103_0();
  OUTLINED_FUNCTION_59_2();
  v41 = v63;
  BNNS.Shape.stride.getter();
  OUTLINED_FUNCTION_74_0();
  v42 = v63;
  static Float.bnnsDataType.getter();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_40_2();
  v64 = v41;
  OUTLINED_FUNCTION_38_3();
  v65 = v42;
  OUTLINED_FUNCTION_2_9(v43, v44);
  if (!v3)
  {
    OUTLINED_FUNCTION_45_2(v62);
    OUTLINED_FUNCTION_45_2(v61);
    OUTLINED_FUNCTION_45_2(v60);
    if (v29[2])
    {
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_55_2();
      OUTLINED_FUNCTION_87_0();
      do
      {
        OUTLINED_FUNCTION_53_2();
        if (v45)
          OUTLINED_FUNCTION_41_3();
        OUTLINED_FUNCTION_52_2();
      }
      while (!v46);
      OUTLINED_FUNCTION_66_2();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_97_0();
    }
    else
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66_2();
      swift_bridgeObjectRelease();
    }
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_112_0();
  OUTLINED_FUNCTION_33_3();
  __break(1u);
}

{
  void (*v0)(int *__return_ptr, uint64_t *);
  uint64_t v1;
  void (*v2)(int *__return_ptr, uint64_t *);
  uint64_t (*v3)(void);
  uint64_t (*v4)(void);
  uint64_t (*v5)(_QWORD);
  uint64_t (*v6)(_QWORD);
  void (*v7)(int *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  char v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(int *__return_ptr, uint64_t *);
  uint64_t v55;
  char *v56;
  void (*v57)(int *__return_ptr, uint64_t *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(int *__return_ptr, uint64_t *);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  OUTLINED_FUNCTION_12_4();
  v61 = v2;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  v12 = OUTLINED_FUNCTION_25_3(v11, v55);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_48_3(v14, v55);
  v16 = MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_77_0(v16, v17, v18, v19, v20, v21, v22, v23, v55);
  MEMORY[0x24BDAC7A8](v24);
  v64 = (uint64_t)&v55 - v25;
  v26 = OUTLINED_FUNCTION_3_2();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_19_1();
  v28 = (char *)v0 + *(int *)(v6(0) + 20);
  v29 = IndexSet.count.getter();
  if (v29 >= v9)
    v30 = v9;
  else
    v30 = v29;
  if (v30 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v51 = OUTLINED_FUNCTION_3_8();
    *(_OWORD *)(v51 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v51 + 32) = v4();
    goto LABEL_22;
  }
  if (!v30)
  {
LABEL_22:
    OUTLINED_FUNCTION_4_9();
    return;
  }
  v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 16))(v1, v28, v26);
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_67_1();
  *(_QWORD *)(v32 - 16) = v0;
  v34 = OUTLINED_FUNCTION_70_2(v61, v33);
  v57 = v7;
  v35 = OUTLINED_FUNCTION_98_0();
  v36(v35);
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_75_0();
  v37 = OUTLINED_FUNCTION_99_0();
  v61 = v7;
  if ((v37 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v34 = v52;
  }
  v58 = v34;
  v60 = v34 + 32;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v38 = (__n128 *)OUTLINED_FUNCTION_3_8();
  v39 = OUTLINED_FUNCTION_73_0(v38, (__n128)xmmword_248D75A50);
  v40 = OUTLINED_FUNCTION_95_0(v39);
  OUTLINED_FUNCTION_9_6(v40);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_23_4();
  v41 = OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_1_7(v41);
  if ((OUTLINED_FUNCTION_84_0() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v1 = v53;
  }
  v56 = (char *)(v1 + 32);
  v42 = OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_5_7(v42);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_22_5();
  v43 = static Int32.bnnsDataType.getter();
  if ((OUTLINED_FUNCTION_0_7(v43) & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v7 = v54;
  }
  v61 = v7;
  v56 = (char *)v7 + 32;
  v44 = OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_6_8(v44);
  BNNS.Shape.layout.getter();
  OUTLINED_FUNCTION_103_0();
  OUTLINED_FUNCTION_59_2();
  v45 = v67;
  BNNS.Shape.stride.getter();
  OUTLINED_FUNCTION_74_0();
  v46 = v67;
  static Float.bnnsDataType.getter();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_40_2();
  v68 = v45;
  OUTLINED_FUNCTION_38_3();
  v69 = v46;
  OUTLINED_FUNCTION_2_9(v47, v48);
  if (!v7)
  {
    OUTLINED_FUNCTION_45_2(v66);
    OUTLINED_FUNCTION_45_2(v65);
    OUTLINED_FUNCTION_45_2(v64);
    if (*(_QWORD *)(v1 + 16))
    {
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_55_2();
      OUTLINED_FUNCTION_87_0();
      do
      {
        OUTLINED_FUNCTION_53_2();
        if (v49)
          OUTLINED_FUNCTION_41_3();
        OUTLINED_FUNCTION_52_2();
      }
      while (!v50);
      OUTLINED_FUNCTION_66_2();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_97_0();
    }
    else
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66_2();
      swift_bridgeObjectRelease();
    }
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_112_0();
  OUTLINED_FUNCTION_33_3();
  __break(1u);
}

uint64_t specialized LogitCollection.topK(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int128 v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for IndexSet();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v30[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v30[-1] - v10;
  v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v12 = swift_allocObject();
  v29 = xmmword_248D75A50;
  *(_OWORD *)(v12 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v12 + 32) = a2;
  v30[0] = v12;
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v5, MEMORY[0x24BDCF468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v13 = IndexSet.count.getter();
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v11, v4);
  if (v13 >= a1)
    v15 = a1;
  else
    v15 = v13;
  if (v15 == 1)
  {
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = v29;
    *(_QWORD *)(v16 + 32) = specialized LogitCollection.argmax()(v33);
  }
  else
  {
    v16 = MEMORY[0x24BEE4AF8];
    if (v15)
    {
      v17 = v33;
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v29;
      *(_QWORD *)(v18 + 32) = v17;
      v30[0] = v18;
      v19 = dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24BDAC7A8](v19);
      *((_QWORD *)&v29 - 2) = &v33;
      v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for specialized closure #1 in LogitCollection.topK(_:), (uint64_t)(&v29 - 2));
      v14(v9, v4);
      v32 = specialized Array.init(repeating:count:)(0, v15);
      v31 = specialized Array.init(repeating:count:)(v15, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v20 = v28;
      }
      v21 = *(_QWORD *)(v20 + 16);
      v30[0] = v20 + 32;
      v30[1] = v21;
      specialized closure #2 in LogitCollection.topK(_:)(v30, v33, &v32, v15, &v31);
      v22 = v32;
      v23 = *(_QWORD *)(v32 + 16);
      if (v23)
      {
        v30[0] = v16;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v24 = 0;
        v16 = v30[0];
        v25 = *(_QWORD *)(v30[0] + 16);
        do
        {
          v26 = *(int *)(v22 + 4 * v24 + 32);
          v30[0] = v16;
          if (v25 >= *(_QWORD *)(v16 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v16 = v30[0];
          }
          ++v24;
          *(_QWORD *)(v16 + 16) = v25 + 1;
          *(_QWORD *)(v16 + 8 * v25++ + 32) = v26;
        }
        while (v23 != v24);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v16;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for IndexSet();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26[-1] - v9;
  v29 = a2;
  IndexSet.init(integersIn:)();
  v11 = IndexSet.count.getter();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  if (v11 >= a1)
    v13 = a1;
  else
    v13 = v11;
  if (v13 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v14 + 32) = specialized LogitCollection.argmax()(v29);
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
    if (v13)
    {
      v15 = IndexSet.init(integersIn:)();
      MEMORY[0x24BDAC7A8](v15);
      *(&v25 - 2) = (uint64_t)&v29;
      v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for specialized closure #1 in LogitCollection.topK(_:), (uint64_t)(&v25 - 4));
      v12(v8, v4);
      v28 = specialized Array.init(repeating:count:)(0, v13);
      v27 = specialized Array.init(repeating:count:)(v13, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v16 = v24;
      }
      v17 = *(_QWORD *)(v16 + 16);
      v26[0] = v16 + 32;
      v26[1] = v17;
      specialized closure #2 in LogitCollection.topK(_:)(v26, v29, (uint64_t)&v28, v13, &v27);
      v18 = v28;
      v19 = *(_QWORD *)(v28 + 16);
      if (v19)
      {
        v26[0] = v14;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v20 = 0;
        v14 = v26[0];
        v21 = *(_QWORD *)(v26[0] + 16);
        do
        {
          v22 = *(int *)(v18 + 4 * v20 + 32);
          v26[0] = v14;
          if (v21 >= *(_QWORD *)(v14 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v14 = v26[0];
          }
          ++v20;
          *(_QWORD *)(v14 + 16) = v21 + 1;
          *(_QWORD *)(v14 + 8 * v21++ + 32) = v22;
        }
        while (v19 != v20);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v14;
}

uint64_t LogitCollection.topK(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;

  v7 = OUTLINED_FUNCTION_3_2();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - v10;
  v30 = v3;
  OUTLINED_FUNCTION_108_0();
  v12 = IndexSet.count.getter();
  v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v11, v7);
  if (v12 >= a1)
    v14 = a1;
  else
    v14 = v12;
  v15 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    if (v14 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v15 = OUTLINED_FUNCTION_3_8();
      *(_OWORD *)(v15 + 16) = xmmword_248D75A50;
      *(_QWORD *)(v15 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    }
    else
    {
      v16 = v30;
      v17 = OUTLINED_FUNCTION_108_0();
      MEMORY[0x24BDAC7A8](v17);
      *(&v29 - 4) = a2;
      *(&v29 - 3) = a3;
      *(&v29 - 2) = v16;
      OUTLINED_FUNCTION_70_2((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in LogitCollection.topK(_:), (uint64_t)(&v29 - 6));
      v18 = OUTLINED_FUNCTION_98_0();
      v20 = v19;
      ((void (*)(uint64_t))v13)(v18);
      v33 = specialized Array.init(repeating:count:)(0, v14);
      v32 = specialized Array.init(repeating:count:)(v14, 0.0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v20 = v28;
      }
      v21 = *(_QWORD *)(v20 + 16);
      v31[0] = v20 + 32;
      v31[1] = v21;
      closure #2 in LogitCollection.topK(_:)(v31, v30, &v33, v14, &v32, a2, a3);
      v22 = v33;
      v23 = *(_QWORD *)(v33 + 16);
      if (v23)
      {
        v31[0] = v15;
        OUTLINED_FUNCTION_18_3();
        OUTLINED_FUNCTION_56_3();
        v24 = 0;
        v15 = v31[0];
        v25 = *(_QWORD *)(v31[0] + 16);
        do
        {
          v26 = *(int *)(v22 + 4 * v24 + 32);
          v31[0] = v15;
          if (v25 >= *(_QWORD *)(v15 + 24) >> 1)
          {
            OUTLINED_FUNCTION_41_3();
            v15 = v31[0];
          }
          ++v24;
          *(_QWORD *)(v15 + 16) = v25 + 1;
          *(_QWORD *)(v15 + 8 * v25++ + 32) = v26;
        }
        while (v23 != v24);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_42();
    }
  }
  return v15;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, float a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v5 = 0;
    *(_QWORD *)(result + 16) = a1;
    do
    {
      v6 = result + 4 * v5++;
      *(float *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a2)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v5 = 0;
    *(_QWORD *)(result + 16) = a2;
    do
    {
      v6 = result + 4 * v5++;
      *(_DWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t SparseLogitCollection.init(allowedTokenIDs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_3_2();
  return OUTLINED_FUNCTION_21_4(a2, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 32));
}

Swift::UInt64 __swiftcall SeedableRandomNumberGenerator.next()()
{
  id *v0;
  Swift::UInt64 v2;

  if (*v0)
    return (Swift::UInt64)objc_msgSend(*v0, sel_next);
  v2 = 0;
  MEMORY[0x2495AAF78](&v2, 8);
  return v2;
}

uint64_t Array<A>.indexSet.getter()
{
  return IndexSet.init(integersIn:)();
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance <A> [A]()
{
  return Array<A>.indexSet.getter();
}

unint64_t protocol witness for LogitCollection.subscript.getter in conformance <A> [A](unint64_t a1)
{
  uint64_t *v1;

  return specialized Array.subscript.getter(a1, *v1);
}

uint64_t protocol witness for LogitCollection.withContiguousStorageIfAvailable<A>(_:) in conformance <A> [A]()
{
  return Array.withContiguousStorageIfAvailable<A>(_:)();
}

vDSP_Length protocol witness for LogitCollection.argmax() in conformance <A> [A]()
{
  uint64_t *v0;

  return specialized LogitCollection.argmax()(*v0);
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance <A> [A](uint64_t a1)
{
  uint64_t *v1;

  return specialized LogitCollection.topK(_:)(a1, *v1);
}

void closure #1 in LogitCollection.argmax()(const float *a1@<X0>, vDSP_Length a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  specialized static vDSP.indexOfMaximum<A>(_:)(a1, a2);
  if (v4 < 0)
    __break(1u);
  else
    *a3 = v4;
}

float specialized static vDSP.indexOfMaximum<A>(_:)(const float *a1, vDSP_Length __N)
{
  vDSP_Length __I;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if ((__N & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __C = NAN;
  __I = 0;
  if (!a1)
    goto LABEL_5;
  vDSP_maxvi(a1, 1, &__C, &__I, __N);
  return __C;
}

uint64_t Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  vDSP_Length v8;
  const float *v9;
  float v10;
  uint64_t v11;
  vDSP_Length v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float __C;
  float v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 16);
  __C = NAN;
  v9 = (const float *)(a1 + 32);
  swift_bridgeObjectRetain();
  vDSP_maxv(v9, 1, &__C, v8);
  v10 = __C;
  OUTLINED_FUNCTION_57_0();
  v11 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v11 = v17;
  }
  __C = -v10;
  vDSP_vsadd(v9, 1, &__C, (float *)(v11 + 32), 1, v8);
  OUTLINED_FUNCTION_58_0();
  if (a4 != 0.0)
  {
    v12 = *(_QWORD *)(v11 + 16);
    OUTLINED_FUNCTION_18_3();
    v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v13 = v19;
    }
    v21 = a4;
    vDSP_vsdiv((const float *)(v11 + 32), 1, &v21, (float *)(v13 + 32), 1, v12);
    OUTLINED_FUNCTION_20_2();
    v11 = v13;
  }
  if (*(_QWORD *)(v11 + 16) >> 31)
  {
    __break(1u);
    goto LABEL_11;
  }
  LODWORD(__C) = *(_QWORD *)(v11 + 16);
  OUTLINED_FUNCTION_18_3();
  v14 = v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_11:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v14 = v18;
  }
  vvexpf((float *)(v14 + 32), (const float *)(v11 + 32), (const int *)&__C);
  OUTLINED_FUNCTION_20_2();
  v15 = Array<A>.sampleRandomElement(using:generator:)(v14, a2, a3);
  OUTLINED_FUNCTION_58_0();
  return v15;
}

float specialized static vDSP.maximum<A>(_:)(const float *a1, vDSP_Length __N)
{
  float __C;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if ((__N & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __C = NAN;
  if (!a1)
    goto LABEL_5;
  vDSP_maxv(a1, 1, &__C, __N);
  return __C;
}

void specialized static vDSP.add<A, B>(_:_:result:)(const float *a1, vDSP_Length a2, uint64_t a3, float a4)
{
  if (*(_QWORD *)(a3 + 8) == a2)
    specialized closure #1 in static vDSP.add<A, B>(_:_:result:)((float **)a3, a1, a2, a2, a4);
  else
    __break(1u);
}

uint64_t Array<A>.sampleRandomElement(using:generator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vDSP_Length v6;
  float *v7;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t result;
  char v12;
  float __C[2];
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  __C[0] = NAN;
  v7 = (float *)(a1 + 32);
  vDSP_sve((const float *)(a1 + 32), 1, __C, v6);
  v8 = __C[0];
  if (__C[0] < 0.0)
  {
    __break(1u);
    goto LABEL_11;
  }
  __C[0] = 0.0;
  __C[1] = v8;
  __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
  lazy protocol witness table accessor for type Float and conformance Float();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  static BinaryFloatingPoint<>.random<A>(in:using:)();
  if (v6)
  {
    v9 = *v7 + 0.0;
    v10 = 0;
    if (v14 > v9)
    {
      while (v6 - 1 != v10)
      {
        v9 = v9 + *(float *)(a1 + 36 + 4 * v10++);
        if (v14 <= v9)
          goto LABEL_6;
      }
      goto LABEL_8;
    }
LABEL_6:
    if (v10 < *(_QWORD *)(a3 + 16))
      return *(_QWORD *)(a3 + 8 * v10 + 32);
LABEL_11:
    __break(1u);
  }
LABEL_8:
  result = specialized BidirectionalCollection.last.getter(a3);
  if ((v12 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in LogitCollection.topK(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

float specialized closure #1 in LogitCollection.topK(_:)()
{
  return 0.0;
}

{
  return 1.0;
}

float specialized closure #1 in LogitCollection.topK(_:)(Swift::Int a1)
{
  Swift::Bool v1;
  float result;

  v1 = IndexSet.contains(_:)(a1);
  result = -65504.0;
  if (v1)
    return 0.0;
  return result;
}

{
  Swift::Bool v1;
  float result;

  v1 = IndexSet.contains(_:)(a1);
  result = -65504.0;
  if (v1)
    return 1.0;
  return result;
}

float specialized closure #1 in LogitCollection.topK(_:)(uint64_t a1)
{
  return CompositeLanguageModel.CompositeLogitCollection.subscript.getter(a1);
}

float specialized closure #1 in LogitCollection.topK(_:)(uint64_t a1, uint64_t a2)
{
  float result;

  result = -65504.0;
  if (a1 == a2)
    return 0.0;
  return result;
}

unint64_t specialized closure #1 in LogitCollection.topK(_:)(uint64_t a1)
{
  return WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(a1);
}

uint64_t specialized closure #2 in LogitCollection.topK(_:)(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 v77;
  int v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _BYTE v95[56];
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _BYTE v108[56];
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;

  v74 = a4;
  v75 = a5;
  v76 = a3;
  v66 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexSet();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BNNS.Shape();
  v67 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v73 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v72 = (char *)&v59 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v59 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v21 = swift_allocObject();
  v77 = xmmword_248D75A50;
  *(_OWORD *)(v21 + 16) = xmmword_248D75A50;
  *(_QWORD *)&v71 = v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v77;
  *(_QWORD *)(v22 + 32) = a2;
  *(_QWORD *)v108 = v22;
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v23 = IndexSet.count.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)(v21 + 32) = v23;
  *(_QWORD *)&v70 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v24 = *v66;
  LODWORD(v21) = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v64 = *(_OWORD *)&v108[16];
  v65 = *(_OWORD *)v108;
  v63 = *(_OWORD *)&v108[32];
  v25 = *(_QWORD *)&v108[48];
  v26 = v109;
  v66 = (uint64_t *)v19;
  BNNS.Shape.stride.getter();
  v61 = *(_OWORD *)&v108[16];
  v62 = *(_OWORD *)v108;
  v60 = *(_OWORD *)&v108[32];
  v27 = *(_QWORD *)&v108[48];
  v28 = v109;
  LODWORD(v23) = static Float.bnnsDataType.getter();
  v29 = static Float.bnnsDataType.getter();
  v78 = 0;
  v79 = v21;
  v80 = v65;
  v81 = v64;
  v82 = v63;
  v83 = v25;
  v84 = v26;
  v85 = v62;
  v86 = v61;
  v87 = v60;
  v88 = v27;
  v89 = v28;
  v90 = v24;
  v91 = v23;
  v92 = 0;
  v93 = v29;
  v94 = 1065353216;
  v30 = v76;
  v31 = *v76;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v30 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v31 = v57;
    *v76 = v57;
  }
  *(_QWORD *)&v65 = v31;
  v33 = v31 + 32;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v77;
  *(_QWORD *)(v34 + 32) = v74;
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v35 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v63 = *(_OWORD *)&v108[16];
  v64 = *(_OWORD *)v108;
  v62 = *(_OWORD *)&v108[32];
  v36 = *(_QWORD *)&v108[48];
  v37 = v109;
  BNNS.Shape.stride.getter();
  v60 = *(_OWORD *)&v108[16];
  v61 = *(_OWORD *)v108;
  v59 = *(_OWORD *)&v108[32];
  v38 = *(_QWORD *)&v108[48];
  v39 = v109;
  v40 = static Int32.bnnsDataType.getter();
  v41 = static Int32.bnnsDataType.getter();
  *(_DWORD *)v108 = 0;
  *(_DWORD *)&v108[4] = v35;
  *(_OWORD *)&v108[8] = v64;
  *(_OWORD *)&v108[24] = v63;
  *(_OWORD *)&v108[40] = v62;
  v109 = v36;
  v110 = v37;
  v111 = v61;
  v112 = v60;
  v113 = v59;
  v114 = v38;
  v115 = v39;
  v116 = v33;
  v117 = v40;
  v118 = 0;
  v119 = v41;
  v120 = 1065353216;
  v42 = v75;
  v43 = *v75;
  v44 = swift_isUniquelyReferenced_nonNull_native();
  *v42 = v43;
  if ((v44 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v43 = v58;
    *v75 = v58;
  }
  *(_QWORD *)&v64 = v43 + 32;
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v77;
  *(_QWORD *)(v45 + 32) = v74;
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v46 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v77 = *(_OWORD *)v95;
  v70 = *(_OWORD *)&v95[32];
  v71 = *(_OWORD *)&v95[16];
  v47 = *(_QWORD *)&v95[48];
  v48 = v96;
  BNNS.Shape.stride.getter();
  v62 = *(_OWORD *)&v95[16];
  v63 = *(_OWORD *)v95;
  v61 = *(_OWORD *)&v95[32];
  v50 = *(_QWORD *)&v95[48];
  v49 = v96;
  v51 = static Float.bnnsDataType.getter();
  v52 = static Float.bnnsDataType.getter();
  *(_DWORD *)v95 = 0;
  *(_DWORD *)&v95[4] = v46;
  *(_OWORD *)&v95[8] = v77;
  *(_OWORD *)&v95[24] = v71;
  *(_OWORD *)&v95[40] = v70;
  v96 = v47;
  v97 = v48;
  v98 = v63;
  v99 = v62;
  v100 = v61;
  v101 = v50;
  v102 = v49;
  v103 = v64;
  v104 = v51;
  v105 = 0;
  v106 = v52;
  v107 = 1065353216;
  v53 = v69;
  static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
  if (v53)
  {

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v54 = v68;
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v55(v73, v68);
    *v75 = v43;
    v55(v72, v54);
    *v76 = v65;
    return ((uint64_t (*)(uint64_t *, uint64_t))v55)(v66, v54);
  }
  return result;
}

uint64_t specialized closure #2 in LogitCollection.topK(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  void *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _BYTE v92[56];
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _BYTE v105[56];
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  v73 = a4;
  v74 = a5;
  *(_QWORD *)&v63 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexSet();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BNNS.Shape();
  v65 = *(_QWORD *)(v13 - 8);
  v66 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v72 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v57 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v57 - v18;
  *(_QWORD *)&v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v20 = swift_allocObject();
  v69 = xmmword_248D75A50;
  *(_OWORD *)(v20 + 16) = xmmword_248D75A50;
  IndexSet.init(integersIn:)();
  v21 = IndexSet.count.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)&v68 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v68);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v22 = *a1;
  LODWORD(v20) = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v61 = *(_OWORD *)&v105[16];
  v62 = *(_OWORD *)v105;
  v60 = *(_OWORD *)&v105[32];
  v23 = *(_QWORD *)&v105[48];
  v24 = v106;
  v64 = v19;
  BNNS.Shape.stride.getter();
  v58 = *(_OWORD *)&v105[16];
  v59 = *(_OWORD *)v105;
  v57 = *(_OWORD *)&v105[32];
  v25 = *(_QWORD *)&v105[48];
  v26 = v106;
  LODWORD(v12) = static Float.bnnsDataType.getter();
  v27 = static Float.bnnsDataType.getter();
  v75 = 0;
  v76 = v20;
  v28 = (_QWORD *)v63;
  v77 = v62;
  v78 = v61;
  v79 = v60;
  v80 = v23;
  v81 = v24;
  v82 = v59;
  v83 = v58;
  v84 = v57;
  v85 = v25;
  v86 = v26;
  v87 = v22;
  v88 = (int)v12;
  v89 = 0;
  v90 = v27;
  v91 = 1065353216;
  v29 = *(_QWORD *)v63;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v29 = v55;
    *v28 = v55;
  }
  v31 = v29 + 32;
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = v69;
  *(_QWORD *)(v32 + 32) = v73;
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v68);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v33 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v62 = *(_OWORD *)&v105[16];
  v63 = *(_OWORD *)v105;
  v61 = *(_OWORD *)&v105[32];
  v34 = *(_QWORD *)&v105[48];
  v35 = v106;
  BNNS.Shape.stride.getter();
  v59 = *(_OWORD *)&v105[16];
  v60 = *(_OWORD *)v105;
  v58 = *(_OWORD *)&v105[32];
  v36 = *(_QWORD *)&v105[48];
  v37 = v106;
  v38 = static Int32.bnnsDataType.getter();
  v39 = static Int32.bnnsDataType.getter();
  *(_DWORD *)v105 = 0;
  *(_DWORD *)&v105[4] = v33;
  *(_OWORD *)&v105[8] = v63;
  *(_OWORD *)&v105[24] = v62;
  *(_OWORD *)&v105[40] = v61;
  v106 = v34;
  v107 = v35;
  v108 = v60;
  v109 = v59;
  v110 = v58;
  v111 = v36;
  v112 = v37;
  v113 = v31;
  v114 = v38;
  v115 = 0;
  v116 = v39;
  v117 = 1065353216;
  v40 = v74;
  v41 = *v74;
  v42 = swift_isUniquelyReferenced_nonNull_native();
  *v40 = v41;
  if ((v42 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v41 = v56;
    *v74 = v56;
  }
  *(_QWORD *)&v63 = v41 + 32;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v69;
  *(_QWORD *)(v43 + 32) = v73;
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v68);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v44 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v69 = *(_OWORD *)&v92[16];
  v70 = *(_OWORD *)v92;
  v68 = *(_OWORD *)&v92[32];
  v45 = *(_QWORD *)&v92[48];
  v46 = v93;
  BNNS.Shape.stride.getter();
  v61 = *(_OWORD *)&v92[16];
  v62 = *(_OWORD *)v92;
  v60 = *(_OWORD *)&v92[32];
  v48 = *(_QWORD *)&v92[48];
  v47 = v93;
  v49 = static Float.bnnsDataType.getter();
  v50 = static Float.bnnsDataType.getter();
  *(_DWORD *)v92 = 0;
  *(_DWORD *)&v92[4] = v44;
  *(_OWORD *)&v92[8] = v70;
  *(_OWORD *)&v92[24] = v69;
  *(_OWORD *)&v92[40] = v68;
  v93 = v45;
  v94 = v46;
  v95 = v62;
  v96 = v61;
  v97 = v60;
  v98 = v48;
  v99 = v47;
  v100 = v63;
  v101 = v49;
  v102 = 0;
  v103 = v50;
  v104 = 1065353216;
  v51 = v67;
  static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
  if (v51)
  {

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v52 = v66;
    v53 = *(void (**)(char *, uint64_t))(v65 + 8);
    v53(v72, v66);
    *v74 = v41;
    v53(v71, v52);
    return ((uint64_t (*)(char *, uint64_t))v53)(v64, v52);
  }
  return result;
}

uint64_t closure #2 in LogitCollection.topK(_:)(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _BYTE v95[56];
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _BYTE v108[56];
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;

  *(_QWORD *)&v70 = a6;
  v75 = a4;
  v76 = a5;
  v77 = a3;
  v66 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexSet();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BNNS.Shape();
  v67 = *(_QWORD *)(v15 - 8);
  v68 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v73 = (char *)&v59 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v59 - v20;
  *(_QWORD *)&v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v22 = swift_allocObject();
  v71 = xmmword_248D75A50;
  *(_OWORD *)(v22 + 16) = xmmword_248D75A50;
  (*(void (**)(_QWORD, uint64_t))(a7 + 8))(v70, a7);
  v23 = IndexSet.count.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)&v70 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v24 = *v66;
  LODWORD(v11) = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v64 = *(_OWORD *)&v108[16];
  v65 = *(_OWORD *)v108;
  v63 = *(_OWORD *)&v108[32];
  v25 = *(_QWORD *)&v108[48];
  v26 = v109;
  v66 = (uint64_t *)v21;
  BNNS.Shape.stride.getter();
  v61 = *(_OWORD *)&v108[16];
  v62 = *(_OWORD *)v108;
  v60 = *(_OWORD *)&v108[32];
  v27 = *(_QWORD *)&v108[48];
  v28 = v109;
  LODWORD(v23) = static Float.bnnsDataType.getter();
  v29 = static Float.bnnsDataType.getter();
  v78 = 0;
  v79 = v11;
  v80 = v65;
  v81 = v64;
  v82 = v63;
  v83 = v25;
  v84 = v26;
  v85 = v62;
  v86 = v61;
  v87 = v60;
  v88 = v27;
  v89 = v28;
  v90 = v24;
  v91 = v23;
  v92 = 0;
  v93 = v29;
  v94 = 1065353216;
  v30 = v77;
  v31 = *v77;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v30 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v31 = v57;
    *v77 = v57;
  }
  *(_QWORD *)&v65 = v31;
  v33 = v31 + 32;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v71;
  *(_QWORD *)(v34 + 32) = v75;
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v35 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v63 = *(_OWORD *)&v108[16];
  v64 = *(_OWORD *)v108;
  v62 = *(_OWORD *)&v108[32];
  v36 = *(_QWORD *)&v108[48];
  v37 = v109;
  BNNS.Shape.stride.getter();
  v60 = *(_OWORD *)&v108[16];
  v61 = *(_OWORD *)v108;
  v59 = *(_OWORD *)&v108[32];
  v38 = *(_QWORD *)&v108[48];
  v39 = v109;
  v40 = static Int32.bnnsDataType.getter();
  v41 = static Int32.bnnsDataType.getter();
  *(_DWORD *)v108 = 0;
  *(_DWORD *)&v108[4] = v35;
  *(_OWORD *)&v108[8] = v64;
  *(_OWORD *)&v108[24] = v63;
  *(_OWORD *)&v108[40] = v62;
  v109 = v36;
  v110 = v37;
  v111 = v61;
  v112 = v60;
  v113 = v59;
  v114 = v38;
  v115 = v39;
  v116 = v33;
  v117 = v40;
  v118 = 0;
  v119 = v41;
  v120 = 1065353216;
  v42 = v76;
  v43 = *v76;
  v44 = swift_isUniquelyReferenced_nonNull_native();
  *v42 = v43;
  if ((v44 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v43 = v58;
    *v76 = v58;
  }
  *(_QWORD *)&v64 = v43 + 32;
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v71;
  *(_QWORD *)(v45 + 32) = v75;
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v70);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v46 = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v71 = *(_OWORD *)&v95[16];
  v72 = *(_OWORD *)v95;
  v70 = *(_OWORD *)&v95[32];
  v47 = *(_QWORD *)&v95[48];
  v48 = v96;
  BNNS.Shape.stride.getter();
  v62 = *(_OWORD *)&v95[16];
  v63 = *(_OWORD *)v95;
  v61 = *(_OWORD *)&v95[32];
  v49 = *(_QWORD *)&v95[48];
  v50 = v96;
  v51 = static Float.bnnsDataType.getter();
  v52 = static Float.bnnsDataType.getter();
  *(_DWORD *)v95 = 0;
  *(_DWORD *)&v95[4] = v46;
  *(_OWORD *)&v95[8] = v72;
  *(_OWORD *)&v95[24] = v71;
  *(_OWORD *)&v95[40] = v70;
  v96 = v47;
  v97 = v48;
  v98 = v63;
  v99 = v62;
  v100 = v61;
  v101 = v49;
  v102 = v50;
  v103 = v64;
  v104 = v51;
  v105 = 0;
  v106 = v52;
  v107 = 1065353216;
  v53 = v69;
  static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
  if (v53)
  {

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v54 = v68;
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v55(v74, v68);
    *v76 = v43;
    v55(v73, v54);
    *v77 = v65;
    return ((uint64_t (*)(uint64_t *, uint64_t))v55)(v66, v54);
  }
  return result;
}

void LogitCollection.topP(_:)()
{
  uint64_t v0;
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::tuple_OpaquePointer_OpaquePointer v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, _QWORD);
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_12_4();
  v3 = v2;
  v4 = OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_3_2();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_28_3();
  if (v3 == 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = OUTLINED_FUNCTION_3_8();
    *(_OWORD *)(v10 + 16) = xmmword_248D75A50;
    v11 = OUTLINED_FUNCTION_110();
    *(_QWORD *)(v10 + 32) = v12(v11);
LABEL_27:
    OUTLINED_FUNCTION_4_9();
    return;
  }
  if (v3 == 1.0)
  {
    v13 = OUTLINED_FUNCTION_110();
    v14(v13);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    v15 = dispatch thunk of Collection.count.getter();
    if (v15)
    {
      v16 = v15;
      v33 = v1;
      v34 = v9;
      v35 = v4;
      v37 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      v17 = v37;
      dispatch thunk of Collection.startIndex.getter();
      if (v16 < 0)
      {
        __break(1u);
        goto LABEL_7;
      }
      do
      {
        v28 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
        v30 = *v29;
        OUTLINED_FUNCTION_76_0((uint64_t)&v36, v28);
        v37 = v17;
        v31 = *(_QWORD *)(v17 + 16);
        if (v31 >= *(_QWORD *)(v17 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v17 = v37;
        }
        *(_QWORD *)(v17 + 16) = v31 + 1;
        *(_QWORD *)(v17 + 8 * v31 + 32) = v30;
        dispatch thunk of Collection.formIndex(after:)();
        --v16;
      }
      while (v16);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v35);
      v9 = v34;
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v8);
    goto LABEL_27;
  }
LABEL_7:
  OUTLINED_FUNCTION_110();
  v18 = LogitCollection.applySoftmax()();
  v19 = *((_QWORD *)v18._1._rawValue + 2);
  if (!v19)
  {
LABEL_20:
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_42();
    goto LABEL_27;
  }
  v20 = *((_QWORD *)v18._1._rawValue + 4);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v22 = v21;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = v23 + 1;
  if (v23 >= *(_QWORD *)(v21 + 24) >> 1)
  {
LABEL_31:
    OUTLINED_FUNCTION_47_3();
    v22 = v32;
  }
  *(_QWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 8 * v23 + 32) = v20;
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v20 < *((_QWORD *)v18._0._rawValue + 2))
  {
    v25 = *((float *)v18._0._rawValue + v20 + 8) + 0.0;
    if (v25 < v3)
    {
      v20 = 0;
      v23 += 5;
      --v19;
      while (v19 != v20)
      {
        if (v20 + 1 >= *((_QWORD *)v18._1._rawValue + 2))
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        v26 = *((_QWORD *)v18._1._rawValue + v20 + 5);
        v24 = v23 - 3;
        if (v23 - 4 >= *(_QWORD *)(v22 + 24) >> 1)
        {
          OUTLINED_FUNCTION_47_3();
          v22 = v27;
        }
        *(_QWORD *)(v22 + 16) = v24;
        *(_QWORD *)(v22 + 8 * v23) = v26;
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_29;
        if (v26 >= *((_QWORD *)v18._0._rawValue + 2))
          goto LABEL_30;
        v25 = v25 + *((float *)v18._0._rawValue + v26 + 8);
        ++v23;
        ++v20;
        if (v25 >= v3)
          goto LABEL_20;
      }
    }
    goto LABEL_20;
  }
  __break(1u);
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall LogitCollection.applySoftmax()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t (*v23)(uint64_t, _QWORD);
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  Swift::tuple_OpaquePointer_OpaquePointer result;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  void *v43;

  v6 = v1;
  v7 = v0;
  v8 = OUTLINED_FUNCTION_80_0();
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_45_0();
  v10 = OUTLINED_FUNCTION_3_2();
  v37 = *(_QWORD *)(v10 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64_3();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v31 - v13;
  OUTLINED_FUNCTION_111_0();
  v39 = v7;
  v40 = v6;
  v41 = v2;
  v35 = OUTLINED_FUNCTION_70_2((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in LogitCollection.topK(_:), (uint64_t)v38);
  v15 = v14;
  v16 = v6;
  v34 = *(void (**)(char *, uint64_t))(v37 + 8);
  v34(v15, v10);
  v36 = v7;
  v37 = v2;
  OUTLINED_FUNCTION_111_0();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  v17 = dispatch thunk of Collection.count.getter();
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v19 = v17;
    v31[1] = v3;
    v43 = (void *)MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_56_3();
    v20 = (uint64_t)v43;
    v21 = (void *)dispatch thunk of Collection.startIndex.getter();
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_12;
    }
    v31[0] = v16;
    do
    {
      v23 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
      v25 = *v24;
      OUTLINED_FUNCTION_76_0((uint64_t)v42, v23);
      v43 = (void *)v20;
      v26 = *(_QWORD *)(v20 + 16);
      if (v26 >= *(_QWORD *)(v20 + 24) >> 1)
      {
        OUTLINED_FUNCTION_41_3();
        v20 = (uint64_t)v43;
      }
      *(_QWORD *)(v20 + 16) = v26 + 1;
      *(_QWORD *)(v20 + 8 * v26 + 32) = v25;
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
    }
    while (v19);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v4, v33);
    v18 = (uint64_t)v43;
    v16 = v31[0];
  }
  v34(v5, v10);
  v43 = (void *)v18;
  v27 = (_QWORD *)v35;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v27 = v29;
  }
  v28 = v27[2];
  v42[0] = v27 + 4;
  v42[1] = v28;
  closure #3 in LogitCollection.applySoftmax()((uint64_t)v42, v37, (uint64_t *)&v43, v36, v16);
  v22 = v43;
  v21 = v27;
LABEL_12:
  result._1._rawValue = v22;
  result._0._rawValue = v21;
  return result;
}

uint64_t closure #3 in LogitCollection.applySoftmax()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  const float *v17;
  vDSP_Length v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _BYTE v48[56];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  const float *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;

  *(_QWORD *)&v43 = a4;
  v61 = a3;
  *(_QWORD *)&v42 = a2;
  v46 = type metadata accessor for BNNS.ActivationFunction();
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v44 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BNNS.DataLayout?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexSet();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for BNNS.Shape();
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(const float **)a1;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = specialized static vDSP.maximum<A>(_:)(*(const float **)a1, v18);
  specialized static vDSP.add<A, B>(_:_:result:)(v17, v18, a1, -v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_248D75A50;
  (*(void (**)(_QWORD, uint64_t))(a5 + 8))(v43, a5);
  v21 = IndexSet.count.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)(v20 + 32) = v21;
  v22 = type metadata accessor for BNNS.DataLayout();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v22);
  BNNS.Shape.init(_:dataLayout:stride:)();
  v23 = *(const float **)a1;
  LODWORD(v11) = BNNS.Shape.layout.getter();
  BNNS.Shape.size.getter();
  v43 = *(_OWORD *)v48;
  v42 = *(_OWORD *)&v48[16];
  v41 = *(_OWORD *)&v48[32];
  v24 = *(_QWORD *)&v48[48];
  v25 = v49;
  BNNS.Shape.stride.getter();
  v40 = *(_OWORD *)v48;
  v39 = *(_OWORD *)&v48[16];
  v38 = *(_OWORD *)&v48[32];
  v26 = *(_QWORD *)&v48[48];
  v27 = v49;
  LODWORD(v21) = static Float.bnnsDataType.getter();
  v28 = static Float.bnnsDataType.getter();
  *(_DWORD *)v48 = 0;
  *(_DWORD *)&v48[4] = v11;
  *(_OWORD *)&v48[8] = v43;
  *(_OWORD *)&v48[24] = v42;
  *(_OWORD *)&v48[40] = v41;
  v49 = v24;
  v50 = v25;
  v29 = v44;
  v51 = v40;
  v52 = v39;
  v53 = v38;
  v54 = v26;
  v55 = v27;
  v56 = v23;
  v30 = (uint64_t *)v45;
  v57 = v21;
  v31 = v46;
  v58 = 0;
  v59 = v28;
  v60 = 1065353216;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, *MEMORY[0x24BEDF7D8], v46);
  v32 = v47;
  static BNNS.applyActivation(activation:input:output:batchSize:filterParameters:)();
  if (!v32)
  {
    ((void (*)(char *, uint64_t))v30[1])(v29, v31);
    v30 = v61;
    v31 = *v61;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v30 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v31 = v35;
      *v30 = v35;
    }
    if (*(_QWORD *)a1)
    {
      vDSP_vsorti(*(const float **)a1, (vDSP_Length *)(v31 + 32), 0, *(_QWORD *)(v31 + 16), -1);
      *v30 = v31;
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, v37);
    }
    __break(1u);
  }

  ((void (*)(char *, uint64_t))v30[1])(v29, v31);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void GreedySampling.__allocating_init(generator:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_28_3();
  (*(void (**)(uint64_t))(v6 + 16))(v2);
  specialized GreedySampling.__allocating_init(generator:)(v2, v1, v3, v4);
  v7 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_69_2(v7);
  OUTLINED_FUNCTION_5_0();
}

uint64_t GreedySampling.init(generator:)(__int128 *a1)
{
  uint64_t v1;

  outlined init with take of LogitCollection(a1, v1 + 16);
  return v1;
}

uint64_t outlined destroy of IndexingIterator<IndexSet>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t GreedySampling.pickToken(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  v1 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v2 = OUTLINED_FUNCTION_104_0();
  return v3(v2, v1);
}

void GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;

  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v5 = OUTLINED_FUNCTION_104_0();
  v7 = v6(v5, v4);
  v8 = v7;
  if (*(_QWORD *)(a2 + 16))
  {
    specialized Set.contains(_:)(v7, a2);
    if ((v9 & 1) == 0)
    {
      v10 = a1[3];
      v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v10, v11);
      MEMORY[0x24BDAC7A8](v12);
      OUTLINED_FUNCTION_67_1();
      *(_QWORD *)(v13 - 16) = a1;
      specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:), v14, a2);
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v17 = *(float *)(v15 + 40);
        v18 = v16 - 1;
        if (v18)
        {
          v19 = (float *)(v15 + 56);
          do
          {
            v20 = *v19;
            v19 += 4;
            v21 = v20;
            if (v17 < v20)
              v17 = v21;
            --v18;
          }
          while (v18);
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_20_4();
}

uint64_t closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)@<X0>(Swift::Int *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Bool v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v6 = type metadata accessor for IndexSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a2[3];
  v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v13 = IndexSet.contains(_:)(v10);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v13)
  {
    v15 = a2[3];
    v16 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v15);
    result = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v16 + 16))(v10, v15, v16);
  }
  else
  {
    v10 = 0;
    v17 = 0;
  }
  *(_QWORD *)a3 = v10;
  *(_DWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 12) = !v13;
  return result;
}

void GreedySampling.makePresampler()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ArgmaxPresampler;
  *(_QWORD *)(a1 + 32) = &protocol witness table for ArgmaxPresampler;
}

uint64_t GreedySampling.pickToken(targetLogits:draftLogits:draftTokens:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  float *rawValue;
  float *v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t result;
  float v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  float v33;

  v4 = v3;
  if (one-time initialization token for speculativeDecode != -1)
LABEL_41:
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.speculativeDecode);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)OUTLINED_FUNCTION_68_0();
    *(_WORD *)v11 = 0;
    OUTLINED_FUNCTION_86_0(&dword_248CAA000, v9, v10, "Acceptance threshold is unused for speculative sampling.", v11);
    OUTLINED_FUNCTION_0_1();
  }

  if (*(_QWORD *)(a3 + 16))
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)a2, *(_QWORD *)(a2 + 24));
    rawValue = (float *)LogitCollection.applySoftmax()()._0._rawValue;
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v13 = (float *)LogitCollection.applySoftmax()()._0._rawValue;
    swift_bridgeObjectRelease();
    v14 = 0;
    v15 = 0;
    v16 = a3 + 56;
    v17 = 1 << *(_BYTE *)(a3 + 32);
    v18 = -1;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    v19 = v18 & *(_QWORD *)(a3 + 56);
    v20 = (unint64_t)(v17 + 63) >> 6;
    v21 = 0.0;
LABEL_8:
    v22 = v21;
    a2 = v14;
    while (1)
    {
      if (v19)
      {
        v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v24 = v23 | (v15 << 6);
      }
      else
      {
        v25 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_39;
        if (v25 >= v20)
        {
LABEL_29:
          result = swift_bridgeObjectRelease();
          if (a2 >= *((_QWORD *)v13 + 2))
          {
            __break(1u);
          }
          else
          {
            v29 = v13[a2 + 8];
            OUTLINED_FUNCTION_42();
            if (v22 >= v29)
            {
              OUTLINED_FUNCTION_7_9();
              __swift_mutable_project_boxed_opaque_existential_1(v4 + 16, *(_QWORD *)(v4 + 40));
              lazy protocol witness table accessor for type Float and conformance Float();
              lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              static BinaryFloatingPoint<>.random<A>(in:using:)();
              swift_endAccess();
              if (v33 >= (float)(v29 / v22))
                return OUTLINED_FUNCTION_31_3();
            }
            return a2;
          }
          return result;
        }
        v26 = *(_QWORD *)(v16 + 8 * v25);
        ++v15;
        if (!v26)
        {
          v15 = v25 + 1;
          if (v25 + 1 >= v20)
            goto LABEL_29;
          v26 = *(_QWORD *)(v16 + 8 * v15);
          if (!v26)
          {
            v15 = v25 + 2;
            if (v25 + 2 >= v20)
              goto LABEL_29;
            v26 = *(_QWORD *)(v16 + 8 * v15);
            if (!v26)
            {
              v27 = v25 + 3;
              if (v27 >= v20)
                goto LABEL_29;
              v26 = *(_QWORD *)(v16 + 8 * v27);
              if (!v26)
              {
                while (1)
                {
                  v15 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_40;
                  if (v15 >= v20)
                    goto LABEL_29;
                  v26 = *(_QWORD *)(v16 + 8 * v15);
                  ++v27;
                  if (v26)
                    goto LABEL_24;
                }
              }
              v15 = v27;
            }
          }
        }
LABEL_24:
        v19 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v15 << 6);
      }
      v14 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v24);
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v14 >= *((_QWORD *)rawValue + 2))
        goto LABEL_38;
      v21 = rawValue[v14 + 8];
      if (v22 < v21)
        goto LABEL_8;
    }
  }
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)OUTLINED_FUNCTION_68_0();
    *(_WORD *)v32 = 0;
    OUTLINED_FUNCTION_86_0(&dword_248CAA000, v30, v31, "No draft logits supplied for speculative sampling; performing greedy sampling instead.  This is a logic error, not a user error.",
      v32);
    OUTLINED_FUNCTION_0_1();
  }

  return OUTLINED_FUNCTION_31_3();
}

uint64_t GreedySampling.deinit()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_69_2(v0 + 16);
}

uint64_t GreedySampling.__deallocating_deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_69_2(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance GreedySampling(_QWORD *a1)
{
  return GreedySampling.pickToken(_:)(a1);
}

void protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance GreedySampling(_QWORD *a1, uint64_t a2)
{
  GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, a2);
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance GreedySampling(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return GreedySampling.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3);
}

void protocol witness for TokenSampling.makePresampler() in conformance GreedySampling(uint64_t a1@<X8>)
{
  GreedySampling.makePresampler()(a1);
}

uint64_t TopK.__allocating_init(k:temperature:randomSeed:)(void *a1, uint64_t a2, char a3, double a4)
{
  id v6;
  uint64_t v7;
  __int128 v9;
  ValueMetadata *v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    v6 = 0;
  else
    v6 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a2);
  v10 = &type metadata for SeedableRandomNumberGenerator;
  v11 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(_QWORD *)&v9 = v6;
  v7 = OUTLINED_FUNCTION_2_0();
  TopK.init(k:temperature:generator:)(a1, &v9, a4);
  return v7;
}

uint64_t TopK.__allocating_init(k:temperature:generator:)(void *a1, __int128 *a2, double a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_2_0();
  TopK.init(k:temperature:generator:)(a1, a2, a3);
  return v6;
}

uint64_t TopK.init(k:temperature:generator:)(void *a1, __int128 *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;

  v4 = v3;
  type metadata accessor for TokenGenerationError.Context();
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_26_3();
  if (a3 > 0.0 && a3 <= 2.0)
  {
    *(_QWORD *)(v4 + 16) = a1;
    v18 = a3;
    *(float *)(v4 + 24) = v18;
    outlined init with take of LogitCollection(a2, v4 + 32);
  }
  else
  {
    if (one-time initialization token for device != -1)
      swift_once();
    v10 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v10, (uint64_t)static Log.device);
    v11 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_39_2(v11))
    {
      *(_DWORD *)OUTLINED_FUNCTION_121() = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_18_5(&dword_248CAA000, v12, v13, "Invalid top-k temperature value %f, should be between (0.0, 2.0]");
      OUTLINED_FUNCTION_32_3();
    }

    _StringGuts.grow(_:)(50);
    v14._object = (void *)0x8000000248D7F490;
    v14._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v14);
    Double.write<A>(to:)();
    OUTLINED_FUNCTION_82_0(0xD00000000000001ELL, (uint64_t)", should be between (0.0, 2.0]");
    OUTLINED_FUNCTION_85_0();
    type metadata accessor for TokenGenerationError();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
    v15 = OUTLINED_FUNCTION_54_2();
    v17 = OUTLINED_FUNCTION_35_3(v15, v16);
    OUTLINED_FUNCTION_51_3(v17, *MEMORY[0x24BEB8068]);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    OUTLINED_FUNCTION_34_2();
    swift_deallocPartialClassInstance();
  }
  return v4;
}

uint64_t TopK.pickToken(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 40))(*(_QWORD *)(v1 + 16), v2, v3);
  OUTLINED_FUNCTION_65_2((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), v4, v5, v6, v7, v8, v9, v10, v12);
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_20_2();
  return v1 + 32;
}

void TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_100();
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 40))(*(_QWORD *)(v0 + 16), v2, v3);
  OUTLINED_FUNCTION_30_3();
  v4 = OUTLINED_FUNCTION_57_0();
  specialized Set.init<A>(_:)(v4);
  OUTLINED_FUNCTION_18_3();
  v5 = OUTLINED_FUNCTION_78_0((uint64_t)partial apply for closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:));
  OUTLINED_FUNCTION_89_0(v5);
  OUTLINED_FUNCTION_49_2();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  OUTLINED_FUNCTION_90_0();
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = OUTLINED_FUNCTION_58_0();
    MEMORY[0x24BDAC7A8](v6);
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_106_0((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), v7);
    OUTLINED_FUNCTION_7_9();
    OUTLINED_FUNCTION_62_3();
    OUTLINED_FUNCTION_42_3();
    OUTLINED_FUNCTION_49_2();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_49_2();
    MEMORY[0x24BDAC7A8](v8);
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_101_0((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), v9);
    OUTLINED_FUNCTION_7_9();
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_42_3();
    OUTLINED_FUNCTION_58_0();
  }
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_20_4();
}

void TopK.makePresampler()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _UNKNOWN **v3;
  _UNKNOWN **v4;
  ValueMetadata *v5;
  BOOL v6;
  ValueMetadata *v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = &protocol witness table for ArgmaxPresampler;
  v4 = &protocol witness table for BasicLogitPresampler;
  v5 = &type metadata for BasicLogitPresampler;
  if (v2 == 2)
  {
    v5 = &type metadata for TopK2Presampler;
    v4 = &protocol witness table for TopK2Presampler;
  }
  v6 = v2 == 1;
  if (v2 == 1)
    v7 = &type metadata for ArgmaxPresampler;
  else
    v7 = v5;
  if (!v6)
    v3 = v4;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v3;
}

uint64_t TopK.pickToken(targetLogits:draftLogits:draftTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TopK.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3, "Speculative sampling is not implemented for TopK sampling.  Resorting to normal topK sampling.", (uint64_t (*)(uint64_t))TopK.pickToken(_:));
}

uint64_t TopK.deinit()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_69_2(v0 + 32);
}

uint64_t TopK.__deallocating_deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_69_2(v0 + 32);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance TopK(_QWORD *a1)
{
  return TopK.pickToken(_:)(a1);
}

void protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance TopK()
{
  TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)();
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance TopK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TopK.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3);
}

void protocol witness for TokenSampling.makePresampler() in conformance TopK(uint64_t a1@<X8>)
{
  TopK.makePresampler()(a1);
}

uint64_t NucleusSampling.__allocating_init(p:temperature:randomSeed:)(uint64_t a1, char a2, double a3, double a4)
{
  id v6;
  uint64_t v7;
  __int128 v9;
  ValueMetadata *v10;
  unint64_t v11;

  if ((a2 & 1) != 0)
    v6 = 0;
  else
    v6 = objc_msgSend(objc_allocWithZone((Class)TGIMersenneTwisterEngine), sel_initWithSeed_, a1);
  v10 = &type metadata for SeedableRandomNumberGenerator;
  v11 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
  *(_QWORD *)&v9 = v6;
  v7 = OUTLINED_FUNCTION_2_0();
  NucleusSampling.init(p:temperature:generator:)(&v9, a3, a4);
  return v7;
}

uint64_t NucleusSampling.__allocating_init(p:temperature:generator:)(__int128 *a1, double a2, double a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_2_0();
  NucleusSampling.init(p:temperature:generator:)(a1, a2, a3);
  return v6;
}

float *NucleusSampling.init(p:temperature:generator:)(__int128 *a1, double a2, double a3)
{
  float *v3;
  uint64_t v7;
  uint64_t v9;
  os_log_type_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  const char *v15;
  uint64_t v17;
  os_log_type_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;

  type metadata accessor for TokenGenerationError.Context();
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_26_3();
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    if (a3 > 0.0 && a3 <= 2.0)
    {
      v26 = a2;
      v27 = a3;
      v3[4] = v26;
      v3[5] = v27;
      outlined init with take of LogitCollection(a1, (uint64_t)(v3 + 6));
      return v3;
    }
    if (one-time initialization token for device != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v17, (uint64_t)static Log.device);
    v18 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_39_2(v18))
    {
      v19 = (float *)OUTLINED_FUNCTION_121();
      OUTLINED_FUNCTION_93_0(v19, 3.852e-34);
      OUTLINED_FUNCTION_71_1();
      OUTLINED_FUNCTION_18_5(&dword_248CAA000, v20, v21, "Invalid nucleous sampling temperature value %f, should be between (0.0, 2.0]");
      OUTLINED_FUNCTION_32_3();
    }

    _StringGuts.grow(_:)(50);
    OUTLINED_FUNCTION_82_0(0xD000000000000012, (uint64_t)"temperature value ");
    Double.write<A>(to:)();
    v15 = ", should be between (0.0, 2.0]";
  }
  else
  {
    if (one-time initialization token for device != -1)
      swift_once();
    v9 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v9, (uint64_t)static Log.device);
    v10 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_39_2(v10))
    {
      v11 = (float *)OUTLINED_FUNCTION_121();
      OUTLINED_FUNCTION_93_0(v11, 3.852e-34);
      OUTLINED_FUNCTION_71_1();
      OUTLINED_FUNCTION_18_5(&dword_248CAA000, v12, v13, "Invalid nucleous sampling p value %f, should be between [0.0, 1.0]");
      OUTLINED_FUNCTION_32_3();
    }

    _StringGuts.grow(_:)(40);
    v14._countAndFlagsBits = 0x2065756C61762070;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    Double.write<A>(to:)();
    v15 = ", should be between [0.0, 1.0]";
  }
  v22._object = (void *)((unint64_t)(v15 - 32) | 0x8000000000000000);
  v22._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v22);
  OUTLINED_FUNCTION_85_0();
  type metadata accessor for TokenGenerationError();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  v23 = OUTLINED_FUNCTION_54_2();
  v25 = OUTLINED_FUNCTION_35_3(v23, v24);
  OUTLINED_FUNCTION_51_3(v25, *MEMORY[0x24BEB8068]);
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_34_2();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t NucleusSampling.pickToken(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_36_3(a1);
  OUTLINED_FUNCTION_65_2((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), v2, v3, v4, v5, v6, v7, v8, v10);
  OUTLINED_FUNCTION_7_9();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_20_2();
  return v1 + 24;
}

void NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_100();
  OUTLINED_FUNCTION_36_3(v1);
  OUTLINED_FUNCTION_30_3();
  v2 = OUTLINED_FUNCTION_57_0();
  specialized Set.init<A>(_:)(v2);
  OUTLINED_FUNCTION_18_3();
  v3 = OUTLINED_FUNCTION_78_0((uint64_t)partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:));
  OUTLINED_FUNCTION_89_0(v3);
  OUTLINED_FUNCTION_49_2();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  OUTLINED_FUNCTION_90_0();
  if (*(_QWORD *)(v0 + 16))
  {
    v4 = OUTLINED_FUNCTION_58_0();
    MEMORY[0x24BDAC7A8](v4);
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_106_0((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #2 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:), v5);
    OUTLINED_FUNCTION_7_9();
    OUTLINED_FUNCTION_62_3();
    OUTLINED_FUNCTION_42_3();
    OUTLINED_FUNCTION_49_2();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_49_2();
    MEMORY[0x24BDAC7A8](v6);
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_101_0((void (*)(int *__return_ptr, uint64_t *))partial apply for closure #1 in TopK.pickToken(_:), v7);
    OUTLINED_FUNCTION_7_9();
    OUTLINED_FUNCTION_61_3();
    OUTLINED_FUNCTION_42_3();
    OUTLINED_FUNCTION_58_0();
  }
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_20_4();
}

BOOL closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1, _QWORD *a2, float a3)
{
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _BOOL8 v12;
  _QWORD v14[5];

  type metadata accessor for IndexSet();
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_26_3();
  v7 = *a1;
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  LOBYTE(a1) = IndexSet.contains(_:)(v7);
  OUTLINED_FUNCTION_34_2();
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, (uint64_t)v14);
  if ((a1 & 1) != 0)
  {
    v10 = v14[4];
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    OUTLINED_FUNCTION_107_0(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
    v12 = v11 > a3;
  }
  else
  {
    v12 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

uint64_t closure #1 in TopK.pickToken(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v4 = *a1;
  v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  result = OUTLINED_FUNCTION_107_0(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  *a3 = v7;
  return result;
}

uint64_t NucleusSampling.pickToken(targetLogits:draftLogits:draftTokens:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TopK.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3, "Speculative sampling is not implemented for nucleus sampling.  Resorting to normal nucleus sampling.", (uint64_t (*)(uint64_t))NucleusSampling.pickToken(_:));
}

uint64_t TopK.pickToken(targetLogits:draftLogits:draftTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  if (one-time initialization token for device != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.device);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_68_0();
    *(_WORD *)v10 = 0;
    OUTLINED_FUNCTION_86_0(&dword_248CAA000, v8, v9, a4, v10);
    OUTLINED_FUNCTION_0_1();
  }

  return a5(a1);
}

uint64_t NucleusSampling.deinit()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_69_2(v0 + 24);
}

uint64_t NucleusSampling.__deallocating_deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_69_2(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenSampling.pickToken(_:) in conformance NucleusSampling(_QWORD *a1)
{
  return NucleusSampling.pickToken(_:)(a1);
}

void protocol witness for TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:) in conformance NucleusSampling()
{
  NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)();
}

uint64_t protocol witness for TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:) in conformance NucleusSampling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NucleusSampling.pickToken(targetLogits:draftLogits:draftTokens:)(a1, a2, a3);
}

uint64_t SparseLogitCollection.indexSet.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_3_2();
  return OUTLINED_FUNCTION_21_4(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t SparseLogitCollection.indexSet.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_3_2();
  return OUTLINED_FUNCTION_21_4(v1, a1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 40));
}

uint64_t (*SparseLogitCollection.indexSet.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SparseLogitCollection.subscript.getter(Swift::Int a1)
{
  Swift::Bool v1;
  float result;

  v1 = IndexSet.contains(_:)(a1);
  result = -65504.0;
  if (v1)
    return 0.0;
  return result;
}

void protocol witness for LogitCollection.withContiguousStorageIfAvailable<A>(_:) in conformance SparseLogitCollection(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  LogitCollection.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

void protocol witness for LogitCollection.topK(_:) in conformance MaskedLanguageModel.MaskedLogitCollection()
{
  specialized LogitCollection.topK(_:)();
}

void protocol witness for LogitCollection.topK(_:) in conformance MaskedLanguageModel.SingleLogitCollection()
{
  specialized LogitCollection.topK(_:)();
}

void protocol witness for LogitCollection.topK(_:) in conformance PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  specialized LogitCollection.topK(_:)();
}

void protocol witness for LogitCollection.topK(_:) in conformance PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  specialized LogitCollection.topK(_:)();
}

uint64_t protocol witness for LogitCollection.argmax() in conformance PromptLookupLanguageModel.OneTokenLogitCollection()
{
  uint64_t *v0;

  return specialized LogitCollection.argmax()(*v0);
}

uint64_t protocol witness for LogitCollection.topK(_:) in conformance PromptLookupLanguageModel.OneTokenLogitCollection(uint64_t a1)
{
  uint64_t *v1;

  return specialized LogitCollection.topK(_:)(a1, *v1);
}

void protocol witness for LogitCollection.topK(_:) in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  specialized LogitCollection.topK(_:)();
}

void partial apply for closure #1 in LogitCollection.topK(_:)(_QWORD *a1@<X0>, float *a2@<X8>)
{
  partial apply for closure #1 in LogitCollection.topK(_:)(a1, a2);
}

{
  uint64_t v2;

  *a2 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 24) + 16))(*a1, *(_QWORD *)(v2 + 16));
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_94_0();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized closure #1 in static vDSP.add<A, B>(_:_:result:)(float **a1, const float *a2, int a3, vDSP_Length a4, float a5)
{
  closure #1 in closure #1 in static vDSP.add<A, B>(_:_:result:)(a2, a3, a1, a4, a5);
}

void closure #1 in closure #1 in static vDSP.add<A, B>(_:_:result:)(const float *a1, int a2, float **a3, vDSP_Length __N, float a5)
{
  float __B;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  __B = a5;
  if (!a1)
    goto LABEL_6;
  if (!*a3)
    goto LABEL_7;
  if ((__N & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  vDSP_vsadd(a1, 1, &__B, *a3, 1, __N);
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

void specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a2 + 32);
  v3 = (void *)((unint64_t)((1 << v2) + 63) >> 6);
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
      goto LABEL_5;
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_43_3();
  swift_release();
  if (v3)
  {
    swift_willThrow();

    __break(1u);
LABEL_5:
    swift_slowAlloc();
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_43_3();
    OUTLINED_FUNCTION_104_0();
    swift_release();
    if (!v3)
      OUTLINED_FUNCTION_0_1();
    OUTLINED_FUNCTION_102_0();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_5_0();
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v45;
  int64_t v46;

  v45 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v16 >= v12)
          goto LABEL_60;
        v17 = *(_QWORD *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_60;
          v17 = *(_QWORD *)(v8 + 8 * v7);
          if (!v17)
          {
            v7 = v16 + 2;
            if (v16 + 2 >= v12)
              goto LABEL_60;
            v17 = *(_QWORD *)(v8 + 8 * v7);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v12)
              {
LABEL_60:
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v45, a2, v6, a3);
              }
              v17 = *(_QWORD *)(v8 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v7 >= v12)
                    goto LABEL_60;
                  v17 = *(_QWORD *)(v8 + 8 * v7);
                  ++v18;
                  if (v17)
                    goto LABEL_21;
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              v7 = v18;
            }
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v15);
      result = static Hasher._hash(seed:_:)();
      v20 = -1 << *(_BYTE *)(a3 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      v23 = 1 << v21;
      if (((1 << v21) & *(_QWORD *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        v24 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v24 + 8 * v21) != v19)
        {
          for (i = v21 + 1; ; i = v26 + 1)
          {
            v26 = i & ~v20;
            if (((*(_QWORD *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
              goto LABEL_6;
            if (*(_QWORD *)(v24 + 8 * v26) == v19)
              break;
          }
          v22 = v26 >> 6;
          v23 = 1 << v26;
        }
        v45[v22] |= v23;
        v27 = __OFADD__(v6++, 1);
        if (v27)
          break;
      }
    }
    __break(1u);
  }
  v28 = 0;
  v29 = a3 + 56;
  v30 = 1 << *(_BYTE *)(a3 + 32);
  if (v30 < 64)
    v31 = ~(-1 << v30);
  else
    v31 = -1;
  v32 = v31 & *(_QWORD *)(a3 + 56);
  v46 = (unint64_t)(v30 + 63) >> 6;
  v33 = a4 + 56;
  while (v32)
  {
    v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    v35 = v34 | (v28 << 6);
LABEL_52:
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v35);
    result = static Hasher._hash(seed:_:)();
    v40 = -1 << *(_BYTE *)(a4 + 32);
    v41 = result & ~v40;
    if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
    {
      v42 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v42 + 8 * v41) == v39)
      {
LABEL_57:
        *(unint64_t *)((char *)v45 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v43 = ~v40;
        while (1)
        {
          v41 = (v41 + 1) & v43;
          if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
            break;
          if (*(_QWORD *)(v42 + 8 * v41) == v39)
            goto LABEL_57;
        }
      }
    }
  }
  v36 = v28 + 1;
  if (__OFADD__(v28, 1))
    goto LABEL_62;
  if (v36 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v36);
  ++v28;
  if (v37)
    goto LABEL_51;
  v28 = v36 + 1;
  if (v36 + 1 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v28);
  if (v37)
    goto LABEL_51;
  v28 = v36 + 2;
  if (v36 + 2 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_51:
    v32 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_52;
  }
  v38 = v36 + 3;
  if (v38 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v38);
  if (v37)
  {
    v28 = v38;
    goto LABEL_51;
  }
  while (1)
  {
    v28 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v28 >= v46)
      goto LABEL_60;
    v37 = *(_QWORD *)(v29 + 8 * v28);
    ++v38;
    if (v37)
      goto LABEL_51;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(uint64_t *);
  char v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[2];

  v5 = (uint64_t (*)(uint64_t *))isStackAllocationSafe;
  v12[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a3 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v8 = (_QWORD *)((char *)v12 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v8);
    v9 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v8, v7, a3, v5);
    swift_release();
    if (v3)
      swift_willThrow();
  }
  else
  {
    v10 = (_QWORD *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v7, v10);
    v9 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v10, v7, a3, v5);
    swift_release();
    MEMORY[0x2495AAF60](v10, -1, -1);
  }
  return v9;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v4;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = (unint64_t *)result;
  v7 = 0;
  v8 = 0;
  v9 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
LABEL_4:
  v21 = v7;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v8 << 6);
LABEL_18:
    v22 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15);
    result = a4(&v22);
    if (v4)
      return result;
    if ((result & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v7 = v21 + 1;
      if (!__OFADD__(v21, 1))
        goto LABEL_4;
      __break(1u);
LABEL_28:
      swift_retain();
      return specialized _NativeSet.extractSubset(using:count:)(v20, a2, v21, a3);
    }
  }
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v8 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_17:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_18;
  }
  v18 = v8 + 1;
  if (v8 + 1 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v8 + 2;
  if (v8 + 2 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v8 + 3;
  if (v8 + 3 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v8 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized GreedySampling.__allocating_init(generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  v7 = swift_allocObject();
  outlined init with take of LogitCollection(&v9, v7 + 16);
  return v7;
}

uint64_t partial apply for closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in GreedySampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, *(_QWORD **)(v2 + 16), a2);
}

BOOL partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1)
{
  uint64_t v1;

  return closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1, *(_QWORD **)(v1 + 16), *(float *)(v1 + 24));
}

uint64_t partial apply for closure #2 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)()
{
  uint64_t *v0;
  _QWORD *v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  return closure #1 in TopK.pickToken(_:)(v0, v1, v2);
}

uint64_t dispatch thunk of LogitCollection.indexSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LogitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of LogitCollection.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of LogitCollection.argmax()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LogitCollection.topK(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TokenSampling.pickToken(targetLogits:draftLogits:draftTokens:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of TokenSampling.makePresampler()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for GreedySampling()
{
  return objc_opt_self();
}

uint64_t method lookup function for GreedySampling()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GreedySampling.__allocating_init(generator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for TopK()
{
  return objc_opt_self();
}

uint64_t method lookup function for TopK()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TopK.__allocating_init(k:temperature:generator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for NucleusSampling()
{
  return objc_opt_self();
}

uint64_t method lookup function for NucleusSampling()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NucleusSampling.__allocating_init(p:temperature:generator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t initializeBufferWithCopyOfBuffer for SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexSet();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SparseLogitCollection(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SparseLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D10348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_3_2();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SparseLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D10384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_3_2();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SparseLogitCollection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SparseLogitCollection;
  if (!type metadata singleton initialization cache for SparseLogitCollection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SparseLogitCollection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for SeedableRandomNumberGenerator(id *a1)
{

}

void **assignWithCopy for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for SeedableRandomNumberGenerator(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SeedableRandomNumberGenerator(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeedableRandomNumberGenerator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeedableRandomNumberGenerator()
{
  return &type metadata for SeedableRandomNumberGenerator;
}

void partial apply for specialized closure #1 in LogitCollection.topK(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  _QWORD *v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, _QWORD, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  _QWORD *v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, _QWORD, _BYTE *))specialized Array.subscript.getter, v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  _DWORD *v2;

  OUTLINED_FUNCTION_15_5();
  specialized closure #1 in LogitCollection.topK(_:)(v0, v1, (void (*)(_QWORD, uint64_t, _BYTE *))specialized closure #1 in LogitCollection.topK(_:), v2);
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
  }
  return result;
}

void specialized closure #1 in LogitCollection.topK(_:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD, uint64_t, _BYTE *)@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  int v6;
  _BYTE v7[8];

  a3(*a1, a2, v7);
  if (!v4)
    *a4 = v6;
  OUTLINED_FUNCTION_91_0();
}

void specialized closure #1 in LogitCollection.topK(_:)(_QWORD *a1@<X0>, _QWORD *a2@<X1>, void (*a3)(_QWORD, _QWORD, _BYTE *)@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  int v6;
  _BYTE v7[8];

  a3(*a1, *a2, v7);
  if (!v4)
    *a4 = v6;
  OUTLINED_FUNCTION_91_0();
}

uint64_t outlined init with copy of WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2495AAEA0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in TopK.pickToken(_:)()
{
  return partial apply for closure #2 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)();
}

BOOL partial apply for closure #1 in TopK.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(Swift::Int *a1)
{
  return partial apply for closure #1 in NucleusSampling.pickToken(targetLogits:draftTokens:acceptanceThreshold:)(a1);
}

uint64_t OUTLINED_FUNCTION_0_7(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(v1 + 632) = 0;
  *(_DWORD *)(v1 + 636) = v6;
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 688) = v3;
  *(_QWORD *)(v1 + 696) = v4;
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v1 + 720) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v1 + 736) = *(_OWORD *)v1;
  *(_QWORD *)(v1 + 752) = v8;
  *(_QWORD *)(v1 + 760) = v7;
  *(_QWORD *)(v1 + 768) = *(_QWORD *)(v1 + 96);
  *(_DWORD *)(v1 + 776) = v2;
  *(_QWORD *)(v1 + 784) = 0;
  *(_DWORD *)(v1 + 792) = a1;
  *(_QWORD *)(v1 + 796) = v9;
  return swift_isUniquelyReferenced_nonNull_native();
}

__n128 OUTLINED_FUNCTION_1_7(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  *(_DWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 284) = v5;
  *(_OWORD *)(v1 + 288) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v1 + 304) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v1 + 320) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 336) = v4;
  *(_QWORD *)(v1 + 344) = v6;
  *(_OWORD *)(v1 + 352) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 368) = *(_OWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 16);
  *(__n128 *)(v1 + 384) = result;
  *(_QWORD *)(v1 + 400) = v7;
  *(_QWORD *)(v1 + 408) = v3;
  *(_QWORD *)(v1 + 416) = *(_QWORD *)(v1 + 184);
  *(_DWORD *)(v1 + 424) = v2;
  *(_QWORD *)(v1 + 432) = 0;
  *(_DWORD *)(v1 + 440) = a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_9@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 584) = v4;
  *(_QWORD *)(v2 + 592) = *(_QWORD *)(v2 + 96);
  *(_DWORD *)(v2 + 600) = v3;
  *(_QWORD *)(v2 + 608) = 0;
  *(_DWORD *)(v2 + 616) = a1;
  *(_QWORD *)(a2 + 164) = v5;
  return static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)();
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 184) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  __swift_storeEnumTagSinglePayload(*(_QWORD *)(v1 + 240), 1, 1, *(_QWORD *)(v1 + 128));
  return BNNS.Shape.init(_:dataLayout:stride:)();
}

uint64_t OUTLINED_FUNCTION_6_8(uint64_t a1)
{
  uint64_t v1;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 144);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v1 + 184);
  __swift_storeEnumTagSinglePayload(*(_QWORD *)(v1 + 240), 1, 1, *(_QWORD *)(v1 + 128));
  return BNNS.Shape.init(_:dataLayout:stride:)();
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_9_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 240);
  *(_QWORD *)(v1 + 128) = a1;
  __swift_storeEnumTagSinglePayload(v3, 1, 1, a1);
  return BNNS.Shape.init(_:dataLayout:stride:)();
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  _OWORD *v0;
  __int128 v1;

  v1 = *(_OWORD *)((char *)v0 + 632);
  v0[4] = *(_OWORD *)((char *)v0 + 648);
  v0[5] = v1;
  v0[3] = *(_OWORD *)((char *)v0 + 664);
  return BNNS.Shape.stride.getter();
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  _OWORD *v0;
  __int128 v1;

  v1 = *(_OWORD *)((char *)v0 + 632);
  v0[5] = *(_OWORD *)((char *)v0 + 648);
  v0[6] = v1;
  v0[4] = *(_OWORD *)((char *)v0 + 664);
  return BNNS.Shape.stride.getter();
}

void OUTLINED_FUNCTION_16_3(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  LogitCollection.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

void OUTLINED_FUNCTION_18_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t OUTLINED_FUNCTION_21_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;

  v2 = v1[11];
  v0[1] = v1[12];
  v0[2] = v2;
  *v0 = v1[13];
  return static Int32.bnnsDataType.getter();
}

uint64_t OUTLINED_FUNCTION_23_4()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;

  v2 = v1[11];
  v0[2] = v1[12];
  v0[3] = v2;
  v0[1] = v1[13];
  return static Float.bnnsDataType.getter();
}

uint64_t OUTLINED_FUNCTION_25_3@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for BNNS.Shape();
}

float OUTLINED_FUNCTION_30_3()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return LogitCollection.max()();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

void OUTLINED_FUNCTION_32_3()
{
  JUMPOUT(0x2495AAF60);
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_35_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v3, v2);
}

void OUTLINED_FUNCTION_36_3(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  LogitCollection.topP(_:)();
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return BNNS.Shape.size.getter();
}

__n128 OUTLINED_FUNCTION_38_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  *(_QWORD *)(v0 + 520) = v2;
  *(_OWORD *)(v1 + 248) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 80);
  result = *(__n128 *)(v0 + 64);
  *(__n128 *)(v0 + 560) = result;
  return result;
}

BOOL OUTLINED_FUNCTION_39_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

__n128 OUTLINED_FUNCTION_40_2()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  __n128 result;

  *(_DWORD *)(v0 + 456) = 0;
  *(_DWORD *)(v0 + 460) = v1;
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(v0 + 160);
  result = *(__n128 *)(v0 + 144);
  *(__n128 *)(v2 + 216) = result;
  return result;
}

void OUTLINED_FUNCTION_41_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return specialized closure #1 in _NativeSet.intersection(_:)(v3, v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_45_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_47_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_48_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_51_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

void OUTLINED_FUNCTION_52_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 8 * v2 + 32) = v3;
}

void OUTLINED_FUNCTION_53_2()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 256) = v1;
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_55_2()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_56_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

__n128 OUTLINED_FUNCTION_59_2()
{
  uint64_t v0;
  __int128 v1;
  __n128 result;

  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 456);
  v1 = *(_OWORD *)(v0 + 472);
  result = *(__n128 *)(v0 + 488);
  *(__n128 *)(v0 + 144) = result;
  *(_OWORD *)(v0 + 160) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;

  return Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v1, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_62_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;

  return Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v1, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;

  return Array<A>.sampleRandomElementFromLogits(using:temperature:generator:)(v2, v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_65_2(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5(a1, (uint64_t)&a9, v9);
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_69_2(uint64_t a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_70_2(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Sfs5NeverOTg5(a1, a2);
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return static Float.bnnsDataType.getter();
}

uint64_t OUTLINED_FUNCTION_73_0(__n128 *a1, __n128 a2)
{
  __n128 *v2;

  v2[9] = a2;
  a1[1] = a2;
  return IndexSet.count.getter();
}

__n128 OUTLINED_FUNCTION_74_0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __n128 result;

  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v1 + 176);
  v2 = *(_OWORD *)(v1 + 192);
  result = *(__n128 *)(v1 + 208);
  *(__n128 *)(v0 + 64) = result;
  *(_OWORD *)(v0 + 80) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  uint64_t v0;

  return specialized Array.init(repeating:count:)(v0, 0.0);
}

uint64_t OUTLINED_FUNCTION_76_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  return a2(a1, 0);
}

void OUTLINED_FUNCTION_77_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 + 224) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return specialized _NativeSet.filter(_:)(a1, v2 - 144, v1);
}

uint64_t OUTLINED_FUNCTION_80_0()
{
  return type metadata accessor for IndexSet.Index();
}

uint64_t OUTLINED_FUNCTION_81()
{
  uint64_t v0;
  _QWORD *v1;

  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, v0, v1);
}

void OUTLINED_FUNCTION_82_0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 164) = v1;
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

void OUTLINED_FUNCTION_86_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 256) = v1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_89_0(uint64_t a1)
{
  uint64_t v1;

  specialized _NativeSet.intersection(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  uint64_t v0;

  return specialized Array.init(repeating:count:)(0, v0);
}

float *OUTLINED_FUNCTION_93_0(float *result, float a2)
{
  *result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_95_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return type metadata accessor for BNNS.DataLayout();
}

