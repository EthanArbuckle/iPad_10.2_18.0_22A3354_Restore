uint64_t OUTLINED_FUNCTION_97_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_98_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_101_0(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5(a1, a2, v2);
}

void OUTLINED_FUNCTION_102_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_103_0()
{
  return BNNS.Shape.size.getter();
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_106_0(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_107_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_110()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t UnsafeMutableBufferPointer<A>.makeFloat32Copy()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  v3 = specialized Array.init(repeating:count:)(a2, 0.0);
  closure #1 in UnsafeMutableBufferPointer<A>.makeFloat32Copy()((uint64_t)v4, &v3);
  return v3;
}

uint64_t closure #1 in UnsafeMutableBufferPointer<A>.makeFloat32Copy()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  vImagePixelCount v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  vImagePixelCount v6;
  uint64_t result;
  uint64_t v8;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v3 + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = a2;
  src.data = *(void **)a1;
  src.height = 1;
  src.width = v3;
  src.rowBytes = 2 * v3;
  v4 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_7:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v4 = v8;
    *v2 = v8;
  }
  if ((v3 - 0x2000000000000000) >> 62 != 3)
    __break(1u);
  v6 = *(_QWORD *)(v4 + 16);
  dest.data = (void *)(v4 + 32);
  dest.height = 1;
  dest.width = v6;
  dest.rowBytes = 4 * v3;
  result = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  *v2 = v4;
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5k139OIegnrzr_TR04_s24ab74Inference19MaskedLanguageModelC16nextTokensLogits5nodes10presamplerSayAA15de46_pGSaySiG_AA0L10Presampler_pSgtYaKFAaG_pn9G_p_Y10G_P16XEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  _BYTE *v63;
  _BYTE v64[16];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t *v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81[2];
  __int128 __src[5];
  uint64_t __dst[10];
  uint64_t v84;

  v76 = type metadata accessor for IndexSet();
  v75 = *(_QWORD *)(v76 - 8);
  v4 = MEMORY[0x24BDAC7A8](v76);
  v74 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v4);
  v73 = &v64[-v7];
  MEMORY[0x24BDAC7A8](v6);
  v72 = &v64[-v8];
  v77 = type metadata accessor for MaskedLanguageModel.MaskedLogitCollection(0);
  MEMORY[0x24BDAC7A8](v77);
  v69 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a2 + 16);
  if (v11 >= v10)
    v12 = *(_QWORD *)(a1 + 16);
  else
    v12 = *(_QWORD *)(a2 + 16);
  v84 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  v67 = v10;
  v68 = v11;
  v66 = a1;
  v65 = a2;
  if (v12)
  {
    v13 = a1 + 32;
    v14 = (uint64_t *)(a2 + 32);
    v70 = &__dst[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v12;
    v71 = v12;
    while (v10)
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v13, (uint64_t)__src);
      if (!v11)
        goto LABEL_29;
      v78 = v15;
      v80 = v13;
      outlined init with take of LogitCollection(__src, (uint64_t)__dst);
      v79 = v14;
      v16 = (uint64_t)v14;
      v17 = v70;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v16, (uint64_t)v70);
      v19 = __dst[3];
      v18 = __dst[4];
      __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
      v20 = v72;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v18);
      v21 = __dst[8];
      v22 = __dst[9];
      __swift_project_boxed_opaque_existential_1(v17, __dst[8]);
      v23 = v74;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
      v24 = v73;
      IndexSet.intersection(_:)();
      v25 = v75;
      v26 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
      v27 = v23;
      v28 = v76;
      v26(v27, v76);
      v26(v20, v28);
      v29 = v77;
      *((_QWORD *)&__src[1] + 1) = v77;
      *(_QWORD *)&__src[2] = &protocol witness table for MaskedLanguageModel.MaskedLogitCollection;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)__src);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v17, (uint64_t)boxed_opaque_existential_1);
      (*(void (**)(char *, _BYTE *, uint64_t))(v25 + 32))((char *)boxed_opaque_existential_1 + *(int *)(v29 + 20), v24, v28);
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)__dst, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      v31 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1);
        v31 = v84;
      }
      v33 = *(_QWORD *)(v31 + 16);
      v32 = *(_QWORD *)(v31 + 24);
      v34 = v79;
      if (v33 >= v32 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      v35 = *((_QWORD *)&__src[1] + 1);
      v36 = *(_QWORD *)&__src[2];
      v37 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)__src, *((uint64_t *)&__src[1] + 1));
      MEMORY[0x24BDAC7A8](v37);
      v39 = &v64[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v40 + 16))(v39);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, (uint64_t)v39, &v84, v35, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
      --v11;
      --v10;
      v14 = v34 + 5;
      v13 = v80 + 40;
      v15 = v78 - 1;
      v12 = v71;
      if (v78 == 1)
        goto LABEL_15;
    }
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_15:
    v41 = v67;
    if (v67 <= v68)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v80 = (uint64_t)&__src[2] + 8;
    v79 = &__dst[5];
    v42 = 40 * v12 + 32;
    v43 = v66 + v42;
    v44 = v65 + v42;
    while (v12 < v41)
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v43, (uint64_t)v81);
      if (v68 == v12)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        goto LABEL_27;
      }
      if (v12 >= v68)
        goto LABEL_31;
      v45 = v12;
      outlined init with take of LogitCollection(v81, (uint64_t)__src);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v44, v80);
      memcpy(__dst, __src, sizeof(__dst));
      v47 = __dst[3];
      v46 = __dst[4];
      __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
      v48 = v72;
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v46);
      v49 = __dst[8];
      v50 = __dst[9];
      v51 = v79;
      __swift_project_boxed_opaque_existential_1(v79, __dst[8]);
      v52 = v74;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
      v53 = v73;
      IndexSet.intersection(_:)();
      v54 = v75;
      v55 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
      v56 = v52;
      v57 = v76;
      v55(v56, v76);
      v55(v48, v57);
      v58 = v69;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v51, (uint64_t)v69);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(&v58[*(int *)(v77 + 20)], v53, v57);
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)__dst, &demangling cache variable for type metadata for (LogitCollection, LogitCollection));
      v59 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1);
        v59 = v84;
      }
      v61 = *(_QWORD *)(v59 + 16);
      v60 = *(_QWORD *)(v59 + 24);
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        v59 = v84;
      }
      v12 = v45 + 1;
      *((_QWORD *)&__src[1] + 1) = v77;
      *(_QWORD *)&__src[2] = &protocol witness table for MaskedLanguageModel.MaskedLogitCollection;
      v62 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)__src);
      v63 = v69;
      outlined init with copy of MaskedLanguageModel.SingleLogitCollection((uint64_t)v69, (uint64_t)v62, type metadata accessor for MaskedLanguageModel.MaskedLogitCollection);
      *(_QWORD *)(v59 + 16) = v61 + 1;
      outlined init with take of LogitCollection(__src, v59 + 40 * v61 + 32);
      outlined destroy of MaskedLanguageModel.SingleLogitCollection((uint64_t)v63, type metadata accessor for MaskedLanguageModel.MaskedLogitCollection);
      v43 += 40;
      v44 += 40;
      v41 = v67;
      if (v67 == v45 + 1)
        goto LABEL_27;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t MaskedLanguageModel.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return MaskedLanguageModel.__allocating_init(_:_:)(a1, a2, specialized MaskedLanguageModel.__allocating_init(_:_:));
}

uint64_t MaskedLanguageModel.startNode.getter()
{
  return 0;
}

uint64_t MaskedLanguageModel.nextTokensLogits(nodes:presampler:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[47] = a1;
  v2[48] = v1;
  v2[49] = type metadata accessor for MaskedLanguageModel.SingleLogitCollection(0);
  v2[50] = OUTLINED_FUNCTION_69();
  v3 = OUTLINED_FUNCTION_3_2();
  v2[51] = v3;
  v2[52] = *(_QWORD *)(v3 - 8);
  v2[53] = OUTLINED_FUNCTION_69();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 456) = a1;
  *(_QWORD *)(v3 + 464) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v3 + 136, &demangling cache variable for type metadata for LogitPresampler?);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 480) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    *(_QWORD *)(v4 + 488) = a1;
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v4 + 256, &demangling cache variable for type metadata for LogitPresampler?);
  }
  return swift_task_switch();
}

uint64_t MaskedLanguageModel.nextTokensLogits(nodes:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD *, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[47] + 16);
  OUTLINED_FUNCTION_4_2();
  v3 = v2;
  OUTLINED_FUNCTION_4_2();
  v5 = v4;
  if (v1)
  {
    v6 = v0[47];
    v24 = v0;
    v7 = v0[48] + 16;
    v8 = (unint64_t *)(v6 + 32);
    swift_bridgeObjectRetain();
    v25 = v7;
    result = OUTLINED_FUNCTION_4_0();
    while (1)
    {
      v11 = *v8++;
      v10 = v11;
      if ((v11 & 0x8000000000000000) != 0)
        break;
      if (v10 >= *(_QWORD *)(*(_QWORD *)v25 + 16))
        goto LABEL_13;
      v12 = *(_QWORD *)v25 + 24 * v10;
      v13 = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v12 + 40);
      v15 = *(_QWORD *)(v3 + 16);
      v16 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      if (v15 >= v16 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v15 + 1;
      *(_QWORD *)(v3 + 8 * v15 + 32) = v13;
      v17 = *(_QWORD *)(v5 + 16);
      if (v17 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v19;
      }
      *(_QWORD *)(v5 + 16) = v17 + 1;
      *(_QWORD *)(v5 + 8 * v17 + 32) = v14;
      result = swift_bridgeObjectRelease();
      if (!--v1)
      {
        v0 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_11:
    v0[54] = v3;
    v0[55] = v5;
    v20 = v0[48] + 24;
    OUTLINED_FUNCTION_4_0();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v20, (uint64_t)(v0 + 12));
    v21 = v0[15];
    v22 = v0[16];
    __swift_project_boxed_opaque_existential_1(v0 + 12, v21);
    v0[20] = &type metadata for BasicLogitPresampler;
    v0[21] = &protocol witness table for BasicLogitPresampler;
    v26 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))(**(int **)(v22 + 24) + *(_QWORD *)(v22 + 24));
    swift_bridgeObjectRetain();
    v23 = (_QWORD *)swift_task_alloc();
    v0[56] = v23;
    *v23 = v0;
    v23[1] = MaskedLanguageModel.nextTokensLogits(nodes:presampler:);
    return v26(v3, v0 + 17, v21, v22);
  }
  return result;
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(_QWORD **)(v0 + 384);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v2 = (uint64_t)(v1 + 8);
  OUTLINED_FUNCTION_4_0();
  v3 = v1[11];
  v4 = v1[12];
  v5 = (uint64_t)__swift_project_boxed_opaque_existential_1(v1 + 8, v3);
  v6 = *(_QWORD *)(v3 - 8);
  v7 = OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_26_0(v7, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v3);
  if ((v5 & 1) == 0)
  {
LABEL_16:
    swift_task_dealloc();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v2, v0 + 16);
    v27 = *(_QWORD *)(v0 + 40);
    v28 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v27);
    *(_QWORD *)(v0 + 280) = &type metadata for BasicLogitPresampler;
    *(_QWORD *)(v0 + 288) = &protocol witness table for BasicLogitPresampler;
    v33 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v28 + 24) + *(_QWORD *)(v28 + 24));
    swift_bridgeObjectRetain();
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 472) = v29;
    *v29 = v0;
    v29[1] = MaskedLanguageModel.nextTokensLogits(nodes:presampler:);
    return v33(*(_QWORD *)(v0 + 440), v0 + 256, v27, v28);
  }
  v8 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v32 = v2;
    v10 = *(_QWORD *)(v0 + 416);
    v11 = v8 + 32;
    v31 = *(_QWORD *)(v0 + 456);
    swift_bridgeObjectRetain();
    while (1)
    {
      v12 = *(_QWORD *)(v0 + 424);
      v13 = *(_QWORD *)(v0 + 408);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v11, v0 + 176);
      v15 = *(_QWORD *)(v0 + 200);
      v14 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v15);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
      v16 = IndexSet.count.getter();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v13);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
      if (v16 > 1)
        break;
      v11 += 40;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v8 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v2 = v32;
    goto LABEL_16;
  }
LABEL_7:
  swift_task_dealloc();
  v17 = *(_QWORD *)(v8 + 16);
  v18 = *(_QWORD *)(v0 + 456);
  if (v17)
  {
    v34 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v19 = v18 + 32;
    v20 = v34;
    do
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v19, v0 + 56);
      v21 = *(_QWORD *)(v0 + 80);
      v22 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_31_4();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
      __swift_destroy_boxed_opaque_existential_1(v0 + 56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v34;
      }
      v24 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v20 = v34;
      }
      v25 = *(_QWORD *)(v0 + 400);
      *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 392);
      *(_QWORD *)(v0 + 248) = &protocol witness table for MaskedLanguageModel.SingleLogitCollection;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 216));
      outlined init with copy of MaskedLanguageModel.SingleLogitCollection(v25, (uint64_t)boxed_opaque_existential_1, type metadata accessor for MaskedLanguageModel.SingleLogitCollection);
      *(_QWORD *)(v20 + 16) = v24 + 1;
      outlined init with take of LogitCollection((__int128 *)(v0 + 216), v20 + 40 * v24 + 32);
      outlined destroy of MaskedLanguageModel.SingleLogitCollection(v25, type metadata accessor for MaskedLanguageModel.SingleLogitCollection);
      v19 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 456);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay24TokenGenerationInference15LogitCollection_pGAJG_AhI_ps5NeverOTg504_s24fg11Inference15ij7_pAaB_pn9B_pIgnnr_n4B_p_n4B_ptn5B_ps5k139OIegnrzr_TR04_s24ab74Inference19MaskedLanguageModelC16nextTokensLogits5nodes10presamplerSayAA15de46_pGSaySiG_AA0L10Presampler_pSgtYaKFAaG_pn9G_p_Y10G_P16XEfU1_Tf3nnnpf_nTf1cn_n(v2, v1);
  v4 = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_14_3();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0 + 136, &demangling cache variable for type metadata for LogitPresampler?);
  OUTLINED_FUNCTION_37_1();
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0 + 256, &demangling cache variable for type metadata for LogitPresampler?);
  OUTLINED_FUNCTION_37_1();
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Int __swiftcall MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  _QWORD *v3;
  _QWORD *v4;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t);
  _BOOL8 v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  result = OUTLINED_FUNCTION_4_0();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = v3[2];
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 <= forPreviousNode)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = (_QWORD *)(v9 + 24 * forPreviousNode);
  v12 = v11[4];
  v13 = v11[5];
  result = specialized Dictionary.subscript.getter(token, v11[6]);
  if ((v14 & 1) == 0)
    return result;
  v29 = v10;
  OUTLINED_FUNCTION_7_9();
  v30 = v13;
  v16 = v4[6];
  v15 = v4[7];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v4 + 3), v16);
  v17 = *(uint64_t (**)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  v18 = isPrompt;
  v19 = v17(v12, token, v18, v16, v15);
  v20 = token;
  v21 = v19;
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_7_9();
  v22 = v4[11];
  v23 = v4[12];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v4 + 8), v22);
  v24 = (*(uint64_t (**)(uint64_t, Swift::Int, _BOOL8, uint64_t, uint64_t))(v23 + 16))(v30, token, v18, v22, v23);
  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  v25 = OUTLINED_FUNCTION_32_4();
  OUTLINED_FUNCTION_7_9();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v26 = *(_QWORD *)(v4[2] + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v27 = v4[2];
  *(_QWORD *)(v27 + 16) = v26 + 1;
  v28 = (_QWORD *)(v27 + 24 * v26);
  v28[4] = v21;
  v28[5] = v24;
  v28[6] = v25;
  if (*(_QWORD *)(v4[2] + 16) <= (unint64_t)forPreviousNode)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  specialized Dictionary._Variant.setValue(_:forKey:)(v29, v20, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
  OUTLINED_FUNCTION_9_0();
  return v29;
}

Swift::Int __swiftcall MaskedLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  result = OUTLINED_FUNCTION_4_0();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) <= (unint64_t)forPreviousNode)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_7_9();
  v5 = OUTLINED_FUNCTION_35_4(v2 + 24);
  v8 = OUTLINED_FUNCTION_5_8(v5, v6, v7);
  result = OUTLINED_FUNCTION_28_4();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) > (unint64_t)forPreviousNode)
  {
    OUTLINED_FUNCTION_7_9();
    v9 = OUTLINED_FUNCTION_35_4(v2 + 64);
    v12 = OUTLINED_FUNCTION_5_8(v9, v10, v11);
    OUTLINED_FUNCTION_28_4();
    v13 = OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_7_9();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    v15 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v15 + 16) = v14 + 1;
    v16 = (_QWORD *)(v15 + 24 * v14);
    v16[4] = v8;
    v16[5] = v12;
    v16[6] = v13;
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_10_8();
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t MaskedLanguageModel.init(_:_:)(uint64_t a1, uint64_t a2)
{
  return MaskedLanguageModel.__allocating_init(_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized MaskedLanguageModel.init(_:_:));
}

uint64_t MaskedLanguageModel.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a2, v8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_26_0(v4, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  v13 = a3(a1, v4, v3, v8, v9);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v13;
}

uint64_t MaskedLanguageModel.MaskedLogitCollection.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance MaskedLanguageModel.MaskedLogitCollection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_3_2();
  v0 = OUTLINED_FUNCTION_23_5();
  return OUTLINED_FUNCTION_21_4(v0, v1, v2, v3);
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance MaskedLanguageModel.SingleLogitCollection()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_3_2();
  v0 = OUTLINED_FUNCTION_23_5();
  return OUTLINED_FUNCTION_21_4(v0, v1, v2, v3);
}

uint64_t MaskedLanguageModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v0;
}

uint64_t MaskedLanguageModel.__deallocating_deinit()
{
  MaskedLanguageModel.deinit();
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance MaskedLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  return MaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.nextTokensLogits(nodes:presampler:) in conformance MaskedLanguageModel(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return MaskedLanguageModel.nextTokensLogits(nodes:presampler:)(a1);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance MaskedLanguageModel(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  return MaskedLanguageModel.node(forPreviousNode:prompt:)(a1, *(TokenGenerationInference::SamplingDecoderPrompt *)&a2);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<UUID, FirstTokenInferenceInstrumenter>, (void (*)(_QWORD))MEMORY[0x24BE3BD28]);
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<UUID, ExtendInferenceInstrumenter>, (void (*)(_QWORD))MEMORY[0x24BE3BCB8]);
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<UUID, CompletePromptRequestInstrumenter>, (void (*)(_QWORD))MEMORY[0x24BE3BD80]);
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<UUID, PromptProcessingInstrumenter>, (void (*)(_QWORD))MEMORY[0x24BE3BCE0]);
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  __int128 *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_7_10();
  v0 = (__int128 *)OUTLINED_FUNCTION_8_5();
  v3 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_15_6(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return OUTLINED_FUNCTION_6_9();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_7_10();
  v0 = OUTLINED_FUNCTION_8_5();
  v3 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_15_6(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return OUTLINED_FUNCTION_6_9();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *);
  uint64_t v16;
  _QWORD *v17;

  v8 = OUTLINED_FUNCTION_7_10();
  v17 = *v3;
  *v3 = (_QWORD *)0x8000000000000000;
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = OUTLINED_FUNCTION_35_4(v5);
  MEMORY[0x24BDAC7A8](v11);
  v13 = OUTLINED_FUNCTION_14_5(v12, v16);
  v14(v13);
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, v4, a3, v8, &v17, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(v5);
  *v3 = v17;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_9_7();
  v4 = OUTLINED_FUNCTION_16_4();
  v7 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v5, a3, v6);
  OUTLINED_FUNCTION_15_6(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
  return OUTLINED_FUNCTION_0_8();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  char v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_25_4();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v9, a3, a4);
  *v4 = v11;
  return OUTLINED_FUNCTION_0_8();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_7();
  v5 = OUTLINED_FUNCTION_16_4();
  a3(v5);
  *v3 = v7;
  return OUTLINED_FUNCTION_0_8();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_25_4();
  v11 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, v10);
  OUTLINED_FUNCTION_15_6(v11, v12, v13, v14, v15, v16, v17, v18, v20, v21);
  return swift_bridgeObjectRelease();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  _QWORD *v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
  *(_QWORD *)(v18[7] + 8 * v14) = a1;
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, PrefixGuidedLanguageModel.Node>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
  v19 = v18[7];
  result = swift_release();
  *(_QWORD *)(v19 + 8 * v14) = a1;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  Swift::Int *v3;
  uint64_t *v4;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = v3;
  v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_4_10();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, LogitCollection>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8))
    goto LABEL_5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v14;
LABEL_5:
  v16 = *v4;
  if ((v13 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, (uint64_t)a1, v16);
  v17 = *(_QWORD *)(v16 + 56) + 40 * v12;
  OUTLINED_FUNCTION_37_1();
  return outlined init with take of LogitCollection(a1, v17);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CheckedContinuation<(), Never>>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v16, a1, v22);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, void (*a5)(_QWORD))
{
  Swift::Int *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = v5;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_26_3();
  v13 = *v5;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_10();
  if (v16)
  {
    __break(1u);
    goto LABEL_9;
  }
  v17 = v14;
  v18 = v15;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v17 = v19;
LABEL_5:
  v21 = *v8;
  if ((v18 & 1) != 0)
  {
    v22 = *(_QWORD *)(v21 + 56);
    a5(0);
    OUTLINED_FUNCTION_22_6();
    (*(void (**)(unint64_t, uint64_t))(v24 + 40))(v22 + v23 * v17, a1);
  }
  else
  {
    OUTLINED_FUNCTION_26_0(v6, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    specialized _NativeDictionary._insert(at:key:value:)(v17, v6, a1, v21, a5);
    OUTLINED_FUNCTION_31();
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, DataStreamState>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];
    v24 = type metadata accessor for DataStreamState(0);
    return outlined assign with take of DataStreamState(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v18);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[Int], KVLRUCacheNode>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];
    result = swift_release();
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)a2, a1, v18);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::Int *v3;
  Swift::Int *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for Prompt.SpecialToken();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_10();
  if (v15)
  {
    __break(1u);
    goto LABEL_10;
  }
  v16 = v13;
  v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, [String : String]>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v17 & 1) == (v19 & 1))
    {
      v16 = v18;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  v20 = (_QWORD *)*v4;
  if ((v17 & 1) != 0)
  {
    v21 = v20[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v11, a1, v20);
  }
  OUTLINED_FUNCTION_31();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  Swift::Int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  char v23;
  _QWORD *v24;
  uint64_t *v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  v17 = v14[2];
  v18 = (v16 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_9;
  }
  v20 = v15;
  v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, (logitCount: Int, callback: @convention(c) (_:_:_:_:_:), cbContext: OpaquePointer)>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v19);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v20 = result;
LABEL_5:
  v24 = *v7;
  if ((v21 & 1) != 0)
  {
    v25 = (uint64_t *)(v24[7] + 24 * v20);
    *v25 = a1;
    v25[1] = a2;
    v25[2] = a3;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v20, a4, a5, a1, a2, a3, v24);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = OUTLINED_FUNCTION_12_5(a1, a2, a3, a4);
  *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5) = v7;
  result = outlined init with take of LogitCollection(v8, *(_QWORD *)(v6 + 56) + 40 * v5);
  v10 = *(_QWORD *)(a4 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v12;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  v18 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a4, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v11 = (_QWORD *)(a5[6] + 16 * a1);
  *v11 = a2;
  v11[1] = a3;
  result = outlined init with take of LogitCollection(&v16, a5[7] + 40 * a1);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for DataStreamState(0);
  result = outlined init with take of DataStreamState(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for Prompt.SpecialToken();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  OUTLINED_FUNCTION_12_5(a1, a2, a3, a4);
  v11 = *(_QWORD *)(v10 + 48);
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_22_6();
  (*(void (**)(unint64_t, uint64_t))(v13 + 32))(v11 + v12 * a1, a2);
  v14 = *(_QWORD *)(a4 + 56);
  a5(0);
  OUTLINED_FUNCTION_22_6();
  result = (*(uint64_t (**)(unint64_t, uint64_t))(v16 + 32))(v14 + v15 * a1, a3);
  v18 = *(_QWORD *)(a4 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v20;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (_QWORD *)(a7[7] + 24 * result);
  *v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(Swift::Int a1, uint64_t a2, uint64_t a3, char a4, _QWORD **a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *);
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a6;
  v31 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
  (*(void (**)(uint64_t *, Swift::Int, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_4_10();
  if (v17)
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v15;
  v19 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, a1))
  {
    v20 = OUTLINED_FUNCTION_26_4();
    if ((v19 & 1) == (v21 & 1))
    {
      v18 = v20;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  v22 = *a5;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7] + 40 * v18;
    __swift_destroy_boxed_opaque_existential_1(v23);
    outlined init with take of LogitCollection(&v29, v23);
  }
  else
  {
    v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v29, v30);
    MEMORY[0x24BDAC7A8](v24);
    v26 = OUTLINED_FUNCTION_14_5(v25, v28);
    v27(v26);
    specialized _NativeDictionary._insert(at:key:value:)(v18, a2, a3, v19, v22, a6, a7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_31();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a6;
  v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v14 = (_QWORD *)(a5[6] + 16 * a1);
  *v14 = a2;
  v14[1] = a3;
  result = outlined init with take of LogitCollection(&v19, a5[7] + 40 * a1);
  v16 = a5[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a5[2] = v18;
  return result;
}

uint64_t specialized MaskedLanguageModel.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  specialized MaskedLanguageModel.init(_:_:)(a1, (uint64_t)v11, v12, a4, a5);
  v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, a4);
  return v14;
}

uint64_t type metadata accessor for MaskedLanguageModel.SingleLogitCollection(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for MaskedLanguageModel.SingleLogitCollection);
}

void specialized MaskedLanguageModel.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19[5];

  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  *(_QWORD *)(a3 + 16) = MEMORY[0x24BEE4AF8];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, a3 + 24);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v19, a3 + 64);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  OUTLINED_FUNCTION_31_4();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  v15 = OUTLINED_FUNCTION_32_4();
  OUTLINED_FUNCTION_7_9();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v17 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v17 + 16) = v16 + 1;
  v18 = (_QWORD *)(v17 + 24 * v16);
  v18[4] = v13;
  v18[5] = v14;
  v18[6] = v15;
  OUTLINED_FUNCTION_28_4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1(a1);
  OUTLINED_FUNCTION_10_8();
}

uint64_t type metadata accessor for MaskedLanguageModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for MaskedLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MaskedLanguageModel.__allocating_init(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for MaskedLanguageModel.Node()
{
  return &type metadata for MaskedLanguageModel.Node;
}

uint64_t getEnumTagSinglePayload for MaskedLanguageModel.SingleLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D13C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_3_2();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MaskedLanguageModel.SingleLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D13C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_3_2();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t outlined assign with take of DataStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataStreamState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for MaskedLanguageModel.MaskedLogitCollection);
}

void _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_3_4(v2);
  OUTLINED_FUNCTION_49();
}

void outlined init with copy of MaskedLanguageModel.SingleLogitCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_49();
}

void outlined destroy of MaskedLanguageModel.SingleLogitCollection(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_3_4(v2);
  OUTLINED_FUNCTION_49();
}

_QWORD *initializeBufferWithCopyOfBuffer for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

uint64_t destroy for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t *assignWithCopy for MaskedLanguageModel.MaskedLogitCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MaskedLanguageModel.MaskedLogitCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaskedLanguageModel.MaskedLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D14044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_3_2();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MaskedLanguageModel.MaskedLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D140C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_2();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for MaskedLanguageModel.MaskedLogitCollection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v5 + 40))(v3, va, v4, v5);
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_9_7()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

unint64_t OUTLINED_FUNCTION_12_5(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

char *OUTLINED_FUNCTION_14_5@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_15_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_4()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_25_4()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

unint64_t OUTLINED_FUNCTION_26_4()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  return swift_endAccess();
}

_QWORD *OUTLINED_FUNCTION_31_4()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_35_4(uint64_t a1)
{
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of LogitCollection((__int128 *)a1, (uint64_t)v16);
    specialized Dictionary._Variant.setValue(_:forKey:)();
  }
  else
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, &demangling cache variable for type metadata for LogitCollection?);
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v4 & 1) != 0)
    {
      OUTLINED_FUNCTION_397();
      OUTLINED_FUNCTION_215();
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, LogitCollection>);
      OUTLINED_FUNCTION_213(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
      outlined init with take of LogitCollection((__int128 *)(*(_QWORD *)(v15 + 56) + 40 * a2), (uint64_t)v16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogitCollection);
      _NativeDictionary._delete(at:)();
      *v2 = v15;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for LogitCollection?);
  }
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[40];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of LogitCollection((__int128 *)a1, (uint64_t)v5);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v5, a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v5);
    swift_bridgeObjectRelease();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__swift_getEnumTagSinglePayload(a1, 1, v9) == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v8);
    swift_bridgeObjectRelease();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v12, a2, a3);
    swift_bridgeObjectRelease();
  }
}

void specialized Dictionary.subscript.setter()
{
  specialized Dictionary.subscript.setter();
}

{
  specialized Dictionary.subscript.setter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(_QWORD);
  uint64_t (*v5)(_QWORD);
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);

  OUTLINED_FUNCTION_51();
  v2 = v1;
  v19 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(v6);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_26_3();
  v11 = v5(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - v13;
  if (__swift_getEnumTagSinglePayload(v9, 1, v11) == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v9, v7);
    specialized Dictionary._Variant.removeValue(forKey:)(v2, v5, v0);
    v15 = OUTLINED_FUNCTION_4_4();
    OUTLINED_FUNCTION_3_4(v15);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0, v7);
  }
  else
  {
    OUTLINED_FUNCTION_48_0((uint64_t)v14, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    v16 = OUTLINED_FUNCTION_115_0();
    v19(v16);
    v17 = OUTLINED_FUNCTION_4_4();
    OUTLINED_FUNCTION_3_4(v17);
  }
  OUTLINED_FUNCTION_31();
}

{
  specialized Dictionary.subscript.setter();
}

{
  specialized Dictionary.subscript.setter();
}

void specialized Dictionary.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_285();
  type metadata accessor for DataStreamState(0);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__swift_getEnumTagSinglePayload(a1, 1, v7) == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, &demangling cache variable for type metadata for DataStreamState?);
    specialized Dictionary._Variant.removeValue(forKey:)(v1);
    v8 = OUTLINED_FUNCTION_4_4();
    OUTLINED_FUNCTION_3_4(v8);
    OUTLINED_FUNCTION_399();
  }
  else
  {
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a1, (uint64_t)v6, type metadata accessor for DataStreamState);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    v9 = OUTLINED_FUNCTION_4_4();
    OUTLINED_FUNCTION_3_4(v9);
  }
  OUTLINED_FUNCTION_5_0();
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  void *v24;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    Set.Iterator.init(_cocoa:)();
    v1 = v19;
    v18 = v20;
    v2 = v21;
    v3 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    v9 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_33;
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v12 = v24;
      swift_unknownObjectRelease();
      if (!v24)
        goto LABEL_33;
      goto LABEL_31;
    }
    if (!v4)
      break;
    v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v11 = v10 | (v3 << 6);
LABEL_30:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    if (!v12)
      goto LABEL_33;
LABEL_31:
    outlined bridged method (pb) of @objc TGIE5FunctionObjC.adapterType.getter(v12);
    v17 = v16;

    if (v17)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      return;
    }
  }
  v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8)
      goto LABEL_33;
    v14 = *(_QWORD *)(v18 + 8 * v13);
    ++v3;
    if (!v14)
    {
      v3 = v9 + 2;
      if (v9 + 2 >= v8)
        goto LABEL_33;
      v14 = *(_QWORD *)(v18 + 8 * v3);
      if (!v14)
      {
        v3 = v9 + 3;
        if (v9 + 3 >= v8)
          goto LABEL_33;
        v14 = *(_QWORD *)(v18 + 8 * v3);
        if (!v14)
        {
          v3 = v9 + 4;
          if (v9 + 4 >= v8)
            goto LABEL_33;
          v14 = *(_QWORD *)(v18 + 8 * v3);
          if (!v14)
          {
            v3 = v9 + 5;
            if (v9 + 5 >= v8)
              goto LABEL_33;
            v14 = *(_QWORD *)(v18 + 8 * v3);
            if (!v14)
            {
              v15 = v9 + 6;
              while (v15 < v8)
              {
                v14 = *(_QWORD *)(v18 + 8 * v15++);
                if (v14)
                {
                  v3 = v15 - 1;
                  goto LABEL_29;
                }
              }
              goto LABEL_33;
            }
          }
        }
      }
    }
LABEL_29:
    v4 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  _QWORD v25[6];
  int64_t v26;

  specialized _NativeDictionary.makeIterator()(a1, v25);
  v5 = v25[0];
  v19 = v25[1];
  v6 = v25[3];
  v7 = v25[4];
  v26 = (unint64_t)(v25[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_20;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v10 >= v26)
      goto LABEL_27;
    v11 = *(_QWORD *)(v19 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v26)
        goto LABEL_27;
      v11 = *(_QWORD *)(v19 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v26)
          goto LABEL_27;
        v11 = *(_QWORD *)(v19 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v26)
            goto LABEL_27;
          v11 = *(_QWORD *)(v19 + 8 * v12);
          if (!v11)
          {
            v12 = v6 + 5;
            if (v6 + 5 >= v26)
              goto LABEL_27;
            v11 = *(_QWORD *)(v19 + 8 * v12);
            if (!v11)
            {
              v13 = v6 + 6;
              while (v13 < v26)
              {
                v11 = *(_QWORD *)(v19 + 8 * v13++);
                if (v11)
                {
                  v12 = v13 - 1;
                  goto LABEL_19;
                }
              }
              goto LABEL_27;
            }
          }
        }
      }
    }
LABEL_19:
    v7 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v6 = v12;
LABEL_20:
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(v5 + 56) + 40 * v9, (uint64_t)v23);
    *(_QWORD *)&v22 = v16;
    *((_QWORD *)&v22 + 1) = v15;
    v20[0] = v22;
    v20[1] = v23[0];
    v20[2] = v23[1];
    v21 = v24;
    if (v16 == a2 && *((_QWORD *)&v22 + 1) == a3)
    {
      swift_bridgeObjectRetain();
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v20, &demangling cache variable for type metadata for (key: String, value: OnDeviceInferenceAssetObject));
LABEL_27:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v20, &demangling cache variable for type metadata for (key: String, value: OnDeviceInferenceAssetObject));
    if ((v18 & 1) != 0)
      goto LABEL_27;
  }
  __break(1u);
}

uint64_t static OnDeviceInferenceAssetObjectTokenizer.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = OUTLINED_FUNCTION_198(), result = 0, (v5 & 1) != 0))
  {
    type metadata accessor for TokenizerRunner();
    if ((static TokenizerRunner.== infix(_:_:)() & 1) != 0)
    {
      v7 = a2[3];
      if (a1[3])
      {
        if (!v7)
          return 0;
        OUTLINED_FUNCTION_21_1();
        v8 = OUTLINED_FUNCTION_57_0();
        specialized static Dictionary<>.== infix(_:_:)(v8, v7);
        v10 = v9;
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_42();
        if ((v10 & 1) == 0)
          return 0;
      }
      else if (v7)
      {
        return 0;
      }
      v11 = a2[4];
      if (a1[4])
      {
        if (v11)
        {
          OUTLINED_FUNCTION_52();
          v12 = OUTLINED_FUNCTION_21_1();
          specialized static Dictionary<>.== infix(_:_:)(v12, v11);
          v14 = v13;
          OUTLINED_FUNCTION_42();
          OUTLINED_FUNCTION_7_0();
          if ((v14 & 1) != 0)
            return 1;
        }
      }
      else if (!v11)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for OnDeviceInferenceAssetObject.identifier.getter in conformance OnDeviceInferenceAssetObjectTokenizer()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static OnDeviceInferenceAssetObjectE5Runner.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  OUTLINED_FUNCTION_51();
  v96 = v0;
  v97 = v1;
  v3 = v2;
  v5 = v4;
  v91 = OUTLINED_FUNCTION_4_4();
  v87 = *(_QWORD *)(v91 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_9_2(v7, v84);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v86 = v9;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v90 = v11;
  v88 = OUTLINED_FUNCTION_282();
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_32_0();
  v94 = v13;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v95 = v15;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  v92 = v17;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v93 = v19;
  OUTLINED_FUNCTION_43_4();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v84 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v84 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v84 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v84 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)&v84 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v84 - v36;
  v38 = *v5 == *v3 && v5[1] == v3[1];
  if (v38)
  {
    v44 = OUTLINED_FUNCTION_418();
    OUTLINED_FUNCTION_71_2(v44, v45);
    v46 = OUTLINED_FUNCTION_266();
    OUTLINED_FUNCTION_71_2(v46, v47);
  }
  else
  {
    v39 = OUTLINED_FUNCTION_198();
    v40 = OUTLINED_FUNCTION_418();
    OUTLINED_FUNCTION_162(v40, v41);
    v42 = OUTLINED_FUNCTION_266();
    OUTLINED_FUNCTION_162(v42, v43);
    if ((v39 & 1) == 0)
    {
      OUTLINED_FUNCTION_49_3((uint64_t)v37);
      OUTLINED_FUNCTION_49_3((uint64_t)v35);
      OUTLINED_FUNCTION_71_2((uint64_t)v5, (uint64_t)v32);
      OUTLINED_FUNCTION_71_2((uint64_t)v3, (uint64_t)v29);
LABEL_14:
      OUTLINED_FUNCTION_49_3((uint64_t)v32);
      OUTLINED_FUNCTION_49_3((uint64_t)v29);
      OUTLINED_FUNCTION_71_2((uint64_t)v5, (uint64_t)v26);
      OUTLINED_FUNCTION_71_2((uint64_t)v3, (uint64_t)v23);
      goto LABEL_15;
    }
  }
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for NSObject);
  v48 = static NSObject.== infix(_:_:)();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection((uint64_t)v37, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
  v49 = OUTLINED_FUNCTION_53();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v49, v50);
  OUTLINED_FUNCTION_162((uint64_t)v5, (uint64_t)v32);
  OUTLINED_FUNCTION_162((uint64_t)v3, (uint64_t)v29);
  if ((v48 & 1) == 0)
    goto LABEL_14;
  v51 = *((_QWORD *)v32 + 3);
  v52 = *((_QWORD *)v29 + 3);
  OUTLINED_FUNCTION_49_3((uint64_t)v32);
  OUTLINED_FUNCTION_49_3((uint64_t)v29);
  OUTLINED_FUNCTION_71_2((uint64_t)v5, (uint64_t)v26);
  OUTLINED_FUNCTION_71_2((uint64_t)v3, (uint64_t)v23);
  if (v51 != v52)
  {
LABEL_15:
    OUTLINED_FUNCTION_77_1((uint64_t)v23);
    OUTLINED_FUNCTION_77_1((uint64_t)v26);
LABEL_16:
    v60 = v94;
    v59 = v95;
    v58 = v92;
    v57 = v93;
    v61 = OUTLINED_FUNCTION_416();
    OUTLINED_FUNCTION_97_1(v61, v62);
    OUTLINED_FUNCTION_97_1((uint64_t)v3, v58);
    goto LABEL_17;
  }
  v53 = *((_QWORD *)v23 + 9);
  if (!*((_QWORD *)v26 + 9))
  {
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_77_1((uint64_t)v23);
    OUTLINED_FUNCTION_77_1((uint64_t)v26);
    if (!v53)
    {
      v57 = v93;
      OUTLINED_FUNCTION_97_1((uint64_t)v5, v93);
      v58 = v92;
      OUTLINED_FUNCTION_97_1((uint64_t)v3, v92);
      v60 = v94;
      v59 = v95;
      goto LABEL_27;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!v53)
  {
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_49_3((uint64_t)v23);
    OUTLINED_FUNCTION_49_3((uint64_t)v26);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_21_1();
  v54 = OUTLINED_FUNCTION_52();
  specialized static Dictionary<>.== infix(_:_:)(v54, v53);
  v56 = v55;
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_49_3((uint64_t)v23);
  OUTLINED_FUNCTION_49_3((uint64_t)v26);
  OUTLINED_FUNCTION_7_0();
  v57 = v93;
  OUTLINED_FUNCTION_71_2((uint64_t)v5, v93);
  v58 = v92;
  OUTLINED_FUNCTION_71_2((uint64_t)v3, v92);
  v60 = v94;
  v59 = v95;
  if ((v56 & 1) == 0)
  {
LABEL_17:
    OUTLINED_FUNCTION_77_1(v58);
    OUTLINED_FUNCTION_77_1(v57);
LABEL_18:
    OUTLINED_FUNCTION_97_1((uint64_t)v5, v59);
    OUTLINED_FUNCTION_97_1((uint64_t)v3, v60);
LABEL_19:
    OUTLINED_FUNCTION_77_1(v60);
    OUTLINED_FUNCTION_77_1(v59);
    goto LABEL_20;
  }
LABEL_27:
  v65 = *(_QWORD *)(v58 + 128);
  if (!*(_QWORD *)(v57 + 128))
  {
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_77_1(v58);
    OUTLINED_FUNCTION_77_1(v57);
    if (!v65)
    {
      OUTLINED_FUNCTION_97_1((uint64_t)v5, v59);
      OUTLINED_FUNCTION_97_1((uint64_t)v3, v60);
      goto LABEL_36;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (!v65)
  {
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_49_3(v58);
    OUTLINED_FUNCTION_49_3(v57);
    goto LABEL_34;
  }
  OUTLINED_FUNCTION_21_1();
  v66 = OUTLINED_FUNCTION_52();
  specialized static Dictionary<>.== infix(_:_:)(v66, v65);
  v68 = v67;
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_49_3(v58);
  OUTLINED_FUNCTION_49_3(v57);
  OUTLINED_FUNCTION_7_0();
  v69 = OUTLINED_FUNCTION_310();
  OUTLINED_FUNCTION_71_2(v69, v70);
  OUTLINED_FUNCTION_71_2((uint64_t)v3, v60);
  if ((v68 & 1) == 0)
    goto LABEL_19;
LABEL_36:
  v71 = v90;
  v72 = v90 + *(int *)(v89 + 48);
  outlined init with copy of UUID?(v59 + *(int *)(v88 + 48), v90, &demangling cache variable for type metadata for UUID?);
  v73 = OUTLINED_FUNCTION_260();
  outlined init with copy of UUID?(v73, v74, &demangling cache variable for type metadata for UUID?);
  v75 = v91;
  OUTLINED_FUNCTION_247(v71, 1);
  if (v38)
  {
    OUTLINED_FUNCTION_49_3(v60);
    OUTLINED_FUNCTION_49_3(v59);
    v76 = OUTLINED_FUNCTION_247(v72, 1);
    if (v38)
    {
      OUTLINED_FUNCTION_226(v76, &demangling cache variable for type metadata for UUID?);
      v63 = 1;
      return v63 & 1;
    }
  }
  else
  {
    v77 = v86;
    outlined init with copy of UUID?(v71, v86, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_247(v72, 1);
    v79 = v87;
    if (!v78)
    {
      v80 = v85;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v85, v72, v75);
      OUTLINED_FUNCTION_20_5(&lazy protocol witness table cache variable for type UUID and conformance UUID, v81, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v63 = dispatch thunk of static Equatable.== infix(_:_:)();
      v82 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
      v82(v80, v75);
      OUTLINED_FUNCTION_49_3(v60);
      OUTLINED_FUNCTION_49_3(v59);
      v83 = ((uint64_t (*)(uint64_t, uint64_t))v82)(v77, v75);
      OUTLINED_FUNCTION_226(v83, &demangling cache variable for type metadata for UUID?);
      return v63 & 1;
    }
    OUTLINED_FUNCTION_77_1(v60);
    OUTLINED_FUNCTION_77_1(v59);
    v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v77, v75);
  }
  OUTLINED_FUNCTION_226(v76, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_20:
  v63 = 0;
  return v63 & 1;
}

uint64_t static OnDeviceInferenceAssetObjectBaseModel.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;

  v5 = a1 == a4 && a2 == a5;
  if (!v5 && (OUTLINED_FUNCTION_198() & 1) == 0)
    return 0;
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for NSObject);
  OUTLINED_FUNCTION_260();
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t static OnDeviceInferenceAssetObjectUncompiled.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnDeviceInferenceAssetObjectBaseModel(uint64_t *a1, uint64_t *a2)
{
  return static OnDeviceInferenceAssetObjectBaseModel.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnDeviceInferenceAssetObjectUncompiled(uint64_t *a1, uint64_t *a2)
{
  return static OnDeviceInferenceAssetObjectUncompiled.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

void OnDeviceInferenceAssetRepository.resumeSuspendedFetch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char v75;
  unint64_t v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  char *v132;
  __int128 v133;
  ValueMetadata *v134;
  _UNKNOWN **v135;
  __int128 v136;
  ValueMetadata *v137;
  _UNKNOWN **v138;
  _QWORD *v139;
  uint64_t v140[11];
  __int128 v141;
  ValueMetadata *v142;
  _UNKNOWN **v143;

  OUTLINED_FUNCTION_51();
  v129 = OUTLINED_FUNCTION_4_4();
  v2 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  OUTLINED_FUNCTION_32_0();
  v125 = v3;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v4);
  v124 = (uint64_t)&v108 - v5;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v108 - v7;
  v9 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_209();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v108 - v13;
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v127 = (uint64_t *)v15;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (unint64_t)&v108 - v17;
  OUTLINED_FUNCTION_4_0();
  v111 = v0;
  v19 = *(_QWORD *)(v0 + 136);
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_55;
  v109 = v14;
  v110 = (uint64_t *)(v0 + 136);
  v132 = v8;
  v108 = v1;
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0((uint64_t)v20 + v19, v18, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  v21 = *(_QWORD *)v18;
  v22 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  v113 = v10;
  v114 = v18;
  v126 = v9;
  v123 = v2;
  v23 = v9;
  if (v22)
  {
    v131 = v20;
    v24 = (uint64_t *)(v111 + 120);
    OUTLINED_FUNCTION_64_1();
    OUTLINED_FUNCTION_4_0();
    v25 = v21 + 40;
    do
    {
      v26 = *v24;
      if (*(_QWORD *)(*v24 + 16))
      {
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_21_1();
        v27 = OUTLINED_FUNCTION_266();
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
        if ((v30 & 1) != 0)
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(v26 + 56) + 40 * v29, (uint64_t)&v141);
        else
          OUTLINED_FUNCTION_154();
        OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_42();
        if (v142)
        {
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v141, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
          OUTLINED_FUNCTION_19_6();
          if (one-time initialization token for device != -1)
            swift_once();
          v98 = OUTLINED_FUNCTION_15_4();
          v99 = __swift_project_value_buffer(v98, (uint64_t)static Log.device);
          OUTLINED_FUNCTION_18_3();
          Logger.logObject.getter();
          v100 = OUTLINED_FUNCTION_83_0();
          v101 = OUTLINED_FUNCTION_291(v99);
          v102 = v114;
          if (v101)
          {
            v103 = (uint8_t *)OUTLINED_FUNCTION_4_11();
            *(_QWORD *)&v141 = OUTLINED_FUNCTION_4_11();
            *(_DWORD *)v103 = 136315138;
            OUTLINED_FUNCTION_18_3();
            v104 = OUTLINED_FUNCTION_266();
            v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, v106);
            OUTLINED_FUNCTION_393(v107);
            OUTLINED_FUNCTION_140();
            OUTLINED_FUNCTION_26_5();
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v99, v100, "Cannot resume suspended fetch since asset %s is in use ", v103);
            OUTLINED_FUNCTION_34_3();
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_19_6();

          v97 = v102;
          goto LABEL_54;
        }
      }
      else
      {
        OUTLINED_FUNCTION_154();
        OUTLINED_FUNCTION_18_3();
      }
      v25 += 16;
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v141, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      OUTLINED_FUNCTION_20_2();
      --v22;
    }
    while (v22);
    OUTLINED_FUNCTION_19_6();
    v10 = v113;
    v18 = v114;
    v23 = v126;
    v2 = v123;
    v20 = v131;
  }
  v31 = *v110;
  v116 = *(_QWORD *)(*v110 + 16);
  if (!v116)
    goto LABEL_33;
  v130 = v111 + 112;
  v122 = v111 + 152;
  v115 = (char *)v20 + v31;
  OUTLINED_FUNCTION_57_0();
  v32 = 0;
  *(_QWORD *)&v33 = 136315394;
  v120 = v33;
  v119 = MEMORY[0x24BEE4AD8] + 8;
  v34 = v129;
  v35 = (uint64_t)v132;
  v112 = v31;
  do
  {
    if (v32 >= *(_QWORD *)(v31 + 16))
    {
      __break(1u);
      goto LABEL_57;
    }
    v36 = *(_QWORD *)(v10 + 72);
    v118 = v32;
    v37 = (uint64_t)&v115[v36 * v32];
    v38 = v127;
    _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v37, (uint64_t)v127, type metadata accessor for OnDeviceInferenceSuspendedFetch);
    v39 = *v38;
    v40 = *(_QWORD *)(v39 + 16);
    if (!v40)
      goto LABEL_31;
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_4_0();
    v117 = v39;
    v41 = (unint64_t *)(v39 + 40);
    do
    {
      v43 = *(v41 - 1);
      v42 = *v41;
      if (*(_QWORD *)(*(_QWORD *)v130 + 16))
      {
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_21_1();
        v44 = OUTLINED_FUNCTION_332(v43);
        if ((v45 & 1) != 0)
        {
          v46 = OUTLINED_FUNCTION_292(v44);
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v46, (uint64_t)&v141);
        }
        else
        {
          OUTLINED_FUNCTION_154();
        }
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_42();
        if (v142)
        {
          OUTLINED_FUNCTION_58_0();
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v141, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
          goto LABEL_29;
        }
      }
      else
      {
        OUTLINED_FUNCTION_154();
        OUTLINED_FUNCTION_57_0();
      }
      v128 = v43;
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v141, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      v47 = *(int *)(v23 + 24);
      if (one-time initialization token for device != -1)
        swift_once();
      v48 = (uint64_t)v127 + v47;
      v49 = OUTLINED_FUNCTION_15_4();
      __swift_project_value_buffer(v49, (uint64_t)static Log.device);
      v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
      v132 = (char *)v48;
      OUTLINED_FUNCTION_274(v35, v48, v131);
      OUTLINED_FUNCTION_57_0();
      v50 = Logger.logObject.getter();
      v51 = v35;
      v52 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v52))
      {
        v53 = OUTLINED_FUNCTION_4_11();
        v121 = OUTLINED_FUNCTION_4_11();
        *(_QWORD *)&v141 = v121;
        *(_DWORD *)v53 = v120;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v54 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v53 + 4) = OUTLINED_FUNCTION_316(v54, v55);
        OUTLINED_FUNCTION_42();
        (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v51, v129);
        *(_WORD *)(v53 + 12) = 2080;
        OUTLINED_FUNCTION_57_0();
        *(_QWORD *)(v53 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v42, (uint64_t *)&v141);
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_124_0(&dword_248CAA000, v50, v52, "Cancelling the request %s since the asset %s was unloaded", (uint8_t *)v53);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0_1();
      }
      v56 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v56(v51, v34);

      OUTLINED_FUNCTION_19_6();
      v35 = v51;
      v57 = v125;
      OUTLINED_FUNCTION_274(v125, (uint64_t)v132, v131);
      OUTLINED_FUNCTION_4_0();
      v58 = v124;
      specialized Set._Variant.insert(_:)(v124, v57);
      v56(v58, v34);
      OUTLINED_FUNCTION_322();
      v2 = v123;
      v23 = v126;
LABEL_29:
      v41 += 2;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
    v10 = v113;
    v18 = v114;
    v31 = v112;
LABEL_31:
    v32 = v118 + 1;
    outlined destroy of MaskedLanguageModel.SingleLogitCollection((uint64_t)v127, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  }
  while (v32 != v116);
  OUTLINED_FUNCTION_58_0();
LABEL_33:
  OUTLINED_FUNCTION_4_0();
  v59 = (uint64_t)v109;
  specialized RangeReplaceableCollection.removeFirst()((uint64_t)v109);
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v59, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  OUTLINED_FUNCTION_322();
  v60 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  if (v60)
  {
    v61 = (_QWORD *)(v111 + 120);
    v130 = swift_bridgeObjectRetain();
    v62 = (uint64_t *)(v130 + 40);
    while (1)
    {
      v132 = (char *)v60;
      v64 = *(v62 - 1);
      v63 = *v62;
      v142 = &type metadata for OnDeviceInferenceAssetInUsePlaceHolder;
      v143 = &protocol witness table for OnDeviceInferenceAssetInUsePlaceHolder;
      *(_QWORD *)&v141 = v64;
      *((_QWORD *)&v141 + 1) = v63;
      OUTLINED_FUNCTION_4_0();
      outlined init with take of LogitCollection(&v141, (uint64_t)v140);
      OUTLINED_FUNCTION_64_1();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v139 = (_QWORD *)*v61;
      *v61 = 0x8000000000000000;
      v66 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v140, v140[3]);
      v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))&v108;
      MEMORY[0x24BDAC7A8](v66);
      OUTLINED_FUNCTION_45_0();
      (*(void (**)(unint64_t))(v67 + 16))(v18);
      v68 = *(_QWORD *)v18;
      v69 = *(_QWORD *)(v18 + 8);
      v137 = &type metadata for OnDeviceInferenceAssetInUsePlaceHolder;
      v138 = &protocol witness table for OnDeviceInferenceAssetInUsePlaceHolder;
      *(_QWORD *)&v136 = v68;
      *((_QWORD *)&v136 + 1) = v69;
      OUTLINED_FUNCTION_387();
      OUTLINED_FUNCTION_238();
      v74 = (uint64_t *)(v72 + v73);
      if (__OFADD__(v72, v73))
        break;
      v18 = v70;
      v75 = v71;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v74))
      {
        v76 = OUTLINED_FUNCTION_387();
        if ((v75 & 1) != (v77 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        v18 = v76;
      }
      v78 = v139;
      if ((v75 & 1) != 0)
      {
        v79 = v139[7] + 40 * v18;
        __swift_destroy_boxed_opaque_existential_1(v79);
        outlined init with take of LogitCollection(&v136, v79);
      }
      else
      {
        v80 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v136, (uint64_t)v137);
        MEMORY[0x24BDAC7A8](v80);
        OUTLINED_FUNCTION_285();
        (*(void (**)(uint64_t *))(v81 + 16))(v74);
        v82 = *v74;
        v83 = v74[1];
        v134 = &type metadata for OnDeviceInferenceAssetInUsePlaceHolder;
        v135 = &protocol witness table for OnDeviceInferenceAssetInUsePlaceHolder;
        *(_QWORD *)&v133 = v82;
        *((_QWORD *)&v133 + 1) = v83;
        v78[(v18 >> 6) + 8] |= 1 << v18;
        v84 = (_QWORD *)(v78[6] + 16 * v18);
        *v84 = v64;
        v84[1] = v63;
        outlined init with take of LogitCollection(&v133, v78[7] + 40 * v18);
        v85 = v78[2];
        v86 = __OFADD__(v85, 1);
        v87 = v85 + 1;
        if (v86)
          goto LABEL_58;
        v78[2] = v87;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v136);
        OUTLINED_FUNCTION_122();
      }
      v62 += 2;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
      *v61 = v78;
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_42();
      swift_endAccess();
      v60 = (uint64_t)(v132 - 1);
      if (v132 == (char *)1)
      {
        swift_bridgeObjectRelease();
        v18 = v114;
        goto LABEL_45;
      }
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_once();
  }
  else
  {
LABEL_45:
    if (one-time initialization token for device != -1)
      goto LABEL_59;
  }
  v88 = OUTLINED_FUNCTION_15_4();
  __swift_project_value_buffer(v88, (uint64_t)static Log.device);
  v89 = v108;
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v18, v108, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  v90 = Logger.logObject.getter();
  v91 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_291(v90))
  {
    v92 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_QWORD *)&v141 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v92 = 136315138;
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v93, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v94 = dispatch thunk of CustomStringConvertible.description.getter();
    v96 = OUTLINED_FUNCTION_316(v94, v95);
    OUTLINED_FUNCTION_393(v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    outlined destroy of MaskedLanguageModel.SingleLogitCollection(v89, type metadata accessor for OnDeviceInferenceSuspendedFetch);
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v90, v91, "Resuming suspended fetch for request %s", v92);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v89, type metadata accessor for OnDeviceInferenceSuspendedFetch);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  CheckedContinuation.resume(returning:)();
  v97 = v18;
LABEL_54:
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v97, type metadata accessor for OnDeviceInferenceSuspendedFetch);
LABEL_55:
  OUTLINED_FUNCTION_31();
}

void OnDeviceInferenceAssetRepository.modelMetadataAtURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[120];

  OUTLINED_FUNCTION_218();
  OUTLINED_FUNCTION_180();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_52_3();
  OUTLINED_FUNCTION_276();
  OnDeviceInferenceProviderDataSource.modelMetadataAtURL(_:)((uint64_t)v2);
  OUTLINED_FUNCTION_273();
  outlined init with take of DefaultParameters?((uint64_t)v2, v0, &demangling cache variable for type metadata for ModelMetadata?);
  OUTLINED_FUNCTION_5_0();
}

void OnDeviceInferenceAssetRepository.adapterMetadataAtURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[128];

  OUTLINED_FUNCTION_218();
  OUTLINED_FUNCTION_180();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_52_3();
  OUTLINED_FUNCTION_276();
  OnDeviceInferenceProviderDataSource.adapterMetadataAtURL(_:)((uint64_t)v2);
  OUTLINED_FUNCTION_273();
  outlined init with take of DefaultParameters?((uint64_t)v2, v0, &demangling cache variable for type metadata for AdapterMetadata?);
  OUTLINED_FUNCTION_5_0();
}

uint64_t OnDeviceInferenceAssetRepository.tokenizerMetadataAtURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  type metadata accessor for URL();
  OUTLINED_FUNCTION_271();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_52_3();
  OUTLINED_FUNCTION_276();
  OnDeviceInferenceProviderDataSource.tokenizerMetadataAtURL(_:)();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_266();
  v4(v3);
  return v2;
}

void OnDeviceInferenceAssetRepository.specialTokensMap(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  outlined init with take of DefaultParameters?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ModelMetadata?);
  if (v7)
  {
    v3 = v8;
    if (v8)
    {
      v4 = *(_QWORD *)(a2 + 16);
      OUTLINED_FUNCTION_52();
      if (v4)
        v5 = v4;
      else
        v5 = Dictionary.init(dictionaryLiteral:)();
      OUTLINED_FUNCTION_21_1();
      specialized Dictionary.merging(_:uniquingKeysWith:)(v5, v3);
    }
  }
  OUTLINED_FUNCTION_268();
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

void OnDeviceInferenceAssetRepository.localizationOverrideMap(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  outlined init with take of DefaultParameters?(a1, (uint64_t)v8, &demangling cache variable for type metadata for ModelMetadata?);
  if (v9 && (v3 = v10) != 0)
  {
    OUTLINED_FUNCTION_57_0();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    v3 = Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRelease();
  }
  v4 = (_OWORD *)specialized _dictionaryUpCast<A, B, C, D>(_:)(v3);
  OUTLINED_FUNCTION_58_0();
  if (*(_QWORD *)(a2 + 120))
  {
    v5 = *(_QWORD *)(a2 + 120);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    v5 = Dictionary.init(dictionaryLiteral:)();
  }
  swift_bridgeObjectRetain();
  v6 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v5);
  OUTLINED_FUNCTION_20_2();
  v7 = OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(v4, v6);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_7_0();
  specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v7);
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_268();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = &demangling cache variable for type metadata for [String : MetadataSpecialToken];
  v11 = MEMORY[0x24BEE4AD8] + 8;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        v34 = (v5 - 1) & v5;
        v12 = __clz(__rbit64(v5)) | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_34;
        if (v13 >= v31)
        {
LABEL_31:
          outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
          return (unint64_t)v2;
        }
        v14 = *(_QWORD *)(v32 + 8 * v13);
        v15 = v9 + 1;
        if (!v14)
        {
          v15 = v9 + 2;
          if (v9 + 2 >= v31)
            goto LABEL_31;
          v14 = *(_QWORD *)(v32 + 8 * v15);
          if (!v14)
          {
            v15 = v9 + 3;
            if (v9 + 3 >= v31)
              goto LABEL_31;
            v14 = *(_QWORD *)(v32 + 8 * v15);
            if (!v14)
            {
              v15 = v9 + 4;
              if (v9 + 4 >= v31)
                goto LABEL_31;
              v14 = *(_QWORD *)(v32 + 8 * v15);
              if (!v14)
              {
                v16 = v9 + 5;
                if (v9 + 5 >= v31)
                  goto LABEL_31;
                v14 = *(_QWORD *)(v32 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_35;
                    if (v15 >= v31)
                      goto LABEL_31;
                    v14 = *(_QWORD *)(v32 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_25;
                  }
                }
                v15 = v9 + 5;
              }
            }
          }
        }
LABEL_25:
        v34 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
        v9 = v15;
      }
      v17 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
      v35 = *v17;
      v36 = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(v10);
      swift_dynamicCast();
      outlined init with take of Any(v6, v7);
      outlined init with take of Any(v7, v40);
      outlined init with take of Any(v40, &v38);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
      v18 = result;
      if ((v19 & 1) == 0)
        break;
      v33 = v9;
      v20 = v7;
      v21 = v6;
      v22 = v1;
      v23 = v11;
      v24 = v10;
      v25 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v25 = v35;
      v25[1] = v36;
      v10 = v24;
      v11 = v23;
      v1 = v22;
      v6 = v21;
      v7 = v20;
      v9 = v33;
      v26 = (_OWORD *)(v2[7] + 32 * v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      result = (unint64_t)outlined init with take of Any(&v38, v26);
      v5 = v34;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_33;
    v2[2] = v30;
    v5 = v34;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[32];
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[6];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : MetadataSpecialToken]>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  specialized _NativeDictionary.makeIterator()(a1, v40);
  v3 = v40[0];
  v4 = v40[3];
  v5 = v40[4];
  v32 = (unint64_t)(v40[2] + 64) >> 6;
  v33 = v40[1];
  v6 = &v39;
  result = swift_bridgeObjectRetain();
  v8 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any);
  v9 = &demangling cache variable for type metadata for [String : MetadataSpecialToken];
  v10 = MEMORY[0x24BEE4AD8] + 8;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v34 = (v5 - 1) & v5;
  v35 = v4;
  for (i = __clz(__rbit64(v5)) | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * i, (uint64_t)v6);
    v38[0] = v18;
    v38[1] = v17;
    outlined init with copy of Any((uint64_t)v6, (uint64_t)v37);
    swift_bridgeObjectRetain_n();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v38, v8);
    __swift_instantiateConcreteTypeFromMangledName(v9);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      swift_release();
      return 0;
    }
    result = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    v19 = result;
    if ((v20 & 1) != 0)
    {
      v21 = v10;
      v22 = v9;
      v23 = v6;
      v24 = v3;
      v25 = v8;
      v26 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v26 = v18;
      v26[1] = v17;
      v8 = v25;
      v3 = v24;
      v6 = v23;
      v9 = v22;
      v10 = v21;
      v27 = v2[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v27 + 8 * v19) = v36;
      goto LABEL_28;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v28 = (uint64_t *)(v2[6] + 16 * result);
    *v28 = v18;
    v28[1] = v17;
    *(_QWORD *)(v2[7] + 8 * result) = v36;
    v29 = v2[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_34;
    v2[2] = v31;
LABEL_28:
    v5 = v34;
    v4 = v35;
    if (v34)
      goto LABEL_5;
LABEL_6:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_35;
    if (v12 >= v32)
      goto LABEL_31;
    v13 = *(_QWORD *)(v33 + 8 * v12);
    v14 = v4 + 1;
    if (!v13)
    {
      v14 = v4 + 2;
      if (v4 + 2 >= v32)
        goto LABEL_31;
      v13 = *(_QWORD *)(v33 + 8 * v14);
      if (!v13)
      {
        v14 = v4 + 3;
        if (v4 + 3 >= v32)
          goto LABEL_31;
        v13 = *(_QWORD *)(v33 + 8 * v14);
        if (!v13)
        {
          v14 = v4 + 4;
          if (v4 + 4 >= v32)
            goto LABEL_31;
          v13 = *(_QWORD *)(v33 + 8 * v14);
          if (!v13)
          {
            v14 = v4 + 5;
            if (v4 + 5 >= v32)
              goto LABEL_31;
            v13 = *(_QWORD *)(v33 + 8 * v14);
            if (!v13)
            {
              v15 = v4 + 6;
              while (v15 < v32)
              {
                v13 = *(_QWORD *)(v33 + 8 * v15++);
                if (v13)
                {
                  v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    v34 = (v13 - 1) & v13;
    v35 = v14;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  BOOL v36;
  char v37;
  _OWORD *v38;
  char v39;
  __int128 *v40;
  char v41;
  char v42;
  char v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _OWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  _QWORD v61[2];
  __int128 v62;

  OUTLINED_FUNCTION_191();
  v6 = v5 & v4;
  v54 = (unint64_t)(v7 + 63) >> 6;
  v50 = v54 - 1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_52();
  v8 = 0;
  v53 = MEMORY[0x24BEE4AD8] + 8;
  if (!v6)
    goto LABEL_4;
LABEL_2:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
LABEL_3:
  v11 = *(_QWORD *)(a2 + 56);
  v12 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v10);
  v13 = v12[1];
  *(_QWORD *)&v59 = *v12;
  *((_QWORD *)&v59 + 1) = v13;
  outlined init with copy of Any(v11 + 32 * v10, (uint64_t)v60);
  OUTLINED_FUNCTION_21_1();
  while (1)
  {
    outlined init with take of DefaultParameters?((uint64_t)&v59, (uint64_t)v61, &demangling cache variable for type metadata for (key: String, value: Any)?);
    if (!v61[1])
      goto LABEL_51;
    outlined init with take of Any(&v62, &v59);
    if (!*((_QWORD *)a1 + 2))
    {
      v57 = 0u;
      v58 = 0u;
LABEL_36:
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v57, &demangling cache variable for type metadata for Any?);
      goto LABEL_37;
    }
    OUTLINED_FUNCTION_92_1();
    v17 = OUTLINED_FUNCTION_139();
    if ((v18 & 1) != 0)
    {
      OUTLINED_FUNCTION_338(*((_QWORD *)a1 + 7) + 32 * v17, v18, v19, v20, v21, v22, v23, v24, v50, v51, v52, v53, v54);
    }
    else
    {
      v57 = 0u;
      v58 = 0u;
    }
    OUTLINED_FUNCTION_161();
    if (!*((_QWORD *)&v58 + 1))
      goto LABEL_36;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
      break;
LABEL_37:
    OUTLINED_FUNCTION_338((uint64_t)&v59, v26, v27, v28, v29, v30, v31, v32, v50, v51, v52, v53, v54);
    OUTLINED_FUNCTION_102();
    *(_QWORD *)&v56[0] = a1;
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_339();
    if (v36)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v42 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    v38 = v56;
    if (OUTLINED_FUNCTION_331())
    {
      v38 = *(_OWORD **)&v56[0];
      OUTLINED_FUNCTION_377();
      if ((v42 & 1) != (v43 & 1))
        goto LABEL_57;
    }
    a1 = *(_OWORD **)&v56[0];
    if ((v42 & 1) == 0)
    {
      OUTLINED_FUNCTION_82_1();
      outlined init with take of Any(&v57, v44);
      v45 = *((_QWORD *)a1 + 2);
      v36 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      if (v36)
        goto LABEL_53;
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_249();
    v40 = &v57;
LABEL_42:
    outlined init with take of Any(v40, v38);
LABEL_45:
    OUTLINED_FUNCTION_161();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
    if (v6)
      goto LABEL_2;
LABEL_4:
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_54;
    if (v14 < v54)
    {
      v15 = *(_QWORD *)(v52 + 8 * v14);
      if (v15)
        goto LABEL_7;
      v16 = v8 + 2;
      ++v8;
      if (v14 + 1 < v54)
      {
        v15 = *(_QWORD *)(v52 + 8 * v16);
        if (v15)
          goto LABEL_10;
        v8 = v14 + 1;
        if (v14 + 2 < v54)
        {
          v15 = *(_QWORD *)(v52 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2;
            goto LABEL_7;
          }
          v16 = v14 + 3;
          v8 = v14 + 2;
          if (v14 + 3 < v54)
          {
            v15 = *(_QWORD *)(v52 + 8 * v16);
            if (v15)
            {
LABEL_10:
              v14 = v16;
LABEL_7:
              v6 = (v15 - 1) & v15;
              v10 = __clz(__rbit64(v15)) + (v14 << 6);
              v8 = v14;
              goto LABEL_3;
            }
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                break;
              if (v14 >= v54)
              {
                v8 = v50;
                goto LABEL_21;
              }
              v15 = *(_QWORD *)(v52 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_7;
            }
LABEL_56:
            __break(1u);
LABEL_57:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_21:
    v6 = 0;
    memset(v60, 0, sizeof(v60));
    v59 = 0u;
  }
  v33 = *(_QWORD *)&v56[0];
  OUTLINED_FUNCTION_338((uint64_t)&v59, v26, v27, v28, v29, v30, v31, v32, v50, v51, v52, v53, v54);
  if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_119_0();
    goto LABEL_37;
  }
  v34 = OnDeviceInferenceAssetRepository.mergeDicts(_:_:)(v33, *(_QWORD *)&v56[0]);
  OUTLINED_FUNCTION_119_0();
  OUTLINED_FUNCTION_51_1();
  *((_QWORD *)&v58 + 1) = v25;
  *(_QWORD *)&v57 = v34;
  outlined init with take of Any(&v57, v56);
  OUTLINED_FUNCTION_102();
  v55 = a1;
  OUTLINED_FUNCTION_139();
  OUTLINED_FUNCTION_339();
  if (v36)
    goto LABEL_55;
  v37 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  v38 = &v55;
  if (OUTLINED_FUNCTION_331())
  {
    v38 = v55;
    OUTLINED_FUNCTION_377();
    if ((v37 & 1) != (v39 & 1))
      goto LABEL_57;
  }
  a1 = v55;
  if ((v37 & 1) != 0)
  {
    OUTLINED_FUNCTION_249();
    v40 = v56;
    goto LABEL_42;
  }
  OUTLINED_FUNCTION_82_1();
  outlined init with take of Any(v56, v47);
  v48 = *((_QWORD *)a1 + 2);
  v36 = __OFADD__(v48, 1);
  v46 = v48 + 1;
  if (!v36)
  {
LABEL_44:
    *((_QWORD *)a1 + 2) = v46;
    OUTLINED_FUNCTION_92_1();
    goto LABEL_45;
  }
  __break(1u);
LABEL_51:
  swift_release();
  return (uint64_t)a1;
}

void OnDeviceInferenceAssetRepository.modelConfigurationWithURL(_:adapterResourceInformation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  void (*isa)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  id v120;
  id v121;
  id v122;
  _QWORD *v123;
  uint64_t v124;
  os_log_type_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t);
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Swift::String v146;
  Swift::String v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t);
  uint64_t v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  void (*v194)(uint64_t, uint64_t);
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202[2];
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  unsigned __int8 v211;
  __int128 v212;
  __int128 v213;
  void (*v214)(uint64_t);
  unint64_t v215[9];

  OUTLINED_FUNCTION_50_4();
  v180 = v4;
  v181 = v1;
  v198 = v0;
  v188 = v5;
  v189 = v6;
  v195 = v7;
  v191 = v8;
  v10 = v9;
  v184 = OUTLINED_FUNCTION_171();
  v186 = *(_QWORD *)(v184 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_31_0();
  v185 = v12;
  v13 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_271();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_45_0();
  v15 = type metadata accessor for URL();
  v16 = *(NSObject **)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_32_0();
  v192 = v17;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v169 - v19;
  strcpy((char *)v202, "model.bundle");
  BYTE5(v202[1]) = 0;
  HIWORD(v202[1]) = -5120;
  LODWORD(v196) = *MEMORY[0x24BDCD7A0];
  v214 = *(void (**)(uint64_t))(v2 + 104);
  v214(v3);
  v194 = (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)();
  v193 = *(NSObject **)(v2 + 8);
  ((void (*)(uint64_t, uint64_t))v193)(v3, v13);
  OUTLINED_FUNCTION_236();
  v197 = URL.path.getter();
  v22 = v21;
  v190 = v16;
  isa = (void (*)(char *, uint64_t))v16[1].isa;
  isa(v20, v15);
  strcpy((char *)v202, "model.mil");
  WORD1(v202[1]) = 0;
  HIDWORD(v202[1]) = -385875968;
  ((void (*)(uint64_t, _QWORD, uint64_t))v214)(v3, v196, v13);
  v215[0] = v10;
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(uint64_t, uint64_t))v193)(v3, v13);
  OUTLINED_FUNCTION_236();
  v24 = URL.path.getter();
  v26 = v25;
  v196 = v15;
  v27 = v15;
  v28 = v198;
  v194 = (void (*)(uint64_t, uint64_t))isa;
  isa(v20, v27);
  v29 = v197;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v28 + 160), *(_QWORD *)(v28 + 184));
  v30._countAndFlagsBits = v29;
  v30._object = v22;
  if (OnDeviceInferenceProviderDataSource.fileExists(atPath:)(v30))
  {
    v183 = v22;
    OUTLINED_FUNCTION_119_0();
    v31 = v29;
  }
  else
  {
    OUTLINED_FUNCTION_116_0();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v28 + 160), *(_QWORD *)(v28 + 184));
    v32._countAndFlagsBits = OUTLINED_FUNCTION_416();
    if (!OnDeviceInferenceProviderDataSource.fileExists(atPath:)(v32))
    {
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_32_4();
      v35 = v185;
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v51, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      v52 = OUTLINED_FUNCTION_54_2();
      v54 = OUTLINED_FUNCTION_211(v52, v53);
      goto LABEL_16;
    }
    v31 = v24;
    v183 = v26;
  }
  OnDeviceInferenceAssetRepository.modelMetadataAtURL(_:)();
  outlined init with take of DefaultParameters?((uint64_t)&v203, (uint64_t)&v204, &demangling cache variable for type metadata for ModelMetadata?);
  v33 = v205;
  v34 = MEMORY[0x24BEE4AD8];
  v179 = v205;
  if (!v205)
  {
    if (one-time initialization token for device != -1)
      goto LABEL_87;
    goto LABEL_13;
  }
  v178 = v31;
  v35 = v204;
  v31 = v206;
  v36 = v207;
  v24 = v210;
  v37 = v211;
  v38 = v204 == 7696487 && v205 == (void *)0xE300000000000000;
  v176 = v208;
  v177 = v207;
  v174 = v212;
  v175 = v209;
  v173 = v213;
  if (!v38)
  {
    if ((OUTLINED_FUNCTION_182() & 1) != 0)
    {
      v39 = 2;
LABEL_26:
      v169 = v39;
      v36 = v177;
      goto LABEL_27;
    }
    v69 = v35 == 6647393 && v33 == (void *)0xE300000000000000;
    if (v69 || (OUTLINED_FUNCTION_182() & 1) != 0)
    {
      v39 = 1;
      goto LABEL_26;
    }
    OUTLINED_FUNCTION_74_1();
    OUTLINED_FUNCTION_414();
    OUTLINED_FUNCTION_320();
    if (one-time initialization token for device != -1)
      swift_once();
    v157 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_230(v157, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v158 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_25_0(v158))
    {
      v159 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v202[0] = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v159 = 136315138;
      v160 = OUTLINED_FUNCTION_74_1();
      v162 = OUTLINED_FUNCTION_341(v160, v161, v202);
      OUTLINED_FUNCTION_421(v162);
      OUTLINED_FUNCTION_254();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, 0xE300000000000000, (os_log_type_t)v31, "Failed to handle model of type %s", v159);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    v202[0] = 0;
    v202[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    OUTLINED_FUNCTION_236();
    OUTLINED_FUNCTION_360(0xD000000000000015);
    v163._countAndFlagsBits = v35;
    v163._object = v33;
    String.append(_:)(v163);
    OUTLINED_FUNCTION_116_0();
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_419();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v164, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    v165 = OUTLINED_FUNCTION_54_2();
    v54 = OUTLINED_FUNCTION_211(v165, v166);
LABEL_16:
    v57 = OUTLINED_FUNCTION_26_0(v54, v55, v56);
    OUTLINED_FUNCTION_178(v57, *MEMORY[0x24BE68948]);
    OUTLINED_FUNCTION_79_0();
    OUTLINED_FUNCTION_61_4(v35, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    goto LABEL_79;
  }
  v169 = 2;
LABEL_27:
  v170 = v37;
  v171 = v24;
  v172 = v35;
  v70 = MEMORY[0x24BEE4B08];
  v201 = MEMORY[0x24BEE4B08];
  if (v36)
    v198 = v36;
  else
    v198 = Dictionary.init(dictionaryLiteral:)();
  v200 = v70;
  v192 = v198 + 64;
  OUTLINED_FUNCTION_191();
  v215[0] = v72 & v71;
  v193 = ((unint64_t)(v73 + 63) >> 6);
  swift_bridgeObjectRetain();
  v74 = 0;
  *(_QWORD *)&v75 = 136315394;
  v187 = v75;
  v182 = v34 + 8;
  v194 = (void (*)(uint64_t, uint64_t))v31;
  while (v215[0])
  {
    v76 = v31;
    v77 = __clz(__rbit64(v215[0]));
    v215[0] &= v215[0] - 1;
    v78 = v77 | (v74 << 6);
LABEL_47:
    v82 = (uint64_t *)(*(_QWORD *)(v198 + 48) + 16 * v78);
    v84 = *v82;
    v83 = v82[1];
    v85 = (uint64_t *)(*(_QWORD *)(v198 + 56) + 32 * v78);
    v87 = *v85;
    v86 = (void *)v85[1];
    v89 = v85[2];
    v88 = v85[3];
    if (v86)
    {
      v196 = v85[2];
      v197 = v88;
      if (v195)
      {
        v90 = v87 == v191 && v86 == v195;
        v31 = v76;
        if (v90 || (OUTLINED_FUNCTION_342(), (OUTLINED_FUNCTION_198() & 1) != 0))
        {
          if (!v76)
          {
            OUTLINED_FUNCTION_320();
            OUTLINED_FUNCTION_414();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (one-time initialization token for device != -1)
              swift_once();
            v124 = OUTLINED_FUNCTION_15_4();
            OUTLINED_FUNCTION_230(v124, (uint64_t)static Log.device);
            Logger.logObject.getter();
            v125 = OUTLINED_FUNCTION_21_3();
            v126 = OUTLINED_FUNCTION_135(v125);
            v127 = v184;
            if (v126)
            {
              v128 = (uint8_t *)OUTLINED_FUNCTION_4_11();
              *(_WORD *)v128 = 0;
              _os_log_impl(&dword_248CAA000, (os_log_t)v74, OS_LOG_TYPE_DEFAULT, "Metadata json is missing adapter type to symbol mapping", v128, 2u);
              OUTLINED_FUNCTION_0_1();
            }

            OUTLINED_FUNCTION_32_4();
            v129 = v185;
            OUTLINED_FUNCTION_5_9();
            OUTLINED_FUNCTION_66_3();
            OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v130, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
            v131 = OUTLINED_FUNCTION_54_2();
            v133 = OUTLINED_FUNCTION_256(v131, v132);
            v135 = v134(v133);
            OUTLINED_FUNCTION_178(v135, *MEMORY[0x24BE68948]);
            OUTLINED_FUNCTION_79_0();
            MEMORY[8](v129, v127);
            goto LABEL_78;
          }
          v91 = v84;
          v92 = *(_QWORD *)(v31 + 16);
          OUTLINED_FUNCTION_122();
          if (!v92)
          {
            OUTLINED_FUNCTION_50_1();
            OUTLINED_FUNCTION_65_0();
LABEL_73:
            OUTLINED_FUNCTION_320();
            OUTLINED_FUNCTION_51_1();
            OUTLINED_FUNCTION_414();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (one-time initialization token for device != -1)
              swift_once();
            v136 = OUTLINED_FUNCTION_15_4();
            v137 = __swift_project_value_buffer(v136, (uint64_t)static Log.device);
            OUTLINED_FUNCTION_64_1();
            OUTLINED_FUNCTION_64_1();
            Logger.logObject.getter();
            v138 = OUTLINED_FUNCTION_21_3();
            if (OUTLINED_FUNCTION_135(v138))
            {
              v139 = OUTLINED_FUNCTION_4_11();
              v197 = OUTLINED_FUNCTION_4_11();
              v202[0] = v197;
              *(_DWORD *)v139 = v187;
              OUTLINED_FUNCTION_122();
              v140 = OUTLINED_FUNCTION_342();
              v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v142);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_26_5();
              *(_WORD *)(v139 + 12) = 2080;
              v196 = v139 + 14;
              OUTLINED_FUNCTION_65_0();
              v143 = Dictionary.description.getter();
              OUTLINED_FUNCTION_50_2();
              v199 = OUTLINED_FUNCTION_269(v143, v144, v202);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_19_6();
              OUTLINED_FUNCTION_119_0();
              OUTLINED_FUNCTION_124_0(&dword_248CAA000, v137, (os_log_type_t)v84, "Failed to get symbol for adapter type %s from %s", (uint8_t *)v139);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_0_1();
            }

            OUTLINED_FUNCTION_19_6();
            OUTLINED_FUNCTION_19_6();
            v145 = v184;
            v202[0] = 0;
            v202[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(29);
            OUTLINED_FUNCTION_236();
            OUTLINED_FUNCTION_360(0xD000000000000015);
            v146._countAndFlagsBits = v87;
            v146._object = v86;
            String.append(_:)(v146);
            OUTLINED_FUNCTION_63_0();
            v147._countAndFlagsBits = 544106784;
            v147._object = (void *)0xE400000000000000;
            String.append(_:)(v147);
            v148 = MEMORY[0x24BEE0D00];
            v149 = MEMORY[0x24BEE0D10];
            v150._countAndFlagsBits = Dictionary.description.getter();
            String.append(_:)(v150);
            OUTLINED_FUNCTION_116_0();
            OUTLINED_FUNCTION_51_1();
            Dictionary.init(dictionaryLiteral:)();
            OUTLINED_FUNCTION_419();
            OUTLINED_FUNCTION_5_9();
            v151 = OUTLINED_FUNCTION_66_3();
            OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v152, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
            v153 = OUTLINED_FUNCTION_54_2();
            v155 = OUTLINED_FUNCTION_256(v153, v154);
            v156(v155);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v151 - 8) + 104))(v148, *MEMORY[0x24BE68948], v151);
            OUTLINED_FUNCTION_257();
            (*(void (**)(void *, uint64_t))(v149 + 8))(v86, v145);
LABEL_78:
            swift_release();
            goto LABEL_79;
          }
          OUTLINED_FUNCTION_122();
          OUTLINED_FUNCTION_50_1();
          OUTLINED_FUNCTION_65_0();
          v93 = OUTLINED_FUNCTION_342();
          v95 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v94);
          if ((v96 & 1) == 0)
          {
            OUTLINED_FUNCTION_63_0();
            goto LABEL_73;
          }
          v97 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 16 * v95);
          v99 = *v97;
          v98 = v97[1];
          OUTLINED_FUNCTION_65_0();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_63_0();
          v100 = objc_allocWithZone((Class)TGIE5FunctionObjC);
          OUTLINED_FUNCTION_122();
          v101 = @nonobjc TGIE5FunctionObjC.init(name:queryLength:contextSize:adapterType:)(v91, v83, v196, v197, v87, (uint64_t)v86);
          specialized Set._Variant.insert(_:)(v202, v101);
          OUTLINED_FUNCTION_289();
          v102 = objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
          v103 = v189;
          OUTLINED_FUNCTION_18_3();
          v104 = OUTLINED_FUNCTION_342();
          v105 = v98;
          v31 = (uint64_t)v194;
          v107 = @nonobjc TGIE5AdapterConfigurationObjC.init(adapterType:symbolName:mutableWeightsFilePath:)(v104, v106, v99, v105, v188, v103);
          specialized Set._Variant.insert(_:)(v202, v107);

          OUTLINED_FUNCTION_289();
        }
      }
      else
      {
        v190 = v74;
        v110 = one-time initialization token for device;
        OUTLINED_FUNCTION_122();
        OUTLINED_FUNCTION_50_1();
        if (v110 != -1)
          swift_once();
        v111 = OUTLINED_FUNCTION_15_4();
        v112 = __swift_project_value_buffer(v111, (uint64_t)static Log.device);
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_64_1();
        Logger.logObject.getter();
        v113 = OUTLINED_FUNCTION_83_0();
        if (OUTLINED_FUNCTION_25_0(v113))
        {
          v114 = OUTLINED_FUNCTION_4_11();
          v202[0] = OUTLINED_FUNCTION_4_11();
          *(_DWORD *)v114 = v187;
          v115 = OUTLINED_FUNCTION_50_1();
          *(_QWORD *)(v114 + 4) = OUTLINED_FUNCTION_365(v115, v116, v202);
          OUTLINED_FUNCTION_26_5();
          *(_WORD *)(v114 + 12) = 2080;
          OUTLINED_FUNCTION_122();
          v117 = OUTLINED_FUNCTION_270();
          *(_QWORD *)(v114 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v119);
          OUTLINED_FUNCTION_26_5();
          OUTLINED_FUNCTION_124_0(&dword_248CAA000, v112, (os_log_type_t)v88, "E5 function %s specifies adapter type %s but resource information was not provided", (uint8_t *)v114);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }

        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_19_6();
        v31 = (uint64_t)v194;
        v120 = objc_allocWithZone((Class)TGIE5FunctionObjC);
        v121 = @nonobjc TGIE5FunctionObjC.init(name:queryLength:contextSize:adapterType:)(v84, v83, v196, v197, v87, (uint64_t)v86);
        OUTLINED_FUNCTION_272(v121);
        OUTLINED_FUNCTION_289();
        v74 = (uint64_t)v190;
      }
    }
    else
    {
      v108 = objc_allocWithZone((Class)TGIE5FunctionObjC);
      OUTLINED_FUNCTION_50_1();
      v109 = @nonobjc TGIE5FunctionObjC.init(name:queryLength:contextSize:adapterType:)(v84, v83, v89, v88, v87, 0);
      OUTLINED_FUNCTION_272(v109);
      OUTLINED_FUNCTION_289();
      v31 = v76;
    }
  }
  v79 = v74 + 1;
  if (__OFADD__(v74, 1))
  {
    __break(1u);
    goto LABEL_86;
  }
  if (v79 >= (uint64_t)v193)
    goto LABEL_64;
  v80 = *(_QWORD *)(v192 + 8 * v79);
  ++v74;
  if (v80)
    goto LABEL_46;
  v74 = v79 + 1;
  if (v79 + 1 >= (uint64_t)v193)
    goto LABEL_64;
  v80 = *(_QWORD *)(v192 + 8 * v74);
  if (v80)
    goto LABEL_46;
  v74 = v79 + 2;
  if (v79 + 2 >= (uint64_t)v193)
    goto LABEL_64;
  v80 = *(_QWORD *)(v192 + 8 * v74);
  if (v80)
  {
LABEL_46:
    v76 = v31;
    v215[0] = (v80 - 1) & v80;
    v78 = __clz(__rbit64(v80)) + (v74 << 6);
    goto LABEL_47;
  }
  v81 = v79 + 3;
  if (v81 >= (uint64_t)v193)
  {
LABEL_64:
    swift_release();
    v122 = objc_allocWithZone((Class)TGIMutableE5ModelConfigurationObjC);
    v59 = OUTLINED_FUNCTION_222(v169, v178);
    v68 = v179;
    v61 = v171;
    v60 = v172;
    v62 = v170;
    v64 = v176;
    v63 = v177;
    v66 = v174;
    v65 = v175;
    v67 = v173;
    goto LABEL_65;
  }
  v80 = *(_QWORD *)(v192 + 8 * v81);
  if (v80)
  {
    v74 = v81;
    goto LABEL_46;
  }
  while (1)
  {
    v74 = v81 + 1;
    if (__OFADD__(v81, 1))
      break;
    if (v74 >= (uint64_t)v193)
      goto LABEL_64;
    v80 = *(_QWORD *)(v192 + 8 * v74);
    ++v81;
    if (v80)
      goto LABEL_46;
  }
LABEL_86:
  __break(1u);
LABEL_87:
  swift_once();
LABEL_13:
  v40 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_230(v40, (uint64_t)static Log.device);
  v41 = v192;
  ((void (*)(uint64_t, unint64_t, uint64_t))v190[2].isa)(v192, v215[0], v196);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = OUTLINED_FUNCTION_4_11();
    v45 = v196;
    v46 = (uint8_t *)v44;
    v202[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v46 = 136315138;
    v178 = v31;
    OUTLINED_FUNCTION_20_5(&lazy protocol witness table cache variable for type URL and conformance URL, v47, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v48 = OUTLINED_FUNCTION_370();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v202);
    OUTLINED_FUNCTION_421(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    v194(v192, v45);
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v42, v43, "Falling back to default configuration, metadata json not found for model at url: %s", v46);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  v194(v41, v196);

  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
  {
    v167 = v31;
    v168 = MEMORY[0x24BEE4AF8];
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>, &lazy cache variable for type metadata for TGIE5FunctionObjC);
      v31 = v167;
    }
    else
    {
      v38 = (v168 & 0xC000000000000000) == 0;
      v31 = v167;
      if (v38)
        goto LABEL_19;
    }
    if (_CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _SetStorage<TGIE5AdapterConfigurationObjC>, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  }
LABEL_19:
  v58 = objc_allocWithZone((Class)TGIMutableE5ModelConfigurationObjC);
  v59 = OUTLINED_FUNCTION_222(0, v31);
  v60 = 0;
  v31 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0uLL;
  v64 = 0uLL;
  v65 = 0uLL;
  v66 = 0uLL;
  v67 = 0uLL;
  v68 = v179;
LABEL_65:
  v123 = v180;
  *v180 = v59;
  v123[1] = v60;
  v123[2] = v68;
  v123[3] = v31;
  *((_OWORD *)v123 + 2) = v63;
  *((_OWORD *)v123 + 3) = v64;
  *((_OWORD *)v123 + 4) = v65;
  v123[10] = v61;
  v123[11] = v62;
  *((_OWORD *)v123 + 6) = v66;
  *((_OWORD *)v123 + 7) = v67;
LABEL_79:
  OUTLINED_FUNCTION_10_9();
}

void OnDeviceInferenceAssetRepository.handleLLMModel(identifier:url:useEnergyEfficientMode:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  unsigned int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  id v39;
  id v40;
  ValueMetadata *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  ValueMetadata *v48;
  _UNKNOWN **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  OUTLINED_FUNCTION_50_4();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v52 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_347();
  OnDeviceInferenceAssetRepository.modelConfigurationWithURL(_:adapterResourceInformation:)();
  if (!v0)
  {
    v41 = (ValueMetadata *)v8;
    v44 = v51;
    objc_msgSend(v45, sel_setUseEnergyEfficientMode_, v3 & 1);
    v43 = (uint64_t)v7;
    v10 = (void *)MEMORY[0x2495A9A78](v7, v5);
    objc_msgSend(v45, sel_setAssetIdentifier_, v10);

    v11 = objc_msgSend(v45, sel_e5Functions);
    type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
    v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.contains(where:)(v12);
    v14 = v13;
    OUTLINED_FUNCTION_50_2();
    if ((v14 & 1) != 0 && objc_msgSend(v45, sel_modelType) == (id)1)
    {
      v15 = OUTLINED_FUNCTION_27_3();
      OUTLINED_FUNCTION_70_3(v15, v16);
      if (one-time initialization token for device != -1)
        swift_once();
      v17 = OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_230(v17, (uint64_t)static Log.device);
      v18 = v45;
      Logger.logObject.getter();
      v19 = OUTLINED_FUNCTION_83_0();
      if (OUTLINED_FUNCTION_39_2(v19))
      {
        v20 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        v21 = (_QWORD *)OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v20 = 138412290;
        v45 = v18;
        v22 = v18;
        OUTLINED_FUNCTION_327();
        *v21 = v18;

        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v14, (os_log_type_t)v5, "Creating asset object for ane base model with configuration %@", v20);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      v31 = objc_msgSend(objc_allocWithZone((Class)TGIE5BaseModelObjC), sel_initWithModelConfiguration_, v18);
      v45 = 0;
      v32 = objc_msgSend(v31, sel_load_, &v45);
      v33 = v45;
      if (v32)
      {
        v48 = &type metadata for OnDeviceInferenceAssetObjectBaseModel;
        v49 = &protocol witness table for OnDeviceInferenceAssetObjectBaseModel;
        v45 = v7;
        v46 = v5;
        v47 = (uint64_t)v31;
        OUTLINED_FUNCTION_4_0();
        OUTLINED_FUNCTION_64_1();
        v34 = v33;
        v35 = v31;
        specialized Dictionary.subscript.setter((uint64_t)&v45, (uint64_t)v7, v5);
        swift_endAccess();

      }
      else
      {
        v36 = v45;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v23 = OUTLINED_FUNCTION_15_4();
      v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.device);
      OUTLINED_FUNCTION_64_1();
      Logger.logObject.getter();
      v25 = OUTLINED_FUNCTION_83_0();
      if (OUTLINED_FUNCTION_242(v25))
      {
        v26 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        v45 = (id)OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v26 = 136315138;
        OUTLINED_FUNCTION_85_1();
        OUTLINED_FUNCTION_269(v43, v27, (uint64_t *)&v45);
        OUTLINED_FUNCTION_392();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v24, (os_log_type_t)off_2519DD2F8, "Creating e5Runner model for mc asset with identifier %s", v26);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      v28 = v50;
      objc_allocWithZone((Class)E5RunnerObjC);
      v29 = v45;
      v30 = @nonobjc E5RunnerObjC.init(modelConfiguration:)(v29);
      ObjC metadata update function for E5TransformerLanguageModel();
      v40 = v30;
      v42 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v40, 0);
      if (v47)
      {
        OUTLINED_FUNCTION_74_1();
        OUTLINED_FUNCTION_50_1();
        OUTLINED_FUNCTION_70_3(v46, v47);
      }
      else
      {
        v44 = 0;
        v28 = 0;
      }
      v37 = OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_100_0(v37);
      *(_QWORD *)v1 = v7;
      *(_QWORD *)(v1 + 8) = v5;
      *(_QWORD *)(v1 + 16) = v40;
      *(_QWORD *)(v1 + 24) = v42;
      *(_OWORD *)(v1 + 32) = xmmword_248D766A0;
      *(_QWORD *)(v1 + 48) = 0;
      *(_QWORD *)(v1 + 56) = 0;
      *(_QWORD *)(v1 + 61) = 0;
      *(_QWORD *)(v1 + 72) = v28;
      *(_QWORD *)(v1 + 80) = 0;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 2;
      *(_QWORD *)(v1 + 104) = 0;
      *(_QWORD *)(v1 + 112) = 0;
      *(_QWORD *)(v1 + 117) = 0;
      *(_QWORD *)(v1 + 128) = v44;
      v48 = v41;
      v49 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v45);
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_64_1();
      v39 = v40;
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)&v45, (uint64_t)v7, v5);
      swift_endAccess();

      swift_release();
      outlined destroy of MaskedLanguageModel.SingleLogitCollection(v1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    }
  }
  OUTLINED_FUNCTION_10_9();
}

void OnDeviceInferenceAssetRepository.handleTokenizer(identifier:url:)()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];

  OUTLINED_FUNCTION_50_4();
  v4 = v0;
  v6 = v5;
  v25 = v7;
  v8 = type metadata accessor for URL();
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_45_0();
  if (one-time initialization token for device != -1)
    swift_once();
  v10 = OUTLINED_FUNCTION_15_4();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v12 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_135(v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v28[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v13 = 136315138;
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_199(v25, v14, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v11, v2, "Creating tokenizer for mc asset with identifier %s", v13);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  v15 = OnDeviceInferenceAssetRepository.tokenizerMetadataAtURL(_:)();
  v17 = v16;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + 160), *(_QWORD *)(v4 + 184));
  URL.appendingPathComponent(_:)();
  v18 = URL.path.getter();
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v3, v27);
  v21 = OnDeviceInferenceProviderDataSource.createTokenizer(tokenizerPath:metadata:)(v18, v20, v15);
  if (v1)
  {
    outlined consume of TokenizerMetadata?(v15);
    OUTLINED_FUNCTION_119_0();
  }
  else
  {
    v22 = v21;
    OUTLINED_FUNCTION_119_0();
    if (v15 == 1)
    {
      v17 = 0;
      v23 = 0;
    }
    else
    {
      v23 = v15;
    }
    v28[3] = (uint64_t)&type metadata for OnDeviceInferenceAssetObjectTokenizer;
    v28[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectTokenizer;
    v24 = (_QWORD *)OUTLINED_FUNCTION_314();
    v28[0] = (uint64_t)v24;
    v24[2] = v25;
    v24[3] = v6;
    v24[4] = v22;
    v24[5] = v23;
    v24[6] = v17;
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_57_0();
    OUTLINED_FUNCTION_64_1();
    swift_retain();
    OUTLINED_FUNCTION_85_1();
    specialized Dictionary.subscript.setter((uint64_t)v28, v25, v6);
    swift_endAccess();
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_119_0();
    swift_release();
  }
  OUTLINED_FUNCTION_10_9();
}

void OnDeviceInferenceAssetRepository.handleLLMAdapter(identifier:dependentResourceIDs:url:useEnergyEfficientMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  NSObject *v40;
  os_log_type_t v41;
  char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t *v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t (**v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(_QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  id v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _UNKNOWN **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  char *v98;
  NSObject *v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  uint64_t v103;
  NSObject *v104;
  BOOL v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v113;
  NSObject *v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (**v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  NSObject *v154;
  void (**v155)(_QWORD, _QWORD);
  id v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (**v167)(uint64_t, uint64_t, uint64_t);
  void (**v168)(_QWORD, _QWORD);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (**v174)(uint64_t, uint64_t, uint64_t);
  _QWORD v175[3];
  unint64_t v176;
  uint64_t v177;
  _UNKNOWN **v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (**v199)(uint64_t, uint64_t, uint64_t);
  id v200;
  NSObject *v201;
  uint64_t v202;
  void (**v203)(_QWORD, _QWORD);
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207[2];
  uint64_t v208;
  _QWORD v209[5];
  void (**v210)(_QWORD, _QWORD);
  unint64_t v211;
  char *v212;
  uint64_t v213;
  _UNKNOWN **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE v230[128];
  _QWORD v231[16];
  uint64_t v232;
  _QWORD v233[17];
  uint64_t v234;

  OUTLINED_FUNCTION_50_4();
  v2 = v1;
  v234 = v0;
  LODWORD(v189) = v3;
  v205 = v4;
  v197 = v5;
  v7 = v6;
  v9 = v8;
  v10 = (_QWORD *)OUTLINED_FUNCTION_171();
  v199 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))*(v10 - 1);
  v200 = v10;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_32_0();
  v198 = v12;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_188();
  v188 = v14;
  v186 = OUTLINED_FUNCTION_282();
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_31_0();
  v187 = v16;
  v17 = OUTLINED_FUNCTION_129_0();
  v203 = *(void (***)(_QWORD, _QWORD))(v17 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v18);
  v195 = (char *)v175 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  v191 = v21;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_188();
  v192 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_32_0();
  v194 = v25;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v26);
  v190 = (uint64_t)v175 - v27;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_188();
  v204 = v29;
  if (one-time initialization token for device != -1)
    swift_once();
  v30 = OUTLINED_FUNCTION_15_4();
  v31 = __swift_project_value_buffer(v30, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  v201 = v31;
  Logger.logObject.getter();
  v32 = OUTLINED_FUNCTION_83_0();
  v33 = OUTLINED_FUNCTION_229(v31);
  v202 = v17;
  v196 = v7;
  v193 = v9;
  if (v33)
  {
    v34 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v210 = (void (**)(_QWORD, _QWORD))OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v34 = 136315138;
    OUTLINED_FUNCTION_85_1();
    v36 = OUTLINED_FUNCTION_269(v9, v35, (uint64_t *)&v210);
    OUTLINED_FUNCTION_103_1(v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v31, v32, "Creating asset object for adapter with identifier %s", v34);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  OnDeviceInferenceAssetRepository.adapterMetadataAtURL(_:)();
  outlined init with take of DefaultParameters?((uint64_t)&v229, (uint64_t)v230, &demangling cache variable for type metadata for AdapterMetadata?);
  if (_s24TokenGenerationInference15AdapterMetadataVSgWOg((uint64_t)v230) == 1)
  {
    v37 = v195;
    v38 = OUTLINED_FUNCTION_416();
    v39(v38);
    v40 = OUTLINED_FUNCTION_224();
    v41 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_229(v40))
    {
      v42 = v37;
      v43 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v210 = (void (**)(_QWORD, _QWORD))OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v43 = 136315138;
      OUTLINED_FUNCTION_20_5(&lazy protocol witness table cache variable for type URL and conformance URL, v44, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v45 = OUTLINED_FUNCTION_370();
      v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v210);
      OUTLINED_FUNCTION_103_1(v47);
      OUTLINED_FUNCTION_327();
      OUTLINED_FUNCTION_42();
      ((void (**)(char *, uint64_t))v203)[1](v42, v17);
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v40, v41, "Failed to read adapter metadata json: %s", v43);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    v60 = OUTLINED_FUNCTION_418();
    v61(v60);

    v62 = v199;
    v210 = 0;
    v211 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_294();
    v210 = (void (**)(_QWORD, _QWORD))(v63 + 12);
    v211 = 0x8000000248D7F920;
    OUTLINED_FUNCTION_20_5(&lazy protocol witness table cache variable for type URL and conformance URL, v64, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v65._countAndFlagsBits = OUTLINED_FUNCTION_370();
    String.append(_:)(v65);
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_32_4();
    v66 = v198;
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v67, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    OUTLINED_FUNCTION_54_2();
    v69 = OUTLINED_FUNCTION_26_0(v68, v66, v62[2]);
    OUTLINED_FUNCTION_3_9(v69, *MEMORY[0x24BE68948]);
    OUTLINED_FUNCTION_257();
    OUTLINED_FUNCTION_61_4(v66, (uint64_t (*)(uint64_t, uint64_t))v62[1]);
    goto LABEL_28;
  }
  memcpy(v231, v230, sizeof(v231));
  v185 = v231[0];
  v48 = (char *)v231[1];
  v49 = v204;
  OUTLINED_FUNCTION_118_0();
  __swift_storeEnumTagSinglePayload(v50, v51, v52, v17);
  v53 = v197;
  v54 = *(_QWORD *)(v197 + 16);
  v55 = &loc_248D72000;
  v195 = v48;
  if (!v54)
  {
    OUTLINED_FUNCTION_92_1();
    v197 = 0;
    v59 = v196;
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_18_3();
  v56 = v53 + 40;
  while (1)
  {
    OUTLINED_FUNCTION_235();
    OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_270();
    OnDeviceInferenceProviderDataSource.catalogResource(for:)();
    if (!v2)
      break;
    OUTLINED_FUNCTION_105_0();
    OUTLINED_FUNCTION_63_0();
    v2 = 0;
    v228 = 0;
    v226 = 0u;
    v227 = 0u;
LABEL_12:
    v55 = (_QWORD *)&loc_248D72000;
    v57 = &v226;
    v58 = &demangling cache variable for type metadata for CatalogResource?;
LABEL_16:
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v57, v58);
    v56 += 16;
    if (!--v54)
    {
      OUTLINED_FUNCTION_66_2();
      v197 = 0;
      v49 = v204;
      v17 = v202;
      v59 = v196;
      goto LABEL_20;
    }
  }
  OUTLINED_FUNCTION_63_0();
  if (!*((_QWORD *)&v227 + 1))
    goto LABEL_12;
  outlined init with take of LogitCollection(&v226, (uint64_t)&v210);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)&v210, (uint64_t)v209);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMModel);
  v55 = (_QWORD *)&loc_248D72000;
  if (!OUTLINED_FUNCTION_54_3())
  {
    v208 = 0;
    memset(v207, 0, sizeof(v207));
    OUTLINED_FUNCTION_408();
    v57 = v207;
    v58 = (uint64_t *)&demangling cache variable for type metadata for LLMModel?;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_66_2();
  outlined init with take of LogitCollection(v207, (uint64_t)&v226);
  __swift_project_boxed_opaque_existential_1(&v226, *((uint64_t *)&v227 + 1));
  v115 = OUTLINED_FUNCTION_190();
  v116 = MEMORY[0x2495A9178](v115);
  v118 = v117;
  OUTLINED_FUNCTION_4_0();
  v119 = *(_QWORD *)(v234 + 112);
  OUTLINED_FUNCTION_122();
  specialized Dictionary.subscript.getter((uint64_t)v116, v118, v119, (uint64_t)v209);
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_63_0();
  if (v209[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v120 = OUTLINED_FUNCTION_54_3();
    v59 = v196;
    if ((v120 & 1) != 0)
    {
      v197 = v206;
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
  }
  else
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v209, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    v59 = v196;
  }
  OUTLINED_FUNCTION_224();
  v121 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_25_0(v121))
  {
    v122 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_WORD *)v122 = 0;
    _os_log_impl(&dword_248CAA000, v116, (os_log_type_t)v118, "Base model asset was not loaded at time of loading the adapter", v122, 2u);
    OUTLINED_FUNCTION_0_1();
  }

  v197 = 0;
LABEL_52:
  v55 = (_QWORD *)&loc_248D72000;
  v49 = OUTLINED_FUNCTION_235();
  v123 = *((_QWORD *)&v227 + 1);
  v124 = v228;
  __swift_project_boxed_opaque_existential_1(&v226, *((uint64_t *)&v227 + 1));
  MEMORY[0x2495A9178](v123, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 8) + 8) + 8));
  OnDeviceInferenceProviderDataSource.url(for:)(v190);
  swift_bridgeObjectRelease();
  v125 = OUTLINED_FUNCTION_408();
  OUTLINED_FUNCTION_363(v125, &demangling cache variable for type metadata for URL?);
  v17 = v202;
  outlined init with take of DefaultParameters?(v190, (uint64_t)v49, &demangling cache variable for type metadata for URL?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v226);
LABEL_20:
  v70 = v194;
  outlined init with copy of UUID?((uint64_t)v49, v194, &demangling cache variable for type metadata for URL?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v70, 1, v17) != 1)
  {
    v76 = v203;
    v77 = v192;
    ((void (*)(uint64_t, NSObject *, uint64_t))v203[4])(v192, v70, v17);
    v78 = v191;
    URL.appendingPathComponent(_:)();
    v205 = URL.path.getter();
    v79 = v76[1];
    v79(v78, v17);
    OnDeviceInferenceAssetRepository.modelConfigurationWithURL(_:adapterResourceInformation:)();
    if (v2)
    {
      OUTLINED_FUNCTION_63_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_214();
      OUTLINED_FUNCTION_123_0();
      v79(v77, v17);
      goto LABEL_26;
    }
    v175[0] = 0;
    v90 = v211;
    v203 = v210;
    v181 = v79;
    v182 = v212;
    v91 = v213;
    v92 = v214;
    v94 = v215;
    v93 = v216;
    v194 = v217;
    v95 = v218;
    v96 = v222;
    v190 = v221;
    v191 = v220;
    v205 = v223;
    v97 = v225;
    v183 = v224;
    v184 = v219;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v176 = v90;
    v177 = v91;
    v233[0] = v90;
    v233[1] = v182;
    v233[2] = v91;
    v233[3] = v92;
    v178 = v92;
    v179 = v94;
    v98 = v182;
    v233[4] = v94;
    v233[5] = v93;
    v180 = v93;
    v233[6] = v194;
    v233[7] = v95;
    v175[1] = v95;
    v175[2] = v97;
    v233[8] = v184;
    v233[9] = v191;
    v233[10] = v190;
    v233[11] = v96;
    v99 = v96;
    v100 = v183;
    v233[12] = v205;
    v233[13] = v183;
    v233[14] = v97;
    v101 = v203;
    objc_msgSend(v203, sel_setBaseModel_, v197);
    objc_msgSend(v101, sel_setUseEnergyEfficientMode_, v189 & 1);
    v102 = MEMORY[0x2495A9A78](v193, v196);
    objc_msgSend(v101, sel_setAssetIdentifier_, v102);

    v103 = v231[5];
    if (v98)
    {
      if (v205)
      {
        v104 = v99;
        v105 = v99 == v231[5] && v205 == v231[6];
        if (v105 || (OUTLINED_FUNCTION_198() & 1) != 0)
        {
          v106 = v231[3];
          v107 = v231[4];
          if (v100)
          {
            OUTLINED_FUNCTION_64_1();
            v108 = (uint64_t)v195;
            OUTLINED_FUNCTION_57_0();
            OUTLINED_FUNCTION_50_1();
            v109 = specialized Dictionary.subscript.getter(v185, v108, v100);
            v111 = v110;
            OUTLINED_FUNCTION_58_0();
            OUTLINED_FUNCTION_116_0();
            if (v111)
            {
              if (v109 == v106 && v111 == v107)
              {
                OUTLINED_FUNCTION_116_0();
                OUTLINED_FUNCTION_51_1();
                OUTLINED_FUNCTION_42();
LABEL_66:
                v150 = v175[0];
                OnDeviceInferenceAssetRepository.specialTokensMap(_:_:)((uint64_t)v233, (uint64_t)v231);
                v152 = v151;
                OnDeviceInferenceAssetRepository.localizationOverrideMap(_:_:)((uint64_t)v233, (uint64_t)v231);
                v154 = v153;
                OUTLINED_FUNCTION_313();
                OUTLINED_FUNCTION_56_4();
                objc_allocWithZone((Class)E5RunnerObjC);
                v155 = v203;
                v156 = @nonobjc E5RunnerObjC.init(modelConfiguration:)(v155);
                if (v150)
                {

                  OUTLINED_FUNCTION_214();
                  OUTLINED_FUNCTION_50_2();
                  OUTLINED_FUNCTION_119_0();
                  OUTLINED_FUNCTION_123_0();
LABEL_85:
                  v181(v192, v202);
                  goto LABEL_26;
                }
                v157 = v156;
                v205 = v152;
                ObjC metadata update function for E5TransformerLanguageModel();
                v199 = v157;
                v203 = (void (**)(_QWORD, _QWORD))E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v199, 1);
                v200 = v155;
                v201 = v154;
                if ((v231[8] & 1) != 0)
                {
                  OUTLINED_FUNCTION_123_0();
                  v198 = 0;
                  v195 = 0;
                  v190 = 0;
                  v191 = 0;
                  v189 = 0;
                }
                else
                {
                  v189 = v231[7];
                  if (v231[7] > 0)
                  {
                    outlined init with take of DefaultParameters?((uint64_t)&v231[9], (uint64_t)&v232, &demangling cache variable for type metadata for DefaultParameters?);
                    OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)((uint64_t)&v210);
                    OUTLINED_FUNCTION_123_0();
                    v198 = (uint64_t)v210;
                    v194 = v211;
                    v195 = v212;
                    if (BYTE4(v213))
                      v158 = 0x100000000;
                    else
                      v158 = 0;
                    v159 = 0x10000000000;
                    if (!BYTE5(v213))
                      v159 = 0;
                    v160 = 0x1000000000000;
                    if (!BYTE6(v213))
                      v160 = 0;
                    v190 = v158 | v213 | v159 | v160;
                    if (BYTE4(v214))
                      v161 = 0x100000000;
                    else
                      v161 = 0;
                    v191 = v161 | v214;
                    goto LABEL_84;
                  }
                  OUTLINED_FUNCTION_123_0();
                  v198 = 0;
                  v195 = 0;
                  v190 = 0;
                  v191 = 0;
                }
                v194 = 2;
LABEL_84:
                v162 = v186;
                v163 = v187;
                v164 = OUTLINED_FUNCTION_4_4();
                OUTLINED_FUNCTION_100_0(v164);
                v165 = v193;
                v166 = (uint64_t)v196;
                *(_QWORD *)v163 = v193;
                *(_QWORD *)(v163 + 8) = v166;
                v167 = v199;
                v168 = v203;
                *(_QWORD *)(v163 + 16) = v199;
                *(_QWORD *)(v163 + 24) = v168;
                *(_OWORD *)(v163 + 32) = xmmword_248D766A0;
                *(_QWORD *)(v163 + 48) = 0;
                *(_QWORD *)(v163 + 56) = 0;
                *(_QWORD *)(v163 + 61) = 0;
                v169 = v189;
                *(_QWORD *)(v163 + 72) = v205;
                *(_QWORD *)(v163 + 80) = v169;
                v170 = v194;
                *(_QWORD *)(v163 + 88) = v198;
                *(_QWORD *)(v163 + 96) = v170;
                v171 = v190;
                *(_QWORD *)(v163 + 104) = v195;
                *(_QWORD *)(v163 + 112) = v171;
                v172 = v191;
                *(_BYTE *)(v163 + 124) = BYTE4(v191);
                *(_DWORD *)(v163 + 120) = v172;
                *(_QWORD *)(v163 + 128) = v201;
                v213 = v162;
                v214 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
                boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v210);
                _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v163, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
                OUTLINED_FUNCTION_4_0();
                OUTLINED_FUNCTION_64_1();
                v174 = v167;
                swift_retain();
                specialized Dictionary.subscript.setter((uint64_t)&v210, v165, v166);
                swift_endAccess();
                OUTLINED_FUNCTION_214();

                swift_release();
                outlined destroy of MaskedLanguageModel.SingleLogitCollection(v163, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
                goto LABEL_85;
              }
              v113 = OUTLINED_FUNCTION_198();
              OUTLINED_FUNCTION_42();
              v114 = v100;
              if ((v113 & 1) != 0)
              {
                OUTLINED_FUNCTION_116_0();
                OUTLINED_FUNCTION_51_1();
                goto LABEL_66;
              }
            }
            else
            {
              v114 = v100;
            }
          }
          else
          {
            OUTLINED_FUNCTION_50_1();
            v114 = 0;
          }
          v198 = v106;
          OUTLINED_FUNCTION_56_4();
          OUTLINED_FUNCTION_123_0();
          OUTLINED_FUNCTION_32_4();
          OUTLINED_FUNCTION_311();
          v137 = v188;
          OUTLINED_FUNCTION_5_9();
          v139 = (unint64_t)v196;
          OUTLINED_FUNCTION_64_1();
          OUTLINED_FUNCTION_21_1();
          OUTLINED_FUNCTION_50_1();
          OUTLINED_FUNCTION_224();
          v140 = OUTLINED_FUNCTION_21_3();
          if (OUTLINED_FUNCTION_25_0(v140))
          {
            v141 = OUTLINED_FUNCTION_4_11();
            v210 = (void (**)(_QWORD, _QWORD))OUTLINED_FUNCTION_4_11();
            *(_DWORD *)v141 = 136315650;
            OUTLINED_FUNCTION_92_1();
            *(_QWORD *)&v226 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v139, (uint64_t *)&v210);
            OUTLINED_FUNCTION_306();
            OUTLINED_FUNCTION_26_5();
            *(_WORD *)(v141 + 12) = 2080;
            OUTLINED_FUNCTION_74_1();
            *(_QWORD *)&v226 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v198, v107, (uint64_t *)&v210);
            OUTLINED_FUNCTION_306();
            OUTLINED_FUNCTION_26_5();
            *(_WORD *)(v141 + 22) = 2080;
            *(_QWORD *)&v226 = v183;
            OUTLINED_FUNCTION_92_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
            v142 = String.init<A>(describing:)();
            v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, (uint64_t *)&v210);
            OUTLINED_FUNCTION_103_1(v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_6();
            OUTLINED_FUNCTION_119_0();
            OUTLINED_FUNCTION_391(&dword_248CAA000, v114, (os_log_type_t)v106, "Failed to load adapter %s, adapter signature %s does not match model adapter signature %s");
            swift_arrayDestroy();
            OUTLINED_FUNCTION_0_1();
          }

          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_19_6();
          v133 = (uint64_t)v204;
          v135 = v199;
          v134 = (uint64_t)v200;
          v136 = v192;
LABEL_64:
          OUTLINED_FUNCTION_66_3();
          OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v145, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
          OUTLINED_FUNCTION_54_2();
          v147 = v135[2](v146, v137, v134);
          OUTLINED_FUNCTION_3_9(v147, *MEMORY[0x24BE68948]);
          OUTLINED_FUNCTION_257();
          OUTLINED_FUNCTION_214();

          v148 = OUTLINED_FUNCTION_270();
          v149(v148);
          v181(v136, v202);
          v89 = v133;
          goto LABEL_27;
        }
        OUTLINED_FUNCTION_85_1();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_313();
        v176 = (unint64_t)v99;
        v177 = v138;
        OUTLINED_FUNCTION_84_1();
LABEL_55:
        OUTLINED_FUNCTION_123_0();
        swift_bridgeObjectRetain();
        v126 = (unint64_t)v196;
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_85_1();
        OUTLINED_FUNCTION_224();
        v127 = OUTLINED_FUNCTION_21_3();
        if (os_log_type_enabled(v102, v127))
        {
          v128 = OUTLINED_FUNCTION_4_11();
          v201 = v104;
          v129 = v128;
          *(_QWORD *)&v226 = OUTLINED_FUNCTION_4_11();
          *(_DWORD *)v129 = 136315650;
          OUTLINED_FUNCTION_122();
          v210 = (void (**)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v126, (uint64_t *)&v226);
          OUTLINED_FUNCTION_299();
          OUTLINED_FUNCTION_26_5();
          *(_WORD *)(v129 + 12) = 2080;
          OUTLINED_FUNCTION_85_1();
          v210 = (void (**)(_QWORD, _QWORD))OUTLINED_FUNCTION_269(v103, v130, (uint64_t *)&v226);
          OUTLINED_FUNCTION_299();
          OUTLINED_FUNCTION_26_5();
          *(_WORD *)(v129 + 22) = 2080;
          v210 = (void (**)(_QWORD, _QWORD))v201;
          v211 = v205;
          OUTLINED_FUNCTION_65_0();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          v131 = String.init<A>(describing:)();
          v210 = (void (**)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, (uint64_t *)&v226);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_63_0();
          OUTLINED_FUNCTION_391(&dword_248CAA000, v102, v127, "Failed to load adapter %s, adapter backbone signature %s does not match model backbone signature %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }

        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_19_6();
        v133 = (uint64_t)v204;
        v135 = v199;
        v134 = (uint64_t)v200;
        v136 = v192;
        OUTLINED_FUNCTION_32_4();
        OUTLINED_FUNCTION_294();
        OUTLINED_FUNCTION_311();
        v137 = v198;
        OUTLINED_FUNCTION_5_9();
        goto LABEL_64;
      }
      OUTLINED_FUNCTION_85_1();
      OUTLINED_FUNCTION_313();
      v176 = (unint64_t)v99;
      v177 = 0;
      v104 = v99;
      OUTLINED_FUNCTION_84_1();
    }
    else
    {
      OUTLINED_FUNCTION_85_1();
      v104 = 0;
    }
    v205 = 0;
    goto LABEL_55;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123_0();
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v70, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_224();
  v71 = OUTLINED_FUNCTION_21_3();
  if (OUTLINED_FUNCTION_25_0(v71))
  {
    v72 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v210 = (void (**)(_QWORD, _QWORD))OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v72 = v55[414];
    v73 = OUTLINED_FUNCTION_74_1();
    v75 = OUTLINED_FUNCTION_341(v73, v74, (uint64_t *)&v210);
    OUTLINED_FUNCTION_103_1(v75);
    OUTLINED_FUNCTION_254();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v70, (os_log_type_t)v49, "Failed to fetch base model url for adapter %s", v72);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  v80 = v200;
  v81 = v193;
  v210 = 0;
  v211 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_294();
  v210 = (void (**)(_QWORD, _QWORD))(v82 + 17);
  v211 = 0x8000000248D7F950;
  v83._countAndFlagsBits = v81;
  v83._object = v59;
  String.append(_:)(v83);
  OUTLINED_FUNCTION_32_4();
  v84 = v198;
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_66_3();
  OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v85, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
  OUTLINED_FUNCTION_54_2();
  v86 = v199;
  v88 = OUTLINED_FUNCTION_26_0(v87, v84, v199[2]);
  OUTLINED_FUNCTION_3_9(v88, *MEMORY[0x24BE68948]);
  OUTLINED_FUNCTION_257();
  OUTLINED_FUNCTION_214();
  ((void (*)(uint64_t, id))v86[1])(v84, v80);
LABEL_26:
  v89 = (uint64_t)v204;
LABEL_27:
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v89, &demangling cache variable for type metadata for URL?);
LABEL_28:
  OUTLINED_FUNCTION_10_9();
}

void OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  char v28;
  _BYTE v29[48];
  _BYTE v30[48];
  int v31;
  char v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[8];
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 224));
  type metadata accessor for OnDeviceInferenceOverrides();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v3 = Overridable.wrappedValue.getter();
  if (v42 == 1
    && ((OUTLINED_FUNCTION_145(v3, (uint64_t)&v41, &demangling cache variable for type metadata for DefaultParameters?),
         (v42 & 0xFF00) == 0x300)
     || (v42 & 1) != 0))
  {
    v4 = 2;
  }
  else
  {
    v4 = v41;
  }
  v23 = v4;
  OUTLINED_FUNCTION_80_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v5 = Overridable.wrappedValue.getter();
  if (v39[0] == 2)
  {
    OUTLINED_FUNCTION_145(v5, (uint64_t)v39, &demangling cache variable for type metadata for DefaultParameters?);
    if ((v40 & 0xFF00) == 0x300)
    {
      v22 = 0;
      goto LABEL_12;
    }
    v6 = (v40 >> 8) & 1;
  }
  else
  {
    LOBYTE(v6) = v39[0] & 1;
  }
  v22 = v6;
LABEL_12:
  OUTLINED_FUNCTION_80_1();
  v7 = Overridable.wrappedValue.getter();
  if (v36 == 1)
  {
    OUTLINED_FUNCTION_145(v7, (uint64_t)&v35, &demangling cache variable for type metadata for DefaultParameters?);
    OUTLINED_FUNCTION_239();
    if (v8 || (v38 & 1) != 0)
      v9 = 1;
    else
      v9 = v37;
  }
  else
  {
    v9 = v35;
  }
  v24 = v9;
  OUTLINED_FUNCTION_80_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v10 = Overridable.wrappedValue.getter();
  if (v32 == 1)
  {
    OUTLINED_FUNCTION_145(v10, (uint64_t)&v31, &demangling cache variable for type metadata for DefaultParameters?);
    OUTLINED_FUNCTION_239();
    if (v8)
    {
      v21 = 0;
      v11 = 1;
    }
    else
    {
      v21 = v33;
      v11 = v34 & 1;
    }
  }
  else
  {
    v11 = 0;
    v21 = v31;
  }
  OUTLINED_FUNCTION_80_1();
  v12 = Overridable.wrappedValue.getter();
  v13 = v30[0];
  if (v30[0] == 2)
  {
    OUTLINED_FUNCTION_145(v12, (uint64_t)v30, &demangling cache variable for type metadata for DefaultParameters?);
    OUTLINED_FUNCTION_239();
    if (v8)
    {
      v14 = 0;
      goto LABEL_28;
    }
    v13 = v30[33];
  }
  v14 = v13 & 1;
LABEL_28:
  OUTLINED_FUNCTION_80_1();
  v15 = Overridable.wrappedValue.getter();
  v16 = v29[0];
  if (v29[0] == 2)
  {
    OUTLINED_FUNCTION_145(v15, (uint64_t)v29, &demangling cache variable for type metadata for DefaultParameters?);
    OUTLINED_FUNCTION_239();
    if (v8)
    {
      v17 = 0;
      goto LABEL_33;
    }
    v16 = v29[34];
  }
  v17 = v16 & 1;
LABEL_33:
  OUTLINED_FUNCTION_80_1();
  v18 = Overridable.wrappedValue.getter();
  if (v26 == 1)
  {
    OUTLINED_FUNCTION_145(v18, (uint64_t)&v25, &demangling cache variable for type metadata for DefaultParameters?);
    OUTLINED_FUNCTION_239();
    if (v8)
    {
      v19 = 0;
      v20 = 1;
    }
    else
    {
      v19 = v27;
      v20 = v28 & 1;
    }
  }
  else
  {
    v20 = 0;
    v19 = v25;
  }
  if (v24 < 1)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v23;
    *(_BYTE *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 24) = v21;
    *(_BYTE *)(a1 + 28) = v11;
    *(_BYTE *)(a1 + 29) = v14 & v11;
    *(_BYTE *)(a1 + 30) = v17;
    *(_DWORD *)(a1 + 32) = v19;
    *(_BYTE *)(a1 + 36) = v20;
  }
}

void OnDeviceInferenceAssetRepository.handleDraftModel(identifier:url:useEnergyEfficientMode:)()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  char v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  os_log_type_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  NSNumber v39;
  NSObject *v40;
  Swift::String v41;
  NSNumber v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *boxed_opaque_existential_1;
  id v59;
  objc_class *isa;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  ValueMetadata *v87;
  _UNKNOWN **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  char v104;

  OUTLINED_FUNCTION_50_4();
  v4 = v3;
  v6 = v5;
  v83 = v7;
  v79 = OUTLINED_FUNCTION_282();
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v80 = v9;
  if (one-time initialization token for device != -1)
    swift_once();
  v10 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_230(v10, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v11 = OUTLINED_FUNCTION_83_0();
  v12 = OUTLINED_FUNCTION_228(v11);
  v13 = MEMORY[0x24BEE4AD8];
  if (v12)
  {
    v14 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v15 = OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_303(v15);
    *(_DWORD *)v14 = 136315138;
    OUTLINED_FUNCTION_57_0();
    v16 = OUTLINED_FUNCTION_181();
    OUTLINED_FUNCTION_76_1(v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v0, v2, "Loading draft model with identifier %s", v14);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_347();
  OnDeviceInferenceAssetRepository.modelConfigurationWithURL(_:adapterResourceInformation:)();
  if (!v1)
  {
    v75 = v85;
    v77 = v86;
    v78 = v96;
    objc_msgSend(v84, sel_setUseEnergyEfficientMode_, v4 & 1);
    v17 = (void *)MEMORY[0x2495A9A78](v83, v6);
    objc_msgSend(v84, sel_setAssetIdentifier_, v17);

    v82 = v0;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    v18 = Overridable.wrappedValue.getter();
    v19 = OUTLINED_FUNCTION_373(v18, sel_setUseModelCatalogE5CompilerCache_);
    v20 = OS_LOG_TYPE_DEFAULT;
    v104 = 0;
    if ((v84 == 2) | v84 & 1)
    {
      v19 = objc_msgSend((id)objc_opt_self(), sel_doesModelRequireCompilationWithConfiguration_, v84);
      v20 = v19;
      v104 = (char)v19;
    }
    OUTLINED_FUNCTION_373((uint64_t)v19, sel_setUseModelCatalogE5CompilerCache_);
    OUTLINED_FUNCTION_64_1();
    OUTLINED_FUNCTION_127_0();
    v21 = OUTLINED_FUNCTION_83_0();
    if (OUTLINED_FUNCTION_242(v21))
    {
      v22 = OUTLINED_FUNCTION_4_11();
      v23 = OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_303(v23);
      *(_DWORD *)v22 = 136315650;
      OUTLINED_FUNCTION_57_0();
      OUTLINED_FUNCTION_184((uint64_t)v83, v24, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_26_5();
      *(_WORD *)(v22 + 12) = 1024;
      OUTLINED_FUNCTION_315();
      *(_WORD *)(v22 + 18) = 1024;
      OUTLINED_FUNCTION_315();
      _os_log_impl(&dword_248CAA000, (os_log_t)&stru_2519E5000, v13, "Draft model bundle %s requires compilation %{BOOL}d will use compiler cache %{BOOL}d)", (uint8_t *)v22, 0x18u);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    v25 = v89;
    if ((v84 == 2) | v84 & 1 && (OUTLINED_FUNCTION_4_0(), v104 == 1))
    {
      OUTLINED_FUNCTION_12_6();
      v87 = &type metadata for OnDeviceInferenceAssetObjectUncompiled;
      v88 = &protocol witness table for OnDeviceInferenceAssetObjectUncompiled;
      v84 = v83;
      v85 = (uint64_t)v6;
      v26 = (v0 + 112);
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_64_1();
      specialized Dictionary.subscript.setter((uint64_t)&v84, (uint64_t)v83, (uint64_t)v6);
      swift_endAccess();
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_127_0();
      v27 = OUTLINED_FUNCTION_83_0();
      if (OUTLINED_FUNCTION_25_0(v27))
      {
        v28 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        v29 = OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_303(v29);
        *(_DWORD *)v28 = 136315138;
        OUTLINED_FUNCTION_57_0();
        v31 = OUTLINED_FUNCTION_184((uint64_t)v83, v30, (uint64_t *)&v84);
        OUTLINED_FUNCTION_76_1(v31);
        OUTLINED_FUNCTION_254();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v26, v20, "Requesting model catalog to compile draft model %s", v28);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v39.super.super.isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
      v40 = *__swift_project_boxed_opaque_existential_1((_QWORD *)(v82 + 160), *(_QWORD *)(v82 + 184));
      v41._countAndFlagsBits = (uint64_t)v83;
      v41._object = v6;
      v42.super.super.isa = OnDeviceInferenceProviderDataSource.requestCompileResource(identifier:userInitiated:)(v41, 1).super.super.isa;
      if (!v43)
      {
        isa = v42.super.super.isa;

        v39.super.super.isa = isa;
      }
      if (-[objc_class BOOLValue](v39.super.super.isa, sel_BOOLValue))
      {
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_127_0();
        v61 = OUTLINED_FUNCTION_83_0();
        if (OUTLINED_FUNCTION_25_0(v61))
        {
          v62 = (uint8_t *)OUTLINED_FUNCTION_4_11();
          v63 = OUTLINED_FUNCTION_4_11();
          OUTLINED_FUNCTION_303(v63);
          *(_DWORD *)v62 = 136315138;
          OUTLINED_FUNCTION_57_0();
          v65 = OUTLINED_FUNCTION_184((uint64_t)v83, v64, (uint64_t *)&v84);
          OUTLINED_FUNCTION_76_1(v65);
          OUTLINED_FUNCTION_327();
          OUTLINED_FUNCTION_26_5();
          OUTLINED_FUNCTION_37_2(&dword_248CAA000, v40, v20, "Successfully requested compilation of draft model %s", v62);
          OUTLINED_FUNCTION_34_3();
          OUTLINED_FUNCTION_0_1();
        }
        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_105_0();

        OUTLINED_FUNCTION_150();
      }
      else
      {
        OUTLINED_FUNCTION_57_0();
        OUTLINED_FUNCTION_417();
        OUTLINED_FUNCTION_57_0();
        OUTLINED_FUNCTION_417();
        OUTLINED_FUNCTION_127_0();
        v66 = OUTLINED_FUNCTION_21_3();
        if (OUTLINED_FUNCTION_228(v66))
        {
          v67 = (uint8_t *)OUTLINED_FUNCTION_4_11();
          v68 = OUTLINED_FUNCTION_4_11();
          OUTLINED_FUNCTION_303(v68);
          *(_DWORD *)v67 = 136315394;
          OUTLINED_FUNCTION_57_0();
          v69 = OUTLINED_FUNCTION_181();
          OUTLINED_FUNCTION_76_1(v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_26_5();
          OUTLINED_FUNCTION_422();
          OUTLINED_FUNCTION_417();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
          v70 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)&v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_58_0();
          OUTLINED_FUNCTION_105_0();
          OUTLINED_FUNCTION_105_0();
          OUTLINED_FUNCTION_124_0(&dword_248CAA000, v40, (os_log_type_t)v83, "Failed to request compilation for draft model %s error: %s", v67);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }
        OUTLINED_FUNCTION_105_0();
        OUTLINED_FUNCTION_19_6();

        OUTLINED_FUNCTION_105_0();
        OUTLINED_FUNCTION_105_0();

        OUTLINED_FUNCTION_150();
      }
    }
    else
    {
      objc_allocWithZone((Class)E5RunnerObjC);
      v32 = @nonobjc E5RunnerObjC.init(modelConfiguration:)(v84);
      ObjC metadata update function for E5TransformerLanguageModel();
      v76 = v32;
      v81 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v76, 1);
      v33 = v86;
      if (v86)
      {
        v33 = v90;
        v34 = v91;
        v35 = v92;
        v36 = v93;
        v37 = v94;
        v38 = v95;
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v34 = 768;
      }
      v97 = v33;
      v98 = v34;
      v99 = v35;
      v100 = v36;
      v101 = v37;
      v102 = v38;
      OnDeviceInferenceAssetRepository.makeDraftingBehavior(defaultParameters:)((uint64_t)&v84);
      v73 = v84;
      v74 = v85;
      v72 = v86;
      v44 = v87;
      v45 = BYTE4(v87);
      v46 = BYTE5(v87);
      v47 = BYTE6(v87);
      v103 = (int)v88;
      v48 = BYTE4(v88);
      if (v77)
      {
        OUTLINED_FUNCTION_74_1();
        OUTLINED_FUNCTION_92_1();
        outlined consume of ModelMetadata?(v75, v77);
        v49 = v25;
      }
      else
      {
        v78 = 0;
        v49 = 0;
      }
      if (v45)
        v50 = 0x100000000;
      else
        v50 = 0;
      v51 = v50 | v44;
      v52 = 0x10000000000;
      if (!v46)
        v52 = 0;
      v53 = 0x1000000000000;
      if (!v47)
        v53 = 0;
      v54 = v51 | v52 | v53;
      v55 = v48 != 0;
      v56 = v80 + *(int *)(v79 + 48);
      v57 = OUTLINED_FUNCTION_4_4();
      __swift_storeEnumTagSinglePayload(v56, 1, 1, v57);
      *(_QWORD *)v80 = v83;
      *(_QWORD *)(v80 + 8) = v6;
      *(_QWORD *)(v80 + 16) = v76;
      *(_QWORD *)(v80 + 24) = v81;
      *(_QWORD *)(v80 + 32) = v73;
      *(_QWORD *)(v80 + 40) = v74;
      *(_QWORD *)(v80 + 48) = v72;
      *(_QWORD *)(v80 + 56) = v54;
      *(_BYTE *)(v80 + 68) = v55;
      *(_DWORD *)(v80 + 64) = v103;
      *(_QWORD *)(v80 + 72) = v49;
      *(_QWORD *)(v80 + 80) = 0;
      *(_QWORD *)(v80 + 88) = 0;
      *(_QWORD *)(v80 + 96) = 2;
      *(_QWORD *)(v80 + 104) = 0;
      *(_QWORD *)(v80 + 112) = 0;
      *(_QWORD *)(v80 + 117) = 0;
      *(_QWORD *)(v80 + 128) = v78;
      v87 = (ValueMetadata *)v79;
      v88 = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v84);
      _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(v80, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_64_1();
      v59 = v76;
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)&v84, (uint64_t)v83, (uint64_t)v6);
      swift_endAccess();
      swift_release();

      OUTLINED_FUNCTION_150();
      outlined destroy of MaskedLanguageModel.SingleLogitCollection(v80, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    }
  }
  OUTLINED_FUNCTION_10_9();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceAssetRepository.loadTokenizerAtPath(path:)(Swift::String path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  NSObject *v41;
  _QWORD v42[8];
  uint64_t v43[6];
  uint64_t v44;

  OUTLINED_FUNCTION_50_4();
  v40[0] = v2;
  v44 = v1;
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_271();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for device != -1)
    swift_once();
  v12 = OUTLINED_FUNCTION_15_4();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  v41 = v13;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  v16 = OUTLINED_FUNCTION_229(v14);
  v40[2] = v3;
  v40[3] = v8;
  v40[1] = v11;
  if (v16)
  {
    v17 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v43[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v17 = 136315138;
    OUTLINED_FUNCTION_52();
    v19 = OUTLINED_FUNCTION_199(v7, v18, v43);
    OUTLINED_FUNCTION_169(v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v14, v15, "Loading tokenizer at path %s", v17);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_4_0();
  v20 = *(_QWORD *)(v44 + 112);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_57_0();
  v21 = OUTLINED_FUNCTION_115_0();
  specialized Dictionary.subscript.getter(v21, v22, v20, v23);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_58_0();
  if (v43[3])
  {
    OUTLINED_FUNCTION_64_1();
    v24 = v41;
    Logger.logObject.getter();
    v25 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_39_2(v25))
    {
      v26 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v42[0] = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v26 = 136315138;
      OUTLINED_FUNCTION_52();
      v27 = OUTLINED_FUNCTION_115_0();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v29);
      OUTLINED_FUNCTION_367(v30);
      OUTLINED_FUNCTION_392();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v24, (os_log_type_t)&loc_248D72000, "Tokenizer at path is already loaded %s", v26);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    v42[0] = 0x657A696E656B6F54;
    v42[1] = 0xEA00000000002072;
    v35._countAndFlagsBits = OUTLINED_FUNCTION_115_0();
    String.append(_:)(v35);
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v36, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    v37 = OUTLINED_FUNCTION_7_11();
    v39 = OUTLINED_FUNCTION_101_1(v37, v38);
    OUTLINED_FUNCTION_98_1(v39, *MEMORY[0x24BE68960]);
    swift_willThrow();
    OUTLINED_FUNCTION_136();
  }
  else
  {
    type metadata accessor for TokenizerRunner();
    swift_allocObject();
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_115_0();
    v31 = v40[0];
    v32 = TokenizerRunner.init(tokenizerPath:)();
    if (!v31)
    {
      v33 = v32;
      v42[3] = &type metadata for OnDeviceInferenceAssetObjectTokenizer;
      v42[4] = &protocol witness table for OnDeviceInferenceAssetObjectTokenizer;
      v34 = (_QWORD *)OUTLINED_FUNCTION_314();
      v42[0] = v34;
      v34[2] = v7;
      v34[3] = v5;
      v34[5] = 0;
      v34[6] = 0;
      v34[4] = v33;
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_64_1();
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)v42, v7, v5);
      swift_endAccess();
      swift_release();
    }
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v43, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  OUTLINED_FUNCTION_10_9();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceAssetRepository.loadE5Runner(modelConfiguration:draftingBehavior:)(TGIE5ModelConfigurationObjC *modelConfiguration, TokenGenerationInference::DraftingBehavior_optional *draftingBehavior)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[8];
  uint64_t v44[6];
  uint64_t v45;

  OUTLINED_FUNCTION_50_4();
  v45 = v2;
  v5 = v4;
  v7 = v6;
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_180();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v42 = *(_QWORD *)v5;
  v41 = *(_QWORD *)(v5 + 8);
  v40 = *(_QWORD *)(v5 + 16);
  v39 = *(_QWORD *)(v5 + 24);
  v38 = *(unsigned __int8 *)(v5 + 36);
  v37 = *(unsigned int *)(v5 + 32);
  v9 = objc_msgSend(v7, sel_modelBundlePath);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  if (one-time initialization token for device != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_15_4();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v44[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v17 = 136315138;
    OUTLINED_FUNCTION_52();
    v19 = OUTLINED_FUNCTION_199(v10, v18, v44);
    OUTLINED_FUNCTION_169(v19);
    OUTLINED_FUNCTION_254();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v15, v16, "Loading model at path %s", v17);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_4_0();
  v20 = *(_QWORD *)(v45 + 112);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_57_0();
  specialized Dictionary.subscript.getter(v10, (uint64_t)v12, v20, (uint64_t)v44);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_58_0();
  if (v44[3])
  {
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v21 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_25_0(v21))
    {
      v22 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v43[0] = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v22 = 136315138;
      OUTLINED_FUNCTION_52();
      v24 = OUTLINED_FUNCTION_199(v10, v23, v43);
      OUTLINED_FUNCTION_367(v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v14, v16, "Model at path is already loaded %s", v22);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    v43[0] = 0x206C65646F4DLL;
    v43[1] = 0xE600000000000000;
    v26._countAndFlagsBits = v10;
    v26._object = v12;
    String.append(_:)(v26);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v27, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    v28 = OUTLINED_FUNCTION_7_11();
    v30 = OUTLINED_FUNCTION_101_1(v28, v29);
    OUTLINED_FUNCTION_98_1(v30, *MEMORY[0x24BE68960]);
    swift_willThrow();
    OUTLINED_FUNCTION_136();
  }
  else
  {
    objc_allocWithZone((Class)E5RunnerObjC);
    v25 = @nonobjc E5RunnerObjC.init(modelConfiguration:)(v7);
    if (v3)
    {
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      v31 = v25;
      ObjC metadata update function for E5TransformerLanguageModel();
      v32 = v31;
      v33 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v32, 1);
      v43[3] = OUTLINED_FUNCTION_282();
      v43[4] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
      v35 = OUTLINED_FUNCTION_4_4();
      OUTLINED_FUNCTION_100_0(v35);
      *boxed_opaque_existential_1 = v10;
      boxed_opaque_existential_1[1] = (uint64_t)v12;
      boxed_opaque_existential_1[2] = (uint64_t)v32;
      boxed_opaque_existential_1[3] = v33;
      boxed_opaque_existential_1[4] = v42;
      boxed_opaque_existential_1[5] = v41;
      boxed_opaque_existential_1[6] = v40;
      boxed_opaque_existential_1[7] = v39;
      *((_BYTE *)boxed_opaque_existential_1 + 68) = (v37 | (unint64_t)(v38 << 32)) >> 32;
      *((_DWORD *)boxed_opaque_existential_1 + 16) = v37;
      boxed_opaque_existential_1[9] = 0;
      boxed_opaque_existential_1[10] = 0;
      boxed_opaque_existential_1[11] = 0;
      boxed_opaque_existential_1[12] = 2;
      boxed_opaque_existential_1[16] = 0;
      boxed_opaque_existential_1[13] = 0;
      boxed_opaque_existential_1[14] = 0;
      *(uint64_t *)((char *)boxed_opaque_existential_1 + 117) = 0;
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_52();
      v36 = v32;
      swift_retain();
      specialized Dictionary.subscript.setter((uint64_t)v43, v10, (uint64_t)v12);
      swift_endAccess();
      swift_release();

    }
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v44, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  OUTLINED_FUNCTION_10_9();
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceAssetRepository.fetchSpecialTokensMapForAsset(identifier:)(Swift::String identifier)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  Swift::Bool v46;
  _QWORD v47[18];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _BYTE v56[48];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[24];
  uint64_t v63;
  Swift::OpaquePointer_optional result;

  OUTLINED_FUNCTION_50_4();
  v51 = OUTLINED_FUNCTION_183();
  v49 = *(_QWORD *)(v51 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  v50 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v7);
  v47[14] = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v9);
  v47[17] = (char *)v47 - v10;
  v48 = OUTLINED_FUNCTION_129_0();
  v47[15] = *(_QWORD *)(v48 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_32_0();
  v47[13] = v12;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_188();
  v47[16] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_210();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v47 - v17;
  v19 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v20);
  v52 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_4_0();
  v53 = v1;
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_163();
  v55 = v3;
  OUTLINED_FUNCTION_58_0();
  v23 = OUTLINED_FUNCTION_63_0();
  if (v63)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v24 = OUTLINED_FUNCTION_54_3();
    __swift_storeEnumTagSinglePayload((uint64_t)v18, v24 ^ 1u, 1, v19);
    OUTLINED_FUNCTION_117_0((uint64_t)v18, 1);
    if (!v25)
    {
      OUTLINED_FUNCTION_308();
      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_384();
      goto LABEL_21;
    }
  }
  else
  {
    OUTLINED_FUNCTION_251(v23, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    OUTLINED_FUNCTION_225();
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v26 = v53;
  OUTLINED_FUNCTION_4_0();
  v27 = *(_QWORD *)(v26 + 120);
  v28 = (uint64_t)v55;
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_50_1();
  specialized Dictionary.subscript.getter(v54, v28, v27, (uint64_t)v62);
  OUTLINED_FUNCTION_58_0();
  v29 = OUTLINED_FUNCTION_51_1();
  if (v63)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v30 = OUTLINED_FUNCTION_54_3();
    __swift_storeEnumTagSinglePayload(v4, v30 ^ 1u, 1, v19);
    v31 = OUTLINED_FUNCTION_117_0(v4, 1);
    if (!v25)
    {
      OUTLINED_FUNCTION_395(v4);
      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_353();
      goto LABEL_21;
    }
  }
  else
  {
    OUTLINED_FUNCTION_251(v29, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    v31 = OUTLINED_FUNCTION_409();
  }
  OUTLINED_FUNCTION_301(v31, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_343();
  OUTLINED_FUNCTION_170();
  if (!v2)
  {
    if (v61)
    {
      outlined init with take of LogitCollection(&v60, (uint64_t)v62);
      v32 = OUTLINED_FUNCTION_30_4();
      v52 = (char *)v32;
      if (*(_QWORD *)(v32 + 16))
      {
        while (1)
        {
          OUTLINED_FUNCTION_307(v32, (uint64_t)v56);
          OUTLINED_FUNCTION_337();
          OUTLINED_FUNCTION_267();
          OUTLINED_FUNCTION_394();
          v33 = OUTLINED_FUNCTION_54_3();
          if ((v33 & 1) != 0)
            break;
          OUTLINED_FUNCTION_160();
          v32 = OUTLINED_FUNCTION_297((uint64_t)v56);
          if (v25)
            goto LABEL_15;
        }
        OUTLINED_FUNCTION_248(v33, &demangling cache variable for type metadata for LLMModel?);
        OUTLINED_FUNCTION_128_0();
      }
      else
      {
LABEL_15:
        v59 = 0;
        v57 = 0u;
        v58 = 0u;
      }
      swift_bridgeObjectRelease();
      v39 = v55;
      if (*((_QWORD *)&v58 + 1))
      {
        OUTLINED_FUNCTION_330();
        OUTLINED_FUNCTION_343();
        OUTLINED_FUNCTION_149();
      }
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v57, &demangling cache variable for type metadata for CatalogResource?);
      OUTLINED_FUNCTION_192();
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = OUTLINED_FUNCTION_261(0xD000000000000024);
      v40._object = v39;
      String.append(_:)(v40);
      OUTLINED_FUNCTION_47_4();
      OUTLINED_FUNCTION_95_1();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v41, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      v42 = OUTLINED_FUNCTION_54_2();
      v44 = OUTLINED_FUNCTION_16_5(v42, v43);
      OUTLINED_FUNCTION_3_9(v44, *MEMORY[0x24BEB8070]);
      OUTLINED_FUNCTION_79_0();
      OUTLINED_FUNCTION_22_7();
      OUTLINED_FUNCTION_252();
    }
    else
    {
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v60, &demangling cache variable for type metadata for ResourceBundle?);
      OUTLINED_FUNCTION_167();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_294();
      OUTLINED_FUNCTION_113_0(v34);
      OUTLINED_FUNCTION_110_0();
      OUTLINED_FUNCTION_47_4();
      OUTLINED_FUNCTION_95_1();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v35, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      v36 = OUTLINED_FUNCTION_54_2();
      v38 = OUTLINED_FUNCTION_16_5(v36, v37);
      OUTLINED_FUNCTION_3_9(v38, *MEMORY[0x24BEB8070]);
      OUTLINED_FUNCTION_79_0();
      OUTLINED_FUNCTION_22_7();
    }
  }
LABEL_21:
  OUTLINED_FUNCTION_10_9();
  result.value._rawValue = v45;
  result.is_nil = v46;
  return result;
}

void sub_248D1C120(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_130(a1);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v2, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  v3 = OUTLINED_FUNCTION_54_2();
  v5 = OUTLINED_FUNCTION_16_5(v3, v4);
  OUTLINED_FUNCTION_3_9(v5, *MEMORY[0x24BEB8070]);
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_22_7();
  OUTLINED_FUNCTION_378(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120));
  JUMPOUT(0x248D1C180);
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceAssetRepository.fetchLocalizationMetadataForAsset(identifier:)(Swift::String identifier)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  Swift::Bool v46;
  _QWORD v47[19];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _BYTE v55[48];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;
  Swift::OpaquePointer_optional result;

  OUTLINED_FUNCTION_50_4();
  v51 = OUTLINED_FUNCTION_183();
  v49 = *(_QWORD *)(v51 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  v50 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_32_0();
  v47[15] = v8;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_188();
  v47[18] = v10;
  v48 = OUTLINED_FUNCTION_129_0();
  v47[16] = *(_QWORD *)(v48 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v11);
  v47[14] = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v13);
  v47[17] = (char *)v47 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_210();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v47 - v17;
  v19 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_32_0();
  v52 = v21;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_4_0();
  v54 = v1;
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_58_0();
  v23 = OUTLINED_FUNCTION_63_0();
  if (v62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v24 = OUTLINED_FUNCTION_54_3();
    __swift_storeEnumTagSinglePayload((uint64_t)v18, v24 ^ 1u, 1, v19);
    OUTLINED_FUNCTION_117_0((uint64_t)v18, 1);
    if (!v25)
    {
      OUTLINED_FUNCTION_308();
      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_384();
      goto LABEL_21;
    }
  }
  else
  {
    OUTLINED_FUNCTION_251(v23, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    OUTLINED_FUNCTION_225();
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v26 = v54;
  OUTLINED_FUNCTION_4_0();
  v27 = v26[15];
  OUTLINED_FUNCTION_74_1();
  OUTLINED_FUNCTION_50_1();
  specialized Dictionary.subscript.getter(v53, (uint64_t)v3, v27, (uint64_t)v61);
  OUTLINED_FUNCTION_116_0();
  v28 = OUTLINED_FUNCTION_51_1();
  if (v62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v29 = OUTLINED_FUNCTION_54_3();
    __swift_storeEnumTagSinglePayload(v4, v29 ^ 1u, 1, v19);
    v30 = OUTLINED_FUNCTION_117_0(v4, 1);
    if (!v25)
    {
      OUTLINED_FUNCTION_395(v4);
      OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_353();
      goto LABEL_21;
    }
  }
  else
  {
    OUTLINED_FUNCTION_251(v28, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    v30 = OUTLINED_FUNCTION_409();
  }
  OUTLINED_FUNCTION_301(v30, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  __swift_project_boxed_opaque_existential_1(v26 + 20, v26[23]);
  OUTLINED_FUNCTION_170();
  if (!v2)
  {
    if (v60)
    {
      v52 = v26 + 20;
      outlined init with take of LogitCollection(&v59, (uint64_t)v61);
      v31 = OUTLINED_FUNCTION_30_4();
      if (*(_QWORD *)(v31 + 16))
      {
        while (1)
        {
          OUTLINED_FUNCTION_307(v31, (uint64_t)v55);
          OUTLINED_FUNCTION_337();
          OUTLINED_FUNCTION_267();
          OUTLINED_FUNCTION_394();
          v32 = OUTLINED_FUNCTION_54_3();
          if ((v32 & 1) != 0)
            break;
          OUTLINED_FUNCTION_160();
          v31 = OUTLINED_FUNCTION_297((uint64_t)v55);
          if (v25)
            goto LABEL_15;
        }
        OUTLINED_FUNCTION_248(v32, &demangling cache variable for type metadata for LLMModel?);
        OUTLINED_FUNCTION_128_0();
      }
      else
      {
LABEL_15:
        v58 = 0;
        v56 = 0u;
        v57 = 0u;
      }
      OUTLINED_FUNCTION_50_2();
      v38 = v54;
      v39 = v52;
      if (*((_QWORD *)&v57 + 1))
      {
        OUTLINED_FUNCTION_330();
        __swift_project_boxed_opaque_existential_1(v39, v38[23]);
        OUTLINED_FUNCTION_149();
      }
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v56, &demangling cache variable for type metadata for CatalogResource?);
      OUTLINED_FUNCTION_192();
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = OUTLINED_FUNCTION_261(0xD000000000000024);
      v40._object = v3;
      String.append(_:)(v40);
      OUTLINED_FUNCTION_47_4();
      OUTLINED_FUNCTION_95_1();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v41, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      v42 = OUTLINED_FUNCTION_54_2();
      v44 = OUTLINED_FUNCTION_17_4(v42, v43);
      OUTLINED_FUNCTION_3_9(v44, *MEMORY[0x24BEB8070]);
      OUTLINED_FUNCTION_79_0();
      OUTLINED_FUNCTION_22_7();
      OUTLINED_FUNCTION_252();
    }
    else
    {
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v59, &demangling cache variable for type metadata for ResourceBundle?);
      OUTLINED_FUNCTION_167();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_294();
      OUTLINED_FUNCTION_113_0(v33);
      OUTLINED_FUNCTION_110_0();
      OUTLINED_FUNCTION_47_4();
      OUTLINED_FUNCTION_95_1();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v34, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      v35 = OUTLINED_FUNCTION_54_2();
      v37 = OUTLINED_FUNCTION_17_4(v35, v36);
      OUTLINED_FUNCTION_3_9(v37, *MEMORY[0x24BEB8070]);
      OUTLINED_FUNCTION_79_0();
      OUTLINED_FUNCTION_22_7();
    }
  }
LABEL_21:
  OUTLINED_FUNCTION_10_9();
  result.value._rawValue = v45;
  result.is_nil = v46;
  return result;
}

void sub_248D1CB78(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_130(a1);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_47_4();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v2, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  v3 = OUTLINED_FUNCTION_54_2();
  v5 = OUTLINED_FUNCTION_17_4(v3, v4);
  OUTLINED_FUNCTION_3_9(v5, *MEMORY[0x24BEB8070]);
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_22_7();
  OUTLINED_FUNCTION_378(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 128));
  JUMPOUT(0x248D1CBD8);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceAssetRepository.loadAsset(identifier:)(Swift::String identifier)
{
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  NSObject *v28;
  uint64_t isa;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t EnumTagSinglePayload;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104[8];
  __int128 v105;
  uint64_t v106;
  uint64_t v107[6];
  NSObject *v108;

  OUTLINED_FUNCTION_50_4();
  v108 = v1;
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for CostProfile();
  v92 = *(_QWORD *)(v9 - 8);
  v93 = v9;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v91 = v12;
  OUTLINED_FUNCTION_43_4();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_188();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_31_0();
  v96 = v15;
  v16 = OUTLINED_FUNCTION_129_0();
  v95 = *(_QWORD *)(v16 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_31_0();
  v94 = v18;
  v19 = OUTLINED_FUNCTION_171();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_45_0();
  if (one-time initialization token for device != -1)
    swift_once();
  v21 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_230(v21, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v22 = OUTLINED_FUNCTION_83_0();
  v97 = v19;
  if (OUTLINED_FUNCTION_39_2(v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v107[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v23 = 136315138;
    v24 = OUTLINED_FUNCTION_50_1();
    v26 = OUTLINED_FUNCTION_365(v24, v25, v107);
    OUTLINED_FUNCTION_169(v26);
    OUTLINED_FUNCTION_392();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v1, v3, "Loading asset with identifier %s", v23);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_220();
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_42();
  if (!v106)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v105, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    v28 = v1 + 14;
    OUTLINED_FUNCTION_4_0();
    isa = (uint64_t)v108[14].isa;
    OUTLINED_FUNCTION_50_1();
    OUTLINED_FUNCTION_65_0();
    specialized Dictionary.subscript.getter(v8, v6, isa, (uint64_t)v107);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_50_2();
    if (v107[3])
    {
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_305();
      v30 = OUTLINED_FUNCTION_21_3();
      if (OUTLINED_FUNCTION_25_0(v30))
      {
        v31 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_QWORD *)&v105 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v31 = 136315138;
        v32 = OUTLINED_FUNCTION_50_1();
        v104[0] = OUTLINED_FUNCTION_138(v32, v33, (uint64_t *)&v105);
        OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v28, (os_log_type_t)isa, "Asset is already loaded %s", v31);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_177();
      *(_QWORD *)&v105 = v39;
      *((_QWORD *)&v105 + 1) = v40;
      OUTLINED_FUNCTION_137();
      OUTLINED_FUNCTION_32_4();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v41, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      v42 = OUTLINED_FUNCTION_54_2();
      v44 = OUTLINED_FUNCTION_45_3(v42, v43);
      OUTLINED_FUNCTION_3_9(v44, *MEMORY[0x24BE68960]);
      OUTLINED_FUNCTION_223();
      OUTLINED_FUNCTION_61_4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      goto LABEL_21;
    }
    v34 = v28->isa;
    OUTLINED_FUNCTION_50_1();
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_220();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_42();
    if (v106)
    {
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_305();
      v35 = OUTLINED_FUNCTION_21_3();
      if (OUTLINED_FUNCTION_25_0(v35))
      {
        v36 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        v104[0] = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v36 = 136315138;
        v37 = OUTLINED_FUNCTION_50_1();
        *(_QWORD *)&v101 = OUTLINED_FUNCTION_138(v37, v38, v104);
        OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v34, (os_log_type_t)isa, "Asset is currently in use %s", v36);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_177();
      v104[0] = v51;
      v104[1] = v52;
      OUTLINED_FUNCTION_137();
      OUTLINED_FUNCTION_32_4();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v53, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      v54 = OUTLINED_FUNCTION_54_2();
      v56 = OUTLINED_FUNCTION_45_3(v54, v55);
      OUTLINED_FUNCTION_3_9(v56, *MEMORY[0x24BE68960]);
      OUTLINED_FUNCTION_223();
      OUTLINED_FUNCTION_61_4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      goto LABEL_20;
    }
    __swift_project_boxed_opaque_existential_1(&v108[20].isa, (uint64_t)v108[23].isa);
    OnDeviceInferenceProviderDataSource.catalogResource(for:)();
    if (v2)
    {
LABEL_20:
      OUTLINED_FUNCTION_371();
LABEL_21:
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v107, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      goto LABEL_22;
    }
    v45 = *__swift_project_boxed_opaque_existential_1(&v108[20].isa, (uint64_t)v108[23].isa);
    OnDeviceInferenceProviderDataSource.url(for:)(v96);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v96, 1, v16);
    if ((_DWORD)EnumTagSinglePayload == 1)
    {
      OUTLINED_FUNCTION_301(EnumTagSinglePayload, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_305();
      v47 = OUTLINED_FUNCTION_21_3();
      if (OUTLINED_FUNCTION_25_0(v47))
      {
        v48 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_QWORD *)&v101 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v48 = 136315138;
        v49 = OUTLINED_FUNCTION_50_1();
        *(_QWORD *)&v99 = OUTLINED_FUNCTION_138(v49, v50, (uint64_t *)&v101);
        OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v45, (os_log_type_t)v96, "Failed to get device information for asset %s", v48);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      *(_QWORD *)&v101 = 0;
      *((_QWORD *)&v101 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_132(0xD00000000000002BLL);
      OUTLINED_FUNCTION_32_4();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v61, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      v62 = OUTLINED_FUNCTION_54_2();
      v64 = OUTLINED_FUNCTION_45_3(v62, v63);
      OUTLINED_FUNCTION_3_9(v64, *MEMORY[0x24BE68948]);
      OUTLINED_FUNCTION_223();
      v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v4, v97);
      goto LABEL_55;
    }
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v94, v96, v16);
    OUTLINED_FUNCTION_185(v57, v58, &demangling cache variable for type metadata for CatalogResource?);
    if (v98)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMModel);
      v60 = OUTLINED_FUNCTION_54_3();
      if ((v60 & 1) != 0)
      {
        if (v100)
        {
          OUTLINED_FUNCTION_204();
          OUTLINED_FUNCTION_190();
          dispatch thunk of ManagedResource.cost.getter();
          CostProfile.energyEfficientMode.getter();
          OUTLINED_FUNCTION_187();
          OUTLINED_FUNCTION_253();
          OnDeviceInferenceAssetRepository.handleLLMModel(identifier:url:useEnergyEfficientMode:)();
LABEL_47:
          v77 = OUTLINED_FUNCTION_415();
          goto LABEL_48;
        }
      }
      else
      {
        OUTLINED_FUNCTION_295();
      }
    }
    else
    {
      OUTLINED_FUNCTION_403(v59, &demangling cache variable for type metadata for CatalogResource?);
      OUTLINED_FUNCTION_290();
    }
    OUTLINED_FUNCTION_275(v60, &demangling cache variable for type metadata for LLMModel?);
    outlined init with copy of UUID?((uint64_t)v104, (uint64_t)&v99, &demangling cache variable for type metadata for CatalogResource?);
    if (v100)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tokenizer);
      v67 = OUTLINED_FUNCTION_54_3();
      if ((_DWORD)v67)
      {
        v68 = *((_QWORD *)&v102 + 1);
      }
      else
      {
        v68 = 0;
        v103 = 0;
        v101 = 0u;
        v102 = 0u;
      }
    }
    else
    {
      OUTLINED_FUNCTION_275(v66, &demangling cache variable for type metadata for CatalogResource?);
      v68 = 0;
      v101 = 0u;
      v102 = 0u;
      v103 = 0;
    }
    OUTLINED_FUNCTION_396(v67, &demangling cache variable for type metadata for Tokenizer?);
    if (v68)
    {
      OUTLINED_FUNCTION_253();
      OnDeviceInferenceAssetRepository.handleTokenizer(identifier:url:)();
      v71 = OUTLINED_FUNCTION_415();
      v73 = v16;
    }
    else
    {
      OUTLINED_FUNCTION_185(v69, v70, &demangling cache variable for type metadata for CatalogResource?);
      if (v98)
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMAdapter);
        v75 = OUTLINED_FUNCTION_54_3();
        if ((v75 & 1) != 0)
        {
          if (v100)
          {
            OUTLINED_FUNCTION_204();
            OUTLINED_FUNCTION_190();
            dispatch thunk of CatalogResource.dependentResourceIDs.getter();
            __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
            dispatch thunk of ManagedResource.cost.getter();
            CostProfile.energyEfficientMode.getter();
            (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
            OnDeviceInferenceAssetRepository.handleLLMAdapter(identifier:dependentResourceIDs:url:useEnergyEfficientMode:)();
            OUTLINED_FUNCTION_50_2();
            v76 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
            v77 = v94;
LABEL_48:
            v82 = OUTLINED_FUNCTION_159(v77, v76);
            OUTLINED_FUNCTION_248(v82, &demangling cache variable for type metadata for CatalogResource?);
            OUTLINED_FUNCTION_371();
            _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v107, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
            v27 = (uint64_t *)&v101;
            goto LABEL_7;
          }
        }
        else
        {
          OUTLINED_FUNCTION_295();
        }
      }
      else
      {
        OUTLINED_FUNCTION_403(v74, &demangling cache variable for type metadata for CatalogResource?);
        OUTLINED_FUNCTION_290();
      }
      OUTLINED_FUNCTION_275(v75, &demangling cache variable for type metadata for LLMAdapter?);
      OUTLINED_FUNCTION_185(v78, v79, &demangling cache variable for type metadata for CatalogResource?);
      if (v98)
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LLMDraftModel);
        v81 = OUTLINED_FUNCTION_54_3();
        if ((v81 & 1) != 0)
        {
          if (v100)
          {
            outlined init with take of LogitCollection(&v99, (uint64_t)&v101);
            __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
            OUTLINED_FUNCTION_190();
            dispatch thunk of ManagedResource.cost.getter();
            CostProfile.energyEfficientMode.getter();
            OUTLINED_FUNCTION_187();
            OUTLINED_FUNCTION_253();
            OnDeviceInferenceAssetRepository.handleDraftModel(identifier:url:useEnergyEfficientMode:)();
            goto LABEL_47;
          }
        }
        else
        {
          OUTLINED_FUNCTION_295();
        }
      }
      else
      {
        OUTLINED_FUNCTION_403(v80, &demangling cache variable for type metadata for CatalogResource?);
        OUTLINED_FUNCTION_290();
      }
      OUTLINED_FUNCTION_275(v81, &demangling cache variable for type metadata for LLMDraftModel?);
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_305();
      v83 = OUTLINED_FUNCTION_21_3();
      if (OUTLINED_FUNCTION_25_0(v83))
      {
        v84 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_QWORD *)&v101 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v84 = 136315138;
        v85 = OUTLINED_FUNCTION_50_1();
        *(_QWORD *)&v99 = OUTLINED_FUNCTION_138(v85, v86, (uint64_t *)&v101);
        OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v68, (os_log_type_t)v94, "Failed to load unhandled asset %s", v84);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }

      OUTLINED_FUNCTION_19_6();
      *(_QWORD *)&v101 = 0;
      *((_QWORD *)&v101 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_132(0xD000000000000010);
      OUTLINED_FUNCTION_32_4();
      OUTLINED_FUNCTION_5_9();
      OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v87, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      v88 = OUTLINED_FUNCTION_54_2();
      v90 = OUTLINED_FUNCTION_45_3(v88, v89);
      OUTLINED_FUNCTION_3_9(v90, *MEMORY[0x24BE68948]);
      OUTLINED_FUNCTION_223();
      OUTLINED_FUNCTION_61_4(v4, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      v71 = v94;
      v72 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
      v73 = v16;
    }
    v65 = v72(v71, v73);
LABEL_55:
    OUTLINED_FUNCTION_248(v65, &demangling cache variable for type metadata for CatalogResource?);
    goto LABEL_20;
  }
  outlined init with take of LogitCollection(&v105, (uint64_t)v107);
  OnDeviceInferenceAssetRepository.moveAssetFromDynamicToLoadedState(_:)();
  v27 = v107;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
LABEL_22:
  OUTLINED_FUNCTION_10_9();
}

uint64_t OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  v4 = type metadata accessor for InferenceError.Context();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = OUTLINED_FUNCTION_69();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t OnDeviceInferenceAssetRepository.unloadAsset(identifier:)()
{
  _QWORD *v0;
  os_log_type_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  _OWORD v54[2];
  uint64_t v55;

  if (one-time initialization token for device != -1)
    swift_once();
  v2 = v0[32];
  v3 = OUTLINED_FUNCTION_15_4();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.device);
  v0[37] = v4;
  OUTLINED_FUNCTION_64_1();
  v53 = v4;
  OUTLINED_FUNCTION_401();
  v5 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_231(v5))
  {
    v6 = v0[31];
    v7 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_QWORD *)&v54[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v7 = 136315138;
    OUTLINED_FUNCTION_92_1();
    v0[30] = OUTLINED_FUNCTION_345(v6, v8, (uint64_t *)v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v2, v1, "Unloading asset %s", v7);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  v9 = v0[32];
  v10 = v0[33];
  v11 = v0[31];
  OUTLINED_FUNCTION_4_0();
  v12 = *(_QWORD *)(v10 + 112);
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_65_0();
  specialized Dictionary.subscript.getter(v11, v9, v12, (uint64_t)(v0 + 7));
  OUTLINED_FUNCTION_7_0();
  v13 = OUTLINED_FUNCTION_50_2();
  v14 = v0[10];
  OUTLINED_FUNCTION_226(v13, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  if (!v14)
  {
    v15 = v0[33];
    OUTLINED_FUNCTION_4_0();
    v16 = *(_QWORD *)(v15 + 128);
    OUTLINED_FUNCTION_18_3();
    OUTLINED_FUNCTION_50_1();
    v17 = OUTLINED_FUNCTION_411();
    specialized Dictionary.subscript.getter(v17, v18, v16, v19);
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_51_1();
    v20 = v0[5];
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)(v0 + 2), &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    if (!v20)
    {
      v45 = v0[35];
      v44 = v0[36];
      OUTLINED_FUNCTION_177();
      *(_QWORD *)&v54[0] = v46;
      *((_QWORD *)&v54[0] + 1) = v47;
      String.append(_:)(v48);
      OUTLINED_FUNCTION_32_4();
      OUTLINED_FUNCTION_46_4();
      v49 = OUTLINED_FUNCTION_66_3();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v50, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      OUTLINED_FUNCTION_7_11();
      v52 = v51;
      OUTLINED_FUNCTION_26_0(v51, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v52, *MEMORY[0x24BE689E8], v49);
      swift_willThrow();
      OUTLINED_FUNCTION_293();
      OUTLINED_FUNCTION_14_3();
      v43 = (uint64_t (*)(void))v0[1];
      return v43();
    }
  }
  v22 = v0[31];
  v21 = v0[32];
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  OUTLINED_FUNCTION_260();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_18_3();
  specialized Dictionary.subscript.setter((uint64_t)v54, v22, v21);
  swift_endAccess();
  v23 = v0[32];
  v24 = v0[31];
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_21_1();
  v25 = OUTLINED_FUNCTION_65_0();
  specialized Sequence.contains(where:)(v25, v24, v23);
  v27 = v26;
  OUTLINED_FUNCTION_50_2();
  if ((v27 & 1) == 0)
  {
    OUTLINED_FUNCTION_382();
    OUTLINED_FUNCTION_64_1();
    OUTLINED_FUNCTION_401();
    v32 = OUTLINED_FUNCTION_83_0();
    if (os_log_type_enabled(v27, v32))
    {
      v33 = v0[31];
      v34 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      *(_QWORD *)&v54[0] = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v34 = 136315138;
      OUTLINED_FUNCTION_122();
      v0[29] = OUTLINED_FUNCTION_250(v33, v35, (uint64_t *)v54);
      OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v27, v32, "Finished unloading asset %s", v34);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    swift_task_dealloc();
    v43 = (uint64_t (*)(void))v0[1];
    return v43();
  }
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v28 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_17_3(v28))
  {
    v29 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_QWORD *)&v54[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v29 = 136315138;
    v30 = OUTLINED_FUNCTION_65_0();
    v0[28] = OUTLINED_FUNCTION_376(v30, v31, (uint64_t *)v54);
    OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v53, (os_log_type_t)v24, "Suspending unload for the asset %s since its currently in use", v29);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_19_6();
  v37 = v0[32];
  v36 = v0[33];
  v38 = v0[31];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OnDeviceInferenceAssetRepository and conformance OnDeviceInferenceAssetRepository, v39, (uint64_t (*)(uint64_t))type metadata accessor for OnDeviceInferenceAssetRepository, (uint64_t)&protocol conformance descriptor for OnDeviceInferenceAssetRepository);
  v40 = (_QWORD *)OUTLINED_FUNCTION_407();
  v0[38] = v40;
  v40[2] = v36;
  v40[3] = v38;
  v40[4] = v37;
  v41 = (_QWORD *)swift_task_alloc();
  v0[39] = v41;
  *v41 = v0;
  v41[1] = OnDeviceInferenceAssetRepository.unloadAsset(identifier:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_9_1();
}

{
  os_log_type_t v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(NSObject **)(v2 + 296);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v4 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_264(v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v14 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v5 = 136315138;
    OUTLINED_FUNCTION_65_0();
    v6 = OUTLINED_FUNCTION_310();
    *(_QWORD *)(v2 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v8);
    OUTLINED_FUNCTION_140();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v3, v1, "Resumed unload for asset %s", v5);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  OUTLINED_FUNCTION_382();
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_401();
  v9 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_17_3(v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v14 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v10 = 136315138;
    v11 = OUTLINED_FUNCTION_65_0();
    *(_QWORD *)(v2 + 232) = OUTLINED_FUNCTION_376(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v3, v0, "Finished unloading asset %s", v10);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #2 in OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v9, a3, a4);
  return swift_endAccess();
}

uint64_t OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[113] = v2;
  v3[112] = a2;
  v3[111] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v3[114] = OUTLINED_FUNCTION_69();
  v3[115] = OUTLINED_FUNCTION_282();
  v3[116] = OUTLINED_FUNCTION_69();
  v4 = type metadata accessor for TokenGenerationError.Context();
  v3[117] = v4;
  v3[118] = *(_QWORD *)(v4 - 8);
  v3[119] = OUTLINED_FUNCTION_69();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[120] = OUTLINED_FUNCTION_69();
  v5 = OUTLINED_FUNCTION_4_4();
  v3[121] = v5;
  v3[122] = *(_QWORD *)(v5 - 8);
  v3[123] = OUTLINED_FUNCTION_147();
  v3[124] = OUTLINED_FUNCTION_147();
  v3[125] = OUTLINED_FUNCTION_147();
  v3[126] = OUTLINED_FUNCTION_147();
  v3[127] = OUTLINED_FUNCTION_147();
  v3[128] = OUTLINED_FUNCTION_147();
  v3[129] = OUTLINED_FUNCTION_147();
  return OUTLINED_FUNCTION_9_1();
}

void OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  Swift::Int v122;
  os_log_type_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  __int128 *v136;
  __int128 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD **v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160[4];

  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1)
LABEL_59:
    swift_once();
  v1 = v0[129];
  v2 = v0[128];
  v3 = v0[122];
  v4 = v0[121];
  v5 = OUTLINED_FUNCTION_15_4();
  v0[130] = __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[131] = v6;
  v151 = v6;
  v6(v2, v1, v4);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_176();
  v159 = v0;
  v148 = v0 + 111;
  if (os_log_type_enabled((os_log_t)v2, v7))
  {
    v8 = OUTLINED_FUNCTION_4_11();
    v160[0] = (_QWORD *)OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v8 = 136315394;
    v9 = OUTLINED_FUNCTION_65_0();
    v10 = MEMORY[0x2495A9BC8](v9, MEMORY[0x24BEE0D00]);
    v12 = v11;
    OUTLINED_FUNCTION_50_2();
    v0[109] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, (uint64_t *)v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_20_2();
    *(_WORD *)(v8 + 12) = 2080;
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v13, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v14 = OUTLINED_FUNCTION_203();
    v0[110] = OUTLINED_FUNCTION_111_1(v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v2, v7, "Fetching assets %s for request %s", (uint8_t *)v8);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_186();

  v0[132] = v0 + 111;
  v16 = v0[111];
  v17 = *(_QWORD *)(v16 + 16);
  v0[133] = v17;
  if (!v17)
  {
    v27 = MEMORY[0x24BEE4AF8];
LABEL_47:
    v107 = *(_QWORD *)(v27 + 16);
    if (v107)
    {
      v2 = (unint64_t)(v0 + 2);
      v108 = v0 + 62;
      v149 = (uint64_t)(v0 + 72);
      v147 = (_QWORD **)(v0[113] + 120);
      v109 = v27 + 32;
      OUTLINED_FUNCTION_18_3();
      v157 = (uint64_t)(v0 + 2);
      do
      {
        v110 = OUTLINED_FUNCTION_115_0();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v110, v111);
        OUTLINED_FUNCTION_219();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (OUTLINED_FUNCTION_54_3())
        {
          swift_release();
          OUTLINED_FUNCTION_42();
          OUTLINED_FUNCTION_20_2();
          OUTLINED_FUNCTION_51_1();
        }
        else
        {
          v112 = v0[5];
          v113 = v0[6];
          __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v112);
          v156 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v112, v113);
          v115 = v114;
          OUTLINED_FUNCTION_4_0();
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v157, v149);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v160[0] = *v147;
          *v147 = (_QWORD *)0x8000000000000000;
          v116 = v0[75];
          v153 = v159[76];
          v117 = OUTLINED_FUNCTION_416();
          v119 = __swift_mutable_project_boxed_opaque_existential_1(v117, v118);
          v120 = *(_QWORD *)(v116 - 8);
          v121 = v108;
          v122 = OUTLINED_FUNCTION_69();
          (*(void (**)(Swift::Int, uint64_t, uint64_t))(v120 + 16))(v122, v119, v116);
          v0 = v159;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v122, v156, v115, isUniquelyReferenced_nonNull_native, v160, v116, v153);
          __swift_destroy_boxed_opaque_existential_1(v149);
          v108 = v121;
          swift_task_dealloc();
          *v147 = v160[0];
          v2 = v157;
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_20_2();
          swift_endAccess();
        }
        OUTLINED_FUNCTION_404();
        v109 += 40;
        --v107;
      }
      while (v107);
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_144();
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v123 = OUTLINED_FUNCTION_176();
    if (OUTLINED_FUNCTION_73_1(v123))
    {
      v124 = (_DWORD *)OUTLINED_FUNCTION_4_11();
      v125 = OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_255(v125);
      *v124 = 136315394;
      v126 = OUTLINED_FUNCTION_74_1();
      v127 = MEMORY[0x2495A9BC8](v126, MEMORY[0x24BEE0D00]);
      OUTLINED_FUNCTION_116_0();
      v0[102] = OUTLINED_FUNCTION_250(v127, v128, (uint64_t *)v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_422();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v129, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v130 = OUTLINED_FUNCTION_203();
      v0[101] = OUTLINED_FUNCTION_111_1(v130, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_336();
      OUTLINED_FUNCTION_258();
      OUTLINED_FUNCTION_99_1(&dword_248CAA000, v132, v133, "Successfully fetched asset %s for request %s");
      OUTLINED_FUNCTION_53_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_354();

    OUTLINED_FUNCTION_212((uint64_t (*)(uint64_t))v0[132]);
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_369();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_277();
    swift_task_dealloc();
    OUTLINED_FUNCTION_296();
    swift_task_dealloc();
    OUTLINED_FUNCTION_152();
    __asm { BR              X1 }
  }
  v145 = (uint64_t)(v0 + 12);
  v137 = (__int128 *)(v0 + 27);
  v138 = (uint64_t)(v0 + 17);
  v136 = (__int128 *)(v0 + 32);
  v146 = (uint64_t)(v0 + 47);
  v154 = (__int128 *)(v0 + 52);
  v144 = v0 + 57;
  v18 = (uint64_t)(v0 + 7);
  v139 = (uint64_t)(v0 + 22);
  v140 = v0 + 107;
  v142 = v0 + 108;
  v19 = v0[113] + 120;
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_4_0();
  v20 = (uint64_t *)(v16 + 40);
  while (1)
  {
    v21 = *v20;
    v22 = *(_QWORD **)v19;
    if (*(_QWORD *)(*(_QWORD *)v19 + 16))
      break;
    OUTLINED_FUNCTION_158();
    OUTLINED_FUNCTION_74_1();
LABEL_12:
    OUTLINED_FUNCTION_399();
    OUTLINED_FUNCTION_116_0();
    v20 += 2;
    if (!--v17)
    {
      v0 = v159;
      OUTLINED_FUNCTION_329();
      v141 = v159[116];
      OUTLINED_FUNCTION_244();
      OUTLINED_FUNCTION_4_0();
      v26 = 0;
      v27 = MEMORY[0x24BEE4AF8];
      v28 = v148;
      v30 = v138;
      v29 = v139;
      while (1)
      {
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_59;
        }
        v150 = v27;
        v2 = *(_QWORD *)(*v28 + v17 + 40);
        if (!*(_QWORD *)(*v22 + 16))
        {
          *(_QWORD *)(v29 + 32) = 0;
          *(_OWORD *)v29 = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
          OUTLINED_FUNCTION_52();
LABEL_44:
          v86 = (void (*)(uint64_t))v0[131];
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_20_2();
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v29, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
          v87 = OUTLINED_FUNCTION_310();
          v86(v87);
          OUTLINED_FUNCTION_64_1();
          v88 = Logger.logObject.getter();
          v89 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v88, v89))
          {
            v90 = OUTLINED_FUNCTION_4_11();
            v91 = OUTLINED_FUNCTION_4_11();
            OUTLINED_FUNCTION_255(v91);
            *(_DWORD *)v90 = 136315394;
            OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v92, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
            v93 = OUTLINED_FUNCTION_380();
            v95 = v94;
            v159[104] = OUTLINED_FUNCTION_111_1(v93, v94);
            OUTLINED_FUNCTION_317();
            OUTLINED_FUNCTION_374();
            OUTLINED_FUNCTION_356();
            *(_WORD *)(v90 + 12) = 2080;
            OUTLINED_FUNCTION_52();
            v96 = OUTLINED_FUNCTION_115_0();
            *(_QWORD *)(v95 + 824) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v98);
            OUTLINED_FUNCTION_346();
            OUTLINED_FUNCTION_26_5();
            OUTLINED_FUNCTION_124_0(&dword_248CAA000, v88, v89, "Fetch for request %s failed, asset %s is not loaded", (uint8_t *)v90);
            OUTLINED_FUNCTION_53_3();
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_356();

          OUTLINED_FUNCTION_19_6();
          v99 = v159[119];
          v100 = v159[118];
          OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
          OUTLINED_FUNCTION_196();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_304();
          v101._countAndFlagsBits = OUTLINED_FUNCTION_115_0();
          String.append(_:)(v101);
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_102_1();
          OUTLINED_FUNCTION_328();
          v102 = OUTLINED_FUNCTION_95_1();
          OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v103, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
          OUTLINED_FUNCTION_7_11();
          v105 = v104;
          OUTLINED_FUNCTION_26_0(v104, v99, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 16));
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v105, *MEMORY[0x24BEB8050], v102);
          OUTLINED_FUNCTION_366();
          OUTLINED_FUNCTION_379(v159[118]);
          OUTLINED_FUNCTION_405();
          OUTLINED_FUNCTION_14_3();
          OUTLINED_FUNCTION_12_3();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_309();
          OUTLINED_FUNCTION_202();
          OUTLINED_FUNCTION_277();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_17_0();
          swift_task_dealloc();
          OUTLINED_FUNCTION_296();
          OUTLINED_FUNCTION_152();
          __asm { BR              X0 }
        }
        v158 = v26 + 1;
        OUTLINED_FUNCTION_64_1();
        OUTLINED_FUNCTION_21_1();
        v31 = OUTLINED_FUNCTION_115_0();
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        if ((v34 & 1) != 0)
        {
          v35 = OUTLINED_FUNCTION_292(v33);
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v35, v29);
        }
        else
        {
          *(_QWORD *)(v29 + 32) = 0;
          *(_OWORD *)v29 = 0u;
          *(_OWORD *)(v29 + 16) = 0u;
        }
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_42();
        if (!v0[25])
          goto LABEL_44;
        OUTLINED_FUNCTION_7_0();
        outlined init with take of LogitCollection((__int128 *)v29, v30);
        OUTLINED_FUNCTION_324(v30);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (OUTLINED_FUNCTION_54_3())
        {

          OUTLINED_FUNCTION_42();
          OUTLINED_FUNCTION_385();
        }
        else
        {
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v30, v146);
          if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
          {
            v36 = (uint64_t *)v0[116];
            v37 = v30;
            v38 = v0[115];
            v39 = v0[114];
            OUTLINED_FUNCTION_240(v39);
            outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v39, (uint64_t)v36, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
            OUTLINED_FUNCTION_411();
            OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)();
            v0[35] = v38;
            v0[36] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
            v40 = OUTLINED_FUNCTION_259();
            OUTLINED_FUNCTION_97_1((uint64_t)v36, (uint64_t)v40);
            OUTLINED_FUNCTION_372();
            outlined init with take of LogitCollection(v136, v37);
            v143 = *v36;
            v152 = *(_QWORD *)(v141 + 8);
            v0[30] = v38;
            v0[31] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
            v41 = OUTLINED_FUNCTION_259();
            OUTLINED_FUNCTION_97_1((uint64_t)v36, (uint64_t)v41);
            OUTLINED_FUNCTION_4_0();
            outlined init with take of LogitCollection(v137, v145);
            OUTLINED_FUNCTION_122();
            v42 = swift_isUniquelyReferenced_nonNull_native();
            OUTLINED_FUNCTION_265();
            v43 = OUTLINED_FUNCTION_53();
            v45 = __swift_mutable_project_boxed_opaque_existential_1(v43, v44);
            v46 = *(v22 - 1);
            v47 = OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_26_0(v47, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
            v0[60] = v38;
            v0[61] = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v144);
            outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v47, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
            OUTLINED_FUNCTION_332(v143);
            OUTLINED_FUNCTION_238();
            v53 = v51 + v52;
            if (__OFADD__(v51, v52))
            {
              __break(1u);
              return;
            }
            v54 = v49;
            v55 = v50;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v42, v53))
            {
              v56 = OUTLINED_FUNCTION_332(v143);
              if ((v55 & 1) != (v57 & 1))
              {
                OUTLINED_FUNCTION_152();
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                return;
              }
              v54 = v56;
            }
            if ((v55 & 1) != 0)
            {
              v58 = v160[0][7] + 40 * v54;
              __swift_destroy_boxed_opaque_existential_1(v58);
              outlined init with take of LogitCollection((__int128 *)v144, v58);
              v59 = v159;
            }
            else
            {
              v59 = v159;
              v61 = v159[60];
              v135 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v144, v61);
              v62 = *(_QWORD *)(v61 - 8);
              v63 = OUTLINED_FUNCTION_69();
              OUTLINED_FUNCTION_26_0(v63, v135, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 16));
              specialized _NativeDictionary._insert(at:key:value:)(v54, v143, v152, v63, v160[0]);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
              OUTLINED_FUNCTION_202();
              OUTLINED_FUNCTION_57_0();
            }
            v29 = v139;
            v64 = v59[116];
            __swift_destroy_boxed_opaque_existential_1(v145);
            OUTLINED_FUNCTION_369();
            *v22 = v160[0];
            OUTLINED_FUNCTION_58_0();
            OUTLINED_FUNCTION_50_2();
            swift_endAccess();
            OUTLINED_FUNCTION_319();
            outlined destroy of MaskedLanguageModel.SingleLogitCollection(v64, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
            E5TransformerLanguageModel.clearKVCacheUsageMetrics()();
            OUTLINED_FUNCTION_116();
            v0 = v59;
            v28 = v148;
            v27 = v150;
            v30 = v138;
          }
          else
          {
            v60 = OUTLINED_FUNCTION_233();
            _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v60, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
          }
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v30, (uint64_t)v154);
          if ((OUTLINED_FUNCTION_102() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v27 = v66;
          }
          v2 = *(_QWORD *)(v27 + 16);
          v65 = *(_QWORD *)(v27 + 24);
          if (v2 >= v65 >> 1)
          {
            OUTLINED_FUNCTION_318(v65);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v27 = v67;
          }
          *(_QWORD *)(v27 + 16) = v2 + 1;
          outlined init with take of LogitCollection(v154, v27 + 40 * v2 + 32);
          OUTLINED_FUNCTION_385();
        }
        ++v26;
        v17 += 16;
        if (v158 == v0[133])
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
      }
    }
  }
  v23 = *(v20 - 1);
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_21_1();
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v21);
  if ((v25 & 1) != 0)
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v22[7] + 40 * v24, v18);
  else
    OUTLINED_FUNCTION_158();
  OUTLINED_FUNCTION_116_0();
  OUTLINED_FUNCTION_42();
  if (!v159[10])
    goto LABEL_12;
  v68 = v159[129];
  v69 = v159[127];
  v70 = v159[121];
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v18, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  swift_bridgeObjectRelease();
  v151(v69, v68, v70);
  OUTLINED_FUNCTION_74_1();
  v71 = Logger.logObject.getter();
  v72 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_291(v71))
  {
    v73 = OUTLINED_FUNCTION_4_11();
    v74 = OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_255(v74);
    *(_DWORD *)v73 = 136315394;
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v75, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v76 = OUTLINED_FUNCTION_380();
    *v140 = OUTLINED_FUNCTION_111_1(v76, v77);
    OUTLINED_FUNCTION_317();
    OUTLINED_FUNCTION_374();
    OUTLINED_FUNCTION_355();
    *(_WORD *)(v73 + 12) = 2080;
    v78 = OUTLINED_FUNCTION_74_1();
    *v142 = OUTLINED_FUNCTION_406(v78, v79, (uint64_t *)v160);
    OUTLINED_FUNCTION_346();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v71, v72, "Suspending fetch for request %s since asset %s is in use", (uint8_t *)v73);
    OUTLINED_FUNCTION_53_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_355();

  OUTLINED_FUNCTION_19_6();
  v80 = v159[129];
  v81 = v159[113];
  v82 = v159[111];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OnDeviceInferenceAssetRepository and conformance OnDeviceInferenceAssetRepository, v83, (uint64_t (*)(uint64_t))type metadata accessor for OnDeviceInferenceAssetRepository, (uint64_t)&protocol conformance descriptor for OnDeviceInferenceAssetRepository);
  v84 = (_QWORD *)OUTLINED_FUNCTION_407();
  v159[134] = v84;
  v84[2] = v82;
  v84[3] = v80;
  v84[4] = v81;
  v85 = (_QWORD *)swift_task_alloc();
  v159[135] = v85;
  *v85 = v159;
  v85[1] = OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:);
  OUTLINED_FUNCTION_152();
  withCheckedContinuation<A>(isolation:function:_:)();
}

{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  void *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  os_log_type_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  os_log_type_t v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  __int128 *v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 *v160;
  _QWORD **v161;
  uint64_t v162;
  _QWORD *v163;
  char v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t);
  uint64_t *v169;
  _QWORD *v170[4];

  v154 = (uint64_t)(v2 + 12);
  v152 = (uint64_t)(v2 + 17);
  v147 = (__int128 *)(v2 + 32);
  v148 = (__int128 *)(v2 + 27);
  v156 = (uint64_t)(v2 + 47);
  v160 = (__int128 *)(v2 + 52);
  v155 = v2 + 57;
  v158 = (uint64_t)(v2 + 62);
  v151 = (uint64_t)(v2 + 72);
  ((void (*)(uint64_t, uint64_t, uint64_t))v2[131])(v2[126], v2[129], v2[121]);
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_176();
  v143 = v2 + 2;
  if (OUTLINED_FUNCTION_73_1(v3))
  {
    v168 = (void (*)(uint64_t))v2[132];
    v4 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v170[0] = (_QWORD *)OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v4 = 136315138;
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v2[106] = OUTLINED_FUNCTION_111_1(v6, v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    v8 = OUTLINED_FUNCTION_270();
    v168(v8);
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v0, v1, "Resumed fetch request %s", v4);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  ((void (*)(uint64_t, uint64_t))v2[132])(v2[126], v2[121]);

  v157 = (uint64_t)(v2 + 22);
  v9 = (uint64_t)(v2 + 42);
  v141 = v2 + 102;
  v142 = v2 + 101;
  v146 = v2 + 103;
  v144 = v2 + 104;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  v12 = &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?;
  v169 = v2;
  do
  {
    v13 = v2[111] + v10;
    v15 = *(_QWORD *)(v13 + 32);
    v14 = *(_QWORD *)(v13 + 40);
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_18_3();
    OUTLINED_FUNCTION_21_1();
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    v18 = v17;
    OUTLINED_FUNCTION_42();
    if ((v18 & 1) != 0)
    {
      v2 = v12;
      v19 = v169[113];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v170[0] = *(_QWORD **)(v19 + 120);
      v21 = v170[0];
      *(_QWORD *)(v19 + 120) = 0x8000000000000000;
      v22 = v21[3];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
      swift_bridgeObjectRelease();
      outlined init with take of LogitCollection((__int128 *)(v170[0][7] + 40 * v16), v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      _NativeDictionary._delete(at:)();
      *(_QWORD **)(v19 + 120) = v170[0];
      v12 = v2;
      OUTLINED_FUNCTION_336();
    }
    else
    {
      *(_QWORD *)(v9 + 32) = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
    }
    ++v11;
    v23 = v2[133];
    OUTLINED_FUNCTION_20_2();
    v24 = OUTLINED_FUNCTION_418();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v24, v25);
    OUTLINED_FUNCTION_340();
    v10 += 16;
  }
  while (v11 != v23);
  v26 = v2[113];
  OUTLINED_FUNCTION_329();
  OUTLINED_FUNCTION_4_0();
  v27 = *(NSObject **)(v26 + 152);
  OUTLINED_FUNCTION_52();
  v28 = OUTLINED_FUNCTION_260();
  v30 = specialized Set.contains(_:)(v28, v29);
  OUTLINED_FUNCTION_7_0();
  if ((v30 & 1) != 0)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v2[131])(v2[125], v2[129], v2[121]);
    Logger.logObject.getter();
    v31 = OUTLINED_FUNCTION_176();
    v32 = OUTLINED_FUNCTION_73_1(v31);
    v33 = v2[125];
    v34 = v2[121];
    if (v32)
    {
      v165 = (void (*)(uint64_t, uint64_t))v2[132];
      v35 = (uint8_t *)swift_slowAlloc();
      v170[0] = (_QWORD *)OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v35 = 136315138;
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v36, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v169[105] = OUTLINED_FUNCTION_111_1(v37, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_336();
      v165(v33, v34);
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v27, (os_log_type_t)v14, "Request %s is cancelled because of asset unload", v35);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    ((void (*)(uint64_t, uint64_t))v2[132])(v2[125], v2[121]);

    v85 = v2[129];
    v86 = v2[120];
    v87 = v2[119];
    v88 = v2[118];
    v89 = v2[117];
    OUTLINED_FUNCTION_4_0();
    specialized Set._Variant.remove(_:)(v85, v86);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v86, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_340();
    OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
    OUTLINED_FUNCTION_311();
    OUTLINED_FUNCTION_328();
    v90 = OUTLINED_FUNCTION_95_1();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v91, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
    OUTLINED_FUNCTION_7_11();
    v93 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v92, v87, v89);
    v94 = (unsigned int *)MEMORY[0x24BEB8090];
    goto LABEL_42;
  }
  v153 = v2[116];
  OUTLINED_FUNCTION_244();
  v163 = (_QWORD *)v30;
  OUTLINED_FUNCTION_4_0();
  v39 = 0;
  v40 = 0;
  v41 = MEMORY[0x24BEE4AF8];
  v42 = v152;
  v43 = v157;
  while (!__OFADD__(v40, 1))
  {
    v44 = v2[111];
    v46 = *(_QWORD *)(v44 + v39 + 32);
    v45 = *(void **)(v44 + v39 + 40);
    if (!*(_QWORD *)(*v163 + 16))
    {
      OUTLINED_FUNCTION_158();
      OUTLINED_FUNCTION_50_1();
LABEL_39:
      v95 = (void (*)(uint64_t, uint64_t, uint64_t))v2[131];
      v96 = v2[129];
      v97 = v2[124];
      v98 = v2[121];
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_116_0();
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v43, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
      v95(v97, v96, v98);
      OUTLINED_FUNCTION_64_1();
      v99 = (void *)Logger.logObject.getter();
      v100 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_73_1(v100))
      {
        v101 = (_DWORD *)OUTLINED_FUNCTION_4_11();
        v102 = OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_255(v102);
        *v101 = 136315394;
        OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v103, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v104 = dispatch thunk of CustomStringConvertible.description.getter();
        *v144 = OUTLINED_FUNCTION_111_1(v104, v105);
        OUTLINED_FUNCTION_317();
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_358();
        OUTLINED_FUNCTION_422();
        v106 = OUTLINED_FUNCTION_50_1();
        *v146 = OUTLINED_FUNCTION_386(v106, v107, (uint64_t *)v170);
        OUTLINED_FUNCTION_346();
        OUTLINED_FUNCTION_26_5();
        OUTLINED_FUNCTION_99_1(&dword_248CAA000, v108, v109, "Fetch for request %s failed, asset %s is not loaded");
        OUTLINED_FUNCTION_53_3();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_358();
      OUTLINED_FUNCTION_19_6();

      v2 = v169;
      v110 = v169[119];
      v111 = v169[118];
      OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
      OUTLINED_FUNCTION_196();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_304();
      v112._countAndFlagsBits = v46;
      v112._object = v45;
      String.append(_:)(v112);
      OUTLINED_FUNCTION_51_1();
      OUTLINED_FUNCTION_102_1();
      OUTLINED_FUNCTION_328();
      v90 = OUTLINED_FUNCTION_95_1();
      OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, v113, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      OUTLINED_FUNCTION_7_11();
      v93 = v114;
      OUTLINED_FUNCTION_48_0(v114, v110, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 16));
      v94 = (unsigned int *)MEMORY[0x24BEB8050];
LABEL_42:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v90 - 8) + 104))(v93, *v94, v90);
      swift_willThrow();
      OUTLINED_FUNCTION_379(v2[118]);
      OUTLINED_FUNCTION_405();
      OUTLINED_FUNCTION_14_3();
      OUTLINED_FUNCTION_12_3();
      OUTLINED_FUNCTION_10_6();
      OUTLINED_FUNCTION_309();
      OUTLINED_FUNCTION_202();
      OUTLINED_FUNCTION_277();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_17_0();
      swift_task_dealloc();
      OUTLINED_FUNCTION_296();
      OUTLINED_FUNCTION_245();
      __asm { BR              X0 }
    }
    v166 = v40 + 1;
    OUTLINED_FUNCTION_64_1();
    OUTLINED_FUNCTION_21_1();
    v47 = OUTLINED_FUNCTION_334(v46);
    if ((v48 & 1) != 0)
    {
      v49 = OUTLINED_FUNCTION_292(v47);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v49, v43);
    }
    else
    {
      OUTLINED_FUNCTION_158();
    }
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_51_1();
    if (!v2[25])
      goto LABEL_39;
    OUTLINED_FUNCTION_51_1();
    v50 = (__int128 *)OUTLINED_FUNCTION_53();
    outlined init with take of LogitCollection(v50, v51);
    OUTLINED_FUNCTION_324(v42);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    if (OUTLINED_FUNCTION_54_3())
    {
      v52 = (void *)v2[82];
      swift_bridgeObjectRelease();

    }
    else
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v42, v156);
      if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
      {
        v159 = v41;
        v53 = (uint64_t *)v2[116];
        v54 = v2[115];
        __swift_storeEnumTagSinglePayload(v2[114], 0, 1, v54);
        v55 = OUTLINED_FUNCTION_411();
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v55, v56, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)();
        v2[35] = v54;
        v2[36] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        v57 = OUTLINED_FUNCTION_259();
        OUTLINED_FUNCTION_162((uint64_t)v53, (uint64_t)v57);
        OUTLINED_FUNCTION_385();
        outlined init with take of LogitCollection(v147, v42);
        v149 = *(_QWORD *)(v153 + 8);
        v150 = *v53;
        v2[30] = v54;
        v2[31] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        v58 = OUTLINED_FUNCTION_259();
        OUTLINED_FUNCTION_162((uint64_t)v53, (uint64_t)v58);
        OUTLINED_FUNCTION_4_0();
        outlined init with take of LogitCollection(v148, v154);
        OUTLINED_FUNCTION_85_1();
        v59 = swift_isUniquelyReferenced_nonNull_native();
        OUTLINED_FUNCTION_265();
        v60 = OUTLINED_FUNCTION_310();
        v62 = v2;
        v63 = __swift_mutable_project_boxed_opaque_existential_1(v60, v61);
        v64 = *(v163 - 1);
        v65 = OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_26_0(v65, v63, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 16));
        v62[60] = v54;
        v62[61] = (uint64_t)&protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v155);
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v65, (uint64_t)boxed_opaque_existential_1, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        OUTLINED_FUNCTION_334(v150);
        OUTLINED_FUNCTION_238();
        v71 = v69 + v70;
        if (__OFADD__(v69, v70))
          goto LABEL_55;
        v72 = v67;
        v73 = v68;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
        v2 = v169;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v59, v71))
        {
          v74 = OUTLINED_FUNCTION_334(v150);
          if ((v73 & 1) != (v75 & 1))
          {
            OUTLINED_FUNCTION_245();
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            return;
          }
          v72 = v74;
        }
        if ((v73 & 1) != 0)
        {
          OUTLINED_FUNCTION_404();
          OUTLINED_FUNCTION_368((__int128 *)v155);
        }
        else
        {
          v77 = v169[60];
          v145 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v155, v77);
          v78 = *(_QWORD *)(v77 - 8);
          v79 = OUTLINED_FUNCTION_69();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v79, v145, v77);
          specialized _NativeDictionary._insert(at:key:value:)(v72, v150, v149, v79, v170[0]);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
          v2 = v169;
          swift_task_dealloc();
          OUTLINED_FUNCTION_65_0();
        }
        v41 = v159;
        v42 = v152;
        v43 = v157;
        v80 = v2[116];
        __swift_destroy_boxed_opaque_existential_1(v154);
        swift_task_dealloc();
        OUTLINED_FUNCTION_344(v163);
        OUTLINED_FUNCTION_51_1();
        swift_endAccess();
        OUTLINED_FUNCTION_319();
        outlined destroy of MaskedLanguageModel.SingleLogitCollection(v80, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        E5TransformerLanguageModel.clearKVCacheUsageMetrics()();
        OUTLINED_FUNCTION_116();
      }
      else
      {
        v76 = OUTLINED_FUNCTION_233();
        _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v76, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        v43 = v157;
      }
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v42, (uint64_t)v160);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v83;
      }
      v82 = *(_QWORD *)(v41 + 16);
      v81 = *(_QWORD *)(v41 + 24);
      if (v82 >= v81 >> 1)
      {
        OUTLINED_FUNCTION_318(v81);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v84;
      }
      *(_QWORD *)(v41 + 16) = v82 + 1;
      outlined init with take of LogitCollection(v160, v41 + 40 * v82 + 32);
    }
    __swift_destroy_boxed_opaque_existential_1(v42);
    ++v40;
    v39 += 16;
    if (v166 == v2[133])
    {
      OUTLINED_FUNCTION_329();
      v116 = *(char **)(v41 + 16);
      if (v116)
      {
        v161 = (_QWORD **)(v2[113] + 120);
        v117 = v41 + 32;
        OUTLINED_FUNCTION_74_1();
        v118 = v143;
        do
        {
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v117, (uint64_t)v118);
          _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v118, v158);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
          if (OUTLINED_FUNCTION_54_3())
          {
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_116();
            OUTLINED_FUNCTION_50_2();
            OUTLINED_FUNCTION_119_0();
          }
          else
          {
            v119 = v2[6];
            __swift_project_boxed_opaque_existential_1(v118, v2[5]);
            v120 = OUTLINED_FUNCTION_190();
            v167 = v121(v120, v119);
            v123 = v122;
            OUTLINED_FUNCTION_4_0();
            _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v118, v151);
            v164 = swift_isUniquelyReferenced_nonNull_native();
            v170[0] = *v161;
            *v161 = (_QWORD *)0x8000000000000000;
            v124 = v2[75];
            v162 = v169[76];
            v125 = __swift_mutable_project_boxed_opaque_existential_1(v151, v124);
            v126 = *(_QWORD *)(v124 - 8);
            v127 = v118;
            v128 = OUTLINED_FUNCTION_69();
            OUTLINED_FUNCTION_48_0(v128, v125, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 16));
            v2 = v169;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v128, v167, v123, v164, v170, v124, v162);
            __swift_destroy_boxed_opaque_existential_1(v151);
            v118 = v127;
            swift_task_dealloc();
            *v161 = v170[0];
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_51_1();
            swift_endAccess();
          }
          OUTLINED_FUNCTION_372();
          v117 += 40;
          --v116;
        }
        while (v116);
        OUTLINED_FUNCTION_116_0();
      }
      OUTLINED_FUNCTION_144();
      OUTLINED_FUNCTION_64_1();
      Logger.logObject.getter();
      v129 = OUTLINED_FUNCTION_176();
      if (OUTLINED_FUNCTION_73_1(v129))
      {
        v130 = (_DWORD *)OUTLINED_FUNCTION_4_11();
        v131 = OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_255(v131);
        *v130 = 136315394;
        v132 = OUTLINED_FUNCTION_85_1();
        v133 = MEMORY[0x2495A9BC8](v132, MEMORY[0x24BEE0D00]);
        OUTLINED_FUNCTION_119_0();
        *v141 = OUTLINED_FUNCTION_250(v133, v134, (uint64_t *)v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_422();
        OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v135, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v136 = OUTLINED_FUNCTION_203();
        *v142 = OUTLINED_FUNCTION_111_1(v136, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_119_0();
        OUTLINED_FUNCTION_258();
        OUTLINED_FUNCTION_99_1(&dword_248CAA000, v138, v139, "Successfully fetched asset %s for request %s");
        OUTLINED_FUNCTION_53_3();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_354();

      OUTLINED_FUNCTION_212((uint64_t (*)(uint64_t))v2[132]);
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_14_3();
      OUTLINED_FUNCTION_12_3();
      OUTLINED_FUNCTION_10_6();
      OUTLINED_FUNCTION_309();
      OUTLINED_FUNCTION_202();
      OUTLINED_FUNCTION_277();
      swift_task_dealloc();
      OUTLINED_FUNCTION_369();
      OUTLINED_FUNCTION_296();
      swift_task_dealloc();
      OUTLINED_FUNCTION_245();
      __asm { BR              X1 }
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
}

uint64_t OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)()
{
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_9_1();
}

void closure #2 in OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (char *)v12 + *(int *)(v10 + 20);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a1, v14);
  v15 = (char *)v12 + *(int *)(v8 + 24);
  v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a3, v16);
  *v12 = a2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 136) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v18 = *(_QWORD *)(a4 + 136);
  *(_QWORD *)(v18 + 16) = v17 + 1;
  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0((uint64_t)v12, v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17, type metadata accessor for OnDeviceInferenceSuspendedFetch);
  swift_endAccess();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection((uint64_t)v12, type metadata accessor for OnDeviceInferenceSuspendedFetch);
}

Swift::Void __swiftcall OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(Swift::OpaquePointer assetObjects)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  NSObject *v74;
  char *v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  OUTLINED_FUNCTION_51();
  v72[0] = v1;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
  OUTLINED_FUNCTION_1_4();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v72 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_0();
  v77 = v12;
  v13 = *(_QWORD *)(v3 + 16);
  if (v13)
  {
    v78 = v11;
    v75 = v7;
    v84 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v14 = v3 + 32;
    v15 = (_QWORD *)v84;
    do
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v14, (uint64_t)&v85);
      v16 = *((_QWORD *)&v86 + 1);
      v17 = v87;
      __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      v20 = v19;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = (_QWORD *)v84;
      }
      v21 = v15[2];
      if (v21 >= v15[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = (_QWORD *)v84;
      }
      v15[2] = v21 + 1;
      v22 = &v15[2 * v21];
      v22[4] = v18;
      v22[5] = v20;
      v14 += 40;
      --v13;
    }
    while (v13);
    v81 = v10;
    v79 = v9;
    if (one-time initialization token for device != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_15_4();
    v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_122();
    swift_retain();
    v74 = v24;
    Logger.logObject.getter();
    v25 = OUTLINED_FUNCTION_176();
    v26 = os_log_type_enabled(0, v25);
    v27 = MEMORY[0x24BEE4AD8];
    if (v26)
    {
      v28 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      *(_QWORD *)&v85 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v28 = 136315138;
      v29 = OUTLINED_FUNCTION_122();
      v30 = MEMORY[0x2495A9BC8](v29, MEMORY[0x24BEE0D00]);
      swift_release();
      v84 = OUTLINED_FUNCTION_345(v30, v31, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_375();
      OUTLINED_FUNCTION_161();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, 0, v25, "Releasing assets %s", v28);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_375();
    v32 = v15[2];
    if (v32)
    {
      v33 = (uint64_t *)(v72[0] + 120);
      v80 = (_QWORD *)(v72[0] + 144);
      OUTLINED_FUNCTION_4_0();
      v34 = v15 + 5;
      *(_QWORD *)&v35 = 136315138;
      v73 = v35;
      v72[1] = v27 + 8;
      do
      {
        v37 = *(v34 - 1);
        v36 = *v34;
        OUTLINED_FUNCTION_4_0();
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_21_1();
        v38 = OUTLINED_FUNCTION_206();
        v40 = v39;
        OUTLINED_FUNCTION_42();
        if ((v40 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v82 = *v33;
          v42 = v82;
          *v33 = 0x8000000000000000;
          v43 = *(_QWORD *)(v42 + 24);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v43);
          v44 = v82;
          OUTLINED_FUNCTION_262();
          outlined init with take of LogitCollection((__int128 *)(*(_QWORD *)(v44 + 56) + 40 * v38), (uint64_t)&v85);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
          _NativeDictionary._delete(at:)();
          *v33 = v44;
          swift_bridgeObjectRelease();
        }
        else
        {
          v87 = 0;
          v85 = 0u;
          v86 = 0u;
        }
        v45 = (uint64_t)v79;
        v46 = v80;
        v47 = v81;
        _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)&v85, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
        OUTLINED_FUNCTION_322();
        v48 = *v46;
        if (*(_QWORD *)(*v46 + 16))
        {
          OUTLINED_FUNCTION_52();
          OUTLINED_FUNCTION_21_1();
          v49 = OUTLINED_FUNCTION_206();
          if ((v50 & 1) != 0)
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v78 + 16))(v45, *(_QWORD *)(v48 + 56) + *(_QWORD *)(v78 + 72) * v49, v47);
            v51 = 0;
          }
          else
          {
            v51 = 1;
          }
          __swift_storeEnumTagSinglePayload(v45, v51, 1, v47);
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_42();
          OUTLINED_FUNCTION_247(v45, 1);
          if (!v55)
          {
            v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32);
            v76(v77, v45, v47);
            OUTLINED_FUNCTION_64_1();
            v56 = v74;
            Logger.logObject.getter();
            v57 = OUTLINED_FUNCTION_83_0();
            if (OUTLINED_FUNCTION_264(v57))
            {
              v59 = OUTLINED_FUNCTION_4_11();
              *(_QWORD *)&v85 = OUTLINED_FUNCTION_4_11();
              *(_DWORD *)v59 = v73;
              OUTLINED_FUNCTION_52();
              *(_QWORD *)(v59 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, (uint64_t *)&v85);
              OUTLINED_FUNCTION_26_5();
              OUTLINED_FUNCTION_37_2(&dword_248CAA000, v56, (os_log_type_t)v45, "Resuming suspended unload for asset %s", (uint8_t *)v59);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_0_1();
            }

            OUTLINED_FUNCTION_19_6();
            OUTLINED_FUNCTION_4_0();
            OUTLINED_FUNCTION_21_1();
            v60 = OUTLINED_FUNCTION_206();
            v62 = v61;
            OUTLINED_FUNCTION_42();
            if ((v62 & 1) != 0)
            {
              v63 = swift_isUniquelyReferenced_nonNull_native();
              v83 = *v46;
              v64 = v83;
              *v46 = 0x8000000000000000;
              v65 = *(_QWORD *)(v64 + 24);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CheckedContinuation<(), Never>>);
              _NativeDictionary.ensureUnique(isUnique:capacity:)(v63, v65);
              v66 = v83;
              OUTLINED_FUNCTION_262();
              v67 = v78;
              v68 = (uint64_t)v75;
              v69 = v81;
              OUTLINED_FUNCTION_274((uint64_t)v75, *(_QWORD *)(v66 + 56) + *(_QWORD *)(v78 + 72) * v60, v76);
              _NativeDictionary._delete(at:)();
              OUTLINED_FUNCTION_344(v80);
              v70 = 0;
            }
            else
            {
              v70 = 1;
              v68 = (uint64_t)v75;
              v69 = v81;
              v67 = v78;
            }
            __swift_storeEnumTagSinglePayload(v68, v70, 1, v69);
            OUTLINED_FUNCTION_7_0();
            _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v68, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
            swift_endAccess();
            v71 = v77;
            CheckedContinuation.resume(returning:)();
            OUTLINED_FUNCTION_333(v71, *(uint64_t (**)(uint64_t, uint64_t))(v67 + 8));
            goto LABEL_31;
          }
        }
        else
        {
          OUTLINED_FUNCTION_118_0();
          __swift_storeEnumTagSinglePayload(v52, v53, v54, v47);
        }
        OUTLINED_FUNCTION_7_0();
        _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v45, &demangling cache variable for type metadata for CheckedContinuation<(), Never>?);
LABEL_31:
        v34 += 2;
        --v32;
      }
      while (v32);
    }
    swift_release();
    OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
  }
  OUTLINED_FUNCTION_31();
}

uint64_t OnDeviceInferenceAssetRepository.moveAssetToDynamicState(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[57] = a2;
  v3[58] = v2;
  v3[56] = a1;
  v4 = type metadata accessor for InferenceError.Context();
  v3[59] = v4;
  v3[60] = *(_QWORD *)(v4 - 8);
  v3[61] = OUTLINED_FUNCTION_69();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v3[62] = OUTLINED_FUNCTION_69();
  v3[63] = OUTLINED_FUNCTION_282();
  v3[64] = OUTLINED_FUNCTION_69();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t OnDeviceInferenceAssetRepository.moveAssetToDynamicState(identifier:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t (*v38)(void);
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  _BOOL4 v60;
  unint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79[16];
  __int128 v80;
  uint64_t v81;

  v76 = v0 + 440;
  v78 = v0 + 344;
  if (one-time initialization token for device != -1)
    swift_once();
  v75 = v0 + 432;
  v1 = OUTLINED_FUNCTION_15_4();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  v5 = v4;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_QWORD *)v79 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v6 = 136315138;
    v7 = OUTLINED_FUNCTION_74_1();
    *(_QWORD *)(v0 + 440) = OUTLINED_FUNCTION_406(v7, v8, (uint64_t *)v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v3, (os_log_type_t)v5, "Moving asset with identifier %s to dynamic state.", v6);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_65_0();
  OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_298(v0 + 56);
  OUTLINED_FUNCTION_20_2();
  v9 = OUTLINED_FUNCTION_50_2();
  v10 = *(_QWORD *)(v0 + 80);
  OUTLINED_FUNCTION_226(v9, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  if (v10)
  {
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v11 = OUTLINED_FUNCTION_21_3();
    v12 = OUTLINED_FUNCTION_291(v2);
    v13 = *(_QWORD *)(v0 + 456);
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 448);
      v15 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      *(_QWORD *)v79 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v15 = 136315138;
      OUTLINED_FUNCTION_122();
      *(_QWORD *)(v0 + 432) = OUTLINED_FUNCTION_250(v14, v16, (uint64_t *)v79);
      OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v2, v11, "Asset with identifier %s was requested to move to dynamic state while in-use.", v15);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_19_6();

    OUTLINED_FUNCTION_221();
    _StringGuts.grow(_:)(77);
    OUTLINED_FUNCTION_62_4((uint64_t)"Asset with identifier ");
    OUTLINED_FUNCTION_302(v25, v26, v27, v28, v29, v30, v31, v32, v72, v73, v74, v75, v76, v78, v79[0]);
    OUTLINED_FUNCTION_151(v5 + 31, (uint64_t)" was requested to move to dynamic state while in-use.");
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_46_4();
    v33 = OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v34, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    OUTLINED_FUNCTION_7_11();
    v36 = v35;
    OUTLINED_FUNCTION_26_0(v35, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
    v37 = (unsigned int *)MEMORY[0x24BE68990];
  }
  else
  {
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_18_3();
    OUTLINED_FUNCTION_298(v0 + 176);
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_50_2();
    if (*(_QWORD *)(v0 + 200))
    {
      OUTLINED_FUNCTION_368((__int128 *)(v0 + 176));
      OUTLINED_FUNCTION_219();
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (OUTLINED_FUNCTION_54_3())
      {
        v19 = *(_QWORD *)(v0 + 504);
        v18 = *(_QWORD *)(v0 + 512);
        v20 = *(_QWORD *)(v0 + 496);
        OUTLINED_FUNCTION_240(v20);
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v20, v18, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        v21 = *(void **)(v18 + 16);
        objc_msgSend(v21, sel_moveToDynamicState);
        v22 = *(_BYTE *)(*(_QWORD *)(v18 + 24) + 16);
        type metadata accessor for E5TransformerLanguageModel();
        v23 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v21, v22);
        swift_release();
        *(_QWORD *)(v18 + 24) = v23;
        *(_QWORD *)(v0 + 40) = v19;
        *(_QWORD *)(v0 + 48) = &protocol witness table for OnDeviceInferenceAssetObjectE5Runner;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
        OUTLINED_FUNCTION_71_2(v18, (uint64_t)boxed_opaque_existential_1);
        OUTLINED_FUNCTION_404();
        OUTLINED_FUNCTION_368((__int128 *)(v0 + 16));
        OUTLINED_FUNCTION_49_3(v18);
      }
      else
      {
        v45 = *(_QWORD *)(v0 + 496);
        __swift_storeEnumTagSinglePayload(v45, 1, 1, *(_QWORD *)(v0 + 504));
        _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v45, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        OUTLINED_FUNCTION_219();
        OUTLINED_FUNCTION_53();
        if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
        {
          OUTLINED_FUNCTION_64_1();
          Logger.logObject.getter();
          v59 = OUTLINED_FUNCTION_21_3();
          v60 = OUTLINED_FUNCTION_231(v59);
          v61 = *(_QWORD *)(v0 + 456);
          if (v60)
          {
            v77 = *(_QWORD *)(v0 + 448);
            v62 = (uint8_t *)OUTLINED_FUNCTION_4_11();
            *(_QWORD *)v79 = OUTLINED_FUNCTION_4_11();
            *(_DWORD *)v62 = 136315138;
            OUTLINED_FUNCTION_85_1();
            *(_QWORD *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v61, (uint64_t *)v79);
            OUTLINED_FUNCTION_335();
            OUTLINED_FUNCTION_26_5();
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v2, v17, "Asset with identifier %s does not support dynamic state.", v62);
            OUTLINED_FUNCTION_34_3();
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_19_6();

          v63 = *(_QWORD *)(v0 + 480);
          v64 = *(_QWORD *)(v0 + 488);
          v66 = *(_QWORD *)(v0 + 448);
          v65 = *(void **)(v0 + 456);
          *(_QWORD *)v79 = 0;
          *(_QWORD *)&v79[8] = 0xE000000000000000;
          _StringGuts.grow(_:)(56);
          OUTLINED_FUNCTION_62_4((uint64_t)"Asset with identifier ");
          v67._countAndFlagsBits = v66;
          v67._object = v65;
          String.append(_:)(v67);
          OUTLINED_FUNCTION_151(v61 + 10, (uint64_t)" does not support dynamic state.");
          OUTLINED_FUNCTION_32_4();
          OUTLINED_FUNCTION_46_4();
          v68 = OUTLINED_FUNCTION_66_3();
          OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v69, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
          OUTLINED_FUNCTION_7_11();
          v71 = v70;
          OUTLINED_FUNCTION_274(v70, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16));
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v71, *MEMORY[0x24BE68968], v68);
          OUTLINED_FUNCTION_366();
          OUTLINED_FUNCTION_333(v64, *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8));
          __swift_destroy_boxed_opaque_existential_1(v0 + 96);
          goto LABEL_13;
        }
        v46 = *(void **)(v0 + 312);
        objc_msgSend(v46, sel_moveToDynamicState);
        OUTLINED_FUNCTION_42();

      }
      v47 = *(_QWORD *)(v0 + 456);
      v48 = *(_QWORD *)(v0 + 448);
      v81 = 0;
      *(_OWORD *)v79 = 0u;
      v80 = 0u;
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_52();
      specialized Dictionary.subscript.setter((uint64_t)v79, v48, v47);
      OUTLINED_FUNCTION_340();
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0 + 96, v0 + 136);
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_52();
      specialized Dictionary.subscript.setter(v0 + 136, v48, v47);
      swift_endAccess();
      OUTLINED_FUNCTION_372();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v38 = *(uint64_t (**)(void))(v0 + 8);
      return v38();
    }
    v40 = *(_QWORD *)(v0 + 456);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0 + 176, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v41 = OUTLINED_FUNCTION_21_3();
    if (OUTLINED_FUNCTION_17_3(v41))
    {
      v42 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      *(_QWORD *)v79 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v42 = 136315138;
      v43 = OUTLINED_FUNCTION_50_1();
      *(_QWORD *)(v0 + 416) = OUTLINED_FUNCTION_386(v43, v44, (uint64_t *)v79);
      OUTLINED_FUNCTION_335();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v2, (os_log_type_t)v40, "Asset with identifier %s cannot be moved to dynamic state because it is not loaded.", v42);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_19_6();

    OUTLINED_FUNCTION_221();
    _StringGuts.grow(_:)(83);
    OUTLINED_FUNCTION_62_4((uint64_t)"Asset with identifier ");
    OUTLINED_FUNCTION_302(v49, v50, v51, v52, v53, v54, v55, v56, v72, v73, v74, v75, v76, v78, v79[0]);
    OUTLINED_FUNCTION_151(v5 + 37, (uint64_t)" cannot be moved to dynamic state because it is not loaded.");
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_46_4();
    v33 = OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v57, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    OUTLINED_FUNCTION_7_11();
    v36 = v58;
    OUTLINED_FUNCTION_26_0(v58, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 192));
    v37 = (unsigned int *)MEMORY[0x24BE689E8];
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v36, *v37, v33);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_293();
LABEL_13:
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

void OnDeviceInferenceAssetRepository.moveAssetFromDynamicToLoadedState(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  id v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  OUTLINED_FUNCTION_50_4();
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_31_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_286();
  v37 = OUTLINED_FUNCTION_282();
  OUTLINED_FUNCTION_1_4();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_2(v4, v35);
  if (one-time initialization token for device != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_230(v5, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_107_1();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_229(v6))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v38[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v8 = 136315138;
    v9 = *((_QWORD *)&v41 + 1);
    v10 = v42;
    __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v38);
    OUTLINED_FUNCTION_359(v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_263();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v6, v7, "Moving asset with identifier %s to fully loaded state from dynamic state.", v8);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_263();

  OUTLINED_FUNCTION_107_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
  if (OUTLINED_FUNCTION_54_3())
  {
    __swift_storeEnumTagSinglePayload(v0, 0, 1, v37);
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v0, v36, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
    objc_msgSend(*(id *)(v36 + 16), sel_moveToFullyLoadedState);
    v14 = OUTLINED_FUNCTION_260();
    outlined destroy of MaskedLanguageModel.SingleLogitCollection(v14, v15);
LABEL_9:
    OUTLINED_FUNCTION_57_2();
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_197();
    swift_endAccess();
    OUTLINED_FUNCTION_57_2();
    OUTLINED_FUNCTION_107_1();
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_197();
    swift_endAccess();
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_118_0();
  __swift_storeEnumTagSinglePayload(v16, v17, v18, v37);
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_107_1();
  if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
  {
    objc_msgSend(v39, sel_moveToFullyLoadedState);

    OUTLINED_FUNCTION_7_0();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_107_1();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v22 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v21 = 136315138;
    v38[0] = v22;
    v23 = *((_QWORD *)&v41 + 1);
    v24 = v42;
    __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v38);
    OUTLINED_FUNCTION_359(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_263();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v19, v20, "Asset with identifier %s does not support dynamic state.", v21);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_263();

  *(_QWORD *)&v40 = 0;
  *((_QWORD *)&v40 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  OUTLINED_FUNCTION_311();
  v28._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v28);
  v29._countAndFlagsBits = OUTLINED_FUNCTION_57_2();
  String.append(_:)(v29);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_311();
  String.append(_:)(v30);
  OUTLINED_FUNCTION_32_4();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_66_3();
  OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, v31, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
  v32 = OUTLINED_FUNCTION_7_11();
  v34 = OUTLINED_FUNCTION_101_1(v32, v33);
  OUTLINED_FUNCTION_98_1(v34, *MEMORY[0x24BE68968]);
  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_136();
LABEL_13:
  OUTLINED_FUNCTION_10_9();
}

void OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  OUTLINED_FUNCTION_51();
  v64 = v0;
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for InferenceProviderRequestConfiguration();
  v7 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v62 = v7;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v60 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_1_4();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v52 - v14;
  v16 = OUTLINED_FUNCTION_4_4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_209();
  v19 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v52 - v20;
  v67 = 0;
  v22 = *(int *)(OUTLINED_FUNCTION_282() + 48);
  v63 = v5;
  v23 = v5 + v22;
  outlined init with copy of UUID?(v23, (uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16) == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_241((uint64_t)v13);
    outlined assign with take of UUID?((uint64_t)v13, v23);
    v24 = v3;
LABEL_5:
    v30 = v63;
    goto LABEL_11;
  }
  v58 = v13;
  OUTLINED_FUNCTION_26_0((uint64_t)v21, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
  OUTLINED_FUNCTION_323();
  OUTLINED_FUNCTION_20_5(&lazy protocol witness table cache variable for type UUID and conformance UUID, v25, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = (uint64_t)v21;
  v28 = *(void (**)(uint64_t))(v17 + 8);
  OUTLINED_FUNCTION_364();
  v24 = v3;
  if ((v26 & 1) != 0)
  {
    v29 = OUTLINED_FUNCTION_310();
    v28(v29);
    goto LABEL_5;
  }
  v59 = v28;
  if (one-time initialization token for device != -1)
    swift_once();
  v31 = OUTLINED_FUNCTION_15_4();
  __swift_project_value_buffer(v31, (uint64_t)static Log.device);
  v32 = v27;
  OUTLINED_FUNCTION_26_0(v1, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16));
  v33 = v61;
  v34 = v60;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v60, v24, v61);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.default.getter();
  v37 = v36;
  v38 = os_log_type_enabled(v35, v36);
  v57 = v23;
  if (v38)
  {
    v39 = OUTLINED_FUNCTION_4_11();
    v55 = OUTLINED_FUNCTION_4_11();
    v66 = v55;
    *(_DWORD *)v39 = 136315394;
    OUTLINED_FUNCTION_20_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v56 = v24;
    v53 = v35;
    v54 = v37;
    v41 = OUTLINED_FUNCTION_410();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    v43 = OUTLINED_FUNCTION_53();
    v59(v43);
    *(_WORD *)(v39 + 12) = 2080;
    v44 = (uint8_t *)v39;
    v45 = v60;
    OUTLINED_FUNCTION_323();
    v46 = OUTLINED_FUNCTION_410();
    OUTLINED_FUNCTION_364();
    v65 = OUTLINED_FUNCTION_345(v46, v47, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v45, v61);
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v53, (os_log_type_t)v54, "E5Runner last used for ID %s is different from next ID %s. Clearing model state.", v44);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_1();
  }
  v48 = OUTLINED_FUNCTION_53();
  v59(v48);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v34, v33);

  v30 = v63;
  v49 = (uint64_t)v58;
  InferenceProviderRequestConfiguration.sessionUUID.getter();
  OUTLINED_FUNCTION_241(v49);
  outlined assign with take of UUID?(v49, v57);
  v50 = *(void **)(v30 + 16);
  objc_msgSend(v50, sel_clearAllState);
  type metadata accessor for E5TransformerLanguageModel();
  v51 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v50, *(_BYTE *)(*(_QWORD *)(v30 + 24) + 16));
  ((void (*)(uint64_t, uint64_t))v59)(v32, v16);
  swift_release();
  *(_QWORD *)(v30 + 24) = v51;
  v67 = 1;
LABEL_11:
  $defer #1 () in OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(&v67, v64, v24, v30);
  OUTLINED_FUNCTION_31();
}

uint64_t $defer #1 () in OnDeviceInferenceAssetRepository.clearE5RunnerAssetIfNeeded(e5RunnerAsset:configuration:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD v27[2];
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InferenceProviderRequestConfiguration();
  v13 = *(_QWORD *)(v12 - 8);
  result = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + 200), *(_QWORD *)(a2 + 224));
    type metadata accessor for OnDeviceInferenceOverrides();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    result = Overridable.wrappedValue.getter();
    if ((v33 & 1) != 0)
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.device);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.info.getter();
      v20 = v19;
      if (os_log_type_enabled(v18, v19))
      {
        v30 = v20;
        v21 = (uint8_t *)swift_slowAlloc();
        v29 = swift_slowAlloc();
        v33 = v29;
        v28 = v21;
        *(_DWORD *)v21 = 136315138;
        v27[1] = v21 + 4;
        InferenceProviderRequestConfiguration.requestUUID.getter();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v22 = dispatch thunk of CustomStringConvertible.description.getter();
        v31 = a4;
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        a4 = v31;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        v25 = v28;
        _os_log_impl(&dword_248CAA000, v18, (os_log_type_t)v30, "Resetting the e5Runner for request %s because prefix based kv cache optimization is disabled", v28, 0xCu);
        v26 = v29;
        swift_arrayDestroy();
        MEMORY[0x2495AAF60](v26, -1, -1);
        MEMORY[0x2495AAF60](v25, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      }

      objc_msgSend(*(id *)(a4 + 16), sel_reset);
      type metadata accessor for E5TransformerLanguageModel();
      *(_QWORD *)(a4 + 24) = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(*(id *)(a4 + 16), 1);
      return swift_release();
    }
  }
  return result;
}

uint64_t OnDeviceInferenceAssetRepository.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t OnDeviceInferenceAssetRepository.__deallocating_deinit()
{
  OnDeviceInferenceAssetRepository.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for OnDeviceInferenceAssetRepository()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for OnDeviceInferenceSuspendedFetch(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    swift_bridgeObjectRetain();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for OnDeviceInferenceSuspendedFetch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for OnDeviceInferenceSuspendedFetch(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  swift_bridgeObjectRetain();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithCopy for OnDeviceInferenceSuspendedFetch(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_QWORD *initializeWithTake for OnDeviceInferenceSuspendedFetch(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithTake for OnDeviceInferenceSuspendedFetch(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceSuspendedFetch()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248D22A5C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_26(*a1);
    OUTLINED_FUNCTION_37();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v6;
      v8 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = OUTLINED_FUNCTION_4_4();
      v8 = *(int *)(a3 + 24);
    }
    OUTLINED_FUNCTION_10_1((uint64_t)a1 + v8, a2, v7);
  }
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceSuspendedFetch()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248D22AE4()
{
  uint64_t v0;
  _QWORD *v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_348();
  if (v4)
  {
    *v1 = (v0 - 1);
    OUTLINED_FUNCTION_37();
  }
  else
  {
    v5 = v3;
    v6 = v2;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    if (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 84) == v6)
    {
      v8 = v7;
      v9 = *(int *)(v5 + 20);
    }
    else
    {
      v8 = OUTLINED_FUNCTION_4_4();
      v9 = *(int *)(v5 + 24);
    }
    OUTLINED_FUNCTION_164((uint64_t)v1 + v9, v0, v0, v8);
  }
}

uint64_t type metadata accessor for OnDeviceInferenceSuspendedFetch(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceSuspendedFetch);
}

void type metadata completion function for OnDeviceInferenceSuspendedFetch()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CheckedContinuation<(), Never>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for CheckedContinuation<(), Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<(), Never>)
  {
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Never>);
  }
}

uint64_t destroy for OnDeviceInferenceAssetObjectTokenizer()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for OnDeviceInferenceAssetObjectTokenizer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OnDeviceInferenceAssetObjectTokenizer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectTokenizer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectTokenizer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for OnDeviceInferenceAssetObjectTokenizer()
{
  OUTLINED_FUNCTION_1_6();
}

void OnDeviceInferenceAssetRepository.unownedExecutor.getter()
{
  OUTLINED_FUNCTION_1_6();
}

void protocol witness for Actor.unownedExecutor.getter in conformance OnDeviceInferenceAssetRepository()
{
  OnDeviceInferenceAssetRepository.unownedExecutor.getter();
}

id @nonobjc TGIMutableE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  Class isa;
  Class v7;
  id v8;

  v5 = (void *)MEMORY[0x2495A9A78](a2, a3);
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5AdapterConfigurationObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  v7 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v3, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, a1, v5, isa, v7);

  return v8;
}

id @nonobjc TGIE5FunctionObjC.init(name:queryLength:contextSize:adapterType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v11;
  void *v12;
  id v13;

  v11 = (void *)MEMORY[0x2495A9A78]();
  swift_bridgeObjectRelease();
  if (a6)
  {
    v12 = (void *)MEMORY[0x2495A9A78](a5, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(v6, sel_initWithName_queryLength_contextSize_adapterType_, v11, a3, a4, v12);

  return v13;
}

id @nonobjc TGIE5AdapterConfigurationObjC.init(adapterType:symbolName:mutableWeightsFilePath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v11 = (void *)MEMORY[0x2495A9A78]();
  OUTLINED_FUNCTION_51_1();
  v12 = (void *)MEMORY[0x2495A9A78](a3, a4);
  OUTLINED_FUNCTION_58_0();
  v13 = (void *)MEMORY[0x2495A9A78](a5, a6);
  OUTLINED_FUNCTION_7_0();
  v14 = objc_msgSend(v6, sel_initWithAdapterType_symbolName_mutableWeightsFilePath_, v11, v12, v13);

  return v14;
}

id @nonobjc E5RunnerObjC.init(modelConfiguration:)(void *a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v3 = objc_msgSend(v1, sel_initWithModelConfiguration_error_, a1, v7);
  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    v5 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v3;
}

uint64_t type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for OnDeviceInferenceAssetObjectE5Runner);
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x2495AAEA0](a4, v6), a1);
  }
  OUTLINED_FUNCTION_49();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  double result;
  uint64_t v14;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v4;
    v11 = *v4;
    *v4 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, OnDeviceInferenceAssetObject>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of LogitCollection((__int128 *)(*(_QWORD *)(v14 + 56) + 40 * v8), a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    _NativeDictionary._delete(at:)();
    *v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v4;
    v11 = *v4;
    *v4 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, CheckedContinuation<(), Never>>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v17 + 56);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a3, v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v8, v14);
    _NativeDictionary._delete(at:)();
    *v4 = v17;
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(a3, 0, 1, v14);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v16);
  }
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)();
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v2;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, DataStreamState>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    v11 = *(_QWORD *)(v18 + 48);
    v12 = type metadata accessor for UUID();
    v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v5, v12);
    v14 = *(_QWORD *)(v18 + 56);
    v15 = type metadata accessor for DataStreamState(0);
    outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v5, a1, type metadata accessor for DataStreamState);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, v13, MEMORY[0x24BDCEA88]);
    _NativeDictionary._delete(at:)();
    *v2 = v18;
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v15);
  }
  else
  {
    v17 = type metadata accessor for DataStreamState(0);
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v17);
  }
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = v3;
  OUTLINED_FUNCTION_122();
  specialized __RawDictionaryStorage.find<A>(_:)();
  v9 = v8;
  v11 = v10;
  OUTLINED_FUNCTION_63_0();
  if ((v11 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v6;
    v13 = *v6;
    *v6 = 0x8000000000000000;
    v14 = *(_QWORD *)(v13 + 24);
    __swift_instantiateConcreteTypeFromMangledName(a1);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14);
    v15 = *(_QWORD *)(v25 + 48);
    v16 = OUTLINED_FUNCTION_4_4();
    v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    OUTLINED_FUNCTION_333(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v9, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8));
    v18 = *(_QWORD *)(v25 + 56);
    v19 = a2(0);
    OUTLINED_FUNCTION_26_0(a3, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32));
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, v17, MEMORY[0x24BDCEA88]);
    _NativeDictionary._delete(at:)();
    *v6 = v25;
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(a3, 0, 1, v19);
  }
  else
  {
    a2(0);
    OUTLINED_FUNCTION_118_0();
    return __swift_storeEnumTagSinglePayload(v21, v22, v23, v24);
  }
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v3 = v1;
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  OUTLINED_FUNCTION_397();
  OUTLINED_FUNCTION_215();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[Int], KVLRUCacheNode>);
  OUTLINED_FUNCTION_213(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  type metadata accessor for KVLRUCacheNode();
  lazy protocol witness table accessor for type [Int] and conformance <A> [A]();
  _NativeDictionary._delete(at:)();
  *v3 = v17;
  swift_bridgeObjectRelease();
  return v13;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32[2];

  OUTLINED_FUNCTION_96_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, LogitCollection>);
  v3 = OUTLINED_FUNCTION_87_1();
  v4 = v3;
  if (*(_QWORD *)(v1 + 16))
  {
    v5 = 0;
    v6 = *(_QWORD *)(v1 + 64);
    v31 = (_QWORD *)(v1 + 64);
    v7 = 1 << *(_BYTE *)(v1 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v6;
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v3 + 64;
    if ((v8 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v5 << 6); ; i = v18 + (v5 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * i);
      v20 = (__int128 *)(*(_QWORD *)(v1 + 56) + 40 * i);
      if ((v2 & 1) != 0)
        outlined init with take of LogitCollection(v20, (uint64_t)v32);
      else
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v20, (uint64_t)v32);
      static Hasher._hash(seed:_:)();
      OUTLINED_FUNCTION_325();
      if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * v21)) == 0)
      {
        OUTLINED_FUNCTION_14_2();
        while (++v25 != v26 || (v24 & 1) == 0)
        {
          v27 = v25 == v26;
          if (v25 == v26)
            v25 = 0;
          v24 |= v27;
          if (*(_QWORD *)(v11 + 8 * v25) != -1)
          {
            OUTLINED_FUNCTION_10_5();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_2();
LABEL_31:
      OUTLINED_FUNCTION_126_0(v23);
      *(_QWORD *)(v29 + 8 * v28) = v19;
      outlined init with take of LogitCollection(v32, *(_QWORD *)(v4 + 56) + 40 * v28);
      OUTLINED_FUNCTION_237();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_41;
      if (v14 >= v10)
        goto LABEL_33;
      ++v5;
      if (!v31[v14])
      {
        v5 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_33;
        if (!v31[v5])
        {
          v15 = v14 + 2;
          if (v15 >= v10)
          {
LABEL_33:
            if ((v2 & 1) != 0)
            {
              v30 = 1 << *(_BYTE *)(v1 + 32);
              if (v30 >= 64)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v30 + 63) >> 6, v31);
              else
                *v31 = -1 << v30;
              *(_QWORD *)(v1 + 16) = 0;
            }
            break;
          }
          if (!v31[v15])
          {
            while (1)
            {
              v5 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_42;
              if (v5 >= v10)
                goto LABEL_33;
              ++v15;
              if (v31[v5])
                goto LABEL_18;
            }
          }
          v5 = v15;
        }
      }
LABEL_18:
      OUTLINED_FUNCTION_243();
      v9 = v17 & v16;
    }
  }
  OUTLINED_FUNCTION_19_3();
  *v0 = v4;
}

{
  uint64_t *v0;
  _QWORD *v1;
  char v2;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;

  OUTLINED_FUNCTION_96_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  v5 = OUTLINED_FUNCTION_87_1();
  if (v1[2])
  {
    v31 = v2;
    OUTLINED_FUNCTION_172();
    v28 = -1 << v7;
    v29 = v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v6;
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 64;
    if ((v8 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v4 << 6); ; i = v18 + (v4 << 6))
    {
      v19 = *(_QWORD *)(v1[6] + 8 * i);
      v20 = *(_QWORD *)(v1[7] + 8 * i);
      static Hasher._hash(seed:_:)();
      OUTLINED_FUNCTION_325();
      if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * v21)) == 0)
      {
        OUTLINED_FUNCTION_14_2();
        while (++v25 != v26 || (v24 & 1) == 0)
        {
          v27 = v25 == v26;
          if (v25 == v26)
            v25 = 0;
          v24 |= v27;
          if (*(_QWORD *)(v11 + 8 * v25) != -1)
          {
            OUTLINED_FUNCTION_10_5();
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_2();
LABEL_28:
      *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v23) = v19;
      *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v23) = v20;
      OUTLINED_FUNCTION_237();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_39;
      if (v14 >= v10)
        goto LABEL_30;
      ++v4;
      if (!v3[v14])
      {
        v4 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_30;
        if (!v3[v4])
        {
          v15 = v14 + 2;
          if (v15 >= v10)
          {
LABEL_30:
            if ((v31 & 1) == 0)
            {
              OUTLINED_FUNCTION_19_3();
              v0 = v30;
              goto LABEL_37;
            }
            if (v29 >= 64)
              specialized UnsafeMutablePointer.assign(repeating:count:)(0, v10, v3);
            else
              *v3 = v28;
            v0 = v30;
            v1[2] = 0;
            break;
          }
          if (!v3[v15])
          {
            while (1)
            {
              v4 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_40;
              if (v4 >= v10)
                goto LABEL_30;
              ++v15;
              if (v3[v4])
                goto LABEL_18;
            }
          }
          v4 = v15;
        }
      }
LABEL_18:
      OUTLINED_FUNCTION_243();
      v9 = v17 & v16;
    }
  }
  OUTLINED_FUNCTION_19_3();
LABEL_37:
  *v0 = v5;
  OUTLINED_FUNCTION_143();
}

{
  uint64_t *v0;
  _QWORD *v1;
  char v2;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;

  OUTLINED_FUNCTION_96_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  v5 = OUTLINED_FUNCTION_87_1();
  if (v1[2])
  {
    OUTLINED_FUNCTION_172();
    v28 = -1 << v7;
    v29 = v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v6;
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 64;
    if ((v8 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v11 | (v4 << 6); ; i = v17 + (v4 << 6))
    {
      v18 = *(_QWORD *)(v1[6] + 8 * i);
      v19 = *(_QWORD *)(v1[7] + 8 * i);
      if ((v2 & 1) == 0)
        OUTLINED_FUNCTION_122();
      v20 = static Hasher._hash(seed:_:)() & ~(-1 << *(_BYTE *)(v5 + 32));
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_14_2();
        while (++v23 != v24 || (v22 & 1) == 0)
        {
          v25 = v23 == v24;
          if (v23 == v24)
            v23 = 0;
          v22 |= v25;
          if (*(_QWORD *)(v10 + 8 * v23) != -1)
          {
            OUTLINED_FUNCTION_10_5();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_11_2();
LABEL_30:
      OUTLINED_FUNCTION_126_0(v21);
      *(_QWORD *)(v27 + 8 * v26) = v18;
      *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26) = v19;
      OUTLINED_FUNCTION_237();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v13 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_41;
      if (v13 >= v31)
        goto LABEL_32;
      ++v4;
      if (!v3[v13])
      {
        v4 = v13 + 1;
        if (v13 + 1 >= v31)
          goto LABEL_32;
        if (!v3[v4])
        {
          v14 = v13 + 2;
          if (v14 >= v31)
          {
LABEL_32:
            if ((v2 & 1) == 0)
            {
              OUTLINED_FUNCTION_19_3();
              v0 = v30;
              goto LABEL_39;
            }
            if (v29 >= 64)
              specialized UnsafeMutablePointer.assign(repeating:count:)(0, v31, v3);
            else
              *v3 = v28;
            v0 = v30;
            v1[2] = 0;
            break;
          }
          if (!v3[v14])
          {
            while (1)
            {
              v4 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_42;
              if (v4 >= v31)
                goto LABEL_32;
              ++v14;
              if (v3[v4])
                goto LABEL_18;
            }
          }
          v4 = v14;
        }
      }
LABEL_18:
      OUTLINED_FUNCTION_243();
      v9 = v16 & v15;
    }
  }
  OUTLINED_FUNCTION_19_3();
LABEL_39:
  *v0 = v5;
  OUTLINED_FUNCTION_143();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetadataSpecialToken>);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    v39 = v5;
    if (!v10)
      goto LABEL_7;
LABEL_6:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 24 * i;
      v24 = *(_QWORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v25 = *(_BYTE *)(v22 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of MetadataSpecialToken(v24, v23, v25);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          v32 = v28 == v31;
          if (v28 == v31)
            v28 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v34 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v29);
      *v34 = v20;
      v34[1] = v21;
      v35 = *(_QWORD *)(v7 + 56) + 24 * v29;
      *(_QWORD *)v35 = v24;
      *(_QWORD *)(v35 + 8) = v23;
      *(_BYTE *)(v35 + 16) = v25;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
      if (v10)
        goto LABEL_6;
LABEL_7:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_39;
      if (v16 >= v37)
        goto LABEL_32;
      v17 = v38[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v37)
          goto LABEL_32;
        v17 = v38[v13];
        if (!v17)
        {
          v18 = v16 + 2;
          if (v18 >= v37)
          {
LABEL_32:
            swift_release();
            v3 = v2;
            if ((v40 & 1) != 0)
            {
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v36 + 63) >> 6, v38);
              else
                *v38 = -1 << v36;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v17 = v38[v18];
          if (!v17)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_40;
              if (v13 >= v37)
                goto LABEL_32;
              v17 = v38[v13];
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          v13 = v18;
        }
      }
LABEL_18:
      v10 = (v17 - 1) & v17;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t partial apply for closure #2 in OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[3];
  uint64_t v38;
  _BYTE v39[40];
  _BYTE v40[8];
  uint64_t v41;
  _QWORD *v42;

  v42 = a5;
  specialized LazyMapSequence.makeIterator()(a1, a2, a3, v37);
  v33 = v37[0];
  v34 = v37[1];
  v35 = v37[2];
  v36 = v38;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v39);
  outlined init with take of DefaultParameters?((uint64_t)v39, (uint64_t)&v28, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
  outlined init with take of DefaultParameters?((uint64_t)v39, (uint64_t)v40, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
  if (v41)
  {
    while (1)
    {
      v6 = v28;
      v7 = v29;
      v8 = v30;
      v9 = v31;
      v10 = v32;
      v11 = (_QWORD *)*v42;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
      v14 = v11[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        break;
      v17 = v12;
      if (v11[3] >= v16)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MetadataSpecialToken>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_16;
        v13 = v18;
      }
      v20 = (_QWORD *)*v42;
      if ((v17 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v21 = v20[7] + 24 * v13;
        outlined consume of MetadataSpecialToken(*(_QWORD *)v21, *(_QWORD *)(v21 + 8), *(_BYTE *)(v21 + 16));
        *(_QWORD *)v21 = v8;
        *(_QWORD *)(v21 + 8) = v9;
        *(_BYTE *)(v21 + 16) = v10;
      }
      else
      {
        v20[(v13 >> 6) + 8] |= 1 << v13;
        v22 = (uint64_t *)(v20[6] + 16 * v13);
        *v22 = v6;
        v22[1] = v7;
        v23 = v20[7] + 24 * v13;
        *(_QWORD *)v23 = v8;
        *(_QWORD *)(v23 + 8) = v9;
        *(_BYTE *)(v23 + 16) = v10;
        v24 = v20[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_15;
        v20[2] = v26;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)v39);
      outlined init with take of DefaultParameters?((uint64_t)v39, (uint64_t)&v28, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
      outlined init with take of DefaultParameters?((uint64_t)v39, (uint64_t)v40, &demangling cache variable for type metadata for (String, MetadataSpecialToken)?);
      a4 = 1;
      if (!v41)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
    return swift_release();
  }
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<TGIE5FunctionObjC>, &lazy cache variable for type metadata for TGIE5FunctionObjC);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;

  v4 = a1;
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_92_1();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_161();
    if (v8)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      OUTLINED_FUNCTION_190();
      v6 = static _SetStorage.allocate(capacity:)();
      if (!v5)
        goto LABEL_4;
LABEL_8:
      OUTLINED_FUNCTION_92_1();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_161();
      if (!v7)
      {
LABEL_25:
        OUTLINED_FUNCTION_161();
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = MEMORY[0x24BEE4B08];
  if (v5)
    goto LABEL_8;
LABEL_4:
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_25;
LABEL_9:
  v9 = 0;
  v10 = v6 + 56;
  v30 = v4 & 0xC000000000000001;
  v25 = (char *)(v4 + 32);
  v26 = v4 & 0xFFFFFFFFFFFFFF8;
  v27 = v7;
  v28 = v4;
  while (1)
  {
    if (v30)
    {
      v11 = (id)MEMORY[0x2495A9EB0](v9, v4);
    }
    else
    {
      if (v9 >= *(_QWORD *)(v26 + 16))
        goto LABEL_28;
      v11 = *(id *)&v25[8 * v9];
    }
    v12 = v11;
    v13 = __OFADD__(v9++, 1);
    if (v13)
      break;
    v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = *(_QWORD *)(v10 + 8 * (v16 >> 6));
    v19 = 1 << v16;
    if (((1 << v16) & v18) != 0)
    {
      type metadata accessor for TGIE5AdapterConfigurationObjC(0, a3);
      OUTLINED_FUNCTION_398();
      v20 = OUTLINED_FUNCTION_389();

      if ((v20 & 1) != 0)
      {
LABEL_20:

        v7 = v27;
        v4 = v28;
        goto LABEL_24;
      }
      v21 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v21;
        v17 = v16 >> 6;
        v18 = *(_QWORD *)(v10 + 8 * (v16 >> 6));
        v19 = 1 << v16;
        if ((v18 & (1 << v16)) == 0)
          break;
        OUTLINED_FUNCTION_398();
        v22 = OUTLINED_FUNCTION_389();

        if ((v22 & 1) != 0)
          goto LABEL_20;
      }
      v7 = v27;
      v4 = v28;
    }
    *(_QWORD *)(v10 + 8 * v17) = v19 | v18;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16) = v12;
    v23 = *(_QWORD *)(v6 + 16);
    v13 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v13)
      goto LABEL_27;
    *(_QWORD *)(v6 + 16) = v24;
LABEL_24:
    if (v9 == v7)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  OUTLINED_FUNCTION_51();
  v1 = v0;
  if (!*(_QWORD *)(v0 + 16))
  {
    v3 = MEMORY[0x24BEE4B08];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.allocate(capacity:)();
  v3 = result;
  v4 = *(_QWORD *)(v1 + 16);
  if (!v4)
  {
LABEL_13:
    OUTLINED_FUNCTION_7_0();
    return v3;
  }
  v5 = 0;
  v6 = result + 56;
  v7 = ~(-1 << *(_BYTE *)(result + 32));
  while (v5 < *(_QWORD *)(v1 + 16))
  {
    v8 = *(_QWORD *)(v1 + 32 + 8 * v5);
    result = static Hasher._hash(seed:_:)();
    v9 = result & v7;
    v10 = (result & (unint64_t)v7) >> 6;
    v11 = *(_QWORD *)(v6 + 8 * v10);
    v12 = 1 << (result & v7);
    v13 = *(_QWORD *)(v3 + 48);
    if ((v12 & v11) != 0)
    {
      while (*(_QWORD *)(v13 + 8 * v9) != v8)
      {
        v9 = (v9 + 1) & v7;
        v10 = v9 >> 6;
        v11 = *(_QWORD *)(v6 + 8 * (v9 >> 6));
        v12 = 1 << v9;
        if ((v11 & (1 << v9)) == 0)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      *(_QWORD *)(v6 + 8 * v10) = v12 | v11;
      *(_QWORD *)(v13 + 8 * v9) = v8;
      v14 = *(_QWORD *)(v3 + 16);
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_15;
      *(_QWORD *)(v3 + 16) = v16;
    }
    if (++v5 == v4)
      goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  v9 = a6 & 1;
  *(_BYTE *)(a1 + 16) = a6 & 1;
  swift_bridgeObjectRetain();
  outlined copy of MetadataSpecialToken(a4, a5, v9);
  return a2;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_248D24860()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined consume of ModelMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s24TokenGenerationInference15AdapterMetadataVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_288(a1, a2, a3);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_49();
}

uint64_t *outlined release of AdapterMetadata?(uint64_t *a1)
{
  outlined consume of AdapterMetadata?(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of AdapterMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of TokenizerMetadata?(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void lazy protocol witness table accessor for type TGIE5AdapterConfigurationObjC and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = type metadata accessor for TGIE5AdapterConfigurationObjC(255, a2);
    atomic_store(MEMORY[0x2495AAEA0](MEMORY[0x24BEE5BD8], v3), a1);
  }
  OUTLINED_FUNCTION_49();
}

uint64_t outlined bridged method (pb) of @objc TGIE5FunctionObjC.adapterType.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_adapterType);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t *outlined release of ModelMetadata?(uint64_t *a1)
{
  outlined consume of ModelMetadata?(*a1, a1[1]);
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

__n128 specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  __n128 result;
  unint64_t v6;
  __n128 v7;
  unsigned __int8 v8;

  v3 = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)((uint64_t)&v7, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = v8;
  result = v7;
  a2->n128_u64[0] = v3;
  a2->n128_u64[1] = v6;
  a2[1] = result;
  a2[2].n128_u8[0] = v4;
  return result;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(_QWORD *__return_ptr, _QWORD *);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  _QWORD v28[2];
  __int128 v29;
  char v30;
  _QWORD v31[4];
  char v32;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v3 + 56) + 24 * v8;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    v1[3] = v6;
    v1[4] = v7;
    v16 = (void (*)(_QWORD *__return_ptr, _QWORD *))v1[5];
    v31[0] = v10;
    v31[1] = v11;
    v31[2] = v13;
    v31[3] = v14;
    v32 = v15;
    swift_bridgeObjectRetain();
    outlined copy of MetadataSpecialToken(v13, v14, v15);
    v16(v28, v31);
    swift_bridgeObjectRelease();
    result = outlined consume of MetadataSpecialToken(v13, v14, v15);
    v18 = v28[0];
    v19 = v28[1];
    v20 = v29;
    v21 = v30;
LABEL_23:
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 16) = v20;
    *(_BYTE *)(a1 + 32) = v21;
    return result;
  }
  v22 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v23 = (unint64_t)(v1[2] + 64) >> 6;
    if (v22 < v23)
    {
      v24 = v1[1];
      v25 = *(_QWORD *)(v24 + 8 * v22);
      if (v25)
      {
LABEL_7:
        v7 = (v25 - 1) & v25;
        v8 = __clz(__rbit64(v25)) + (v22 << 6);
        v6 = v22;
        goto LABEL_3;
      }
      v26 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v23)
      {
        v25 = *(_QWORD *)(v24 + 8 * v26);
        if (v25)
        {
LABEL_10:
          v22 = v26;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v23)
        {
          v25 = *(_QWORD *)(v24 + 8 * (v5 + 3));
          if (v25)
          {
            v22 = v5 + 3;
            goto LABEL_7;
          }
          v26 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v23)
          {
            v25 = *(_QWORD *)(v24 + 8 * v26);
            if (v25)
              goto LABEL_10;
            v22 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v23)
            {
              v25 = *(_QWORD *)(v24 + 8 * v22);
              if (v25)
                goto LABEL_7;
              v6 = v23 - 1;
              v27 = v5 + 6;
              while (v27 < v23)
              {
                v25 = *(_QWORD *)(v24 + 8 * v27++);
                if (v25)
                {
                  v22 = v27 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v18 = 0;
    v19 = 0;
    v21 = 0;
    v1[3] = v6;
    v1[4] = 0;
    v20 = 0uLL;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void outlined init with take of DefaultParameters?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_288(a1, a2, a3);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_49();
}

uint64_t outlined consume of MetadataSpecialToken(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_287(a1, a2, a3);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_49();
}

void outlined init with take of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_287(a1, a2, a3);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_49();
}

void partial apply for closure #2 in OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(uint64_t a1)
{
  uint64_t *v1;

  closure #2 in OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(a1, v1[2], v1[3], v1[4]);
}

_QWORD *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetInUsePlaceHolder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for OnDeviceInferenceAssetInUsePlaceHolder()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithTake for OnDeviceInferenceAssetInUsePlaceHolder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for OnDeviceInferenceAssetInUsePlaceHolder()
{
  OUTLINED_FUNCTION_1_6();
}

void assignWithCopy for OnDeviceInferenceAssetInUsePlaceHolder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_49();
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetInUsePlaceHolder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for OnDeviceInferenceAssetObjectUncompiled()
{
  OUTLINED_FUNCTION_1_6();
}

void destroy for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

void initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetObjectBaseModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  OUTLINED_FUNCTION_49();
}

_QWORD *assignWithCopy for OnDeviceInferenceAssetObjectBaseModel(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectBaseModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectBaseModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for OnDeviceInferenceAssetObjectBaseModel()
{
  OUTLINED_FUNCTION_1_6();
}

_QWORD *initializeBufferWithCopyOfBuffer for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v7 = (void *)a2[2];
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 61) = *(uint64_t *)((char *)a2 + 61);
    v9 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 117) = *(uint64_t *)((char *)a2 + 117);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v10 = *(int *)(a3 + 48);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 128) = a2[16];
    v13 = type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    v14 = v7;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
  }
  return v3;
}

uint64_t destroy for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for UUID();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 117) = *(_QWORD *)(a2 + 117);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v9 = *(int *)(a3 + 48);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v12 = type metadata accessor for UUID();
  swift_bridgeObjectRetain();
  v13 = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  int EnumTagSinglePayload;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 117) = *(_QWORD *)(a2 + 117);
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 48);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for UUID();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  v18 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (!EnumTagSinglePayload)
  {
    v19 = *(_QWORD *)(v16 - 8);
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 24))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 117) = *(_QWORD *)(a2 + 117);
  v7 = *(int *)(a3 + 48);
  v8 = (const void *)(a2 + v7);
  v9 = (void *)(a1 + v7);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v10 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 117) = *(_QWORD *)(a2 + 117);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 48);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for UUID();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    v15 = *(_QWORD *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceAssetObjectE5Runner()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248D2592C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_26(*(_QWORD *)(a1 + 8));
    OUTLINED_FUNCTION_37();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_10_1(a1 + *(int *)(a3 + 48), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceAssetObjectE5Runner()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248D25994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_348();
  if (v3)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_37();
  }
  else
  {
    v4 = v2;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_164(v1 + *(int *)(v4 + 48), v0, v0, v5);
  }
}

void type metadata completion function for OnDeviceInferenceAssetObjectE5Runner()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t OUTLINED_FUNCTION_3_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_5_9()
{
  return InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
}

uint64_t OUTLINED_FUNCTION_7_11()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  uint64_t v0;

  return outlined consume of ModelMetadata?(*(_QWORD *)(v0 - 456), *(_QWORD *)(v0 - 376));
}

uint64_t OUTLINED_FUNCTION_16_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 152) + 16))(a2, v3, *(_QWORD *)(v2 + 168));
}

uint64_t OUTLINED_FUNCTION_17_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 160) + 16))(a2, v3, *(_QWORD *)(v2 + 176));
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_20_5(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  lazy protocol witness table accessor for type UUID and conformance UUID(a1, 255, a3, a4);
}

uint64_t OUTLINED_FUNCTION_22_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_26_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 328);
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 544));
  return dispatch thunk of CatalogResource.dependentResourceIDs.getter();
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_37_2(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_45_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a2, v4, v2);
}

uint64_t OUTLINED_FUNCTION_46_4()
{
  return InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
}

uint64_t OUTLINED_FUNCTION_47_4()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

void OUTLINED_FUNCTION_49_3(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(a1, v1);
}

uint64_t OUTLINED_FUNCTION_52_3()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_56_4()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of ModelMetadata?(*(_QWORD *)(v0 + 24), v1);
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_61_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_62_4(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_64_4(_QWORD *a1)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(a1, v1);
  JUMPOUT(0x2495A9178);
}

uint64_t OUTLINED_FUNCTION_66_3()
{
  return type metadata accessor for InferenceError();
}

uint64_t OUTLINED_FUNCTION_70_3(uint64_t a1, uint64_t a2)
{
  return outlined consume of ModelMetadata?(a1, a2);
}

void OUTLINED_FUNCTION_71_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(a1, a2, v2);
}

BOOL OUTLINED_FUNCTION_73_1(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_74_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_76_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = a1;
  return v1 - 288;
}

void OUTLINED_FUNCTION_77_1(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(a1, v1);
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return swift_willThrow();
}

_QWORD *OUTLINED_FUNCTION_80_1()
{
  uint64_t v0;
  _QWORD *v1;

  return __swift_project_boxed_opaque_existential_1(v1, *(_QWORD *)(v0 + 224));
}

void OUTLINED_FUNCTION_82_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v0 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  v4 = (_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v3);
  *v4 = v1;
  v4[1] = v2;
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of ModelMetadata?(*(_QWORD *)(v0 + 24), v1);
}

uint64_t OUTLINED_FUNCTION_85_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_87_1()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_95_1()
{
  return type metadata accessor for TokenGenerationError();
}

void OUTLINED_FUNCTION_97_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_98_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

void OUTLINED_FUNCTION_99_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t OUTLINED_FUNCTION_100_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_101_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a2, v4, v2);
}

void OUTLINED_FUNCTION_102_1()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x20746F6E20736920;
  v0._object = (void *)0xEE00646564616F6CLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_103_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 496) = a1;
  return v1 + 496;
}

void OUTLINED_FUNCTION_105_0()
{
  void *v0;

}

void OUTLINED_FUNCTION_107_1()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1 - 128);
}

void OUTLINED_FUNCTION_108_1(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  __swift_project_boxed_opaque_existential_1(a1, a2);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 384), *(_QWORD *)(v2 + 408));
  JUMPOUT(0x2495A9178);
}

uint64_t *OUTLINED_FUNCTION_109_0()
{
  uint64_t v0;

  return outlined release of ModelMetadata?((uint64_t *)(v0 + 560));
}

void OUTLINED_FUNCTION_110_0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x756F6620746F6E20;
  v0._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_111_1(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t OUTLINED_FUNCTION_112_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_113_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v2 + 520) = a1;
  *(_QWORD *)(v2 + 528) = (v1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
}

uint64_t OUTLINED_FUNCTION_115_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_116_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_117_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t *OUTLINED_FUNCTION_123_0()
{
  uint64_t v0;

  return outlined release of AdapterMetadata?((uint64_t *)(v0 + 536));
}

void OUTLINED_FUNCTION_124_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_126_0(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t OUTLINED_FUNCTION_127_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_128_0()
{
  uint64_t v0;

  return outlined init with take of LogitCollection((__int128 *)(v0 + 336), v0 + 384);
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return type metadata accessor for URL();
}

void OUTLINED_FUNCTION_130(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_132(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = (v1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
}

BOOL OUTLINED_FUNCTION_135(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_136()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_137()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_138(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

unint64_t OUTLINED_FUNCTION_139()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_140()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_144()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1048))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 968));
}

void OUTLINED_FUNCTION_145(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of DefaultParameters?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_146@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_147()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_149()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 456));
  JUMPOUT(0x2495A9178);
}

void OUTLINED_FUNCTION_150()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_151(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

double OUTLINED_FUNCTION_154()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 - 144) = 0;
  result = 0.0;
  *(_OWORD *)(v0 - 176) = 0u;
  *(_OWORD *)(v0 - 160) = 0u;
  return result;
}

void OUTLINED_FUNCTION_155()
{
  uint64_t v0;
  uint64_t *v1;

  *(_QWORD *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0 + 208, v1);
}

double OUTLINED_FUNCTION_158()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_159@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_160()
{
  uint64_t v0;
  uint64_t *v1;

  *(_QWORD *)(v0 + 288) = 0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0 + 256, v1);
}

uint64_t OUTLINED_FUNCTION_161()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_162(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s24TokenGenerationInference08OnDeviceC19AssetObjectE5RunnerVWOcTm_0(a1, a2, v2);
}

void OUTLINED_FUNCTION_163()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 192) = v3;
  specialized Dictionary.subscript.getter(v3, v1, v2, v0 + 520);
}

uint64_t OUTLINED_FUNCTION_164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

void OUTLINED_FUNCTION_167()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 520) = 0;
  *(_QWORD *)(v0 + 528) = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
}

uint64_t OUTLINED_FUNCTION_169(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = a1;
  return v1 - 192;
}

void OUTLINED_FUNCTION_170()
{
  OnDeviceInferenceProviderDataSource.resourceBundle(for:)();
}

uint64_t OUTLINED_FUNCTION_171()
{
  return type metadata accessor for InferenceError.Context();
}

uint64_t OUTLINED_FUNCTION_176()
{
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_181()
{
  unint64_t v0;
  uint64_t v1;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v1 - 320), v0, (uint64_t *)(v1 - 264));
}

uint64_t OUTLINED_FUNCTION_182()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_183()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  return type metadata accessor for TokenGenerationError.Context();
}

uint64_t OUTLINED_FUNCTION_184(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

void OUTLINED_FUNCTION_185(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of UUID?(v3 + 256, v3 + 120, a3);
}

uint64_t OUTLINED_FUNCTION_186()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_187()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(v1, *(_QWORD *)(v0 + 40));
}

uint64_t OUTLINED_FUNCTION_190()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_192()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 432) = 0;
  *(_QWORD *)(v0 + 440) = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
}

void OUTLINED_FUNCTION_193()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 344) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
}

void OUTLINED_FUNCTION_194()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 344) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
}

void OUTLINED_FUNCTION_195()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 384) = 0;
  *(_QWORD *)(v0 + 392) = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
}

void OUTLINED_FUNCTION_196()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
}

void OUTLINED_FUNCTION_197()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized Dictionary.subscript.setter(v2 - 128, v0, v1);
}

uint64_t OUTLINED_FUNCTION_198()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_199(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_202()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_203()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

_QWORD *OUTLINED_FUNCTION_204()
{
  uint64_t v0;

  outlined init with take of LogitCollection((__int128 *)(v0 + 160), v0 + 208);
  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232));
}

unint64_t OUTLINED_FUNCTION_206()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_211(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_212@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 912);
  *(_QWORD *)(v3 - 120) = *(_QWORD *)(v2 + 928);
  *(_QWORD *)(v3 - 112) = v4;
  return a1(v1);
}

BOOL OUTLINED_FUNCTION_213(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

void OUTLINED_FUNCTION_214()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_215()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_218()
{
  return type metadata accessor for URL();
}

void OUTLINED_FUNCTION_219()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
}

void OUTLINED_FUNCTION_220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  specialized Dictionary.subscript.getter(v2, v1, v0, v3 - 192);
}

id OUTLINED_FUNCTION_222(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return @nonobjc TGIMutableE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(a1, a2, *(_QWORD *)(v2 + 160));
}

uint64_t OUTLINED_FUNCTION_223()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_224()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_225()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

void OUTLINED_FUNCTION_226(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

BOOL OUTLINED_FUNCTION_228(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_229(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_230(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

BOOL OUTLINED_FUNCTION_231(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void *OUTLINED_FUNCTION_232()
{
  uint64_t v0;

  return memcpy((void *)(v0 + 936), (const void *)(v0 + 808), 0x80uLL);
}

uint64_t OUTLINED_FUNCTION_233()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 912);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, *(_QWORD *)(v0 + 920));
  return v1;
}

uint64_t OUTLINED_FUNCTION_234()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_235()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(*(_QWORD *)(v1 - 72) + 184));
}

uint64_t OUTLINED_FUNCTION_236()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_237()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_240(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_241(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

BOOL OUTLINED_FUNCTION_242(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_244()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_246()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 + 384);
}

uint64_t OUTLINED_FUNCTION_247(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

void OUTLINED_FUNCTION_248(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2 + 256, a2);
}

uint64_t OUTLINED_FUNCTION_249()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 56) + 32 * v1);
}

uint64_t OUTLINED_FUNCTION_250(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

void OUTLINED_FUNCTION_251(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2 + 520, a2);
}

uint64_t OUTLINED_FUNCTION_252()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 + 520);
}

uint64_t OUTLINED_FUNCTION_254()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_255(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = result;
  *(_QWORD *)(v1 - 104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_256(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_257()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 128))(v0, v1);
}

uint64_t *OUTLINED_FUNCTION_259()
{
  uint64_t *v0;

  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_260()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_261@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2[54] = a1;
  v2[55] = (v1 - 32) | 0x8000000000000000;
  return v2[24];
}

uint64_t OUTLINED_FUNCTION_262()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_263()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 128);
}

BOOL OUTLINED_FUNCTION_264(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_265()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = *v0;
  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_266()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_267()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_269(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_270()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_272(void *a1)
{
  uint64_t v1;

  return specialized Set._Variant.insert(_:)((_QWORD *)(v1 + 328), a1);
}

uint64_t OUTLINED_FUNCTION_273()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_275(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2 + 160, a2);
}

_QWORD *OUTLINED_FUNCTION_276()
{
  uint64_t v0;

  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 184));
}

uint64_t OUTLINED_FUNCTION_277()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_278()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_282()
{
  return type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
}

uint64_t OUTLINED_FUNCTION_287(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_288(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_289()
{
  uint64_t v0;

}

double OUTLINED_FUNCTION_290()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_QWORD *)(v0 + 192) = 0;
  return result;
}

BOOL OUTLINED_FUNCTION_291(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_292(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 40 * a1;
}

uint64_t OUTLINED_FUNCTION_293()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

double OUTLINED_FUNCTION_295()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_296()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_297(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void OUTLINED_FUNCTION_298(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  specialized Dictionary.subscript.getter(v1, v3, v2, a1);
}

uint64_t OUTLINED_FUNCTION_299()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_301(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

void OUTLINED_FUNCTION_302(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;
  Swift::String v17;

  v17._countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
}

uint64_t OUTLINED_FUNCTION_303(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = result;
  return result;
}

void OUTLINED_FUNCTION_304()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0x207465737341;
  *(_QWORD *)(v0 - 96) = 0xE600000000000000;
}

uint64_t OUTLINED_FUNCTION_305()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_306()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_307(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v2, a2);
}

void OUTLINED_FUNCTION_308()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_309()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_310()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_314()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_315()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_316(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 176));
}

uint64_t OUTLINED_FUNCTION_317()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL OUTLINED_FUNCTION_318@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_319()
{
  return swift_retain();
}

uint64_t *OUTLINED_FUNCTION_320()
{
  uint64_t v0;

  return outlined release of ModelMetadata?((uint64_t *)(v0 + 344));
}

void OUTLINED_FUNCTION_321(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of DefaultParameters?(v3 + 680, v3 + 808, a3);
}

uint64_t OUTLINED_FUNCTION_322()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_323()
{
  return InferenceProviderRequestConfiguration.sessionUUID.getter();
}

void OUTLINED_FUNCTION_324(uint64_t a1)
{
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, *(_QWORD *)(v1 - 136));
}

void OUTLINED_FUNCTION_326(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of DefaultParameters?(v3 + 560, v3 + 1064, a3);
}

uint64_t OUTLINED_FUNCTION_327()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_328()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_329()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_330()
{
  uint64_t v0;

  return outlined init with take of LogitCollection((__int128 *)(v0 + 384), v0 + 432);
}

BOOL OUTLINED_FUNCTION_331()
{
  Swift::Int v0;
  Swift::Bool v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

unint64_t OUTLINED_FUNCTION_332(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_333@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

unint64_t OUTLINED_FUNCTION_334(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_335()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_336()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_337()
{
  uint64_t v0;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0 + 336, v0 + 296);
}

uint64_t OUTLINED_FUNCTION_338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return outlined init with copy of Any(a1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_340()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_341(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_342()
{
  uint64_t v0;

  return v0;
}

_QWORD *OUTLINED_FUNCTION_343()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 184));
}

uint64_t OUTLINED_FUNCTION_344@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_345(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_346()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_351(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_353()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v0, v1);
}

uint64_t OUTLINED_FUNCTION_354()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_355()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_356()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_359(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

void OUTLINED_FUNCTION_360(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 328) = a1;
  *(_QWORD *)(v2 + 336) = (v1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_363(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

uint64_t OUTLINED_FUNCTION_364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_365(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_366()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_367(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  return v1 - 216;
}

uint64_t OUTLINED_FUNCTION_368(__int128 *a1)
{
  uint64_t v1;

  return outlined init with take of LogitCollection(a1, v1);
}

uint64_t OUTLINED_FUNCTION_369()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_370()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_371()
{
  uint64_t *v0;
  uint64_t v1;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v1 - 192, v0);
}

uint64_t OUTLINED_FUNCTION_372()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

id OUTLINED_FUNCTION_373(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_374()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_375()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_376(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

unint64_t OUTLINED_FUNCTION_377()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

uint64_t OUTLINED_FUNCTION_379@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_380()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_381()
{
  uint64_t v0;

  OnDeviceInferenceProviderDataSource.url(for:)(v0);
}

void OUTLINED_FUNCTION_382()
{
  OnDeviceInferenceAssetRepository.resumeSuspendedFetch()();
}

void OUTLINED_FUNCTION_384()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v1, v0);
}

uint64_t OUTLINED_FUNCTION_385()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_386(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

unint64_t OUTLINED_FUNCTION_387()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_388()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_389()
{
  return static NSObject.== infix(_:_:)();
}

void OUTLINED_FUNCTION_391(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t OUTLINED_FUNCTION_392()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_393(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = a1;
  return v1 + 296;
}

uint64_t OUTLINED_FUNCTION_394()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_395(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(a1, v1, v2);
}

void OUTLINED_FUNCTION_396(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2 + 208, a2);
}

uint64_t OUTLINED_FUNCTION_397()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

id OUTLINED_FUNCTION_398()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v0 + 48) + 8 * v1);
}

void OUTLINED_FUNCTION_399()
{
  uint64_t v0;
  uint64_t *v1;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_401()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_403(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2 + 120, a2);
}

uint64_t OUTLINED_FUNCTION_404()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_405()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_406(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_407()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_408()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 + 368);
}

uint64_t OUTLINED_FUNCTION_409()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_410()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_411()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_412()
{
  uint64_t v0;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0 + 296, v0 + 256);
}

uint64_t OUTLINED_FUNCTION_413()
{
  uint64_t v0;

  return outlined init with take of LogitCollection((__int128 *)(v0 + 296), v0 + 336);
}

uint64_t OUTLINED_FUNCTION_414()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_415()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_416()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_417()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_418()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_419()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_421(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = a1;
  return v1 + 320;
}

void OUTLINED_FUNCTION_422()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

id OnDeviceInferenceContext.maximumContextLength.getter()
{
  uint64_t v0;
  id result;

  if (*(_BYTE *)(v0 + 136) != 1)
    return *(id *)(v0 + 128);
  result = closure #1 in OnDeviceInferenceContext.maximumContextLength.getter(v0);
  *(_QWORD *)(v0 + 128) = result;
  *(_BYTE *)(v0 + 136) = 0;
  return result;
}

id closure #1 in OnDeviceInferenceContext.maximumContextLength.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int EnumTagSinglePayload;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  _BYTE v48[40];
  _BYTE v49[40];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v42 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v42 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v42 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v47 = (unint64_t)&v42 - v15;
  v16 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (id *)((char *)&v42 - v19);
  v21 = *(_QWORD *)(a1 + 104);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    v24 = v47;
    v27 = v47;
    v28 = 1;
    goto LABEL_9;
  }
  v43 = v18;
  v44 = v8;
  v45 = v11;
  v46 = v5;
  v23 = v21 + 32;
  swift_bridgeObjectRetain();
  v24 = 0;
  while (1)
  {
    outlined init with copy of DeterministicLanguageModelProtocol(v23, (uint64_t)v49);
    outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v49, (uint64_t)v48);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    v25 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, v25 ^ 1u, 1, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    swift_bridgeObjectRelease();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
    outlined destroy of OnDeviceInferenceAssetObjectE5Runner?((uint64_t)v14);
    if (EnumTagSinglePayload != 1)
      break;
    ++v24;
    v23 += 40;
    if (v22 == v24)
      goto LABEL_8;
  }
  if (v22 == v24)
    goto LABEL_8;
  if (v24 >= *(_QWORD *)(v21 + 16))
  {
    __break(1u);
LABEL_15:
    outlined destroy of OnDeviceInferenceAssetObjectE5Runner?(v24);
    if (one-time initialization token for device != -1)
      goto LABEL_20;
    while (1)
    {
      v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Log.device);
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_248CAA000, v39, v40, "No E5RunnerAssetObjects present in the OnDeviceInferenceContext.", v41, 2u);
        MEMORY[0x2495AAF60](v41, -1, -1);
      }

      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      swift_once();
    }
  }
  outlined init with copy of DeterministicLanguageModelProtocol(v23, (uint64_t)v49);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v49, (uint64_t)v48);
  v31 = (uint64_t)v44;
  v32 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v31, v32 ^ 1u, 1, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  v33 = (uint64_t)v45;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner?(v31, (uint64_t)v45);
  v34 = (uint64_t)v46;
  outlined init with copy of OnDeviceInferenceAssetObjectE5Runner?(v33, (uint64_t)v46);
  if (__swift_getEnumTagSinglePayload(v34, 1, v16) == 1)
    goto LABEL_19;
  v35 = v34;
  v36 = v43;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v35, v43);
  outlined destroy of OnDeviceInferenceAssetObjectE5Runner?(v33);
  v37 = v36;
  v24 = v47;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v37, v47);
  v27 = v24;
  v28 = 0;
LABEL_9:
  __swift_storeEnumTagSinglePayload(v27, v28, 1, v16);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v24, 1, v16) == 1)
    goto LABEL_15;
  outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v24, (uint64_t)v20);
  v29 = objc_msgSend(v20[2], sel_maxContextLength);
  outlined destroy of OnDeviceInferenceAssetObjectE5Runner((uint64_t)v20);
  return v29;
}

uint64_t OnDeviceInferenceContext.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OnDeviceInferenceContext.__deallocating_deinit()
{
  OnDeviceInferenceContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceContext()
{
  return objc_opt_self();
}

uint64_t outlined destroy of OnDeviceInferenceAssetObjectE5Runner?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectE5Runner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of OnDeviceInferenceAssetObjectE5Runner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v10 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = v10;
    v5 = a1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v6 = dispatch thunk of TokenizerRunner.tokenize(_:)();
      if (v1)
        break;
      v7 = v6;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v10 + 16);
      if (v8 >= *(_QWORD *)(v10 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v5 += 16;
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = v7;
      if (!--v2)
      {
        OUTLINED_FUNCTION_124();
        return v4;
      }
    }
    OUTLINED_FUNCTION_124();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_124();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference34DeterministicLanguageModelProtocol_pTg5@<X0>(void (*a1)(char *, uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  void (*v14)(char *, uint64_t *);
  uint64_t v15;

  v3 = v2;
  v14 = a1;
  v5 = type metadata accessor for Constraints();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Grammar?(v3, (uint64_t)v11, &demangling cache variable for type metadata for Constraints?);
  result = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v5);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v14(v8, &v15);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF24TokenGenerationInference34DeterministicLanguageModelProtocol_p_s5NeverOAD06MaskedgH0CTg504_s24cd121Inference08OnDeviceC14ContextFactoryC06createcF07request13configuration9isOneShotAA0decF0C0aB021CompletePromptRequestV_20h55ManagerServices0c8ProviderP13ConfigurationVSbtYaKFAA021fg2Q8I35_pyKXEfU4_AA06MaskedwQ0CAaP_pXEfU0_AD013E5TransformergH0CTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[40];
  __int128 v8;
  uint64_t v9;

  outlined init with copy of Grammar?(a1, (uint64_t)&v8, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
  if (v9)
  {
    outlined init with take of LogitCollection(&v8, (uint64_t)v7);
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v7, (uint64_t)v6);
    type metadata accessor for MaskedLanguageModel();
    v3 = swift_allocObject();
    swift_retain();
    v4 = specialized MaskedLanguageModel.init(_:_:)(v6, a2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5(void (*a1)(uint64_t *__return_ptr, char *, uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Constraints();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Grammar?(v1, (uint64_t)v10, &demangling cache variable for type metadata for Constraints?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v14, v7, &v13);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 1112) = v3;
  *(_BYTE *)(v4 + 1504) = a3;
  *(_QWORD *)(v4 + 1104) = a2;
  *(_QWORD *)(v4 + 1096) = a1;
  v5 = type metadata accessor for TokenGenerationError.Context();
  *(_QWORD *)(v4 + 1120) = v5;
  *(_QWORD *)(v4 + 1128) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1136) = OUTLINED_FUNCTION_46_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  *(_QWORD *)(v4 + 1144) = OUTLINED_FUNCTION_46_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy.Choice?);
  *(_QWORD *)(v4 + 1152) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1160) = OUTLINED_FUNCTION_24_4();
  v6 = type metadata accessor for SamplingParameters();
  *(_QWORD *)(v4 + 1168) = v6;
  *(_QWORD *)(v4 + 1176) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1184) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1192) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1200) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1208) = OUTLINED_FUNCTION_24_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  *(_QWORD *)(v4 + 1216) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1224) = OUTLINED_FUNCTION_24_4();
  v7 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  *(_QWORD *)(v4 + 1232) = v7;
  *(_QWORD *)(v4 + 1240) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1248) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1256) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1264) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1272) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1280) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1288) = OUTLINED_FUNCTION_24_4();
  v8 = type metadata accessor for UUID();
  *(_QWORD *)(v4 + 1296) = v8;
  *(_QWORD *)(v4 + 1304) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 1312) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1320) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1328) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1336) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1344) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1352) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1360) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1368) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1376) = OUTLINED_FUNCTION_24_4();
  *(_QWORD *)(v4 + 1384) = OUTLINED_FUNCTION_24_4();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(NSObject *, uint64_t, uint64_t);
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v38;
  void *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;

  InferenceProviderRequestConfiguration.requestUUID.getter();
  v1 = InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  v3 = v2;
  v0[174] = v1;
  v0[175] = v2;
  if (one-time initialization token for device != -1)
    swift_once();
  v4 = v0[173];
  v5 = v0[172];
  v6 = v0[163];
  v7 = v0[162];
  v8 = OUTLINED_FUNCTION_15_4();
  v0[176] = __swift_project_value_buffer(v8, (uint64_t)static Log.device);
  v9 = *(void (**)(NSObject *, uint64_t, uint64_t))(v6 + 16);
  v0[177] = v9;
  v9(v5, v4, v7);
  OUTLINED_FUNCTION_59_3();
  Logger.logObject.getter();
  v10 = OUTLINED_FUNCTION_134();
  if (OUTLINED_FUNCTION_77_2(v10))
  {
    v11 = OUTLINED_FUNCTION_4_11();
    v53 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v11 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v12 = OUTLINED_FUNCTION_50_5();
    v0[135] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_195_0();
    *(_WORD *)(v11 + 12) = 2080;
    OUTLINED_FUNCTION_52();
    v0[136] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v3, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v5, (os_log_type_t)v6, "Creating inference context for request %s asset bundle %s", (uint8_t *)v11);
    OUTLINED_FUNCTION_35_5();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_195_0();
  OUTLINED_FUNCTION_19_6();

  v0[178] = v6;
  InferenceProviderRequestConfiguration.assetIdentifiers.getter();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v15 = v14;
  v0[179] = v14;
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_311();
  v17 = specialized Sequence<>.contains(_:)(0xD000000000000017, v16, v15);
  v18 = (_QWORD *)v0[139];
  if ((v17 & 1) != 0)
  {
    OUTLINED_FUNCTION_19_3();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)(v18 + 2), (uint64_t)(v0 + 12));
    __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v19 = OUTLINED_FUNCTION_2_0();
    *(_OWORD *)(v19 + 16) = xmmword_248D76A60;
    __swift_project_boxed_opaque_existential_1(v18 + 7, v18[10]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    v20 = v0[121];
    if (v20)
      v21 = v0[120];
    else
      v21 = 0xD00000000000001DLL;
    if (v20)
      v22 = v0[121];
    else
      v22 = 0x8000000248D7FEF0;
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v22;
    __swift_project_boxed_opaque_existential_1(v18 + 7, v18[10]);
    OUTLINED_FUNCTION_237_0();
    Overridable.wrappedValue.getter();
    v23 = v0[119];
    v24 = 0xD00000000000001ALL;
    if (v23)
      v24 = v0[118];
    v25 = 0x8000000248D7FF10;
    if (v23)
      v25 = v0[119];
    v50 = v25;
    v51 = v24;
    *(_QWORD *)(v19 + 48) = v24;
    *(_QWORD *)(v19 + 56) = v25;
    __swift_project_boxed_opaque_existential_1(v18 + 7, v18[10]);
    Overridable.wrappedValue.getter();
    v26 = v0[117];
    if (v26)
      v27 = v0[116];
    else
      v27 = 0xD000000000000022;
    if (v26)
      v28 = v0[117];
    else
      v28 = 0x8000000248D7FF30;
    *(_QWORD *)(v19 + 64) = v27;
    *(_QWORD *)(v19 + 72) = v28;
    v29 = (void *)objc_opt_self();
    OUTLINED_FUNCTION_52();
    v52 = v29;
    v30 = objc_msgSend(v29, sel_defaultManager);
    v31 = (void *)MEMORY[0x2495A9A78](v21, v22);
    v32 = objc_msgSend(v30, sel_fileExistsAtPath_, v31);

    if ((v32 & 1) != 0)
    {
      v49 = v27;
      v53 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v33 = v53;
      v34 = *(_QWORD *)(v53 + 16);
      if (v34 >= *(_QWORD *)(v53 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v33 = v53;
      }
      *(_QWORD *)(v33 + 16) = v34 + 1;
      v35 = v33 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v21;
      *(_QWORD *)(v35 + 40) = v22;
      v27 = v49;
    }
    else
    {
      OUTLINED_FUNCTION_7_0();
      v33 = MEMORY[0x24BEE4AF8];
    }
    OUTLINED_FUNCTION_122();
    v38 = objc_msgSend(v52, sel_defaultManager);
    v39 = (void *)MEMORY[0x2495A9A78](v51, v50);
    v40 = OUTLINED_FUNCTION_224_0((uint64_t)v39, sel_fileExistsAtPath_);

    if (v40)
    {
      v53 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_111_2();
        v33 = v53;
      }
      v41 = *(_QWORD *)(v33 + 16);
      if (v41 >= *(_QWORD *)(v33 + 24) >> 1)
      {
        OUTLINED_FUNCTION_109_1();
        v33 = v53;
      }
      *(_QWORD *)(v33 + 16) = v41 + 1;
      v42 = v33 + 16 * v41;
      *(_QWORD *)(v42 + 32) = v51;
      *(_QWORD *)(v42 + 40) = v50;
      v27 = *(_QWORD *)(v19 + 64);
      v28 = *(_QWORD *)(v19 + 72);
    }
    else
    {
      OUTLINED_FUNCTION_63_0();
    }
    swift_bridgeObjectRetain();
    v43 = objc_msgSend(v52, sel_defaultManager);
    v44 = (void *)MEMORY[0x2495A9A78](v27, v28);
    v45 = OUTLINED_FUNCTION_224_0((uint64_t)v44, sel_fileExistsAtPath_);

    if (v45)
    {
      v53 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_111_2();
        v33 = v53;
      }
      v46 = *(_QWORD *)(v33 + 16);
      if (v46 >= *(_QWORD *)(v33 + 24) >> 1)
      {
        OUTLINED_FUNCTION_109_1();
        v33 = v53;
      }
      *(_QWORD *)(v33 + 16) = v46 + 1;
      v47 = v33 + 16 * v46;
      *(_QWORD *)(v47 + 32) = v27;
      *(_QWORD *)(v47 + 40) = v28;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v0[180] = v33;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v48 = (_QWORD *)swift_task_alloc();
    v0[181] = v48;
    *v48 = v0;
    v48[1] = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    return OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(v33, v0[138]);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v18 + 2, v18[5]);
    v36 = (_QWORD *)swift_task_alloc();
    v0[183] = v36;
    *v36 = v0;
    v36[1] = OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:);
    return OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(v15, v0[138]);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[7];

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 12));
  v5 = *(_QWORD *)(v1[111] + 16);
  v36 = v1[111];
  if (v5)
  {
    OUTLINED_FUNCTION_137_0();
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      v0 = v1[153];
      OUTLINED_FUNCTION_117_1(v4);
      OUTLINED_FUNCTION_256_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      v6 = OUTLINED_FUNCTION_54_3();
      OUTLINED_FUNCTION_53_4(v6);
      if (v7)
      {
        outlined destroy of LogitPresampler?(v1[153], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      else
      {
        OUTLINED_FUNCTION_133();
        OUTLINED_FUNCTION_241_0();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v11 = v3;
        }
        else
        {
          isUniquelyReferenced_nonNull_native = OUTLINED_FUNCTION_102_2();
          v11 = isUniquelyReferenced_nonNull_native;
        }
        if (*(_QWORD *)(v11 + 16) >= *(_QWORD *)(v11 + 24) >> 1)
        {
          isUniquelyReferenced_nonNull_native = OUTLINED_FUNCTION_139_0();
          v11 = isUniquelyReferenced_nonNull_native;
        }
        OUTLINED_FUNCTION_37_3(isUniquelyReferenced_nonNull_native, v9, v10, v11);
      }
      v4 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v12 = v3;
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_150_0(v12);
  if (v0)
  {
    v2 = 0;
    v13 = v1[159];
    v14 = MEMORY[0x24BEE4AF8];
    v15 = v37;
    do
    {
      if (v2 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        JUMPOUT(0x248D291F0);
      }
      OUTLINED_FUNCTION_71_3();
      v16 = v1[159];
      if (*(_BYTE *)(v13 + 40) == 2)
      {
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v16, v1[158]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_126_1();
          v14 = v40[0];
        }
        v3 = *(_QWORD *)(v14 + 16);
        if (v3 >= *(_QWORD *)(v14 + 24) >> 1)
        {
          OUTLINED_FUNCTION_108_2();
          v14 = v40[0];
        }
        OUTLINED_FUNCTION_125_0();
      }
      else
      {
        outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v16);
      }
      ++v2;
      v15 = v37;
    }
    while (v0 != v2);
  }
  OUTLINED_FUNCTION_147_0();
  if (v0)
  {
    OUTLINED_FUNCTION_60_2();
    v39 = MEMORY[0x24BEE4AF8];
    do
    {
      OUTLINED_FUNCTION_243_0();
      if (MEMORY[0x28] == 2)
      {
        OUTLINED_FUNCTION_65_3();
      }
      else
      {
        OUTLINED_FUNCTION_92_2();
        OUTLINED_FUNCTION_65_3();
        v17 = swift_isUniquelyReferenced_nonNull_native();
        if ((v17 & 1) != 0)
        {
          v20 = v39;
        }
        else
        {
          OUTLINED_FUNCTION_121_0();
          v20 = v17;
        }
        if (*(_QWORD *)(v20 + 16) >= *(_QWORD *)(v20 + 24) >> 1)
        {
          OUTLINED_FUNCTION_138_0();
          v20 = v17;
        }
        OUTLINED_FUNCTION_7_12(v17, v18, v19, v20);
      }
      v2 += v3;
      --v0;
    }
    while (v0);
    OUTLINED_FUNCTION_19_6();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_64_5();
  swift_release();
  if (OUTLINED_FUNCTION_181_0() != 1)
  {
    OUTLINED_FUNCTION_63_3();
    InferenceProviderRequestConfiguration.requestUUID.getter();
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_16_6();
    v31 = *(id *)(v2 + 16);
    OUTLINED_FUNCTION_44_3();
  }
  v21 = v1[176];
  v22 = v1[173];
  v23 = v1[164];
  v24 = v1[152];
  OUTLINED_FUNCTION_46_5();
  outlined destroy of LogitPresampler?(v24, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_59_3();
  Logger.logObject.getter();
  v25 = OUTLINED_FUNCTION_156();
  if (OUTLINED_FUNCTION_77_2(v25))
  {
    v38 = v1[174];
    v26 = OUTLINED_FUNCTION_4_11();
    v40[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v26 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v27 = OUTLINED_FUNCTION_380();
    v1[131] = OUTLINED_FUNCTION_9_8(v27, v28);
    OUTLINED_FUNCTION_14_6();
    OUTLINED_FUNCTION_116_0();
    OUTLINED_FUNCTION_355();
    *(_WORD *)(v26 + 12) = 2080;
    OUTLINED_FUNCTION_122();
    v30 = OUTLINED_FUNCTION_250(v38, v29, v40);
    OUTLINED_FUNCTION_113_1(v30);
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v22, (os_log_type_t)v23, "Failed to create inference context for request %s, inference runner not loaded for asset bundle %s", (uint8_t *)v26);
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_218_0();
  OUTLINED_FUNCTION_19_6();

  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_161_0();
  OUTLINED_FUNCTION_13_2(0xD000000000000022);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_102_1();
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_95_1();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  v32 = OUTLINED_FUNCTION_17_5();
  v34 = OUTLINED_FUNCTION_90_1(v32, v33);
  OUTLINED_FUNCTION_19_7(v34, *MEMORY[0x24BEB8070]);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_255_0();
  v1[186] = v36;
  v1[185] = v21;
  OUTLINED_FUNCTION_21_5();
  return OUTLINED_FUNCTION_33_4();
}

{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_175();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  v1 = v0[182];
  v0[186] = MEMORY[0x24BEE4AF8];
  v0[185] = v1;
  OUTLINED_FUNCTION_21_5();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[7];

  v5 = *(_QWORD *)(v1[114] + 16);
  v36 = v1[114];
  if (v5)
  {
    OUTLINED_FUNCTION_137_0();
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      v0 = v1[153];
      OUTLINED_FUNCTION_117_1(v4);
      OUTLINED_FUNCTION_256_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      v6 = OUTLINED_FUNCTION_54_3();
      OUTLINED_FUNCTION_53_4(v6);
      if (v7)
      {
        outlined destroy of LogitPresampler?(v1[153], &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      else
      {
        OUTLINED_FUNCTION_133();
        OUTLINED_FUNCTION_241_0();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v11 = v3;
        }
        else
        {
          isUniquelyReferenced_nonNull_native = OUTLINED_FUNCTION_102_2();
          v11 = isUniquelyReferenced_nonNull_native;
        }
        if (*(_QWORD *)(v11 + 16) >= *(_QWORD *)(v11 + 24) >> 1)
        {
          isUniquelyReferenced_nonNull_native = OUTLINED_FUNCTION_139_0();
          v11 = isUniquelyReferenced_nonNull_native;
        }
        OUTLINED_FUNCTION_37_3(isUniquelyReferenced_nonNull_native, v9, v10, v11);
      }
      v4 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v12 = v3;
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_150_0(v12);
  if (v0)
  {
    v2 = 0;
    v13 = v1[159];
    v14 = MEMORY[0x24BEE4AF8];
    v15 = v37;
    do
    {
      if (v2 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        JUMPOUT(0x248D2A484);
      }
      OUTLINED_FUNCTION_71_3();
      v16 = v1[159];
      if (*(_BYTE *)(v13 + 40) == 2)
      {
        outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v16, v1[158]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_126_1();
          v14 = v40[0];
        }
        v3 = *(_QWORD *)(v14 + 16);
        if (v3 >= *(_QWORD *)(v14 + 24) >> 1)
        {
          OUTLINED_FUNCTION_108_2();
          v14 = v40[0];
        }
        OUTLINED_FUNCTION_125_0();
      }
      else
      {
        outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v16);
      }
      ++v2;
      v15 = v37;
    }
    while (v0 != v2);
  }
  OUTLINED_FUNCTION_147_0();
  if (v0)
  {
    OUTLINED_FUNCTION_60_2();
    v39 = MEMORY[0x24BEE4AF8];
    do
    {
      OUTLINED_FUNCTION_243_0();
      if (MEMORY[0x28] == 2)
      {
        OUTLINED_FUNCTION_65_3();
      }
      else
      {
        OUTLINED_FUNCTION_92_2();
        OUTLINED_FUNCTION_65_3();
        v17 = swift_isUniquelyReferenced_nonNull_native();
        if ((v17 & 1) != 0)
        {
          v20 = v39;
        }
        else
        {
          OUTLINED_FUNCTION_121_0();
          v20 = v17;
        }
        if (*(_QWORD *)(v20 + 16) >= *(_QWORD *)(v20 + 24) >> 1)
        {
          OUTLINED_FUNCTION_138_0();
          v20 = v17;
        }
        OUTLINED_FUNCTION_7_12(v17, v18, v19, v20);
      }
      v2 += v3;
      --v0;
    }
    while (v0);
    OUTLINED_FUNCTION_19_6();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_64_5();
  swift_release();
  if (OUTLINED_FUNCTION_181_0() != 1)
  {
    OUTLINED_FUNCTION_63_3();
    InferenceProviderRequestConfiguration.requestUUID.getter();
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_16_6();
    v31 = *(id *)(v2 + 16);
    OUTLINED_FUNCTION_44_3();
  }
  v21 = v1[176];
  v22 = v1[173];
  v23 = v1[164];
  v24 = v1[152];
  OUTLINED_FUNCTION_46_5();
  outlined destroy of LogitPresampler?(v24, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_59_3();
  Logger.logObject.getter();
  v25 = OUTLINED_FUNCTION_156();
  if (OUTLINED_FUNCTION_77_2(v25))
  {
    v38 = v1[174];
    v26 = OUTLINED_FUNCTION_4_11();
    v40[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v26 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v27 = OUTLINED_FUNCTION_380();
    v1[131] = OUTLINED_FUNCTION_9_8(v27, v28);
    OUTLINED_FUNCTION_14_6();
    OUTLINED_FUNCTION_116_0();
    OUTLINED_FUNCTION_355();
    *(_WORD *)(v26 + 12) = 2080;
    OUTLINED_FUNCTION_122();
    v30 = OUTLINED_FUNCTION_250(v38, v29, v40);
    OUTLINED_FUNCTION_113_1(v30);
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v22, (os_log_type_t)v23, "Failed to create inference context for request %s, inference runner not loaded for asset bundle %s", (uint8_t *)v26);
    OUTLINED_FUNCTION_23_6();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_218_0();
  OUTLINED_FUNCTION_19_6();

  OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_161_0();
  OUTLINED_FUNCTION_13_2(0xD000000000000022);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_102_1();
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_95_1();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  v32 = OUTLINED_FUNCTION_17_5();
  v34 = OUTLINED_FUNCTION_90_1(v32, v33);
  OUTLINED_FUNCTION_19_7(v34, *MEMORY[0x24BEB8070]);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_255_0();
  v1[186] = v36;
  v1[185] = v21;
  OUTLINED_FUNCTION_21_5();
  return OUTLINED_FUNCTION_33_4();
}

{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_175();
  v1 = v0[184];
  v0[186] = MEMORY[0x24BEE4AF8];
  v0[185] = v1;
  OUTLINED_FUNCTION_21_5();
  return OUTLINED_FUNCTION_2_3();
}

{
  Swift::OpaquePointer *v0;

  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0[186]);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_369();
  swift_task_dealloc();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[110] = v2;
  v3[111] = a1;
  v3[112] = v1;
  v3[182] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
    OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[113] = v2;
  v3[114] = a1;
  v3[115] = v1;
  v3[184] = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

void closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _BYTE v25[40];

  v18 = a5;
  v10 = (uint64_t *)*a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  CompletePromptRequest.constraints.getter();
  v19 = a1;
  v20 = a2;
  v21 = a3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference34DeterministicLanguageModelProtocol_pTg5((void (*)(char *, uint64_t *))partial apply for closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:), (uint64_t)v25);
  outlined destroy of LogitPresampler?((uint64_t)v13, &demangling cache variable for type metadata for Constraints?);
  if (!v5)
  {
    v14 = v18;
    swift_retain();
    v15 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF24TokenGenerationInference34DeterministicLanguageModelProtocol_p_s5NeverOAD06MaskedgH0CTg504_s24cd121Inference08OnDeviceC14ContextFactoryC06createcF07request13configuration9isOneShotAA0decF0C0aB021CompletePromptRequestV_20h55ManagerServices0c8ProviderP13ConfigurationVSbtYaKFAA021fg2Q8I35_pyKXEfU4_AA06MaskedwQ0CAaP_pXEfU0_AD013E5TransformergH0CTf1cn_n((uint64_t)v25, (uint64_t)a4);
    if (v15)
    {
      v16 = v15;
      v23 = type metadata accessor for MaskedLanguageModel();
      v24 = &protocol witness table for MaskedLanguageModel;
      *(_QWORD *)&v22 = v16;
      outlined destroy of LogitPresampler?((uint64_t)v25, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
      outlined init with take of LogitCollection(&v22, (uint64_t)v14);
    }
    else
    {
      v14[3] = v10;
      v14[4] = (uint64_t *)&protocol witness table for E5TransformerLanguageModel;
      *v14 = a4;
      swift_retain();
      outlined destroy of LogitPresampler?((uint64_t)v25, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
    }
  }
}

void closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1@<X0>, uint8_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)(a1, a2, *(uint8_t **)(a3 + 72), a5);
  if (v5)
    *a4 = v5;
}

uint64_t specialized buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[8];
  uint64_t v147;
  char v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  char v153;
  int v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  int v159;
  char v160;
  char v161;
  char v162;
  int v163;
  char v164;
  __int128 v165;
  uint64_t v166;
  _UNKNOWN **v167;
  uint64_t v168[5];
  uint64_t v169;
  char v170;
  uint64_t v171;
  int v172;
  char v173;
  __int16 v174;
  int v175;
  char v176;
  uint64_t v177;

  v138 = a4;
  v139 = a5;
  v136 = a1;
  v137 = a3;
  v145 = a2;
  v141 = a8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for UUID();
  v177 = *(_QWORD *)(v144 - 8);
  v13 = MEMORY[0x24BDAC7A8](v144);
  v134 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v135 = (char *)&v125 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v125 - v17;
  v19 = type metadata accessor for SamplingParameters();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = a6 + 16;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0;
  v142 = v23;
  *(_BYTE *)(v23 + 24) = 1;
  CompletePromptRequest.parameters.getter();
  v24 = SamplingParameters.promptLookupDraftSteps.getter();
  LOBYTE(a6) = v25;
  v26 = v19;
  v27 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v26);
  if ((a6 & 1) != 0 || v27 < 1)
  {
    v41 = v145;
    if (*(uint64_t *)(v145 + 80) < 1)
    {
      v63 = v143;
      if (!*(_QWORD *)(a7 + 16))
      {
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v139, (uint64_t)v168);
        v92 = v140;
        swift_beginAccess();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v92, (uint64_t)&v165);
        v93 = type metadata accessor for BasicDecoder();
        swift_allocObject();
        v94 = BasicDecoder.init(languageModel:sampler:)(v168, &v165);
        v95 = v141;
        v141[3] = v93;
        v95[4] = (uint64_t)&protocol witness table for BasicDecoder;
        result = swift_release();
        *v95 = v94;
        return result;
      }
      v64 = *(_QWORD *)(a7 + 32);
      v135 = *(char **)(a7 + 40);
      v133 = *(unsigned __int8 *)(a7 + 48);
      v132 = *(_QWORD *)(a7 + 56);
      v65 = *(_DWORD *)(a7 + 64);
      v130 = *(unsigned __int8 *)(a7 + 68);
      v131 = v65;
      v66 = *(unsigned __int8 *)(a7 + 69);
      v128 = *(unsigned __int8 *)(a7 + 70);
      v129 = v66;
      v67 = *(_DWORD *)(a7 + 72);
      v126 = *(unsigned __int8 *)(a7 + 76);
      v127 = v67;
      v68 = v64;
      swift_retain();
      v69 = CompletePromptRequest.constraints.getter();
      MEMORY[0x24BDAC7A8](v69);
      v70 = v137;
      *(&v125 - 4) = v136;
      *(&v125 - 3) = v70;
      *(&v125 - 2) = v41;
      *(&v125 - 1) = v68;
      v71 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5((void (*)(uint64_t *__return_ptr, char *, uint64_t *))closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)partial apply);
      outlined destroy of LogitPresampler?((uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
      if (v63)
      {
        swift_release();
        return swift_release();
      }
      if (v71)
      {
        v166 = type metadata accessor for MaskedLanguageModel();
        v167 = &protocol witness table for MaskedLanguageModel;
        *(_QWORD *)&v165 = v71;
        outlined init with take of LogitCollection(&v165, (uint64_t)v168);
      }
      else
      {
        v168[3] = type metadata accessor for E5TransformerLanguageModel();
        v168[4] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;
        v168[0] = v68;
        swift_retain();
      }
      v76 = v177;
      v77 = v134;
      v134 = (char *)v68;
      v143 = 0;
      v96 = one-time initialization token for device;
      v125 = v71;
      swift_retain();
      if (v96 == -1)
        goto LABEL_29;
    }
    else
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Log.device);
      v43 = v177;
      v44 = v135;
      v45 = v144;
      (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v135, v138, v144);
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = v44;
        v49 = (uint8_t *)swift_slowAlloc();
        v50 = swift_slowAlloc();
        v168[0] = v50;
        *(_DWORD *)v49 = 136315138;
        v138 = (uint64_t)(v49 + 4);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)&v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v168);
        v41 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v177 + 8))(v48, v45);
        _os_log_impl(&dword_248CAA000, v46, v47, "Using speculative streaming for request %s", v49, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2495AAF60](v50, -1, -1);
        MEMORY[0x2495AAF60](v49, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
      }

      v72 = objc_msgSend(*(id *)(v41 + 16), sel_vocabularyCount);
      v73 = (uint64_t)v72;
      v74 = *(_QWORD *)(v41 + 80);
      v75 = *(unsigned __int8 *)(v41 + 96);
      if (v75 == 2)
      {
        v76 = 0;
        v77 = 0;
        LOBYTE(v78) = 0;
        LOBYTE(v79) = 0;
        v80 = 0;
        v81 = 1;
        v82 = *(_QWORD *)(v41 + 80);
        LOBYTE(v83) = 1;
        v84 = 1;
      }
      else
      {
        v80 = *(unsigned int *)(v41 + 120);
        v81 = *(_QWORD *)(v41 + 104);
        v77 = *(char **)(v41 + 112);
        v83 = ((unint64_t)v77 >> 32) & 1;
        v82 = *(_QWORD *)(v41 + 88);
        v76 = v75 & 1;
        v78 = ((unint64_t)v77 >> 40) & 1;
        v79 = ((unint64_t)v77 >> 48) & 1;
        v84 = *(_BYTE *)(v41 + 124) & 1;
      }
      v85 = (uint64_t)v72 - v74;
      if (__OFSUB__(v73, v74))
      {
        __break(1u);
      }
      else if (v73 >= v85)
      {
        v145 = v80;
        v86 = v81;
        specialized _copyCollectionToContiguousArray<A>(_:)(v85, v73);
        v177 = v87;
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v139, (uint64_t)v168);
        v156 = v82;
        v157 = v76;
        v158 = v86;
        v159 = (int)v77;
        v160 = v83;
        v161 = v78;
        v162 = v79;
        v163 = v145;
        v164 = v84;
        v88 = v140;
        swift_beginAccess();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v88, (uint64_t)&v165);
        v89 = type metadata accessor for SpeculativeStreamingDecoder();
        swift_allocObject();
        v90 = SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(v168, &v156, v177, (uint64_t)&v165);
        v91 = v141;
        v141[3] = v89;
        v91[4] = (uint64_t)&protocol witness table for SpeculativeStreamingDecoder;
        result = swift_release();
        *v91 = v90;
        return result;
      }
      __break(1u);
    }
    swift_once();
LABEL_29:
    v97 = type metadata accessor for Logger();
    __swift_project_value_buffer(v97, (uint64_t)static Log.device);
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v168, (uint64_t)&v165);
    v98 = v76;
    v99 = v144;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v77, v138, v144);
    v100 = Logger.logObject.getter();
    v101 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v100, v101))
    {
      v102 = swift_slowAlloc();
      v138 = swift_slowAlloc();
      v146[0] = v138;
      *(_DWORD *)v102 = 136315394;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)&v165, (uint64_t)&v156);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
      v103 = String.init<A>(describing:)();
      v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
      *(_WORD *)(v102 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v105 = dispatch thunk of CustomStringConvertible.description.getter();
      v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v146);
      v41 = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v77, v99);
      _os_log_impl(&dword_248CAA000, v100, v101, "Using draft language model %s for request %s", (uint8_t *)v102, 0x16u);
      v107 = v138;
      swift_arrayDestroy();
      MEMORY[0x2495AAF60](v107, -1, -1);
      MEMORY[0x2495AAF60](v102, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v77, v99);
    }

    v108 = (uint64_t)v135;
    v109 = v133;
    v110 = v132;
    v112 = v130;
    v111 = v131;
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v168, (uint64_t)&v165);
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v139, (uint64_t)&v156);
    v147 = v108;
    v148 = v109;
    v149 = v110;
    v150 = v111;
    v151 = v112;
    v152 = v129;
    v153 = v128;
    v154 = v127;
    v155 = v126;
    v113 = v140;
    swift_beginAccess();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v113, (uint64_t)v146);
    v114 = getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v142, v136, v41);
    v115 = type metadata accessor for TwoStageSpeculativeDecoder();
    v116 = swift_allocObject();
    v117 = v166;
    v118 = (uint64_t)v167;
    v119 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v165, v166);
    MEMORY[0x24BDAC7A8](v119);
    v121 = (char *)&v125 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v122 + 16))(v121);
    v123 = specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)((uint64_t)v121, &v156, &v147, v146, v114, v116, v117, v118);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
    v124 = v141;
    v141[3] = v115;
    v124[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
    swift_release();
    swift_release();
    *v124 = v123;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
    return swift_release();
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.device);
  v29 = v177;
  v30 = v144;
  (*(void (**)(char *, uint64_t, uint64_t))(v177 + 16))(v18, v138, v144);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v168[0] = v34;
    *(_DWORD *)v33 = 134218242;
    *(_QWORD *)&v165 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2080;
    v138 = v27;
    v135 = (char *)(v33 + 14);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v35 = v144;
    v36 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v177 + 8))(v18, v35);
    v38 = v32;
    v39 = v138;
    _os_log_impl(&dword_248CAA000, v31, v38, "Using prompt lookup with %ld step(s) for request %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2495AAF60](v34, -1, -1);
    MEMORY[0x2495AAF60](v33, -1, -1);

    v40 = v141;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);

    v40 = v141;
    v39 = v27;
  }
  v53 = v142;
  v55 = v139;
  v54 = v140;
  type metadata accessor for PromptLookupLanguageModel();
  swift_allocObject();
  PromptLookupLanguageModel.init()();
  v57 = v56;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v55, (uint64_t)v168);
  v169 = v39;
  v170 = 0;
  v171 = 1;
  v172 = 0;
  v173 = 1;
  v174 = 0;
  v175 = 0;
  v176 = 1;
  swift_beginAccess();
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v54, (uint64_t)&v165);
  v58 = getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v53, v136, v145);
  v59 = type metadata accessor for TwoStageSpeculativeDecoder();
  v60 = swift_allocObject();
  v61 = specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(v57, v168, &v169, &v165, v58, v60);
  v40[3] = v59;
  v40[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
  result = swift_release();
  *v40 = v61;
  return result;
}

uint64_t buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, __int128 *a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t *__return_ptr, __int128 *);
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t result;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t *__return_ptr, uint64_t);
  __int128 *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  void (*v147)(uint64_t *__return_ptr, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  int v156;
  char v157;
  __int16 v158;
  int v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  int v164;
  char v165;
  char v166;
  char v167;
  int v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  int v173;
  char v174;
  char v175;
  char v176;
  int v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  _UNKNOWN **v181;
  uint64_t v182;
  uint64_t v183;
  _UNKNOWN **v184;
  uint64_t v185;

  v146 = a7;
  v144 = a6;
  v143 = a5;
  v185 = a4;
  v142 = a3;
  v148 = a2;
  v147 = a1;
  v150 = a8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v145 - 8);
  v14 = MEMORY[0x24BDAC7A8](v145);
  v141 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v131 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v131 - v19;
  v21 = type metadata accessor for SamplingParameters();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = a9 + 16;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = 0;
  v152 = v25;
  *(_BYTE *)(v25 + 24) = 1;
  CompletePromptRequest.parameters.getter();
  v26 = SamplingParameters.promptLookupDraftSteps.getter();
  v28 = v27;
  v29 = v24;
  v30 = v26;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
  if ((v28 & 1) != 0 || v30 < 1)
  {
    v42 = v185;
    if (*(uint64_t *)(v185 + 80) < 1)
    {
      if (!*(_QWORD *)(a10 + 16))
      {
        v147(&v182, (uint64_t)v146);
        v99 = v149;
        swift_beginAccess();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v99, (uint64_t)&v179);
        v100 = type metadata accessor for BasicDecoder();
        swift_allocObject();
        v101 = BasicDecoder.init(languageModel:sampler:)(&v182, &v179);
        v102 = v150;
        v150[3] = v100;
        v102[4] = (uint64_t)&protocol witness table for BasicDecoder;
        result = swift_release();
        *v102 = v101;
        return result;
      }
      v140 = v13;
      v72 = *(_QWORD *)(a10 + 32);
      v137 = *(_QWORD *)(a10 + 40);
      v136 = *(unsigned __int8 *)(a10 + 48);
      v139 = *(_QWORD *)(a10 + 56);
      v138 = *(_DWORD *)(a10 + 64);
      v135 = *(unsigned __int8 *)(a10 + 68);
      v134 = *(unsigned __int8 *)(a10 + 69);
      v133 = *(unsigned __int8 *)(a10 + 70);
      v73 = *(_DWORD *)(a10 + 72);
      v74 = *(unsigned __int8 *)(a10 + 76);
      swift_retain();
      v75 = CompletePromptRequest.constraints.getter();
      MEMORY[0x24BDAC7A8](v75);
      v76 = v143;
      *((_QWORD *)&v131 - 4) = v142;
      *((_QWORD *)&v131 - 3) = v76;
      *((_QWORD *)&v131 - 2) = v42;
      *((_QWORD *)&v131 - 1) = v72;
      v77 = v151;
      v78 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15TokenGeneration11ConstraintsO_sAC_p0cD9Inference19MaskedLanguageModelCTg5((void (*)(uint64_t *__return_ptr, char *, uint64_t *))partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:));
      outlined destroy of LogitPresampler?((uint64_t)v12, &demangling cache variable for type metadata for Constraints?);
      if (v77)
      {
        swift_release();
        return swift_release();
      }
      v131 = v74;
      v132 = v73;
      if (v78)
      {
        v180 = type metadata accessor for MaskedLanguageModel();
        v181 = &protocol witness table for MaskedLanguageModel;
        *(_QWORD *)&v179 = v78;
        outlined init with take of LogitCollection(&v179, (uint64_t)&v182);
      }
      else
      {
        v183 = type metadata accessor for E5TransformerLanguageModel();
        v184 = &protocol witness table for E5TransformerLanguageModel;
        v182 = v72;
        swift_retain();
      }
      v84 = v141;
      v83 = v140;
      v151 = v72;
      v103 = one-time initialization token for device;
      v141 = (char *)v78;
      swift_retain();
      if (v103 == -1)
        goto LABEL_29;
    }
    else
    {
      v43 = v13;
      if (one-time initialization token for device != -1)
        swift_once();
      v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Log.device);
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v46 = v145;
      v45(v18, v144, v145);
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        v50 = swift_slowAlloc();
        v182 = v50;
        *(_DWORD *)v49 = 136315138;
        v140 = v43;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)&v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v140 + 8))(v18, v46);
        _os_log_impl(&dword_248CAA000, v47, v48, "Using speculative streaming for request %s", v49, 0xCu);
        swift_arrayDestroy();
        v53 = v50;
        v42 = v185;
        MEMORY[0x2495AAF60](v53, -1, -1);
        MEMORY[0x2495AAF60](v49, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v46);
      }

      v79 = objc_msgSend(*(id *)(v42 + 16), sel_vocabularyCount);
      v80 = (uint64_t)v79;
      v81 = *(_QWORD *)(v42 + 80);
      v82 = *(unsigned __int8 *)(v42 + 96);
      if (v82 == 2)
      {
        v83 = 0;
        v84 = 0;
        LOBYTE(v85) = 0;
        LOBYTE(v86) = 0;
        v87 = 0;
        v88 = 1;
        v89 = *(_QWORD *)(v42 + 80);
        LOBYTE(v90) = 1;
        v91 = 1;
      }
      else
      {
        v87 = *(unsigned int *)(v42 + 120);
        v88 = *(_QWORD *)(v42 + 104);
        v84 = *(char **)(v42 + 112);
        v90 = ((unint64_t)v84 >> 32) & 1;
        v89 = *(_QWORD *)(v42 + 88);
        v83 = v82 & 1;
        v85 = ((unint64_t)v84 >> 40) & 1;
        v86 = ((unint64_t)v84 >> 48) & 1;
        v91 = *(_BYTE *)(v42 + 124) & 1;
      }
      v92 = (uint64_t)v79 - v81;
      if (__OFSUB__(v80, v81))
      {
        __break(1u);
      }
      else if (v80 >= v92)
      {
        v145 = v87;
        v93 = v88;
        specialized _copyCollectionToContiguousArray<A>(_:)(v92, v80);
        v185 = v94;
        v147(&v182, (uint64_t)v146);
        v170 = v89;
        v171 = v83;
        v172 = v93;
        v173 = (int)v84;
        v174 = v90;
        v175 = v85;
        v176 = v86;
        v177 = v145;
        v178 = v91;
        v95 = v149;
        swift_beginAccess();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v95, (uint64_t)&v179);
        v96 = type metadata accessor for SpeculativeStreamingDecoder();
        swift_allocObject();
        v97 = SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(&v182, &v170, v185, (uint64_t)&v179);
        v98 = v150;
        v150[3] = v96;
        v98[4] = (uint64_t)&protocol witness table for SpeculativeStreamingDecoder;
        result = swift_release();
        *v98 = v97;
        return result;
      }
      __break(1u);
    }
    swift_once();
LABEL_29:
    v104 = type metadata accessor for Logger();
    __swift_project_value_buffer(v104, (uint64_t)static Log.device);
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)&v182, (uint64_t)&v179);
    v105 = v83;
    v106 = v145;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v84, v144, v145);
    v107 = Logger.logObject.getter();
    v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = swift_slowAlloc();
      v144 = swift_slowAlloc();
      v153 = v144;
      *(_DWORD *)v109 = 136315394;
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)&v179, (uint64_t)&v170);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeterministicLanguageModelProtocol);
      v110 = String.init<A>(describing:)();
      v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      *(_WORD *)(v109 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v112 = dispatch thunk of CustomStringConvertible.description.getter();
      v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, &v153);
      v42 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v84, v106);
      _os_log_impl(&dword_248CAA000, v107, v108, "Using draft language model %s for request %s", (uint8_t *)v109, 0x16u);
      v114 = v144;
      swift_arrayDestroy();
      MEMORY[0x2495AAF60](v114, -1, -1);
      MEMORY[0x2495AAF60](v109, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v84, v106);
    }

    v115 = v149;
    v116 = v147;
    v117 = v146;
    v118 = v139;
    v119 = v138;
    v147((uint64_t *)&v179, (uint64_t)&v182);
    v116(&v170, (uint64_t)v117);
    v161 = v137;
    v162 = v136;
    v163 = v118;
    v164 = v119;
    v165 = v135;
    v166 = v134;
    v167 = v133;
    v168 = v132;
    v169 = v131;
    swift_beginAccess();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v115, (uint64_t)&v153);
    v120 = getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v152, v142, v42);
    v121 = type metadata accessor for TwoStageSpeculativeDecoder();
    v122 = swift_allocObject();
    v123 = v180;
    v124 = (uint64_t)v181;
    v125 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v179, v180);
    MEMORY[0x24BDAC7A8](v125);
    v127 = (char *)&v131 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v128 + 16))(v127);
    v129 = specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)((uint64_t)v127, &v170, &v161, &v153, v120, v122, v123, v124);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    v130 = v150;
    v150[3] = v121;
    v130[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
    swift_release();
    swift_release();
    *v130 = v129;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
    return swift_release();
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.device);
  v32 = v13;
  v33 = v145;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v20, v144, v145);
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v144 = v30;
    v38 = v37;
    v182 = v37;
    *(_DWORD *)v36 = 134218242;
    *(_QWORD *)&v179 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2080;
    v140 = v32;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v39 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v179 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v182);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v20, v33);
    _os_log_impl(&dword_248CAA000, v34, v35, "Using prompt lookup with %ld step(s) for request %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    v41 = v38;
    v30 = v144;
    MEMORY[0x2495AAF60](v41, -1, -1);
    MEMORY[0x2495AAF60](v36, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v33);
  }

  v54 = (void (*)(uint64_t *__return_ptr, __int128 *))v147;
  v55 = v146;
  v56 = v185;
  v57 = type metadata accessor for PromptLookupLanguageModel();
  swift_allocObject();
  PromptLookupLanguageModel.init()();
  v180 = v57;
  v181 = &protocol witness table for PromptLookupLanguageModel;
  *(_QWORD *)&v179 = v58;
  v54(&v182, &v179);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
  v54((uint64_t *)&v179, v55);
  v153 = v30;
  v154 = 0;
  v155 = 1;
  v156 = 0;
  v157 = 1;
  v158 = 0;
  v159 = 0;
  v160 = 1;
  v59 = v149;
  swift_beginAccess();
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v59, (uint64_t)&v170);
  v60 = getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v152, v142, v56);
  v61 = type metadata accessor for TwoStageSpeculativeDecoder();
  v62 = swift_allocObject();
  v63 = v183;
  v64 = (uint64_t)v184;
  v65 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v182, v183);
  MEMORY[0x24BDAC7A8](v65);
  v67 = (char *)&v131 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v68 + 16))(v67);
  v69 = specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)((uint64_t)v67, &v179, &v153, &v170, v60, v62, v63, v64);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v182);
  v70 = v150;
  v150[3] = v61;
  v70[4] = (uint64_t)&protocol witness table for TwoStageSpeculativeDecoder;
  result = swift_release();
  *v70 = v69;
  return result;
}

uint64_t getter of stopTokenID #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    v3 = OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(*(_QWORD *)(a3 + 72));
    swift_beginAccess();
    *(_QWORD *)(a1 + 16) = v3;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return v3;
}

void closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1@<X0>, uint8_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13[5];

  OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)(a1, a2, *(uint8_t **)(a3 + 72), v13);
  if (v6)
  {
    *a5 = v6;
  }
  else
  {
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v13, (uint64_t)v12);
    type metadata accessor for MaskedLanguageModel();
    v10 = swift_allocObject();
    swift_retain();
    v11 = specialized MaskedLanguageModel.init(_:_:)(v12, a4, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a6 = v11;
  }
}

uint64_t OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
  OUTLINED_FUNCTION_237_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  Overridable.wrappedValue.getter();
  if (v33)
  {
    if (one-time initialization token for device != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_15_4();
    v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.device);
    swift_bridgeObjectRetain_n();
    Logger.logObject.getter();
    v5 = OUTLINED_FUNCTION_83_0();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v6 = 136315138;
      v7 = OUTLINED_FUNCTION_57_0();
      OUTLINED_FUNCTION_189(v7, v8);
      OUTLINED_FUNCTION_1_1();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_26_5();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v4, v5, "Read stop token from overrides %s", v6);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_19_6();
    v12 = OUTLINED_FUNCTION_180_0();
    OUTLINED_FUNCTION_58_0();
  }
  else if (!a1
         || (v9 = specialized Dictionary.subscript.getter(0x6B6F745F706F7473, 0xEA00000000006E65, a1), v11 == -1))
  {
    if (one-time initialization token for device != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_15_4();
    v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.device);
    Logger.logObject.getter();
    v19 = OUTLINED_FUNCTION_83_0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v20 = 136315138;
      v21 = OUTLINED_FUNCTION_230_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v23);
      OUTLINED_FUNCTION_1_1();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v18, v19, "Using default stop token %s", v20);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_230_0();
    return dispatch thunk of TokenizerRunner.tokenID(forText:)();
  }
  else
  {
    v12 = v9;
    if ((v11 & 1) != 0)
    {
      v24 = v10;
      outlined copy of MetadataSpecialToken(v9, v10, 1);
      if (one-time initialization token for device != -1)
        swift_once();
      v25 = OUTLINED_FUNCTION_15_4();
      v26 = __swift_project_value_buffer(v25, (uint64_t)static Log.device);
      OUTLINED_FUNCTION_87_2();
      OUTLINED_FUNCTION_87_2();
      Logger.logObject.getter();
      v27 = OUTLINED_FUNCTION_83_0();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v28 = 136315138;
        v29 = OUTLINED_FUNCTION_87_2();
        OUTLINED_FUNCTION_189(v29, v30);
        OUTLINED_FUNCTION_1_1();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_22_8();
        outlined consume of MetadataSpecialToken(v12, v24, 1);
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v26, v27, "Found string value of stop token in model catalog %s", v28);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_22_8();

      v31 = OUTLINED_FUNCTION_180_0();
      OUTLINED_FUNCTION_22_8();
      return v31;
    }
    else
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v13 = OUTLINED_FUNCTION_15_4();
      __swift_project_value_buffer(v13, (uint64_t)static Log.device);
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v16 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v14, v15, "Found int value of stop token in model catalog %ld", v16);
        OUTLINED_FUNCTION_0_1();
      }

    }
  }
  return v12;
}

void OnDeviceInferenceContextFactory.createLanguageModel(fromConstraints:tokenizer:specialTokensMap:)(uint64_t a1@<X0>, uint8_t *a2@<X1>, uint8_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  _BOOL4 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int EnumTagSinglePayload;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  uint64_t v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint8_t *v149;
  char *v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v149 = a3;
  *(_QWORD *)&v151 = a1;
  v135 = a4;
  v5 = type metadata accessor for TokenGenerationError();
  v146 = *(_QWORD *)(v5 - 8);
  v147 = v5;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_31_0();
  v139 = v7;
  OUTLINED_FUNCTION_169_0();
  v134 = type metadata accessor for GuidedGenerationConstraints();
  v133 = *(_QWORD *)(v134 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v9);
  v132 = (char *)&v127 - v10;
  OUTLINED_FUNCTION_169_0();
  v11 = (_QWORD *)type metadata accessor for Grammar();
  v130 = *(v11 - 1);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v13);
  v140 = (uint64_t)&v127 - v14;
  OUTLINED_FUNCTION_169_0();
  v15 = type metadata accessor for TokenGenerationError.Context();
  v144 = *(_QWORD *)(v15 - 8);
  v145 = v15;
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_31_0();
  v143 = v17;
  OUTLINED_FUNCTION_169_0();
  type metadata accessor for Schema();
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_31_0();
  v137 = v19;
  OUTLINED_FUNCTION_169_0();
  v20 = type metadata accessor for GenerationSchema();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v127 - v23;
  v25 = type metadata accessor for Constraints();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_32_0();
  v141 = v30;
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_112_2();
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v127 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v152 = (uint64_t)&v127 - v36;
  v142 = (uint64_t)v11;
  __swift_storeEnumTagSinglePayload((uint64_t)&v127 - v36, 1, 1, (uint64_t)v11);
  v37 = (uint64_t)v149;
  v149 = a2;
  v38 = (void *)OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(v37);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 16))(v28, v151, v25);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  if (v39 == *MEMORY[0x24BEB80C8])
  {
    *(_QWORD *)&v151 = v38;
    OUTLINED_FUNCTION_72_2(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96));
    OUTLINED_FUNCTION_48_0((uint64_t)v24, (uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    *(_OWORD *)&v40 = (unsigned __int128)GenerationSchema.extractPrefixes()();
    if (v40)
    {
      v42 = v40;
      v43 = v41;
      v150 = v24;
      swift_retain();
      v44 = v148;
      v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTm(v42);
      v128 = v21;
      if (!v44)
      {
        v46 = v45;
        OUTLINED_FUNCTION_206_0();
        v107 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SaySiGsAE_pTg5248_s24TokenGenerationInference08OnDeviceC14ContextFactoryC19createLanguageModel15fromConstraints9tokenizer16specialTokensMapAA013DeterministiciJ8Protocol_p0aB00L0O_0aB4Core15TokenizerRunnerCSDySSAA015MetadataSpecialA0OGSgtKFSaySiGSSKcANcfu_ASSSKcfu0_0eF4Core15TokenizerRunnerCTf1cn_nTm(v43);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        if (one-time initialization token for device != -1)
          swift_once();
        v108 = OUTLINED_FUNCTION_15_4();
        v109 = __swift_project_value_buffer(v108, (uint64_t)static Log.device);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        Logger.logObject.getter();
        v110 = OUTLINED_FUNCTION_111();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = OUTLINED_FUNCTION_4_11();
          v146 = OUTLINED_FUNCTION_4_11();
          *(_QWORD *)&v153 = v146;
          *(_DWORD *)v111 = 136315394;
          v148 = 0;
          OUTLINED_FUNCTION_57_0();
          v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
          v147 = v20;
          v113 = v112;
          v114 = MEMORY[0x2495A9BC8](v46, v112);
          v116 = v115;
          OUTLINED_FUNCTION_58_0();
          v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, (uint64_t *)&v153);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_19_6();
          swift_bridgeObjectRelease();
          *(_WORD *)(v111 + 12) = 2080;
          v117 = OUTLINED_FUNCTION_52();
          v118 = MEMORY[0x2495A9BC8](v117, v113);
          v120 = v119;
          swift_bridgeObjectRelease();
          v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, (uint64_t *)&v153);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_19_6();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_248CAA000, v109, v110, "Building PrefixGuidedLanguageModel\nLegal: %s\nIllegal: %s", (uint8_t *)v111, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }

        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_19_6();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        v121 = OUTLINED_FUNCTION_2_0();
        *(_OWORD *)(v121 + 16) = xmmword_248D75A50;
        *(_QWORD *)(v121 + 32) = v151;
        v122 = dispatch thunk of TokenizerRunner.vocabularyCount.getter();
        PrefixGuidedLanguageModel.init(allowedPrefixes:illegalPrefixes:stopTokenIDs:vocabSize:)(v46, v107, v121, v122, (uint64_t)&v153);
        v123 = v154;
        v124 = v155;
        v151 = v153;
        v125 = v135;
        v135[3] = (uint64_t)&type metadata for PrefixGuidedLanguageModel;
        v125[4] = (uint64_t)&protocol witness table for PrefixGuidedLanguageModel;
        v126 = OUTLINED_FUNCTION_2_0();
        *v125 = v126;
        *(_OWORD *)(v126 + 16) = v151;
        *(_QWORD *)(v126 + 32) = v123;
        *(_QWORD *)(v126 + 40) = v124;
        OUTLINED_FUNCTION_184_0((uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
        v86 = v152;
        goto LABEL_46;
      }
      if (one-time initialization token for device != -1)
        swift_once();
      v47 = OUTLINED_FUNCTION_15_4();
      __swift_project_value_buffer(v47, (uint64_t)static Log.device);
      OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_5_1();
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_25_0(v49))
      {
        v50 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_QWORD *)&v151 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v50 = 138412290;
        v149 = v50 + 4;
        OUTLINED_FUNCTION_5_1();
        v51 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v153 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_QWORD *)v151 = v51;
        OUTLINED_FUNCTION_3_3();
        OUTLINED_FUNCTION_3_3();
        _os_log_impl(&dword_248CAA000, v48, (os_log_type_t)v26, "Failed to tokenize schema prefixes: %@", v50, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_3_3();
      OUTLINED_FUNCTION_3_3();

      *(_QWORD *)&v153 = 0;
      *((_QWORD *)&v153 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(75);
      OUTLINED_FUNCTION_200();
      OUTLINED_FUNCTION_311();
      String.append(_:)(v87);
      v88 = MEMORY[0x24BEE0D00];
      v89._countAndFlagsBits = MEMORY[0x2495A9BC8](v42, MEMORY[0x24BEE0D00]);
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_311();
      v90._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v90);
      v91._countAndFlagsBits = MEMORY[0x2495A9BC8](v43, v88);
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_194_0();
      v93 = v144;
      v92 = v145;
      v94 = v139;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16))(v139, v21, v145);
      v96 = v146;
      v95 = v147;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v146 + 104))(v94, *MEMORY[0x24BEB8068], v147);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
      OUTLINED_FUNCTION_81_0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v97, v94, v95);
      swift_willThrow();
      OUTLINED_FUNCTION_3_3();
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v95);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v21, v92);
      OUTLINED_FUNCTION_184_0((uint64_t)v150, *(uint64_t (**)(uint64_t, uint64_t))(v128 + 8));
      goto LABEL_35;
    }
    if (one-time initialization token for device != -1)
      swift_once();
    v64 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v64, (uint64_t)static Log.device);
    v65 = OUTLINED_FUNCTION_111();
    if (OUTLINED_FUNCTION_25_0(v65))
    {
      *(_WORD *)OUTLINED_FUNCTION_68_0() = 0;
      OUTLINED_FUNCTION_136_0(&dword_248CAA000, v66, v67, "Building grammar from schema");
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_48_0(v136, (uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    Schema.init(type:)();
    Grammar.init(schema:)();
    OUTLINED_FUNCTION_184_0((uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    v58 = v152;
LABEL_27:
    outlined destroy of LogitPresampler?(v58, &demangling cache variable for type metadata for Grammar?);
    v68 = v142;
    __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v142);
    outlined init with take of Grammar?((uint64_t)v35, v58);
    v69 = v141;
    outlined init with copy of Grammar?(v58, v141, &demangling cache variable for type metadata for Grammar?);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v69, 1, v68);
    v11 = (_QWORD *)v151;
    if (EnumTagSinglePayload != 1)
    {
      v78 = v130;
      v79 = v140;
      OUTLINED_FUNCTION_48_0(v140, v69, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 32));
      OUTLINED_FUNCTION_48_0(v129, v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 16));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v80 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v80 + 16) = xmmword_248D75A50;
      *(_QWORD *)(v80 + 32) = v11;
      swift_retain();
      v81 = (uint64_t)v132;
      GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)();
      v82 = v131;
      OUTLINED_FUNCTION_251_0(v131, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 16));
      v83 = type metadata accessor for GrammarGuidedLanguageModel();
      swift_allocObject();
      GrammarGuidedLanguageModel.init(constraints:)(v82);
      v84 = v135;
      v135[3] = v83;
      v84[4] = (uint64_t)&protocol witness table for GrammarGuidedLanguageModel;
      *v84 = v85;
      OUTLINED_FUNCTION_192_0();
      v86 = v152;
      OUTLINED_FUNCTION_184_0(v140, *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8));
LABEL_46:
      v77 = v86;
      goto LABEL_47;
    }
    outlined destroy of LogitPresampler?(v69, &demangling cache variable for type metadata for Grammar?);
    if (one-time initialization token for device != -1)
      swift_once();
    v71 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v71, (uint64_t)static Log.device);
    v72 = OUTLINED_FUNCTION_244_0();
    if (OUTLINED_FUNCTION_88_1(v72))
    {
      *(_WORD *)OUTLINED_FUNCTION_68_0() = 0;
      OUTLINED_FUNCTION_61_5(&dword_248CAA000, v73, v74, "No valid constraints provided");
      OUTLINED_FUNCTION_0_1();
    }
    goto LABEL_32;
  }
  if (v39 == *MEMORY[0x24BEB80D0])
  {
    *(_QWORD *)&v151 = v38;
    OUTLINED_FUNCTION_72_2(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96));
    if (one-time initialization token for device != -1)
      swift_once();
    v52 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v52, (uint64_t)static Log.device);
    v53 = OUTLINED_FUNCTION_111();
    v54 = OUTLINED_FUNCTION_25_0(v53);
    v21 = v148;
    v55 = v138;
    if (v54)
    {
      *(_WORD *)OUTLINED_FUNCTION_68_0() = 0;
      OUTLINED_FUNCTION_136_0(&dword_248CAA000, v56, v57, "Building grammar from grammar definition");
      OUTLINED_FUNCTION_0_1();
    }

    Grammar.init(backusNaurForm:prependSpaceToRootRule:)();
    if (v21)
    {
LABEL_35:
      v77 = v152;
      goto LABEL_47;
    }
    v35 = v55;
    v58 = v152;
    goto LABEL_27;
  }
  if (v39 == *MEMORY[0x24BEB80C0])
  {
    OUTLINED_FUNCTION_72_2(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 96));
    swift_bridgeObjectRelease();
    if (one-time initialization token for device != -1)
      swift_once();
    v59 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_9_5(v59, (uint64_t)static Log.device);
    v60 = OUTLINED_FUNCTION_244_0();
    v61 = OUTLINED_FUNCTION_88_1(v60);
    v58 = v152;
    if (v61)
    {
      *(_WORD *)OUTLINED_FUNCTION_68_0() = 0;
      OUTLINED_FUNCTION_61_5(&dword_248CAA000, v62, v63, "partialGrammar not support by inference provider. Use .grammar");
      OUTLINED_FUNCTION_0_1();
    }
LABEL_32:

    OUTLINED_FUNCTION_200();
    OUTLINED_FUNCTION_311();
    OUTLINED_FUNCTION_194_0();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
    OUTLINED_FUNCTION_81_0();
    v76 = OUTLINED_FUNCTION_251_0(v75, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 16));
    OUTLINED_FUNCTION_148(v76, *MEMORY[0x24BEB8068]);
    swift_willThrow();
    OUTLINED_FUNCTION_192_0();
    v77 = v58;
LABEL_47:
    outlined destroy of LogitPresampler?(v77, &demangling cache variable for type metadata for Grammar?);
    return;
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v98 = OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_9_5(v98, (uint64_t)static Log.device);
  v99 = OUTLINED_FUNCTION_244_0();
  if (OUTLINED_FUNCTION_88_1(v99))
  {
    *(_WORD *)OUTLINED_FUNCTION_68_0() = 0;
    OUTLINED_FUNCTION_61_5(&dword_248CAA000, v100, v101, "Unknown constriant type provided");
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_311();
  v102 = v143;
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8098], MEMORY[0x24BEB80A0]);
  OUTLINED_FUNCTION_81_0();
  v104 = v144;
  v103 = v145;
  v106 = OUTLINED_FUNCTION_251_0(v105, v102, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 16));
  OUTLINED_FUNCTION_148(v106, *MEMORY[0x24BEB8068]);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
  outlined destroy of LogitPresampler?(v152, &demangling cache variable for type metadata for Grammar?);
  OUTLINED_FUNCTION_72_2(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
}

uint64_t OnDeviceInferenceContextFactory.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return v0;
}

uint64_t OnDeviceInferenceContextFactory.__deallocating_deinit()
{
  OnDeviceInferenceContextFactory.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceContextFactory()
{
  return objc_opt_self();
}

uint64_t outlined init with take of Grammar?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_248D2DC34()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined consume of MetadataSpecialToken?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined consume of MetadataSpecialToken(result, a2, a3 & 1);
  return result;
}

uint64_t outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of OnDeviceInferenceAssetObjectTokenizer?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_248D2DD14()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t specialized OnDeviceInferenceContext.init(decoder:tokenizer:tokenIDToTextConverter:inferenceAssetObjects:specialTokensMap:localizationMetadata:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;

  v14 = type metadata accessor for TokenIDToTextConverter();
  v15 = MEMORY[0x24BEB8A18];
  *(_QWORD *)(a7 + 88) = v14;
  *(_QWORD *)(a7 + 96) = v15;
  *(_QWORD *)(a7 + 64) = a3;
  *(_QWORD *)(a7 + 128) = 0;
  *(_BYTE *)(a7 + 136) = 1;
  outlined init with take of LogitCollection(a1, a7 + 16);
  *(_QWORD *)(a7 + 56) = a2;
  *(_QWORD *)(a7 + 104) = a4;
  *(_QWORD *)(a7 + 112) = a5;
  *(_QWORD *)(a7 + 120) = a6;
  return a7;
}

uint64_t partial apply for buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 48), *(__int128 **)(v3 + 56), a3, *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
}

uint64_t sub_248D2DDF4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, *(uint8_t **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a2, a3);
}

uint64_t specialized MaskedLanguageModel.init(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[5];

  v14[3] = type metadata accessor for E5TransformerLanguageModel();
  v14[4] = &protocol witness table for E5TransformerLanguageModel;
  v14[0] = a2;
  *(_QWORD *)(a3 + 16) = MEMORY[0x24BEE4AF8];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)a1, a3 + 24);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v14, a3 + 64);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v9 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v11 + 16) = v10 + 1;
  v12 = (_QWORD *)(v11 + 24 * v10);
  v12[4] = v8;
  v12[5] = 0;
  v12[6] = v9;
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return a3;
}

uint64_t specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[2];
  _QWORD v21[5];

  v21[3] = type metadata accessor for PromptLookupLanguageModel();
  v21[4] = &protocol witness table for PromptLookupLanguageModel;
  v21[0] = a1;
  *(_QWORD *)(a6 + 280) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a6 + 344) = 0;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v21, a6 + 16);
  swift_beginAccess();
  *(_QWORD *)(a6 + 56) = *(_QWORD *)(a1 + 16);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)a2, a6 + 64);
  v12 = a2[3];
  v13 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  *(_QWORD *)(a6 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v14 = a3[2];
  v15 = *a3;
  v16 = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a6 + 112) = *(_OWORD *)a3;
  *(_OWORD *)(a6 + 128) = v16;
  *(_QWORD *)(a6 + 141) = *(_QWORD *)((char *)a3 + 29);
  *(_QWORD *)(a6 + 272) = v15;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)a4, a6 + 152);
  v17 = a4[3];
  v18 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v17);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 32))(v20, v17, v18);
  outlined init with take of LogitCollection(v20, a6 + 192);
  type metadata accessor for TopK();
  static TopK.makeTopKPresampler(k:)(v14, a6 + 232);
  *(_QWORD *)(a6 + 336) = a5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return a6;
}

void partial apply for closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  closure #1 in closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, *(uint8_t **)(v3 + 24), *(_QWORD *)(v3 + 32), a2, a3);
}

void outlined init with copy of Grammar?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_49();
}

void closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)partial apply(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  partial apply for closure #1 in buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(a1, a2, a3);
}

void OUTLINED_FUNCTION_1_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = v25[144];
  *(_QWORD *)(v26 - 184) = v25[145];
  *(_QWORD *)(v26 - 176) = v27;
  v28 = v25[142];
  *(_QWORD *)(v26 - 160) = v25[143];
  *(_QWORD *)(v26 - 152) = v28;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a25, (uint64_t)(v25 + 77));
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_12(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 144));
}

void OUTLINED_FUNCTION_7_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(v11 - 152) = a4;
  v12 = a4 + 48 * v4;
  v13 = *(_QWORD *)(v11 - 184);
  *(_QWORD *)(v12 + 32) = v5;
  *(_QWORD *)(v12 + 40) = v13;
  *(_BYTE *)(v12 + 48) = v7 & 1;
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v11 - 176);
  *(_DWORD *)(v12 + 64) = v10;
  *(_BYTE *)(v12 + 68) = BYTE4(v10) & 1;
  *(_BYTE *)(v12 + 69) = BYTE5(v10) & 1;
  *(_BYTE *)(v12 + 70) = BYTE6(v10) & 1;
  *(_DWORD *)(v12 + 72) = v6;
  *(_BYTE *)(v12 + 76) = ((v6 | (unint64_t)(v8 << 32)) >> 32) & 1;
}

BOOL OUTLINED_FUNCTION_8_6(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 144));
}

void OUTLINED_FUNCTION_10_10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = *(_QWORD *)(v0 + 1424);
  *(_QWORD *)(v1 - 144) = 0;
  *(_QWORD *)(v1 - 136) = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
}

void OUTLINED_FUNCTION_13_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v4 - 144) = a1;
  *(_QWORD *)(v4 - 136) = (v1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
}

uint64_t OUTLINED_FUNCTION_14_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  return specialized buildDecoder #1 (_:) in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(*(_QWORD *)(*(_QWORD *)(v34 - 160) + 1112), *(_QWORD *)(*(_QWORD *)(v34 - 160) + 1256), a31, *(_QWORD *)(*(_QWORD *)(v34 - 160) + 1384), a34, *(_QWORD *)(v34 - 168), *(_QWORD *)(v34 - 152), a20);
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_18_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 96))(*(_QWORD *)(v2 + 1152), v0);
}

uint64_t OUTLINED_FUNCTION_19_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

void OUTLINED_FUNCTION_20_6()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 144) = 0;
  *(_QWORD *)(v0 - 136) = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
}

_QWORD *OUTLINED_FUNCTION_21_5()
{
  uint64_t v0;
  _QWORD *result;

  result = __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 1112) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 1112) + 40));
  *(_QWORD *)(v0 + 1496) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  outlined consume of MetadataSpecialToken?(v0, v1, v2);
  return outlined consume of MetadataSpecialToken?(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_24_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

void OUTLINED_FUNCTION_25_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

void OUTLINED_FUNCTION_26_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return CompletePromptRequest.parameters.getter();
}

void OUTLINED_FUNCTION_30_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v26, a26);
}

void OUTLINED_FUNCTION_31_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t **a34)
{
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  closure #6 in OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v36, v37, v34, v35, a34);
}

uint64_t OUTLINED_FUNCTION_32_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_35_5()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_37_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v6 + 1280);
  *(_QWORD *)(a4 + 16) = v5;
  return outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v8, a4+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v4);
}

id OUTLINED_FUNCTION_40_3()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, (SEL)(v2 + 1262), v0);
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_43_5(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  outlined init with take of LogitCollection(a1, a25);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a25, a15);
}

void OUTLINED_FUNCTION_44_3()
{
  JUMPOUT(0x2495A9A78);
}

uint64_t OUTLINED_FUNCTION_45_4()
{
  char v0;
  uint64_t v1;

  return GreedySampling.__allocating_init(randomSeed:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_46_5()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_47_5(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_48_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_49_4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  a1[2] = v35;
  a1[3] = v34;
  a1[4] = v36;
  a1[5] = v38;
  a1[6] = v37;
  a1[7] = a34;
  v40 = *(_QWORD *)(v39 - 152);
  a1[8] = *(_QWORD *)(v39 - 168);
  a1[9] = v40;
  return type metadata accessor for TokenHealingDecoder();
}

uint64_t OUTLINED_FUNCTION_50_5()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_53_4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_storeEnumTagSinglePayload(v1, a1 ^ 1u, 1, v2);
  __swift_destroy_boxed_opaque_existential_1(v3);
  return __swift_getEnumTagSinglePayload(v1, 1, v2);
}

uint64_t OUTLINED_FUNCTION_54_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;

  return specialized OnDeviceInferenceContext.init(decoder:tokenizer:tokenIDToTextConverter:inferenceAssetObjects:specialTokensMap:localizationMetadata:)(v34, a31, a29, a33, v35, v33, a1);
}

uint64_t OUTLINED_FUNCTION_55_3(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_59_3()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_61_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_62_5()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = *(_QWORD *)(v0 + 1424);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_63_3()
{
  uint64_t v0;

  return outlined init with take of OnDeviceInferenceAssetObjectE5Runner(*(_QWORD *)(v0 + 1216), *(_QWORD *)(v0 + 1256));
}

uint64_t OUTLINED_FUNCTION_64_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = v1 + 1008;
  return specialized Collection.first.getter(v0, *(_QWORD *)(v1 + 1216));
}

uint64_t OUTLINED_FUNCTION_65_3()
{
  uint64_t v0;

  return outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v0);
}

uint64_t OUTLINED_FUNCTION_66_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_68_2()
{
  char v0;
  void *v1;
  uint64_t v2;
  double v3;

  return TopK.__allocating_init(k:temperature:randomSeed:)(v1, v2, v0, v3);
}

uint64_t OUTLINED_FUNCTION_69_3()
{
  char v0;
  uint64_t v1;
  double v2;
  double v3;

  return NucleusSampling.__allocating_init(p:temperature:randomSeed:)(v1, v0, v3, v2);
}

uint64_t OUTLINED_FUNCTION_71_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v0+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v2, *(_QWORD *)(v1 + 1272));
}

uint64_t OUTLINED_FUNCTION_72_2@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_74_2()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_75_2(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;

  *v15 = a2;
  *(_QWORD *)(v17 - 152) = v14;
  *(_QWORD *)(v17 - 144) = a1;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v16, a14);
}

BOOL OUTLINED_FUNCTION_77_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_80_2(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  float *v23;

  *v23 = a1;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v22, a22);
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_87_2()
{
  uint64_t v0;
  uint64_t v1;

  return outlined copy of MetadataSpecialToken(v0, v1, 1);
}

BOOL OUTLINED_FUNCTION_88_1(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_89_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_90_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_92_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v1 - 184) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v1 - 176) = v2;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1416))(*(_QWORD *)(v0 + 1320), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1296));
}

uint64_t OUTLINED_FUNCTION_97_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  *a24 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_98_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 - 160) + 1032) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_99_2()
{
  return CompletePromptRequest.parameters.getter();
}

uint64_t OUTLINED_FUNCTION_100_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return CompletePromptRequest.parameters.getter();
}

uint64_t OUTLINED_FUNCTION_102_2()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_103_2()
{
  return static os_log_type_t.default.getter();
}

uint64_t OUTLINED_FUNCTION_104_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1416))(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1296));
}

uint64_t OUTLINED_FUNCTION_106_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *(_QWORD **)(v3 - 168);
  v4[5] = v2;
  v4[6] = a2;
  v4[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_107_2(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_108_2()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_109_1()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_110_1()
{
  uint64_t v0;

  return outlined consume of OnDeviceInferenceAssetObjectTokenizer?(*(_QWORD *)(*(_QWORD *)(v0 - 160) + 176), *(_QWORD *)(*(_QWORD *)(v0 - 160) + 184));
}

void OUTLINED_FUNCTION_111_2()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_112_2()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_113_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1000) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_116_1()
{
  return type metadata accessor for TokenIDToTextConverter();
}

void OUTLINED_FUNCTION_117_1(uint64_t a1)
{
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_118_1()
{
  return type metadata accessor for TokenizerRunnerPrefixMatchingTextProcessor();
}

uint64_t OUTLINED_FUNCTION_119_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_120_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_121_0()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_124_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1072) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 160) + 1264);
  *(_QWORD *)(v0 + 16) = v1;
  return outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v6, v0 + v4 + v2 * v3);
}

void OUTLINED_FUNCTION_126_1()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_127_1()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t OUTLINED_FUNCTION_128_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_129_1()
{
  uint64_t v0;

  return outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v0);
}

uint64_t OUTLINED_FUNCTION_130_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_131()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 88))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_133()
{
  uint64_t v0;

  return outlined init with take of OnDeviceInferenceAssetObjectE5Runner(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1288));
}

uint64_t OUTLINED_FUNCTION_134()
{
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 + 1152), v0);
}

void OUTLINED_FUNCTION_136_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_138_0()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_142()
{
  return TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)();
}

uint64_t OUTLINED_FUNCTION_143_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_147_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 200) + 104))(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_150_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 168) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  return SamplingStrategy.choice.getter();
}

uint64_t OUTLINED_FUNCTION_152_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_153()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_156()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_157()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_158_0()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_160_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_161_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_162_0()
{
  return type metadata accessor for OnDeviceInferenceContext();
}

uint64_t OUTLINED_FUNCTION_164_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;

  return a9(v9, v10);
}

uint64_t OUTLINED_FUNCTION_165()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(v0, v1);
}

void OUTLINED_FUNCTION_166(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v28, a28);
}

uint64_t OUTLINED_FUNCTION_169_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_170_0()
{
  unint64_t v0;
  uint64_t v1;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v1 - 168), v0, (uint64_t *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_171_0()
{
  return type metadata accessor for GreedySampling();
}

uint64_t OUTLINED_FUNCTION_172_0()
{
  return type metadata accessor for SamplingStrategy.Choice();
}

uint64_t OUTLINED_FUNCTION_174()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_175()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 1424))(*(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1296));
}

uint64_t OUTLINED_FUNCTION_176_0()
{
  return swift_deallocUninitializedObject();
}

uint64_t OUTLINED_FUNCTION_177_0(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>), _QWORD *))
{
  uint64_t v2;

  return TokenHealingDecoder.init(processor:buildDecoder:)(v2 - 144, a2);
}

uint64_t OUTLINED_FUNCTION_178_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v0, v3);
}

uint64_t OUTLINED_FUNCTION_179()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_180_0()
{
  return dispatch thunk of TokenizerRunner.tokenID(forText:)();
}

uint64_t OUTLINED_FUNCTION_181_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_182_0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 184) = v0;
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_184_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_185_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = v2;
  *(_QWORD *)(v3 - 112) = a2;
  *(_QWORD *)(v3 - 144) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_186_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_187_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.init(tokenizer:)(a31);
}

uint64_t OUTLINED_FUNCTION_188_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 176))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_189(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t v3;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, (uint64_t *)va);
}

void OUTLINED_FUNCTION_191_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v31, a31);
}

uint64_t OUTLINED_FUNCTION_192_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_193_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_194_0()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_195_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_196_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v0, v3);
}

uint64_t OUTLINED_FUNCTION_198_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 152))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_201()
{
  return type metadata accessor for NucleusSampling();
}

uint64_t OUTLINED_FUNCTION_203_0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(v3);
  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_204_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_205()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_206_0()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_207()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_208_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_209_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_210_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_211_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_213_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_214_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_215_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_216()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_217()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_218_0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, _QWORD);

  return v1(*(_QWORD *)(v0 + 1312), *(_QWORD *)(v0 + 1296));
}

id OUTLINED_FUNCTION_220_0()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)(v0 + 32) + 24);
}

id OUTLINED_FUNCTION_224_0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_226_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_229_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_230_0()
{
  return 0x3E626F653CLL;
}

void OUTLINED_FUNCTION_233_0()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_234_0()
{
  return CompletePromptRequest.parameters.getter();
}

uint64_t OUTLINED_FUNCTION_235_0()
{
  return SamplingParameters.strategy.getter();
}

uint64_t OUTLINED_FUNCTION_237_0()
{
  return type metadata accessor for OnDeviceInferenceOverrides();
}

uint64_t OUTLINED_FUNCTION_238_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_240_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_241_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of OnDeviceInferenceAssetObjectE5Runner(v0, v1);
}

uint64_t OUTLINED_FUNCTION_243_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of OnDeviceInferenceAssetObjectE5Runner(v1, *(_QWORD *)(v0 + 1248));
}

uint64_t OUTLINED_FUNCTION_244_0()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_245_0()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  uint64_t v1;

  return v0(*(_QWORD *)(v1 + 1320), *(_QWORD *)(v1 + 1296));
}

uint64_t OUTLINED_FUNCTION_246_0()
{
  return type metadata accessor for TopK();
}

uint64_t OUTLINED_FUNCTION_247_0()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_248_0()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
}

void OUTLINED_FUNCTION_249_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Grammar?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_250_0()
{
  uint64_t v0;

  return outlined destroy of OnDeviceInferenceAssetObjectE5Runner(v0);
}

uint64_t OUTLINED_FUNCTION_251_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_252_0(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 176) = v1 + 1;
}

uint64_t OUTLINED_FUNCTION_254_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_255_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void OUTLINED_FUNCTION_256_0()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
}

uint64_t OUTLINED_FUNCTION_257_0()
{
  return swift_task_dealloc();
}

char *initializeBufferWithCopyOfBuffer for OnDeviceInferenceOverrides(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  void (*v25)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    v8 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = &a1[v14];
    v16 = (char *)a2 + v14;
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v25(v15, v16, v17);
    v13(&a1[a3[8]], (char *)a2 + a3[8], v12);
    v18 = a3[9];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v22(v19, v20, v21);
    v8(&a1[a3[10]], (uint64_t *)((char *)a2 + a3[10]), v7);
    v8(&a1[a3[11]], (uint64_t *)((char *)a2 + a3[11]), v7);
    v8(&a1[a3[12]], (uint64_t *)((char *)a2 + a3[12]), v7);
    v8(&a1[a3[13]], (uint64_t *)((char *)a2 + a3[13]), v7);
    v25(&a1[a3[14]], (char *)a2 + a3[14], v17);
    v8(&a1[a3[15]], (uint64_t *)((char *)a2 + a3[15]), v7);
    v25(&a1[a3[16]], (char *)a2 + a3[16], v17);
    v25(&a1[a3[17]], (char *)a2 + a3[17], v17);
    v22(&a1[a3[18]], (char *)a2 + a3[18], v21);
    v25(&a1[a3[19]], (char *)a2 + a3[19], v17);
  }
  return a1;
}

uint64_t destroy for OnDeviceInferenceOverrides(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + a2[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v15(v9, v10);
  v8(a1 + a2[8], v7);
  v11 = a1 + a2[9];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v5(a1 + a2[10], v4);
  v5(a1 + a2[11], v4);
  v5(a1 + a2[12], v4);
  v5(a1 + a2[13], v4);
  v15(a1 + a2[14], v10);
  v5(a1 + a2[15], v4);
  v15(a1 + a2[16], v10);
  v15(a1 + a2[17], v10);
  v13(a1 + a2[18], v12);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)(a1 + a2[19], v10);
}

uint64_t initializeWithCopy for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v23(v14, v15, v16);
  v12(a1 + a3[8], a2 + a3[8], v11);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v23(a1 + a3[14], a2 + a3[14], v16);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v23(a1 + a3[16], a2 + a3[16], v16);
  v23(a1 + a3[17], a2 + a3[17], v16);
  v21(a1 + a3[18], a2 + a3[18], v20);
  v23(a1 + a3[19], a2 + a3[19], v16);
  return a1;
}

uint64_t assignWithCopy for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v23(v14, v15, v16);
  v12(a1 + a3[8], a2 + a3[8], v11);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24);
  v21(v18, v19, v20);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v23(a1 + a3[14], a2 + a3[14], v16);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v23(a1 + a3[16], a2 + a3[16], v16);
  v23(a1 + a3[17], a2 + a3[17], v16);
  v21(a1 + a3[18], a2 + a3[18], v20);
  v23(a1 + a3[19], a2 + a3[19], v16);
  return a1;
}

uint64_t initializeWithTake for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v23(v14, v15, v16);
  v12(a1 + a3[8], a2 + a3[8], v11);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v23(a1 + a3[14], a2 + a3[14], v16);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v23(a1 + a3[16], a2 + a3[16], v16);
  v23(a1 + a3[17], a2 + a3[17], v16);
  v21(a1 + a3[18], a2 + a3[18], v20);
  v23(a1 + a3[19], a2 + a3[19], v16);
  return a1;
}

uint64_t assignWithTake for OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v23(v14, v15, v16);
  v12(a1 + a3[8], a2 + a3[8], v11);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40);
  v21(v18, v19, v20);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v23(a1 + a3[14], a2 + a3[14], v16);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v23(a1 + a3[16], a2 + a3[16], v16);
  v23(a1 + a3[17], a2 + a3[17], v16);
  v21(a1 + a3[18], a2 + a3[18], v20);
  v23(a1 + a3[19], a2 + a3[19], v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceInferenceOverrides()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D2FD70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  OUTLINED_FUNCTION_2_11();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    OUTLINED_FUNCTION_2_11();
    if (v9)
    {
      v7 = v10;
      v11 = a3[6];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
      OUTLINED_FUNCTION_2_11();
      if (v12)
      {
        v7 = v13;
        v11 = a3[7];
      }
      else
      {
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
        v11 = a3[9];
      }
    }
    v8 = a1 + v11;
  }
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for OnDeviceInferenceOverrides()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D2FE24(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  OUTLINED_FUNCTION_3_10();
  if (v10)
  {
    v8 = v7;
    v9 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    OUTLINED_FUNCTION_3_10();
    if (v10)
    {
      v8 = v11;
      v12 = a4[6];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
      OUTLINED_FUNCTION_3_10();
      if (v13)
      {
        v8 = v14;
        v12 = a4[7];
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
        v12 = a4[9];
      }
    }
    v9 = a1 + v12;
  }
  return __swift_storeEnumTagSinglePayload(v9, a2, a2, v8);
}

uint64_t type metadata accessor for OnDeviceInferenceOverrides()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OnDeviceInferenceOverrides;
  if (!type metadata singleton initialization cache for OnDeviceInferenceOverrides)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for OnDeviceInferenceOverrides()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<String>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Int>);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Bool>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Overridable<String>(319, &lazy cache variable for type metadata for Overridable<Float>);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Overridable<String>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Overridable();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t OnDeviceInferenceOverrides.init()()
{
  Overridable<A>.init(key:)();
  type metadata accessor for OnDeviceInferenceOverrides();
  OUTLINED_FUNCTION_1_9();
  Overridable<A>.init(key:)();
  OUTLINED_FUNCTION_1_9();
  Overridable<A>.init(key:)();
  OUTLINED_FUNCTION_1_9();
  Overridable<A>.init(key:)();
  OUTLINED_FUNCTION_1_9();
  Overridable<A>.init(key:)();
  Overridable<A>.init(key:)();
  Overridable<A>.init(key:)();
  Overridable<A>.init(key:)();
  Overridable<A>.init(key:)();
  Overridable<A>.init(key:)();
  OUTLINED_FUNCTION_0_9();
  Overridable<A>.init(key:)();
  OUTLINED_FUNCTION_0_9();
  OUTLINED_FUNCTION_0_9();
  Overridable<A>.init(key:)();
  return OUTLINED_FUNCTION_0_9();
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  return Overridable<A>.init(key:)();
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return 1717662308;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v11 = *(_QWORD *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    v9 = v8;
    goto LABEL_9;
  }
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t specialized OSAllocatedUnfairLock<A>.withLock<A>(_:)(void (*a1)(uint64_t *__return_ptr), uint64_t a2, os_unfair_lock_s *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  char v7;
  char v9;

  v5 = a3 + 4;
  os_unfair_lock_lock(a3 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v6, a1, &v9);
  os_unfair_lock_unlock(v5);
  if (!v3)
    v7 = v9;
  return v7 & 1;
}

_QWORD *OnDeviceInferenceProvider.__allocating_init()()
{
  uint64_t *v0;

  type metadata accessor for OnDeviceInferenceProviderDataSource();
  v0 = (uint64_t *)OUTLINED_FUNCTION_2_0();
  return specialized OnDeviceInferenceProvider.__allocating_init(dataSource:)(v0);
}

uint64_t OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t State;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  State = type metadata accessor for LoadState();
  v4[8] = State;
  v4[9] = *(_QWORD *)(State - 8);
  v4[10] = OUTLINED_FUNCTION_28_5();
  v4[11] = OUTLINED_FUNCTION_24_4();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

void OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, NSObject *);
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (one-time initialization token for device != -1)
    swift_once();
  v1 = v0[11];
  v2 = v0[8];
  v3 = v0[9];
  v4 = v0[6];
  v5 = OUTLINED_FUNCTION_15_4();
  __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  v6 = *(void (**)(uint64_t, uint64_t, NSObject *))(v3 + 16);
  v6(v1, v4, v2);
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_434();
  v7 = OUTLINED_FUNCTION_176();
  v8 = OUTLINED_FUNCTION_73_1(v7);
  v9 = v0[11];
  v10 = v0[8];
  v11 = v0[9];
  v12 = v0[5];
  if (v8)
  {
    v13 = v0[4];
    v29 = v0[9];
    v14 = OUTLINED_FUNCTION_4_11();
    v30 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v30);
    OUTLINED_FUNCTION_425();
    OUTLINED_FUNCTION_26_5();
    *(_WORD *)(v14 + 12) = 2080;
    v15 = LoadState.rawValue.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
    OUTLINED_FUNCTION_425();
    OUTLINED_FUNCTION_119_0();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v9, v10);
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v2, (os_log_type_t)v4, "transitionAsset called for identifier: %s moving to state %s", (uint8_t *)v14);
    OUTLINED_FUNCTION_89_2();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_61_4(v9, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));

  v6(v0[10], v0[6], v0[8]);
  v17 = OUTLINED_FUNCTION_260();
  v19 = v18(v17);
  if (v19 == *MEMORY[0x24BE68C98])
  {
    v20 = (_QWORD *)swift_task_alloc();
    v0[16] = v20;
    *v20 = v0;
    v20[1] = OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:);
    OUTLINED_FUNCTION_247_1(v0[4]);
    OUTLINED_FUNCTION_157_0();
    OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:)(v21, v22);
  }
  else if (v19 == *MEMORY[0x24BE68C80])
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[7] + 136), *(_QWORD *)(v0[7] + 160));
    v23 = (_QWORD *)swift_task_alloc();
    v0[14] = v23;
    *v23 = v0;
    v23[1] = OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:);
    OUTLINED_FUNCTION_247_1(v0[4]);
    OUTLINED_FUNCTION_157_0();
    OnDeviceInferenceAssetRepository.moveAssetToDynamicState(identifier:)(v24, v25);
  }
  else if (v19 == *MEMORY[0x24BE68C88])
  {
    v26 = (_QWORD *)swift_task_alloc();
    v0[12] = v26;
    *v26 = v0;
    v26[1] = OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:);
    OUTLINED_FUNCTION_247_1(v0[4]);
    OUTLINED_FUNCTION_157_0();
    OnDeviceInferenceProvider.loadAsset(inferenceAssetIdentifier:)(v27, v28);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    OUTLINED_FUNCTION_157_0();
  }
}

uint64_t OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v1 + 104) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t (*v0)(void);

  swift_task_dealloc();
  OUTLINED_FUNCTION_17_0();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
  return OUTLINED_FUNCTION_33(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v1 + 120) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_401_0();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v1 + 136) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_401_0();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_401_0();
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OnDeviceInferenceProvider.loadAsset(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return OUTLINED_FUNCTION_38_2();
}

uint64_t OnDeviceInferenceProvider.loadAsset(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;

  OUTLINED_FUNCTION_126_2();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (one-time initialization token for device != -1)
    swift_once();
  v27 = OUTLINED_FUNCTION_15_4();
  v28 = __swift_project_value_buffer(v27, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  v29 = v28;
  Logger.logObject.getter();
  v30 = OUTLINED_FUNCTION_83_0();
  v31 = OUTLINED_FUNCTION_155_0(v28);
  v32 = *(_QWORD *)(v24 + 88);
  if (v31)
  {
    v33 = *(_QWORD *)(v24 + 80);
    v34 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    a13 = (id)OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v34 = 136315138;
    OUTLINED_FUNCTION_50_1();
    *(_QWORD *)(v24 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, (uint64_t *)&a13);
    OUTLINED_FUNCTION_327();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v29, v30, "Handling load in for asset with identifier %s", v34);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  if (*(_QWORD *)(v24 + 80) == 0xD000000000000017 && *(_QWORD *)(v24 + 88) == 0x8000000248D7FE80
    || (OUTLINED_FUNCTION_245_1() & 1) != 0)
  {
    v35 = *(_QWORD *)(v24 + 96);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 40));
    *(_QWORD *)(v24 + 104) = OUTLINED_FUNCTION_356_0();
    *(_QWORD *)(v24 + 112) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    v36 = *(_QWORD *)(v24 + 24);
    if (v36)
      v37 = *(_QWORD *)(v24 + 16);
    else
      v37 = 0xD000000000000024;
    if (v36)
      v38 = *(_QWORD *)(v24 + 24);
    else
      v38 = 0x8000000248D802B0;
    *(_QWORD *)(v24 + 72) = MEMORY[0x24BEE4B08];
    v39 = (void *)objc_opt_self();
    *(_QWORD *)(v24 + 120) = v39;
    v40 = objc_msgSend(v39, sel_defaultManager);
    v41 = (void *)MEMORY[0x2495A9A78](v37, v38);
    v42 = objc_msgSend(v40, sel_fileExistsAtPath_, v41);

    if (v42)
    {
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 40));
      OUTLINED_FUNCTION_291_0();
      v43 = *(_QWORD *)(v24 + 24);
      if (v43)
        v44 = *(_QWORD *)(v24 + 16);
      else
        v44 = 1634889580;
      if (v43)
        v45 = *(_QWORD *)(v24 + 24);
      else
        v45 = 0xE400000000000000;
      v46 = objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
      v47 = @nonobjc TGIE5AdapterConfigurationObjC.init(adapterType:symbolName:mutableWeightsFilePath:)(0, 0xE000000000000000, v44, v45, v37, v38);
      specialized Set._Variant.insert(_:)(&a13, v47);

      v48 = 1;
    }
    else
    {
      OUTLINED_FUNCTION_63_0();
      v48 = 0;
    }
    *(_QWORD *)(v24 + 128) = v48;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 40));
    OUTLINED_FUNCTION_291_0();
    v50 = *(_QWORD *)(v24 + 16);
    v49 = *(_QWORD *)(v24 + 24);
    v51 = v35;
    if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    {
      v52 = (_QWORD *)(v35 + 16);
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    }
    else
    {
      v52 = (_QWORD *)(v35 + 16);
    }
    if (!v49)
    {
      v49 = 0x8000000248D7FEF0;
      v50 = 0xD00000000000001DLL;
    }
    v53 = *(_QWORD *)(v24 + 96);
    v54 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    *(_QWORD *)(v24 + 136) = @nonobjc TGIE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(v48, v50, v49);
    OUTLINED_FUNCTION_186_1(v53 + 136);
    *(_QWORD *)(v24 + 144) = OUTLINED_FUNCTION_296_0(v55, *(_QWORD *)(v24 + 40));
    __swift_project_boxed_opaque_existential_1(v52, *(_QWORD *)(v51 + 40));
    Overridable.wrappedValue.getter();
    *(_OWORD *)(v24 + 152) = *(_OWORD *)(v24 + 56);
  }
  else
  {
    *(_QWORD *)(v24 + 216) = OUTLINED_FUNCTION_279(*(_QWORD *)(v24 + 96));
  }
  return OUTLINED_FUNCTION_69_4();
}

uint64_t OnDeviceInferenceProvider.loadAsset(inferenceAssetIdentifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = v0[20];
  if (v1)
    v2 = v0[19];
  else
    v2 = 0xD00000000000001ALL;
  if (v1)
    v3 = v0[20];
  else
    v3 = 0x8000000248D7FF10;
  OnDeviceInferenceAssetRepository.loadTokenizerAtPath(path:)(*(Swift::String *)&v2);
  v0[21] = v4;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *(_QWORD *)(v0 + 176) = OUTLINED_FUNCTION_296_0(v2, *(_QWORD *)(v1 + 160));
  *(_OWORD *)(v0 + 16) = xmmword_248D766A0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 45) = 0;
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OnDeviceInferenceAssetRepository.loadE5Runner(modelConfiguration:draftingBehavior:)(*(TGIE5ModelConfigurationObjC **)(v0 + 136), (TokenGenerationInference::DraftingBehavior_optional *)(v0 + 16));
  *(_QWORD *)(v0 + 184) = v1;
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_304_0();
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  unsigned int v10;
  uint64_t (*v11)(void);
  uint64_t result;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE v26[12];
  int v27;
  uint64_t v28;

  OUTLINED_FUNCTION_126_2();
  v1 = *(void **)(v0 + 120);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 96) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 40));
  OUTLINED_FUNCTION_291_0();
  OUTLINED_FUNCTION_366_0();
  if (v2)
    v6 = 0xD000000000000022;
  else
    v6 = v3;
  if (v2)
    v7 = v5 | 0x8000000000000000;
  else
    v7 = v4;
  v8 = objc_msgSend(v1, sel_defaultManager);
  v9 = (void *)MEMORY[0x2495A9A78](v6, v7);
  v10 = objc_msgSend(v8, sel_fileExistsAtPath_, v9);

  if (v10)
  {
    if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v13 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    v14 = OUTLINED_FUNCTION_423();
    *(_QWORD *)(v0 + 192) = @nonobjc TGIE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(v14, v15, v7);
    OUTLINED_FUNCTION_135_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Int>);
    OUTLINED_FUNCTION_368_0();
    v28 = *(_QWORD *)(v0 + 16);
    v27 = *(unsigned __int8 *)(v0 + 24);
    OUTLINED_FUNCTION_135_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
    OUTLINED_FUNCTION_368_0();
    v26[0] = *(_BYTE *)(v0 + 16);
    OUTLINED_FUNCTION_135_1();
    OUTLINED_FUNCTION_314_0();
    if (*(_BYTE *)(v0 + 24))
      v16 = 1;
    else
      v16 = *(_QWORD *)(v0 + 16);
    OUTLINED_FUNCTION_135_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Float>);
    OUTLINED_FUNCTION_368_0();
    v25 = *(unsigned int *)(v0 + 16);
    v17 = *(unsigned __int8 *)(v0 + 20);
    OUTLINED_FUNCTION_135_1();
    OUTLINED_FUNCTION_291_0();
    v18 = *(_BYTE *)(v0 + 16);
    OUTLINED_FUNCTION_135_1();
    result = OUTLINED_FUNCTION_314_0();
    if (v16 < 1)
    {
      __break(1u);
    }
    else
    {
      v19 = *(_DWORD *)(v0 + 16);
      v20 = *(unsigned __int8 *)(v0 + 20);
      if (v27)
        v21 = 2;
      else
        v21 = v28;
      *(_QWORD *)(v0 + 200) = __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 96) + 136), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 160));
      v22 = 1;
      if (v17)
        v23 = 0x100000000;
      else
        v23 = 0;
      v24 = v23 | v25 | ((unint64_t)(v18 & 1) << 48);
      if (!v20)
        v22 = 0;
      *(_QWORD *)(v0 + 16) = v21;
      *(_QWORD *)(v0 + 24) = v26[0] & 1;
      *(_QWORD *)(v0 + 32) = v16;
      *(_QWORD *)(v0 + 40) = v24;
      *(_BYTE *)(v0 + 52) = v22;
      *(_DWORD *)(v0 + 48) = v19;
      return OUTLINED_FUNCTION_69_4();
    }
  }
  else
  {
    OUTLINED_FUNCTION_304_0();
    OUTLINED_FUNCTION_42();
    v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
    return OUTLINED_FUNCTION_70_4(v11);
  }
  return result;
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_304_0();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OnDeviceInferenceAssetRepository.loadE5Runner(modelConfiguration:draftingBehavior:)(*(TGIE5ModelConfigurationObjC **)(v0 + 192), (TokenGenerationInference::DraftingBehavior_optional *)(v0 + 16));
  *(_QWORD *)(v0 + 208) = v1;
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = *(void **)(v0 + 192);
  OUTLINED_FUNCTION_304_0();

  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
  return OUTLINED_FUNCTION_33(v2);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);

  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OnDeviceInferenceAssetRepository.loadAsset(identifier:)(*(Swift::String *)(v0 + 80));
  return OUTLINED_FUNCTION_201_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  return OUTLINED_FUNCTION_38_2();
}

uint64_t OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:)()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  id v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;

  if (one-time initialization token for device != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_15_4();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_83_0();
  v4 = OUTLINED_FUNCTION_17_3(v3);
  v5 = v0[27];
  if (v4)
  {
    v6 = v0[26];
    v7 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v29 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v7 = 136315138;
    OUTLINED_FUNCTION_65_0();
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v2, (os_log_type_t)v2, "Handling load out for asset with identifier %s", v7);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  if ((v0[26] != 0xD000000000000017 || v0[27] != 0x8000000248D7FE80) && (OUTLINED_FUNCTION_245_1() & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[28] + 136), *(_QWORD *)(v0[28] + 160));
    v28 = (_QWORD *)swift_task_alloc();
    v0[40] = (uint64_t)v28;
    *v28 = v0;
    v28[1] = OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:);
    v19 = OUTLINED_FUNCTION_247_1(v0[26]);
    return OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(v19, v20);
  }
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  OUTLINED_FUNCTION_364_0();
  v0[29] = OUTLINED_FUNCTION_356_0();
  v0[30] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
  Overridable.wrappedValue.getter();
  OUTLINED_FUNCTION_366_0();
  if (v9)
    v13 = 0xD000000000000022;
  else
    v13 = v10;
  if (v9)
    v14 = v12 | 0x8000000000000000;
  else
    v14 = v11;
  v15 = (void *)MEMORY[0x2495A9A78](v13, v14);
  OUTLINED_FUNCTION_42();
  v16 = objc_msgSend(v8, sel_fileExistsAtPath_, v15);

  if (v16)
  {
    OUTLINED_FUNCTION_186_1(v0[28] + 136);
    OUTLINED_FUNCTION_296_0(v17, v0[5]);
    OUTLINED_FUNCTION_364_0();
    OUTLINED_FUNCTION_291_0();
    v0[31] = v0[24];
    v18 = (_QWORD *)swift_task_alloc();
    v0[32] = (uint64_t)v18;
    *v18 = v0;
    v18[1] = OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:);
    v19 = OUTLINED_FUNCTION_239_0();
    return OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(v19, v20);
  }
  v21 = v0[28];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v21 + 136, (uint64_t)(v0 + 7));
  __swift_project_boxed_opaque_existential_1(v0 + 7, v0[10]);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v21 + 16), *(_QWORD *)(v21 + 40));
  Overridable.wrappedValue.getter();
  v22 = v0[17];
  v23 = v0[18];
  v0[34] = v23;
  if (v23)
    v24 = v22;
  else
    v24 = 0xD00000000000001DLL;
  if (v23)
    v25 = v23;
  else
    v25 = 0x8000000248D7FEF0;
  v26 = (_QWORD *)swift_task_alloc();
  v0[35] = (uint64_t)v26;
  *v26 = v0;
  v26[1] = OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:);
  return OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(v24, v25);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 264) = v1;
  swift_task_dealloc();
  if (!v1)
    OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v1 = v0[28];
  OUTLINED_FUNCTION_186_1(v1 + 136);
  OUTLINED_FUNCTION_296_0(v2, v0[10]);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  OUTLINED_FUNCTION_367_0();
  v0[34] = v0[18];
  OUTLINED_FUNCTION_366_0();
  v3 = (_QWORD *)swift_task_alloc();
  v0[35] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:);
  v4 = OUTLINED_FUNCTION_239_0();
  return OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(v4, v5);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 288) = v1;
  swift_task_dealloc();
  if (!v1)
    OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[28];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  OUTLINED_FUNCTION_186_1(v1 + 136);
  OUTLINED_FUNCTION_296_0(v2, v0[15]);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  OUTLINED_FUNCTION_367_0();
  v0[37] = v0[20];
  OUTLINED_FUNCTION_366_0();
  v3 = (_QWORD *)swift_task_alloc();
  v0[38] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = OnDeviceInferenceProvider.unloadAsset(inferenceAssetIdentifier:);
  v4 = OUTLINED_FUNCTION_239_0();
  return OnDeviceInferenceAssetRepository.unloadAsset(identifier:)(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 312) = v1;
  swift_task_dealloc();
  if (!v1)
    OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
  return OUTLINED_FUNCTION_33(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_47_6();
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

void OnDeviceInferenceProvider.requestStream(clientData:configuration:)(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v5 = v4;
  v27 = a2;
  v29 = a4;
  v28 = OUTLINED_FUNCTION_4_4();
  v8 = *(_QWORD *)(v28 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v28);
  v11 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - v12;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  OUTLINED_FUNCTION_3_5();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v27 - v18;
  OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(a1, v27, a3, 0, (uint64_t)&v27 - v18);
  InferenceProviderRequestConfiguration.requestUUID.getter();
  v20 = *(_QWORD *)(v5 + 176);
  outlined init with copy of DataStream<PromptCompletionEvent>((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v21 = v28;
  OUTLINED_FUNCTION_26_0((uint64_t)v11, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  v22 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v23 + v22, v11, v21);
  v24 = OUTLINED_FUNCTION_331_0();
  v25 = v29;
  v29[3] = v24;
  lazy protocol witness table accessor for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>(&lazy protocol witness table cache variable for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>, &demangling cache variable for type metadata for AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data>);
  v25[4] = v26;
  __swift_allocate_boxed_opaque_existential_1(v25);
  lazy protocol witness table accessor for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>(&lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent> and conformance DataStream<A>, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  OUTLINED_FUNCTION_22_4();
  AsyncThrowingMapSequence.init(_:transform:)();
  OUTLINED_FUNCTION_184_0((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v19, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  OUTLINED_FUNCTION_31();
}

uint64_t OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int EnumTagSinglePayload;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(uint64_t, char *, uint64_t);
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)();
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;

  v92 = a4;
  v109 = a1;
  v110 = a2;
  v96 = a5;
  v6 = type metadata accessor for InferenceProviderRequestConfiguration();
  v107 = *(_QWORD *)(v6 - 8);
  v108 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v91 = v7;
  v106 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  v94 = *(_QWORD *)(v8 - 8);
  v95 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v93 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AuditToken?);
  MEMORY[0x24BDAC7A8](v10);
  v100 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v105 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v111 = (char *)&v70 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v70 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v70 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v70 - v24;
  v90 = a3;
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.device);
  v101 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v101(v23, v25, v12);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.info.getter();
  v29 = os_log_type_enabled(v27, v28);
  v98 = v20;
  v99 = v13;
  v97 = v25;
  if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v113 = v31;
    *(_DWORD *)v30 = 136315138;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v113);
    v13 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
    _os_log_impl(&dword_248CAA000, v27, v28, "Received streaming request %s", v30, 0xCu);
    swift_arrayDestroy();
    v34 = v31;
    v25 = v97;
    MEMORY[0x2495AAF60](v34, -1, -1);
    v35 = v30;
    v20 = v98;
    MEMORY[0x2495AAF60](v35, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
  }

  v36 = v101;
  v101(v20, v25, v12);
  v37 = (uint64_t)v111;
  v36(v111, v25, v12);
  v38 = *((_QWORD *)v104 + 22);
  type metadata accessor for DataStreamCancellationHandler();
  swift_allocObject();
  v103 = DataStreamCancellationHandler.init(requestUUID:dataStreamStateManager:)(v37, v38);
  v102 = swift_allocObject();
  *(_QWORD *)(v102 + 16) = 0;
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = 0;
  swift_retain();
  v86 = UUID.uuidString.getter();
  v85 = v39;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  v88 = v40;
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = -1;
  v41 = (uint64_t)v100;
  v42 = v90;
  InferenceProviderRequestConfiguration.auditToken.getter();
  v43 = type metadata accessor for AuditToken();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v41, 1, v43);
  if (EnumTagSinglePayload == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v41, &demangling cache variable for type metadata for AuditToken?);
    v84 = 0;
  }
  else
  {
    v84 = AuditToken.realUserIdentifier.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v41, v43);
  }
  v83 = EnumTagSinglePayload == 1;
  v100 = (char *)swift_allocObject();
  v100[16] = 1;
  v82 = swift_allocObject();
  *(_BYTE *)(v82 + 16) = 1;
  v81 = swift_allocObject();
  *(_BYTE *)(v81 + 16) = 1;
  v80 = swift_allocObject();
  *(_BYTE *)(v80 + 16) = 1;
  v78 = swift_allocObject();
  swift_weakInit();
  v45 = v101;
  v101(v111, v25, v12);
  v45(v105, v20, v12);
  v46 = v107;
  (*(void (**)(char *, unint64_t, uint64_t))(v107 + 16))(v106, v42, v108);
  v47 = *(unsigned __int8 *)(v13 + 80);
  v48 = v13;
  v49 = (v47 + 24) & ~v47;
  v50 = (v14 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = (v47 + v52 + 16) & ~v47;
  v77 = v53 + v14;
  v54 = v12;
  v55 = (v53 + v14) & 0xFFFFFFFFFFFFFFF8;
  v74 = (v55 + 27) & 0xFFFFFFFFFFFFFFF8;
  v71 = (*(unsigned __int8 *)(v46 + 80) + v74 + 5) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v101 = (void (*)(char *, char *, uint64_t))((v91 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
  v91 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v91 + 15) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v90 + 15) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v76 + 15) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
  v72 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject();
  v57 = v55 + v56;
  *(_QWORD *)(v56 + 16) = v78;
  v58 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
  v79 = v54;
  v58(v56 + v49, v111, v54);
  v104 = v58;
  *(_QWORD *)(v56 + v50) = v103;
  *(_QWORD *)(v56 + v51) = v100;
  v59 = (_QWORD *)(v56 + v52);
  v60 = v110;
  *v59 = v109;
  v59[1] = v60;
  v58(v56 + v53, v105, v54);
  *(_BYTE *)(v56 + v77) = v92 & 1;
  v61 = v85;
  *(_QWORD *)(v57 + 8) = v86;
  *(_QWORD *)(v57 + 16) = v61;
  v62 = v56 + v74;
  *(_DWORD *)v62 = v84;
  *(_BYTE *)(v62 + 4) = v83;
  (*(void (**)(unint64_t, char *, uint64_t))(v107 + 32))(v56 + v71, v106, v108);
  *(_QWORD *)((char *)v101 + v56) = v102;
  *(_QWORD *)(v56 + v91) = v88;
  *(_QWORD *)(v56 + v90) = v87;
  *(_QWORD *)(v56 + v76) = v89;
  *(_QWORD *)(v56 + v75) = v82;
  *(_QWORD *)(v56 + v73) = v81;
  *(_QWORD *)(v56 + v72) = v80;
  swift_retain();
  swift_retain();
  outlined copy of Data._Representation(v109, v110);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  v63 = v93;
  AsyncThrowingStream.init<>(unfolding:)();
  v64 = v79;
  (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v79);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v66 = v96;
  v104(v96 + *(int *)(v65 + 32), v97, v64);
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v66, v63, v95);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v67 = (void (**)())(v66 + *(int *)(v65 + 28));
  v68 = v103;
  *v67 = partial apply for closure #2 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  v67[1] = (void (*)())v68;
  return swift_release();
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for UUID();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v6 = type metadata accessor for CompletePromptResponseElement();
  v4[15] = v6;
  v4[16] = *(_QWORD *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v7 = type metadata accessor for TokenGenerationError();
  v4[18] = v7;
  v4[19] = *(_QWORD *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v8 = type metadata accessor for TokenGenerationError.Context();
  v4[21] = v8;
  v4[22] = *(_QWORD *)(v8 - 8);
  v4[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  v4[24] = swift_task_alloc();
  v4[25] = type metadata accessor for DataStreamState(0);
  v4[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)()
{
  uint64_t v0;

  DataStreamStateManager.stateForUUID(_:)(*(_QWORD *)(v0 + 192));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_126_2();
  v1 = *(_QWORD *)(v0 + 192);
  OUTLINED_FUNCTION_28_1(v1, 1, *(_QWORD *)(v0 + 200));
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 176);
    v3 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v1, &demangling cache variable for type metadata for DataStreamState?);
    OUTLINED_FUNCTION_311();
    OUTLINED_FUNCTION_43_6();
    v8 = OUTLINED_FUNCTION_260();
    OUTLINED_FUNCTION_26_0(v8, v9, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, *MEMORY[0x24BEB8090], v6);
    v11 = OUTLINED_FUNCTION_66_3();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
    OUTLINED_FUNCTION_11_0();
    v13 = v12;
    OUTLINED_FUNCTION_386_0();
    OUTLINED_FUNCTION_99(v13, *MEMORY[0x24BE68978], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104));
    swift_willThrow();
    OUTLINED_FUNCTION_22_9();
    OUTLINED_FUNCTION_61_4(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    OUTLINED_FUNCTION_238_1();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_309();
    return OUTLINED_FUNCTION_70_4(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 72);
    outlined init with take of DataStreamState(v1, *(_QWORD *)(v0 + 208), type metadata accessor for DataStreamState);
    OUTLINED_FUNCTION_186_1(v14);
    CompletePromptResponseElement.init(_:)();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement, (void (*)(uint64_t))MEMORY[0x24BEB8508]);
    OUTLINED_FUNCTION_340_0();
    v15 = static Serialization.encode<A>(_:)();
    v17 = v16;
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(uint64_t **)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    *v19 = v15;
    v19[1] = v17;
    outlined destroy of MaskedLanguageModel.SingleLogitCollection(v18, type metadata accessor for DataStreamState);
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_238_0();
    v20 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
    return OUTLINED_FUNCTION_70_4(v20);
  }
}

{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_126_2();
  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 120);
  OUTLINED_FUNCTION_43_6();
  OUTLINED_FUNCTION_196_1(v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, *MEMORY[0x24BEB8050], v5);
  v6 = OUTLINED_FUNCTION_66_3();
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
  OUTLINED_FUNCTION_11_0();
  v8 = v7;
  OUTLINED_FUNCTION_386_0();
  OUTLINED_FUNCTION_99(v8, *MEMORY[0x24BE68978], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104));
  swift_willThrow();
  OUTLINED_FUNCTION_184_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_194_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v13, type metadata accessor for DataStreamState);
  OUTLINED_FUNCTION_238_1();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_309();
  return OUTLINED_FUNCTION_70_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[73] = v3;
  v4[72] = a3;
  v4[71] = a2;
  v4[70] = a1;
  v4[74] = *v3;
  v5 = type metadata accessor for TokenGenerationError();
  v4[75] = v5;
  v4[76] = *(_QWORD *)(v5 - 8);
  v4[77] = OUTLINED_FUNCTION_46_0();
  v6 = type metadata accessor for InferenceProviderRequestConfiguration();
  v4[78] = v6;
  v4[79] = *(_QWORD *)(v6 - 8);
  v4[80] = OUTLINED_FUNCTION_46_0();
  v7 = type metadata accessor for CompletePromptResponse();
  v4[81] = v7;
  v4[82] = *(_QWORD *)(v7 - 8);
  v4[83] = OUTLINED_FUNCTION_46_0();
  v8 = type metadata accessor for PromptCompletion();
  v4[84] = v8;
  v4[85] = *(_QWORD *)(v8 - 8);
  v4[86] = OUTLINED_FUNCTION_28_5();
  v4[87] = OUTLINED_FUNCTION_24_4();
  v4[88] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v4[89] = OUTLINED_FUNCTION_46_0();
  v9 = type metadata accessor for TokenGenerationError.Context();
  v4[90] = v9;
  v4[91] = *(_QWORD *)(v9 - 8);
  v4[92] = OUTLINED_FUNCTION_46_0();
  v10 = type metadata accessor for Prompt.RenderedPromptFragment();
  v4[93] = v10;
  v4[94] = *(_QWORD *)(v10 - 8);
  v4[95] = OUTLINED_FUNCTION_46_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  v4[96] = OUTLINED_FUNCTION_46_0();
  v11 = type metadata accessor for CountTokensResponse();
  v4[97] = v11;
  v4[98] = *(_QWORD *)(v11 - 8);
  v4[99] = OUTLINED_FUNCTION_28_5();
  v4[100] = OUTLINED_FUNCTION_24_4();
  type metadata accessor for Prompt.Rendering.Source();
  v4[101] = OUTLINED_FUNCTION_46_0();
  v12 = type metadata accessor for Prompt.Rendering();
  v4[102] = v12;
  v4[103] = *(_QWORD *)(v12 - 8);
  v4[104] = OUTLINED_FUNCTION_46_0();
  v13 = type metadata accessor for Prompt.SpecialToken();
  v4[105] = v13;
  v4[106] = *(_QWORD *)(v13 - 8);
  v4[107] = OUTLINED_FUNCTION_28_5();
  v4[108] = OUTLINED_FUNCTION_24_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
  v4[109] = OUTLINED_FUNCTION_28_5();
  v4[110] = OUTLINED_FUNCTION_24_4();
  v14 = type metadata accessor for Prompt();
  v4[111] = v14;
  v4[112] = *(_QWORD *)(v14 - 8);
  v4[113] = OUTLINED_FUNCTION_28_5();
  v4[114] = OUTLINED_FUNCTION_24_4();
  v4[115] = OUTLINED_FUNCTION_24_4();
  v15 = type metadata accessor for CountTokensRequest();
  v4[116] = v15;
  v4[117] = *(_QWORD *)(v15 - 8);
  v4[118] = OUTLINED_FUNCTION_46_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPayload?);
  v4[119] = OUTLINED_FUNCTION_46_0();
  v16 = type metadata accessor for RequestPayload();
  v4[120] = v16;
  v4[121] = *(_QWORD *)(v16 - 8);
  v4[122] = OUTLINED_FUNCTION_28_5();
  v4[123] = OUTLINED_FUNCTION_24_4();
  v4[124] = OUTLINED_FUNCTION_24_4();
  v4[125] = OUTLINED_FUNCTION_24_4();
  v17 = OUTLINED_FUNCTION_4_4();
  v4[126] = v17;
  v4[127] = *(_QWORD *)(v17 - 8);
  v4[128] = OUTLINED_FUNCTION_28_5();
  v4[129] = OUTLINED_FUNCTION_24_4();
  v4[130] = OUTLINED_FUNCTION_24_4();
  v4[131] = OUTLINED_FUNCTION_24_4();
  v4[132] = OUTLINED_FUNCTION_24_4();
  v4[133] = OUTLINED_FUNCTION_24_4();
  v4[134] = OUTLINED_FUNCTION_24_4();
  v4[135] = OUTLINED_FUNCTION_24_4();
  v4[136] = OUTLINED_FUNCTION_24_4();
  v4[137] = OUTLINED_FUNCTION_24_4();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, uint64_t, uint64_t);
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t (*v47)();
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  OUTLINED_FUNCTION_231_0();
  InferenceProviderRequestConfiguration.requestUUID.getter();
  if (one-time initialization token for device != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 1088);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(_QWORD *)(v0 + 1008);
  v5 = OUTLINED_FUNCTION_15_4();
  *(_QWORD *)(v0 + 1104) = __swift_project_value_buffer(v5, (uint64_t)static Log.device);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 1112) = v6;
  v6(v2, v1, v4);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v9 = 136315138;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 552) = OUTLINED_FUNCTION_111_1(v10, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_303_0();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v7, v8, "Received one shot request %s", v9);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_303_0();

  *(_QWORD *)(v0 + 1120) = &loc_248D72000;
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type RequestPayload and conformance RequestPayload, (void (*)(uint64_t))MEMORY[0x24BEB8168]);
  static Serialization.decode<A>(_:from:)();
  v12 = *(_QWORD *)(v0 + 1000);
  v13 = *(void **)(v0 + 992);
  v14 = *(_QWORD *)(v0 + 968);
  v15 = *(_QWORD *)(v0 + 960);
  v16 = *(_QWORD *)(v0 + 952);
  OUTLINED_FUNCTION_210_1(v16);
  OUTLINED_FUNCTION_99(v12, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  v17 = *(void (**)(void *, uint64_t, uint64_t))(v14 + 16);
  v17(v13, v12, v15);
  v18 = (*(uint64_t (**)(void *, uint64_t))(v14 + 88))(v13, v15);
  if (v18 == *MEMORY[0x24BEB8150])
  {
    v19 = *(NSObject **)(v0 + 1096);
    v20 = *(_QWORD *)(v0 + 992);
    v21 = *(_QWORD *)(v0 + 944);
    v22 = *(_QWORD *)(v0 + 936);
    v23 = *(_QWORD *)(v0 + 928);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 968) + 96))(v20, *(_QWORD *)(v0 + 960));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v20, v23);
    v24 = OUTLINED_FUNCTION_239_0();
    OUTLINED_FUNCTION_267_0(v24, v25);
    Logger.logObject.getter();
    v26 = OUTLINED_FUNCTION_176();
    if (os_log_type_enabled(v19, v26))
    {
      v27 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v27 = 136315138;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v28 = OUTLINED_FUNCTION_380();
      *(_QWORD *)(v0 + 544) = OUTLINED_FUNCTION_111_1(v28, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_116_0();
      OUTLINED_FUNCTION_198_1();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v19, v26, "Handling request %s as count tokens request", v27);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_198_1();

    v37 = *(_QWORD *)(v0 + 584);
    InferenceProviderRequestConfiguration.assetIdentifiers.getter();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v39 = v38;
    *(_QWORD *)(v0 + 1128) = v38;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_311();
    v42 = specialized Sequence<>.contains(_:)(v40, v41, v39);
    v43 = (_QWORD *)(v37 + 136);
    if ((v42 & 1) != 0)
    {
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v43, v0 + 96);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v39 = OUTLINED_FUNCTION_2_0();
      *(_QWORD *)(v0 + 1136) = v39;
      *(_OWORD *)(v39 + 16) = xmmword_248D75A50;
      OUTLINED_FUNCTION_403_0();
      OUTLINED_FUNCTION_356_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
      Overridable.wrappedValue.getter();
      v44 = *(_QWORD *)(v0 + 368);
      v45 = *(_QWORD *)(v0 + 376);
      if (!v45)
      {
        v44 = 0xD00000000000001ALL;
        v45 = 0x8000000248D7FF10;
      }
      *(_QWORD *)(v39 + 32) = v44;
      *(_QWORD *)(v39 + 40) = v45;
      v46 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1144) = v46;
      v47 = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v43, *(_QWORD *)(*(_QWORD *)(v0 + 584) + 160));
      v46 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1160) = v46;
      v47 = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
    }
    *v46 = v0;
    v46[1] = v47;
    return OnDeviceInferenceAssetRepository.fetchAssetObjects(identifiers:configuration:)(v39, *(_QWORD *)(v0 + 576));
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 1096);
    if (v18 == *MEMORY[0x24BEB8158])
    {
      OUTLINED_FUNCTION_267_0(*(_QWORD *)(v0 + 1048), v30);
      Logger.logObject.getter();
      v31 = OUTLINED_FUNCTION_176();
      if (OUTLINED_FUNCTION_73_1(v31))
      {
        v32 = (_DWORD *)OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_4_11();
        *v32 = 136315138;
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v33 = OUTLINED_FUNCTION_203();
        *(_QWORD *)(v0 + 416) = OUTLINED_FUNCTION_111_1(v33, v34);
        OUTLINED_FUNCTION_327();
        OUTLINED_FUNCTION_119_0();
        OUTLINED_FUNCTION_351_0();
        OUTLINED_FUNCTION_198_1();
        OUTLINED_FUNCTION_20_7(&dword_248CAA000, v35, v36, "Handling request %s as complete prompt request");
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }
      v61 = OUTLINED_FUNCTION_351_0();
      ((void (*)(uint64_t))loc_248D72000)(v61);

      OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), 1, *(_QWORD *)(v0 + 712));
      v62 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1304) = v62;
      lazy protocol witness table accessor for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>(&lazy protocol witness table cache variable for type DataStream<PromptCompletionEvent> and conformance DataStream<A>, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
      *v62 = v0;
      v62[1] = OnDeviceInferenceProvider.requestOneShot(clientData:configuration:);
      return static PromptCompletion.collecting<A>(events:)();
    }
    else
    {
      OUTLINED_FUNCTION_267_0(*(_QWORD *)(v0 + 1032), v30);
      v48 = OUTLINED_FUNCTION_239_0();
      ((void (*)(uint64_t))v17)(v48);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.error.getter();
      v51 = os_log_type_enabled(v49, v50);
      v52 = *(_QWORD *)(v0 + 984);
      if (v51)
      {
        v76 = *(_QWORD *)(v0 + 968);
        v75 = *(_QWORD *)(v0 + 960);
        v53 = OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v53 = 136315394;
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v54 = dispatch thunk of CustomStringConvertible.description.getter();
        *(_QWORD *)(v0 + 528) = OUTLINED_FUNCTION_111_1(v54, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_161();
        v56 = OUTLINED_FUNCTION_295_0();
        ((void (*)(uint64_t))loc_248D72000)(v56);
        *(_WORD *)(v53 + 12) = 2080;
        v57 = OUTLINED_FUNCTION_390();
        ((void (*)(uint64_t))v17)(v57);
        OUTLINED_FUNCTION_239_0();
        v58 = String.init<A>(describing:)();
        *(_QWORD *)(v0 + 472) = OUTLINED_FUNCTION_111_1(v58, v59);
        OUTLINED_FUNCTION_346();
        OUTLINED_FUNCTION_7_0();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v52, v75);
        OUTLINED_FUNCTION_124_0(&dword_248CAA000, v49, v50, "Failing request%s unhandled request type %s", (uint8_t *)v53);
        OUTLINED_FUNCTION_89_2();
        OUTLINED_FUNCTION_0_1();
      }
      v63 = *(_QWORD *)(v0 + 968);
      v64 = *(_QWORD *)(v0 + 960);
      v65 = OUTLINED_FUNCTION_295_0();
      ((void (*)(uint64_t))loc_248D72000)(v65);
      v66 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v66(v52, v64);

      v67 = *(_QWORD *)(v0 + 1000);
      v77 = *(_QWORD *)(v0 + 992);
      v68 = *(_QWORD *)(v0 + 960);
      v69 = *(_QWORD *)(v0 + 736);
      v70 = *(_QWORD *)(v0 + 728);
      OUTLINED_FUNCTION_270_0();
      *(_QWORD *)(v0 + 352) = v78;
      *(_QWORD *)(v0 + 360) = v79;
      v71._countAndFlagsBits = OUTLINED_FUNCTION_405_0();
      String.append(_:)(v71);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_328();
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
      OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_397_0();
      OUTLINED_FUNCTION_316_0(v72, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16));
      v73 = OUTLINED_FUNCTION_385_0();
      v74(v73);
      swift_willThrow();
      OUTLINED_FUNCTION_222_0(v69, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
      v66(v67, v68);
      OUTLINED_FUNCTION_198_1();
      v66(v77, v68);
      OUTLINED_FUNCTION_16_7();
      swift_task_dealloc();
      OUTLINED_FUNCTION_12_3();
      OUTLINED_FUNCTION_10_6();
      OUTLINED_FUNCTION_309();
      OUTLINED_FUNCTION_202();
      OUTLINED_FUNCTION_277();
      OUTLINED_FUNCTION_238_0();
      OUTLINED_FUNCTION_369();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_14_3();
      OUTLINED_FUNCTION_217();
      OUTLINED_FUNCTION_216();
      OUTLINED_FUNCTION_254_0();
      OUTLINED_FUNCTION_257_0();
      OUTLINED_FUNCTION_215_0();
      OUTLINED_FUNCTION_226_0();
      OUTLINED_FUNCTION_214_0();
      OUTLINED_FUNCTION_213_0();
      OUTLINED_FUNCTION_212_0();
      OUTLINED_FUNCTION_211_0();
      OUTLINED_FUNCTION_247_0();
      OUTLINED_FUNCTION_210_0();
      OUTLINED_FUNCTION_209_0();
      OUTLINED_FUNCTION_208_0();
      OUTLINED_FUNCTION_207();
      OUTLINED_FUNCTION_56_5();
      OUTLINED_FUNCTION_55_4();
      OUTLINED_FUNCTION_54_5();
      OUTLINED_FUNCTION_53_5();
      OUTLINED_FUNCTION_52_4();
      OUTLINED_FUNCTION_75_3();
      OUTLINED_FUNCTION_80_3();
      OUTLINED_FUNCTION_51_4();
      OUTLINED_FUNCTION_50_6();
      OUTLINED_FUNCTION_49_5();
      OUTLINED_FUNCTION_84_3();
      return OUTLINED_FUNCTION_74_3(*(uint64_t (**)(void))(v0 + 8));
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_24_0();
  v0[36] = v2;
  v0[37] = v3;
  v0[38] = v1;
  OUTLINED_FUNCTION_64_2(v4);
  v0[144] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
    OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t *v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  int v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v31;
  Swift::String v32;

  OUTLINED_FUNCTION_80();
  __swift_destroy_boxed_opaque_existential_1(v1 + 96);
  v6 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)(v1 + 1176) = *(_QWORD *)(v1 + 1152);
  *(_QWORD *)(v1 + 1184) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v2 = v1 + 56;
    v0 = (v1 + 136);
    v3 = v1 - 40;
    v8 = v6 + 32;
    OUTLINED_FUNCTION_64_1();
    v4 = &demangling cache variable for type metadata for OnDeviceInferenceAssetObject;
    v5 = &type metadata for OnDeviceInferenceAssetObjectTokenizer;
    while (1)
    {
      OUTLINED_FUNCTION_422_0();
      OUTLINED_FUNCTION_388_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (OUTLINED_FUNCTION_54_3())
        break;
      __swift_destroy_boxed_opaque_existential_1(v1 + 136);
      v8 += 40;
      if (!--v7)
      {
        OUTLINED_FUNCTION_7_0();
        goto LABEL_7;
      }
    }
    OUTLINED_FUNCTION_377_0();
    OUTLINED_FUNCTION_224_1();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_63_0();
    OUTLINED_FUNCTION_387_0();
  }
  else
  {
    OUTLINED_FUNCTION_52();
LABEL_7:
    *(_QWORD *)(v1 + 208) = 0;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
  }
  v9 = OUTLINED_FUNCTION_7_0();
  if (*(_QWORD *)(v1 + 200))
  {
    v0 = (v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
    {
      OUTLINED_FUNCTION_263_0();
      v10 = OUTLINED_FUNCTION_309_0();
      OUTLINED_FUNCTION_308_0(v10, v11);
      return OUTLINED_FUNCTION_145_0();
    }
  }
  else
  {
    OUTLINED_FUNCTION_165_0(v9, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
  OUTLINED_FUNCTION_204_1();
  OUTLINED_FUNCTION_274_0();
  Logger.logObject.getter();
  v12 = OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_47_5(v12);
  OUTLINED_FUNCTION_374_0();
  if (v13)
  {
    v31 = v3;
    v14 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v14 = 136315394;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v15 = OUTLINED_FUNCTION_50_5();
    v21 = OUTLINED_FUNCTION_394_0(v15, v16, v17, v18, v19, v20);
    OUTLINED_FUNCTION_249_1(v21);
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_228_0();
    v22 = OUTLINED_FUNCTION_282_0();
    MEMORY[0x2495A9BC8](v22, MEMORY[0x24BEE0D00]);
    v23 = OUTLINED_FUNCTION_322_0();
    *(_QWORD *)(v1 + 408) = OUTLINED_FUNCTION_320_0(v23, v24, v25, v26);
    OUTLINED_FUNCTION_346();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v0, v31, "Failed to handle request %s, unable to get tokenizer with asset identifiers %s", v14);
    OUTLINED_FUNCTION_89_2();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_228_0();
  OUTLINED_FUNCTION_101();

  OUTLINED_FUNCTION_136_1();
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = OUTLINED_FUNCTION_288_0();
  OUTLINED_FUNCTION_372_0(v32);
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_167_0();
  OUTLINED_FUNCTION_328();
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
  v27 = OUTLINED_FUNCTION_11_0();
  v29 = v28;
  OUTLINED_FUNCTION_274(v28, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4[2]);
  OUTLINED_FUNCTION_99(v29, *MEMORY[0x24BEB8070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5[6].Description);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_333(v2, (uint64_t (*)(uint64_t, uint64_t))v4[1]);
  *(_QWORD *)(v1 + 1328) = v6;
  *(_QWORD *)(v1 + 1320) = v27;
  OUTLINED_FUNCTION_29_4();
  return OUTLINED_FUNCTION_145_0();
}

{
  _QWORD *v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  v1 = v0[144];
  v0[166] = MEMORY[0x24BEE4AF8];
  v0[165] = v1;
  OUTLINED_FUNCTION_29_4();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_6_5();
  v3[39] = v1;
  v3[40] = v2;
  v3[41] = v0;
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v4 + 1168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t *v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  int v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v31;
  Swift::String v32;

  OUTLINED_FUNCTION_80();
  v6 = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v1 + 1176) = *(_QWORD *)(v1 + 1168);
  *(_QWORD *)(v1 + 1184) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v2 = v1 + 56;
    v0 = (v1 + 136);
    v3 = v1 - 40;
    v8 = v6 + 32;
    OUTLINED_FUNCTION_64_1();
    v4 = &demangling cache variable for type metadata for OnDeviceInferenceAssetObject;
    v5 = &type metadata for OnDeviceInferenceAssetObjectTokenizer;
    while (1)
    {
      OUTLINED_FUNCTION_422_0();
      OUTLINED_FUNCTION_388_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
      if (OUTLINED_FUNCTION_54_3())
        break;
      __swift_destroy_boxed_opaque_existential_1(v1 + 136);
      v8 += 40;
      if (!--v7)
      {
        OUTLINED_FUNCTION_7_0();
        goto LABEL_7;
      }
    }
    OUTLINED_FUNCTION_377_0();
    OUTLINED_FUNCTION_224_1();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_63_0();
    OUTLINED_FUNCTION_387_0();
  }
  else
  {
    OUTLINED_FUNCTION_52();
LABEL_7:
    *(_QWORD *)(v1 + 208) = 0;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
  }
  v9 = OUTLINED_FUNCTION_7_0();
  if (*(_QWORD *)(v1 + 200))
  {
    v0 = (v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
    if ((OUTLINED_FUNCTION_54_3() & 1) != 0)
    {
      OUTLINED_FUNCTION_263_0();
      v10 = OUTLINED_FUNCTION_309_0();
      OUTLINED_FUNCTION_308_0(v10, v11);
      return OUTLINED_FUNCTION_145_0();
    }
  }
  else
  {
    OUTLINED_FUNCTION_165_0(v9, &demangling cache variable for type metadata for OnDeviceInferenceAssetObject?);
  }
  OUTLINED_FUNCTION_204_1();
  OUTLINED_FUNCTION_274_0();
  Logger.logObject.getter();
  v12 = OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_47_5(v12);
  OUTLINED_FUNCTION_374_0();
  if (v13)
  {
    v31 = v3;
    v14 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v14 = 136315394;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v15 = OUTLINED_FUNCTION_50_5();
    v21 = OUTLINED_FUNCTION_394_0(v15, v16, v17, v18, v19, v20);
    OUTLINED_FUNCTION_249_1(v21);
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_228_0();
    v22 = OUTLINED_FUNCTION_282_0();
    MEMORY[0x2495A9BC8](v22, MEMORY[0x24BEE0D00]);
    v23 = OUTLINED_FUNCTION_322_0();
    *(_QWORD *)(v1 + 408) = OUTLINED_FUNCTION_320_0(v23, v24, v25, v26);
    OUTLINED_FUNCTION_346();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v0, v31, "Failed to handle request %s, unable to get tokenizer with asset identifiers %s", v14);
    OUTLINED_FUNCTION_89_2();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_228_0();
  OUTLINED_FUNCTION_101();

  OUTLINED_FUNCTION_136_1();
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = OUTLINED_FUNCTION_288_0();
  OUTLINED_FUNCTION_372_0(v32);
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_167_0();
  OUTLINED_FUNCTION_328();
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
  v27 = OUTLINED_FUNCTION_11_0();
  v29 = v28;
  OUTLINED_FUNCTION_274(v28, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v4[2]);
  OUTLINED_FUNCTION_99(v29, *MEMORY[0x24BEB8070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))v5[6].Description);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_333(v2, (uint64_t (*)(uint64_t, uint64_t))v4[1]);
  *(_QWORD *)(v1 + 1328) = v6;
  *(_QWORD *)(v1 + 1320) = v27;
  OUTLINED_FUNCTION_29_4();
  return OUTLINED_FUNCTION_145_0();
}

{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  v1 = v0[146];
  v0[166] = MEMORY[0x24BEE4AF8];
  v0[165] = v1;
  OUTLINED_FUNCTION_29_4();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 1248) = (unint64_t)OnDeviceInferenceAssetRepository.fetchSpecialTokensMapForAsset(identifier:)(*(Swift::String *)(v0 + 1224));
  *(_QWORD *)(v0 + 1256) = v1;
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_362();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_42();
  v1 = v0[157];
  v0[166] = v0[148];
  v0[165] = v1;
  OUTLINED_FUNCTION_29_4();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 1272) = (unint64_t)OnDeviceInferenceAssetRepository.fetchLocalizationMetadataForAsset(identifier:)(*(Swift::String *)(v0 + 1224));
  *(_QWORD *)(v0 + 1280) = v1;
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_224_1();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_7_0();
  v1 = v0[160];
  v0[166] = v0[148];
  v0[165] = v1;
  OUTLINED_FUNCTION_29_4();
  return OUTLINED_FUNCTION_193_1();
}

{
  OUTLINED_FUNCTION_370_0();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_231_0();
  v14 = *(_QWORD *)(v0 + 1096);
  v16 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
  v12 = *(_QWORD *)(v0 + 1000);
  v13 = *(_QWORD *)(v0 + 1008);
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 1288);
  v10 = *(_QWORD *)(v0 + 968);
  v11 = *(_QWORD *)(v0 + 960);
  v1 = *(_QWORD *)(v0 + 936);
  v7 = *(_QWORD *)(v0 + 928);
  v8 = *(_QWORD *)(v0 + 944);
  v2 = *(_QWORD *)(v0 + 832);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 800);
  v5 = *(_QWORD *)(v0 + 776);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_42();
  v9(v4, v5);
  OUTLINED_FUNCTION_333(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v7);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  v16(v14, v13);
  v15 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 384);
  OUTLINED_FUNCTION_10_11();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  return OUTLINED_FUNCTION_156_0(v17, v15, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v1 + 1312) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, void *, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_231_0();
  v1 = *(_QWORD *)(v0 + 1312);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 680) + 16))(*(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 672));
  CompletePromptResponse.init(completion:)();
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse, (void (*)(uint64_t))MEMORY[0x24BEB8468]);
  OUTLINED_FUNCTION_340_0();
  v2 = static Serialization.encode<A>(_:)();
  if (v1)
  {
    v4 = *(void (**)(uint64_t, void *, uint64_t))(v0 + 1112);
    v5 = *(void **)(v0 + 1096);
    v6 = *(_QWORD *)(v0 + 1040);
    v7 = *(_QWORD *)(v0 + 1008);
    OUTLINED_FUNCTION_102_0();
    v4(v6, v5, v7);
    Logger.logObject.getter();
    v8 = OUTLINED_FUNCTION_244_0();
    if (OUTLINED_FUNCTION_73_1(v8))
    {
      OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_241_1(4.8149e-34);
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v9 = OUTLINED_FUNCTION_203();
      *(_QWORD *)(v0 + 464) = OUTLINED_FUNCTION_200_0(v9, v10);
      OUTLINED_FUNCTION_327();
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_442();
      OUTLINED_FUNCTION_20_7(&dword_248CAA000, v11, v12, "Onshot request %s failed, error encoding complete prompt response");
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_442();

    v44 = *(_QWORD *)(v0 + 992);
    v40 = *(_QWORD *)(v0 + 968);
    v41 = *(_QWORD *)(v0 + 1000);
    v22 = *(_QWORD *)(v0 + 960);
    v23 = *(_QWORD *)(v0 + 736);
    v24 = *(_QWORD *)(v0 + 728);
    v38 = *(_QWORD *)(v0 + 696);
    v39 = *(_QWORD *)(v0 + 712);
    v36 = *(_QWORD *)(v0 + 680);
    v37 = *(_QWORD *)(v0 + 672);
    v25 = *(_QWORD *)(v0 + 656);
    v34 = *(_QWORD *)(v0 + 648);
    v35 = *(_QWORD *)(v0 + 664);
    v26 = *(_QWORD *)(v0 + 608);
    v27 = *(_QWORD *)(v0 + 600);
    OUTLINED_FUNCTION_43_6();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    v47 = OUTLINED_FUNCTION_7_11();
    v29 = v28;
    v30 = OUTLINED_FUNCTION_383(v47, v28);
    OUTLINED_FUNCTION_26_0(v30, v31, v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29, *MEMORY[0x24BEB8050], v27);
    swift_willThrow();
    OUTLINED_FUNCTION_61_4(v23, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v35, v34);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v39, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
    v33 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v33(v41, v22);
    OUTLINED_FUNCTION_198_1();
    v33(v44, v22);
    OUTLINED_FUNCTION_32_6();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_369();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_216();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_257_0();
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_226_0();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    OUTLINED_FUNCTION_84_3();
    return OUTLINED_FUNCTION_74_3(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 992);
    v43 = *(void (**)(uint64_t))(v0 + 1120);
    v13 = *(_QWORD *)(v0 + 968);
    v14 = *(_QWORD *)(v0 + 960);
    v15 = *(_QWORD *)(v0 + 712);
    v16 = *(_QWORD *)(v0 + 696);
    v17 = *(_QWORD *)(v0 + 680);
    v45 = v3;
    v46 = v2;
    OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 656));
    OUTLINED_FUNCTION_184_0(v16, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v15, &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
    v18 = *(void (**)(uint64_t))(v13 + 8);
    v19 = OUTLINED_FUNCTION_318_0();
    v18(v19);
    v20 = OUTLINED_FUNCTION_260();
    v43(v20);
    ((void (*)(uint64_t, uint64_t))v18)(v42, v14);
    OUTLINED_FUNCTION_16_7();
    swift_task_dealloc();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_369();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_217();
    OUTLINED_FUNCTION_216();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_257_0();
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_226_0();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    return OUTLINED_FUNCTION_156_0(v46, v45, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  OUTLINED_FUNCTION_370_0();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t);

  OUTLINED_FUNCTION_231_0();
  v6 = *(void (**)(uint64_t))(v0 + 1120);
  v1 = *(_QWORD *)(v0 + 1000);
  v2 = *(_QWORD *)(v0 + 968);
  v3 = *(_QWORD *)(v0 + 936);
  swift_willThrow();
  OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_333(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v4 = OUTLINED_FUNCTION_260();
  v6(v4);
  OUTLINED_FUNCTION_10_11();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  return OUTLINED_FUNCTION_74_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t))(v0 + 1120);
  v2 = *(_QWORD *)(v0 + 992);
  v3 = *(_QWORD *)(v0 + 968);
  v4 = *(_QWORD *)(v0 + 960);
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for DataStream<PromptCompletionEvent>);
  v5 = *(void (**)(uint64_t))(v3 + 8);
  v6 = OUTLINED_FUNCTION_318_0();
  v5(v6);
  v7 = OUTLINED_FUNCTION_260();
  v1(v7);
  ((void (*)(uint64_t, uint64_t))v5)(v2, v4);
  OUTLINED_FUNCTION_32_6();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  OUTLINED_FUNCTION_126_2();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  v27 = v24[154];
  v28 = v24[138];
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_64_1();
  Logger.logObject.getter();
  v29 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_17_3(v29))
  {
    v30 = v24[156];
    v31 = v24[154];
    v40 = v24[153];
    v32 = OUTLINED_FUNCTION_4_11();
    a13 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v32 = 136315394;
    v24[63] = v30;
    OUTLINED_FUNCTION_65_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]?);
    v33 = String.init<A>(describing:)();
    v24[64] = OUTLINED_FUNCTION_394_0(v33, v34, v35, v36, v37, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_19_6();
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain();
    v24[65] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v31, &a13);
    OUTLINED_FUNCTION_425();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v28, (os_log_type_t)v27, "Fetched special tokens map %s for asset bundle identifier %s", (uint8_t *)v32);
    OUTLINED_FUNCTION_35_5();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_19_6();

  v24[158] = OUTLINED_FUNCTION_279(v24[73]);
  return OUTLINED_FUNCTION_69_4();
}

void OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  _OWORD *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  char v41;
  Swift::Bool v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  _BOOL4 v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD);
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  char isUnique;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v1 = v0[154];
  v2 = v0[138];
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_52();
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_17_3(v3))
  {
    v4 = v0[156];
    v5 = v0[154];
    v109 = v0[153];
    v6 = OUTLINED_FUNCTION_4_11();
    v111 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v6 = 136315394;
    v0[60] = v4;
    OUTLINED_FUNCTION_92_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]?);
    v7 = String.init<A>(describing:)();
    v0[61] = OUTLINED_FUNCTION_359_0(v7, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_19_6();
    *(_WORD *)(v6 + 12) = 2080;
    OUTLINED_FUNCTION_50_1();
    v0[62] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v5, &v111);
    OUTLINED_FUNCTION_205_0();
    OUTLINED_FUNCTION_26_5();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v2, (os_log_type_t)v1, "Fetched localization metadata %s for asset bundle identifier %s", (uint8_t *)v6);
    OUTLINED_FUNCTION_35_5();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  OUTLINED_FUNCTION_19_6();
  v9 = v0[160];
  v10 = v0[159];
  v11 = v0[156];
  swift_retain();
  v12 = OnDeviceInferenceProvider.promptTokenTable(from:)(v11);
  OUTLINED_FUNCTION_51_1();
  OnDeviceInferenceProvider.localizationOverrideMap(from:)(v10);
  if (!v9)
  {
    v13 = OUTLINED_FUNCTION_20_2();
    MEMORY[0x2495A92C8](v13);
    OUTLINED_FUNCTION_423();
    dispatch thunk of TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)();
    v14 = v0[106];
    v100 = *(void (**)(uint64_t, uint64_t))(v0[112] + 8);
    v100(v0[115], v0[111]);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))MEMORY[0x24BEB87B8]);
    v101 = Dictionary.init(dictionaryLiteral:)();
    v15 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v12 + 32);
    if (-v17 < 64)
      v16 = ~(-1 << -(char)v17);
    v18 = v16 & *(_QWORD *)(v12 + 64);
    v105 = (unint64_t)(63 - v17) >> 6;
    v103 = v12 + 64;
    while (!v18)
    {
      v24 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return;
      }
      if (v24 >= v105)
      {
        v26 = v15;
      }
      else
      {
        v25 = *(_QWORD *)(v103 + 8 * v24);
        if (v25)
          goto LABEL_16;
        v26 = v15 + 1;
        if (v15 + 2 < v105)
        {
          v25 = *(_QWORD *)(v103 + 8 * (v15 + 2));
          if (v25)
          {
            v24 = v15 + 2;
            goto LABEL_16;
          }
          v26 = v15 + 2;
          if (v15 + 3 < v105)
          {
            v25 = *(_QWORD *)(v103 + 8 * (v15 + 3));
            if (v25)
            {
              v24 = v15 + 3;
LABEL_16:
              v18 = (v25 - 1) & v25;
              v20 = __clz(__rbit64(v25)) + (v24 << 6);
              v15 = v24;
LABEL_12:
              v21 = v0[109];
              (*(void (**)(uint64_t, unint64_t, _QWORD))(v14 + 16))(v21, *(_QWORD *)(v12 + 48) + *(_QWORD *)(v14 + 72) * v20, v0[105]);
              v22 = *(_QWORD *)(v12 + 56) + 32 * v20;
              v23 = OUTLINED_FUNCTION_331_0();
              outlined init with copy of Any(v22, v21 + *(int *)(v23 + 48));
              __swift_storeEnumTagSinglePayload(v21, 0, 1, v23);
              goto LABEL_19;
            }
            v24 = v15 + 4;
            v26 = v15 + 3;
            if (v15 + 4 < v105)
            {
              v25 = *(_QWORD *)(v103 + 8 * v24);
              if (v25)
                goto LABEL_16;
              while (v15 + 5 < v105)
              {
                v25 = *(_QWORD *)(v12 + 104 + 8 * v15++);
                if (v25)
                {
                  v24 = v15 + 4;
                  goto LABEL_16;
                }
              }
              v26 = v105 - 1;
            }
          }
        }
      }
      v27 = v0[109];
      v28 = OUTLINED_FUNCTION_331_0();
      OUTLINED_FUNCTION_395_0(v27, v29, v30, v28);
      v18 = 0;
      v15 = v26;
LABEL_19:
      v31 = v0[110];
      outlined init with take of (key: Prompt.SpecialToken, value: Any)?(v0[109], v31);
      v32 = OUTLINED_FUNCTION_331_0();
      OUTLINED_FUNCTION_28_1(v31, 1, v32);
      if (v33)
      {
        v55 = OUTLINED_FUNCTION_224_1();
        MEMORY[0x2495A92C8](v55);
        swift_bridgeObjectRetain();
        v56 = Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)();
        v100(v0[114], v0[111]);
        OUTLINED_FUNCTION_116_0();
        OUTLINED_FUNCTION_161();
        v57 = *(_QWORD *)(v56 + 16);
        if (v57)
        {
          v58 = v0[94];
          v111 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v59 = v56 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
          v110 = *(_QWORD *)(v58 + 72);
          v60 = v58;
          v107 = *(uint64_t (**)(uint64_t))(v58 + 16);
          do
          {
            v61 = v0[95];
            v62 = OUTLINED_FUNCTION_351_0();
            v63 = v107(v62);
            v64 = MEMORY[0x2495A9478](v63);
            v66 = v65;
            OUTLINED_FUNCTION_220_1(v61, *(uint64_t (**)(uint64_t, uint64_t))(v60 + 8));
            v67 = v111;
            if ((OUTLINED_FUNCTION_432() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v67 = v111;
            }
            v68 = *(_QWORD *)(v67 + 16);
            if (v68 >= *(_QWORD *)(v67 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v67 = v111;
            }
            *(_QWORD *)(v67 + 16) = v68 + 1;
            v69 = v67 + 16 * v68;
            *(_QWORD *)(v69 + 32) = v64;
            *(_QWORD *)(v69 + 40) = v66;
            v59 += v110;
            --v57;
          }
          while (v57);
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_7_0();
          v67 = MEMORY[0x24BEE4AF8];
        }
        v70 = v0[113];
        v99 = v0[111];
        v102 = v0[104];
        v104 = v0[103];
        v106 = v0[102];
        v71 = v0[96];
        v72 = v0[74];
        OUTLINED_FUNCTION_116_0();
        v0[53] = v67;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
        BidirectionalCollection<>.joined(separator:)();
        v0[54] = v72;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceProvider.Type);
        String.init<A>(describing:)();
        v73 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
        v74 = objc_msgSend(v73, sel_operatingSystemVersionString);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        v75 = OUTLINED_FUNCTION_295_0();
        v76 = MEMORY[0x2495A94A8](v75);
        MEMORY[0x2495A92C8](v76);
        Prompt.description.getter();
        v100(v70, v99);
        OUTLINED_FUNCTION_65_0();
        Dictionary.init(dictionaryLiteral:)();
        Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:)();
        OUTLINED_FUNCTION_50_2();
        OUTLINED_FUNCTION_117_2(v71, v102, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 16));
        __swift_storeEnumTagSinglePayload(v71, 0, 1, v106);
        OUTLINED_FUNCTION_351_0();
        CountTokensResponse.init(count:renderedPrompt:)();
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse, (void (*)(uint64_t))MEMORY[0x24BEB83D0]);
        v0[48] = static Serialization.encode<A>(_:)();
        v0[49] = v77;
        v78 = v0[137];
        v79 = v0[100];
        v80 = v0[99];
        v81 = v0[98];
        OUTLINED_FUNCTION_420(v0[134]);
        OUTLINED_FUNCTION_196_1(v80, v79, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 16));
        Logger.logObject.getter();
        v82 = OUTLINED_FUNCTION_176();
        v83 = OUTLINED_FUNCTION_73_1(v82);
        v84 = (void (*)(uint64_t))v0[140];
        v85 = v0[99];
        v86 = v0[98];
        if (v83)
        {
          v108 = v0[97];
          v87 = OUTLINED_FUNCTION_4_11();
          v111 = OUTLINED_FUNCTION_4_11();
          *(_DWORD *)v87 = 136315394;
          lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
          v88 = OUTLINED_FUNCTION_74_2();
          v0[56] = OUTLINED_FUNCTION_359_0(v88, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_51_1();
          OUTLINED_FUNCTION_350();
          OUTLINED_FUNCTION_198_1();
          *(_WORD *)(v87 + 12) = 2048;
          v90 = CountTokensResponse.count.getter();
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v108);
          v0[57] = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_124_0(&dword_248CAA000, v78, (os_log_type_t)v79, "Successfully handled one shot request %s, token count %ld", (uint8_t *)v87);
          OUTLINED_FUNCTION_34_3();
          OUTLINED_FUNCTION_0_1();
        }
        v91 = *(void (**)(_QWORD, _QWORD))(v86 + 8);
        v91(v0[99], v0[97]);
        v92 = OUTLINED_FUNCTION_350();
        v84(v92);

        v0[161] = v91;
        v0[162] = OUTLINED_FUNCTION_279(v0[73]);
        goto LABEL_6;
      }
      (*(void (**)(_QWORD))(v14 + 32))(v0[108]);
      v34 = (_OWORD *)OUTLINED_FUNCTION_295_0();
      outlined init with take of Any(v34, v35);
      if (OUTLINED_FUNCTION_54_3())
      {
        v94 = v0[42];
        v95 = v0[43];
        v93 = *(void (**)(_QWORD))(v14 + 16);
        ((void (*)(_QWORD, _QWORD, _QWORD))v93)(v0[107], v0[108], v0[105]);
        isUnique = swift_isUniquelyReferenced_nonNull_native();
        v111 = v101;
        specialized __RawDictionaryStorage.find<A>(_:)();
        v97 = v36;
        OUTLINED_FUNCTION_419_0();
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_57;
        v41 = v37;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, String>);
        v42 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v40);
        v101 = v111;
        v43 = v97;
        if (v42)
        {
          specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v41 & 1) != (v45 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            return;
          }
          v43 = v44;
        }
        if ((v41 & 1) != 0)
        {
          v46 = (_QWORD *)(*(_QWORD *)(v111 + 56) + 16 * v43);
          swift_bridgeObjectRelease();
          *v46 = v94;
          v46[1] = v95;
        }
        else
        {
          OUTLINED_FUNCTION_95(v111 + 8 * (v43 >> 6));
          v93(v47 + *(_QWORD *)(v14 + 72) * v43);
          v48 = (_QWORD *)(*(_QWORD *)(v111 + 56) + 16 * v43);
          *v48 = v94;
          v48[1] = v95;
          v49 = *(_QWORD *)(v101 + 16);
          v50 = __OFADD__(v49, 1);
          v51 = v49 + 1;
          if (v50)
            goto LABEL_58;
          *(_QWORD *)(v101 + 16) = v51;
        }
        v98 = v0[108];
        v52 = v0[107];
        v53 = v0[105];
        OUTLINED_FUNCTION_74();
        v54 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v54(v52, v53);
        v54(v98, v53);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v14 + 8))(v0[108], v0[105]);
      }
    }
    v19 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v20 = v19 | (v15 << 6);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_119_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  swift_bridgeObjectRelease();
  v0[166] = v0[148];
  v0[165] = v9;
  OUTLINED_FUNCTION_29_4();
LABEL_6:
  swift_task_switch();
}

uint64_t OnDeviceInferenceProvider.promptTokenTable(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  unint64_t v47;
  char v48;
  Swift::Bool v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v2 = type metadata accessor for Prompt.SpecialToken();
  v71 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_32_0();
  v72 = v4;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v67 - v6;
  v8 = MEMORY[0x24BEE0D00];
  if (!a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Prompt.SpecialToken, Any)>);
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, Any));
    OUTLINED_FUNCTION_445();
    v61 = v60 & ~v59;
    v62 = OUTLINED_FUNCTION_400();
    *(_OWORD *)(v62 + 16) = xmmword_248D75A50;
    v63 = (uint64_t *)(v62 + v61 + *(int *)(v58 + 48));
    static Prompt.SpecialToken.endPrompt.getter();
    OUTLINED_FUNCTION_403_0();
    OUTLINED_FUNCTION_356_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<String>);
    Overridable.wrappedValue.getter();
    v64 = v76;
    v65 = v77;
    v63[3] = v8;
    if (!v65)
    {
      v64 = 0x3E616F653CLL;
      v65 = 0xE500000000000000;
    }
    *v63 = v64;
    v63[1] = v65;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))MEMORY[0x24BEB87B8]);
    OUTLINED_FUNCTION_390();
    return Dictionary.init(dictionaryLiteral:)();
  }
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))MEMORY[0x24BEB87B8]);
  OUTLINED_FUNCTION_92_1();
  v9 = Dictionary.init(dictionaryLiteral:)();
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 64);
  v67 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v68 = (unint64_t)(v12 + 63) >> 6;
  v69 = a1;
  v70 = v2;
  while (v14)
  {
    v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v16 = v15 | (v10 << 6);
    v17 = MEMORY[0x24BEE0D00];
LABEL_22:
    v73 = v10;
    v28 = *(_QWORD *)(a1 + 56) + 24 * v16;
    v29 = *(_QWORD *)v28;
    if (*(_BYTE *)(v28 + 16) == 1)
    {
      v30 = *(_QWORD *)(v28 + 8);
      OUTLINED_FUNCTION_334_0();
      OUTLINED_FUNCTION_92_1();
      OUTLINED_FUNCTION_334_0();
      OUTLINED_FUNCTION_338_0();
      v78 = v17;
      v76 = v29;
      v77 = v30;
      v31 = OUTLINED_FUNCTION_430();
      v74 = v9;
      OUTLINED_FUNCTION_389_0();
      OUTLINED_FUNCTION_419_0();
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      v37 = v32;
      v38 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, Any>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v31, v36))
      {
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_52;
        v37 = v39;
      }
      v9 = v74;
      if ((v38 & 1) != 0)
      {
        __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v74 + 56) + 32 * v37);
        OUTLINED_FUNCTION_428();
      }
      else
      {
        OUTLINED_FUNCTION_95(v74 + 8 * (v37 >> 6));
        OUTLINED_FUNCTION_117_2(v52 + *(_QWORD *)(v71 + 72) * v37, v72, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 16));
        outlined init with take of Any(v75, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v37));
        v53 = *(_QWORD *)(v9 + 16);
        v19 = __OFADD__(v53, 1);
        v54 = v53 + 1;
        if (v19)
          goto LABEL_49;
        *(_QWORD *)(v9 + 16) = v54;
        v9 = v74;
      }
      OUTLINED_FUNCTION_74();
      OUTLINED_FUNCTION_220_1(v72, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
      outlined consume of MetadataSpecialToken(v29, v30, 1);
      a1 = v69;
      v10 = v73;
    }
    else
    {
      OUTLINED_FUNCTION_92_1();
      OUTLINED_FUNCTION_338_0();
      v78 = MEMORY[0x24BEE1768];
      v76 = v29;
      v41 = OUTLINED_FUNCTION_430();
      v74 = v9;
      OUTLINED_FUNCTION_389_0();
      OUTLINED_FUNCTION_419_0();
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        goto LABEL_47;
      v47 = v42;
      v48 = v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, Any>);
      v49 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v41, v46);
      a1 = v69;
      if (v49)
      {
        OUTLINED_FUNCTION_389_0();
        if ((v48 & 1) != (v51 & 1))
          goto LABEL_52;
        v47 = v50;
      }
      v9 = v74;
      if ((v48 & 1) != 0)
      {
        __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v74 + 56) + 32 * v47);
        OUTLINED_FUNCTION_428();
      }
      else
      {
        OUTLINED_FUNCTION_95(v74 + 8 * (v47 >> 6));
        OUTLINED_FUNCTION_274(v55 + *(_QWORD *)(v71 + 72) * v47, (uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 16));
        outlined init with take of Any(v75, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v47));
        v56 = *(_QWORD *)(v9 + 16);
        v19 = __OFADD__(v56, 1);
        v57 = v56 + 1;
        if (v19)
          goto LABEL_50;
        *(_QWORD *)(v9 + 16) = v57;
        v9 = v74;
      }
      OUTLINED_FUNCTION_74();
      OUTLINED_FUNCTION_333((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
      v10 = v73;
    }
  }
  v17 = MEMORY[0x24BEE0D00];
  if (__OFADD__(v10, 1))
    goto LABEL_48;
  OUTLINED_FUNCTION_436();
  if (v18 == v19)
  {
LABEL_41:
    OUTLINED_FUNCTION_443();
    return v9;
  }
  OUTLINED_FUNCTION_435();
  if (v21)
    goto LABEL_21;
  if (v20 + 1 >= v68)
    goto LABEL_41;
  if (*(_QWORD *)(v67 + 8 * (v20 + 1)))
    goto LABEL_21;
  if (v20 + 2 >= v68)
    goto LABEL_41;
  if (*(_QWORD *)(v67 + 8 * (v20 + 2)))
    goto LABEL_21;
  OUTLINED_FUNCTION_436();
  if (v18 == v19)
    goto LABEL_41;
  OUTLINED_FUNCTION_435();
  if (v23)
  {
LABEL_21:
    OUTLINED_FUNCTION_71_0();
    v14 = v26 & v25;
    v16 = v27 + (v10 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v24 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v24 >= v68)
      goto LABEL_41;
    ++v22;
    if (*(_QWORD *)(v67 + 8 * v24))
      goto LABEL_21;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t OnDeviceInferenceProvider.localizationOverrideMap(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;

  v2 = type metadata accessor for Prompt.SpecialToken();
  v78 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_31_0();
  v77 = v4;
  v5 = type metadata accessor for TokenGenerationError.Context();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  if (!a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))MEMORY[0x24BEB87B8]);
    return OUTLINED_FUNCTION_413_0();
  }
  v72 = v7;
  v73 = v8;
  v74 = v6;
  OUTLINED_FUNCTION_21_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, (void (*)(uint64_t))MEMORY[0x24BEB87B8]);
  v9 = OUTLINED_FUNCTION_413_0();
  v75 = a1 + 64;
  OUTLINED_FUNCTION_293_0();
  v13 = v12 & v11;
  v76 = (unint64_t)(v14 + 63) >> 6;
  v71 = v2;
  v81 = a1;
LABEL_3:
  v82 = v9;
  if (v13)
  {
    v79 = (v13 - 1) & v13;
    v80 = v10;
    v15 = __clz(__rbit64(v13)) | (v10 << 6);
LABEL_20:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_85_1();
    v28 = Dictionary.init(dictionaryLiteral:)();
    v83 = v27 + 64;
    OUTLINED_FUNCTION_293_0();
    v32 = v31 & v30;
    v84 = (unint64_t)(v33 + 63) >> 6;
    v85 = v27;
    if ((v31 & v30) != 0)
    {
LABEL_21:
      v34 = __clz(__rbit64(v32));
      v35 = (v32 - 1) & v32;
      v36 = v34 | (v29 << 6);
      goto LABEL_35;
    }
    while (1)
    {
      v37 = v29 + 1;
      if (__OFADD__(v29, 1))
        goto LABEL_53;
      if (v37 >= v84)
        goto LABEL_46;
      if (!*(_QWORD *)(v83 + 8 * v37))
      {
        if (v29 + 2 >= v84)
          goto LABEL_46;
        if (!*(_QWORD *)(v83 + 8 * (v29 + 2)))
        {
          if (v29 + 3 >= v84)
            goto LABEL_46;
          if (!*(_QWORD *)(v83 + 8 * (v29 + 3)))
          {
            v38 = v29 + 4;
            if (v29 + 4 >= v84)
            {
LABEL_46:
              swift_release();
              Prompt.SpecialToken.init(identifier:)();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v77, isUniquelyReferenced_nonNull_native);
              v9 = v82;
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v71);
              v10 = v80;
              a1 = v81;
              v13 = v79;
              goto LABEL_3;
            }
            if (!*(_QWORD *)(v83 + 8 * v38))
              break;
          }
        }
      }
LABEL_34:
      OUTLINED_FUNCTION_71_0();
      v35 = v41 & v40;
      v36 = v42 + (v29 << 6);
LABEL_35:
      v43 = *(_QWORD *)(v27 + 56) + 24 * v36;
      if (*(_BYTE *)(v43 + 16) != 1)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_161();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_311();
        TokenGenerationError.Context.init(debugDescription:underlyingError:)();
        v9 = type metadata accessor for TokenGenerationError();
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v65, v72, v74);
        v66 = OUTLINED_FUNCTION_385_0();
        v67(v66);
        swift_willThrow();
        v68 = OUTLINED_FUNCTION_423();
        v69(v68);
        swift_release();
        swift_release();
        return v9;
      }
      v86 = v35;
      v87 = v29;
      v44 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v36);
      v45 = *v44;
      v46 = v44[1];
      v48 = *(_QWORD *)v43;
      v47 = *(_QWORD *)(v43 + 8);
      OUTLINED_FUNCTION_335_0();
      OUTLINED_FUNCTION_335_0();
      OUTLINED_FUNCTION_85_1();
      v49 = swift_isUniquelyReferenced_nonNull_native();
      v88 = (_QWORD *)v28;
      specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      OUTLINED_FUNCTION_419_0();
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v55 = v50;
      v56 = v51;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v49, v54))
      {
        v57 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_57;
        v55 = v57;
      }
      v28 = (uint64_t)v88;
      if ((v56 & 1) != 0)
      {
        v59 = (uint64_t *)(v88[7] + 16 * v55);
        swift_bridgeObjectRelease();
        *v59 = v48;
        v59[1] = v47;
      }
      else
      {
        v88[(v55 >> 6) + 8] |= 1 << v55;
        v60 = (uint64_t *)(v88[6] + 16 * v55);
        *v60 = v45;
        v60[1] = v46;
        v61 = (uint64_t *)(v88[7] + 16 * v55);
        *v61 = v48;
        v61[1] = v47;
        v62 = v88[2];
        v17 = __OFADD__(v62, 1);
        v63 = v62 + 1;
        if (v17)
          goto LABEL_52;
        v88[2] = v63;
        OUTLINED_FUNCTION_85_1();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MetadataSpecialToken(v48, v47, 1);
      v27 = v85;
      v32 = v86;
      v29 = v87;
      if (v86)
        goto LABEL_21;
    }
    while (1)
    {
      v39 = v38 + 1;
      if (__OFADD__(v38, 1))
        break;
      if (v39 >= v84)
        goto LABEL_46;
      ++v38;
      if (*(_QWORD *)(v83 + 8 * v39))
        goto LABEL_34;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (!__OFADD__(v10, 1))
  {
    OUTLINED_FUNCTION_436();
    if (v16 == v17)
      goto LABEL_50;
    OUTLINED_FUNCTION_435();
    if (!v19)
    {
      if (v18 + 1 >= v76)
        goto LABEL_50;
      if (*(_QWORD *)(v75 + 8 * (v18 + 1)))
        goto LABEL_19;
      if (v18 + 2 >= v76)
      {
LABEL_50:
        swift_release();
        return v9;
      }
      if (!*(_QWORD *)(v75 + 8 * (v18 + 2)))
      {
        OUTLINED_FUNCTION_436();
        if (v16 == v17)
          goto LABEL_50;
        OUTLINED_FUNCTION_435();
        if (!v21)
        {
          do
          {
            v22 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_56;
            if (v22 >= v76)
              goto LABEL_50;
            ++v20;
          }
          while (!*(_QWORD *)(v75 + 8 * v22));
        }
      }
    }
LABEL_19:
    OUTLINED_FUNCTION_71_0();
    v79 = v24 & v23;
    v80 = v25;
    v15 = v26 + (v25 << 6);
    goto LABEL_20;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  v4[6] = swift_task_alloc();
  v5 = type metadata accessor for Token();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  type metadata accessor for DataStreamState(0);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_41_5();
  v2 = *(_QWORD *)(v0 + 88);
  outlined init with copy of DataStreamState(*(_QWORD *)(v0 + 24), v2);
  v3 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    specialized Collection.first.getter(v3, v5);
    result = OUTLINED_FUNCTION_28_1(v5, 1, v4);
    if (!v7)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
      if (*(_QWORD *)(v3 + 16))
      {
        v8 = *(_QWORD *)(v0 + 80);
        v14 = *(_QWORD *)(v0 + 88);
        v9 = *(_QWORD *)(v0 + 40);
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        UUID.uuidString.getter();
        UUID.uuidString.getter();
        Token.text.getter();
        PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)();
        *(_QWORD *)(v0 + 96) = *(_QWORD *)(v9 + 176);
        outlined init with copy of DataStreamState(v14, v8);
        OUTLINED_FUNCTION_187_1();
        return OUTLINED_FUNCTION_71_4();
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_379_0();
    OUTLINED_FUNCTION_348_0(v10, type metadata accessor for DataStreamState);
    v11 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
    OUTLINED_FUNCTION_395_0(v1, v12, v13, v11);
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;

  DataStreamStateManager.updateState(uuid:state:)();
  OUTLINED_FUNCTION_195_1(v0, type metadata accessor for DataStreamState);
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 64));
  OUTLINED_FUNCTION_379_0();
  OUTLINED_FUNCTION_348_0(v2, type metadata accessor for DataStreamState);
  v3 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v3);
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *(_QWORD *)(v8 + 1168) = v30;
  *(_OWORD *)(v8 + 1152) = v29;
  *(_OWORD *)(v8 + 1136) = v28;
  *(_OWORD *)(v8 + 1120) = v27;
  *(_OWORD *)(v8 + 1104) = v26;
  *(_OWORD *)(v8 + 1088) = v25;
  *(_BYTE *)(v8 + 2204) = v24;
  *(_QWORD *)(v8 + 1080) = a8;
  *(_QWORD *)(v8 + 1072) = a7;
  *(_QWORD *)(v8 + 1064) = a6;
  *(_QWORD *)(v8 + 1056) = a5;
  *(_QWORD *)(v8 + 1048) = a4;
  *(_QWORD *)(v8 + 1040) = a3;
  *(_QWORD *)(v8 + 1032) = a2;
  *(_QWORD *)(v8 + 1024) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FinishReason?);
  *(_QWORD *)(v8 + 1176) = swift_task_alloc();
  v9 = type metadata accessor for FinishReason();
  *(_QWORD *)(v8 + 1184) = v9;
  *(_QWORD *)(v8 + 1192) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 1200) = swift_task_alloc();
  *(_QWORD *)(v8 + 1208) = swift_task_alloc();
  type metadata accessor for Usage();
  *(_QWORD *)(v8 + 1216) = swift_task_alloc();
  v10 = type metadata accessor for TokenGenerationError();
  *(_QWORD *)(v8 + 1224) = v10;
  *(_QWORD *)(v8 + 1232) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 1240) = swift_task_alloc();
  *(_QWORD *)(v8 + 1248) = swift_task_alloc();
  *(_QWORD *)(v8 + 1256) = swift_task_alloc();
  *(_QWORD *)(v8 + 1264) = swift_task_alloc();
  v11 = type metadata accessor for Token();
  *(_QWORD *)(v8 + 1272) = v11;
  *(_QWORD *)(v8 + 1280) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 1288) = swift_task_alloc();
  v12 = type metadata accessor for PromptCompletionEventCandidateTextDelta();
  *(_QWORD *)(v8 + 1296) = v12;
  *(_QWORD *)(v8 + 1304) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 1312) = swift_task_alloc();
  *(_QWORD *)(v8 + 1320) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  *(_QWORD *)(v8 + 1328) = swift_task_alloc();
  *(_QWORD *)(v8 + 1336) = swift_task_alloc();
  *(_QWORD *)(v8 + 1344) = swift_task_alloc();
  *(_QWORD *)(v8 + 1352) = swift_task_alloc();
  v13 = type metadata accessor for ModelInformation();
  *(_QWORD *)(v8 + 1360) = v13;
  *(_QWORD *)(v8 + 1368) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 1376) = swift_task_alloc();
  *(_QWORD *)(v8 + 1384) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataStreamState?);
  *(_QWORD *)(v8 + 1392) = swift_task_alloc();
  v14 = type metadata accessor for TokenGenerationError.Context();
  *(_QWORD *)(v8 + 1400) = v14;
  *(_QWORD *)(v8 + 1408) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 1416) = swift_task_alloc();
  *(_QWORD *)(v8 + 1424) = swift_task_alloc();
  *(_QWORD *)(v8 + 1432) = swift_task_alloc();
  *(_QWORD *)(v8 + 1440) = swift_task_alloc();
  v15 = type metadata accessor for StopSequenceMonitor();
  *(_QWORD *)(v8 + 1448) = v15;
  *(_QWORD *)(v8 + 1456) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 1464) = swift_task_alloc();
  v16 = type metadata accessor for SamplingParameters();
  *(_QWORD *)(v8 + 1472) = v16;
  *(_QWORD *)(v8 + 1480) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v8 + 1488) = swift_task_alloc();
  *(_QWORD *)(v8 + 1496) = swift_task_alloc();
  v17 = type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment();
  *(_QWORD *)(v8 + 1504) = v17;
  *(_QWORD *)(v8 + 1512) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v8 + 1520) = swift_task_alloc();
  v18 = type metadata accessor for InferenceError.Context();
  *(_QWORD *)(v8 + 1528) = v18;
  *(_QWORD *)(v8 + 1536) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 1544) = swift_task_alloc();
  v19 = type metadata accessor for Prompt();
  *(_QWORD *)(v8 + 1552) = v19;
  *(_QWORD *)(v8 + 1560) = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v8 + 1568) = swift_task_alloc();
  *(_QWORD *)(v8 + 1576) = type metadata accessor for DataStreamState(0);
  *(_QWORD *)(v8 + 1584) = swift_task_alloc();
  *(_QWORD *)(v8 + 1592) = swift_task_alloc();
  *(_QWORD *)(v8 + 1600) = swift_task_alloc();
  *(_QWORD *)(v8 + 1608) = swift_task_alloc();
  *(_QWORD *)(v8 + 1616) = swift_task_alloc();
  *(_QWORD *)(v8 + 1624) = swift_task_alloc();
  v20 = type metadata accessor for CompletePromptRequest();
  *(_QWORD *)(v8 + 1632) = v20;
  *(_QWORD *)(v8 + 1640) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v8 + 1648) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StreamingRequestPayload?);
  *(_QWORD *)(v8 + 1656) = swift_task_alloc();
  v21 = type metadata accessor for StreamingRequestPayload();
  *(_QWORD *)(v8 + 1664) = v21;
  *(_QWORD *)(v8 + 1672) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v8 + 1680) = swift_task_alloc();
  *(_QWORD *)(v8 + 1688) = swift_task_alloc();
  *(_QWORD *)(v8 + 1696) = swift_task_alloc();
  *(_QWORD *)(v8 + 1704) = swift_task_alloc();
  v22 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 1712) = v22;
  *(_QWORD *)(v8 + 1720) = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v8 + 1728) = swift_task_alloc();
  *(_QWORD *)(v8 + 1736) = swift_task_alloc();
  *(_QWORD *)(v8 + 1744) = swift_task_alloc();
  *(_QWORD *)(v8 + 1752) = swift_task_alloc();
  *(_QWORD *)(v8 + 1760) = swift_task_alloc();
  *(_QWORD *)(v8 + 1768) = swift_task_alloc();
  *(_QWORD *)(v8 + 1776) = swift_task_alloc();
  *(_QWORD *)(v8 + 1784) = swift_task_alloc();
  *(_QWORD *)(v8 + 1792) = swift_task_alloc();
  *(_QWORD *)(v8 + 1800) = swift_task_alloc();
  *(_QWORD *)(v8 + 1808) = swift_task_alloc();
  *(_QWORD *)(v8 + 1816) = swift_task_alloc();
  *(_QWORD *)(v8 + 1824) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  void *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  os_log_type_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unsigned int (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t (*v99)(void);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;

  OUTLINED_FUNCTION_22();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v1 + 1832) = Strong;
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v1 + 1048);
    v5 = *(os_unfair_lock_s **)(v4 + 24);
    *(_QWORD *)(v1 + 1840) = v5;
    v6 = OUTLINED_FUNCTION_93_2();
    *(_QWORD *)(v6 + 16) = v4;
    *(_BYTE *)(v6 + 24) = 1;
    v7 = OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:), v6, v5);
    *(_BYTE *)(v1 + 2205) = v7 & 1;
    OUTLINED_FUNCTION_17_0();
    if ((v7 & 1) != 0 || (OUTLINED_FUNCTION_22(), OUTLINED_FUNCTION_373_0(), !v8))
    {
      *(_QWORD *)(v1 + 1944) = v4;
      *(_QWORD *)(v1 + 1952) = *(_QWORD *)(*(_QWORD *)(v1 + 1832) + 176);
      OUTLINED_FUNCTION_22_4();
LABEL_11:
      OUTLINED_FUNCTION_187_1();
      return swift_task_switch();
    }
    v9 = *(_QWORD *)(v1 + 1056);
    OUTLINED_FUNCTION_4_0();
    *(_BYTE *)(v9 + 16) = 0;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type StreamingRequestPayload and conformance StreamingRequestPayload, (void (*)(uint64_t))MEMORY[0x24BEB84B0]);
    OUTLINED_FUNCTION_357();
    static Serialization.decode<A>(_:from:)();
    if (v4)
    {
      v10 = *(_QWORD *)(v1 + 1664);
      v11 = *(_QWORD *)(v1 + 1656);
      OUTLINED_FUNCTION_102_0();
      v12 = __swift_storeEnumTagSinglePayload(v11, 1, 1, v10);
      OUTLINED_FUNCTION_226(v12, &demangling cache variable for type metadata for StreamingRequestPayload?);
      if (one-time initialization token for device != -1)
        swift_once();
      v13 = *(_QWORD *)(v1 + 1816);
      v14 = *(_QWORD *)(v1 + 1720);
      v15 = *(NSObject **)(v1 + 1712);
      v16 = *(_QWORD *)(v1 + 1040);
      v17 = OUTLINED_FUNCTION_15_4();
      __swift_project_value_buffer(v17, (uint64_t)static Log.device);
      OUTLINED_FUNCTION_99(v13, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
      Logger.logObject.getter();
      v18 = OUTLINED_FUNCTION_156();
      v19 = OUTLINED_FUNCTION_47_5(v18);
      v20 = *(_QWORD *)(v1 + 1816);
      if (v19)
      {
        v108 = *(_QWORD *)(v1 + 1720);
        v21 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v21 = 136315138;
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v22 = OUTLINED_FUNCTION_380();
        *(_QWORD *)(v1 + 888) = OUTLINED_FUNCTION_111_1(v22, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_161();
        OUTLINED_FUNCTION_173(v20, *(uint64_t (**)(uint64_t, uint64_t))(v108 + 8));
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v15, (os_log_type_t)v16, "Failed to handle request %s, error decoding request payload", v21);
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_173(*(_QWORD *)(v1 + 1816), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 1720) + 8));

      v64 = *(_QWORD *)(v1 + 1440);
      v65 = *(_QWORD *)(v1 + 1408);
      v66 = *(_QWORD *)(v1 + 1232);
      v109 = *(_QWORD *)(v1 + 1048);
      OUTLINED_FUNCTION_328();
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
      v67 = OUTLINED_FUNCTION_7_11();
      v69 = OUTLINED_FUNCTION_383(v67, v68);
      OUTLINED_FUNCTION_274(v69, v70, v71);
      OUTLINED_FUNCTION_221_1(*MEMORY[0x24BEB8068], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 104));
      swift_willThrow();
      OUTLINED_FUNCTION_333(v64, *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
      v72 = OUTLINED_FUNCTION_93_2();
      *(_QWORD *)(v72 + 16) = v109;
      *(_BYTE *)(v72 + 24) = 0;
    }
    else
    {
      v41 = *(_QWORD *)(v1 + 1704);
      v42 = *(_QWORD *)(v1 + 1696);
      v43 = *(_QWORD *)(v1 + 1672);
      v44 = *(_QWORD *)(v1 + 1664);
      v45 = *(_QWORD *)(v1 + 1656);
      OUTLINED_FUNCTION_209_1(v45);
      OUTLINED_FUNCTION_274(v41, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32));
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
      v46(v42, v41, v44);
      v47 = OUTLINED_FUNCTION_318_0();
      if (v48(v47) == *MEMORY[0x24BEB84A8])
      {
        v49 = *(_QWORD *)(v1 + 1696);
        v50 = *(_QWORD *)(v1 + 1648);
        v51 = *(_QWORD *)(v1 + 1640);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1672) + 96))(v49, *(_QWORD *)(v1 + 1664));
        OUTLINED_FUNCTION_26_0(v50, v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32));
        if (one-time initialization token for device != -1)
          swift_once();
        v52 = *(_QWORD *)(v1 + 1808);
        v53 = *(_QWORD *)(v1 + 1720);
        v54 = *(_QWORD *)(v1 + 1040);
        v55 = OUTLINED_FUNCTION_15_4();
        *(_QWORD *)(v1 + 1848) = __swift_project_value_buffer(v55, (uint64_t)static Log.device);
        v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
        *(_QWORD *)(v1 + 1856) = v56;
        OUTLINED_FUNCTION_99(v52, v54, v56);
        v57 = OUTLINED_FUNCTION_434();
        v58 = static os_log_type_t.info.getter();
        v59 = OUTLINED_FUNCTION_155_0(v57);
        v60 = *(_QWORD *)(v1 + 1720);
        if (v59)
        {
          v61 = (uint8_t *)OUTLINED_FUNCTION_4_11();
          OUTLINED_FUNCTION_4_11();
          *(_DWORD *)v61 = 136315138;
          lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
          v62 = OUTLINED_FUNCTION_380_0();
          *(_QWORD *)(v1 + 1016) = OUTLINED_FUNCTION_111_1(v62, v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_161();
          OUTLINED_FUNCTION_310_0();
          OUTLINED_FUNCTION_37_2(&dword_248CAA000, v57, v58, "Handling request %s as complete prompt request", v61);
          OUTLINED_FUNCTION_34_3();
          OUTLINED_FUNCTION_0_1();
        }
        OUTLINED_FUNCTION_310_0();

        *(_QWORD *)(v1 + 1864) = v60;
        *(_QWORD *)(v1 + 1872) = *(_QWORD *)(v3 + 176);
        OUTLINED_FUNCTION_22_4();
        goto LABEL_11;
      }
      v110 = v46;
      if (one-time initialization token for device != -1)
        swift_once();
      v106 = *(_QWORD *)(v1 + 1704);
      v73 = *(_QWORD *)(v1 + 1688);
      v74 = *(_QWORD *)(v1 + 1664);
      v75 = OUTLINED_FUNCTION_15_4();
      __swift_project_value_buffer(v75, (uint64_t)static Log.device);
      v76 = OUTLINED_FUNCTION_350();
      OUTLINED_FUNCTION_99(v76, v77, v78);
      v110(v73, v106, v74);
      v79 = Logger.logObject.getter();
      v80 = static os_log_type_t.error.getter();
      v81 = os_log_type_enabled(v79, v80);
      v82 = *(_QWORD *)(v1 + 1792);
      v83 = *(_QWORD *)(v1 + 1720);
      v84 = *(_QWORD *)(v1 + 1688);
      if (v81)
      {
        v103 = *(_QWORD *)(v1 + 1672);
        v100 = *(_QWORD *)(v1 + 1680);
        v101 = *(_QWORD *)(v1 + 1664);
        v104 = v79;
        v85 = OUTLINED_FUNCTION_4_11();
        OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v85 = 136315394;
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v86 = OUTLINED_FUNCTION_50_5();
        *(_QWORD *)(v1 + 904) = OUTLINED_FUNCTION_111_1(v86, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_222_0(v82, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
        *(_WORD *)(v85 + 12) = 2080;
        v110(v100, v84, v101);
        v88 = String.init<A>(describing:)();
        *(_QWORD *)(v1 + 912) = OUTLINED_FUNCTION_111_1(v88, v89);
        OUTLINED_FUNCTION_346();
        OUTLINED_FUNCTION_20_2();
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v84, v101);
        OUTLINED_FUNCTION_124_0(&dword_248CAA000, v104, v80, "Failing request%s unhandled request type %s", (uint8_t *)v85);
        OUTLINED_FUNCTION_35_5();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_222_0(*(_QWORD *)(v1 + 1792), *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
      v90 = OUTLINED_FUNCTION_426();
      v111 = v91;
      ((void (*)(uint64_t))v91)(v90);

      v92 = *(_QWORD *)(v1 + 1664);
      v93 = *(_QWORD *)(v1 + 1440);
      v94 = *(_QWORD *)(v1 + 1408);
      v102 = *(_QWORD *)(v1 + 1704);
      v105 = *(_QWORD *)(v1 + 1696);
      v107 = *(_QWORD *)(v1 + 1048);
      OUTLINED_FUNCTION_270_0();
      *(_QWORD *)(v1 + 800) = v112;
      *(_QWORD *)(v1 + 808) = v113;
      v95._countAndFlagsBits = OUTLINED_FUNCTION_405_0();
      String.append(_:)(v95);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_328();
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
      OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_397_0();
      OUTLINED_FUNCTION_316_0(v96, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 16));
      v97 = OUTLINED_FUNCTION_385_0();
      v98(v97);
      swift_willThrow();
      OUTLINED_FUNCTION_222_0(v93, *(uint64_t (**)(uint64_t, uint64_t))(v94 + 8));
      v111(v102, v92);
      v111(v105, v92);
      v72 = OUTLINED_FUNCTION_93_2();
      *(_QWORD *)(v72 + 16) = v107;
      *(_BYTE *)(v72 + 24) = 0;
    }
    OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v72, v5);
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_17_0();
  }
  else
  {
    if (one-time initialization token for device != -1)
      swift_once();
    v25 = OUTLINED_FUNCTION_33_5();
    OUTLINED_FUNCTION_12_7(v25, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_184_1();
    v26 = OUTLINED_FUNCTION_244_0();
    OUTLINED_FUNCTION_73_1(v26);
    OUTLINED_FUNCTION_371_0();
    if ((v27 & 1) != 0)
    {
      OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_241_1(4.8149e-34);
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v28 = OUTLINED_FUNCTION_203();
      *(_QWORD *)(v1 + 960) = OUTLINED_FUNCTION_111_1(v28, v29);
      OUTLINED_FUNCTION_327();
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_22_9();
      OUTLINED_FUNCTION_20_7(&dword_248CAA000, v30, v31, "Failed to handle request %s, inference provider was destroyed");
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_22_9();

    v32 = *(_QWORD *)(v1 + 1440);
    v33 = *(_QWORD *)(v1 + 1408);
    v34 = *(_QWORD *)(v1 + 1232);
    OUTLINED_FUNCTION_328();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    v35 = OUTLINED_FUNCTION_11_0();
    v37 = v36;
    v38 = OUTLINED_FUNCTION_383(v35, v36);
    OUTLINED_FUNCTION_117_2(v38, v39, v40);
    OUTLINED_FUNCTION_99(v37, *MEMORY[0x24BEB8070], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 104));
    swift_willThrow();
    OUTLINED_FUNCTION_220_1(v32, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  v99 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return v99();
}

{
  DataStreamStateManager.createState(uuid:isOneShot:loggingIdentifier:onBehalfOfUserIdentifier:)();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0[229] + 56), *(_QWORD *)(v0[229] + 80));
  v1 = (_QWORD *)swift_task_alloc();
  v0[235] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  v2 = OUTLINED_FUNCTION_247_1(v0[206]);
  return OnDeviceInferenceContextFactory.createInferenceContext(request:configuration:isOneShot:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_407_0();
  *(_QWORD *)(v2 + 1888) = v1;
  *(_QWORD *)(v2 + 1896) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[236];
  v2 = v0[229];
  v3 = (_QWORD *)v0[203];
  v4 = v0[140];
  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v4 + 16) = v1;
  OUTLINED_FUNCTION_206_0();
  OUTLINED_FUNCTION_30();
  v5 = *(_QWORD *)(v1 + 104);
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_7_0();
  *v3 = v5;
  v0[238] = *(_QWORD *)(v2 + 176);
  OUTLINED_FUNCTION_22_4();
  OUTLINED_FUNCTION_187_1();
  return OUTLINED_FUNCTION_193_1();
}

{
  OUTLINED_FUNCTION_191_1();
  DataStreamStateManager.startPromptProcessingInstrumenter(uuid:onBehalfOfUserIdentifier:)();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;

  DataStreamStateManager.endPromptProcessingInstrumenter(uuid:state:)();
  OUTLINED_FUNCTION_195_1(v0, type metadata accessor for DataStreamState);
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[236];
  v14 = v0[229];
  v15 = v0[203];
  v16 = v0[202];
  v2 = v0[187];
  v9 = v0[185];
  v10 = v0[184];
  v3 = v0[183];
  v11 = v0[182];
  v12 = v0[181];
  v13 = v0[197];
  v4 = v0[142];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v14 + 56, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v5 = *(_QWORD *)(v1 + 112);
  OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_274_0();
  OUTLINED_FUNCTION_116();
  v6 = OnDeviceInferenceContextFactory.stopToken(specialTokensMap:tokenizer:)(v5);
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v4 + 16) = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  CompletePromptRequest.parameters.getter();
  SamplingParameters.stopSequences.getter();
  v7 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v0[241] = v7;
  v7(v2, v10);
  StopSequenceMonitor.init(stopSequences:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(v15 + *(int *)(v13 + 36), v3, v12);
  v0[242] = *(_QWORD *)(v14 + 176);
  outlined init with copy of DataStreamState(v15, v16);
  OUTLINED_FUNCTION_187_1();
  return swift_task_switch();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_305_0();
  OUTLINED_FUNCTION_195_1(v0, type metadata accessor for DataStreamState);
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = (void (*)(uint64_t, uint64_t))v0[241];
  v10 = v0[209];
  v11 = v0[208];
  v12 = v0[213];
  v1 = v0[205];
  v13 = v0[203];
  v2 = v0[186];
  v3 = v0[184];
  v4 = v0[143];
  CompletePromptRequest.parameters.getter();
  v5 = SamplingParameters.maximumTokens.getter();
  v7 = v6;
  OUTLINED_FUNCTION_19_3();
  v9(v2, v3);
  OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  if ((v7 & 1) != 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v4 + 16) = v5;
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v13, type metadata accessor for DataStreamState);
  v0[243] = v0[239];
  v0[244] = *(_QWORD *)(v0[229] + 176);
  OUTLINED_FUNCTION_22_4();
  OUTLINED_FUNCTION_187_1();
  OUTLINED_FUNCTION_157_0();
  return swift_task_switch();
}

{
  uint64_t v0;

  DataStreamStateManager.stateForUUID(_:)(*(_QWORD *)(v0 + 1392));
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  os_log_type_t v43;

  OUTLINED_FUNCTION_41_5();
  v1 = *(_QWORD *)(v0 + 1392);
  v2 = OUTLINED_FUNCTION_28_1(v1, 1, *(_QWORD *)(v0 + 1576));
  if (v3)
  {
    OUTLINED_FUNCTION_165_0(v2, &demangling cache variable for type metadata for DataStreamState?);
LABEL_6:
    if (one-time initialization token for device != -1)
      swift_once();
    v5 = *(_QWORD *)(v0 + 1744);
    v6 = *(NSObject **)(v0 + 1736);
    v7 = *(_QWORD *)(v0 + 1720);
    v8 = *(_QWORD *)(v0 + 1712);
    v9 = *(_QWORD *)(v0 + 1080);
    v10 = *(_QWORD *)(v0 + 1040);
    v11 = OUTLINED_FUNCTION_15_4();
    __swift_project_value_buffer(v11, (uint64_t)static Log.device);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v12(v5, v10, v8);
    v13 = OUTLINED_FUNCTION_340_0();
    ((void (*)(uint64_t))v12)(v13);
    Logger.logObject.getter();
    v14 = OUTLINED_FUNCTION_244_0();
    if (OUTLINED_FUNCTION_73_3(v14))
    {
      v43 = v9;
      v15 = OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v15 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v16 = OUTLINED_FUNCTION_424();
      *(_QWORD *)(v0 + 1000) = OUTLINED_FUNCTION_200_0(v16, v17);
      OUTLINED_FUNCTION_268_0();
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_302_0();
      *(_WORD *)(v15 + 12) = 2080;
      v18 = OUTLINED_FUNCTION_424();
      *(_QWORD *)(v0 + 816) = OUTLINED_FUNCTION_200_0(v18, v19);
      OUTLINED_FUNCTION_205_0();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_414_0();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v6, v43, "Failed to handle request %s, data stream %s does not exist", (uint8_t *)v15);
      OUTLINED_FUNCTION_89_2();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_302_0();
    OUTLINED_FUNCTION_414_0();

    v20 = *(os_unfair_lock_s **)(v0 + 1840);
    v21 = *(_QWORD *)(v0 + 1440);
    v22 = *(_QWORD *)(v0 + 1408);
    v23 = *(_QWORD *)(v0 + 1232);
    v24 = *(_QWORD *)(v0 + 1224);
    v25 = *(_QWORD *)(v0 + 1048);
    OUTLINED_FUNCTION_43_6();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    OUTLINED_FUNCTION_7_11();
    v27 = v26;
    OUTLINED_FUNCTION_274(v26, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v27, *MEMORY[0x24BEB8090], v24);
    swift_willThrow();
    OUTLINED_FUNCTION_333(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    v28 = OUTLINED_FUNCTION_93_2();
    *(_QWORD *)(v28 + 16) = v25;
    *(_BYTE *)(v28 + 24) = 0;
    OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v28, v20);
    swift_release();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_8_7();
    swift_task_dealloc();
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_369();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_115_1();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_112_3();
    OUTLINED_FUNCTION_111_3();
    OUTLINED_FUNCTION_110_2();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_108_3();
    OUTLINED_FUNCTION_162_1();
    OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_177_1();
    OUTLINED_FUNCTION_176_1();
    OUTLINED_FUNCTION_175_0();
    OUTLINED_FUNCTION_161_1();
    OUTLINED_FUNCTION_107_3();
    OUTLINED_FUNCTION_106_2();
    OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_104_2();
    OUTLINED_FUNCTION_101_2();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_103_3();
    OUTLINED_FUNCTION_119_2();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    OUTLINED_FUNCTION_84_3();
    v29 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
    return OUTLINED_FUNCTION_2_2(v29);
  }
  v4 = *(_BYTE *)(v0 + 2205);
  outlined init with take of DataStreamState(v1, *(_QWORD *)(v0 + 1608), type metadata accessor for DataStreamState);
  if ((v4 & 1) != 0)
  {
    outlined destroy of MaskedLanguageModel.SingleLogitCollection(*(_QWORD *)(v0 + 1608), type metadata accessor for DataStreamState);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_373_0();
  if (v3)
  {
    v31 = *(_QWORD *)(v0 + 1384);
    v32 = *(_QWORD *)(v0 + 1376);
    v33 = *(_QWORD *)(v0 + 1368);
    v34 = *(uint64_t **)(v0 + 1024);
    v42 = (_BYTE *)(*(_QWORD *)(v0 + 1152) + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
    type metadata accessor for ModelInformation.Asset();
    OUTLINED_FUNCTION_445();
    *(_OWORD *)(OUTLINED_FUNCTION_400() + 16) = xmmword_248D75A50;
    InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_357();
    ModelInformation.Asset.init(identifier:version:metadata:)();
    v35 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v36 = objc_msgSend(v35, sel_operatingSystemVersionString);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    ModelInformation.init(assets:systemVersion:)();
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_274(v32, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
    v37 = type metadata accessor for PromptCompletionEventModelInformation();
    v38 = MEMORY[0x24BEB8550];
    v34[3] = v37;
    v34[4] = v38;
    __swift_allocate_boxed_opaque_existential_1(v34);
    OUTLINED_FUNCTION_260();
    PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)();
    OUTLINED_FUNCTION_4_0();
    *v42 = 0;
    v39 = OUTLINED_FUNCTION_333(v31, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
    OUTLINED_FUNCTION_280(v39, type metadata accessor for DataStreamState);
    OUTLINED_FUNCTION_225_0();
    OUTLINED_FUNCTION_8_7();
    v40 = OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_149_1(v40);
    OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
    OUTLINED_FUNCTION_11_3();
    OUTLINED_FUNCTION_369();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_217();
    OUTLINED_FUNCTION_216();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_257_0();
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_226_0();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_115_1();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_112_3();
    OUTLINED_FUNCTION_111_3();
    OUTLINED_FUNCTION_110_2();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_108_3();
    OUTLINED_FUNCTION_162_1();
    OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_177_1();
    OUTLINED_FUNCTION_176_1();
    OUTLINED_FUNCTION_175_0();
    OUTLINED_FUNCTION_161_1();
    OUTLINED_FUNCTION_107_3();
    OUTLINED_FUNCTION_106_2();
    OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_104_2();
    OUTLINED_FUNCTION_101_2();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_103_3();
    OUTLINED_FUNCTION_119_2();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    OUTLINED_FUNCTION_84_3();
    v29 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
    return OUTLINED_FUNCTION_2_2(v29);
  }
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1960) = v41;
  *v41 = v0;
  v41[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1608), *(_QWORD *)(v0 + 1040));
}

{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void);

  OUTLINED_FUNCTION_41_5();
  v4 = *(void **)(v0 + 1296);
  OUTLINED_FUNCTION_391_0(*(_QWORD *)(v0 + 1352), v5, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  v6 = OUTLINED_FUNCTION_346_0();
  v7 = *(_QWORD *)(v0 + 1608);
  if (v6 != 1)
  {
    v13 = *(uint64_t **)(v0 + 1320);
    v14 = *(_QWORD *)(v0 + 1296);
    v15 = *(uint64_t **)(v0 + 1024);
    v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1304) + 32);
    v16(v13, *(_QWORD *)(v0 + 1344), v14);
    v17 = MEMORY[0x24BEB85A8];
    v15[3] = v14;
    v15[4] = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
    v19 = v16(boxed_opaque_existential_1, (uint64_t)v13, v14);
    OUTLINED_FUNCTION_289_0(v19, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    OUTLINED_FUNCTION_348_0(v20, type metadata accessor for DataStreamState);
    goto LABEL_6;
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(*(_QWORD *)(v0 + 1344), &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  if (*(_BYTE *)(v7 + 24) != 1)
  {
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_426();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_22();
    *(_DWORD *)(v0 + 2192) = *MEMORY[0x24BEB8128];
    v24 = (_DWORD *)MEMORY[0x24BEB8110];
    *(_DWORD *)(v0 + 2196) = *MEMORY[0x24BEB8120];
    *(_DWORD *)(v0 + 2200) = *v24;
    v25 = *(_QWORD *)(*(_QWORD *)(v0 + 1608) + 8);
    *(_QWORD *)(v0 + 1968) = v25;
    if (v25)
    {
      if (v25 != 1)
      {
        OUTLINED_FUNCTION_300();
        if (v37)
        {
          OUTLINED_FUNCTION_186_1(v37 + 16);
          v38 = (_QWORD *)OUTLINED_FUNCTION_97_3();
          *(_QWORD *)(v0 + 1992) = v38;
          *v38 = v0;
          v38[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
          v39 = OUTLINED_FUNCTION_325_0();
          return OUTLINED_FUNCTION_150_1(v39, v40, v41);
        }
        else
        {
          OUTLINED_FUNCTION_172_1();
          OUTLINED_FUNCTION_171_1();
          *(_QWORD *)(v0 + 2088) = 0;
          if (one-time initialization token for device != -1)
            swift_once();
          v49 = OUTLINED_FUNCTION_33_5();
          OUTLINED_FUNCTION_12_7(v49, (uint64_t)static Log.device);
          OUTLINED_FUNCTION_127_2();
          OUTLINED_FUNCTION_127_2();
          OUTLINED_FUNCTION_184_1();
          v50 = OUTLINED_FUNCTION_244_0();
          OUTLINED_FUNCTION_73_3(v50);
          OUTLINED_FUNCTION_257_1();
          if (v51)
          {
            OUTLINED_FUNCTION_4_11();
            v52 = (_QWORD *)OUTLINED_FUNCTION_4_11();
            OUTLINED_FUNCTION_4_11();
            OUTLINED_FUNCTION_365_0(4.8151e-34);
            lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
            v53 = OUTLINED_FUNCTION_74_2();
            *(_QWORD *)(v0 + 968) = OUTLINED_FUNCTION_200_0(v53, v54);
            OUTLINED_FUNCTION_205_0();
            OUTLINED_FUNCTION_116_0();
            OUTLINED_FUNCTION_38_4();
            OUTLINED_FUNCTION_185_1();
            *v52 = 0;
            OUTLINED_FUNCTION_95_2();
            OUTLINED_FUNCTION_95_2();
            OUTLINED_FUNCTION_45_5(&dword_248CAA000, v55, v56, "Failed to handle request %s, error decoding next token. Underlying error: %@.");
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            OUTLINED_FUNCTION_34_3();
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_38_4();
          OUTLINED_FUNCTION_95_2();
          OUTLINED_FUNCTION_95_2();

          OUTLINED_FUNCTION_134_0();
          OUTLINED_FUNCTION_165_0(v57, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
          v58 = OUTLINED_FUNCTION_61_0();
          OUTLINED_FUNCTION_23_7(v58);
          OUTLINED_FUNCTION_67_3();
          OUTLINED_FUNCTION_43_6();
          OUTLINED_FUNCTION_19_8();
          OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 400));
          OUTLINED_FUNCTION_42_5();
          lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
          v59 = OUTLINED_FUNCTION_11_0();
          OUTLINED_FUNCTION_36_4(v59, v60);
          v61 = OUTLINED_FUNCTION_170_1();
          v62 = (_QWORD *)OUTLINED_FUNCTION_315_0(v61);
          OUTLINED_FUNCTION_266_0(v62);
          OUTLINED_FUNCTION_393_0();
          return OUTLINED_FUNCTION_151_1(v63, v64, v65, v66, v67);
        }
      }
      *(_QWORD *)(v0 + 1984) = *(_QWORD *)(*(_QWORD *)(v0 + 1832) + 176);
      OUTLINED_FUNCTION_22_4();
    }
    else
    {
      *(_QWORD *)(v0 + 1976) = *(_QWORD *)(*(_QWORD *)(v0 + 1832) + 176);
      OUTLINED_FUNCTION_22_4();
    }
    return OUTLINED_FUNCTION_71_4();
  }
  *(_QWORD *)(v0 + 2120) = *(_QWORD *)(v0 + 1944);
  v8 = *(_QWORD *)(v0 + 1160);
  OUTLINED_FUNCTION_22();
  if ((*(_BYTE *)(v8 + 16) & 1) != 0)
  {
    v9 = *(_QWORD *)(v0 + 1352);
    v10 = *(_QWORD *)(v0 + 1160);
    OUTLINED_FUNCTION_4_0();
    *(_BYTE *)(v10 + 16) = 0;
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_275_0();
    v11 = type metadata accessor for PromptCompletionEventUsage();
    OUTLINED_FUNCTION_429(v11, MEMORY[0x24BEB84F8]);
    OUTLINED_FUNCTION_269_0();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v9, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    OUTLINED_FUNCTION_195_1(v12, type metadata accessor for DataStreamState);
LABEL_6:
    v21 = OUTLINED_FUNCTION_4_13();
    OUTLINED_FUNCTION_217_0(v21);
    OUTLINED_FUNCTION_443();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_216();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_257_0();
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_226_0();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_115_1();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_112_3();
    OUTLINED_FUNCTION_111_3();
    OUTLINED_FUNCTION_110_2();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_108_3();
    OUTLINED_FUNCTION_162_1();
    OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_177_1();
    OUTLINED_FUNCTION_410_0();
    OUTLINED_FUNCTION_409_0();
    OUTLINED_FUNCTION_176_1();
    OUTLINED_FUNCTION_175_0();
    OUTLINED_FUNCTION_161_1();
    OUTLINED_FUNCTION_107_3();
    OUTLINED_FUNCTION_106_2();
    OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_104_2();
    OUTLINED_FUNCTION_101_2();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_103_3();
    OUTLINED_FUNCTION_119_2();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    OUTLINED_FUNCTION_84_3();
    v22 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
    return OUTLINED_FUNCTION_2_2(v22);
  }
  v26 = *(_QWORD *)(v0 + 1168);
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_373_0();
  if (v27)
  {
    v28 = OUTLINED_FUNCTION_294_0();
    OUTLINED_FUNCTION_421_0(v28, v29, &demangling cache variable for type metadata for FinishReason?);
    OUTLINED_FUNCTION_28_1((uint64_t)v4, 1, v26);
    if (!v27)
    {
      OUTLINED_FUNCTION_83_2();
      OUTLINED_FUNCTION_4_0();
      *(_BYTE *)(v1 + 16) = 0;
      v45 = UUID.uuidString.getter();
      OUTLINED_FUNCTION_361(v45);
      OUTLINED_FUNCTION_189_0();
      v46 = type metadata accessor for PromptCompletionEventCandidateFinished();
      OUTLINED_FUNCTION_399_0(v46, MEMORY[0x24BEB8590]);
      OUTLINED_FUNCTION_212_1();
      v47 = OUTLINED_FUNCTION_194_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      OUTLINED_FUNCTION_360_0(v47, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
      OUTLINED_FUNCTION_280(v48, type metadata accessor for DataStreamState);
      goto LABEL_6;
    }
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(*(_QWORD *)(v0 + 1176), &demangling cache variable for type metadata for FinishReason?);
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v30 = OUTLINED_FUNCTION_33_5();
  OUTLINED_FUNCTION_12_7(v30, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_184_1();
  v31 = OUTLINED_FUNCTION_176();
  OUTLINED_FUNCTION_73_1(v31);
  OUTLINED_FUNCTION_371_0();
  if (v32)
  {
    OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_398_0(4.8149e-34);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v33 = OUTLINED_FUNCTION_203();
    *(_QWORD *)(v0 + 896) = OUTLINED_FUNCTION_200_0(v33, v34);
    OUTLINED_FUNCTION_327();
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_22_9();
    OUTLINED_FUNCTION_20_7(&dword_248CAA000, v35, v36, "Successfully handled streaming request %s");
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_22_9();

  *(_QWORD *)(v0 + 2128) = *(_QWORD *)(*(_QWORD *)(v0 + 1832) + 176);
  OUTLINED_FUNCTION_22_4();
  v42 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 2136) = v42;
  OUTLINED_FUNCTION_411_0(v42, (uint64_t)closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:));
  return OUTLINED_FUNCTION_152_1(v44, v43);
}

{
  OUTLINED_FUNCTION_191_1();
  DataStreamStateManager.startFirstTokenInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  OUTLINED_FUNCTION_191_1();
  DataStreamStateManager.startExtendInferenceInstrumenter(uuid:onBehalfOfUserIdentifier:)();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_407_0();
  *(_QWORD *)(v2 + 2000) = v1;
  *(_QWORD *)(v2 + 2008) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v92;
  int v93;
  uint8_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  os_log_type_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)(uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206[2];

  v206[1] = *MEMORY[0x24BDAC8D0];
  v1 = v0[250];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
  v2 = OUTLINED_FUNCTION_172_1();
  v3 = (__n128 *)v2;
  v0[252] = v2;
  if (!v1)
  {
    OUTLINED_FUNCTION_171_1();
LABEL_9:
    v0[261] = 0;
    if (one-time initialization token for device != -1)
      swift_once();
    v15 = OUTLINED_FUNCTION_33_5();
    OUTLINED_FUNCTION_12_7(v15, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_184_1();
    v16 = OUTLINED_FUNCTION_244_0();
    OUTLINED_FUNCTION_73_3(v16);
    OUTLINED_FUNCTION_257_1();
    if (v17)
    {
      OUTLINED_FUNCTION_4_11();
      v18 = (_QWORD *)OUTLINED_FUNCTION_4_11();
      v206[0] = OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_365_0(4.8151e-34);
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v19 = OUTLINED_FUNCTION_74_2();
      v0[121] = OUTLINED_FUNCTION_190_0(v19, v20, v21, v22, v23, v24, v25, v26, v171, v177, v183, (uint64_t)v189, v193);
      OUTLINED_FUNCTION_205_0();
      OUTLINED_FUNCTION_116_0();
      OUTLINED_FUNCTION_38_4();
      OUTLINED_FUNCTION_272_0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = 0;
      OUTLINED_FUNCTION_95_2();
      OUTLINED_FUNCTION_95_2();
      OUTLINED_FUNCTION_45_5(&dword_248CAA000, v27, v28, "Failed to handle request %s, error decoding next token. Underlying error: %@.");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_95_2();
    OUTLINED_FUNCTION_95_2();

    OUTLINED_FUNCTION_134_0();
    OUTLINED_FUNCTION_165_0(v29, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    v30 = OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_23_7(v30);
    OUTLINED_FUNCTION_67_3();
    OUTLINED_FUNCTION_328();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
    OUTLINED_FUNCTION_42_5();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    v31 = OUTLINED_FUNCTION_11_0();
    OUTLINED_FUNCTION_36_4(v31, v32);
    v33 = OUTLINED_FUNCTION_170_1();
    v34 = (_QWORD *)OUTLINED_FUNCTION_315_0(v33);
    OUTLINED_FUNCTION_182_1(v34);
    OUTLINED_FUNCTION_319_0();
    return OUTLINED_FUNCTION_148_0(v35, v36, v37, v38, v39);
  }
  v4 = v2 + 16;
  v5 = v0[250];
  *(_QWORD *)(v2 + 16) = v5;
  if (!*(_QWORD *)(v5 + 16))
  {
    OUTLINED_FUNCTION_30();
    goto LABEL_9;
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_15_4();
  v0[253] = __swift_project_value_buffer(v6, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_206_0();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    v206[0] = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v10 = 136315138;
    OUTLINED_FUNCTION_22();
    v11 = OUTLINED_FUNCTION_65_0();
    v12 = MEMORY[0x2495A9BC8](v11, MEMORY[0x24BEE1768]);
    v14 = v13;
    OUTLINED_FUNCTION_50_2();
    v0[108] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v7, (os_log_type_t)v9, "Decoded token: %s", v10);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_101();

  if (v0[246])
  {
    v40 = v0[201];
    v41 = *(_QWORD *)(v40 + 8);
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      __break(1u);
    OUTLINED_FUNCTION_153_0(v43);
    OUTLINED_FUNCTION_438();
    OUTLINED_FUNCTION_224_1();
    v44 = *(_QWORD *)(v40 + 8);
    v45 = *(_QWORD *)(v9 + 16);
    OUTLINED_FUNCTION_22();
    v46 = OUTLINED_FUNCTION_265_0();
    v47 = v46;
    v203 = v44;
    if (v44 >= v45 && (v46 & 1) == 0)
    {
      OUTLINED_FUNCTION_4_0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_317_0();
      OUTLINED_FUNCTION_181_1();
    }
    OUTLINED_FUNCTION_300();
    if (!v48)
      goto LABEL_22;
    HIDWORD(v199) = v47;
    v201 = v45;
    v49 = v0[251];
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v48 + 64, (uint64_t)(v0 + 12));
    v4 = v0[16];
    __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v3 = (__n128 *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_277_0(v3, (__n128)xmmword_248D75A50);
    v50 = TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)();
    v0[255] = v49;
    if (v49)
    {
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_63_0();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
LABEL_22:
      OUTLINED_FUNCTION_207_0();
      Logger.logObject.getter();
      v51 = OUTLINED_FUNCTION_244_0();
      v52 = OUTLINED_FUNCTION_73_1(v51);
      v53 = v0[223];
      v54 = v0[215];
      if (v52)
      {
        v55 = (_DWORD *)OUTLINED_FUNCTION_4_11();
        v206[0] = OUTLINED_FUNCTION_4_11();
        *v55 = 136315138;
        lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v56 = OUTLINED_FUNCTION_380_0();
        v0[109] = OUTLINED_FUNCTION_190_0(v56, v57, v58, v59, v60, v61, v62, v63, v171, v177, v183, (uint64_t)v189, v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_116_0();
        OUTLINED_FUNCTION_194_1(v53, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
        OUTLINED_FUNCTION_20_7(&dword_248CAA000, v64, v65, "Failed to handle request %s, detokenization failed");
        OUTLINED_FUNCTION_34_3();
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_194_1(v0[223], *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));

      OUTLINED_FUNCTION_137_1();
      OUTLINED_FUNCTION_337_0(v66, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
      v67 = OUTLINED_FUNCTION_61_0();
      OUTLINED_FUNCTION_206_1(v67);
      OUTLINED_FUNCTION_286_0();
      v68 = OUTLINED_FUNCTION_43_6();
      OUTLINED_FUNCTION_298_0(v68, v69, v70, v71, v72, v73, v74, v75, v171, v177, v183, (uint64_t)v189, v193, v197, v199, v201, v203);
      v76 = OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
      OUTLINED_FUNCTION_273_0(v76, v77, v78, v79, v80, v81, v82, v83, v172, v178, v184, v190, v194, v198, v200, v202, v204, (uint64_t)(v0 + 109));
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
      v0[258] = OUTLINED_FUNCTION_7_11();
      OUTLINED_FUNCTION_117_2(v84, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
      v85 = (_QWORD *)OUTLINED_FUNCTION_183_0();
      v0[259] = v85;
      *v85 = v0;
      v85[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
      OUTLINED_FUNCTION_237_1();
      OUTLINED_FUNCTION_313_0();
      return OUTLINED_FUNCTION_148_0(v35, v36, v37, v38, v39);
    }
    v205 = v50;
    v195 = (uint64_t)(v0 + 105);
    v87 = v0[222];
    v88 = v0[215];
    v89 = v0[214];
    v90 = v0[130];
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_63_0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
    v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
    v91(v87, v90, v89);
    OUTLINED_FUNCTION_206_0();
    Logger.logObject.getter();
    v92 = OUTLINED_FUNCTION_345_0();
    v93 = v92;
    if (os_log_type_enabled((os_log_t)v9, v92))
    {
      HIDWORD(v177) = v93;
      v94 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v173 = OUTLINED_FUNCTION_4_11();
      v206[0] = v173;
      *(_DWORD *)v94 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v95 = OUTLINED_FUNCTION_211_1();
      v103 = OUTLINED_FUNCTION_190_0(v95, v96, v97, v98, v99, v100, v101, v102, v173, v177, (uint64_t)v91, (uint64_t)v189, v195);
      OUTLINED_FUNCTION_203_1(v103, v104, v105, v106, v107, v108, v109, v110, v174, v179, v185, v191, v196);
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_120_1();
      v111 = OUTLINED_FUNCTION_248_1();
      v112 = MEMORY[0x2495A9BC8](v111, MEMORY[0x24BEE1768]);
      v114 = v113;
      OUTLINED_FUNCTION_7_0();
      v0[106] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v114, v206);
      OUTLINED_FUNCTION_346();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v9, v182, "Request %s output tokens %s", v94);
      OUTLINED_FUNCTION_89_2();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_101();

    v115 = OUTLINED_FUNCTION_375_0();
    ((void (*)(uint64_t))v91)(v115);
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v116 = OUTLINED_FUNCTION_345_0();
    v117 = OUTLINED_FUNCTION_329_0(v116);
    if (v117)
    {
      v125 = OUTLINED_FUNCTION_4_11();
      v186 = OUTLINED_FUNCTION_4_11();
      v206[0] = v186;
      *(_DWORD *)v125 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v126 = OUTLINED_FUNCTION_211_1();
      v0[103] = OUTLINED_FUNCTION_190_0(v126, v127, v128, v129, v130, v131, v132, v133, v171, v177, v186, (uint64_t)v189, v195);
      OUTLINED_FUNCTION_215_1();
      v134 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_164_1(v134, v135, v136, v137, v138, v139, v140, v141, v175, v180, v187, v192);
      *(_WORD *)(v125 + 12) = 2080;
      v142 = OUTLINED_FUNCTION_65_0();
      MEMORY[0x2495A9BC8](v142, MEMORY[0x24BEE0D00]);
      v143 = OUTLINED_FUNCTION_50_2();
      v0[104] = OUTLINED_FUNCTION_328_0(v143, v144, v145, v146, v147, v148, v149, v150, v176, v181, v188);
      OUTLINED_FUNCTION_346();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v9, (os_log_type_t)v91, "Request %s detokenized texts %s", (uint8_t *)v125);
      OUTLINED_FUNCTION_89_2();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_164_1(v117, v118, v119, v120, v121, v122, v123, v124, v171, v177, v183, v189);
    OUTLINED_FUNCTION_19_6();

    v151 = v201;
    v152 = *(_QWORD *)(v205 + 16);
    if (v152)
    {
      OUTLINED_FUNCTION_260_0(MEMORY[0x24BEE4AF8]);
      v9 = v205 + 40;
      do
      {
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_343_0();
        OUTLINED_FUNCTION_369_0();
        if (v154)
        {
          OUTLINED_FUNCTION_396_0(v153);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        OUTLINED_FUNCTION_129_2();
        v9 += 16;
        --v152;
      }
      while (v152);
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_50_2();
    }
    v155 = OUTLINED_FUNCTION_235_1();
    v157 = v156;
    v159 = v158;
    OUTLINED_FUNCTION_51_1();
    if (v159)
      v160 = 0;
    else
      v160 = v44 < v201;
    v161 = !v160;
    *(_BYTE *)(v9 + 24) = (v161 | BYTE4(v199)) & 1;
    if ((v199 & 0x100000000) != 0)
    {
      v162 = v0[149];
      v163 = OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_289_0(v163, &demangling cache variable for type metadata for FinishReason?);
      v164 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 104);
      v151 = v201;
      OUTLINED_FUNCTION_341_0(v164);
      v165 = OUTLINED_FUNCTION_433();
    }
    else if (v159)
    {
      OUTLINED_FUNCTION_234_1();
      OUTLINED_FUNCTION_337_0(v169, &demangling cache variable for type metadata for FinishReason?);
      *(_QWORD *)HIDWORD(v199) = v157;
      *(_QWORD *)(HIDWORD(v199) + 8) = v159;
      v151 = v201;
      OUTLINED_FUNCTION_336_0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v201 + 104));
      v165 = OUTLINED_FUNCTION_427();
    }
    else
    {
      if (v44 < v201)
        goto LABEL_51;
      OUTLINED_FUNCTION_233_1();
      OUTLINED_FUNCTION_226(v170, &demangling cache variable for type metadata for FinishReason?);
      OUTLINED_FUNCTION_259_0();
      v165 = OUTLINED_FUNCTION_416_0();
    }
    __swift_storeEnumTagSinglePayload(v165, v166, v167, v168);
LABEL_51:
    if (!*(_QWORD *)(v155 + 16))
    {
      OUTLINED_FUNCTION_20_2();
      if (v44 < v151)
      {
LABEL_55:
        OUTLINED_FUNCTION_236_0();
        goto LABEL_56;
      }
      OUTLINED_FUNCTION_437();
    }
    specialized Array.append<A>(contentsOf:)();
    goto LABEL_55;
  }
  v0[254] = *(_QWORD *)(v0[229] + 176);
  OUTLINED_FUNCTION_22_4();
LABEL_56:
  OUTLINED_FUNCTION_187_1();
  return OUTLINED_FUNCTION_147_1();
}

{
  DataStreamStateManager.endFirstTokenInferenceInstrumenter(uuid:)();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  __n128 *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v59;
  int v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  os_log_type_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175[2];

  v175[1] = *MEMORY[0x24BDAC8D0];
  v4 = v1[201];
  v5 = *(_QWORD *)(v4 + 8);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  OUTLINED_FUNCTION_153_0(v7);
  OUTLINED_FUNCTION_438();
  OUTLINED_FUNCTION_224_1();
  v8 = *(_QWORD *)(v4 + 8);
  v9 = *(_QWORD *)(v3 + 16);
  OUTLINED_FUNCTION_22();
  v10 = OUTLINED_FUNCTION_265_0();
  v11 = v10;
  if (v8 >= v9 && (v10 & 1) == 0)
  {
    OUTLINED_FUNCTION_4_0();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_317_0();
    OUTLINED_FUNCTION_181_1();
  }
  OUTLINED_FUNCTION_300();
  if (!v12)
    goto LABEL_8;
  LODWORD(v172) = v11;
  v174 = v9;
  v13 = v1[251];
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v12 + 64, (uint64_t)(v1 + 12));
  v2 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v1[15]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v0 = (__n128 *)OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_277_0(v0, (__n128)xmmword_248D75A50);
  v14 = TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)();
  v1[255] = v13;
  if (!v13)
  {
    v162 = (uint64_t)(v1 + 105);
    v166 = v8;
    v171 = v14;
    v54 = v1[222];
    v55 = v1[215];
    v56 = v1[214];
    v57 = v1[130];
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_63_0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 12));
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
    v58(v54, v57, v56);
    OUTLINED_FUNCTION_206_0();
    Logger.logObject.getter();
    v59 = OUTLINED_FUNCTION_345_0();
    v60 = v59;
    if (os_log_type_enabled((os_log_t)v3, v59))
    {
      HIDWORD(v144) = v60;
      v61 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v140 = OUTLINED_FUNCTION_4_11();
      v175[0] = v140;
      *(_DWORD *)v61 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v62 = OUTLINED_FUNCTION_211_1();
      v70 = OUTLINED_FUNCTION_190_0(v62, v63, v64, v65, v66, v67, v68, v69, v140, v144, (uint64_t)v58, (uint64_t)v156, v162);
      OUTLINED_FUNCTION_203_1(v70, v71, v72, v73, v74, v75, v76, v77, v141, v146, v152, v158, v163);
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_120_1();
      v78 = OUTLINED_FUNCTION_248_1();
      v79 = MEMORY[0x2495A9BC8](v78, MEMORY[0x24BEE1768]);
      v81 = v80;
      OUTLINED_FUNCTION_7_0();
      v1[106] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, v175);
      OUTLINED_FUNCTION_346();
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v3, v149, "Request %s output tokens %s", v61);
      OUTLINED_FUNCTION_89_2();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_101();

    v82 = OUTLINED_FUNCTION_375_0();
    ((void (*)(uint64_t))v58)(v82);
    OUTLINED_FUNCTION_64_1();
    Logger.logObject.getter();
    v83 = OUTLINED_FUNCTION_345_0();
    v84 = OUTLINED_FUNCTION_329_0(v83);
    if (v84)
    {
      v92 = OUTLINED_FUNCTION_4_11();
      v153 = OUTLINED_FUNCTION_4_11();
      v175[0] = v153;
      *(_DWORD *)v92 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v93 = OUTLINED_FUNCTION_211_1();
      v1[103] = OUTLINED_FUNCTION_190_0(v93, v94, v95, v96, v97, v98, v99, v100, v138, v144, v153, (uint64_t)v156, v162);
      OUTLINED_FUNCTION_215_1();
      v101 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_164_1(v101, v102, v103, v104, v105, v106, v107, v108, v142, v147, v154, v159);
      *(_WORD *)(v92 + 12) = 2080;
      v109 = OUTLINED_FUNCTION_65_0();
      MEMORY[0x2495A9BC8](v109, MEMORY[0x24BEE0D00]);
      v110 = OUTLINED_FUNCTION_50_2();
      v1[104] = OUTLINED_FUNCTION_328_0(v110, v111, v112, v113, v114, v115, v116, v117, v143, v148, v155);
      OUTLINED_FUNCTION_346();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v3, (os_log_type_t)"_EENS_9allocatorIS2_EEEE", "Request %s detokenized texts %s", (uint8_t *)v92);
      OUTLINED_FUNCTION_89_2();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_164_1(v84, v85, v86, v87, v88, v89, v90, v91, v138, v144, v150, v156);
    OUTLINED_FUNCTION_19_6();

    v118 = v174;
    v119 = *(_QWORD *)(v171 + 16);
    if (v119)
    {
      OUTLINED_FUNCTION_260_0(MEMORY[0x24BEE4AF8]);
      v3 = v171 + 40;
      do
      {
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_343_0();
        OUTLINED_FUNCTION_369_0();
        if (v121)
        {
          OUTLINED_FUNCTION_396_0(v120);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        OUTLINED_FUNCTION_129_2();
        v3 += 16;
        --v119;
      }
      while (v119);
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_50_2();
    }
    v122 = OUTLINED_FUNCTION_235_1();
    v124 = v123;
    v126 = v125;
    OUTLINED_FUNCTION_51_1();
    if (v126)
      v127 = 0;
    else
      v127 = v166 < v174;
    v128 = !v127;
    *(_BYTE *)(v3 + 24) = (v128 | v172) & 1;
    if ((v172 & 1) != 0)
    {
      v129 = v1[149];
      v130 = OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_289_0(v130, &demangling cache variable for type metadata for FinishReason?);
      v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 104);
      v118 = v174;
      OUTLINED_FUNCTION_341_0(v131);
      v132 = OUTLINED_FUNCTION_433();
    }
    else if (v126)
    {
      OUTLINED_FUNCTION_234_1();
      OUTLINED_FUNCTION_337_0(v136, &demangling cache variable for type metadata for FinishReason?);
      *(_QWORD *)v172 = v124;
      *(_QWORD *)(v172 + 8) = v126;
      v118 = v174;
      OUTLINED_FUNCTION_336_0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 104));
      v132 = OUTLINED_FUNCTION_427();
    }
    else
    {
      if (v166 < v174)
        goto LABEL_35;
      OUTLINED_FUNCTION_233_1();
      OUTLINED_FUNCTION_226(v137, &demangling cache variable for type metadata for FinishReason?);
      OUTLINED_FUNCTION_259_0();
      v132 = OUTLINED_FUNCTION_416_0();
    }
    __swift_storeEnumTagSinglePayload(v132, v133, v134, v135);
LABEL_35:
    if (!*(_QWORD *)(v122 + 16))
    {
      OUTLINED_FUNCTION_20_2();
      if (v166 < v118)
      {
LABEL_39:
        OUTLINED_FUNCTION_236_0();
        OUTLINED_FUNCTION_187_1();
        return OUTLINED_FUNCTION_147_1();
      }
      OUTLINED_FUNCTION_437();
    }
    specialized Array.append<A>(contentsOf:)();
    goto LABEL_39;
  }
  OUTLINED_FUNCTION_102_0();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_63_0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 12));
LABEL_8:
  OUTLINED_FUNCTION_207_0();
  Logger.logObject.getter();
  v15 = OUTLINED_FUNCTION_244_0();
  OUTLINED_FUNCTION_73_1(v15);
  v16 = v1[223];
  OUTLINED_FUNCTION_371_0();
  if ((v17 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_11();
    v175[0] = OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_241_1(4.8149e-34);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v18 = OUTLINED_FUNCTION_203();
    v1[109] = OUTLINED_FUNCTION_190_0(v18, v19, v20, v21, v22, v23, v24, v25, v138, v144, v150, (uint64_t)v156, v160);
    OUTLINED_FUNCTION_327();
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_22_9();
    OUTLINED_FUNCTION_20_7(&dword_248CAA000, v26, v27, "Failed to handle request %s, detokenization failed");
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_22_9();

  OUTLINED_FUNCTION_137_1();
  OUTLINED_FUNCTION_337_0(v28, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  v29 = OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_206_1(v29);
  OUTLINED_FUNCTION_286_0();
  v30 = OUTLINED_FUNCTION_43_6();
  OUTLINED_FUNCTION_298_0(v30, v31, v32, v33, v34, v35, v36, v37, v138, v144, v150, (uint64_t)v156, v160, v164, v167, v169, v172);
  v38 = OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  OUTLINED_FUNCTION_273_0(v38, v39, v40, v41, v42, v43, v44, v45, v139, v145, v151, v157, v161, v165, v168, v170, v173, v174);
  lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
  v1[258] = OUTLINED_FUNCTION_7_11();
  OUTLINED_FUNCTION_117_2(v46, v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v47 = (_QWORD *)OUTLINED_FUNCTION_183_0();
  v1[259] = v47;
  *v47 = v1;
  v47[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  OUTLINED_FUNCTION_237_1();
  OUTLINED_FUNCTION_313_0();
  return OUTLINED_FUNCTION_148_0(v48, v49, v50, v51, v52);
}

{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_305_0();
  OUTLINED_FUNCTION_195_1(v1, type metadata accessor for DataStreamState);
  v2 = (_QWORD *)swift_task_alloc();
  v0[257] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:)(v0[167], v0[201], v0[130]);
}

{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void);

  OUTLINED_FUNCTION_41_5();
  OUTLINED_FUNCTION_391_0(v0[167], v3, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  v4 = OUTLINED_FUNCTION_346_0();
  v5 = (void *)v0[252];
  v6 = v0[201];
  if (v4 != 1)
  {
    v13 = v0[167];
    v14 = v0[164];
    v15 = v0[162];
    v16 = (uint64_t *)v0[128];
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[163] + 32);
    v17(v14, v0[166], v15);
    v18 = MEMORY[0x24BEB85A8];
    v16[3] = v15;
    v16[4] = v18;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    v17((uint64_t)boxed_opaque_existential_1, v14, v15);
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v13, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    v20 = OUTLINED_FUNCTION_318_0();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v20, v21);
    v22 = OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_348_0(v22, type metadata accessor for DataStreamState);
    goto LABEL_6;
  }
  v7 = v0[166];
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0[167], &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v7, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  OUTLINED_FUNCTION_30();
  if (*(_BYTE *)(v6 + 24) != 1)
  {
    v26 = *(_QWORD *)(v0[201] + 8);
    v0[246] = v26;
    if (v26 == 1)
    {
      v0[248] = *(_QWORD *)(v0[229] + 176);
      OUTLINED_FUNCTION_22_4();
    }
    else
    {
      if (v26)
      {
        OUTLINED_FUNCTION_300();
        if (v38)
        {
          OUTLINED_FUNCTION_186_1(v38 + 16);
          v39 = (_QWORD *)OUTLINED_FUNCTION_97_3();
          v0[249] = v39;
          *v39 = v0;
          v39[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
          v40 = OUTLINED_FUNCTION_325_0();
          return OUTLINED_FUNCTION_150_1(v40, v41, v42);
        }
        else
        {
          OUTLINED_FUNCTION_172_1();
          OUTLINED_FUNCTION_171_1();
          v0[261] = 0;
          if (one-time initialization token for device != -1)
            swift_once();
          v50 = OUTLINED_FUNCTION_33_5();
          OUTLINED_FUNCTION_12_7(v50, (uint64_t)static Log.device);
          OUTLINED_FUNCTION_127_2();
          OUTLINED_FUNCTION_127_2();
          OUTLINED_FUNCTION_184_1();
          v51 = OUTLINED_FUNCTION_244_0();
          OUTLINED_FUNCTION_73_3(v51);
          OUTLINED_FUNCTION_257_1();
          if (v52)
          {
            OUTLINED_FUNCTION_4_11();
            v53 = (_QWORD *)OUTLINED_FUNCTION_4_11();
            OUTLINED_FUNCTION_4_11();
            OUTLINED_FUNCTION_365_0(4.8151e-34);
            lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
            v54 = OUTLINED_FUNCTION_74_2();
            v0[121] = OUTLINED_FUNCTION_200_0(v54, v55);
            OUTLINED_FUNCTION_205_0();
            OUTLINED_FUNCTION_116_0();
            OUTLINED_FUNCTION_38_4();
            OUTLINED_FUNCTION_185_1();
            *v53 = 0;
            OUTLINED_FUNCTION_95_2();
            OUTLINED_FUNCTION_95_2();
            OUTLINED_FUNCTION_45_5(&dword_248CAA000, v56, v57, "Failed to handle request %s, error decoding next token. Underlying error: %@.");
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            OUTLINED_FUNCTION_34_3();
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_38_4();
          OUTLINED_FUNCTION_95_2();
          OUTLINED_FUNCTION_95_2();

          OUTLINED_FUNCTION_134_0();
          OUTLINED_FUNCTION_165_0(v58, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
          v59 = OUTLINED_FUNCTION_61_0();
          OUTLINED_FUNCTION_23_7(v59);
          OUTLINED_FUNCTION_67_3();
          OUTLINED_FUNCTION_43_6();
          OUTLINED_FUNCTION_19_8();
          OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 104));
          OUTLINED_FUNCTION_42_5();
          lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
          v60 = OUTLINED_FUNCTION_11_0();
          OUTLINED_FUNCTION_36_4(v60, v61);
          v62 = OUTLINED_FUNCTION_170_1();
          v63 = (_QWORD *)OUTLINED_FUNCTION_315_0(v62);
          OUTLINED_FUNCTION_266_0(v63);
          OUTLINED_FUNCTION_393_0();
          return OUTLINED_FUNCTION_151_1(v64, v65, v66, v67, v68);
        }
      }
      v0[247] = *(_QWORD *)(v0[229] + 176);
      OUTLINED_FUNCTION_22_4();
    }
    return OUTLINED_FUNCTION_71_4();
  }
  v0[265] = v0[255];
  v8 = v0[145];
  OUTLINED_FUNCTION_22();
  if ((*(_BYTE *)(v8 + 16) & 1) != 0)
  {
    v9 = v0[169];
    v10 = v0[145];
    OUTLINED_FUNCTION_4_0();
    *(_BYTE *)(v10 + 16) = 0;
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_275_0();
    v11 = type metadata accessor for PromptCompletionEventUsage();
    OUTLINED_FUNCTION_429(v11, MEMORY[0x24BEB84F8]);
    OUTLINED_FUNCTION_269_0();
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v9, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
    OUTLINED_FUNCTION_195_1(v12, type metadata accessor for DataStreamState);
LABEL_6:
    v23 = OUTLINED_FUNCTION_4_13();
    OUTLINED_FUNCTION_217_0(v23);
    OUTLINED_FUNCTION_443();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_277();
    OUTLINED_FUNCTION_202();
    OUTLINED_FUNCTION_10_6();
    OUTLINED_FUNCTION_216();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_257_0();
    OUTLINED_FUNCTION_215_0();
    OUTLINED_FUNCTION_226_0();
    OUTLINED_FUNCTION_214_0();
    OUTLINED_FUNCTION_213_0();
    OUTLINED_FUNCTION_212_0();
    OUTLINED_FUNCTION_211_0();
    OUTLINED_FUNCTION_247_0();
    OUTLINED_FUNCTION_210_0();
    OUTLINED_FUNCTION_209_0();
    OUTLINED_FUNCTION_208_0();
    OUTLINED_FUNCTION_207();
    OUTLINED_FUNCTION_56_5();
    OUTLINED_FUNCTION_55_4();
    OUTLINED_FUNCTION_54_5();
    OUTLINED_FUNCTION_53_5();
    OUTLINED_FUNCTION_52_4();
    OUTLINED_FUNCTION_75_3();
    OUTLINED_FUNCTION_115_1();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_112_3();
    OUTLINED_FUNCTION_111_3();
    OUTLINED_FUNCTION_110_2();
    OUTLINED_FUNCTION_109_2();
    OUTLINED_FUNCTION_108_3();
    OUTLINED_FUNCTION_162_1();
    OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_177_1();
    OUTLINED_FUNCTION_410_0();
    OUTLINED_FUNCTION_409_0();
    OUTLINED_FUNCTION_176_1();
    OUTLINED_FUNCTION_175_0();
    OUTLINED_FUNCTION_161_1();
    OUTLINED_FUNCTION_107_3();
    OUTLINED_FUNCTION_106_2();
    OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_104_2();
    OUTLINED_FUNCTION_101_2();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_103_3();
    OUTLINED_FUNCTION_119_2();
    OUTLINED_FUNCTION_80_3();
    OUTLINED_FUNCTION_51_4();
    OUTLINED_FUNCTION_50_6();
    OUTLINED_FUNCTION_49_5();
    OUTLINED_FUNCTION_296();
    OUTLINED_FUNCTION_84_3();
    v24 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
    return OUTLINED_FUNCTION_2_2(v24);
  }
  v27 = v0[146];
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_373_0();
  if (v28)
  {
    v29 = OUTLINED_FUNCTION_294_0();
    OUTLINED_FUNCTION_421_0(v29, v30, &demangling cache variable for type metadata for FinishReason?);
    OUTLINED_FUNCTION_28_1((uint64_t)v5, 1, v27);
    if (!v28)
    {
      OUTLINED_FUNCTION_83_2();
      OUTLINED_FUNCTION_4_0();
      async function pointer to OnDeviceInferenceProvider.textDeltaEventForDataStreamState(_:_:) = 0;
      v46 = UUID.uuidString.getter();
      OUTLINED_FUNCTION_361(v46);
      OUTLINED_FUNCTION_189_0();
      v47 = type metadata accessor for PromptCompletionEventCandidateFinished();
      OUTLINED_FUNCTION_399_0(v47, MEMORY[0x24BEB8590]);
      OUTLINED_FUNCTION_212_1();
      v48 = OUTLINED_FUNCTION_194_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      OUTLINED_FUNCTION_360_0(v48, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
      OUTLINED_FUNCTION_280(v49, type metadata accessor for DataStreamState);
      goto LABEL_6;
    }
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v0[147], &demangling cache variable for type metadata for FinishReason?);
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v31 = OUTLINED_FUNCTION_33_5();
  OUTLINED_FUNCTION_12_7(v31, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_184_1();
  v32 = OUTLINED_FUNCTION_176();
  OUTLINED_FUNCTION_73_1(v32);
  OUTLINED_FUNCTION_371_0();
  if (v33)
  {
    OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_398_0(4.8149e-34);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v34 = OUTLINED_FUNCTION_203();
    v0[112] = OUTLINED_FUNCTION_200_0(v34, v35);
    OUTLINED_FUNCTION_327();
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_22_9();
    OUTLINED_FUNCTION_20_7(&dword_248CAA000, v36, v37, "Successfully handled streaming request %s");
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_22_9();

  v0[266] = *(_QWORD *)(v0[229] + 176);
  OUTLINED_FUNCTION_22_4();
  v43 = (_QWORD *)swift_task_alloc();
  v0[267] = v43;
  OUTLINED_FUNCTION_411_0(v43, (uint64_t)closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:));
  return OUTLINED_FUNCTION_152_1(v45, v44);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 2080) = v1;
  swift_task_dealloc();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(*(_QWORD *)(v0 + 1600), type metadata accessor for DataStreamState);
  if (!v1)
    OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_41_5();
  v1 = *(_QWORD *)(v0 + 1408);
  OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 1232));
  v2 = OUTLINED_FUNCTION_213_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_226(v2, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  v3 = OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_195_1(v3, type metadata accessor for DataStreamState);
  v4 = OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_149_1(v4);
  OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_178_1();
  OUTLINED_FUNCTION_177_1();
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_175_0();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_121_1();
  OUTLINED_FUNCTION_402();
  return OUTLINED_FUNCTION_2_2(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 2112) = v1;
  swift_task_dealloc();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(*(_QWORD *)(v0 + 1592), type metadata accessor for DataStreamState);
  if (!v1)
    OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_41_5();
  v1 = *(_QWORD *)(v0 + 1408);
  OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 1232));
  v2 = OUTLINED_FUNCTION_213_1(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_226(v2, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_195_1(v3, type metadata accessor for DataStreamState);
  v4 = OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_149_1(v4);
  OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_178_1();
  OUTLINED_FUNCTION_177_1();
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_175_0();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_121_1();
  OUTLINED_FUNCTION_402();
  return OUTLINED_FUNCTION_2_2(v5);
}

{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_41_5();
  v1 = v0[140];
  type metadata accessor for TransparencyReport();
  OUTLINED_FUNCTION_229_0();
  TransparencyReport.init()();
  OUTLINED_FUNCTION_22();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 88));
    dispatch thunk of TokenIDToTextConverterProtocol.text.getter();
  }
  v3 = v0[189];
  v4 = v0[128];
  InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
  OUTLINED_FUNCTION_221_1(*MEMORY[0x24BE59D70], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104));
  OUTLINED_FUNCTION_41_1();
  TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_50_2();
  v5 = OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_360_0(v5, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  OUTLINED_FUNCTION_280(v6, type metadata accessor for DataStreamState);
  OUTLINED_FUNCTION_225_0();
  v7 = OUTLINED_FUNCTION_93_2();
  OUTLINED_FUNCTION_149_1(v7);
  OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_178_1();
  OUTLINED_FUNCTION_177_1();
  OUTLINED_FUNCTION_410_0();
  OUTLINED_FUNCTION_409_0();
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_175_0();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return OUTLINED_FUNCTION_2_2(v8);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_278_0();
  *(_QWORD *)(v1 + 2152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_41_5();
  v1 = *(_QWORD *)(v0 + 1704);
  v2 = *(_QWORD *)(v0 + 1672);
  v3 = *(_QWORD *)(v0 + 1640);

  OUTLINED_FUNCTION_213_1(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v4 = OUTLINED_FUNCTION_220_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_415_0(v4, type metadata accessor for DataStreamState);
  v5 = OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_149_1(v5);
  OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_178_1();
  OUTLINED_FUNCTION_177_1();
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_175_0();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_121_1();
  OUTLINED_FUNCTION_402();
  return OUTLINED_FUNCTION_2_2(v6);
}

{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_230_1();
  v1 = *(os_unfair_lock_s **)(v0 + 1840);
  v2 = *(_QWORD *)(v0 + 1672);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(_QWORD *)(v0 + 1640);
  v5 = *(_QWORD *)(v0 + 1624);
  v6 = *(_QWORD *)(v0 + 1048);

  OUTLINED_FUNCTION_194_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_213_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v5, type metadata accessor for DataStreamState);
  v7 = OUTLINED_FUNCTION_93_2();
  *(_QWORD *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 24) = 0;
  OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v7, v1);
  OUTLINED_FUNCTION_301_0();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return OUTLINED_FUNCTION_30_6(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v0 + 2184) = v1;
  swift_task_dealloc();
  outlined destroy of MaskedLanguageModel.SingleLogitCollection(*(_QWORD *)(v0 + 1584), type metadata accessor for DataStreamState);
  if (!v1)
    OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_6_10();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_41_5();
  v11 = v0[209];
  v12 = v0[208];
  v10 = v0[206];
  v1 = v0[205];
  v13 = v0[213];
  v2 = v0[177];
  v3 = v0[176];
  v4 = v0[155];
  v5 = v0[154];
  swift_release();
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_220_1(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_184_0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_333(v10, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  OUTLINED_FUNCTION_280(v6, type metadata accessor for DataStreamState);
  v7 = OUTLINED_FUNCTION_0_10();
  OUTLINED_FUNCTION_149_1(v7);
  OUTLINED_FUNCTION_143_1((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_162_1();
  OUTLINED_FUNCTION_178_1();
  OUTLINED_FUNCTION_177_1();
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_175_0();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  OUTLINED_FUNCTION_121_1();
  OUTLINED_FUNCTION_402();
  return OUTLINED_FUNCTION_2_2(v8);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_unfair_lock_s *v17;

  OUTLINED_FUNCTION_230_1();
  v1 = (void *)v0[270];
  v16 = (void *)v0[271];
  v17 = (os_unfair_lock_s *)v0[230];
  v12 = v0[208];
  v13 = v0[213];
  v10 = v0[206];
  v11 = v0[209];
  v2 = v0[205];
  v3 = v0[177];
  v4 = v0[176];
  v5 = v0[155];
  v6 = v0[154];
  v14 = v0[203];
  v15 = v0[131];
  swift_release();

  OUTLINED_FUNCTION_222_0(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_220_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_184_0(v10, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v14, type metadata accessor for DataStreamState);
  v7 = OUTLINED_FUNCTION_93_2();
  *(_QWORD *)(v7 + 16) = v15;
  *(_BYTE *)(v7 + 24) = 0;
  OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v7, v17);
  OUTLINED_FUNCTION_301_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return OUTLINED_FUNCTION_30_6(v8);
}

{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_230_1();
  v2 = (void *)v1[261];
  OUTLINED_FUNCTION_358_0();
  v3 = v1[176];
  v4 = v1[131];
  OUTLINED_FUNCTION_159_0(v1[154]);
  v5 = OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_444(v5, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  OUTLINED_FUNCTION_102_0();

  OUTLINED_FUNCTION_415_0(v6, type metadata accessor for DataStreamState);
  v7 = OUTLINED_FUNCTION_93_2();
  *(_QWORD *)(v7 + 16) = v4;
  *(_BYTE *)(v7 + 24) = 0;
  OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v7, v0);
  OUTLINED_FUNCTION_301_0();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return OUTLINED_FUNCTION_30_6(v8);
}

{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  OUTLINED_FUNCTION_230_1();
  OUTLINED_FUNCTION_358_0();
  v2 = v1[176];
  v3 = v1[131];
  OUTLINED_FUNCTION_159_0(v1[154]);
  v4 = OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_444(v4, &demangling cache variable for type metadata for PromptCompletionEventCandidateTextDelta?);
  OUTLINED_FUNCTION_102_0();
  v5 = OUTLINED_FUNCTION_224_1();
  OUTLINED_FUNCTION_415_0(v5, type metadata accessor for DataStreamState);
  v6 = OUTLINED_FUNCTION_93_2();
  *(_QWORD *)(v6 + 16) = v3;
  *(_BYTE *)(v6 + 24) = 0;
  OUTLINED_FUNCTION_202_0((void (*)(uint64_t *__return_ptr))closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply, v6, v0);
  OUTLINED_FUNCTION_301_0();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_369();
  OUTLINED_FUNCTION_216();
  OUTLINED_FUNCTION_254_0();
  OUTLINED_FUNCTION_257_0();
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_226_0();
  OUTLINED_FUNCTION_214_0();
  OUTLINED_FUNCTION_213_0();
  OUTLINED_FUNCTION_212_0();
  OUTLINED_FUNCTION_211_0();
  OUTLINED_FUNCTION_247_0();
  OUTLINED_FUNCTION_210_0();
  OUTLINED_FUNCTION_209_0();
  OUTLINED_FUNCTION_208_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_56_5();
  OUTLINED_FUNCTION_55_4();
  OUTLINED_FUNCTION_54_5();
  OUTLINED_FUNCTION_53_5();
  OUTLINED_FUNCTION_52_4();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_115_1();
  OUTLINED_FUNCTION_114_0();
  OUTLINED_FUNCTION_113_2();
  OUTLINED_FUNCTION_112_3();
  OUTLINED_FUNCTION_111_3();
  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_109_2();
  OUTLINED_FUNCTION_108_3();
  OUTLINED_FUNCTION_107_3();
  OUTLINED_FUNCTION_106_2();
  OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_104_2();
  OUTLINED_FUNCTION_101_2();
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_103_3();
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_51_4();
  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_49_5();
  OUTLINED_FUNCTION_296();
  OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128_2();
  v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_121_1();
  return OUTLINED_FUNCTION_30_6(v7);
}

{
  return closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)();
}

void closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 1896);
  v2 = *(_QWORD **)(v0 + 1888);
  MEMORY[0x2495A937C]();
  OnDeviceInferenceProvider.processPrompt(with:prompt:)((uint64_t)v2, &v99);
  if (v1)
  {
    v3 = v1;
    OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 1560));
    OUTLINED_FUNCTION_116();
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_159_0(*(_QWORD *)(v0 + 1560));
  v5 = v99;
  v4 = v100;
  if (!*(_QWORD *)(v99 + 16))
  {
    v17 = *(_QWORD *)(v0 + 1544);
    v18 = *(_QWORD *)(v0 + 1536);
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_19_3();
    Dictionary.init(dictionaryLiteral:)();
    InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
    v2 = (_QWORD *)OUTLINED_FUNCTION_66_3();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
    v3 = OUTLINED_FUNCTION_7_11();
    v20 = v19;
    v21 = OUTLINED_FUNCTION_383(v3, v19);
    OUTLINED_FUNCTION_196_1(v21, v22, v23);
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(v2 - 1) + 104))(v20, *MEMORY[0x24BE68980], v2);
    swift_willThrow();
    OUTLINED_FUNCTION_194_1(v17, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
LABEL_32:
    *(_QWORD *)(v0 + 2160) = v3;
    OUTLINED_FUNCTION_392_0(*(_QWORD *)(v0 + 1728), *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 1856));
    OUTLINED_FUNCTION_417();
    OUTLINED_FUNCTION_417();
    Logger.logObject.getter();
    v51 = OUTLINED_FUNCTION_244_0();
    if (OUTLINED_FUNCTION_73_3(v51))
    {
      v52 = OUTLINED_FUNCTION_4_11();
      v91 = (_QWORD *)OUTLINED_FUNCTION_4_11();
      v99 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v52 = 136315394;
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v53 = OUTLINED_FUNCTION_50_5();
      *(_QWORD *)(v0 + 944) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v99);
      OUTLINED_FUNCTION_268_0();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_440();
      *(_WORD *)(v52 + 12) = 2112;
      OUTLINED_FUNCTION_417();
      v55 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 952) = v55;
      OUTLINED_FUNCTION_346();
      *v91 = v55;
      OUTLINED_FUNCTION_105_0();
      OUTLINED_FUNCTION_105_0();
      OUTLINED_FUNCTION_45_5(&dword_248CAA000, v56, v57, "Failed to handle request %s, error tokenizing prompt: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_440();
    OUTLINED_FUNCTION_105_0();
    OUTLINED_FUNCTION_105_0();

    v58 = *(_QWORD *)(v0 + 1416);
    v92 = *(_QWORD *)(v0 + 1408);
    v94 = *(_QWORD *)(v0 + 1400);
    v97 = *(_QWORD *)(v0 + 1584);
    v59 = *(_QWORD *)(v0 + 1240);
    v60 = *(_QWORD *)(v0 + 1232);
    v61 = *(_QWORD *)(v0 + 1624) + *(int *)(*(_QWORD *)(v0 + 1576) + 44);
    OUTLINED_FUNCTION_444(v62, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    v63 = *MEMORY[0x24BE5A968];
    v64 = OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_26_0(v61, v63, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 104));
    OUTLINED_FUNCTION_241(v61);
    OUTLINED_FUNCTION_417();
    OUTLINED_FUNCTION_311();
    TokenGenerationError.Context.init(debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v59, v58, v94);
    v65 = OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8068], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 104));
    OUTLINED_FUNCTION_273_0(v65, v66, v67, v68, v69, v70, v71, v72, v83, v84, v85, v86, v87, v88, v90, v92, v94, v97);
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    *(_QWORD *)(v0 + 2168) = OUTLINED_FUNCTION_7_11();
    OUTLINED_FUNCTION_117_2(v73, v59, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16));
    v74 = (_QWORD *)OUTLINED_FUNCTION_183_0();
    *(_QWORD *)(v0 + 2176) = v74;
    *v74 = v0;
    v74[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    OUTLINED_FUNCTION_237_1();
    OUTLINED_FUNCTION_313_0();
    OUTLINED_FUNCTION_312();
    __asm { BR              X4 }
  }
  v96 = v0 + 56;
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_64_1();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    OUTLINED_FUNCTION_4_11();
    v99 = v5;
    *(_DWORD *)v8 = 136315138;
    v100 = v4;
    SamplingDecoderPrompt.description.getter();
    *(_QWORD *)(v0 + 1008) = OUTLINED_FUNCTION_190_0(v9, v10, v11, v12, v13, v14, v15, v16, v83, v84, v85, v86, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v6, v7, "Tokenized prompt is %s", v8);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_19_6();

  v24 = v4;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(*(_QWORD *)(v0 + 1888) + 16, v96);
  v25 = *(_QWORD *)(v0 + 80);
  v26 = *(_QWORD *)(v0 + 88);
  v27 = (_QWORD *)OUTLINED_FUNCTION_318_0();
  __swift_project_boxed_opaque_existential_1(v27, v28);
  v99 = v5;
  v100 = v4;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 8))(&v99, v25, v26);
  __swift_destroy_boxed_opaque_existential_1(v96);
  v99 = MEMORY[0x24BEE4AF8];
  v29 = *(_QWORD *)(v4 + 16);
  if (v29)
  {
    OUTLINED_FUNCTION_92_1();
    OUTLINED_FUNCTION_64_1();
    v30 = 0;
    v31 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v32 = *(_QWORD *)(v24 + 8 * v30 + 32);
      v33 = *(_QWORD *)(v32 + 16);
      v34 = *(_QWORD *)(v31 + 16);
      if (__OFADD__(v34, v33))
        break;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v34 + v33 > *(_QWORD *)(v31 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v31 = v35;
      }
      if (*(_QWORD *)(v32 + 16))
      {
        v36 = *(_QWORD *)(v31 + 16);
        if ((*(_QWORD *)(v31 + 24) >> 1) - v36 < v33)
          goto LABEL_37;
        v37 = (void *)(v31 + 8 * v36 + 32);
        if (v32 + 32 < (unint64_t)v37 + 8 * v33 && (unint64_t)v37 < v32 + 32 + 8 * v33)
          goto LABEL_39;
        memcpy(v37, (const void *)(v32 + 32), 8 * v33);
        if (v33)
        {
          v39 = *(_QWORD *)(v31 + 16);
          v40 = __OFADD__(v39, v33);
          v41 = v39 + v33;
          if (v40)
            goto LABEL_38;
          *(_QWORD *)(v31 + 16) = v41;
        }
      }
      else if (v33)
      {
        goto LABEL_36;
      }
      ++v30;
      OUTLINED_FUNCTION_20_2();
      if (v29 == v30)
      {
        OUTLINED_FUNCTION_119_0();
        v99 = v31;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    OUTLINED_FUNCTION_61_2();
    OUTLINED_FUNCTION_326_0();
    _fatalErrorMessage(_:_:file:line:flags:)();
    OUTLINED_FUNCTION_312();
  }
  else
  {
    OUTLINED_FUNCTION_92_1();
    OUTLINED_FUNCTION_85_1();
LABEL_27:
    v42 = *(_QWORD *)(v0 + 1624);
    OUTLINED_FUNCTION_92_1();
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_119_0();
    v43 = *(_QWORD *)(v99 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v42 + 16) = v43;
    v99 = 0;
    v100 = 0xE000000000000000;
    if (v29)
    {
      OUTLINED_FUNCTION_85_1();
      v44 = 0;
      do
      {
        v45 = v24;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_22_4();
        v46 = dispatch thunk of TokenizerRunner.detokenize(_:)();
        v48 = v47;
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_116();
        ++v44;
        v49._countAndFlagsBits = v46;
        v49._object = v48;
        String.append(_:)(v49);
        OUTLINED_FUNCTION_119_0();
        v24 = v45;
      }
      while (v29 != v44);
      OUTLINED_FUNCTION_119_0();
    }
    OUTLINED_FUNCTION_22_4();
    v50 = dispatch thunk of TokenizerRunner.detokenize(_:)();
    *(_QWORD *)(v0 + 1912) = 0;
    v76 = v50;
    v78 = v77;
    v98 = *(_QWORD *)(v0 + 1624);
    v93 = *(_QWORD *)(v0 + 1832);
    v95 = *(_QWORD *)(v0 + 1616);
    v89 = *(_QWORD *)(v0 + 1512);
    v79 = *(_QWORD *)(v0 + 1128);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_116();
    v80._countAndFlagsBits = v76;
    v80._object = v78;
    String.append(_:)(v80);
    OUTLINED_FUNCTION_119_0();
    v81 = v99;
    v82 = v100;
    OUTLINED_FUNCTION_4_0();
    *(_QWORD *)(v79 + 16) = v81;
    *(_QWORD *)(v79 + 24) = v82;
    swift_bridgeObjectRelease();
    type metadata accessor for TransparencyReport();
    OUTLINED_FUNCTION_229_0();
    TransparencyReport.init()();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_65_0();
    InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
    OUTLINED_FUNCTION_221_1(*MEMORY[0x24BE59D70], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 104));
    TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_19_3();
    OUTLINED_FUNCTION_142_0(*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
    *(_QWORD *)(v0 + 1920) = *(_QWORD *)(v93 + 176);
    outlined init with copy of DataStreamState(v98, v95);
    OUTLINED_FUNCTION_187_1();
    OUTLINED_FUNCTION_312();
    swift_task_switch();
  }
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  os_log_type_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void (*v47)(uint64_t, uint64_t);
  _QWORD *v48;

  OUTLINED_FUNCTION_80();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  a15 = *MEMORY[0x24BDAC8D0];
  v29 = *(void **)(v26 + 1896);
  OUTLINED_FUNCTION_392_0(*(_QWORD *)(v26 + 1800), *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v26 + 1856));
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_5_1();
  Logger.logObject.getter();
  v30 = OUTLINED_FUNCTION_244_0();
  if (OUTLINED_FUNCTION_73_3(v30))
  {
    v31 = *(void **)(v26 + 1896);
    v47 = *(void (**)(uint64_t, uint64_t))(v26 + 1864);
    v32 = *(_QWORD *)(v26 + 1800);
    v33 = *(_QWORD *)(v26 + 1712);
    v34 = OUTLINED_FUNCTION_4_11();
    v48 = (_QWORD *)OUTLINED_FUNCTION_4_11();
    a14 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v34 = 136315394;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v35 = OUTLINED_FUNCTION_50_5();
    *(_QWORD *)(v26 + 920) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &a14);
    OUTLINED_FUNCTION_268_0();
    OUTLINED_FUNCTION_51_1();
    v47(v32, v33);
    *(_WORD *)(v34 + 12) = 2112;
    v37 = v31;
    v38 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v26 + 928) = v38;
    OUTLINED_FUNCTION_346();
    *v48 = v38;

    OUTLINED_FUNCTION_45_5(&dword_248CAA000, v39, v40, "Failed to handle request %s, error creating inference context: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  (*(void (**)(_QWORD, _QWORD))(v26 + 1864))(*(_QWORD *)(v26 + 1800), *(_QWORD *)(v26 + 1712));
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_227();

  v41 = *(_QWORD *)(v26 + 1624) + *(int *)(*(_QWORD *)(v26 + 1576) + 44);
  OUTLINED_FUNCTION_165_0(v42, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  v43 = OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_23_7(v43);
  OUTLINED_FUNCTION_210_1(v41);
  v44 = async function pointer to specialized OnDeviceInferenceProvider.finishStreamWithError<A>(uuid:dataStreamState:error:);
  v45 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v26 + 2144) = v45;
  *v45 = v26;
  v45[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
  return OUTLINED_FUNCTION_146_0(*(_QWORD *)(v26 + 1024), *(_QWORD *)(v26 + 1080), *(_QWORD *)(v26 + 1624), *(_QWORD *)(v26 + 1896), (uint64_t (*)(void))((char *)&async function pointer to specialized OnDeviceInferenceProvider.finishStreamWithError<A>(uuid:dataStreamState:error:)+ v44));
}

{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  os_log_type_t v79;
  _QWORD *v80;
  NSObject *v81;
  uint64_t v82;
  id *v83;
  uint64_t v84;

  OUTLINED_FUNCTION_80();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  a15 = *MEMORY[0x24BDAC8D0];
  v29 = *(_QWORD *)(v26 + 2008);
  __swift_destroy_boxed_opaque_existential_1(v26 + 136);
  OUTLINED_FUNCTION_172_1();
  OUTLINED_FUNCTION_171_1();
  *(_QWORD *)(v26 + 2088) = v29;
  if (one-time initialization token for device != -1)
    swift_once();
  v30 = *(_QWORD *)(v26 + 1760);
  v31 = *(_QWORD *)(v26 + 1720);
  v32 = *(NSObject **)(v26 + 1712);
  v33 = *(_QWORD *)(v26 + 1040);
  v34 = OUTLINED_FUNCTION_15_4();
  __swift_project_value_buffer(v34, (uint64_t)static Log.device);
  OUTLINED_FUNCTION_99(v30, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_434();
  v35 = OUTLINED_FUNCTION_156();
  v36 = os_log_type_enabled(v32, v35);
  v37 = *(_QWORD *)(v26 + 1760);
  v38 = *(_QWORD *)(v26 + 1720);
  v83 = (id *)(v26 + 976);
  if (v36)
  {
    v79 = v35;
    v81 = v32;
    v39 = OUTLINED_FUNCTION_4_11();
    v80 = (_QWORD *)OUTLINED_FUNCTION_4_11();
    a14 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v39 = 136315394;
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v40 = OUTLINED_FUNCTION_50_5();
    *(_QWORD *)(v26 + 968) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &a14);
    OUTLINED_FUNCTION_390();
    OUTLINED_FUNCTION_205_0();
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_222_0(v37, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    *(_WORD *)(v39 + 12) = 2112;
    if (v29)
    {
      OUTLINED_FUNCTION_5_1();
      v42 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v26 + 880) = v42;
      OUTLINED_FUNCTION_346();
    }
    else
    {
      *(_QWORD *)(v26 + 936) = 0;
      OUTLINED_FUNCTION_346();
      v42 = 0;
    }
    *v80 = v42;
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v81, v79, "Failed to handle request %s, error decoding next token. Underlying error: %@.", (uint8_t *)v39);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_222_0(v37, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_3_3();

  OUTLINED_FUNCTION_134_0();
  OUTLINED_FUNCTION_165_0(v43, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
  v44 = *MEMORY[0x24BE5A960];
  OUTLINED_FUNCTION_61_0();
  v45 = OUTLINED_FUNCTION_385_0();
  OUTLINED_FUNCTION_26_0(v45, v44, v46);
  OUTLINED_FUNCTION_241(v37);
  if (!v29)
  {
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_43_6();
    goto LABEL_19;
  }
  swift_getErrorValue();
  v47 = *(_QWORD *)(v26 + 416);
  v48 = *(_QWORD *)(*(_QWORD *)(v26 + 424) - 8);
  v49 = swift_task_alloc();
  OUTLINED_FUNCTION_99(v49, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16));
  OUTLINED_FUNCTION_390();
  Error.localizedDescription.getter();
  v50 = OUTLINED_FUNCTION_426();
  v51(v50);
  String.debugDescription.getter();
  v44 = v52;
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_277();
  OUTLINED_FUNCTION_5_1();
  TokenGenerationError.Context.init(debugDescription:underlyingError:)();
  *(_QWORD *)(v26 + 984) = v29;
  OUTLINED_FUNCTION_5_1();
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for NSError();
  OUTLINED_FUNCTION_340_0();
  if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
  {
LABEL_19:
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 104));
LABEL_20:
    OUTLINED_FUNCTION_42_5();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    v58 = OUTLINED_FUNCTION_11_0();
    OUTLINED_FUNCTION_36_4(v58, v59);
    v60 = OUTLINED_FUNCTION_170_1();
    v61 = (_QWORD *)OUTLINED_FUNCTION_315_0(v60);
    OUTLINED_FUNCTION_182_1(v61);
    OUTLINED_FUNCTION_319_0();
    return OUTLINED_FUNCTION_146_0(v62, v63, v64, v65, v66);
  }
  v54 = *v83;
  if (objc_msgSend(*v83, sel_code) != (id)2)
  {
LABEL_17:

    goto LABEL_19;
  }
  v55 = objc_msgSend(v54, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_397_0();

  if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v56)
  {
    OUTLINED_FUNCTION_19_6();
  }
  else
  {
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_50_2();
    if ((v44 & 1) == 0)
      goto LABEL_17;
  }
  v68 = *(_QWORD *)(*(_QWORD *)(v26 + 1608) + 8);
  v69 = *(_QWORD *)(*(_QWORD *)(v26 + 1608) + 16);
  v70 = __OFADD__(v69, v68);
  v71 = v69 + v68;
  if (v70)
    __break(1u);
  v72 = *(_QWORD *)(v26 + 1120);
  **(_QWORD **)(v26 + 1248) = v71;
  result = OUTLINED_FUNCTION_22();
  if (*(_QWORD *)(v72 + 16))
  {
    v73 = *(_QWORD *)(v26 + 1408);
    v82 = *(_QWORD *)(v26 + 1424);
    v84 = *(_QWORD *)(v26 + 1256);
    v74 = *(_QWORD *)(v26 + 1248);
    v75 = *(_QWORD *)(v26 + 1232);
    v76 = *(_QWORD *)(v26 + 1224);
    v77 = v74
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (count: Int, maximum: Int, TokenGenerationError.Context))
                 + 64);
    OUTLINED_FUNCTION_22_4();
    v78 = OnDeviceInferenceContext.maximumContextLength.getter();

    OUTLINED_FUNCTION_116();
    *(_QWORD *)(v74 + 8) = v78;
    OUTLINED_FUNCTION_26_0(v77, v82, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16));
    OUTLINED_FUNCTION_221_1(*MEMORY[0x24BEB8060], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 104));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v84, v74, v76);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  os_log_type_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  OUTLINED_FUNCTION_126_2();
  a23 = v27;
  a24 = v28;
  a22 = v26;
  a13 = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_300();
  if (v29)
  {
    OUTLINED_FUNCTION_186_1(v29 + 16);
    v30 = (_QWORD *)OUTLINED_FUNCTION_97_3();
    v26[249] = v30;
    *v30 = v26;
    v30[1] = closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:);
    OUTLINED_FUNCTION_26_2();
    return v33(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    OUTLINED_FUNCTION_172_1();
    OUTLINED_FUNCTION_171_1();
    v26[261] = 0;
    if (one-time initialization token for device != -1)
      swift_once();
    v40 = OUTLINED_FUNCTION_33_5();
    OUTLINED_FUNCTION_12_7(v40, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_184_1();
    v41 = OUTLINED_FUNCTION_244_0();
    OUTLINED_FUNCTION_73_3(v41);
    OUTLINED_FUNCTION_257_1();
    if (v42)
    {
      OUTLINED_FUNCTION_4_11();
      v43 = (_QWORD *)OUTLINED_FUNCTION_4_11();
      a12 = OUTLINED_FUNCTION_4_11();
      OUTLINED_FUNCTION_365_0(4.8151e-34);
      lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v44 = OUTLINED_FUNCTION_74_2();
      v26[121] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &a12);
      OUTLINED_FUNCTION_205_0();
      OUTLINED_FUNCTION_116_0();
      OUTLINED_FUNCTION_38_4();
      OUTLINED_FUNCTION_272_0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v43 = 0;
      OUTLINED_FUNCTION_95_2();
      OUTLINED_FUNCTION_95_2();
      OUTLINED_FUNCTION_45_5(&dword_248CAA000, v46, v47, "Failed to handle request %s, error decoding next token. Underlying error: %@.");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_34_3();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_95_2();
    OUTLINED_FUNCTION_95_2();

    OUTLINED_FUNCTION_134_0();
    OUTLINED_FUNCTION_165_0(v48, &demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType?);
    v49 = OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_23_7(v49);
    OUTLINED_FUNCTION_67_3();
    OUTLINED_FUNCTION_43_6();
    OUTLINED_FUNCTION_19_8();
    OUTLINED_FUNCTION_99_3(*MEMORY[0x24BEB8050], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 104));
    OUTLINED_FUNCTION_42_5();
    lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, (void (*)(uint64_t))MEMORY[0x24BEB8098]);
    v50 = OUTLINED_FUNCTION_11_0();
    OUTLINED_FUNCTION_36_4(v50, v51);
    v52 = OUTLINED_FUNCTION_170_1();
    v53 = (_QWORD *)OUTLINED_FUNCTION_315_0(v52);
    OUTLINED_FUNCTION_182_1(v53);
    OUTLINED_FUNCTION_319_0();
    OUTLINED_FUNCTION_26_2();
    return v58(v54, v55, v56, v57, v58, v59, v60, v61, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t specialized OnDeviceInferenceProvider.finishStreamWithError<A>(uuid:dataStreamState:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a2;
  v5[3] = a3;
  return swift_task_switch();
}

uint64_t specialized OnDeviceInferenceProvider.finishStreamWithError<A>(uuid:dataStreamState:error:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = specialized OnDeviceInferenceProvider.finishStreamWithError<A>(uuid:dataStreamState:error:);
  v2 = OUTLINED_FUNCTION_247_1(*(_QWORD *)(v0 + 16));
  return DataStreamStateManager.removeState(uuid:state:)(v2, v3);
}

{
  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  OUTLINED_FUNCTION_366();
  v2 = v1;
  return OUTLINED_FUNCTION_201_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OnDeviceInferenceProvider.processPrompt(with:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  OnDeviceInferenceProvider.promptTokenTable(from:)(*(_QWORD *)(a1 + 112));
  OnDeviceInferenceProvider.localizationOverrideMap(from:)(*(_QWORD *)(a1 + 120));
  if (v2)
    return swift_bridgeObjectRelease();
  if (!*(_QWORD *)(Prompt.renderPromptModules(tokenTable:)() + 16))
  {
    OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_22_4();
    OUTLINED_FUNCTION_423();
    v21 = dispatch thunk of TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)();
    swift_release();
    OUTLINED_FUNCTION_51_1();
    result = OUTLINED_FUNCTION_50_2();
    v22 = MEMORY[0x24BEE4AF8];
    *a2 = v21;
    a2[1] = v22;
    return result;
  }
  OUTLINED_FUNCTION_51_1();
  swift_retain();
  v6 = dispatch thunk of TokenizerRunner.tokenizePromptModules(promptModules:tokenTable:)();
  swift_release();
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_50_2();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    OUTLINED_FUNCTION_21_1();
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v10 = *(_QWORD *)(v6 + 8 * v8 + 32);
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v9 + 16);
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      OUTLINED_FUNCTION_50_1();
      if (!swift_isUniquelyReferenced_nonNull_native() || v12 + v11 > *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v13;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v14 = *(_QWORD *)(v9 + 16);
        if ((*(_QWORD *)(v9 + 24) >> 1) - v14 < v11)
          goto LABEL_32;
        v15 = (void *)(v9 + 8 * v14 + 32);
        if (v10 + 32 < (unint64_t)v15 + 8 * v11 && (unint64_t)v15 < v10 + 32 + 8 * v11)
          goto LABEL_36;
        memcpy(v15, (const void *)(v10 + 32), 8 * v11);
        if (v11)
        {
          v17 = *(_QWORD *)(v9 + 16);
          v18 = __OFADD__(v17, v11);
          v19 = v17 + v11;
          if (v18)
            goto LABEL_33;
          *(_QWORD *)(v9 + 16) = v19;
        }
      }
      else if (v11)
      {
        goto LABEL_31;
      }
      OUTLINED_FUNCTION_51_1();
      ++v8;
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v6 + 16);
    if (v20 != 1)
      goto LABEL_27;
    result = swift_bridgeObjectRelease();
    *a2 = v9;
    a2[1] = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v20 = 0;
LABEL_27:
    OUTLINED_FUNCTION_50_2();
    if (v20)
    {
      if (v20 <= *(_QWORD *)(v6 + 16))
      {
        v23 = *(_QWORD *)(v6 + 8 * (v20 - 1) + 32);
        specialized Collection.prefix(_:)(v20 - 1, v6);
        OUTLINED_FUNCTION_397_0();
        v25 = v24;
        v27 = v26;
        OUTLINED_FUNCTION_65_0();
        result = specialized Array.init<A>(_:)(0, v6, v25, v27);
        *a2 = v23;
        a2[1] = result;
        return result;
      }
    }
    else
    {
LABEL_34:
      __break(1u);
    }
    __break(1u);
LABEL_36:
    OUTLINED_FUNCTION_61_2();
    OUTLINED_FUNCTION_326_0();
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void OnDeviceInferenceProvider.updateMetrics(dataStreamState:inferenceContext:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD);
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123[2];
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  unsigned int v127;
  __int128 v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _UNKNOWN **v135;
  _BYTE v136[8];
  _BYTE v137[8];

  v4 = type metadata accessor for OnDeviceInferenceAssetObjectE5Runner(0);
  *(_QWORD *)&v121 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v107 - v11;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v14);
  v115 = (uint64_t)v107 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_112_2();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v107 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v107 - v22;
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v107 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v107 - v29;
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_112_2();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)v107 - v32;
  if (a2)
  {
    OUTLINED_FUNCTION_271_0(a2 + 16);
    outlined init with take of LogitCollection(v123, (uint64_t)v137);
    OUTLINED_FUNCTION_271_0((uint64_t)v137);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingDecoder);
    type metadata accessor for TokenHealingDecoder();
    v107[2] = v34;
    v35 = OUTLINED_FUNCTION_54_3();
    v110 = v12;
    v113 = v33;
    if (v35)
    {
      v36 = v133 + 56;
      OUTLINED_FUNCTION_22();
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v36, (uint64_t)v123);
      OUTLINED_FUNCTION_30();
    }
    else
    {
      OUTLINED_FUNCTION_271_0((uint64_t)v137);
    }
    v37 = v118;
    outlined init with take of LogitCollection(v123, (uint64_t)v136);
    v38 = *a1;
    v39 = *(_QWORD *)(*a1 + 16);
    v114 = a1;
    *(_QWORD *)&v122 = v20;
    if (v39)
    {
      v40 = v38 + 32;
      v107[1] = v38;
      swift_bridgeObjectRetain();
      v41 = MEMORY[0x24BEE4AF8];
      do
      {
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v40, (uint64_t)v123);
        OUTLINED_FUNCTION_384_0();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (OUTLINED_FUNCTION_54_3())
        {
          OUTLINED_FUNCTION_209_1((uint64_t)v27);
          v42 = OUTLINED_FUNCTION_426();
          OUTLINED_FUNCTION_292_0(v42, v43);
          if (*(_BYTE *)(v37 + 40) == 2)
          {
            OUTLINED_FUNCTION_292_0(v37, (uint64_t)v30);
            v44 = 0;
          }
          else
          {
            outlined destroy of MaskedLanguageModel.SingleLogitCollection(v37, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
            v44 = 1;
          }
        }
        else
        {
          v44 = 1;
          OUTLINED_FUNCTION_321_0((uint64_t)v27);
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v27, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        }
        OUTLINED_FUNCTION_378_0((uint64_t)v30, v44);
        OUTLINED_FUNCTION_28_1((uint64_t)v30, 1, v4);
        if (v71)
        {
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v30, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        }
        else
        {
          v45 = v115;
          OUTLINED_FUNCTION_292_0((uint64_t)v30, v115);
          OUTLINED_FUNCTION_292_0(v45, v119);
          v46 = OUTLINED_FUNCTION_432();
          if ((v46 & 1) == 0)
            v41 = OUTLINED_FUNCTION_208_1();
          v47 = *(_QWORD *)(v41 + 16);
          if (v47 >= *(_QWORD *)(v41 + 24) >> 1)
            v41 = OUTLINED_FUNCTION_208_1();
          *(_QWORD *)(v41 + 16) = v47 + 1;
          OUTLINED_FUNCTION_219_0();
          OUTLINED_FUNCTION_292_0(v119, v48);
          v37 = v118;
        }
        v40 += 40;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      a1 = v114;
      v20 = (char *)v122;
    }
    else
    {
      v41 = MEMORY[0x24BEE4AF8];
    }
    v49 = (uint64_t)v113;
    specialized Collection.first.getter(v41, (uint64_t)v113);
    OUTLINED_FUNCTION_7_0();
    v50 = *(_QWORD *)(*a1 + 16);
    if (v50)
    {
      v51 = *a1 + 32;
      v119 = *a1;
      swift_bridgeObjectRetain();
      v52 = MEMORY[0x24BEE4AF8];
      do
      {
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v51, (uint64_t)v123);
        OUTLINED_FUNCTION_384_0();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceAssetObject);
        if (OUTLINED_FUNCTION_54_3())
        {
          OUTLINED_FUNCTION_209_1((uint64_t)v20);
          v53 = v117;
          OUTLINED_FUNCTION_262_0((uint64_t)v20, v117);
          if (*(_BYTE *)(v53 + 40) == 2)
          {
            outlined destroy of MaskedLanguageModel.SingleLogitCollection(v53, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
            v54 = 1;
          }
          else
          {
            OUTLINED_FUNCTION_262_0(v53, (uint64_t)v23);
            v54 = 0;
          }
        }
        else
        {
          v55 = (uint64_t)v20;
          v54 = 1;
          OUTLINED_FUNCTION_321_0(v55);
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v55, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
        }
        OUTLINED_FUNCTION_378_0((uint64_t)v23, v54);
        OUTLINED_FUNCTION_28_1((uint64_t)v23, 1, v4);
        if (v71)
        {
          v56 = OUTLINED_FUNCTION_350();
          _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v56, v57);
        }
        else
        {
          v58 = v116;
          OUTLINED_FUNCTION_262_0((uint64_t)v23, v116);
          OUTLINED_FUNCTION_262_0(v58, v120);
          v59 = OUTLINED_FUNCTION_432();
          if ((v59 & 1) == 0)
            v52 = OUTLINED_FUNCTION_208_1();
          v60 = *(_QWORD *)(v52 + 16);
          if (v60 >= *(_QWORD *)(v52 + 24) >> 1)
            v52 = OUTLINED_FUNCTION_208_1();
          *(_QWORD *)(v52 + 16) = v60 + 1;
          OUTLINED_FUNCTION_219_0();
          OUTLINED_FUNCTION_262_0(v120, v61);
        }
        v20 = (char *)v122;
        v51 += 40;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease();
      a1 = v114;
      v49 = (uint64_t)v113;
    }
    else
    {
      v52 = MEMORY[0x24BEE4AF8];
    }
    v62 = v112;
    specialized Collection.first.getter(v52, v112);
    OUTLINED_FUNCTION_7_0();
    v63 = v111;
    OUTLINED_FUNCTION_391_0(v49, v64, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
    OUTLINED_FUNCTION_28_1(v63, 1, v4);
    v65 = (uint64_t)v110;
    if (!v71)
    {
      v66 = OUTLINED_FUNCTION_295_0();
      outlined init with take of DataStreamState(v66, v67, v68);
      v69 = v109;
      OUTLINED_FUNCTION_421_0(v62, v70, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      v72 = OUTLINED_FUNCTION_28_1(v69, 1, v4);
      if (v71)
      {
        OUTLINED_FUNCTION_289_0(v72, &demangling cache variable for type metadata for OnDeviceInferenceAssetObjectE5Runner?);
      }
      else
      {
        v73 = v108;
        outlined init with take of DataStreamState(v69, v108, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        OUTLINED_FUNCTION_271_0((uint64_t)v136);
        v74 = type metadata accessor for TwoStageSpeculativeDecoder();
        v75 = OUTLINED_FUNCTION_54_3();
        if ((v75 & 1) != 0)
        {
          v76 = *(_QWORD *)(v133 + 112);
          v77 = *(_QWORD *)(v73 + 24);
          v78 = *((_QWORD *)v110 + 3);
          v134 = v74;
          v135 = &protocol witness table for TwoStageSpeculativeDecoder;
          OUTLINED_FUNCTION_274_0();
          swift_retain();
          SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)(v76, 0, v77, v78, &v133, (uint64_t)v123);
          outlined destroy of MaskedLanguageModel.SingleLogitCollection(v73, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
          OUTLINED_FUNCTION_192_1(v62);
          v79 = (uint64_t)v113;
          goto LABEL_52;
        }
        outlined destroy of MaskedLanguageModel.SingleLogitCollection(v73, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
        v49 = (uint64_t)v113;
      }
      OUTLINED_FUNCTION_271_0((uint64_t)v136);
      v80 = type metadata accessor for SpeculativeStreamingDecoder();
      if ((OUTLINED_FUNCTION_54_3() & 1) == 0)
      {
        OUTLINED_FUNCTION_192_1(v62);
        OUTLINED_FUNCTION_192_1(v49);
        OUTLINED_FUNCTION_261_0();
        goto LABEL_54;
      }
      v81 = *(_QWORD *)(v65 + 24);
      v134 = v80;
      v135 = &protocol witness table for SpeculativeStreamingDecoder;
      OUTLINED_FUNCTION_274_0();
      OUTLINED_FUNCTION_41_1();
      SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)(v82, v83, v84, v81, v85, v86);
      OUTLINED_FUNCTION_192_1(v62);
      v79 = v49;
LABEL_52:
      OUTLINED_FUNCTION_192_1(v79);
      OUTLINED_FUNCTION_261_0();
      v87 = *(_QWORD *)&v123[0];
      v88 = BYTE8(v123[0]);
      v122 = v123[1];
      v89 = v124;
      v90 = v125;
      v121 = v128;
      v91 = v129;
      v92 = v130;
      v93 = v126 | ((unint64_t)v127 << 32);
      v94 = v131;
      v95 = v132;
      v96 = (uint64_t)v114 + *(int *)(type metadata accessor for DataStreamState(0) + 52);
      *(_QWORD *)v96 = v87;
      *(_QWORD *)(v96 + 8) = v88;
      *(_OWORD *)(v96 + 16) = v122;
      *(_QWORD *)(v96 + 32) = v89;
      *(_QWORD *)(v96 + 40) = v90;
      v65 = (uint64_t)v110;
      *(_QWORD *)(v96 + 48) = v93;
      a1 = v114;
      *(_OWORD *)(v96 + 56) = v121;
      *(_QWORD *)(v96 + 72) = v91;
      *(_QWORD *)(v96 + 80) = v92;
      *(_QWORD *)(v96 + 88) = v94;
      *(_QWORD *)(v96 + 96) = v95;
      *(_BYTE *)(v96 + 104) = 0;
LABEL_54:
      OUTLINED_FUNCTION_22_4();
      outlined destroy of MaskedLanguageModel.SingleLogitCollection(v65, type metadata accessor for OnDeviceInferenceAssetObjectE5Runner);
      v97 = E5TransformerLanguageModel.fetchKVCacheUsageMetrics()();
      v99 = v98;
      v101 = v100;
      v103 = v102;
      OUTLINED_FUNCTION_116();
      v104 = type metadata accessor for DataStreamState(0);
      v105 = (uint64_t)a1 + *(int *)(v104 + 60);
      *(_QWORD *)v105 = v97;
      *(_BYTE *)(v105 + 8) = v99 & 1;
      v106 = (uint64_t)a1 + *(int *)(v104 + 64);
      *(_QWORD *)v106 = v101;
      *(_BYTE *)(v106 + 8) = v103 & 1;
      goto LABEL_55;
    }
    OUTLINED_FUNCTION_192_1(v62);
    OUTLINED_FUNCTION_192_1(v49);
    OUTLINED_FUNCTION_261_0();
    OUTLINED_FUNCTION_192_1(v63);
  }
LABEL_55:
  OUTLINED_FUNCTION_31();
}

void closure #2 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  DataStreamCancellationHandler.setisCancelled(isCancelled:)(1);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t OnDeviceInferenceProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 184);
  return v0;
}

uint64_t OnDeviceInferenceProvider.__deallocating_deinit()
{
  OnDeviceInferenceProvider.deinit();
  return swift_deallocClassInstance();
}

_QWORD *protocol witness for InferenceProvider.init() in conformance OnDeviceInferenceProvider@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = OnDeviceInferenceProvider.__allocating_init()();
  *a1 = result;
  return result;
}

void protocol witness for InferenceProvider.loadIn(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider;
  JUMPOUT(0x2495A9700);
}

void protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider;
  JUMPOUT(0x2495A970CLL);
}

uint64_t protocol witness for InferenceProvider.transitionAsset(withIdentifier:to:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider;
  return OnDeviceInferenceProvider.transitionAsset(withIdentifier:to:)(a1, a2, a3);
}

void protocol witness for InferenceProvider.requestStream(clientData:configuration:) in conformance OnDeviceInferenceProvider(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  OnDeviceInferenceProvider.requestStream(clientData:configuration:)(a1, a2, a3, a4);
}

uint64_t protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider;
  return OnDeviceInferenceProvider.requestOneShot(clientData:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for InferenceProvider.requestOneShot(clientData:configuration:) in conformance OnDeviceInferenceProvider()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = OUTLINED_FUNCTION_75_1();
  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  if (!v0)
    v2 = OUTLINED_FUNCTION_239_0();
  return v3(v2);
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider;
  return InferenceProvider.requestOneShot(clientData:configuration:)();
}

void protocol witness for InferenceProvider.cancelRequest(uuid:) in conformance OnDeviceInferenceProvider()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for InferenceProvider.cancelRequest(uuid:) in conformance OnDeviceInferenceProvider;
  JUMPOUT(0x2495A96DCLL);
}

uint64_t protocol witness for InferenceProvider.cancelRequest(uuid:) in conformance OnDeviceInferenceProvider()
{
  uint64_t v0;

  OUTLINED_FUNCTION_75_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

char *specialized DataStreamStateManager.init(assetRepository:instrumenterFinalizer:)(uint64_t a1, __int128 *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v12 = type metadata accessor for OnDeviceInferenceAssetRepository();
  v13 = &protocol witness table for OnDeviceInferenceAssetRepository;
  *(_QWORD *)&v11 = a1;
  swift_defaultActor_initialize();
  v6 = MEMORY[0x24BEE4B00];
  *((_QWORD *)a3 + 14) = MEMORY[0x24BEE4B00];
  *((_QWORD *)a3 + 15) = v6;
  *((_QWORD *)a3 + 16) = v6;
  *((_QWORD *)a3 + 17) = v6;
  *((_QWORD *)a3 + 18) = v6;
  v7 = OBJC_IVAR____TtC24TokenGenerationInference22DataStreamStateManager_logger;
  if (one-time initialization token for device != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.device);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&a3[v7], v9, v8);
  outlined init with take of LogitCollection(&v11, (uint64_t)(a3 + 152));
  outlined init with take of LogitCollection(a2, (uint64_t)(a3 + 192));
  return a3;
}

_QWORD *specialized OnDeviceInferenceAssetRepository.init(dataSource:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _QWORD v11[5];

  v11[3] = type metadata accessor for OnDeviceInferenceProviderDataSource();
  v11[4] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v11[0] = a1;
  swift_defaultActor_initialize();
  v4 = MEMORY[0x24BEE4B00];
  a2[14] = MEMORY[0x24BEE4B00];
  a2[15] = v4;
  v5 = MEMORY[0x24BEE4AF8];
  a2[16] = v4;
  a2[17] = v5;
  v6 = MEMORY[0x24BEE4B08];
  a2[18] = v4;
  a2[19] = v6;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v11, (uint64_t)(a2 + 20));
  v9 = type metadata accessor for OnDeviceInferenceOverrides();
  v10 = &protocol witness table for OnDeviceInferenceOverrides;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  OnDeviceInferenceOverrides.init()();
  outlined init with take of LogitCollection(&v8, (uint64_t)(a2 + 25));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return a2;
}

_QWORD *specialized OnDeviceInferenceAssetRepository.__allocating_init(dataSource:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v9[3];
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = *a1;
  v11 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v9[0] = a1;
  type metadata accessor for OnDeviceInferenceAssetRepository();
  v1 = (_QWORD *)swift_allocObject();
  v2 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  v6 = specialized OnDeviceInferenceAssetRepository.init(dataSource:)(*v4, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

char *specialized DataStreamStateManager.__allocating_init(assetRepository:instrumenterFinalizer:)(uint64_t a1, __int128 *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  _QWORD v12[3];
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = type metadata accessor for OnDeviceInferenceAssetRepository();
  v14 = &protocol witness table for OnDeviceInferenceAssetRepository;
  v12[0] = a1;
  type metadata accessor for DataStreamStateManager(0);
  v4 = (char *)swift_allocObject();
  v5 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  v9 = specialized DataStreamStateManager.init(assetRepository:instrumenterFinalizer:)(*v7, a2, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v9;
}

_QWORD *specialized OnDeviceInferenceProvider.init(dataSource:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  __int128 v13[2];
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  _QWORD v17[3];
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for OnDeviceInferenceProviderDataSource();
  v19 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v17[0] = a1;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)v17, (uint64_t)(a2 + 12));
  v15 = type metadata accessor for OnDeviceInferenceOverrides();
  v16 = &protocol witness table for OnDeviceInferenceOverrides;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
  OnDeviceInferenceOverrides.init()();
  outlined init with take of LogitCollection(&v14, (uint64_t)(a2 + 2));
  v4 = (uint64_t *)swift_allocObject();
  v5 = specialized OnDeviceInferenceAssetRepository.__allocating_init(dataSource:)(v4);
  a2[20] = type metadata accessor for OnDeviceInferenceAssetRepository();
  a2[21] = &protocol witness table for OnDeviceInferenceAssetRepository;
  a2[17] = v5;
  v15 = type metadata accessor for InstrumenterFinalizer();
  v16 = (_UNKNOWN **)MEMORY[0x24BE3BC58];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
  InstrumenterFinalizer.init()();
  outlined init with take of LogitCollection(&v14, (uint64_t)(a2 + 23));
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)(a2 + 17), (uint64_t)&v14);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0((uint64_t)(a2 + 23), (uint64_t)v13);
  v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v14, v15);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = specialized DataStreamStateManager.__allocating_init(assetRepository:instrumenterFinalizer:)(*v8, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  a2[22] = v10;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  OnDeviceInferenceProviderDataSource.createInferenceContextFactory(assetRepository:inferenceOverrides:dataSource:)((uint64_t)(a2 + 17), (uint64_t)(a2 + 2), (uint64_t)v17, &v14);
  outlined init with take of LogitCollection(&v14, (uint64_t)(a2 + 7));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return a2;
}

_QWORD *specialized OnDeviceInferenceProvider.__allocating_init(dataSource:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v9[3];
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = *a1;
  v11 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v9[0] = a1;
  type metadata accessor for OnDeviceInferenceProvider();
  v1 = (_QWORD *)swift_allocObject();
  v2 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_QWORD *)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  v6 = specialized OnDeviceInferenceProvider.init(dataSource:)(*v4, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t sub_248D3F610()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(OUTLINED_FUNCTION_4_4() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  OUTLINED_FUNCTION_363_0();
  OUTLINED_FUNCTION_220_1(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_295_0();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_4_4() - 8) + 80);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v2 + ((v6 + 24) & ~v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for InferenceProvider.cancelRequest(uuid:) in conformance OnDeviceInferenceProvider;
  return closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:)(a1, a2, v7, v8);
}

uint64_t outlined init with take of (key: Prompt.SpecialToken, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void lazy protocol witness table accessor for type AsyncThrowingMapSequence<DataStream<PromptCompletionEvent>, Data> and conformance AsyncThrowingMapSequence<A, B>(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_382_0();
  }
  OUTLINED_FUNCTION_49();
}

uint64_t type metadata accessor for OnDeviceInferenceProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for OnDeviceInferenceProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_248D3F7A0()
{
  OUTLINED_FUNCTION_363_0();
  OUTLINED_FUNCTION_349();
  return swift_deallocObject();
}

uint64_t sub_248D3F7B8()
{
  return OUTLINED_FUNCTION_297_0();
}

uint64_t sub_248D3F7C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_248D3F7E8()
{
  return OUTLINED_FUNCTION_297_0();
}

uint64_t sub_248D3F7F4()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_349();
  return swift_deallocObject();
}

uint64_t sub_248D3F810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;

  v2 = OUTLINED_FUNCTION_4_4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = (((((*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = OUTLINED_FUNCTION_299_0();
  v7 = *(_QWORD *)(v11 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v1 + 5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  OUTLINED_FUNCTION_352();
  OUTLINED_FUNCTION_352();
  OUTLINED_FUNCTION_352();
  OUTLINED_FUNCTION_352();
  OUTLINED_FUNCTION_352();
  OUTLINED_FUNCTION_363_0();
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v0 + v5, v2);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));
  v9(v0 + ((v4 + v6 + 16) & ~v4), v2);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v11);
  swift_release();
  OUTLINED_FUNCTION_254_1();
  OUTLINED_FUNCTION_254_1();
  OUTLINED_FUNCTION_254_1();
  OUTLINED_FUNCTION_254_1();
  OUTLINED_FUNCTION_254_1();
  OUTLINED_FUNCTION_254_1();
  return swift_deallocObject();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(OUTLINED_FUNCTION_4_4() - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v3 + v7 + 16) & ~v3;
  OUTLINED_FUNCTION_299_0();
  v15 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + v6);
  v14 = *(_QWORD *)(v1 + v5);
  v11 = *(_QWORD *)(v1 + v7 + 8);
  v12 = *(_QWORD *)(v1 + v7);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v16 + 16) = v9;
  *v9 = v16;
  v9[1] = protocol witness for InferenceProvider.loadOut(inferenceAssetIdentifier:) in conformance OnDeviceInferenceProvider;
  return closure #1 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)(a1, v15, v1 + v4, v14, v13, v12, v11, v1 + v8);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void partial apply for closure #2 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)()
{
  closure #2 in OnDeviceInferenceProvider.requestStream(clientData:configuration:isOneShot:)();
}

void partial apply for closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(_BYTE *a1@<X8>)
{
  uint64_t v1;

  closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_248D3FC24()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_349();
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

void lazy protocol witness table accessor for type RequestPayload and conformance RequestPayload(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    OUTLINED_FUNCTION_382_0();
  }
  OUTLINED_FUNCTION_49();
}

void outlined init with copy of DataStream<PromptCompletionEvent>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_49();
}

void outlined init with take of DataStreamState(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_146(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_49();
}

void closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)partial apply(_BYTE *a1@<X8>)
{
  partial apply for closure #1 in DataStreamCancellationHandler.setIsInUse(isInUse:)(a1);
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[173];
  *(_QWORD *)(v1 - 240) = v0[174];
  *(_QWORD *)(v1 - 232) = v2;
  v3 = v0[169];
  *(_QWORD *)(v1 - 224) = v0[172];
  *(_QWORD *)(v1 - 216) = v3;
  v4 = v0[167];
  *(_QWORD *)(v1 - 208) = v0[168];
  *(_QWORD *)(v1 - 200) = v4;
  v5 = v0[165];
  *(_QWORD *)(v1 - 192) = v0[166];
  *(_QWORD *)(v1 - 184) = v5;
  v6 = v0[161];
  *(_QWORD *)(v1 - 176) = v0[164];
  *(_QWORD *)(v1 - 168) = v6;
  v7 = v0[157];
  *(_QWORD *)(v1 - 160) = v0[158];
  *(_QWORD *)(v1 - 152) = v7;
  v8 = v0[155];
  *(_QWORD *)(v1 - 144) = v0[156];
  *(_QWORD *)(v1 - 136) = v8;
  v9 = v0[151];
  *(_QWORD *)(v1 - 128) = v0[152];
  *(_QWORD *)(v1 - 120) = v9;
  v10 = v0[147];
  *(_QWORD *)(v1 - 112) = v0[150];
  *(_QWORD *)(v1 - 104) = v10;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[168];
  *(_QWORD *)(v1 - 216) = v0[169];
  *(_QWORD *)(v1 - 208) = v2;
  v3 = v0[166];
  *(_QWORD *)(v1 - 200) = v0[167];
  *(_QWORD *)(v1 - 192) = v3;
  v4 = v0[164];
  *(_QWORD *)(v1 - 184) = v0[165];
  *(_QWORD *)(v1 - 176) = v4;
  v5 = v0[158];
  *(_QWORD *)(v1 - 168) = v0[161];
  *(_QWORD *)(v1 - 160) = v5;
  v6 = v0[156];
  *(_QWORD *)(v1 - 152) = v0[157];
  *(_QWORD *)(v1 - 144) = v6;
  v7 = v0[152];
  *(_QWORD *)(v1 - 136) = v0[155];
  *(_QWORD *)(v1 - 128) = v7;
  v8 = v0[150];
  *(_QWORD *)(v1 - 120) = v0[151];
  *(_QWORD *)(v1 - 112) = v8;
  *(_QWORD *)(v1 - 104) = v0[147];
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[173];
  *(_QWORD *)(v1 - 248) = v0[174];
  *(_QWORD *)(v1 - 240) = v2;
  v3 = v0[169];
  *(_QWORD *)(v1 - 232) = v0[172];
  *(_QWORD *)(v1 - 224) = v3;
  v4 = v0[167];
  *(_QWORD *)(v1 - 216) = v0[168];
  *(_QWORD *)(v1 - 208) = v4;
  v5 = v0[165];
  *(_QWORD *)(v1 - 200) = v0[166];
  *(_QWORD *)(v1 - 192) = v5;
  v6 = v0[161];
  *(_QWORD *)(v1 - 184) = v0[164];
  *(_QWORD *)(v1 - 176) = v6;
  v7 = v0[157];
  *(_QWORD *)(v1 - 168) = v0[158];
  *(_QWORD *)(v1 - 160) = v7;
  v8 = v0[155];
  *(_QWORD *)(v1 - 152) = v0[156];
  *(_QWORD *)(v1 - 144) = v8;
  v9 = v0[151];
  *(_QWORD *)(v1 - 136) = v0[152];
  *(_QWORD *)(v1 - 128) = v9;
  v10 = v0[147];
  *(_QWORD *)(v1 - 120) = v0[150];
  *(_QWORD *)(v1 - 112) = v10;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_8_7()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v0[172];
  *(_QWORD *)(v1 - 240) = v0[173];
  *(_QWORD *)(v1 - 232) = v2;
  v3 = v0[168];
  *(_QWORD *)(v1 - 224) = v0[169];
  *(_QWORD *)(v1 - 216) = v3;
  v4 = v0[166];
  *(_QWORD *)(v1 - 208) = v0[167];
  *(_QWORD *)(v1 - 200) = v4;
  v5 = v0[164];
  *(_QWORD *)(v1 - 192) = v0[165];
  *(_QWORD *)(v1 - 184) = v5;
  v6 = v0[158];
  *(_QWORD *)(v1 - 176) = v0[161];
  *(_QWORD *)(v1 - 168) = v6;
  v7 = v0[156];
  *(_QWORD *)(v1 - 160) = v0[157];
  *(_QWORD *)(v1 - 152) = v7;
  v8 = v0[152];
  *(_QWORD *)(v1 - 144) = v0[155];
  *(_QWORD *)(v1 - 136) = v8;
  v9 = v0[150];
  *(_QWORD *)(v1 - 128) = v0[151];
  *(_QWORD *)(v1 - 120) = v9;
  *(_QWORD *)(v1 - 112) = v0[147];
}

uint64_t OUTLINED_FUNCTION_10_11()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[89];
  *(_QWORD *)(v1 - 152) = v0[92];
  *(_QWORD *)(v1 - 144) = v2;
  v3 = v0[86];
  *(_QWORD *)(v1 - 136) = v0[87];
  *(_QWORD *)(v1 - 128) = v3;
  v4 = v0[80];
  *(_QWORD *)(v1 - 120) = v0[83];
  *(_QWORD *)(v1 - 112) = v4;
  *(_QWORD *)(v1 - 104) = v0[77];
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_project_value_buffer(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v2);
}

void OUTLINED_FUNCTION_16_7()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[86];
  *(_QWORD *)(v1 - 152) = v0[87];
  *(_QWORD *)(v1 - 144) = v2;
  v3 = v0[80];
  *(_QWORD *)(v1 - 136) = v0[83];
  *(_QWORD *)(v1 - 128) = v3;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[176] + 16))(v0[157], v0[178], v0[175]);
}

void OUTLINED_FUNCTION_20_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t OUTLINED_FUNCTION_22_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_23_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  return swift_task_alloc();
}

_QWORD *OUTLINED_FUNCTION_29_4()
{
  uint64_t v0;
  _QWORD *result;

  result = __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 584) + 136), *(_QWORD *)(*(_QWORD *)(v0 + 584) + 160));
  *(_QWORD *)(v0 + 1336) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_6(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_33_5()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_36_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 2096) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_38_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  uint64_t v0;

  return outlined init with copy of DataStreamState(*(_QWORD *)(v0 + 1608), *(_QWORD *)(v0 + 1592));
}

uint64_t OUTLINED_FUNCTION_43_6()
{
  return TokenGenerationError.Context.init(debugDescription:underlyingError:)();
}

void OUTLINED_FUNCTION_45_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_47_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_50_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_52_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_53_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_54_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_55_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_56_5()
{
  return swift_task_dealloc();
}

id OUTLINED_FUNCTION_67_3()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return 0;
}

uint64_t OUTLINED_FUNCTION_69_4()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_70_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_71_4()
{
  return swift_task_switch();
}

BOOL OUTLINED_FUNCTION_73_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_74_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_80_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_83_2()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[201];
  *(_QWORD *)(v1 - 120) = v0[169];
  *(_QWORD *)(v1 - 112) = v2;
  v3 = v0[151];
  *(_QWORD *)(v1 - 128) = v0[150];
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0[149] + 32))(v3, v0[147], v0[148]);
}

uint64_t OUTLINED_FUNCTION_84_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_89_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_93_2()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_95_2()
{

}

uint64_t OUTLINED_FUNCTION_97_3()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 160));
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_99_3@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

uint64_t OUTLINED_FUNCTION_100_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_101_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_103_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_104_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_106_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_107_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_108_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_109_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_110_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_111_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_112_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_115_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_117_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_119_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_120_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_121_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

id OUTLINED_FUNCTION_127_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_128_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_129_2()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1[161];
  v5 = v1[160];
  v6 = v1[159];
  *(_QWORD *)(v3 + 16) = v0;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v3+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v2, v4, v6);
}

_QWORD *OUTLINED_FUNCTION_135_1()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 40));
}

void OUTLINED_FUNCTION_136_1()
{
  _StringGuts.grow(_:)(41);
}

uint64_t OUTLINED_FUNCTION_142_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_143_1(void (*a1)(uint64_t *__return_ptr))
{
  os_unfair_lock_s *v1;
  uint64_t v2;

  return specialized OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_146_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_147_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_148_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_149_1(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_150_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_151_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_152_1(uint64_t a1, uint64_t a2)
{
  return DataStreamStateManager.removeState(uuid:state:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_153_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
  return swift_retain();
}

BOOL OUTLINED_FUNCTION_155_0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_156_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_159_0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t OUTLINED_FUNCTION_161_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_162_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_164_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;

  return a12(v13, v12);
}

void OUTLINED_FUNCTION_165_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

void OUTLINED_FUNCTION_167_0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x616F6C20746F6E20;
  v0._object = (void *)0xEB00000000646564;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_170_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_171_1()
{
  return swift_deallocUninitializedObject();
}

uint64_t OUTLINED_FUNCTION_172_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_173@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_175_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_176_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_177_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_178_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_181_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v1 + 1;
  *(_QWORD *)(v3 + 8 * v1 + 32) = v0;
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_182_1(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 1024);
}

uint64_t OUTLINED_FUNCTION_183_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_184_1()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_185_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2112;
  *(_QWORD *)(v1 + 936) = 0;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_186_1(uint64_t a1)
{
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_189_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v3 - 128), v0, v1);
}

uint64_t OUTLINED_FUNCTION_190_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_191_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1080);
}

void OUTLINED_FUNCTION_192_1(uint64_t a1)
{
  uint64_t *v1;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_193_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_194_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_195_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v2, a2);
}

uint64_t OUTLINED_FUNCTION_196_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_198_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 112))();
}

uint64_t OUTLINED_FUNCTION_200_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_201_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_202_0(void (*a1)(uint64_t *__return_ptr), uint64_t a2, os_unfair_lock_s *a3)
{
  return specialized OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_203_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  *a13 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_204_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1112))(*(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1096), *(_QWORD *)(v0 + 1008));
}

uint64_t OUTLINED_FUNCTION_205_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_206_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_207_0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[215] + 16))(v0[223], v0[130], v0[214]);
}

uint64_t OUTLINED_FUNCTION_208_1()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_209_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_210_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_211_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_212_1()
{
  return PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)();
}

uint64_t OUTLINED_FUNCTION_213_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_215_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_217_0(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr);
  os_unfair_lock_s *v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_BYTE *)(a1 + 24) = 0;
  return specialized OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_220_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_221_1@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_222_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_224_1()
{
  return swift_release();
}

void OUTLINED_FUNCTION_227()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_228_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

unint64_t OUTLINED_FUNCTION_235_1()
{
  Swift::OpaquePointer v0;

  return (unint64_t)StopSequenceMonitor.handleOutputTokens(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_236_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[202];
  v2 = v0[201];
  v0[256] = *(_QWORD *)(v0[229] + 176);
  return outlined init with copy of DataStreamState(v2, v1);
}

uint64_t OUTLINED_FUNCTION_237_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1024);
}

uint64_t OUTLINED_FUNCTION_238_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_239_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_241_1(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_245_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_247_1@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_248_1()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_249_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 400) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_254_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_259_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v2, v0, v1);
}

void OUTLINED_FUNCTION_260_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 856) = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_261_0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 - 168);
  return __swift_destroy_boxed_opaque_existential_1(v0 - 128);
}

void OUTLINED_FUNCTION_262_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DataStreamState(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_263_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_265_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Sequence<>.contains(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_266_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 1024);
}

uint64_t OUTLINED_FUNCTION_267_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 128))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_268_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_269_0()
{
  return PromptCompletionEventUsage.init(responseIdentifier:usage:)();
}

void OUTLINED_FUNCTION_270_0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
}

void OUTLINED_FUNCTION_271_0(uint64_t a1)
{
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, v1 - 312);
}

void OUTLINED_FUNCTION_272_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2112;
  *(_QWORD *)(v1 + 936) = 0;
}

uint64_t OUTLINED_FUNCTION_273_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  return outlined init with copy of DataStreamState(v18, a18);
}

uint64_t OUTLINED_FUNCTION_274_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_275_0()
{
  return Usage.init(promptTokenCount:completionTokenCount:)();
}

uint64_t OUTLINED_FUNCTION_277_0(__n128 *a1, __n128 a2)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2].n128_u64[0] = *(_QWORD *)(v2 + 16);
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_278_0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

_QWORD *OUTLINED_FUNCTION_279@<X0>(uint64_t a1@<X8>)
{
  return __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 160));
}

void OUTLINED_FUNCTION_280(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(*(_QWORD *)(v2 - 112), a2);
}

uint64_t OUTLINED_FUNCTION_282_0()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_286_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_288_0()
{
  return InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
}

void OUTLINED_FUNCTION_289_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

uint64_t OUTLINED_FUNCTION_291_0()
{
  return Overridable.wrappedValue.getter();
}

void OUTLINED_FUNCTION_292_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DataStreamState(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_294_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1608) + *(int *)(*(_QWORD *)(v0 + 1576) + 56);
}

uint64_t OUTLINED_FUNCTION_295_0()
{
  uint64_t v0;

  return v0;
}

_QWORD *OUTLINED_FUNCTION_296_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return __swift_project_boxed_opaque_existential_1(v2, a2);
}

uint64_t OUTLINED_FUNCTION_297_0()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_298_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v18, a17);
}

uint64_t OUTLINED_FUNCTION_299_0()
{
  return type metadata accessor for InferenceProviderRequestConfiguration();
}

uint64_t OUTLINED_FUNCTION_301_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_302_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_303_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_304_0()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_305_0()
{
  DataStreamStateManager.updateState(uuid:state:)();
}

_QWORD *OUTLINED_FUNCTION_308_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;

  v3[153] = a1;
  v3[154] = a2;
  result = __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 160));
  v3[155] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_309_0()
{
  _OWORD *v0;
  uint64_t v1;
  __int128 v2;

  v2 = *(_OWORD *)(v1 + 40);
  *v0 = *(_OWORD *)(v1 + 24);
  v0[1] = v2;
  return InferenceProviderRequestConfiguration.assetBundleIdentifier.getter();
}

uint64_t OUTLINED_FUNCTION_310_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_314_0()
{
  return Overridable.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_315_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 2104) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_316_0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void OUTLINED_FUNCTION_317_0()
{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_318_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_320_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unint64_t v5;
  va_list va;

  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_321_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_322_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_324_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_325_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_328_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  unint64_t v12;
  va_list va;

  va_start(va, a11);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)va);
}

BOOL OUTLINED_FUNCTION_329_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_331_0()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_334_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined copy of MetadataSpecialToken(v0, v1, 1);
}

uint64_t OUTLINED_FUNCTION_335_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined copy of MetadataSpecialToken(v1, v0, 1);
}

uint64_t OUTLINED_FUNCTION_336_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

void OUTLINED_FUNCTION_337_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

uint64_t OUTLINED_FUNCTION_338_0()
{
  return Prompt.SpecialToken.init(identifier:)();
}

uint64_t OUTLINED_FUNCTION_340_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_341_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_343_0()
{
  return Token.init(text:)();
}

uint64_t OUTLINED_FUNCTION_345_0()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_346_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

void OUTLINED_FUNCTION_348_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v2, a2);
}

uint64_t OUTLINED_FUNCTION_349()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_350()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_351_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_356_0()
{
  return type metadata accessor for OnDeviceInferenceOverrides();
}

uint64_t OUTLINED_FUNCTION_357()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_358_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = *(_QWORD *)(v0 + 1832);
}

uint64_t OUTLINED_FUNCTION_359_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

void OUTLINED_FUNCTION_360_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(*(_QWORD *)(v2 - 120), a2);
}

uint64_t OUTLINED_FUNCTION_361(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = a1;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_363_0()
{
  return swift_release();
}

_QWORD *OUTLINED_FUNCTION_364_0()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 40));
}

void OUTLINED_FUNCTION_365_0(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_367_0()
{
  return Overridable.wrappedValue.getter();
}

uint64_t OUTLINED_FUNCTION_368_0()
{
  return Overridable.wrappedValue.getter();
}

void OUTLINED_FUNCTION_369_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 856) = v1;
}

void OUTLINED_FUNCTION_370_0()
{
  Swift::OpaquePointer v0;

  OnDeviceInferenceAssetRepository.releaseAssetObjects(assetObjects:)(v0);
}

void OUTLINED_FUNCTION_372_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_375_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 1768);
}

uint64_t OUTLINED_FUNCTION_377_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_378_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
  return __swift_destroy_boxed_opaque_existential_1(v3 - 312);
}

uint64_t OUTLINED_FUNCTION_380_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_382_0()
{
  JUMPOUT(0x2495AAEA0);
}

uint64_t OUTLINED_FUNCTION_383(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_384_0()
{
  uint64_t v0;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0 - 312, v0 - 208);
}

uint64_t OUTLINED_FUNCTION_385_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_386_0()
{
  return TokenGenerationError.inferenceErrorContext.getter();
}

uint64_t OUTLINED_FUNCTION_387_0()
{
  uint64_t v0;
  __int128 *v1;

  return outlined init with take of LogitCollection(v1, v0);
}

void OUTLINED_FUNCTION_388_0()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
}

void OUTLINED_FUNCTION_389_0()
{
  specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_390()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_391_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of DataStream<PromptCompletionEvent>(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_392_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 1040), *(_QWORD *)(v2 + 1712));
}

uint64_t OUTLINED_FUNCTION_394_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_395_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

BOOL OUTLINED_FUNCTION_396_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_398_0(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  *(_QWORD *)(v2 - 120) = v1 + 1;
}

uint64_t *OUTLINED_FUNCTION_399_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_400()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_401_0()
{
  return swift_task_dealloc();
}

_QWORD *OUTLINED_FUNCTION_403_0()
{
  uint64_t v0;

  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
}

unint64_t OUTLINED_FUNCTION_405_0()
{
  return 0xD000000000000012;
}

void OUTLINED_FUNCTION_407_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_409_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_410_0()
{
  return swift_task_dealloc();
}

_QWORD *OUTLINED_FUNCTION_411_0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_412_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_413_0()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_414_0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void OUTLINED_FUNCTION_415_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MaskedLanguageModel.SingleLogitCollection(v2, a2);
}

uint64_t OUTLINED_FUNCTION_416_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

void OUTLINED_FUNCTION_421_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of DataStream<PromptCompletionEvent>(a1, v3, a3);
}

void OUTLINED_FUNCTION_422_0()
{
  uint64_t v0;
  uint64_t v1;

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_423()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_424()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_425()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_426()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_427()
{
  uint64_t v0;

  return v0;
}

_OWORD *OUTLINED_FUNCTION_428()
{
  _OWORD *v0;
  uint64_t v1;

  return outlined init with take of Any((_OWORD *)(v1 - 144), v0);
}

uint64_t *OUTLINED_FUNCTION_429@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_430()
{
  uint64_t v0;

  outlined init with take of Any((_OWORD *)(v0 - 112), (_OWORD *)(v0 - 144));
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_432()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_433()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_434()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_437()
{
  return StopSequenceMonitor.currentBufferedTokens()();
}

void OUTLINED_FUNCTION_438()
{
  uint64_t *v0;
  uint64_t v1;

  OnDeviceInferenceProvider.updateMetrics(dataStreamState:inferenceContext:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_440()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_441()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_442()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_443()
{
  return swift_release();
}

void OUTLINED_FUNCTION_444(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, a2);
}

uint64_t MetadataSpecialToken.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;

  OUTLINED_FUNCTION_52_5();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  OUTLINED_FUNCTION_17_6();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    OUTLINED_FUNCTION_46_6();
    __swift_project_boxed_opaque_existential_1(v0, v0[3]);
    dispatch thunk of Decoder.singleValueContainer()();
    __swift_project_boxed_opaque_existential_1(v5, v6);
    OUTLINED_FUNCTION_17_6();
    v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v6);
    OUTLINED_FUNCTION_17_6();
    v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  }
  OUTLINED_FUNCTION_30_7(v3);
  OUTLINED_FUNCTION_404();
  return v3;
}

uint64_t static MetadataSpecialToken.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) == 0)
    return (a6 & 1) == 0 && a1 == a4;
  if ((a6 & 1) != 0)
  {
    if (a1 == a4 && a2 == a5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance MetadataSpecialToken@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;

  result = MetadataSpecialToken.init(from:)();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  return static MetadataSpecialToken.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

BOOL static E5Function.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void E5Function.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t E5Function.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x5472657470616461 && a2 == 0xEB00000000657079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E654C716573 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E654C787463 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t E5Function.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t E5Function.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t E5Function.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x5472657470616461;
  if (a1 == 1)
    return 0x6E654C716573;
  return 0x6E654C787463;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance E5Function.CodingKeys(char *a1, char *a2)
{
  return static E5Function.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance E5Function.CodingKeys()
{
  unsigned __int8 *v0;

  E5Function.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance E5Function.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  E5Function.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance E5Function.CodingKeys()
{
  char *v0;

  return E5Function.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance E5Function.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = E5Function.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance E5Function.CodingKeys()
{
  return E5Function.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance E5Function.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = E5Function.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance E5Function.CodingKeys()
{
  lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance E5Function.CodingKeys()
{
  lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void E5Function.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_50_4();
  OUTLINED_FUNCTION_52_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<E5Function.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_24_6(v0, v0[3]);
  lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys();
  OUTLINED_FUNCTION_55_5();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  OUTLINED_FUNCTION_68_3();
  OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_34_2();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0);
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_72_3();
}

void protocol witness for Decodable.init(from:) in conformance E5Function(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  E5Function.init(from:)();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

uint64_t DefaultParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v8;

  v2 = a1 == 0x6574537466617264 && a2 == 0xEA00000000007370;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x4173497466617264 && a2 == 0xEF65766974706164;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6572547466617264 && a2 == 0xEF726F7463614665;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000017 && a2 == 0x8000000248D7FF60
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000013 && a2 == 0x8000000248D7FFC0
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x8000000248D7FFE0
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else if (a1 == 0xD000000000000024 && a2 == 0x8000000248D80000)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 6;
        else
          return 7;
      }
    }
  }
}

uint64_t DefaultParameters.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D42164 + 4 * byte_248D76C10[a1]))(0x6574537466617264, 0xEA00000000007370);
}

uint64_t sub_248D42164()
{
  return 0x4173497466617264;
}

uint64_t sub_248D42188()
{
  return 0x6572547466617264;
}

unint64_t sub_248D421AC()
{
  return 0xD000000000000017;
}

void DefaultParameters.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  OUTLINED_FUNCTION_50_4();
  OUTLINED_FUNCTION_52_5();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DefaultParameters.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_24_6(v0, v0[3]);
  lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();
  OUTLINED_FUNCTION_55_5();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    OUTLINED_FUNCTION_404();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_38_5();
    v9 = v8;
    v18 = OUTLINED_FUNCTION_11_5();
    v10 = OUTLINED_FUNCTION_38_5();
    v16 = v11;
    v17 = v10;
    v15 = OUTLINED_FUNCTION_37_4();
    v14 = OUTLINED_FUNCTION_11_5();
    v13 = OUTLINED_FUNCTION_11_5();
    v12 = OUTLINED_FUNCTION_37_4();
    OUTLINED_FUNCTION_61_4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    OUTLINED_FUNCTION_404();
    *(_QWORD *)v5 = v7;
    *(_BYTE *)(v5 + 8) = v9 & 1;
    *(_BYTE *)(v5 + 9) = v18;
    *(_QWORD *)(v5 + 16) = v17;
    *(_BYTE *)(v5 + 24) = v16 & 1;
    *(_DWORD *)(v5 + 28) = v15;
    *(_BYTE *)(v5 + 32) = BYTE4(v15) & 1;
    *(_BYTE *)(v5 + 33) = v14;
    *(_BYTE *)(v5 + 34) = v13;
    *(_DWORD *)(v5 + 36) = v12;
    *(_BYTE *)(v5 + 40) = BYTE4(v12) & 1;
  }
  OUTLINED_FUNCTION_72_3();
  OUTLINED_FUNCTION_10_9();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DefaultParameters.CodingKeys()
{
  unsigned __int8 *v0;

  return DefaultParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DefaultParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = DefaultParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultParameters.CodingKeys()
{
  lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DefaultParameters.CodingKeys()
{
  lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double protocol witness for Decodable.init(from:) in conformance DefaultParameters@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _BYTE v5[25];

  DefaultParameters.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = *(_OWORD *)v5;
    result = *(double *)&v5[9];
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)&v5[9];
  }
  return result;
}

uint64_t ModelMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x7079546C65646F6DLL && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000248D80440
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000248D80460
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248D7FCB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000248D80480
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000248D803D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000248D804A0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x617A696C61636F6CLL && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t ModelMetadata.CodingKeys.init(intValue:)()
{
  return 8;
}

uint64_t ModelMetadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D42804 + 4 * byte_248D76C17[a1]))(0x7079546C65646F6DLL, 0xE900000000000065);
}

unint64_t sub_248D42804()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_248D42888()
{
  return 0x617A696C61636F6CLL;
}

void ModelMetadata.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  OUTLINED_FUNCTION_50_4();
  v2 = v1;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelMetadata.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_28_3();
  OUTLINED_FUNCTION_24_6(v2, v2[3]);
  lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();
  OUTLINED_FUNCTION_64_6();
  if (v0)
  {
    OUTLINED_FUNCTION_69_5();
  }
  else
  {
    v19 = v4;
    LOBYTE(v21) = 0;
    OUTLINED_FUNCTION_62_6();
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = v7;
    v18 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_3_11();
    v20 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : E5Function]);
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : E5Function] and conformance <> [A : B], &demangling cache variable for type metadata for [String : E5Function], (uint64_t (*)(void))lazy protocol witness table accessor for type E5Function and conformance E5Function);
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_3_11();
    v17 = v21;
    v9 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]();
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_3_11();
    v10 = lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_3_11();
    v16 = v21;
    if (!v10)
    {
      v15 = v21;
      LOBYTE(v21) = 5;
      OUTLINED_FUNCTION_62_6();
      v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v13 = v12;
      v14 = v11;
      OUTLINED_FUNCTION_68_3();
      OUTLINED_FUNCTION_3_11();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]]);
      lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : [String : MetadataSpecialToken]] and conformance <> [A : B], &demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]], lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]);
      OUTLINED_FUNCTION_12_8();
      OUTLINED_FUNCTION_3_11();
      OUTLINED_FUNCTION_0_11();
      OUTLINED_FUNCTION_21_1();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_69_5();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_51_1();
      OUTLINED_FUNCTION_119_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_50_2();
      swift_bridgeObjectRelease();
      *(_QWORD *)v19 = v18;
      *(_QWORD *)(v19 + 8) = v20;
      *(_QWORD *)(v19 + 16) = v17;
      *(_QWORD *)(v19 + 24) = v9;
      *(_QWORD *)(v19 + 32) = v16;
      *(_QWORD *)(v19 + 40) = v15;
      *(_QWORD *)(v19 + 48) = v22;
      *(_QWORD *)(v19 + 56) = v23;
      *(_QWORD *)(v19 + 64) = v24;
      *(_QWORD *)(v19 + 72) = v25;
      *(_BYTE *)(v19 + 80) = v26;
      *(_QWORD *)(v19 + 88) = v14;
      *(_QWORD *)(v19 + 96) = v13;
      *(_QWORD *)(v19 + 104) = v21;
      *(_QWORD *)(v19 + 112) = v21;
      goto LABEL_5;
    }
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_161_0();
    OUTLINED_FUNCTION_6_11();
    OUTLINED_FUNCTION_51_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_69_5();
    OUTLINED_FUNCTION_161_0();
  }
  OUTLINED_FUNCTION_26_7();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_50_2();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
LABEL_5:
  OUTLINED_FUNCTION_10_9();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelMetadata.CodingKeys()
{
  unsigned __int8 *v0;

  return ModelMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ModelMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ModelMetadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ModelMetadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance ModelMetadata(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE __src[120];

  ModelMetadata.init(from:)();
  if (!v1)
    memcpy(a1, __src, 0x78uLL);
}

uint64_t AdapterMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248D7FCB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248D803B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000248D803D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000248D803F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x8000000248D80410
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x617A696C61636F6CLL && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t AdapterMetadata.CodingKeys.init(intValue:)()
{
  return 7;
}

void E5Function.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_50_7();
}

uint64_t AdapterMetadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D4312C + 4 * byte_248D76C1F[a1]))(1701869940, 0xE400000000000000);
}

unint64_t sub_248D4312C()
{
  return 0xD000000000000010;
}

unint64_t sub_248D43154()
{
  return 0xD000000000000011;
}

uint64_t sub_248D431A4()
{
  return 0x617A696C61636F6CLL;
}

void AdapterMetadata.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE v39[7];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[7];
  uint64_t v47;
  char v48;
  uint64_t v49;
  _BYTE v50[7];
  _BYTE v51[7];
  char v52;

  OUTLINED_FUNCTION_50_4();
  v3 = v2;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AdapterMetadata.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_59();
  v52 = 1;
  OUTLINED_FUNCTION_24_6(v3, v3[3]);
  lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();
  OUTLINED_FUNCTION_55_5();
  OUTLINED_FUNCTION_64_6();
  if (v0)
  {
    OUTLINED_FUNCTION_63_4();
    OUTLINED_FUNCTION_63_0();
    OUTLINED_FUNCTION_26_7();
  }
  else
  {
    v26 = v5;
    LOBYTE(v30) = 0;
    v7 = OUTLINED_FUNCTION_28_6();
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetadataSpecialToken]);
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]();
    OUTLINED_FUNCTION_12_8();
    OUTLINED_FUNCTION_27_4();
    v10 = v30;
    swift_bridgeObjectRetain();
    v25 = OUTLINED_FUNCTION_28_6();
    v28 = v11;
    swift_bridgeObjectRetain();
    v12 = OUTLINED_FUNCTION_28_6();
    v27 = v13;
    v24 = v12;
    LOBYTE(v30) = 4;
    OUTLINED_FUNCTION_68_3();
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v52 = v14 & 1;
    LOBYTE(v29[0]) = 5;
    v15 = v14;
    lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters();
    OUTLINED_FUNCTION_27_4();
    v17 = v30;
    v21 = v32;
    v22 = v31;
    v19 = v34;
    v20 = v33;
    v18 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]]);
    v48 = 6;
    lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : [String : MetadataSpecialToken]] and conformance <> [A : B], &demangling cache variable for type metadata for [String : [String : MetadataSpecialToken]], lazy protocol witness table accessor for type [String : MetadataSpecialToken] and conformance <> [A : B]);
    OUTLINED_FUNCTION_27_4();
    OUTLINED_FUNCTION_1_11(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    v16 = v49;
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_26_7();
    v29[0] = v7;
    v29[1] = v9;
    v29[2] = v10;
    v29[3] = v25;
    v29[4] = v28;
    v29[5] = v24;
    v29[6] = v27;
    v29[7] = v23;
    LOBYTE(v29[8]) = v15 & 1;
    v29[9] = v17;
    v29[10] = v22;
    v29[11] = v21;
    v29[12] = v20;
    v29[13] = v19;
    LOBYTE(v29[14]) = v18;
    v29[15] = v16;
    outlined retain of AdapterMetadata((uint64_t)v29);
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_63_0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_63_4();
    v30 = v7;
    v31 = v9;
    v32 = v10;
    v33 = v25;
    v34 = v28;
    v35 = v24;
    v36 = v27;
    v37 = v23;
    v38 = v52;
    *(_DWORD *)v39 = *(_DWORD *)v51;
    *(_DWORD *)&v39[3] = *(_DWORD *)&v51[3];
    v40 = v17;
    v41 = v22;
    v42 = v21;
    v43 = v20;
    v44 = v19;
    v45 = v18;
    *(_DWORD *)v46 = *(_DWORD *)v50;
    *(_DWORD *)&v46[3] = *(_DWORD *)&v50[3];
    v47 = v16;
    outlined release of AdapterMetadata((uint64_t)&v30);
    memcpy(v26, v29, 0x80uLL);
  }
  OUTLINED_FUNCTION_72_3();
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance E5Function.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  OUTLINED_FUNCTION_50_7();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AdapterMetadata.CodingKeys()
{
  unsigned __int8 *v0;

  return AdapterMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AdapterMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AdapterMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AdapterMetadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AdapterMetadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AdapterMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AdapterMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance AdapterMetadata(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE v3[128];

  AdapterMetadata.init(from:)();
  if (!v1)
    memcpy(a1, v3, 0x80uLL);
}

BOOL static TokenizerMetadata.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TokenizerMetadata.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t TokenizerMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000021 && a2 == 0x8000000248D80350
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x8000000248D80380)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TokenizerMetadata.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int TokenizerMetadata.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

unint64_t TokenizerMetadata.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000022;
  else
    return 0xD000000000000021;
}

void TokenizerMetadata.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_4();
  OUTLINED_FUNCTION_52_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenizerMetadata.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_42_6();
  OUTLINED_FUNCTION_24_6(v0, v0[3]);
  lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();
  OUTLINED_FUNCTION_55_5();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    OUTLINED_FUNCTION_404();
    OUTLINED_FUNCTION_63_0();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    OUTLINED_FUNCTION_7_13();
    OUTLINED_FUNCTION_7_13();
    OUTLINED_FUNCTION_61_4(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    OUTLINED_FUNCTION_404();
  }
  OUTLINED_FUNCTION_72_3();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TokenizerMetadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TokenizerMetadata.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TokenizerMetadata.CodingKeys()
{
  char *v0;

  return TokenizerMetadata.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TokenizerMetadata.CodingKeys(uint64_t a1)
{
  char *v1;

  TokenizerMetadata.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TokenizerMetadata.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenizerMetadata.CodingKeys()
{
  char *v0;

  return TokenizerMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenizerMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenizerMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TokenizerMetadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = TokenizerMetadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenizerMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenizerMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance TokenizerMetadata(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  TokenizerMetadata.init(from:)();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

uint64_t OnDeviceInferenceProviderDataSource.createInferenceContextFactory(assetRepository:inferenceOverrides:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, (uint64_t)v27);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a2, (uint64_t)v26);
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a3, (uint64_t)v25);
  OUTLINED_FUNCTION_59_4((uint64_t)v27);
  OUTLINED_FUNCTION_19_9();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_59();
  v11 = (uint64_t *)(v10 - v9);
  OUTLINED_FUNCTION_99(v10 - v9, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  OUTLINED_FUNCTION_59_4((uint64_t)v26);
  OUTLINED_FUNCTION_19_9();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_59();
  v17 = v16 - v15;
  OUTLINED_FUNCTION_99(v16 - v15, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  OUTLINED_FUNCTION_59_4((uint64_t)v25);
  OUTLINED_FUNCTION_19_9();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_28_3();
  OUTLINED_FUNCTION_99((uint64_t)v4, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
  v23 = specialized OnDeviceInferenceContextFactory.__allocating_init(assetRepository:inferenceOverrides:dataSource:)(*v11, v17, *v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  result = type metadata accessor for OnDeviceInferenceContextFactory();
  a4[3] = result;
  a4[4] = &protocol witness table for OnDeviceInferenceContextFactory;
  *a4 = v23;
  return result;
}

uint64_t OnDeviceInferenceProviderDataSource.createTokenizer(tokenizerPath:metadata:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_26_7();
  }
  type metadata accessor for TokenizerRunner();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_21_1();
  return TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
}

void OnDeviceInferenceProviderDataSource.modelMetadataAtURL(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;

  v3 = OUTLINED_FUNCTION_65_4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_42_6();
  OnDeviceInferenceProviderDataSource.jsonContentWithURL(_:)();
  if (v5 >> 60 == 15)
  {
    *(double *)&v9 = OUTLINED_FUNCTION_15_8();
  }
  else
  {
    OUTLINED_FUNCTION_66_5();
    OUTLINED_FUNCTION_229_0();
    OUTLINED_FUNCTION_49_6();
    OUTLINED_FUNCTION_99(v1, *MEMORY[0x24BDCB1A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
    dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
    lazy protocol witness table accessor for type ModelMetadata and conformance ModelMetadata();
    OUTLINED_FUNCTION_31_6();
    if (v3)
    {
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_71_5();
      *(double *)&v9 = OUTLINED_FUNCTION_15_8();
      v14 = 0uLL;
    }
    else
    {
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_71_5();
      v6 = v15;
      v7 = v16;
      v14 = v17;
      v9 = v18;
      v10 = v19;
      v11 = v20;
      v8 = v21;
      v12 = v22;
      v13 = v23;
    }
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = v14;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 104) = v13;
}

void OnDeviceInferenceProviderDataSource.jsonContentWithURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  static String.Encoding.utf8.getter();
  String.init(contentsOf:encoding:)();
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  OUTLINED_FUNCTION_5_0();
}

uint64_t OnDeviceInferenceProviderDataSource.adapterMetadataAtURL(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD v11[8];
  _OWORD v12[8];
  _BYTE v13[128];

  v3 = OUTLINED_FUNCTION_65_4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_26_3();
  OnDeviceInferenceProviderDataSource.jsonContentWithURL(_:)();
  if (v6 >> 60 == 15)
  {
    _s24TokenGenerationInference15AdapterMetadataVSgWOi0_(v12);
    v7 = v12;
  }
  else
  {
    v8 = v5;
    v9 = v6;
    OUTLINED_FUNCTION_66_5();
    OUTLINED_FUNCTION_229_0();
    OUTLINED_FUNCTION_49_6();
    OUTLINED_FUNCTION_99(v1, *MEMORY[0x24BDCB1A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
    dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
    lazy protocol witness table accessor for type AdapterMetadata and conformance AdapterMetadata();
    OUTLINED_FUNCTION_31_6();
    if (v3)
    {
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_116();
      outlined consume of Data?(v8, v9);
      _s24TokenGenerationInference15AdapterMetadataVSgWOi0_(v11);
    }
    else
    {
      OUTLINED_FUNCTION_116();
      outlined consume of Data?(v8, v9);
      memcpy(v11, v12, sizeof(v11));
      destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution(v11);
    }
    v7 = v11;
  }
  outlined init with take of AdapterMetadata?((uint64_t)v7, (uint64_t)v13);
  return outlined init with take of AdapterMetadata?((uint64_t)v13, a1);
}

void OnDeviceInferenceProviderDataSource.tokenizerMetadataAtURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_65_4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_28_3();
  OnDeviceInferenceProviderDataSource.jsonContentWithURL(_:)();
  if (v3 >> 60 != 15)
  {
    OUTLINED_FUNCTION_66_5();
    OUTLINED_FUNCTION_229_0();
    OUTLINED_FUNCTION_49_6();
    OUTLINED_FUNCTION_99(v0, *MEMORY[0x24BDCB1A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    dispatch thunk of JSONDecoder.keyDecodingStrategy.setter();
    lazy protocol witness table accessor for type TokenizerMetadata and conformance TokenizerMetadata();
    OUTLINED_FUNCTION_31_6();
    if (v1)
    {
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_70_5();
    }
    else
    {
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_70_5();
    }
  }
  OUTLINED_FUNCTION_5_0();
}

Swift::Bool __swiftcall OnDeviceInferenceProviderDataSource.fileExists(atPath:)(Swift::String atPath)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;

  object = atPath._object;
  countAndFlagsBits = atPath._countAndFlagsBits;
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v4 = (void *)MEMORY[0x2495A9A78](countAndFlagsBits, object);
  LOBYTE(countAndFlagsBits) = objc_msgSend(v3, sel_fileExistsAtPath_, v4);

  return countAndFlagsBits;
}

void OnDeviceInferenceProviderDataSource.catalogResource(for:)()
{
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_48_5();
  OUTLINED_FUNCTION_33_6();
  dispatch thunk of CatalogClient.resource(for:)();
  OUTLINED_FUNCTION_67_4();
  OUTLINED_FUNCTION_35_6();
}

void OnDeviceInferenceProviderDataSource.url(for:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t AssociatedConformanceWitness;
  _QWORD v36[4];
  _BYTE v37[48];
  uint64_t v38;

  OnDeviceInferenceProviderDataSource.catalogResource(for:)();
  if (!v1)
  {
    outlined init with copy of CatalogResource?((uint64_t)v37, (uint64_t)&v28);
    if (v31)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedResource);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v34 + 1))
        {
          outlined init with take of LogitCollection(&v33, (uint64_t)v36);
          OUTLINED_FUNCTION_24_6(v36, v36[3]);
          *((_QWORD *)&v34 + 1) = OUTLINED_FUNCTION_25_6();
          OUTLINED_FUNCTION_310();
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
          dispatch thunk of AssetBackedResource.fetchAsset()();
          OUTLINED_FUNCTION_24_6(&v33, *((uint64_t *)&v34 + 1));
          v31 = OUTLINED_FUNCTION_25_6();
          OUTLINED_FUNCTION_310();
          v32 = swift_getAssociatedConformanceWitness();
          __swift_allocate_boxed_opaque_existential_1(&v28);
          dispatch thunk of CatalogAssetProtocol.contents.getter();
          v18 = dispatch thunk of AssetContents.baseURL.getter();
          OUTLINED_FUNCTION_53_6(v18, &demangling cache variable for type metadata for CatalogResource?, v19, v20, v21, v22, v23, v24, v27, v28, v29, v30, v31, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1));
          v25 = type metadata accessor for URL();
          v26 = __swift_storeEnumTagSinglePayload(a1, 0, 1, v25);
          OUTLINED_FUNCTION_30_7(v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
          return;
        }
      }
      else
      {
        AssociatedConformanceWitness = 0;
        v33 = 0u;
        v34 = 0u;
      }
    }
    else
    {
      outlined destroy of LogitPresampler?((uint64_t)&v28, &demangling cache variable for type metadata for CatalogResource?);
      v33 = 0u;
      v34 = 0u;
      AssociatedConformanceWitness = 0;
    }
    outlined destroy of LogitPresampler?((uint64_t)&v33, &demangling cache variable for type metadata for AssetBackedResource?);
    if (one-time initialization token for device != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.device);
    swift_bridgeObjectRetain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v38 = a1;
      v6 = (uint8_t *)swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)v6 = 136315138;
      swift_bridgeObjectRetain();
      v7 = OUTLINED_FUNCTION_310();
      *(_QWORD *)&v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_248CAA000, v4, v5, "Catalog resource with identifier %s is not asset backed resource", v6, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_1();
    }
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_53_6(v10, &demangling cache variable for type metadata for CatalogResource?, v11, v12, v13, v14, v15, v16, v27, v28, v29, v30, v31, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1));
    v17 = type metadata accessor for URL();
    __swift_storeEnumTagSinglePayload(a1, 1, 1, v17);
  }
}

void OnDeviceInferenceProviderDataSource.resourceBundle(for:)()
{
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_48_5();
  OUTLINED_FUNCTION_33_6();
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  OUTLINED_FUNCTION_67_4();
  OUTLINED_FUNCTION_35_6();
}

NSNumber __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OnDeviceInferenceProviderDataSource.requestCompileResource(identifier:userInitiated:)(Swift::String identifier, Swift::Bool userInitiated)
{
  Swift::String v3;
  Class isa;

  type metadata accessor for CatalogClient();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_48_5();
  v3._countAndFlagsBits = OUTLINED_FUNCTION_310();
  isa = CatalogClientProtocol.requestCompileResource(identifier:userInitiated:)(v3, userInitiated).super.super.isa;
  swift_release();
  return (NSNumber)isa;
}

uint64_t OnDeviceInferenceProviderDataSource.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OnDeviceInferenceProviderDataSource()
{
  return objc_opt_self();
}

uint64_t destroy for MetadataSpecialToken(uint64_t a1)
{
  return outlined consume of MetadataSpecialToken(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MetadataSpecialToken(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of MetadataSpecialToken(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of MetadataSpecialToken(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MetadataSpecialToken(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of MetadataSpecialToken(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataSpecialToken(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetadataSpecialToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MetadataSpecialToken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for MetadataSpecialToken(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

void type metadata accessor for MetadataSpecialToken()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t outlined init with copy of CatalogResource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x2495AAF60);
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenizerMetadata and conformance TokenizerMetadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenizerMetadata, &type metadata for TokenizerMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata and conformance TokenizerMetadata);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

double _s24TokenGenerationInference15AdapterMetadataVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of AdapterMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AdapterMetadata?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AdapterMetadata and conformance AdapterMetadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata;
  if (!lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for AdapterMetadata, &type metadata for AdapterMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata and conformance AdapterMetadata);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelMetadata and conformance ModelMetadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata;
  if (!lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ModelMetadata, &type metadata for ModelMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata and conformance ModelMetadata);
  }
  return result;
}

_QWORD *specialized OnDeviceInferenceContextFactory.__allocating_init(assetRepository:inferenceOverrides:dataSource:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  uint64_t v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v6 = *a3;
  v7 = type metadata accessor for OnDeviceInferenceAssetRepository();
  v34[3] = v7;
  v34[4] = &protocol witness table for OnDeviceInferenceAssetRepository;
  v34[0] = a1;
  v8 = type metadata accessor for OnDeviceInferenceOverrides();
  v32 = v8;
  v33 = &protocol witness table for OnDeviceInferenceOverrides;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  outlined init with take of OnDeviceInferenceOverrides(a2, (uint64_t)boxed_opaque_existential_1);
  v29 = v6;
  v30 = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v28[0] = a3;
  type metadata accessor for OnDeviceInferenceContextFactory();
  v10 = (_QWORD *)swift_allocObject();
  v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v7);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v29);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (_QWORD *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v13;
  v24 = *v21;
  v10[5] = v7;
  v10[6] = &protocol witness table for OnDeviceInferenceAssetRepository;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &protocol witness table for OnDeviceInferenceOverrides;
  v25 = __swift_allocate_boxed_opaque_existential_1(v10 + 7);
  outlined init with take of OnDeviceInferenceOverrides((uint64_t)v17, (uint64_t)v25);
  v10[15] = v6;
  v10[16] = &protocol witness table for OnDeviceInferenceProviderDataSource;
  v10[12] = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v10;
}

uint64_t outlined init with take of OnDeviceInferenceOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OnDeviceInferenceOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for TokenizerMetadata()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for TokenizerMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_49();
}

_QWORD *assignWithCopy for TokenizerMetadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TokenizerMetadata(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenizerMetadata(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenizerMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for TokenizerMetadata()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t initializeWithCopy for E5Function(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for E5Function(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for E5Function(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for E5Function(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for E5Function(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for E5Function()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t destroy for ModelMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy120_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for ModelMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ModelMetadata()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t destroy for AdapterMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy128_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t assignWithTake for AdapterMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdapterMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AdapterMetadata()
{
  OUTLINED_FUNCTION_1_6();
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 9);
      if (v3 >= 2)
        v2 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
      else
        v2 = -2;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 2;
  }
  return result;
}

void type metadata accessor for DefaultParameters()
{
  OUTLINED_FUNCTION_1_6();
}

unint64_t lazy protocol witness table accessor for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenizerMetadata.CodingKeys, &unk_2519E0148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenizerMetadata.CodingKeys, &unk_2519E0148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenizerMetadata.CodingKeys, &unk_2519E0148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenizerMetadata.CodingKeys, &unk_2519E0148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenizerMetadata.CodingKeys and conformance TokenizerMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for AdapterMetadata.CodingKeys, &unk_2519E00B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for AdapterMetadata.CodingKeys, &unk_2519E00B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for AdapterMetadata.CodingKeys, &unk_2519E00B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for AdapterMetadata.CodingKeys, &unk_2519E00B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdapterMetadata.CodingKeys and conformance AdapterMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MetadataSpecialToken and conformance MetadataSpecialToken()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken;
  if (!lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for MetadataSpecialToken, &type metadata for MetadataSpecialToken);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetadataSpecialToken and conformance MetadataSpecialToken);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultParameters and conformance DefaultParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters;
  if (!lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DefaultParameters, &type metadata for DefaultParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters and conformance DefaultParameters);
  }
  return result;
}

uint64_t outlined retain of AdapterMetadata(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AdapterMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ModelMetadata.CodingKeys, &unk_2519E0028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ModelMetadata.CodingKeys, &unk_2519E0028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ModelMetadata.CodingKeys, &unk_2519E0028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ModelMetadata.CodingKeys, &unk_2519E0028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelMetadata.CodingKeys and conformance ModelMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type E5Function and conformance E5Function()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5Function and conformance E5Function;
  if (!lazy protocol witness table cache variable for type E5Function and conformance E5Function)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for E5Function, &type metadata for E5Function);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function and conformance E5Function);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type E5Function.CodingKeys and conformance E5Function.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for E5Function.CodingKeys, &unk_2519DFF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for E5Function.CodingKeys, &unk_2519DFF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for E5Function.CodingKeys, &unk_2519DFF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys;
  if (!lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for E5Function.CodingKeys, &unk_2519DFF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5Function.CodingKeys and conformance E5Function.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DefaultParameters.CodingKeys, &unk_2519DFF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DefaultParameters.CodingKeys, &unk_2519DFF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DefaultParameters.CodingKeys, &unk_2519DFF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DefaultParameters.CodingKeys, &unk_2519DFF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultParameters.CodingKeys and conformance DefaultParameters.CodingKeys);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void *type metadata accessor for DefaultParameters.CodingKeys()
{
  return &unk_2519DFF08;
}

uint64_t getEnumTagSinglePayload for E5Function.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for E5Function.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_248D45B1C + 4 * byte_248D76C2B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_248D45B50 + 4 * byte_248D76C26[v4]))();
}

uint64_t sub_248D45B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D45B60);
  return result;
}

uint64_t sub_248D45B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D45B74);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_248D45B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for E5Function.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for E5Function.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for E5Function.CodingKeys()
{
  return &unk_2519DFF98;
}

uint64_t getEnumTagSinglePayload for ModelMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_248D45C80 + 4 * byte_248D76C35[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_248D45CB4 + 4 * byte_248D76C30[v4]))();
}

uint64_t sub_248D45CB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45CBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D45CC4);
  return result;
}

uint64_t sub_248D45CD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D45CD8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_248D45CDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45CE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ModelMetadata.CodingKeys()
{
  return &unk_2519E0028;
}

uint64_t getEnumTagSinglePayload for DefaultParameters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_248D45DD4 + 4 * byte_248D76C3F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_248D45E08 + 4 * byte_248D76C3A[v4]))();
}

uint64_t sub_248D45E08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45E10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D45E18);
  return result;
}

uint64_t sub_248D45E24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D45E2CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_248D45E30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45E38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AdapterMetadata.CodingKeys()
{
  return &unk_2519E00B8;
}

uint64_t getEnumTagSinglePayload for TokenizerMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenizerMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248D45F28 + 4 * byte_248D76C49[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248D45F5C + 4 * byte_248D76C44[v4]))();
}

uint64_t sub_248D45F5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45F64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D45F6CLL);
  return result;
}

uint64_t sub_248D45F78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D45F80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248D45F84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D45F8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for TokenizerMetadata.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for TokenizerMetadata.CodingKeys()
{
  return &unk_2519E0148;
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_1_11@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_13()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_8()
{
  return swift_bridgeObjectRetain();
}

double OUTLINED_FUNCTION_15_8()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_8()
{
  return type metadata accessor for CatalogClient();
}

_QWORD *OUTLINED_FUNCTION_24_6(_QWORD *a1, uint64_t a2)
{
  return __swift_project_boxed_opaque_existential_1(a1, a2);
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_28_6()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_30_7(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_31_6()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t OUTLINED_FUNCTION_33_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_38_5()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_40_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_45_6()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_46_6()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_47_7()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_48_5()
{
  return CatalogClient.init()();
}

uint64_t OUTLINED_FUNCTION_49_6()
{
  return JSONDecoder.init()();
}

void OUTLINED_FUNCTION_53_6(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_list va;

  va_start(va, a18);
  outlined destroy of LogitPresampler?((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_59_4(uint64_t a1)
{
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_62_6()
{
  uint64_t v0;

  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_63_4()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 72));
}

uint64_t OUTLINED_FUNCTION_64_6()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_65_4()
{
  return type metadata accessor for JSONDecoder.KeyDecodingStrategy();
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t OUTLINED_FUNCTION_67_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_68_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_69_5()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_70_5()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_71_5()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_24TokenGenerationInference03OneF34HealingPrefixMatchingLanguageModelC9NodeState33_290950C585633F03B8505F4D810570AFLLVs5NeverOTg507_sS2i24fg11Inference03i3A34jklmn2C9o14State33_290950qrstu36AFLLVIgyyo_Si6offset_Si7elementtAFs5W153OIegnrzr_TR04_s24ab11Inference03d3A34efghi59C9processor6promptACSgAA0fG13TextProcessor_p_SaySiGtKcfcAC9j14State33_290950lmnoP16AFLLVSi_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 32;
    do
    {
      v5 = v3 + 1;
      v6 = *(_QWORD *)(v4 + 8 * v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_248D75A50;
      *(_QWORD *)(inited + 32) = v6;
      *(_QWORD *)(inited + 40) = v5;
      v8 = Dictionary.init(dictionaryLiteral:)();
      v9 = *(_QWORD *)(v11 + 16);
      if (v9 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v8;
      v3 = v5;
    }
    while (v2 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *specialized SetAlgebra.init<A>(_:)(uint64_t a1)
{
  return specialized SetAlgebra.init<A>(_:)(a1, specialized _NativeDictionary.makeIterator());
}

_QWORD *specialized SetAlgebra.init<A>(_:)(uint64_t a1, _QWORD *(*a2)(_QWORD *__return_ptr, uint64_t))
{
  _QWORD *result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD v13[4];
  uint64_t v14;

  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  dispatch thunk of SetAlgebra.init()();
  result = a2(v13, a1);
  v5 = v13[1];
  v6 = v13[3];
  v7 = v14;
  v8 = (unint64_t)(v13[2] + 64) >> 6;
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v7 &= v7 - 1;
  while (1)
  {
    result = (_QWORD *)dispatch thunk of SetAlgebra.insert(_:)();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v9 >= v8)
      return (_QWORD *)swift_release();
    v10 = *(_QWORD *)(v5 + 8 * v9);
    v11 = v6 + 1;
    if (!v10)
    {
      v11 = v6 + 2;
      if (v6 + 2 >= v8)
        return (_QWORD *)swift_release();
      v10 = *(_QWORD *)(v5 + 8 * v11);
      if (!v10)
      {
        v11 = v6 + 3;
        if (v6 + 3 >= v8)
          return (_QWORD *)swift_release();
        v10 = *(_QWORD *)(v5 + 8 * v11);
        if (!v10)
        {
          v11 = v6 + 4;
          if (v6 + 4 >= v8)
            return (_QWORD *)swift_release();
          v10 = *(_QWORD *)(v5 + 8 * v11);
          if (!v10)
          {
            v11 = v6 + 5;
            if (v6 + 5 >= v8)
              return (_QWORD *)swift_release();
            v10 = *(_QWORD *)(v5 + 8 * v11);
            if (!v10)
            {
              v12 = v6 + 6;
              while (v12 < v8)
              {
                v10 = *(_QWORD *)(v5 + 8 * v12++);
                if (v10)
                {
                  v11 = v12 - 1;
                  goto LABEL_18;
                }
              }
              return (_QWORD *)swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v10 - 1) & v10;
    v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.leadingTokens.getter()
{
  return OUTLINED_FUNCTION_1_12();
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.allowedFirstTokens.getter()
{
  return OUTLINED_FUNCTION_1_12();
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.__allocating_init(processor:prompt:)(_QWORD *a1, void *a2)
{
  Swift::OpaquePointer v4;

  swift_allocObject();
  v4._rawValue = a2;
  return OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:)(a1, v4);
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:)(_QWORD *a1, Swift::OpaquePointer a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::tuple_prompt_OpaquePointer_allowedFirstTokens_OpaquePointer v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52[3];

  v3 = v2;
  v6 = type metadata accessor for SparseLogitCollection();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_nodeStates) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_startNode) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v9 = PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:)(a2);
  if (!v10)
  {
    v11 = OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_leadingTokens;
    *(_QWORD *)(v2 + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_leadingTokens) = v9.prompt._rawValue;
    v12 = OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_allowedFirstTokens;
    *(_QWORD *)(v2
              + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_allowedFirstTokens) = v9.allowedFirstTokens._rawValue;
    if (*((_QWORD *)v9.allowedFirstTokens._rawValue + 2))
    {
      OUTLINED_FUNCTION_63_0();
      outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v2 + 16);
      v13 = a1[3];
      v14 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v13);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14) & 0x8000000000000000) == 0)
      {
        IndexSet.init(integersIn:)();
        outlined init with take of SparseLogitCollection((uint64_t)v8, v2+ OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_unconstrainedLogitCollection);
        v15 = swift_bridgeObjectRetain();
        v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_24TokenGenerationInference03OneF34HealingPrefixMatchingLanguageModelC9NodeState33_290950C585633F03B8505F4D810570AFLLVs5NeverOTg507_sS2i24fg11Inference03i3A34jklmn2C9o14State33_290950qrstu36AFLLVIgyyo_Si6offset_Si7elementtAFs5W153OIegnrzr_TR04_s24ab11Inference03d3A34efghi59C9processor6promptACSgAA0fG13TextProcessor_p_SaySiGtKcfcAC9j14State33_290950lmnoP16AFLLVSi_SitXEfU_Tf3nnnpf_nTf1cn_n(v15);
        swift_bridgeObjectRelease();
        v17 = (os_log_t)(v2
                       + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_nodeStates);
        swift_beginAccess();
        v17->isa = (Class)v16;
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(v2
                        + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_allowedFirstTokens);
        v19 = *(_QWORD *)(v18 + 16);
        v20 = MEMORY[0x24BEE4AF8];
        if (v19)
        {
          v47 = v17;
          v48 = 0;
          v49 = v3;
          v50 = a1;
          v51 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_122();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
          v21 = 0;
          v20 = v51;
          v46 = v18;
          v22 = v18 + 32;
          v23 = *(_QWORD *)(v51 + 16);
          v24 = 16 * v23;
          do
          {
            v25 = *(_QWORD *)(v22 + 8 * v21);
            v51 = v20;
            v26 = *(_QWORD *)(v20 + 24);
            v27 = v23 + v21 + 1;
            if (v23 + v21 >= v26 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v23 + v21 + 1, 1);
              v20 = v51;
            }
            ++v21;
            *(_QWORD *)(v20 + 16) = v27;
            v28 = v20 + v24;
            *(_QWORD *)(v28 + 32) = v25;
            *(_QWORD *)(v28 + 40) = -1;
            v24 += 16;
          }
          while (v19 != v21);
          swift_bridgeObjectRelease();
          v3 = v49;
          a1 = v50;
          v17 = v47;
        }
        specialized Dictionary.init<A>(uniqueKeysWithValues:)(v20);
        v30 = v29;
        swift_beginAccess();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v31 = *((_QWORD *)v17->isa + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        v32.isa = v17->isa;
        *((_QWORD *)v32.isa + 2) = v31 + 1;
        *((_QWORD *)v32.isa + v31 + 4) = v30;
        swift_endAccess();
LABEL_16:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        return v3;
      }
      __break(1u);
    }
    else
    {
      v49 = v11;
      v50 = (_QWORD *)v12;
      if (one-time initialization token for healing == -1)
      {
LABEL_13:
        v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Log.healing);
        OUTLINED_FUNCTION_122();
        v34 = Logger.logObject.getter();
        v35 = static os_log_type_t.debug.getter();
        v36 = v35;
        if (os_log_type_enabled(v34, v35))
        {
          v47 = v34;
          LODWORD(v48) = v36;
          v37 = (uint8_t *)swift_slowAlloc();
          v46 = swift_slowAlloc();
          v52[0] = v46;
          v44 = v37;
          *(_DWORD *)v37 = 136315138;
          v45 = v37 + 4;
          v38 = OUTLINED_FUNCTION_122();
          v39 = MEMORY[0x2495A9BC8](v38, MEMORY[0x24BEE1768]);
          v41 = v40;
          OUTLINED_FUNCTION_63_0();
          v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_4_14();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_248CAA000, v47, (os_log_type_t)v48, "Found no tokens to heal in %s", v44, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }

        OUTLINED_FUNCTION_4_14();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_0_12();
        v3 = 0;
        goto LABEL_16;
      }
    }
    swift_once();
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_63_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_12();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t outlined init with take of SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SparseLogitCollection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.startNode.getter()
{
  return 0;
}

Swift::Int __swiftcall OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:prompt:)(Swift::Int forPreviousNode, TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v2;
  Swift::Int *v3;
  Swift::Int v4;

  v2 = *(_QWORD *)(*(_QWORD *)prompt.queryTokens._rawValue + 16);
  if (v2)
  {
    v3 = (Swift::Int *)(*(_QWORD *)prompt.queryTokens._rawValue + 32);
    do
    {
      v4 = *v3++;
      forPreviousNode = OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:token:isPrompt:)(forPreviousNode, v4, 0);
      --v2;
    }
    while (v2);
  }
  return forPreviousNode;
}

Swift::Int __swiftcall OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  char v9;
  Swift::Int v10;

  if (forPreviousNode == -1)
    return -1;
  v6 = v3 + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_nodeStates;
  result = swift_beginAccess();
  if (forPreviousNode < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v6 + 16) > (unint64_t)forPreviousNode)
  {
    v8 = specialized Dictionary.subscript.getter(token, *(_QWORD *)(*(_QWORD *)v6 + 8 * forPreviousNode + 32));
    if ((v9 & 1) == 0)
    {
      v10 = v8;
      swift_endAccess();
      return v10;
    }
    swift_endAccess();
    return -1;
  }
  __break(1u);
  return result;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 == -1)
    goto LABEL_6;
  v2 = *(_QWORD *)(v0 + 56)
     + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_nodeStates;
  result = swift_beginAccess();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 48);
    if (*(_QWORD *)(*(_QWORD *)v2 + 16) > v4)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8 * v4 + 32) + 16))
      {
        v5 = *(uint64_t **)(v0 + 40);
        v5[3] = type metadata accessor for SparseLogitCollection();
        v5[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
        __swift_allocate_boxed_opaque_existential_1(v5);
        v6 = swift_bridgeObjectRetain();
        specialized SetAlgebra.init<A>(_:)(v6, specialized _NativeDictionary.makeIterator());
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
LABEL_6:
      v7 = *(uint64_t **)(v0 + 40);
      v8 = *(_QWORD *)(v0 + 56)
         + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_unconstrainedLogitCollection;
      v7[3] = type metadata accessor for SparseLogitCollection();
      v7[4] = (uint64_t)&protocol witness table for SparseLogitCollection;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
      outlined init with copy of SparseLogitCollection(v8, (uint64_t)boxed_opaque_existential_1);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  __break(1u);
  return result;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of SparseLogitCollection(v0+ OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_unconstrainedLogitCollection);
  OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_98();
  return v0;
}

uint64_t OneTokenHealingPrefixMatchingLanguageModel.__deallocating_deinit()
{
  OneTokenHealingPrefixMatchingLanguageModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel;
  return OneTokenHealingPrefixMatchingLanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2);
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel(Swift::Int a1, Swift::Int a2)
{
  return OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, 0);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:prompt:) in conformance OneTokenHealingPrefixMatchingLanguageModel(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  return OneTokenHealingPrefixMatchingLanguageModel.node(forPreviousNode:prompt:)(a1, *(TokenGenerationInference::SamplingDecoderPrompt *)&a2);
}

uint64_t outlined init with copy of SparseLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SparseLogitCollection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SparseLogitCollection(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SparseLogitCollection();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ObjC metadata update function for OneTokenHealingPrefixMatchingLanguageModel()
{
  return type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel();
}

uint64_t type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OneTokenHealingPrefixMatchingLanguageModel;
  if (!type metadata singleton initialization cache for OneTokenHealingPrefixMatchingLanguageModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for OneTokenHealingPrefixMatchingLanguageModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for OneTokenHealingPrefixMatchingLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OneTokenHealingPrefixMatchingLanguageModel.__allocating_init(processor:prompt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel.NodeState()
{
  return &type metadata for OneTokenHealingPrefixMatchingLanguageModel.NodeState;
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_1_12()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return swift_bridgeObjectRelease_n();
}

double PrefixGuidedLanguageModel.init(allowedPrefixes:illegalPrefixes:stopTokenIDs:vocabSize:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;

  type metadata accessor for PrefixGuidedLanguageModel.Node();
  v10 = OUTLINED_FUNCTION_18_7();
  PrefixGuidedLanguageModel.Node.init(id:tokenID:previousNode:)(0, 0, 1);
  *(_QWORD *)&v13 = v10;
  *((_QWORD *)&v13 + 1) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v10 + 58) = *(_QWORD *)(a1 + 16) == 0;
  v11 = OUTLINED_FUNCTION_16_8();
  MEMORY[0x2495A9BB0](v11);
  if (*(_QWORD *)((*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(a1, 1);
  swift_bridgeObjectRelease();
  PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(a2, 0);
  swift_bridgeObjectRelease();
  result = *(double *)&v13;
  *(_OWORD *)a5 = v13;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t type metadata accessor for PrefixGuidedLanguageModel.Node()
{
  return objc_opt_self();
}

uint64_t PrefixGuidedLanguageModel.Node.init(id:tokenID:previousNode:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  swift_weakInit();
  *(_QWORD *)(v3 + 48) = Dictionary.init(dictionaryLiteral:)();
  *(_WORD *)(v3 + 56) = 256;
  *(_BYTE *)(v3 + 58) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  swift_weakAssign();
  OUTLINED_FUNCTION_30();
  return v3;
}

void PrefixGuidedLanguageModel.Node.add(id:tokenID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v6 = OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_15_9(v6, *(_QWORD *)(v3 + 48));
  v8 = v7;
  OUTLINED_FUNCTION_7_14();
  swift_release();
  if (v8)
  {
    v9 = OUTLINED_FUNCTION_2_12();
    OUTLINED_FUNCTION_15_9(v9, *(_QWORD *)(v3 + 48));
    a2 = v10;
    OUTLINED_FUNCTION_7_14();
    if (a2)
    {
LABEL_5:
      OUTLINED_FUNCTION_38();
      return;
    }
    __break(1u);
  }
  v11 = OUTLINED_FUNCTION_18_7();
  swift_retain();
  PrefixGuidedLanguageModel.Node.init(id:tokenID:previousNode:)(a1, a2, 0);
  OUTLINED_FUNCTION_4_0();
  specialized Dictionary._Variant.setValue(_:forKey:)(v11, a2);
  OUTLINED_FUNCTION_7_14();
  v12 = OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_15_9(v12, *(_QWORD *)(v3 + 48));
  v14 = v13;
  OUTLINED_FUNCTION_7_14();
  if (v14)
    goto LABEL_5;
  __break(1u);
}

uint64_t PrefixGuidedLanguageModel.Node.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t PrefixGuidedLanguageModel.insert(prefixes:isLegal:)(uint64_t result, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v26 = *(_QWORD *)(result + 16);
  if (v26)
  {
    v3 = v2;
    v4 = a2;
    v6 = *v3;
    v5 = v3 + 1;
    v24 = v6;
    v25 = result + 32;
    v7 = a2 & 1;
    swift_bridgeObjectRetain();
    v8 = 0;
    v28 = v4;
    do
    {
      v9 = *(_QWORD *)(v25 + 8 * v8);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v27 = v8;
        swift_bridgeObjectRetain();
        v11 = v24;
        swift_retain();
        for (i = 0; i != v10; ++i)
        {
          v13 = *(_QWORD *)(v9 + 8 * i + 32);
          v14 = *(_BYTE *)(v11 + 58);
          swift_beginAccess();
          v15 = *(_QWORD *)(v11 + 48);
          if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13), (v17 & 1) != 0))
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
            swift_endAccess();
            swift_retain();
            swift_release();
            *(_BYTE *)(v18 + 57) = (*(_BYTE *)(v18 + 57) | v28) & 1;
            *(_BYTE *)(v18 + 58) = (*(_BYTE *)(v18 + 58) | v14) & 1;
            v11 = v18;
          }
          else
          {
            swift_endAccess();
            if (*v5 >> 62)
            {
              swift_bridgeObjectRetain();
              v19 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v19 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            PrefixGuidedLanguageModel.Node.add(id:tokenID:)(v19, v13);
            v21 = v20;
            swift_release();
            *(_BYTE *)(v21 + 57) = v7;
            *(_BYTE *)(v21 + 58) = v14;
            v22 = swift_retain();
            MEMORY[0x2495A9BB0](v22);
            if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v11 = v21;
          }
        }
        swift_bridgeObjectRelease();
        v4 = v28;
        v8 = v27;
      }
      else
      {
        v11 = v24;
        swift_retain();
      }
      ++v8;
      *(_BYTE *)(v11 + 56) = 1;
      v23 = *(_BYTE *)(v11 + 57) & v4 & 1;
      *(_BYTE *)(v11 + 57) = v23;
      *(_BYTE *)(v11 + 58) = v23;
      swift_release();
    }
    while (v8 != v26);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PrefixGuidedLanguageModel.startNode.getter()
{
  return 0;
}

Swift::Int __swiftcall PrefixGuidedLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  unint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::Int result;

  if (!isPrompt)
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6 >> 62)
    {
      OUTLINED_FUNCTION_21_1();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v7 > forPreviousNode)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(forPreviousNode, (v6 & 0xC000000000000001) == 0, v6);
      if ((v6 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x2495A9EB0](forPreviousNode, v6);
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 8 * forPreviousNode + 32);
        swift_retain();
      }
      OUTLINED_FUNCTION_4_0();
      specialized Dictionary.subscript.getter(token, *(_QWORD *)(v8 + 48));
      if (v9)
      {
        OUTLINED_FUNCTION_7_14();
        OUTLINED_FUNCTION_116();
        swift_release();
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_7_14();
      OUTLINED_FUNCTION_116();
    }
    if (one-time initialization token for device != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.device);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v13 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_248CAA000, v11, v12, "Unable to find node for token %ld. This should not happen", v13, 0xCu);
      MEMORY[0x2495AAF60](v13, -1, -1);
    }

  }
LABEL_15:
  OUTLINED_FUNCTION_38();
  return result;
}

uint64_t PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = a2;
  v4 = OUTLINED_FUNCTION_3_2();
  *(_QWORD *)(v3 + 112) = v4;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 128) = swift_task_alloc();
  *(_QWORD *)(v3 + 136) = swift_task_alloc();
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(v3 + 160) = *(_QWORD *)(v2 + 24);
  return swift_task_switch();
}

uint64_t PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = v1 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(*(_QWORD *)(v0 + 104), (v1 & 0xC000000000000001) == 0, v1);
  if (v2)
    v3 = MEMORY[0x2495A9EB0](*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 144));
  else
    v3 = swift_retain();
  v4 = *(unsigned __int8 *)(v3 + 58);
  swift_release();
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 104);
  if (v2)
  {
    v7 = MEMORY[0x2495A9EB0](v6, v5);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 8 * v6 + 32);
    swift_retain();
  }
  OUTLINED_FUNCTION_4_0();
  v8 = *(_QWORD *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  specialized _NativeDictionary.filter(_:)(v8);
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v10 = v9;
  OUTLINED_FUNCTION_224_1();
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 104);
  if (v2)
  {
    v13 = MEMORY[0x2495A9EB0](v12, v11);
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 8 * v12 + 32);
    OUTLINED_FUNCTION_16_8();
  }
  OUTLINED_FUNCTION_4_0();
  v14 = *(_QWORD *)(v13 + 48);
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_224_1();
  specialized _NativeDictionary.filter(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = OUTLINED_FUNCTION_16_8();
  v16 = specialized _NativeDictionary.filter(_:)(v15);
  OUTLINED_FUNCTION_224_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_224_1();
    if (!*(_QWORD *)(v10 + 16))
    {
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_21_1();
      v10 = *(_QWORD *)(v0 + 152);
    }
    v35 = *(uint64_t **)(v0 + 96);
    v35[3] = type metadata accessor for PrefixGuidedLanguageModel.PrefixLogitCollection(0);
    v35[4] = (uint64_t)&protocol witness table for PrefixGuidedLanguageModel.PrefixLogitCollection;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
    dispatch thunk of SetAlgebra.init()();
    v37 = *(_QWORD *)(v10 + 16);
    if (v37)
    {
      v38 = (uint64_t *)(v10 + 32);
      do
      {
        v39 = *v38++;
        *(_QWORD *)(v0 + 72) = v39;
        dispatch thunk of SetAlgebra.insert(_:)();
        --v37;
      }
      while (v37);
    }
    v41 = *(_QWORD *)(v0 + 120);
    v40 = *(_QWORD *)(v0 + 128);
    v42 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 32))(boxed_opaque_existential_1, v40, v42);
    goto LABEL_22;
  }
  v17 = *(_QWORD *)(v16 + 16);
  OUTLINED_FUNCTION_116();
  result = OUTLINED_FUNCTION_30();
  v19 = *(_QWORD *)(v0 + 160);
  if (v17)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = *(uint64_t **)(v0 + 96);
      specialized Set.init<A>(_:)(0, *(_QWORD *)(v0 + 160));
      v22 = v21;
      specialized _copyCollectionToContiguousArray<A>(_:)();
      v24 = v23;
      OUTLINED_FUNCTION_224_1();
      specialized Set.init<A>(_:)(v24);
      specialized Set.subtracting(_:)(v25, v22);
      swift_bridgeObjectRelease();
      specialized _copyCollectionToContiguousArray<A>(_:)();
      v27 = v26;
      OUTLINED_FUNCTION_63_0();
      v20[3] = type metadata accessor for PrefixGuidedLanguageModel.PrefixLogitCollection(0);
      v20[4] = (uint64_t)&protocol witness table for PrefixGuidedLanguageModel.PrefixLogitCollection;
      v28 = __swift_allocate_boxed_opaque_existential_1(v20);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
      dispatch thunk of SetAlgebra.init()();
      v29 = *(_QWORD *)(v27 + 16);
      if (v29)
      {
        v30 = (uint64_t *)(v27 + 32);
        do
        {
          v31 = *v30++;
          *(_QWORD *)(v0 + 88) = v31;
          dispatch thunk of SetAlgebra.insert(_:)();
          --v29;
        }
        while (v29);
      }
      v32 = *(_QWORD *)(v0 + 136);
      v33 = *(_QWORD *)(v0 + 112);
      v34 = *(_QWORD *)(v0 + 120);
      OUTLINED_FUNCTION_30();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v34 + 32))(v28, v32, v33);
      goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    v43 = *(uint64_t **)(v0 + 96);
    OUTLINED_FUNCTION_224_1();
    v43[3] = type metadata accessor for PrefixGuidedLanguageModel.UnconstrainedLogitCollection(0);
    v43[4] = (uint64_t)&protocol witness table for PrefixGuidedLanguageModel.UnconstrainedLogitCollection;
    result = (uint64_t)__swift_allocate_boxed_opaque_existential_1(v43);
    if ((v19 & 0x8000000000000000) == 0)
    {
      IndexSet.init(integersIn:)();
LABEL_22:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return specialized _NativeSet.subtracting<A>(_:)(a1, a2);
  specialized Set._subtract<A>(_:)(a1);
  return a2;
}

float PrefixGuidedLanguageModel.PrefixLogitCollection.subscript.getter(Swift::Int a1)
{
  Swift::Bool v1;
  float result;

  v1 = IndexSet.contains(_:)(a1);
  result = -65504.0;
  if (v1)
    return 1.0;
  return result;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance PrefixGuidedLanguageModel.PrefixLogitCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_10_12();
  return OUTLINED_FUNCTION_21_4(a1, v1, v4, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance PrefixGuidedLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel;
  return PrefixGuidedLanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  OUTLINED_FUNCTION_17_7(v14);
  return v12;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = v3;
    v27 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v28 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        OUTLINED_FUNCTION_63_0();
        v19 = 1;
        a2 = v27;
        return __swift_storeEnumTagSinglePayload(a2, v19, 1, v6);
      }
    }
    OUTLINED_FUNCTION_63_0();
    v20 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v20;
    v30 = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v22 = v30;
    }
    v23 = *(_QWORD *)(v22 + 48) + v16 * v14;
    a2 = v27;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 32))(v27, v23, v6);
    specialized _NativeSet._delete(at:)(v14);
    OUTLINED_FUNCTION_17_7(v30);
    v19 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_63_0();
    v19 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v19, 1, v6);
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            v15 = (_QWORD *)(v10 + 8 * v2);
            v16 = v2 != v6 || v15 >= v11 + 1;
            v2 = v6;
            if (v16)
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = OUTLINED_FUNCTION_30();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v29 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = _HashTable.previousHole(before:)();
    v31 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v32 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
      while (1)
      {
        v15 = v14 * v10;
        v30(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v3);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_24;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_24;
        }
        v20 = *(_QWORD *)(v7 + 48);
        v21 = v14 * a1;
        v22 = v20 + v14 * a1;
        v23 = v20 + v15 + v14;
        if (v14 * a1 < v15 || v22 >= v23)
          break;
        a1 = v10;
        if (v21 != v15)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_23;
        }
LABEL_24:
        v10 = (v10 + 1) & v11;
        if (((*(_QWORD *)(v31 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_25;
      }
      swift_arrayInitWithTakeFrontToBack();
LABEL_23:
      a1 = v10;
      goto LABEL_24;
    }
LABEL_25:
    *(_QWORD *)(v31 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v29;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v1;
  v26 = *(_QWORD *)(*v1 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_35:
    OUTLINED_FUNCTION_30();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_35;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_35;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_35;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      while (++v21 != v24 || (v23 & 1) == 0)
      {
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
        if (v26 != -1)
        {
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_35;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_35;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  BOOL v17;
  unint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v1 = isStackAllocationSafe;
  v33[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v3 = (unint64_t)((1 << v2) + 63) >> 6;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v19 = (unint64_t *)swift_slowAlloc();
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v19);
      v20 = 0;
      v21 = 0;
      v22 = v1 + 64;
      v23 = 1 << *(_BYTE *)(v1 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v1 + 64);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v29 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_54;
          if (v29 >= v26)
            goto LABEL_51;
          v30 = *(_QWORD *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            v21 = v29 + 1;
            if (v29 + 1 >= v26)
              goto LABEL_51;
            v30 = *(_QWORD *)(v22 + 8 * v21);
            if (!v30)
            {
              v21 = v29 + 2;
              if (v29 + 2 >= v26)
                goto LABEL_51;
              v30 = *(_QWORD *)(v22 + 8 * v21);
              if (!v30)
              {
                v31 = v29 + 3;
                if (v31 >= v26)
                  goto LABEL_51;
                v30 = *(_QWORD *)(v22 + 8 * v31);
                if (!v30)
                {
                  while (1)
                  {
                    v21 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      goto LABEL_56;
                    if (v21 >= v26)
                      break;
                    v30 = *(_QWORD *)(v22 + 8 * v21);
                    ++v31;
                    if (v30)
                      goto LABEL_46;
                  }
LABEL_51:
                  v32 = specialized _NativeDictionary.extractDictionary(using:count:)(v19, v3, v20, v1);
                  MEMORY[0x2495AAF60](v19, -1, -1);
                  return v32;
                }
                v21 = v31;
              }
            }
          }
LABEL_46:
          v25 = (v30 - 1) & v30;
          v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v28) + 57) == 1)
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v17 = __OFADD__(v20++, 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  v4 = (_QWORD *)((char *)v33 - ((8 * v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v4);
  v5 = 0;
  v6 = 0;
  v7 = v1 + 64;
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
    }
    else
    {
      v14 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v14 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
      v15 = *(_QWORD *)(v7 + 8 * v14);
      ++v6;
      if (!v15)
      {
        v6 = v14 + 1;
        if (v14 + 1 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 2;
          if (v14 + 2 >= v11)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v11)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
            v15 = *(_QWORD *)(v7 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v6 = v16 + 1;
                if (__OFADD__(v16, 1))
                  break;
                if (v6 >= v11)
                  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
                v15 = *(_QWORD *)(v7 + 8 * v6);
                ++v16;
                if (v15)
                  goto LABEL_21;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            v6 = v16;
          }
        }
      }
LABEL_21:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v6 << 6);
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v13) + 57) == 1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v17 = __OFADD__(v5++, 1);
      if (v17)
        break;
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
}

{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  BOOL v17;
  unint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v1 = isStackAllocationSafe;
  v33[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v3 = (unint64_t)((1 << v2) + 63) >> 6;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v19 = (unint64_t *)swift_slowAlloc();
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v19);
      v20 = 0;
      v21 = 0;
      v22 = v1 + 64;
      v23 = 1 << *(_BYTE *)(v1 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v1 + 64);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v29 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_54;
          if (v29 >= v26)
            goto LABEL_51;
          v30 = *(_QWORD *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            v21 = v29 + 1;
            if (v29 + 1 >= v26)
              goto LABEL_51;
            v30 = *(_QWORD *)(v22 + 8 * v21);
            if (!v30)
            {
              v21 = v29 + 2;
              if (v29 + 2 >= v26)
                goto LABEL_51;
              v30 = *(_QWORD *)(v22 + 8 * v21);
              if (!v30)
              {
                v31 = v29 + 3;
                if (v31 >= v26)
                  goto LABEL_51;
                v30 = *(_QWORD *)(v22 + 8 * v31);
                if (!v30)
                {
                  while (1)
                  {
                    v21 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      goto LABEL_56;
                    if (v21 >= v26)
                      break;
                    v30 = *(_QWORD *)(v22 + 8 * v21);
                    ++v31;
                    if (v30)
                      goto LABEL_46;
                  }
LABEL_51:
                  v32 = specialized _NativeDictionary.extractDictionary(using:count:)(v19, v3, v20, v1);
                  MEMORY[0x2495AAF60](v19, -1, -1);
                  return v32;
                }
                v21 = v31;
              }
            }
          }
LABEL_46:
          v25 = (v30 - 1) & v30;
          v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v28) + 57) & 1) == 0)
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v17 = __OFADD__(v20++, 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  v4 = (_QWORD *)((char *)v33 - ((8 * v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v4);
  v5 = 0;
  v6 = 0;
  v7 = v1 + 64;
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
    }
    else
    {
      v14 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v14 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
      v15 = *(_QWORD *)(v7 + 8 * v14);
      ++v6;
      if (!v15)
      {
        v6 = v14 + 1;
        if (v14 + 1 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 2;
          if (v14 + 2 >= v11)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v11)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
            v15 = *(_QWORD *)(v7 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v6 = v16 + 1;
                if (__OFADD__(v16, 1))
                  break;
                if (v6 >= v11)
                  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
                v15 = *(_QWORD *)(v7 + 8 * v6);
                ++v16;
                if (v15)
                  goto LABEL_21;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            v6 = v16;
          }
        }
      }
LABEL_21:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v6 << 6);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v13) + 57) & 1) == 0)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v17 = __OFADD__(v5++, 1);
      if (v17)
        break;
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
}

{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  BOOL v17;
  unint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v1 = isStackAllocationSafe;
  v33[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v3 = (unint64_t)((1 << v2) + 63) >> 6;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v19 = (unint64_t *)swift_slowAlloc();
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v19);
      v20 = 0;
      v21 = 0;
      v22 = v1 + 64;
      v23 = 1 << *(_BYTE *)(v1 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v1 + 64);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v29 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_54;
          if (v29 >= v26)
            goto LABEL_51;
          v30 = *(_QWORD *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            v21 = v29 + 1;
            if (v29 + 1 >= v26)
              goto LABEL_51;
            v30 = *(_QWORD *)(v22 + 8 * v21);
            if (!v30)
            {
              v21 = v29 + 2;
              if (v29 + 2 >= v26)
                goto LABEL_51;
              v30 = *(_QWORD *)(v22 + 8 * v21);
              if (!v30)
              {
                v31 = v29 + 3;
                if (v31 >= v26)
                  goto LABEL_51;
                v30 = *(_QWORD *)(v22 + 8 * v31);
                if (!v30)
                {
                  while (1)
                  {
                    v21 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      goto LABEL_56;
                    if (v21 >= v26)
                      break;
                    v30 = *(_QWORD *)(v22 + 8 * v21);
                    ++v31;
                    if (v30)
                      goto LABEL_46;
                  }
LABEL_51:
                  v32 = specialized _NativeDictionary.extractDictionary(using:count:)(v19, v3, v20, v1);
                  MEMORY[0x2495AAF60](v19, -1, -1);
                  return v32;
                }
                v21 = v31;
              }
            }
          }
LABEL_46:
          v25 = (v30 - 1) & v30;
          v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v28) + 56) == 1)
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v17 = __OFADD__(v20++, 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  MEMORY[0x24BDAC7A8](isStackAllocationSafe);
  v4 = (_QWORD *)((char *)v33 - ((8 * v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  specialized UnsafeMutablePointer.assign(repeating:count:)(0, v3, v4);
  v5 = 0;
  v6 = 0;
  v7 = v1 + 64;
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
    }
    else
    {
      v14 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v14 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
      v15 = *(_QWORD *)(v7 + 8 * v14);
      ++v6;
      if (!v15)
      {
        v6 = v14 + 1;
        if (v14 + 1 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 2;
          if (v14 + 2 >= v11)
            return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v11)
              return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
            v15 = *(_QWORD *)(v7 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v6 = v16 + 1;
                if (__OFADD__(v16, 1))
                  break;
                if (v6 >= v11)
                  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
                v15 = *(_QWORD *)(v7 + 8 * v6);
                ++v16;
                if (v15)
                  goto LABEL_21;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            v6 = v16;
          }
        }
      }
LABEL_21:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v6 << 6);
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v13) + 56) == 1)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v17 = __OFADD__(v5++, 1);
      if (v17)
        break;
    }
  }
  __break(1u);
  return specialized _NativeDictionary.extractDictionary(using:count:)(v4, v3, v5, v1);
}

uint64_t type metadata accessor for PrefixGuidedLanguageModel.PrefixLogitCollection(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for PrefixGuidedLanguageModel.PrefixLogitCollection);
}

uint64_t type metadata accessor for PrefixGuidedLanguageModel.UnconstrainedLogitCollection(uint64_t a1)
{
  return type metadata accessor for DataStreamStateManager(a1, (uint64_t *)&type metadata singleton initialization cache for PrefixGuidedLanguageModel.UnconstrainedLogitCollection);
}

uint64_t destroy for PrefixGuidedLanguageModel()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PrefixGuidedLanguageModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PrefixGuidedLanguageModel(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PrefixGuidedLanguageModel(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixGuidedLanguageModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixGuidedLanguageModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixGuidedLanguageModel()
{
  return &type metadata for PrefixGuidedLanguageModel;
}

uint64_t getEnumTagSinglePayload for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D4963C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_0_13();
  return __swift_getEnumTagSinglePayload(v2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D49674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_0_13();
  return __swift_storeEnumTagSinglePayload(v2, a2, a2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for PrefixGuidedLanguageModel.UnconstrainedLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v4)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_10_12();
  return OUTLINED_FUNCTION_21_4(v2, a2, v5, *v4);
}

uint64_t destroy for PrefixGuidedLanguageModel.UnconstrainedLogitCollection(uint64_t a1)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_3_2();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void initializeWithCopy for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_10_12();
  OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16));
  OUTLINED_FUNCTION_49();
}

void assignWithCopy for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_10_12();
  OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
  OUTLINED_FUNCTION_49();
}

void initializeWithTake for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_10_12();
  OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32));
  OUTLINED_FUNCTION_49();
}

void assignWithTake for PrefixGuidedLanguageModel.UnconstrainedLogitCollection()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_10_12();
  OUTLINED_FUNCTION_23_3(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 40));
  OUTLINED_FUNCTION_49();
}

uint64_t getEnumTagSinglePayload for PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PrefixGuidedLanguageModel.PrefixLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    result = specialized Set._Variant.remove(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i));
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD v33[6];

  v2 = a2;
  v33[5] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v32[0] = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10)
            goto LABEL_33;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_33;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_33;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_33;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
                    return v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_33;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_36:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        v19 = static Hasher._hash(seed:_:)();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    v33[2] = v32[0];
    v33[3] = v4;
    v33[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x24BDAC7A8](isStackAllocationSafe);
      v27 = (char *)v32 - v26;
      memcpy((char *)v32 - v26, (const void *)(v2 + 56), v24);
      v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v27, v23, v2, v21, v33);
      swift_release();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      return v28;
    }
    else
    {
      v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      v30 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v29, v23, v2, v21, v33);
      swift_release();
      outlined consume of [Int : PrefixGuidedLanguageModel.Node].Iterator._Variant();
      MEMORY[0x2495AAF60](v29, -1, -1);
      return v30;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  unint64_t v30;
  int64_t v32;

  v8 = (unint64_t *)result;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v10 = v9 - 1;
  v11 = a3 + 56;
  while (1)
  {
    v12 = a5[3];
    v13 = a5[4];
    if (!v13)
      break;
    v14 = (v13 - 1) & v13;
    v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_14:
    v22 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v15);
    a5[3] = v12;
    a5[4] = v14;
    result = static Hasher._hash(seed:_:)();
    v23 = -1 << *(_BYTE *)(a3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    v26 = 1 << v24;
    if (((1 << v24) & *(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v27 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v27 + 8 * v24) == v22)
      {
LABEL_21:
        v30 = v8[v25];
        v8[v25] = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v10--, 1))
            goto LABEL_36;
          if (!v10)
            return MEMORY[0x24BEE4B08];
        }
      }
      else
      {
        for (i = v24 + 1; ; i = v29 + 1)
        {
          v29 = i & ~v23;
          if (((*(_QWORD *)(v11 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
            break;
          if (*(_QWORD *)(v27 + 8 * v29) == v22)
          {
            v25 = v29 >> 6;
            v26 = 1 << v29;
            goto LABEL_21;
          }
        }
      }
    }
  }
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    v17 = (unint64_t)(a5[2] + 64) >> 6;
    v18 = a5[3];
    if (v16 >= v17)
      goto LABEL_34;
    v19 = a5[1];
    v20 = *(_QWORD *)(v19 + 8 * v16);
    if (v20)
      goto LABEL_13;
    v21 = v12 + 2;
    v18 = v12 + 1;
    if (v12 + 2 >= v17)
      goto LABEL_34;
    v20 = *(_QWORD *)(v19 + 8 * v21);
    if (!v20)
    {
      v18 = v12 + 2;
      if (v12 + 3 >= v17)
        goto LABEL_34;
      v20 = *(_QWORD *)(v19 + 8 * (v12 + 3));
      if (v20)
      {
        v16 = v12 + 3;
        goto LABEL_13;
      }
      v21 = v12 + 4;
      v18 = v12 + 3;
      if (v12 + 4 >= v17)
        goto LABEL_34;
      v20 = *(_QWORD *)(v19 + 8 * v21);
      if (!v20)
      {
        v16 = v12 + 5;
        v18 = v12 + 4;
        if (v12 + 5 >= v17)
          goto LABEL_34;
        v20 = *(_QWORD *)(v19 + 8 * v16);
        if (!v20)
        {
          v32 = v12 + 6;
          while (v32 < v17)
          {
            v20 = *(_QWORD *)(v19 + 8 * v32++);
            if (v20)
            {
              v16 = v32 - 1;
              goto LABEL_13;
            }
          }
          v18 = v17 - 1;
LABEL_34:
          a5[3] = v18;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v8, a2, v10, a3);
        }
        goto LABEL_13;
      }
    }
    v16 = v21;
LABEL_13:
    v14 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v16 << 6);
    v12 = v16;
    goto LABEL_14;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PrefixGuidedLanguageModel.Node>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v29[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v29[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v29[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v29[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v29[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v20 = -1 << *(_BYTE *)(v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) == 0)
      break;
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v23) = v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v23) = v19;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    result = swift_retain();
    if (!v5)
      return v9;
  }
  v24 = 0;
  v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    v26 = v22 == v25;
    if (v22 == v25)
      v22 = 0;
    v24 |= v26;
    v27 = *(_QWORD *)(v12 + 8 * v22);
    if (v27 != -1)
    {
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_13()
{
  return type metadata accessor for IndexSet();
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return swift_endAccess();
}

void OUTLINED_FUNCTION_15_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized Dictionary.subscript.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_16_8()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_17_7@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_7()
{
  return swift_allocObject();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18ReversedCollectionVySaySiGG_SSs5NeverOTg5011_sSiSSIgyo_h4SSs5F11OIegnrzr_TRSiSSIgyo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = a1 + 24;
    do
    {
      v6 = a2(*(_QWORD *)(v5 + 8 * v2));
      v8 = v7;
      v9 = *(_QWORD *)(v11 + 16);
      if (v9 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v9 + 1;
      v10 = v11 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v8;
      --v2;
    }
    while (v2);
  }
}

Swift::tuple_prompt_OpaquePointer_allowedFirstTokens_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:)(Swift::OpaquePointer prompt)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v29;
  uint64_t v30;
  _QWORD *rawValue;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::tuple_prompt_OpaquePointer_allowedFirstTokens_OpaquePointer result;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t);
  _QWORD *v40;
  void *v41;
  uint64_t v42;

  v6 = v2;
  v7 = v1;
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_bridgeObjectRetain();
  v10 = String.count.getter();
  if (v10 >= v9(v7, v6) || (v11 = *((_QWORD *)prompt._rawValue + 2)) == 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
  v41 = v4;
  v42 = v5;
  v39 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 56);
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v13 = MEMORY[0x24BEE4AF8];
  v38 = v9;
  while (1)
  {
    v14 = *((_QWORD *)prompt._rawValue + v11 + 3);
    v40 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_3_12();
      v13 = v35;
    }
    v15 = *(_QWORD *)(v13 + 16);
    if (v15 >= *(_QWORD *)(v13 + 24) >> 1)
    {
      OUTLINED_FUNCTION_3_12();
      v13 = v36;
    }
    *(_QWORD *)(v13 + 16) = v15 + 1;
    *(_QWORD *)(v13 + 8 * v15 + 32) = v14;
    if ((v39(v7, v6) & 1) != 0)
    {
      v16 = OUTLINED_FUNCTION_85_1();
      specialized Sequence.reversed()(v16);
      v18 = OUTLINED_FUNCTION_4_15(v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
      if (v42)
        break;
      v20 = v18;
      v21 = v19;
      OUTLINED_FUNCTION_161();
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 80))(v20, v21, v7, v6);
    }
    else
    {
      v23 = implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:)((uint64_t)v41, v7, v6);
      v24 = OUTLINED_FUNCTION_85_1();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18ReversedCollectionVySaySiGG_SSs5NeverOTg5011_sSiSSIgyo_h4SSs5F11OIegnrzr_TRSiSSIgyo_Tf1cn_n(v24, (uint64_t (*)(_QWORD))v23);
      swift_release();
      OUTLINED_FUNCTION_119_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v25 = BidirectionalCollection<>.joined(separator:)();
      v27 = v26;
      OUTLINED_FUNCTION_161();
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 72))(v25, v27, v7, v6);
    }
    v3 = (_QWORD *)v22;
    swift_bridgeObjectRelease();
    if (!v3[2])
    {
      swift_bridgeObjectRelease();
      v3 = v40;
LABEL_25:
      OUTLINED_FUNCTION_119_0();
      goto LABEL_27;
    }
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    if (!*((_QWORD *)prompt._rawValue + 2))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      prompt._rawValue = (void *)isUniquelyReferenced_nonNull_native;
    }
    v30 = *((_QWORD *)prompt._rawValue + 2);
    if (!v30)
      goto LABEL_29;
    rawValue = prompt._rawValue;
    *((_QWORD *)prompt._rawValue + 2) = v30 - 1;
    v32 = OUTLINED_FUNCTION_85_1();
    specialized Sequence.reversed()(v32);
    prompt._rawValue = v41;
    OUTLINED_FUNCTION_4_15(v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    if (v42)
      break;
    OUTLINED_FUNCTION_161();
    v34 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v34 >= v38(v7, v6))
    {
      prompt._rawValue = rawValue;
      goto LABEL_25;
    }
    prompt._rawValue = rawValue;
    v11 = rawValue[2];
    v12 = v3;
    if (!v11)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_119_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_161();
LABEL_27:
  isUniquelyReferenced_nonNull_native = (uint64_t)prompt._rawValue;
  v29 = v3;
LABEL_30:
  result.allowedFirstTokens._rawValue = v29;
  result.prompt._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  return result;
}

uint64_t (*implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:);
}

void specialized Array._customRemoveLast()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v1 = v3;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    *(_QWORD *)(v1 + 16) = v2 - 1;
    *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.encode(text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.decode(tokenIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.text(forTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenID(forText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.vocabularyCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.longestTokenLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.isContinuationTokenizer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of PrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t sub_248D4A7D0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PrefixMatchingTextProcessor.rewindToHealingPoint(prompt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 24))();
}

void OUTLINED_FUNCTION_3_12()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_4_15@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  specialized _NativeDictionary.makeIterator()(v16, a1);
  v3 = v16[0];
  v4 = v16[1];
  v5 = v16[3];
  v6 = v16[4];
  v7 = (unint64_t)(v16[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      goto LABEL_22;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_22;
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_22;
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_22;
          v12 = *(_QWORD *)(v4 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_22;
            v12 = *(_QWORD *)(v4 + 8 * v13);
            if (!v12)
            {
              v14 = v5 + 6;
              while (v14 < v7)
              {
                v12 = *(_QWORD *)(v4 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_19;
                }
              }
LABEL_22:
              swift_release();
              return 0;
            }
          }
        }
      }
    }
LABEL_19:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
LABEL_20:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    result = a2(v15, *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10));
    if ((result & 1) != 0)
    {
      swift_release();
      return v15;
    }
  }
  __break(1u);
  return result;
}

void PromptLookupLanguageModel.__allocating_init()()
{
  OUTLINED_FUNCTION_2_0();
  PromptLookupLanguageModel.init()();
  OUTLINED_FUNCTION_49();
}

uint64_t PromptLookupLanguageModel.startNode.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_0();
  return *(_QWORD *)(v0 + 16);
}

uint64_t PromptLookupLanguageModel.startNode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PromptLookupLanguageModel.startNode.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

void PromptLookupLanguageModel.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0[2] = 0;
  v0[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptLookupLanguageModel.NodeState>);
  v1 = OUTLINED_FUNCTION_2_0();
  *(_OWORD *)(v1 + 16) = xmmword_248D75A50;
  v2 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 56) = 257;
  *(_QWORD *)(v1 + 64) = v2;
  v0[4] = v1;
  OUTLINED_FUNCTION_49();
}

Swift::Int __swiftcall PromptLookupLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = (uint64_t *)(v3 + 32);
  result = OUTLINED_FUNCTION_4_0();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 <= forPreviousNode)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v12 = specialized Dictionary.subscript.getter(token, *(_QWORD *)(v10 + 40 * forPreviousNode + 64));
  if ((v13 & 1) == 0)
  {
    v14 = v12;
    OUTLINED_FUNCTION_7_14();
    return v14;
  }
  OUTLINED_FUNCTION_7_14();
  v15 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_4_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v16 = *(_QWORD *)(*v8 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v17 = *v8;
  *(_QWORD *)(v17 + 16) = v16 + 1;
  v18 = v17 + 40 * v16;
  *(_QWORD *)(v18 + 32) = forPreviousNode;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = token;
  *(_BYTE *)(v18 + 56) = 0;
  *(_BYTE *)(v18 + 57) = isPrompt;
  *(_QWORD *)(v18 + 64) = v15;
  v19 = *v8;
  if (isPrompt)
    *(_QWORD *)(v4 + 24) = v11;
  if (*(_QWORD *)(v19 + 16) > (unint64_t)forPreviousNode)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(v11, token);
    OUTLINED_FUNCTION_7_14();
    return v11;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

void PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = PromptLookupLanguageModel.nextPromptNode(forNode:)(*(_QWORD *)(v0 + 96));
  if ((v2 & 1) == 0)
  {
    v3 = *(uint64_t **)(v0 + 88);
    v3[3] = (uint64_t)&unk_2519E0458;
    v3[4] = (uint64_t)&protocol witness table for PromptLookupLanguageModel.OneTokenLogitCollection;
    *v3 = v1;
LABEL_20:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v4 = *(_QWORD *)(v0 + 104);
  OUTLINED_FUNCTION_4_0();
  v5 = PromptLookupLanguageModel.nextPromptNode(forNode:)(*(_QWORD *)(v4 + 16));
  if ((v7 & 1) != 0)
  {
    v27 = *(_QWORD **)(v0 + 88);
    v27[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    v27[4] = &protocol witness table for <A> [A];
    *v27 = MEMORY[0x24BEE4AF8];
    goto LABEL_20;
  }
  v8 = v6;
  v29 = v5;
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = (uint64_t *)(v9 + 32);
  swift_retain();
  OUTLINED_FUNCTION_4_0();
  v12 = 0;
  do
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v10 >= *(_QWORD *)(*v11 + 16))
      goto LABEL_22;
    v13 = *v11 + 40 * v10;
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_BYTE *)(v13 + 40);
    v16 = PromptLookupLanguageModel.nextPromptNode(forNode:)(v10);
    if ((v18 & 1) == 0)
    {
      v19 = v16;
      v20 = v17;
      v21 = PromptLookupLanguageModel.commonTokenCountFromNodes(_:_:)(v10, *(_QWORD *)(v0 + 96));
      if (v12 < v21)
        v8 = v20;
      v22 = v29;
      if (v12 < v21)
        v22 = v19;
      v29 = v22;
      if (v12 < v21)
        v12 = v21;
    }
    v10 = v14;
  }
  while ((v15 & 1) == 0);
  swift_release();
  OUTLINED_FUNCTION_4_0();
  v23 = *v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v11 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    goto LABEL_16;
LABEL_23:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v23 = v28;
  *v11 = v28;
LABEL_16:
  v25 = *(_QWORD *)(v0 + 96);
  if ((v25 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v23 + 16) > v25)
  {
    v26 = *(uint64_t **)(v0 + 88);
    specialized Dictionary._Variant.setValue(_:forKey:)(v8, v29);
    swift_endAccess();
    v26[3] = (uint64_t)&unk_2519E0458;
    v26[4] = (uint64_t)&protocol witness table for PromptLookupLanguageModel.OneTokenLogitCollection;
    *v26 = v29;
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t PromptLookupLanguageModel.nextPromptNode(forNode:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Sequence.first(where:)(v4, partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:));
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 0;
  else
    return v5;
}

uint64_t PromptLookupLanguageModel.commonTokenCountFromNodes(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;

  swift_beginAccess();
  result = 0;
  v6 = 0;
  v7 = *(_QWORD *)(v2 + 32);
  v8 = v7 + 32;
  v9 = *(_QWORD *)(v7 + 16);
  while (a1 < v9)
  {
    if ((v6 & 1) != 0)
      return result;
    if (a2 >= v9)
      goto LABEL_15;
    v10 = (unint64_t *)(v8 + 40 * a1);
    v11 = *v10;
    v12 = *((unsigned __int8 *)v10 + 8);
    v13 = (unint64_t *)(v8 + 40 * a2);
    v14 = *v13;
    v6 = *((_BYTE *)v13 + 8);
    v15 = *((unsigned __int8 *)v13 + 24);
    if ((*(_BYTE *)(v8 + 40 * a1 + 24) & 1) != 0)
    {
      if (!v15)
        return result;
    }
    else
    {
      if (*(_QWORD *)(v8 + 40 * a1 + 16) != *(_QWORD *)(v8 + 40 * a2 + 16))
        LOBYTE(v15) = 1;
      if ((v15 & 1) != 0)
        return result;
    }
    if (__OFADD__(result, 1))
      goto LABEL_16;
    ++result;
    a1 = v11;
    a2 = v14;
    if (v12)
      return result;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PromptLookupLanguageModel.OneTokenLogitCollection.indexSet.getter(uint64_t a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v2 = OUTLINED_FUNCTION_2_0();
  *(_OWORD *)(v2 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v2 + 32) = a1;
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance PromptLookupLanguageModel.OneTokenLogitCollection()
{
  uint64_t *v0;

  return PromptLookupLanguageModel.OneTokenLogitCollection.indexSet.getter(*v0);
}

float protocol witness for LogitCollection.subscript.getter in conformance PromptLookupLanguageModel.OneTokenLogitCollection(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in LogitCollection.topK(_:)(a1, *v1);
}

uint64_t closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 32);
    if (*(_QWORD *)(v6 + 16) > a2)
      return *(unsigned __int8 *)(v6 + 40 * a2 + 57);
  }
  __break(1u);
  return result;
}

uint64_t PromptLookupLanguageModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PromptLookupLanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance PromptLookupLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel;
  return PromptLookupLanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2);
}

void protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance PromptLookupLanguageModel()
{
  PromptLookupLanguageModel.startNode.getter();
  OUTLINED_FUNCTION_49();
}

void protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance PromptLookupLanguageModel(Swift::Int a1, Swift::Int a2, Swift::Bool a3)
{
  PromptLookupLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, a3);
  OUTLINED_FUNCTION_49();
}

uint64_t type metadata accessor for PromptLookupLanguageModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for PromptLookupLanguageModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PromptLookupLanguageModel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void *type metadata accessor for PromptLookupLanguageModel.OneTokenLogitCollection()
{
  return &unk_2519E0458;
}

uint64_t initializeWithCopy for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptLookupLanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptLookupLanguageModel.NodeState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptLookupLanguageModel.NodeState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptLookupLanguageModel.NodeState()
{
  return &type metadata for PromptLookupLanguageModel.NodeState;
}

uint64_t partial apply for closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return closure #1 in PromptLookupLanguageModel.nextPromptNode(forNode:)(a1, a2, v2);
}

TokenGenerationInference::SamplingDecoderPrompt __swiftcall SamplingDecoderPrompt.init(queryTokens:promptModulesTokens:)(Swift::OpaquePointer queryTokens, Swift::OpaquePointer promptModulesTokens)
{
  Swift::OpaquePointer *v2;
  TokenGenerationInference::SamplingDecoderPrompt result;

  v2->_rawValue = queryTokens._rawValue;
  v2[1]._rawValue = promptModulesTokens._rawValue;
  result.promptModulesTokens = promptModulesTokens;
  result.queryTokens = queryTokens;
  return result;
}

void TokenGenerationSamplingError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int TokenGenerationSamplingError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void SamplingDecoderPrompt.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;

  v2 = *v0;
  v1 = v0[1];
  v31[2] = 0;
  v31[3] = 0xE000000000000000;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v29 = v2;
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = MEMORY[0x24BEE1768];
    while (1)
    {
      v7 = *(_QWORD *)(v1 + 8 * v5 + 32);
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(34);
      OUTLINED_FUNCTION_6_12();
      v31[0] = 0xD000000000000016;
      v31[1] = 0x8000000248D80660;
      v32._countAndFlagsBits = MEMORY[0x2495A9BC8](v7, v6);
      OUTLINED_FUNCTION_1_13(v32);
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_0_14();
      v8 = *(_QWORD *)(v7 + 16);
      v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_1_13(v33);
      OUTLINED_FUNCTION_63_0();
      v9._countAndFlagsBits = 0xD000000000000016;
      v9._object = (void *)0x8000000248D80660;
      String.append(_:)(v9);
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_2_13();
      swift_bridgeObjectRelease();
      v10 = __OFADD__(v4, v8);
      v4 += v8;
      if (v10)
        break;
      if (v3 == ++v5)
      {
        swift_bridgeObjectRelease();
        v2 = v29;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_7:
    _StringGuts.grow(_:)(26);
    OUTLINED_FUNCTION_6_12();
    strcpy((char *)v31, "query tokens: ");
    HIBYTE(v31[1]) = -18;
    v11 = swift_bridgeObjectRetain();
    v34._countAndFlagsBits = MEMORY[0x2495A9BC8](v11, MEMORY[0x24BEE1768]);
    OUTLINED_FUNCTION_1_13(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_0_14();
    v12 = *(_QWORD *)(v2 + 16);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_1_13(v35);
    v13 = OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_3_13(v13, v14, v15, v16, v17, v18, v19, v20, v29, v12, v31[0], (void *)v31[1]);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_2_13();
    if (!__OFADD__(v4, v12))
    {
      _StringGuts.grow(_:)(21);
      OUTLINED_FUNCTION_6_12();
      v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_1_13(v36);
      v21 = OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_3_13(v21, v22, v23, v24, v25, v26, v27, v28, v30, v4 + v12, 0xD000000000000013, (void *)0x8000000248D80680);
      OUTLINED_FUNCTION_7_0();
      return;
    }
  }
  __break(1u);
}

_QWORD *initializeBufferWithCopyOfBuffer for SamplingDecoderPrompt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SamplingDecoderPrompt(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingDecoderPrompt(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingDecoderPrompt(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingDecoderPrompt()
{
  return &type metadata for SamplingDecoderPrompt;
}

uint64_t dispatch thunk of SamplingDecoder.append(prompt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of SamplingDecoder.decodeNextChunk()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of SamplingDecoder.decodeNextChunk();
  return v7(a1, a2);
}

uint64_t dispatch thunk of SamplingDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationSamplingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248D4B910 + 4 * byte_248D775E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248D4B930 + 4 * byte_248D775E5[v4]))();
}

_BYTE *sub_248D4B910(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248D4B930(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D4B938(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D4B940(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D4B948(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D4B950(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationSamplingError()
{
  return &type metadata for TokenGenerationSamplingError;
}

void OUTLINED_FUNCTION_0_14()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x203A746E756F6320;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_1_13(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_2_13()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_3_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

Swift::Void __swiftcall SpeculativeDecoderPerformanceMeasurement.printToOSLogForLLMWheel()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;
  Swift::String v149;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v128 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  HIDWORD(v119) = *(unsigned __int8 *)(v0 + 80);
  v142 = 0;
  v143 = 0xE000000000000000;
  if ((v2 & 1) == 0)
  {
    _StringGuts.grow(_:)(35);
    OUTLINED_FUNCTION_21_6();
    OUTLINED_FUNCTION_19_10();
    v144._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_11_6(v144);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_3_14(v8, v9, v10, v11, v12, v13, v14, v15, v110, v119, v128, v1, 0, (void *)0xE000000000000000);
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_22_10();
  OUTLINED_FUNCTION_21_6();
  v145._countAndFlagsBits = OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_11_6(v145);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_16_9(v16, v17, v18, v19, v20, v21, v22, v23, v110, v119, v128, v3, 0xD000000000000021, (void *)0x8000000248D806A0);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_19_10();
  v146._countAndFlagsBits = OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_11_6(v146);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_3_14(v24, v25, v26, v27, v28, v29, v30, v31, v111, v120, v129, v4, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_7_0();
  _StringGuts.grow(_:)(39);
  OUTLINED_FUNCTION_27_5();
  OUTLINED_FUNCTION_10_13(0xD000000000000024, (uint64_t)"draft_token_acceptance_rate_percent=");
  Float.write<A>(to:)();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_3_14(v32, v33, v34, v35, v36, v37, v38, v39, v112, v121, v130, v137, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_7_0();
  if ((v5 & 1) == 0)
  {
    OUTLINED_FUNCTION_30_8();
    OUTLINED_FUNCTION_10_13(0xD000000000000023, (uint64_t)"tiny_token_acceptance_rate_percent=");
    Float.write<A>(to:)();
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_3_14(v40, v41, v42, v43, v44, v45, v46, v47, v113, v122, v131, v138, 0, (void *)0xE000000000000000);
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_22_10();
  OUTLINED_FUNCTION_27_5();
  OUTLINED_FUNCTION_18_8((uint64_t)"speculation_success_rate_percent=");
  Float.write<A>(to:)();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_3_14(v48, v49, v50, v51, v52, v53, v54, v55, v113, v122, v131, v138, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_7_0();
  _StringGuts.grow(_:)(29);
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_19_10();
  v147._countAndFlagsBits = OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_11_6(v147);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_16_9(v56, v57, v58, v59, v60, v61, v62, v63, v114, v123, v132, v7, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_58_0();
  _StringGuts.grow(_:)(46);
  OUTLINED_FUNCTION_21_6();
  OUTLINED_FUNCTION_19_10();
  v148._countAndFlagsBits = OUTLINED_FUNCTION_12_9();
  OUTLINED_FUNCTION_11_6(v148);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_3_14(v64, v65, v66, v67, v68, v69, v70, v71, v115, v124, v133, v6, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_7_0();
  if ((v125 & 0x100000000) == 0)
  {
    OUTLINED_FUNCTION_22_10();
    OUTLINED_FUNCTION_27_5();
    OUTLINED_FUNCTION_18_8((uint64_t)"tiny_model_total_latency_seconds=");
    Double.write<A>(to:)();
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_3_14(v72, v73, v74, v75, v76, v77, v78, v79, v116, v125, v134, v139, 0, (void *)0xE000000000000000);
    OUTLINED_FUNCTION_7_0();
  }
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_27_5();
  OUTLINED_FUNCTION_10_13(0xD000000000000022, (uint64_t)"draft_model_total_latency_seconds=");
  OUTLINED_FUNCTION_33_7();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_16_9(v80, v81, v82, v83, v84, v85, v86, v87, v116, v125, v134, v139, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_30_8();
  OUTLINED_FUNCTION_10_13(0xD000000000000023, (uint64_t)"target_model_total_latency_seconds=");
  OUTLINED_FUNCTION_33_7();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_3_14(v88, v89, v90, v91, v92, v93, v94, v95, v117, v126, v135, v140, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_7_0();
  v149._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_11_6(v149);
  v96 = OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_3_14(v96, v97, v98, v99, v100, v101, v102, v103, v118, v127, v136, v136, 0x3D616D6D6167, (void *)0xE600000000000000);
  OUTLINED_FUNCTION_7_0();
  if (one-time initialization token for speculativeDecode != -1)
    swift_once();
  v104 = type metadata accessor for Logger();
  __swift_project_value_buffer(v104, (uint64_t)static Log.speculativeDecode);
  v106 = v142;
  v105 = v143;
  swift_bridgeObjectRetain();
  v107 = Logger.logObject.getter();
  v108 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)swift_slowAlloc();
    v141 = swift_slowAlloc();
    *(_DWORD *)v109 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v105, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_248CAA000, v107, v108, "%s", v109, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_1();
  }

  swift_bridgeObjectRelease_n();
}

uint64_t SpeculativeDecoderPerformanceMeasurement.init(draftSteps:tinyModel:draftModel:targetModel:decoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v27 = *(_QWORD *)(a2 + 40);
    if (a3)
    {
LABEL_3:
      v26 = *(_QWORD *)(a3 + 40);
      goto LABEL_6;
    }
  }
  else
  {
    v27 = 0;
    if (a3)
      goto LABEL_3;
  }
  v26 = 0;
LABEL_6:
  v25 = *(_QWORD *)(a4 + 40);
  OUTLINED_FUNCTION_24_7();
  v13 = (*(float (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  OUTLINED_FUNCTION_24_7();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  OUTLINED_FUNCTION_23_9();
  v15 = (*(float (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  OUTLINED_FUNCTION_23_9();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v18 = a5[3];
  v17 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
  v20 = v19;
  v21 = 0.0;
  v22 = 0.0;
  if (a2)
  {
    swift_retain();
    v22 = E5TransformerLanguageModel.totalLatency.getter();
    swift_release();
  }
  if (a3)
  {
    swift_retain();
    v21 = E5TransformerLanguageModel.totalLatency.getter();
    swift_release();
  }
  v23 = E5TransformerLanguageModel.totalLatency.getter();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)a6 = v27;
  *(_BYTE *)(a6 + 8) = a2 == 0;
  *(_QWORD *)(a6 + 16) = v26;
  *(_QWORD *)(a6 + 24) = v25;
  *(_QWORD *)(a6 + 32) = a1;
  *(float *)(a6 + 40) = v13;
  *(_DWORD *)(a6 + 44) = v14;
  *(_BYTE *)(a6 + 48) = BYTE4(v14) & 1;
  *(float *)(a6 + 52) = v15;
  *(_QWORD *)(a6 + 56) = v16;
  *(_QWORD *)(a6 + 64) = v20;
  *(double *)(a6 + 72) = v22;
  *(_BYTE *)(a6 + 80) = a2 == 0;
  *(double *)(a6 + 88) = v21;
  *(double *)(a6 + 96) = v23;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a5);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.targetModelInferenceCallCount.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftSteps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.draftSteps.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftSteps.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 40);
}

void SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 40) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftTokenAcceptanceRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

unint64_t SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 44) = result;
  *(_BYTE *)(v1 + 48) = BYTE4(result) & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

float SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 52);
}

void SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 52) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.speculationSuccessRateInPercent.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.numberOfDraftOutputTokens.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.totalNumberOutputTokens.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

double SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

void SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 88) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.draftModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

double SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*SpeculativeDecoderPerformanceMeasurement.targetModelTotalLatency.modify())()
{
  return destructiveProjectEnumData for DelayedMaskedLanguageModel.MaskResolution;
}

void __swiftcall SpeculativeDecoderPerformanceMeasurement.init(tinyModelInferenceCallCount:draftModelInferenceCallCount:targetModelInferenceCallCount:draftSteps:draftTokenAcceptanceRateInPercent:tinyTokenAcceptanceRateInPercent:speculationSuccessRateInPercent:numberOfDraftOutputTokens:totalNumberOutputTokens:tinyModelTotalLatency:draftModelTotalLatency:targetModelTotalLatency:)(TokenGenerationInference::SpeculativeDecoderPerformanceMeasurement *__return_ptr retstr, Swift::Int_optional tinyModelInferenceCallCount, Swift::Int draftModelInferenceCallCount, Swift::Int targetModelInferenceCallCount, Swift::Int draftSteps, Swift::Float draftTokenAcceptanceRateInPercent, Swift::Float_optional *tinyTokenAcceptanceRateInPercent, Swift::Float speculationSuccessRateInPercent, Swift::Int numberOfDraftOutputTokens, Swift::Int totalNumberOutputTokens, Swift::Double_optional tinyModelTotalLatency, Swift::Double draftModelTotalLatency, Swift::Double targetModelTotalLatency)
{
  char v13;

  retstr->tinyModelInferenceCallCount.value = tinyModelInferenceCallCount.value;
  retstr->tinyModelInferenceCallCount.is_nil = tinyModelInferenceCallCount.is_nil;
  retstr->draftModelInferenceCallCount = draftModelInferenceCallCount;
  retstr->targetModelInferenceCallCount = targetModelInferenceCallCount;
  retstr->draftSteps = draftSteps;
  retstr->draftTokenAcceptanceRateInPercent = draftTokenAcceptanceRateInPercent;
  LODWORD(retstr->tinyTokenAcceptanceRateInPercent.value) = (_DWORD)tinyTokenAcceptanceRateInPercent;
  retstr->tinyTokenAcceptanceRateInPercent.is_nil = BYTE4(tinyTokenAcceptanceRateInPercent) & 1;
  retstr->speculationSuccessRateInPercent = speculationSuccessRateInPercent;
  retstr->numberOfDraftOutputTokens = numberOfDraftOutputTokens;
  retstr->totalNumberOutputTokens = totalNumberOutputTokens;
  retstr->tinyModelTotalLatency.value = *(Swift::Double *)&tinyModelTotalLatency.is_nil;
  retstr->tinyModelTotalLatency.is_nil = v13 & 1;
  retstr->draftModelTotalLatency = tinyModelTotalLatency.value;
  retstr->targetModelTotalLatency = draftModelTotalLatency;
}

Swift::Void __swiftcall SpeculativeDecoderPerformanceMeasurement.printMetrics()()
{
  uint64_t v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  __n128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  Swift::String v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;

  HIDWORD(v53) = *(unsigned __int8 *)(v0 + 48);
  v57 = *(_QWORD *)(v0 + 64);
  v61 = *(_QWORD *)(v0 + 56);
  HIDWORD(v65) = *(unsigned __int8 *)(v0 + 80);
  v1 = MEMORY[0x24BEE0D00];
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v2 = (__n128 *)OUTLINED_FUNCTION_5_10();
    OUTLINED_FUNCTION_28_7(v2, (__n128)xmmword_248D75A50);
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_1_14(0xD000000000000035, (uint64_t)"Speculative decoder: Tiny model inference was called ");
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_6_13(v72);
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_8_8();
    v2[3].n128_u64[1] = v1;
    v2[2].n128_u64[0] = v70;
    v2[2].n128_u64[1] = v71;
    OUTLINED_FUNCTION_0_15();
    OUTLINED_FUNCTION_7_0();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v3 = OUTLINED_FUNCTION_5_10();
  *(_OWORD *)(v3 + 16) = xmmword_248D75A50;
  _StringGuts.grow(_:)(63);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000036, (uint64_t)"Speculative decoder: Draft model inference was called ");
  v73._countAndFlagsBits = OUTLINED_FUNCTION_25_7();
  OUTLINED_FUNCTION_6_13(v73);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_8();
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_50_2();
  v4 = (__n128 *)OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_9_9(v4, v5, v6, v7, v8, v9, v10, v11, v53, v57, v61, v65, v12);
  _StringGuts.grow(_:)(64);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000037, (uint64_t)"Speculative decoder: Target model inference was called ");
  v74._countAndFlagsBits = OUTLINED_FUNCTION_25_7();
  OUTLINED_FUNCTION_6_13(v74);
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_8_8();
  v4[3].n128_u64[1] = v1;
  v4[2].n128_u64[0] = 0;
  v4[2].n128_u64[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_50_2();
  v13 = (__n128 *)OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_9_9(v13, v14, v15, v16, v17, v18, v19, v20, v54, v58, v62, v66, v21);
  _StringGuts.grow(_:)(70);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000041, (uint64_t)"Speculative decoder: The average draft token acceptance rate was ");
  Float.write<A>(to:)();
  OUTLINED_FUNCTION_14_7();
  v13[3].n128_u64[1] = v1;
  v13[2].n128_u64[0] = 0;
  v13[2].n128_u64[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_20_2();
  if ((v55 & 0x100000000) == 0)
  {
    v22 = (__n128 *)OUTLINED_FUNCTION_4_16();
    OUTLINED_FUNCTION_9_9(v22, v23, v24, v25, v26, v27, v28, v29, v55, v59, v63, v67, v30);
    _StringGuts.grow(_:)(75);
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_1_14(0xD000000000000046, (uint64_t)"Speculative decoder: The average tiny model token acceptance rate was ");
    Float.write<A>(to:)();
    OUTLINED_FUNCTION_14_7();
    v22[3].n128_u64[1] = v1;
    v22[2].n128_u64[0] = 0;
    v22[2].n128_u64[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_0_15();
    OUTLINED_FUNCTION_20_2();
  }
  v31 = (__n128 *)OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_9_9(v31, v32, v33, v34, v35, v36, v37, v38, v55, v59, v63, v67, v39);
  _StringGuts.grow(_:)(55);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000032, (uint64_t)"Speculative decoder: Speculation success rate was ");
  Float.write<A>(to:)();
  OUTLINED_FUNCTION_14_7();
  v31[3].n128_u64[1] = v1;
  v31[2].n128_u64[0] = 0;
  v31[2].n128_u64[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_20_2();
  v40 = (__n128 *)OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_9_9(v40, v41, v42, v43, v44, v45, v46, v47, v56, v60, v64, v68, v48);
  _StringGuts.grow(_:)(89);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000020, (uint64_t)"Speculative decoder: Out of the ");
  v75._countAndFlagsBits = OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_6_13(v75);
  swift_bridgeObjectRelease();
  v49._object = (void *)0x8000000248D809E0;
  v49._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v49);
  v76._countAndFlagsBits = OUTLINED_FUNCTION_26_8();
  OUTLINED_FUNCTION_6_13(v76);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_1_14(0xD000000000000022, (uint64_t)" tokens came from the draft model.");
  v40[3].n128_u64[1] = v1;
  v40[2].n128_u64[0] = 0;
  v40[2].n128_u64[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_20_2();
  if ((v69 & 1) == 0)
  {
    v50 = (__n128 *)OUTLINED_FUNCTION_4_16();
    OUTLINED_FUNCTION_28_7(v50, (__n128)xmmword_248D75A50);
    _StringGuts.grow(_:)(70);
    OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_1_14(0xD000000000000042, (uint64_t)"Speculative decoder: Total latency spent in tiny model inference: ");
    Double.write<A>(to:)();
    OUTLINED_FUNCTION_15_10();
    v50[3].n128_u64[1] = v1;
    v50[2].n128_u64[0] = 0;
    v50[2].n128_u64[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_0_15();
    OUTLINED_FUNCTION_20_2();
  }
  v51 = OUTLINED_FUNCTION_4_16();
  *(_OWORD *)(v51 + 16) = xmmword_248D75A50;
  _StringGuts.grow(_:)(71);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000043, (uint64_t)"Speculative decoder: Total latency spent in draft model inference: ");
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_15_10();
  *(_QWORD *)(v51 + 56) = v1;
  *(_QWORD *)(v51 + 32) = 0;
  *(_QWORD *)(v51 + 40) = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_50_2();
  v52 = OUTLINED_FUNCTION_4_16();
  *(_OWORD *)(v52 + 16) = xmmword_248D75A50;
  _StringGuts.grow(_:)(72);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_1_14(0xD000000000000044, (uint64_t)"Speculative decoder: Total latency spent in target model inference: ");
  OUTLINED_FUNCTION_32_7();
  OUTLINED_FUNCTION_15_10();
  *(_QWORD *)(v52 + 56) = v1;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = 0xE000000000000000;
  OUTLINED_FUNCTION_0_15();
  OUTLINED_FUNCTION_7_0();
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyModelInferenceCallCount.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return SpeculativeDecoderPerformanceMeasurement.tinyModelInferenceCallCount.getter();
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  unint64_t v0;

  v0 = SpeculativeDecoderPerformanceMeasurement.tinyTokenAcceptanceRateInPercent.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t protocol witness for SpeculativeDecodingMetricsProtocol.tinyModelTotalLatency.getter in conformance SpeculativeDecoderPerformanceMeasurement()
{
  return SpeculativeDecoderPerformanceMeasurement.tinyModelTotalLatency.getter();
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t getEnumTagSinglePayload for SpeculativeDecoderPerformanceMeasurement(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpeculativeDecoderPerformanceMeasurement(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpeculativeDecoderPerformanceMeasurement()
{
  return &type metadata for SpeculativeDecoderPerformanceMeasurement;
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  return print(_:separator:terminator:)();
}

void OUTLINED_FUNCTION_1_14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_2_14()
{
  Swift::String v0;

  v0._countAndFlagsBits = 44;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_3_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  Swift::String v14;

  v14._countAndFlagsBits = a13;
  v14._object = a14;
  String.append(_:)(v14);
}

uint64_t OUTLINED_FUNCTION_4_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_6_13(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_8_8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x2E73656D697420;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
}

__n128 OUTLINED_FUNCTION_9_9(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __n128 a13)
{
  __n128 result;

  result = a13;
  a1[1] = a13;
  return result;
}

void OUTLINED_FUNCTION_10_13(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_11_6(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_12_9()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_14_7()
{
  Swift::String v0;

  v0._countAndFlagsBits = 3024160;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_15_10()
{
  Swift::String v0;

  v0._countAndFlagsBits = 29472;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_16_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  Swift::String v14;

  v14._countAndFlagsBits = a13;
  v14._object = a14;
  String.append(_:)(v14);
}

void OUTLINED_FUNCTION_18_8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_22_10()
{
  _StringGuts.grow(_:)(36);
}

_QWORD *OUTLINED_FUNCTION_23_9()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

_QWORD *OUTLINED_FUNCTION_24_7()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_25_7()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

__n128 *OUTLINED_FUNCTION_28_7(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_30_8()
{
  _StringGuts.grow(_:)(38);
}

void OUTLINED_FUNCTION_31_7()
{
  _StringGuts.grow(_:)(37);
}

uint64_t OUTLINED_FUNCTION_32_7()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_33_7()
{
  return Double.write<A>(to:)();
}

void __swiftcall DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:earlyReturnProbabilityThreshold:)(TokenGenerationInference::DraftingBehavior *__return_ptr retstr, Swift::Int draftSteps, Swift::Bool isAdaptive, Swift::Int treeFactor, Swift::Float_optional *softMatchTolerance, Swift::Bool speculativeSampling, Swift::Bool earlyReturn, Swift::Float_optional *earlyReturnProbabilityThreshold)
{
  int v8;
  uint64_t v9;
  char v10;

  if (treeFactor < 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_2_15(draftSteps, isAdaptive, treeFactor, (uint64_t)softMatchTolerance, speculativeSampling, earlyReturn, (uint64_t)retstr);
    *(_DWORD *)(v9 + 32) = v8;
    *(_BYTE *)(v9 + 36) = v10 & 1;
  }
}

void __swiftcall DraftingBehavior.init(draftSteps:isAdaptive:treeFactor:softMatchTolerance:speculativeSampling:earlyReturn:)(TokenGenerationInference::DraftingBehavior *__return_ptr retstr, Swift::Int draftSteps, Swift::Bool isAdaptive, Swift::Int treeFactor, Swift::Float_optional *softMatchTolerance, Swift::Bool speculativeSampling, Swift::Bool earlyReturn)
{
  uint64_t v7;

  if (treeFactor < 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_2_15(draftSteps, isAdaptive, treeFactor, (uint64_t)softMatchTolerance, speculativeSampling, earlyReturn, (uint64_t)retstr);
    *(_DWORD *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 36) = 1;
  }
}

uint64_t DraftingBehavior.draftSteps.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DraftingBehavior.isAdaptive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t DraftingBehavior.treeFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

unint64_t DraftingBehavior.softMatchTolerance.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_4_17(*(unsigned int *)(v0 + 24));
}

uint64_t DraftingBehavior.speculativeSampling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t DraftingBehavior.earlyReturn.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 30);
}

unint64_t DraftingBehavior.earlyReturnProbabilityThreshold.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_4_17(*(unsigned int *)(v0 + 32));
}

uint64_t static DraftingBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  char v6;

  result = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
    return result;
  }
  v4 = *(unsigned __int8 *)(a1 + 29);
  v5 = *(unsigned __int8 *)(a2 + 29);
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 28))
      return 0;
    result = 0;
    if (v4 != v5)
      return result;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
      return 0;
    result = 0;
    if (*(float *)(a1 + 24) != *(float *)(a2 + 24) || ((v4 ^ v5) & 1) != 0)
      return result;
  }
  if (((*(unsigned __int8 *)(a1 + 30) ^ *(unsigned __int8 *)(a2 + 30)) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 36) & 1) != 0)
        return 1;
    }
    else
    {
      if (*(float *)(a1 + 32) == *(float *)(a2 + 32))
        v6 = *(_BYTE *)(a2 + 36);
      else
        v6 = 1;
      if ((v6 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t DraftingBehavior.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;

  v3 = a1 == 0x6574537466617264 && a2 == 0xEA00000000007370;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6974706164417369 && a2 == 0xEA00000000006576;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7463614665657274 && a2 == 0xEA0000000000726FLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000012 && a2 == 0x8000000248D80BF0
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000013 && a2 == 0x8000000248D7FFC0
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        v8 = a1 == 0x746552796C726165 && a2 == 0xEB000000006E7275;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else if (a1 == 0xD00000000000001FLL && a2 == 0x8000000248D80C10)
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
            return 6;
          else
            return 7;
        }
      }
    }
  }
}

Swift::Int DraftingBehavior.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t DraftingBehavior.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D4D01C
                                                            + 4 * asc_248D77830[a1]))(0x6574537466617264, 0xEA00000000007370);
}

uint64_t sub_248D4D01C()
{
  return 0x6974706164417369;
}

uint64_t sub_248D4D038()
{
  return 0x7463614665657274;
}

unint64_t sub_248D4D050()
{
  return 0xD000000000000012;
}

unint64_t sub_248D4D06C()
{
  return 0xD000000000000013;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DraftingBehavior.CodingKeys()
{
  unsigned __int8 *v0;

  return DraftingBehavior.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DraftingBehavior.CodingKeys()
{
  unsigned __int8 *v0;

  return DraftingBehavior.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DraftingBehavior.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = DraftingBehavior.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DraftingBehavior.CodingKeys()
{
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DraftingBehavior.CodingKeys()
{
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void DraftingBehavior.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DraftingBehavior.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(unsigned __int8 *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  v17 = *(unsigned int *)(v1 + 24);
  v18 = v8;
  LODWORD(v8) = *(unsigned __int8 *)(v1 + 28);
  v15 = *(unsigned __int8 *)(v1 + 29);
  v16 = v8;
  v14 = *(unsigned __int8 *)(v1 + 30);
  v13 = *(unsigned int *)(v1 + 32);
  v12 = *(unsigned __int8 *)(v1 + 36);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  v9 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v28 = 0;
  OUTLINED_FUNCTION_9_10();
  if (!v2)
  {
    v10 = v16;
    v27 = 1;
    OUTLINED_FUNCTION_0_16();
    v26 = 2;
    OUTLINED_FUNCTION_9_10();
    v25 = 3;
    v21 = v10;
    OUTLINED_FUNCTION_6_14();
    v24 = 4;
    OUTLINED_FUNCTION_0_16();
    v23 = 5;
    OUTLINED_FUNCTION_0_16();
    v22 = 6;
    v20 = v12;
    OUTLINED_FUNCTION_6_14();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
  OUTLINED_FUNCTION_10_9();
}

unint64_t lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior.CodingKeys, &unk_2519E08E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior.CodingKeys, &unk_2519E08E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior.CodingKeys, &unk_2519E08E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys;
  if (!lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior.CodingKeys, &unk_2519E08E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys);
  }
  return result;
}

void DraftingBehavior.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DraftingBehavior.CodingKeys>);
  MEMORY[0x24BDAC7A8](v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DraftingBehavior.CodingKeys and conformance DraftingBehavior.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v6 = OUTLINED_FUNCTION_7_15();
    v7 = OUTLINED_FUNCTION_1_15();
    v12 = OUTLINED_FUNCTION_7_15();
    v11 = OUTLINED_FUNCTION_37_4();
    v10 = OUTLINED_FUNCTION_1_15();
    v9 = OUTLINED_FUNCTION_1_15();
    v8 = OUTLINED_FUNCTION_37_4();
    OUTLINED_FUNCTION_5_11();
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = v7 & 1;
    *(_QWORD *)(a2 + 16) = v12;
    *(_DWORD *)(a2 + 24) = v11;
    *(_BYTE *)(a2 + 28) = BYTE4(v11) & 1;
    *(_BYTE *)(a2 + 29) = v10 & 1;
    *(_BYTE *)(a2 + 30) = v9 & 1;
    *(_DWORD *)(a2 + 32) = v8;
    *(_BYTE *)(a2 + 36) = BYTE4(v8) & 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Decodable.init(from:) in conformance DraftingBehavior(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DraftingBehavior.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance DraftingBehavior(_QWORD *a1)
{
  DraftingBehavior.encode(to:)(a1);
}

__n128 __swift_memcpy37_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DraftingBehavior(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 37))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DraftingBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DraftingBehavior()
{
  return &type metadata for DraftingBehavior;
}

uint64_t TokenTreeNode.init(token:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v2;
  return v1;
}

uint64_t TokenTreeNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TokenTreeNode()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for DraftingBehavior.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_248D4D6CC + 4 * byte_248D7783C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_248D4D700 + 4 * byte_248D77837[v4]))();
}

uint64_t sub_248D4D700(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D4D708(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D4D710);
  return result;
}

uint64_t sub_248D4D71C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D4D724);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_248D4D728(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D4D730(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DraftingBehavior.CodingKeys()
{
  return &unk_2519E08E8;
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_15@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  *(_QWORD *)(a7 + 16) = a3;
  *(_DWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 28) = BYTE4(a4) & 1;
  *(_BYTE *)(a7 + 29) = a5 & BYTE4(a4) & 1;
  *(_BYTE *)(a7 + 30) = a6 & 1;
  return result;
}

unint64_t OUTLINED_FUNCTION_4_17@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;

  return a1 | ((unint64_t)v1 << 32);
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_14()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs14PrefixSequenceVys04Zip2E0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_Sits5NeverOTg506_sSi24gh11Inference15jk21_pS2iIgyndd_Si_AaB_ptr6_Sits5L11OIegnrzr_TRSiAkL_pS2iIgyndd_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, char *))
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[3];
  _OWORD v23[4];
  uint64_t v24;

  v24 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v7 = v24;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v20 = a3;
  if (a3)
  {
    v9 = 0;
    v10 = a2 + 32;
    v19 = a2;
    do
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (v9 == v11)
        break;
      if (v9 >= v11)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        return result;
      }
      v12 = *(_QWORD *)(a2 + 16);
      if (v9 == v12)
        break;
      if (v9 >= v12)
        goto LABEL_14;
      *(_QWORD *)&v22[0] = *(_QWORD *)(a1 + 8 * v9 + 32);
      outlined init with copy of DeterministicLanguageModelProtocol(v10, (uint64_t)v22 + 8);
      v23[0] = v22[0];
      v23[1] = v22[1];
      v23[2] = v22[2];
      v13 = a4(*(_QWORD *)&v22[0], (char *)v23 + 8);
      v15 = v14;
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1((uint64_t)v23, &demangling cache variable for type metadata for (Int, LogitCollection));
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v24;
      }
      v17 = *(_QWORD *)(v7 + 16);
      v16 = *(_QWORD *)(v7 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        v7 = v24;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v17 + 1;
      v18 = v7 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v15;
      v10 += 40;
      a2 = v19;
    }
    while (v20 != v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs17DropFirstSequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, char *))
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[3];
  _OWORD v23[3];
  _OWORD v24[2];
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v7 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized DropFirstSequence.makeIterator()(a1, a2, a3, (uint64_t)v24);
  v26 = v24[1];
  v27 = v24[0];
  if ((v25 & 1) != 0 || (v8 = *((_QWORD *)&v27 + 1), v9 = *(_QWORD *)(v27 + 16), *((_QWORD *)&v27 + 1) == v9))
  {
LABEL_3:
    outlined release of IndexingIterator<[LogitCollection]>((uint64_t)&v27);
    outlined release of IndexingIterator<[LogitCollection]>((uint64_t)&v26);
  }
  else
  {
    v10 = *((_QWORD *)&v26 + 1);
    v18 = v27 + 32;
    v19 = v27;
    v20 = v26;
    v11 = v26 + 40 * *((_QWORD *)&v26 + 1) + 32;
    while (v8 < v9)
    {
      v12 = *(_QWORD *)(v20 + 16);
      if (v10 == v12)
        goto LABEL_3;
      if (v10 >= v12)
        goto LABEL_15;
      *(_QWORD *)&v22[0] = *(_QWORD *)(v18 + 8 * v8);
      outlined init with copy of DeterministicLanguageModelProtocol(v11, (uint64_t)v22 + 8);
      v23[0] = v22[0];
      v23[1] = v22[1];
      v23[2] = v22[2];
      v13 = a4(*(_QWORD *)&v22[0], (char *)v23 + 8);
      v15 = v14;
      _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1((uint64_t)v23, &demangling cache variable for type metadata for (Int, LogitCollection));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v28;
      }
      v16 = *(_QWORD *)(v7 + 16);
      if (v16 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v28;
      }
      ++v8;
      *(_QWORD *)(v7 + 16) = v16 + 1;
      v17 = v7 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_QWORD *)(v17 + 40) = v15;
      v9 = *(_QWORD *)(v19 + 16);
      v11 += 40;
      ++v10;
      if (v8 == v9)
        goto LABEL_3;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

void specialized MutableCollection<>.reverse()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
    v3 = v2 == 1;
  else
    v3 = 1;
  if (!v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
LABEL_16:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v1 = v10;
    }
    v4 = 0;
    v5 = v2 + 3;
    do
    {
      if (v4 != v5 - 4)
      {
        v6 = *(_QWORD *)(v1 + 16);
        if (v4 >= v6)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if (v5 - 4 >= v6)
          goto LABEL_15;
        v7 = v1 + 8 * v4;
        v8 = *(_QWORD *)(v7 + 32);
        *(_QWORD *)(v7 + 32) = *(_QWORD *)(v1 + 8 * v5);
        *(_QWORD *)(v1 + 8 * v5) = v8;
      }
      ++v4;
      v9 = v5 - 5;
      --v5;
    }
    while ((uint64_t)v4 < v9);
    *v0 = v1;
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5208_s24TokenGenerationInference27SpeculativeStreamingDecoderC33verifyPreviousDraftAndPrepareNext33_1EEAF925F3480DEDF57B931B9D581A9ELL013nodeToSampledA0010streamNodeuL10TopKTokensSaySiGSDyS2iG_SDySiAHGtFAHSiXEfU_SDySiAFGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = (uint64_t *)(a1 + 32);
    while (*(_QWORD *)(a2 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v6);
      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10 + 32) = v8;
      ++v5;
      if (!--v3)
        goto LABEL_8;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

void specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v3 = v6;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v3 + 8 * a1 + 40), v4 - 1 - a1, (char *)(v3 + 8 * a1 + 32));
    *(_QWORD *)(v3 + 16) = v5;
    *v1 = v3;
    OUTLINED_FUNCTION_37();
  }
}

void static SpeculativeStreamingDecoder.makeDefaultStreamTokenIDs(streamCount:vocabularyCount:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = __OFSUB__(a2, a1);
  v3 = a2 - a1;
  if (v2)
  {
    __break(1u);
  }
  else if (v3 <= a2)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v3, a2);
    return;
  }
  __break(1u);
}

uint64_t SpeculativeStreamingDecoder.__allocating_init(languageModel:behavior:streamTokenIDs:sampler:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(a1, a2, a3, a4);
  return v8;
}

void SpeculativeStreamingDecoder.languageModel.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_0();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, a1);
  OUTLINED_FUNCTION_2();
}

void SpeculativeStreamingDecoder.draftingBehavior.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  char v7;
  int v8;
  char v9;

  v2 = *(_BYTE *)(v1 + 176);
  v3 = *(_QWORD *)(v1 + 184);
  v4 = *(_DWORD *)(v1 + 192);
  v5 = *(_BYTE *)(v1 + 196);
  v6 = *(_BYTE *)(v1 + 197);
  v7 = *(_BYTE *)(v1 + 198);
  v8 = *(_DWORD *)(v1 + 200);
  v9 = *(_BYTE *)(v1 + 204);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 168);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 28) = v5;
  *(_BYTE *)(a1 + 29) = v6;
  *(_BYTE *)(a1 + 30) = v7;
  *(_DWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 36) = v9;
}

uint64_t SpeculativeStreamingDecoder.init(languageModel:behavior:streamTokenIDs:sampler:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  int v18;
  char v19;
  char v20;
  int v21;
  _BYTE v23[40];

  v5 = v4;
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 8);
  v10 = a2[2];
  v11 = *((_BYTE *)a2 + 28);
  v20 = *((_BYTE *)a2 + 29);
  v21 = *((_DWORD *)a2 + 6);
  v18 = *((_DWORD *)a2 + 8);
  v19 = *((_BYTE *)a2 + 30);
  v17 = *((_BYTE *)a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v12 = MEMORY[0x24BEE4AF8];
  v13 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v5 + 64) = v12;
  *(_QWORD *)(v5 + 72) = v12;
  *(_QWORD *)(v5 + 80) = v13;
  *(_QWORD *)(v5 + 216) = v12;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v5 + 16);
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  *(_QWORD *)(v5 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  outlined init with copy of DeterministicLanguageModelProtocol(a4, v5 + 88);
  *(_QWORD *)(v5 + 168) = v8;
  *(_BYTE *)(v5 + 176) = v9;
  *(_QWORD *)(v5 + 184) = v10;
  *(_DWORD *)(v5 + 192) = v21;
  *(_BYTE *)(v5 + 196) = v11;
  *(_BYTE *)(v5 + 197) = v20;
  *(_BYTE *)(v5 + 198) = v19;
  *(_DWORD *)(v5 + 200) = v18;
  *(_BYTE *)(v5 + 204) = v17;
  outlined init with copy of DeterministicLanguageModelProtocol(a4, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenSampling);
  type metadata accessor for GreedySampling();
  if (swift_dynamicCast())
  {
    swift_release();
    type metadata accessor for TopK();
    static TopK.makeTopKPresampler(k:)(v10, (uint64_t)v23);
    __swift_destroy_boxed_opaque_existential_1(a4);
    outlined init with take of LogitPresampler?((uint64_t)v23, v5 + 128);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a4);
    *(_QWORD *)(v5 + 160) = 0;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
  }
  *(_QWORD *)(v5 + 208) = a3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

unint64_t SpeculativeStreamingDecoder.verifyPreviousDraftAndPrepareNext(nodeToSampledToken:streamNodeToNextTopKTokens:)(unint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(result + 16))
  {
    v3 = v2;
    v5 = result;
    v6 = (uint64_t)(v2 + 2);
    v7 = v2[7];
    v8 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v9 & 1) == 0)
        break;
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * result);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v20;
      }
      v11 = *(_QWORD *)(v8 + 16);
      if (v11 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v21;
      }
      *(_QWORD *)(v8 + 16) = v11 + 1;
      *(_QWORD *)(v8 + 8 * v11 + 32) = v10;
      v12 = v3[10];
      if (!*(_QWORD *)(v12 + 16))
        goto LABEL_21;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v13 & 1) == 0)
        goto LABEL_21;
      v14 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * result);
      v15 = v14[2];
      if (!v15)
        goto LABEL_21;
      if (v14[4] != v10)
      {
        if (v15 == 1)
          goto LABEL_21;
        if (v14[5] != v10)
        {
          if (v15 == 2)
          {
LABEL_21:
            v22 = SpeculativeStreamingDecoder.streamNodes(forNode:)(v7);
            swift_bridgeObjectRetain();
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_AFs5NeverOTg5208_s24TokenGenerationInference27SpeculativeStreamingDecoderC33verifyPreviousDraftAndPrepareNext33_1EEAF925F3480DEDF57B931B9D581A9ELL013nodeToSampledA0010streamNodeuL10TopKTokensSaySiGSDyS2iG_SDySiAHGtFAHSiXEfU_SDySiAFGTf1cn_n(v22, a2);
            v24 = v23;
            swift_bridgeObjectRelease();
            swift_beginAccess();
            v25 = v3[5];
            v26 = v3[6];
            __swift_mutable_project_boxed_opaque_existential_1(v6, v25);
            v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 16))(v7, v10, 0, v25, v26);
            swift_endAccess();
            v3[7] = v27;
            v28 = SpeculativeStreamingDecoder.makeNextDraftTree(lastAcceptedNode:nextSpeculativeTokens:)(v27, v24);
            v30 = v29;
            v32 = v31;
            swift_bridgeObjectRelease();
            v3[8] = v28;
            v3[9] = v30;
            v3[10] = v32;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v8;
          }
          v18 = 6;
          while (1)
          {
            v19 = v18 - 3;
            if (__OFADD__(v18 - 4, 1))
              break;
            if (v14[v18] == v10)
              goto LABEL_14;
            ++v18;
            if (v19 == v15)
              goto LABEL_21;
          }
          __break(1u);
          break;
        }
      }
LABEL_14:
      swift_beginAccess();
      v16 = v3[5];
      v17 = v3[6];
      __swift_mutable_project_boxed_opaque_existential_1(v6, v16);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 16))(v7, v10, 0, v16, v17);
      result = swift_endAccess();
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_24;
    }
    __break(1u);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.streamNodes(forNode:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[26];
  v4 = (uint64_t)(v1 + 2);
  swift_beginAccess();
  v6 = v1[5];
  v5 = v1[6];
  __swift_mutable_project_boxed_opaque_existential_1(v4, v6);
  v7 = DeterministicLanguageModelProtocol.nodes(forPreviousNode:tokens:isPrompt:)(a1, v3, 0, v6, v5);
  swift_endAccess();
  return v7;
}

uint64_t SpeculativeStreamingDecoder.makeNextDraftTree(lastAcceptedNode:nextSpeculativeTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  Swift::Int v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  *(_QWORD *)(inited + 32) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v6 = MEMORY[0x24BEE4AF8];
  v7 = Dictionary.init(dictionaryLiteral:)();
  v8 = a2;
  v9 = (_QWORD *)v7;
  v61 = v2;
  v57 = *(_QWORD *)(v8 + 16);
  if (!v57)
    goto LABEL_31;
  v10 = v2 + 16;
  v55 = a1;
  v56 = v8 + 32;
  swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    v59 = *(_QWORD *)(inited + 16);
    if (v59)
      break;
LABEL_29:
    if (++v11 == v57)
    {
      swift_bridgeObjectRelease();
      a1 = v55;
LABEL_31:
      SpeculativeStreamingDecoder.streamNodes(forNode:)(a1);
      v41 = *(_QWORD *)(v6 + 16);
      if (v41)
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        v42 = 0;
        v43 = MEMORY[0x24BEE4AF8];
        do
        {
          v44 = SpeculativeStreamingDecoder.streamNodes(forNode:)(*(_QWORD *)(v6 + 8 * v42 + 32));
          v45 = *(_QWORD *)(v44 + 16);
          v46 = *(_QWORD *)(v43 + 16);
          if (__OFADD__(v46, v45))
            goto LABEL_55;
          v47 = v44;
          if (!swift_isUniquelyReferenced_nonNull_native() || v46 + v45 > *(_QWORD *)(v43 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v43 = v48;
          }
          if (*(_QWORD *)(v47 + 16))
          {
            v49 = *(_QWORD *)(v43 + 16);
            if ((*(_QWORD *)(v43 + 24) >> 1) - v49 < v45)
              goto LABEL_57;
            v50 = (void *)(v43 + 8 * v49 + 32);
            if (v47 + 32 < (unint64_t)v50 + 8 * v45 && (unint64_t)v50 < v47 + 32 + 8 * v45)
              goto LABEL_60;
            memcpy(v50, (const void *)(v47 + 32), 8 * v45);
            if (v45)
            {
              v52 = *(_QWORD *)(v43 + 16);
              v28 = __OFADD__(v52, v45);
              v53 = v52 + v45;
              if (v28)
                goto LABEL_58;
              *(_QWORD *)(v43 + 16) = v53;
            }
          }
          else if (v45)
          {
            goto LABEL_56;
          }
          swift_bridgeObjectRelease();
          ++v42;
        }
        while (v41 != v42);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain();
      }
      swift_bridgeObjectRelease();
      swift_release();
      specialized Array.append<A>(contentsOf:)();
      return v6;
    }
  }
  v58 = v11;
  v12 = *(_QWORD *)(v56 + 8 * v11);
  v62 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    v14 = *(_QWORD *)(inited + 16);
    if (!v14)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
    }
    v60 = v13;
    v15 = *(_QWORD *)(inited + 32);
    if ((unint64_t)(v14 - 1) > *(_QWORD *)(inited + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v14 = *(_QWORD *)(v40 + 16);
      if (!v14)
        goto LABEL_60;
      inited = v40;
    }
    memmove((void *)(inited + 32), (const void *)(inited + 40), 8 * v14 - 8);
    *(_QWORD *)(inited + 16) = v14 - 1;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v63 = v9;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    v19 = v9[2];
    v20 = (v18 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      goto LABEL_53;
    v22 = v17;
    v23 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, [Int]>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
      break;
LABEL_11:
    if ((v23 & 1) != 0)
    {
      v26 = v63[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v26 + 8 * v22) = v12;
    }
    else
    {
      v63[(v22 >> 6) + 8] |= 1 << v22;
      *(_QWORD *)(v63[6] + 8 * v22) = v15;
      *(_QWORD *)(v63[7] + 8 * v22) = v12;
      v27 = v63[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_54;
      v63[2] = v29;
    }
    swift_bridgeObjectRelease();
    if (v62)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v62; ++i)
      {
        v31 = *(_QWORD *)(v12 + 8 * i + 32);
        swift_beginAccess();
        v32 = *(_QWORD *)(v61 + 40);
        v33 = *(_QWORD *)(v61 + 48);
        __swift_mutable_project_boxed_opaque_existential_1(v10, v32);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 16))(v15, v31, 0, v32, v33);
        swift_endAccess();
        v35 = *(_QWORD *)(inited + 16);
        if (v35 >= *(_QWORD *)(inited + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          inited = v37;
        }
        *(_QWORD *)(inited + 16) = v35 + 1;
        *(_QWORD *)(inited + 8 * v35 + 32) = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v38;
        }
        v36 = *(_QWORD *)(v6 + 16);
        if (v36 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v39;
        }
        *(_QWORD *)(v6 + 16) = v36 + 1;
        *(_QWORD *)(v6 + 8 * v36 + 32) = v34;
      }
      swift_bridgeObjectRelease();
    }
    v13 = v60 + 1;
    v9 = v63;
    if (v60 + 1 == v59)
    {
      swift_bridgeObjectRelease();
      v11 = v58;
      goto LABEL_29;
    }
  }
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
  if ((v23 & 1) == (v25 & 1))
  {
    v22 = v24;
    goto LABEL_11;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_60:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.decodeNextTokens()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[24] = v0;
  v2 = type metadata accessor for IndexSet();
  v1[25] = v2;
  v1[26] = *(_QWORD *)(v2 - 8);
  v1[27] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v1 = v0[24];
  v0[28] = *(_QWORD *)(v1 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v2 = OUTLINED_FUNCTION_3_8();
  *(_OWORD *)(v2 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 56);
  v8 = v2;
  swift_bridgeObjectRetain_n();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v0[29] = v8;
  OUTLINED_FUNCTION_4_0();
  outlined init with copy of DeterministicLanguageModelProtocol(v1 + 16, (uint64_t)(v0 + 2));
  v3 = v0[5];
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 24) + *(_QWORD *)(v4 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  v0[30] = v5;
  *v5 = v0;
  v5[1] = SpeculativeStreamingDecoder.decodeNextTokens();
  return v7(v8, v1 + 128, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;

  v1 = *(_QWORD *)(v0 + 248);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 248) + 32;
    swift_bridgeObjectRetain();
    do
    {
      v5 = *(_QWORD *)(v0 + 216);
      v6 = *(_QWORD *)(v0 + 200);
      outlined init with copy of DeterministicLanguageModelProtocol(v4, v0 + 56);
      v7 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v7);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      v9 = IndexSet.isEmpty.getter();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v6);
      __swift_destroy_boxed_opaque_existential_1(v0 + 56);
      if ((v9 & 1) != 0)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    v11 = (uint64_t *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 232);
    OUTLINED_FUNCTION_116_0();
    v15 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRelease();
    v16 = v15 + 1;
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    v18 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs14PrefixSequenceVys04Zip2E0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_Sits5NeverOTg506_sSi24gh11Inference15jk21_pS2iIgyndd_Si_AaB_ptr6_Sits5L11OIegnrzr_TRSiAkL_pS2iIgyndd_Tf1cn_n(v17, v12, v15 + 1, (uint64_t (*)(_QWORD, char *))partial apply for closure #2 in SpeculativeStreamingDecoder.decodeNextTokens());
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_116_0();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v18);
    v20 = v19;
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs17DropFirstSequenceVys04Zip2F0VySaySiGSay24TokenGenerationInference15LogitCollection_pGGG_Si_AJts5NeverOTg506_sSi24hi11Inference15kl7_pSiSayq8GIgyndo_q7_AaB_ptq6_ACts5M11OIegnrzr_TRSiAkL_pSiAJIgyndo_Tf1cn_n(v13, v12, v16, (uint64_t (*)(_QWORD, char *))partial apply for closure #3 in SpeculativeStreamingDecoder.decodeNextTokens());
    v22 = v21;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_116_0();
    specialized Dictionary.init<A>(uniqueKeysWithValues:)(v22);
    v24 = SpeculativeStreamingDecoder.verifyPreviousDraftAndPrepareNext(nodeToSampledToken:streamNodeToNextTopKTokens:)(v20, v23);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_0();
    v25 = *(_QWORD *)(v10 + 168);
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
    }
    else
    {
      v27 = *v11;
      v28 = *(_QWORD *)(*v11 + 224);
      v29 = __OFADD__(v28, v26);
      v30 = v28 + v26;
      if (!v29)
      {
        v20 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v27 + 224) = v30;
        v31 = *(_QWORD *)(v27 + 232);
        v32 = v31 + v20;
        if (!__OFADD__(v31, v20))
        {
          v33 = *v11;
          *(_QWORD *)(v27 + 232) = v32;
          v34 = *(_QWORD *)(v33 + 256);
          if (!__OFADD__(v34, v20 - 1))
          {
            v35 = *v11;
            *(_QWORD *)(v33 + 256) = v34 + v20 - 1;
            v36 = v20 > 1;
            v37 = (_QWORD *)(v35 + 248);
            OUTLINED_FUNCTION_4_0();
            v38 = *(_QWORD *)(v35 + 248);
            v29 = __OFADD__(v38, v36);
            v39 = v38 + v36;
            if (!v29)
            {
              v40 = *v11;
              *v37 = v39;
              OUTLINED_FUNCTION_4_0();
              v41 = *(_QWORD *)(v40 + 240);
              v29 = __OFADD__(v41, 1);
              v42 = v41 + 1;
              if (!v29)
              {
                *(_QWORD *)(v40 + 240) = v42;
                if (one-time initialization token for speculativeDecode == -1)
                {
LABEL_12:
                  v43 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v43, (uint64_t)static Log.speculativeDecode);
                  v44 = Logger.logObject.getter();
                  v45 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v44, v45))
                  {
                    v46 = (uint8_t *)swift_slowAlloc();
                    *(_DWORD *)v46 = 134217984;
                    *(_QWORD *)(v0 + 184) = v20;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    _os_log_impl(&dword_248CAA000, v44, v45, "Accepted %ld token(s) in this step", v46, 0xCu);
                    MEMORY[0x2495AAF60](v46, -1, -1);
                  }

                  goto LABEL_18;
                }
LABEL_25:
                swift_once();
                goto LABEL_12;
              }
LABEL_24:
              __break(1u);
              goto LABEL_25;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
LABEL_17:
  swift_bridgeObjectRelease();
  v24 = 0;
LABEL_18:
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v24);
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 248) = a1;
  *(_QWORD *)(v3 + 256) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t closure #2 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3[14];
  v6 = a3[15];
  __swift_project_boxed_opaque_existential_1(a3 + 11, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a2, v5, v6);
  return a1;
}

uint64_t closure #3 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2[3];
  v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 40))(*(_QWORD *)(a3 + 184), v5, v6);
  return a1;
}

Swift::Void __swiftcall SpeculativeStreamingDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v2 = v1;
  v3 = v1[7];
  v10 = *(_OWORD *)prompt.queryTokens._rawValue;
  OUTLINED_FUNCTION_4_0();
  v4 = v2[5];
  v5 = v2[6];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 2), v4);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v5 + 40))(v3, &v10, v4, v5);
  swift_endAccess();
  v2[7] = v6;
  v7 = SpeculativeStreamingDecoder.streamNodes(forNode:)(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v8 = MEMORY[0x24BEE4AF8];
  v9 = Dictionary.init(dictionaryLiteral:)();
  v2[8] = v8;
  v2[9] = v7;
  v2[10] = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t SpeculativeStreamingDecoder.decodeNextChunk()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  return swift_task_switch();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(v1 + 88);
  OUTLINED_FUNCTION_4_0();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 216) + 16))
  {
    v3 = *(_QWORD *)(v1 + 88) + 216;
    OUTLINED_FUNCTION_4_0();
    specialized RangeReplaceableCollection<>.popLast()();
    OUTLINED_FUNCTION_6_15();
    result = 0;
    if ((v0 & 1) != 0)
      return OUTLINED_FUNCTION_7_5(result, *(uint64_t (**)(void))(v1 + 8));
    v5 = *(_QWORD *)(v1 + 88);
    v6 = *(_QWORD *)(v5 + 264);
    v7 = __OFADD__(v6, 1);
    v8 = v6 + 1;
    if (!v7)
    {
      *(_QWORD *)(v5 + 264) = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      result = OUTLINED_FUNCTION_3_8();
      *(_OWORD *)(result + 16) = xmmword_248D75A50;
      *(_QWORD *)(result + 32) = v3;
      return OUTLINED_FUNCTION_7_5(result, *(uint64_t (**)(void))(v1 + 8));
    }
    __break(1u);
  }
  else
  {
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 96) = v9;
    *v9 = v1;
    v9[1] = SpeculativeStreamingDecoder.decodeNextChunk();
    return SpeculativeStreamingDecoder.decodeNextTokens()();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
    v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(*(_QWORD *)(v0 + 88) + 216) = v1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  specialized MutableCollection<>.reverse()();
  swift_endAccess();
  v2 = *(_QWORD *)(v0 + 88) + 216;
  OUTLINED_FUNCTION_4_0();
  specialized RangeReplaceableCollection<>.popLast()();
  OUTLINED_FUNCTION_6_15();
  result = 0;
  if ((((_BYTE)v0 + 64) & 1) != 0)
    return OUTLINED_FUNCTION_7_5(result, *(uint64_t (**)(void))(v0 + 8));
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (!v6)
  {
    *(_QWORD *)(v4 + 264) = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    result = OUTLINED_FUNCTION_3_8();
    *(_OWORD *)(result + 16) = xmmword_248D75A50;
    *(_QWORD *)(result + 32) = v2;
    return OUTLINED_FUNCTION_7_5(result, *(uint64_t (**)(void))(v0 + 8));
  }
  __break(1u);
  return result;
}

uint64_t SpeculativeStreamingDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

void specialized RangeReplaceableCollection<>.popLast()()
{
  uint64_t v0;
  char v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    specialized Array._customRemoveLast()();
    if ((v1 & 1) != 0)
      specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v0 + 16) - 1);
  }
}

float SpeculativeStreamingDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  if (v1)
    return (float)((float)*(uint64_t *)(v0 + 232) * 100.0) / (float)v1;
  else
    return 0.0;
}

uint64_t SpeculativeStreamingDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  return 0x100000000;
}

uint64_t SpeculativeStreamingDecoder.speculationCount.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_0();
  return *(_QWORD *)(v0 + 240);
}

void SpeculativeStreamingDecoder.speculationCount.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v1 + 240) = a1;
  OUTLINED_FUNCTION_2();
}

uint64_t (*SpeculativeStreamingDecoder.speculationCount.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t SpeculativeStreamingDecoder.speculationSuccessCount.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_4_0();
  return *(_QWORD *)(v0 + 248);
}

void SpeculativeStreamingDecoder.speculationSuccessCount.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v1 + 248) = a1;
  OUTLINED_FUNCTION_2();
}

uint64_t (*SpeculativeStreamingDecoder.speculationSuccessCount.modify())()
{
  OUTLINED_FUNCTION_4_0();
  return SpeculativeStreamingDecoder.speculationSuccessCount.modify;
}

float SpeculativeStreamingDecoder.speculationSuccessRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4_0();
  v1 = *(_QWORD *)(v0 + 240);
  if (!v1)
    return 0.0;
  OUTLINED_FUNCTION_4_0();
  return (float)((float)*(uint64_t *)(v0 + 248) * 100.0) / (float)v1;
}

uint64_t SpeculativeStreamingDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

void SpeculativeStreamingDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1(v0 + 128, &demangling cache variable for type metadata for LogitPresampler?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_37();
}

uint64_t SpeculativeStreamingDecoder.__deallocating_deinit()
{
  SpeculativeStreamingDecoder.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance SpeculativeStreamingDecoder(uint64_t a1, uint64_t a2)
{
  SpeculativeStreamingDecoder.append(prompt:)(*(TokenGenerationInference::SamplingDecoderPrompt *)&a1);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance SpeculativeStreamingDecoder()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance BasicDecoder;
  return SpeculativeStreamingDecoder.decodeNextChunk()();
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  return SpeculativeStreamingDecoder.draftTokenAcceptanceRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  unint64_t v0;

  v0 = SpeculativeStreamingDecoder.tinyTokenAcceptanceRateInPercent.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance SpeculativeStreamingDecoder()
{
  return SpeculativeStreamingDecoder.speculationSuccessRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance SpeculativeStreamingDecoder()
{
  return SpeculativeStreamingDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter();
}

uint64_t partial apply for closure #2 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return closure #2 in SpeculativeStreamingDecoder.decodeNextTokens()(a1, a2, v2);
}

uint64_t partial apply for closure #3 in SpeculativeStreamingDecoder.decodeNextTokens()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #3 in SpeculativeStreamingDecoder.decodeNextTokens()(a1, a2, v2);
}

uint64_t type metadata accessor for SpeculativeStreamingDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpeculativeStreamingDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpeculativeStreamingDecoder.__allocating_init(languageModel:behavior:streamTokenIDs:sampler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t destroy for SpeculativeStreamingDecoder.DraftTree()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for SpeculativeStreamingDecoder.DraftTree(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_37();
}

_QWORD *assignWithCopy for SpeculativeStreamingDecoder.DraftTree(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SpeculativeStreamingDecoder.DraftTree(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeculativeStreamingDecoder.DraftTree(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeculativeStreamingDecoder.DraftTree(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SpeculativeStreamingDecoder.DraftTree()
{
  return &unk_2519E0A50;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t specialized DropFirstSequence.makeIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  _OWORD v14[3];

  v5 = result;
  if (a3 < 1)
  {
    v13 = 0;
    v7 = 0;
    v8 = 0;
LABEL_13:
    *(_QWORD *)a4 = v5;
    *(_QWORD *)(a4 + 8) = v8;
    *(_QWORD *)(a4 + 16) = a2;
    *(_QWORD *)(a4 + 24) = v7;
    *(_BYTE *)(a4 + 32) = v13;
  }
  else
  {
    v7 = a3;
    v8 = *(_QWORD *)(result + 16);
    v9 = a2 + 32;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      if (v8 == v10)
      {
        v10 = v8;
LABEL_12:
        memset(v14, 0, sizeof(v14));
        _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1((uint64_t)v14, &demangling cache variable for type metadata for (Int, LogitCollection)?);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v13 = 1;
        v7 = v10;
        goto LABEL_13;
      }
      if (v10 >= *(_QWORD *)(v5 + 16))
        break;
      v11 = v10 + 1;
      v12 = *(_QWORD *)(a2 + 16);
      if (v10 == v12)
      {
        v8 = v10 + 1;
        goto LABEL_12;
      }
      if (v10 >= v12)
        goto LABEL_15;
      *(_QWORD *)&v14[0] = *(_QWORD *)(v5 + 8 * v10 + 32);
      outlined init with copy of DeterministicLanguageModelProtocol(v9, (uint64_t)v14 + 8);
      result = _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1((uint64_t)v14, &demangling cache variable for type metadata for (Int, LogitCollection)?);
      v9 += 40;
      ++v10;
      if (v7 == v11)
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v13 = 0;
        v8 = v7;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t outlined release of IndexingIterator<[LogitCollection]>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return swift_endAccess();
}

uint64_t static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EventReporter();
  swift_allocObject();
  EventReporter.init()();
  v14 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  EventReporter.send(eventBuiltWithPresetsAnd:)();
  swift_release();
  v11 = type metadata accessor for GenerativeFunctionsInstrumentationEvent();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
  return outlined destroy of GenerativeFunctionsInstrumentationEvent?((uint64_t)v10);
}

uint64_t closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)&v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers();
  MEMORY[0x24BDAC7A8](v11);
  GenerativeFunctionsInstrumentationEvent.eventType.setter();
  v19 = a2;
  v20 = a3;
  static Buildable.with(_:)();
  GenerativeFunctionsInstrumentationEvent.identifiers.setter();
  type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition();
  v12 = swift_allocBox();
  v17 = a4;
  v18 = v21;
  static Buildable.with(_:)();
  *v10 = v12;
  v13 = *MEMORY[0x24BE5A750];
  v14 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v10, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v14);
  return GenerativeFunctionsInstrumentationEvent.metadata.setter();
}

uint64_t partial apply for closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined destroy of GenerativeFunctionsInstrumentationEvent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion();
  v11 = a2;
  v12 = a3;
  static Buildable.with(_:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  return GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)()
{
  swift_bridgeObjectRetain();
  GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter();
  return GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter();
}

uint64_t closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo();
  v11 = a2;
  v12 = a3;
  static Buildable.with(_:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  return GenerativeFunctionsInstrumentationMetadata.AssetTransition.fileResidentInfo.setter();
}

void closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  if ((a2 & 0x8000000000000000) != 0 || (MEMORY[0x2495A97FC](a2, 0), (a3 & 0x8000000000000000) != 0))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x2495A97F0](a3, 0);
    if (a3 < a2)
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Log.device);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = swift_slowAlloc();
        *(_DWORD *)v8 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_248CAA000, v6, v7, "Resident pages of model %ld reported as greater than total pages %ld. Will truncate resident ratio to 1.0", (uint8_t *)v8, 0x16u);
        MEMORY[0x2495AAF60](v8, -1, -1);
      }

    }
    if (a3)
    {
      GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentRatio.setter();
    }
    else
    {
      if (one-time initialization token for device != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.device);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_248CAA000, v10, v11, "Did not capture resident ratio due to total pages of model reported as 0.", v12, 2u);
        MEMORY[0x2495AAF60](v12, -1, -1);
      }

    }
  }
}

id TelemetryHelpers.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TelemetryHelpers.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TelemetryHelpers.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TelemetryHelpers()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #2 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)()
{
  return closure #1 in closure #1 in closure #1 in static TelemetryHelpers.emitFileResidentInfo(assetIdentifier:residentPages:totalPages:)();
}

void specialized Sequence.forEach(_:)(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(_QWORD *, _QWORD);
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  void (*v29)(_QWORD *);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[4];
  uint64_t v37;

  v29 = a1;
  v30 = a2;
  v3 = type metadata accessor for IndexSet.Index();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)&v26 - v7;
  v8 = type metadata accessor for IndexSet();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet>);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v10;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26(v12, v2, v8);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, v9, MEMORY[0x24BDCF458]);
  v27 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v16 = &v15[*(int *)(v13 + 36)];
  v35 = v4;
  v31 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v32 = v15;
  v17 = v33;
  v18 = v34;
  while (1)
  {
    v31(v17, v16, v3);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v35 + 8);
    v20(v18, v3);
    v20(v17, v3);
    if ((v19 & 1) != 0)
      break;
    v21 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v23 = *v22;
    v21(v36, 0);
    v24 = v27;
    v26(v27, (uint64_t)v15, v8);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v24, v8);
    v36[0] = v23;
    v25 = v37;
    v29(v36);
    if (v25)
      break;
    v37 = 0;
  }
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0((uint64_t)v15, &demangling cache variable for type metadata for IndexingIterator<IndexSet>);
}

uint64_t TGICAPIWrapper.init(_:)(const void *a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_48_6((void *)(v1 + 16), a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (logitCount: Int, callback: @convention(c) (_:_:_:_:_:), cbContext: OpaquePointer));
  *(_QWORD *)(v1 + 184) = Dictionary.init(dictionaryLiteral:)();
  return v1;
}

uint64_t TGICAPIWrapper.makeSession()()
{
  _BYTE v1[168];
  _BYTE v2[168];

  OUTLINED_FUNCTION_41_6(v2);
  OUTLINED_FUNCTION_41_6(v1);
  type metadata accessor for TokenGenerationSession();
  swift_allocObject();
  outlined retain of TokenGenerationConfiguration((uint64_t)v2);
  swift_retain();
  return TokenGenerationSession.init(_:externalLanguageMaker:)((uint64_t)v1, (uint64_t)partial apply for closure #1 in TGICAPIWrapper.makeSession());
}

_QWORD *closure #1 in TGICAPIWrapper.makeSession()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t *v17;

  swift_beginAccess();
  v8 = *(_QWORD *)(a3 + 184);
  swift_bridgeObjectRetain();
  v9 = specialized Dictionary.subscript.getter(a1, a2, v8);
  v11 = v10;
  v13 = v12;
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v11)
  {
    v14 = type metadata accessor for TGICAPILanguageModel();
    v15 = swift_allocObject();
    result = TGICAPILanguageModel.init(logitCount:callback:cbContext:)(v9, v11, v13);
    a4[3] = v14;
    a4[4] = (uint64_t)&protocol witness table for TGICAPILanguageModel;
    *a4 = v15;
  }
  else
  {
    lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError();
    swift_allocError();
    *v17 = a1;
    v17[1] = a2;
    swift_bridgeObjectRetain();
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t TGICAPIWrapper.deinit()
{
  uint64_t v0;
  _BYTE v2[168];

  OUTLINED_FUNCTION_48_6(v2, (const void *)(v0 + 16));
  outlined release of TokenGenerationConfiguration((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TGICAPIWrapper.__deallocating_deinit()
{
  TGICAPIWrapper.deinit();
  return swift_deallocClassInstance();
}

uint64_t TGITokenGeneratorCreate(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[22];
  uint64_t v9;

  v1 = type metadata accessor for String.Encoding();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_26_3();
  String.init(cString:)();
  type metadata accessor for JSONDecoder();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_49_6();
  static String.Encoding.utf8.getter();
  v3 = String.data(using:allowLossyConversion:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  result = OUTLINED_FUNCTION_19_11(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v5 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v3, v5);
    OUTLINED_FUNCTION_48_6(v8, &v9);
    type metadata accessor for TGICAPIWrapper();
    v7 = OUTLINED_FUNCTION_2_0();
    TGICAPIWrapper.init(_:)(v8);
    swift_release();
    return v7;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration, &type metadata for TokenGenerationConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration and conformance TokenGenerationConfiguration);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPIWrapper()
{
  return objc_opt_self();
}

_QWORD *TGICAPILanguageModel.init(logitCount:callback:cbContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v3[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TGICAPILanguageModel.NodeState>);
  v7 = OUTLINED_FUNCTION_2_0();
  *(_OWORD *)(v7 + 16) = xmmword_248D75A50;
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 32) = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = 0;
  v3[3] = v7;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  return v3;
}

Swift::Int __swiftcall TGICAPILanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int result;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = (uint64_t *)(v3 + 24);
  OUTLINED_FUNCTION_4_0();
  if (forPreviousNode < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(v3 + 24);
  v4 = *(_QWORD *)(v8 + 16);
  if (v4 <= forPreviousNode)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v13 = v19;
    goto LABEL_5;
  }
  v9 = v8 + 24 * forPreviousNode;
  v10 = *(_QWORD *)(v9 + 40);
  result = specialized Dictionary.subscript.getter(token, *(_QWORD *)(v9 + 32));
  if ((v12 & 1) == 0)
    return result;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_65_0();
  v13 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_12;
LABEL_5:
  v14 = *(_QWORD *)(v13 + 16);
  if (v14 >= *(_QWORD *)(v13 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v13 = v20;
  }
  *(_QWORD *)(v13 + 16) = v14 + 1;
  *(_QWORD *)(v13 + 8 * v14 + 32) = token;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50_2();
  v15 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_4_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v16 = *(_QWORD *)(*v7 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v17 = *v7;
  *(_QWORD *)(v17 + 16) = v16 + 1;
  v18 = (_QWORD *)(v17 + 24 * v16);
  v18[4] = v15;
  v18[5] = v13;
  v18[6] = 0;
  if (*(_QWORD *)(*v7 + 16) <= (unint64_t)forPreviousNode)
  {
    __break(1u);
  }
  else
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(v4, token);
    swift_endAccess();
    return v4;
  }
  return result;
}

uint64_t TGICAPILanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t TGICAPILanguageModel.singleNextTokenLogits(node:presampler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t (*v17)(void);

  v3 = v0[6];
  v4 = v0[7];
  OUTLINED_FUNCTION_4_0();
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v4 + 24);
  v6 = v0[6];
  if (*(_QWORD *)(v5 + 16) <= v6)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v10 = v16;
    goto LABEL_6;
  }
  v7 = v5 + 24 * v6;
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
  {
    v9 = v0[5];
    *(_QWORD *)(v9 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    *(_QWORD *)(v9 + 32) = &protocol witness table for <A> [A];
    v10 = v8;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_QWORD *)(v0[7] + 32);
  OUTLINED_FUNCTION_65_0();
  swift_bridgeObjectRetain();
  v10 = specialized Array.init(repeating:count:)(v12, 0.0);
  v1 = v11 + 32;
  v2 = *(_QWORD *)(v11 + 16);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_11;
LABEL_6:
  v13 = v0[5];
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v0[7] + 40))(*(_QWORD *)(v0[7] + 48), v1, v2, v10 + 32, *(_QWORD *)(v10 + 16));
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_50_2();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  *(_QWORD *)(v13 + 32) = &protocol witness table for <A> [A];
  if ((v14 & 1) == 0)
  {
    OUTLINED_FUNCTION_7_0();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_8:
  *(_QWORD *)v0[5] = v10;
  v17 = (uint64_t (*)(void))v0[1];
  OUTLINED_FUNCTION_21_1();
  return v17();
}

uint64_t TGICAPILanguageModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance TGICAPILanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = swift_task_alloc();
  v6 = (_QWORD *)OUTLINED_FUNCTION_43_7(v5);
  *v6 = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance DataStream<A>.AsyncIterator;
  return TGICAPILanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2);
}

uint64_t protocol witness for DeterministicLanguageModelProtocol.startNode.getter in conformance TGICAPILanguageModel()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

void protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance TGICAPILanguageModel(Swift::Int a1, Swift::Int a2)
{
  TGICAPILanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, 0);
  OUTLINED_FUNCTION_49();
}

uint64_t TGITokenGeneratorRegisterExternalLanguageModel(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_retain();
  v8 = String.init(cString:)();
  v10 = v9;
  OUTLINED_FUNCTION_4_0();
  specialized Dictionary._Variant.setValue(_:forKey:)(a3, a4, a5, v8, v10);
  swift_endAccess();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = String.init(cString:)();
  v12 = v11;
  v13 = type metadata accessor for TaskPriority();
  swift_retain();
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v13);
  v14 = (_QWORD *)OUTLINED_FUNCTION_2_0();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = v10;
  v14[6] = v12;
  v14[7] = a3;
  v14[8] = a4;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in TGITokenGeneratorGenerate(_:_:_:_:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  *(_QWORD *)(v0 + 80) = TGICAPIWrapper.makeSession()();
  TokenGenerationSession.addPrompt(_:)(*(Swift::String *)(v0 + 48));
  if (v1)
  {
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_30();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4AF8];
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
    return TokenGenerationSession.generateTokenChunk()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  char v13;
  _QWORD *v14;
  __int128 v16;

  if (!*(_QWORD *)(v0 + 96))
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(void (**)(uint64_t, _QWORD))(v0 + 64);
    swift_bridgeObjectRelease();
    v6(v5, 0);
LABEL_16:
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_30();
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  specialized Array.append<A>(contentsOf:)();
  v1 = OUTLINED_FUNCTION_65_0();
  v2 = TokenGenerationSession.detokenize(tokens:)((Swift::OpaquePointer)v1);
  if (!v3)
  {
    v7 = (char *)(v0 + 112);
    v16 = *(_OWORD *)(v0 + 64);
    OUTLINED_FUNCTION_50_2();
    v8 = OUTLINED_FUNCTION_93_2();
    *(_OWORD *)(v8 + 16) = v16;
    if (((uint64_t)v2._object & 0x1000000000000000) != 0
      || !((uint64_t)v2._object & 0x2000000000000000 | v2._countAndFlagsBits & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)();
    }
    else
    {
      v9 = OUTLINED_FUNCTION_93_2();
      *(_QWORD *)(v9 + 16) = partial apply for closure #1 in closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
      *(_QWORD *)(v9 + 24) = v8;
      if (((uint64_t)v2._object & 0x2000000000000000) != 0)
      {
        v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 64);
        v11 = *(_QWORD *)(v0 + 72);
        *(_QWORD *)(v0 + 16) = v2._countAndFlagsBits;
        *(_QWORD *)(v0 + 24) = (uint64_t)v2._object & 0xFFFFFFFFFFFFFFLL;
        *(_BYTE *)(v0 + 112) = v12(v11, v0 + 16);
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_12_3();
        goto LABEL_13;
      }
      if ((v2._countAndFlagsBits & 0x1000000000000000) != 0)
        v10 = ((uint64_t)v2._object & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v10 = _StringObject.sharedUTF8.getter();
      *v7 = (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 64))(*(_QWORD *)(v0 + 72), v10);
      OUTLINED_FUNCTION_12_3();
    }
    OUTLINED_FUNCTION_7_0();
LABEL_13:
    v13 = *v7;
    OUTLINED_FUNCTION_10_6();
    if ((v13 & 1) != 0)
    {
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v14;
      *v14 = v0;
      v14[1] = closure #1 in TGITokenGeneratorGenerate(_:_:_:_:);
      return TokenGenerationSession.generateTokenChunk()();
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_30();
  v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_116();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_9_1();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v5) == 1)
  {
    _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t TGICAPILanguageModelWrapper.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v8[2];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, (uint64_t *)v8);
  outlined consume of LanguageModelReference(v3, v4, v5, v6);
  if (v2)
    swift_deallocPartialClassInstance();
  else
    outlined init with take of LogitCollection(v8, v1 + 16);
  return v1;
}

uint64_t TGICAPILanguageModelWrapper.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

void TGILanguageModelCreate(_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  OUTLINED_FUNCTION_31_8();
  OUTLINED_FUNCTION_44_4();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_21_7();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_30_9();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_19_11(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_35_7();
    if (v0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v5 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v5 + 16) = xmmword_248D75A50;
      *(_QWORD *)&v7 = 0;
      *((_QWORD *)&v7 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      OUTLINED_FUNCTION_46_7(31, 0x8000000248D80E70);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v6 = v7;
      *(_QWORD *)(v5 + 56) = MEMORY[0x24BEE0D00];
      *(_OWORD *)(v5 + 32) = v6;
      OUTLINED_FUNCTION_0_15();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_30();
    }
    else
    {
      type metadata accessor for TGICAPILanguageModelWrapper();
      OUTLINED_FUNCTION_2_0();
      TGICAPILanguageModelWrapper.init(_:)((uint64_t)&v7);
      OUTLINED_FUNCTION_30();
    }
    OUTLINED_FUNCTION_16();
  }
}

uint64_t TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TGILanguageModelComputeLogits(_:_:_:_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_2519E0AB8, (uint64_t)&async function pointer to partial apply for closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:));
}

uint64_t closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v8 = type metadata accessor for IndexSet();
  v7[22] = v8;
  v7[23] = *(_QWORD *)(v8 - 8);
  v7[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)()
{
  uint64_t v0;
  Swift::OpaquePointer v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1._rawValue = *(void **)(v0 + 152);
  outlined init with copy of DeterministicLanguageModelProtocol(*(_QWORD *)(v0 + 144) + 16, v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_mutable_project_boxed_opaque_existential_1(v0 + 16, *(_QWORD *)(v0 + 40));
  v5 = DeterministicLanguageModelProtocol.node(forPreviousNode:tokens:isPrompt:)(v4, v1, 1);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v6);
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v8;
  *v8 = v0;
  v8[1] = closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v0 + 56, v5, v0 + 96, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 96;
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_0(v2, &demangling cache variable for type metadata for LogitPresampler?);
  return OUTLINED_FUNCTION_9_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  __int128 v25;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v25 = *(_OWORD *)(v0 + 160);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v1);
  v3 = OUTLINED_FUNCTION_93_2();
  *(_OWORD *)(v3 + 16) = v25;
  v4 = OUTLINED_FUNCTION_93_2();
  *(_QWORD *)(v4 + 16) = partial apply for invokeCallback #1 (_:) in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  *(_QWORD *)(v4 + 24) = v3;
  (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 24))(partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<Float>) -> (@error @owned Error), v4, MEMORY[0x24BEE4AE0] + 8, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
  {
    swift_release();
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  specialized Sequence<>.max()();
  v11 = v10;
  LOBYTE(v8) = v12;
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v13(v5, v7);
  if ((v8 & 1) != 0)
    v14 = 0;
  else
    v14 = v11;
  result = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    v16 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 168);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160);
    *(_QWORD *)(v0 + 136) = specialized Array.init(repeating:count:)(result, 0.0);
    v18 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v18);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    v20 = OUTLINED_FUNCTION_93_2();
    *(_QWORD *)(v20 + 16) = v0 + 136;
    *(_QWORD *)(v20 + 24) = v0 + 56;
    specialized Sequence.forEach(_:)(partial apply for closure #1 in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:), v20);
    swift_task_dealloc();
    v13(v16, v17);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v21 + 16);
    OUTLINED_FUNCTION_21_1();
    v24(v23, v21 + 32, v22);
    swift_release();
    swift_bridgeObjectRelease_n();
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    OUTLINED_FUNCTION_12_3();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  OUTLINED_FUNCTION_14_3();
  return OUTLINED_FUNCTION_48_2(*(uint64_t (**)(void))(v0 + 8));
}

void closure #1 in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(unint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  v4 = *a1;
  v5 = a3[3];
  v6 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v5);
  v7 = (*(float (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v5, v6);
  v8 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v8 = v10;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < *(_QWORD *)(v8 + 16))
  {
    *(float *)(v8 + 4 * v4 + 32) = v7;
    *a2 = v8;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t TGICAPIGuidedGenerationConstraintsWrapper.init(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = *v1;
  v30 = type metadata accessor for GuidedGenerationConstraints();
  v4 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Grammar();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v22 - v12;
  v31 = *a1;
  v33 = a1[1];
  v14 = a1[4];
  swift_bridgeObjectRetain();
  Grammar.init(backusNaurForm:prependSpaceToRootRule:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_58_0();
    swift_bridgeObjectRelease();
    v15 = v34;
    swift_deallocPartialClassInstance();
  }
  else
  {
    v26 = v13;
    v27 = v14;
    v23 = v11;
    v24 = v6;
    v28 = v8;
    v29 = v7;
    v25 = v4;
    type metadata accessor for TokenizerRunner();
    swift_allocObject();
    swift_bridgeObjectRetain();
    TokenizerRunner.init(tokenizerPath:)();
    v17 = v28;
    v18 = v29;
    v19 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v32 = 0;
    v20 = v26;
    v19(v23, v26, v29);
    swift_bridgeObjectRetain();
    v21 = v24;
    GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_58_0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v18);
    v15 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v34 + OBJC_IVAR____TtC24TokenGenerationInference41TGICAPIGuidedGenerationConstraintsWrapper_constraints, v21, v30);
  }
  return v15;
}

uint64_t TGICAPIGuidedGenerationConstraintsWrapper.__deallocating_deinit()
{
  uint64_t v0;

  v0 = type metadata accessor for GuidedGenerationConstraints();
  OUTLINED_FUNCTION_3_4(v0);
  return swift_deallocClassInstance();
}

void TGIGuidedGenerationConstraintsCreate(_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  OUTLINED_FUNCTION_31_8();
  OUTLINED_FUNCTION_44_4();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_21_7();
  OUTLINED_FUNCTION_229_0();
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_30_9();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_19_11(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration();
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_35_7();
    if (v0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v5 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v5 + 16) = xmmword_248D75A50;
      *(_QWORD *)&v7 = 0;
      *((_QWORD *)&v7 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      OUTLINED_FUNCTION_46_7(58, 0x8000000248D80E90);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v6 = v7;
      *(_QWORD *)(v5 + 56) = MEMORY[0x24BEE0D00];
      *(_OWORD *)(v5 + 32) = v6;
      OUTLINED_FUNCTION_0_15();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_102_0();
      OUTLINED_FUNCTION_30();
    }
    else
    {
      type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper();
      OUTLINED_FUNCTION_229_0();
      TGICAPIGuidedGenerationConstraintsWrapper.init(_:)((uint64_t *)&v7);
      OUTLINED_FUNCTION_30();
    }
    OUTLINED_FUNCTION_16();
  }
}

uint64_t TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TGILanguageModelComputeLogits(_:_:_:_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_2519E0AE0, (uint64_t)&async function pointer to partial apply for closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:));
}

uint64_t TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_26_3();
  specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    v25 = a4;
    v26 = a7;
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v18 = 0;
    v19 = v27;
    v20 = *(_QWORD *)(v27 + 16);
    do
    {
      v21 = *(int *)(v16 + 4 * v18 + 32);
      if (v20 >= *(_QWORD *)(v27 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v18;
      *(_QWORD *)(v27 + 16) = v20 + 1;
      *(_QWORD *)(v27 + 8 * v20++ + 32) = v21;
    }
    while (v17 != v18);
    OUTLINED_FUNCTION_11_3();
    a7 = v26;
    a4 = v25;
  }
  else
  {
    OUTLINED_FUNCTION_11_3();
    v19 = MEMORY[0x24BEE4AF8];
  }
  v22 = type metadata accessor for TaskPriority();
  swift_retain();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v22);
  v23 = (_QWORD *)OUTLINED_FUNCTION_2_0();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = a1;
  v23[5] = v19;
  v23[6] = a4;
  v23[7] = a5;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v7, a7, (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = type metadata accessor for IndexSet();
  v7[6] = v8;
  v7[7] = *(_QWORD *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = swift_task_alloc();
  v9 = type metadata accessor for LogitMaskResponse();
  v7[10] = v9;
  v7[11] = *(_QWORD *)(v9 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v1;
  *v1 = v0;
  v1[1] = closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:);
  return GuidedGenerationConstraints.generateNextLogitMask(from:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_10_6();
  return OUTLINED_FUNCTION_48_2(*(uint64_t (**)(void))(v0 + 8));
}

void closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v4, *(_QWORD *)(v0 + 104), v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5);
  if (v7 != *MEMORY[0x24BEB8B28])
  {
    if (v7 != *MEMORY[0x24BEB8B30])
    {
      _assertionFailure(_:_:file:line:flags:)();
      return;
    }
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD **)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 48);
    OUTLINED_FUNCTION_42_7(*(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v14, v13, v17);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF458]);
    v18 = v15;
    v19 = dispatch thunk of Sequence._copyToContiguousArray()();
    if (*(_QWORD *)(v19 + 16))
    {
      OUTLINED_FUNCTION_9_11();
      OUTLINED_FUNCTION_38_6();
      while (1)
      {
        v20 = *(_QWORD *)(v19 + 8 * v16 + 32);
        if (v20 < v2)
          goto LABEL_29;
        if (v20 > v3)
          goto LABEL_30;
        OUTLINED_FUNCTION_34_4();
        if (v11)
        {
          OUTLINED_FUNCTION_23_10();
          v18 = v23;
        }
        OUTLINED_FUNCTION_20_8();
        if (v12)
        {
          OUTLINED_FUNCTION_30();
          goto LABEL_25;
        }
      }
    }
    OUTLINED_FUNCTION_30();
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_25:
    v21 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 40), 0, v18 + 4, v18[2]);
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_19_11(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
LABEL_26:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_3();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_10_6();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v8 = *(_QWORD **)(v0 + 96);
  OUTLINED_FUNCTION_42_7(*(_QWORD *)(v0 + 88));
  v9 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
  {
    OUTLINED_FUNCTION_7_0();
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 40), 1, v8 + 4, v8[2]);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_9_11();
  OUTLINED_FUNCTION_38_6();
  while (1)
  {
    v10 = *(_QWORD *)(v9 + 8 * v1 + 32);
    if (v10 < v2)
      break;
    if (v10 > v3)
      goto LABEL_28;
    OUTLINED_FUNCTION_34_4();
    if (v11)
    {
      OUTLINED_FUNCTION_23_10();
      v8 = v23;
    }
    OUTLINED_FUNCTION_20_8();
    if (v12)
    {
      OUTLINED_FUNCTION_7_0();
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_248D529FC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = swift_task_alloc();
  v12 = (_QWORD *)OUTLINED_FUNCTION_43_7(v11);
  *v12 = v2;
  v12[1] = partial apply for closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:);
  return closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference;
  if (!lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference, &type metadata for LanguageModelReference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference;
  if (!lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference, &type metadata for LanguageModelReference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference and conformance LanguageModelReference);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPILanguageModelWrapper()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_29_5();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_43_7(v0);
  v2 = OUTLINED_FUNCTION_5_12(v1);
  return closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(v2, v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for GuidedGenerationConfiguration, &type metadata for GuidedGenerationConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration and conformance GuidedGenerationConfiguration);
  }
  return result;
}

uint64_t type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TGICAPIGuidedGenerationConstraintsWrapper;
  if (!type metadata singleton initialization cache for TGICAPIGuidedGenerationConstraintsWrapper)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t objectdestroy_3Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_29_5();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_43_7(v0);
  v2 = OUTLINED_FUNCTION_5_12(v1);
  return closure #1 in TGIGuidedGenerationConstraintsNextMask(_:_:_:_:_:)(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for TGICAPILanguageModel()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for TGICAPIGuidedGenerationConstraintsWrapper()
{
  return type metadata accessor for TGICAPIGuidedGenerationConstraintsWrapper();
}

uint64_t type metadata completion function for TGICAPIGuidedGenerationConstraintsWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GuidedGenerationConstraints();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TGICAPILanguageModel.NodeState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_21_1();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TGICAPILanguageModel.NodeState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TGICAPILanguageModel.NodeState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TGICAPILanguageModel.NodeState()
{
  return &type metadata for TGICAPILanguageModel.NodeState;
}

uint64_t outlined release of TokenGenerationConfiguration(uint64_t a1)
{
  outlined consume of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of LanguageModelReference(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 != 2 && a4 != 1)
  {
    if (a4)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for invokeCallback #1 (_:) in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<Float>) -> (@error @owned Error)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(unint64_t *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in TGILanguageModelComputeLogits(_:_:_:_:_:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in TGITokenGeneratorGenerate(_:_:_:_:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 16))(*(_QWORD *)(v2 + 24), a1);
  *a2 = result;
  return result;
}

_QWORD *partial apply for closure #1 in TGICAPIWrapper.makeSession()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in TGICAPIWrapper.makeSession()(a1, a2, v3, a3);
}

uint64_t outlined retain of TokenGenerationConfiguration(uint64_t a1)
{
  outlined consume of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32));
  swift_bridgeObjectRetain();
  return a1;
}

void outlined consume of TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __asm { BR              X10 }
}

uint64_t sub_248D53050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5;

  a5();
  v5 = OUTLINED_FUNCTION_36_5();
  return ((uint64_t (*)(uint64_t))a5)(v5);
}

uint64_t outlined copy of LanguageModelReference(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 != 2 && a4 != 1)
  {
    if (a4)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.TokenGenerationConfigurationError, &type metadata for TokenGenerationConfiguration.TokenGenerationConfigurationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_5_12(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return String.init(cString:)();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

void OUTLINED_FUNCTION_9_11()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_11_7()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t OUTLINED_FUNCTION_19_11@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_20_8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  *(_DWORD *)(v0 + 4 * v3 + 32) = v2;
}

uint64_t OUTLINED_FUNCTION_21_7()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t OUTLINED_FUNCTION_22_11()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_23_10()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  return static String.Encoding.utf8.getter();
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  return type metadata accessor for String.Encoding();
}

uint64_t OUTLINED_FUNCTION_35_7()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_5()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_41_6(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xA8uLL);
}

uint64_t OUTLINED_FUNCTION_42_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t OUTLINED_FUNCTION_43_7(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_46_7(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void *OUTLINED_FUNCTION_48_6(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij21C08makeTinyA4Beam33_8mnopqrstu48LL10tinyLogits0T4Node05draftV006targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S3itFAKSiXEfU_AIS3iTf1cn_n(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v8 = v27;
    v9 = (uint64_t *)(a1 + 32);
    do
    {
      v10 = *v9;
      v26 = v9 + 1;
      swift_beginAccess();
      v11 = a2[17];
      v12 = a2[18];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 14), v11);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 16))(a3, v10, 0, v11, v12);
      swift_endAccess();
      swift_beginAccess();
      v13 = a2[11];
      v14 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(a4, v10, 0, v13, v14);
      swift_endAccess();
      swift_beginAccess();
      v16 = a2[5];
      v17 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v16);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 16))(a5, v10, 0, v16, v17);
      swift_endAccess();
      v19 = *(_QWORD *)(v27 + 16);
      if (v19 >= *(_QWORD *)(v27 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v27 + 16) = v19 + 1;
      v20 = (_QWORD *)(v27 + 32 * v19);
      v20[4] = v25;
      v20[5] = v15;
      v20[6] = v18;
      v20[7] = v10;
      --v6;
      v9 = v26;
    }
    while (v6);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v8;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu40LL11draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_n(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v26 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v7 = v26;
    v8 = (uint64_t *)(a1 + 32);
    do
    {
      v9 = *v8;
      v25 = v8 + 1;
      swift_beginAccess();
      v10 = a2[17];
      v11 = a2[18];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 14), v10);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 16))(a3, v9, 0, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      v12 = a2[11];
      v13 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v12);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 16))(a4, v9, 0, v12, v13);
      swift_endAccess();
      v15 = a2[7];
      swift_beginAccess();
      v17 = a2[5];
      v16 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v17);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 16))(v15, v9, 0, v17, v16);
      swift_endAccess();
      v19 = *(_QWORD *)(v26 + 16);
      if (v19 >= *(_QWORD *)(v26 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v26 + 16) = v19 + 1;
      v20 = (_QWORD *)(v26 + 32 * v19);
      v20[4] = v24;
      v20[5] = v14;
      v20[6] = v18;
      v20[7] = v9;
      --v5;
      v8 = v25;
    }
    while (v5);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t ThreeStageSpeculativeDecoder.__allocating_init(tinyModel:draftModel:languageModel:behavior:sampler:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;

  v10 = OUTLINED_FUNCTION_2_0();
  ThreeStageSpeculativeDecoder.init(tinyModel:draftModel:languageModel:behavior:sampler:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t ThreeStageSpeculativeDecoder.init(tinyModel:draftModel:languageModel:behavior:sampler:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  int v16;
  char v17;
  char v18;
  char v19;
  int v20;
  char v21;
  __int128 v22[2];

  v10 = *a4;
  v11 = a4[2];
  v20 = *((_DWORD *)a4 + 6);
  v21 = *((_BYTE *)a4 + 8);
  v18 = *((_BYTE *)a4 + 29);
  v19 = *((_BYTE *)a4 + 28);
  v16 = *((_DWORD *)a4 + 8);
  v17 = *((_BYTE *)a4 + 30);
  v15 = *((_BYTE *)a4 + 36);
  *(_QWORD *)(v5 + 328) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v5 + 336) = 0;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a1, v5 + 16);
  *(_QWORD *)(v5 + 56) = OUTLINED_FUNCTION_34_5(a1);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, v5 + 64);
  *(_QWORD *)(v5 + 104) = OUTLINED_FUNCTION_34_5(a2);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a3, v5 + 112);
  *(_QWORD *)(v5 + 152) = OUTLINED_FUNCTION_34_5(a3);
  *(_QWORD *)(v5 + 160) = v10;
  *(_BYTE *)(v5 + 168) = v21;
  *(_QWORD *)(v5 + 176) = v11;
  *(_DWORD *)(v5 + 184) = v20;
  *(_BYTE *)(v5 + 188) = v19;
  *(_BYTE *)(v5 + 189) = v18;
  *(_BYTE *)(v5 + 190) = v17;
  *(_DWORD *)(v5 + 192) = v16;
  *(_BYTE *)(v5 + 196) = v15;
  *(_QWORD *)(v5 + 320) = v10;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a5, v5 + 200);
  v12 = a5[3];
  v13 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v12);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v13 + 32))(v22, v12, v13);
  outlined init with take of LogitCollection(v22, v5 + 240);
  type metadata accessor for TopK();
  static TopK.makeTopKPresampler(k:)(v11, v5 + 280);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  OUTLINED_FUNCTION_94_1();
  return v5;
}

void ThreeStageSpeculativeDecoder.BufferedToken.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 32) & 1);
}

uint64_t static ThreeStageSpeculativeDecoder.BufferedToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) ? (v2 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)) : (v2 = 0),
        v2 ? (v3 = *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)) : (v3 = 0),
        v3))
  {
    v4 = ((*(_BYTE *)(a1 + 32) & 1) == 0) ^ *(_BYTE *)(a2 + 32);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

Swift::Int ThreeStageSpeculativeDecoder.BufferedToken.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void ThreeStageSpeculativeDecoder.TokenWithNodes.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4, Swift::UInt a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(a5);
}

BOOL static ThreeStageSpeculativeDecoder.TokenWithNodes.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8;
}

Swift::Int ThreeStageSpeculativeDecoder.TokenWithNodes.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  return ThreeStageSpeculativeDecoder.BufferedToken.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  ThreeStageSpeculativeDecoder.BufferedToken.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt8 v5;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ThreeStageSpeculativeDecoder.BufferedToken(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return static ThreeStageSpeculativeDecoder.BufferedToken.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt *v0;

  return ThreeStageSpeculativeDecoder.TokenWithNodes.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void protocol witness for Hashable.hash(into:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes(int a1)
{
  Swift::UInt *v1;

  ThreeStageSpeculativeDecoder.TokenWithNodes.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ThreeStageSpeculativeDecoder.TokenWithNodes(uint64_t *a1, uint64_t *a2)
{
  return static ThreeStageSpeculativeDecoder.TokenWithNodes.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t ThreeStageSpeculativeDecoder.makeTinyTokenBeam(tinyLogits:tinyNode:draftNode:targetNode:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v10 + 40))(v4[22], v9, v10);
  swift_retain();
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij21C08makeTinyA4Beam33_8mnopqrstu4810tinyLogits0T4Node05draftV006targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S3itFAKSiXEfU_AIS3iTf1cn_n(v11, v5, a4, a3, a2);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v8 + 40))(v3[22], v7, v8);
  swift_retain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference28ThreeStageSpeculativeDecoderC0D9WithNodes33_8DEBEB1758FC01C1E29D5B2B4E73D192LLVs5NeverOTg504_s24de11Inference28ghij22C09makeDraftA4Beam33_8mnopqrstu4011draftLogits0T4Node06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_n(v9, v4, a3, a2);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ThreeStageSpeculativeDecoder.generateTinyModelTree()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 768) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v1 = v0[96];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  v3 = OUTLINED_FUNCTION_139_1(inited, *(_QWORD *)(v1 + 104));
  v0[97] = v3;
  v0[94] = v3;
  OUTLINED_FUNCTION_85_2();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_98_3(v1 + 16);
  __swift_project_boxed_opaque_existential_1(v0 + 25, v0[28]);
  v4 = OUTLINED_FUNCTION_2_0();
  v0[98] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v1 + 56);
  OUTLINED_FUNCTION_39_3(v1 + 280);
  v5 = (_QWORD *)OUTLINED_FUNCTION_58_1();
  v0[99] = v5;
  *v5 = v0;
  v5[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
  v6 = OUTLINED_FUNCTION_69_6();
  return OUTLINED_FUNCTION_41_7(v6, v7, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_65_1();
  *(_QWORD *)(v1 + 888) = v2;
  *(_QWORD *)(v1 + 896) = v0;
  v3 = OUTLINED_FUNCTION_84();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_2();
    v4 = OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_72_4(v4, &demangling cache variable for type metadata for LogitPresampler?);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_72_4(v3, &demangling cache variable for type metadata for LogitPresampler?);
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_17_8();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 360);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_114_1();
  return OUTLINED_FUNCTION_27_6(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ThreeStageSpeculativeDecoder.generateTinyModelTree()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_107_4();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 800) = v1;
  v5 = swift_task_dealloc();
  if (v1)
  {
    v6 = OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_75_4(v6, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v2 + 808) = a1;
    OUTLINED_FUNCTION_75_4(v5, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_20_2();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_17_8();
}

void ThreeStageSpeculativeDecoder.generateTinyModelTree()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  OUTLINED_FUNCTION_147_2(v0 + 280);
  OUTLINED_FUNCTION_7_0();
  if (!*(_QWORD *)(v0 + 304))
LABEL_50:
    __break(1u);
  v1 = (uint64_t *)(v0 + 728);
  v2 = *(uint64_t **)(v0 + 768);
  outlined init with take of LogitCollection((__int128 *)(v0 + 280), v0 + 360);
  OUTLINED_FUNCTION_94_1();
  v3 = ThreeStageSpeculativeDecoder.makeTinyTokenBeam(tinyLogits:tinyNode:draftNode:targetNode:)((_QWORD *)(v0 + 360), v2[7], v2[13], v2[19]);
  *(_QWORD *)(v0 + 728) = v3;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 360);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v72 = v0 + 160;
  v73 = (uint64_t *)(v0 + 768);
  v4 = OUTLINED_FUNCTION_15_4();
  v5 = __swift_project_value_buffer(v4, (uint64_t)static Log.device);
  *(_QWORD *)(v0 + 816) = v5;
  v6 = v5;
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_111();
  if (OUTLINED_FUNCTION_264(v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_121();
    *(_DWORD *)v8 = 134217984;
    OUTLINED_FUNCTION_4_0();
    *(_QWORD *)(v0 + 760) = *(_QWORD *)(*v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v6, (os_log_type_t)(v0 - 56), "Tiny tree layer 0 speculated %ld tokens", v8);
    OUTLINED_FUNCTION_0_1();
  }

  OUTLINED_FUNCTION_4_0();
  v9 = *v1;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v76 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_56_3();
    v11 = v76;
    v12 = *(_QWORD *)(v76 + 16);
    v13 = 40;
    do
    {
      v14 = *(_QWORD *)(v9 + v13);
      v75 = v11;
      v15 = *(_QWORD *)(v11 + 24);
      if (v12 >= v15 >> 1)
      {
        OUTLINED_FUNCTION_44_2(v15);
        OUTLINED_FUNCTION_10_14();
      }
      *(_QWORD *)(v11 + 16) = v12 + 1;
      *(_QWORD *)(v11 + 8 * v12 + 32) = v14;
      v13 += 32;
      ++v12;
      --v10;
    }
    while (v10);
    OUTLINED_FUNCTION_63_0();
  }
  OUTLINED_FUNCTION_156_1(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 824) = inited;
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  v17 = *(_QWORD *)(v9 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v72 = v0 + 752;
    v75 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_159_1();
    OUTLINED_FUNCTION_50_8();
    v19 = 56;
    do
    {
      OUTLINED_FUNCTION_12_10();
      OUTLINED_FUNCTION_7_17();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      OUTLINED_FUNCTION_239_0();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v19 += 32;
      --v17;
    }
    while (v17);
    v18 = v75;
    OUTLINED_FUNCTION_63_0();
  }
  v20 = *v73;
  *(_QWORD *)(inited + 32) = v18;
  v21 = *(_QWORD *)(v9 + 16);
  v22 = *(_QWORD *)(v20 + 352);
  v23 = __OFADD__(v22, v21);
  v24 = v22 + v21;
  if (v23)
  {
    __break(1u);
    goto LABEL_49;
  }
  v25 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v20 + 352) = v24;
  v26 = *(_QWORD *)(v25 + 320);
  *(_QWORD *)(v0 + 832) = v26;
  if (v26 < 1)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v26 != 1)
  {
    *(_QWORD *)(v0 + 848) = inited;
    *(_QWORD *)(v0 + 840) = 1;
    v37 = *(_QWORD *)(v0 + 728);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = MEMORY[0x24BEE4AF8];
    if (v38)
    {
      v74 = (uint64_t *)(v0 + 680);
      v40 = (uint64_t *)(v0 + 704);
      v71 = v0;
      v41 = (uint64_t *)(v0 + 720);
      *(_QWORD *)(v0 + 720) = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_18_3();
      OUTLINED_FUNCTION_56_3();
      v42 = *(_QWORD *)(v0 + 720);
      v43 = *(_QWORD *)(v42 + 16);
      v44 = 48;
      do
      {
        v45 = *(_QWORD *)(v37 + v44);
        *v41 = v42;
        if (v43 >= *(_QWORD *)(v42 + 24) >> 1)
        {
          OUTLINED_FUNCTION_10_14();
          v42 = *v41;
        }
        *(_QWORD *)(v42 + 16) = v43 + 1;
        *(_QWORD *)(v42 + 8 * v43 + 32) = v45;
        v44 += 32;
        ++v43;
        --v38;
      }
      while (v38);
      OUTLINED_FUNCTION_20_2();
      v46 = *(_QWORD *)(v37 + 16);
      v39 = MEMORY[0x24BEE4AF8];
      if (v46)
      {
        v47 = (uint64_t *)(v0 + 704);
        *v40 = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_18_3();
        OUTLINED_FUNCTION_56_3();
        v39 = *v40;
        v48 = *(_QWORD *)(*v40 + 16);
        v49 = 40;
        do
        {
          v50 = *(_QWORD *)(v37 + v49);
          *v47 = v39;
          if (v48 >= *(_QWORD *)(v39 + 24) >> 1)
          {
            OUTLINED_FUNCTION_10_14();
            v39 = *v47;
          }
          *(_QWORD *)(v39 + 16) = v48 + 1;
          *(_QWORD *)(v39 + 8 * v48 + 32) = v50;
          v49 += 32;
          ++v48;
          --v46;
        }
        while (v46);
        OUTLINED_FUNCTION_20_2();
        v51 = *(_QWORD *)(v37 + 16);
        v52 = MEMORY[0x24BEE4AF8];
        if (v51)
        {
          *v74 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_18_3();
          OUTLINED_FUNCTION_56_3();
          v52 = *v74;
          v53 = *(_QWORD *)(*v74 + 16);
          v54 = 32;
          do
          {
            v55 = *(_QWORD *)(v37 + v54);
            OUTLINED_FUNCTION_136_2();
            if (v53 >= v56 >> 1)
            {
              OUTLINED_FUNCTION_10_14();
              v52 = *v74;
            }
            *(_QWORD *)(v52 + 16) = v53 + 1;
            *(_QWORD *)(v52 + 8 * v53 + 32) = v55;
            v54 += 32;
            ++v53;
            --v51;
          }
          while (v51);
          OUTLINED_FUNCTION_20_2();
        }
      }
      else
      {
        v52 = MEMORY[0x24BEE4AF8];
      }
      v0 = v71;
    }
    else
    {
      v42 = MEMORY[0x24BEE4AF8];
      v52 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v0 + 872) = v52;
    *(_QWORD *)(v0 + 864) = v42;
    *(_QWORD *)(v0 + 856) = v39;
    OUTLINED_FUNCTION_135_2(*(_QWORD *)(v0 + 768) + 16);
    v65 = (_QWORD *)OUTLINED_FUNCTION_100_3();
    OUTLINED_FUNCTION_33_8(v65, v66);
    v67 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 880) = v67;
    *v67 = v0;
    v67[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
    OUTLINED_FUNCTION_38_7();
    OUTLINED_FUNCTION_6_7();
    __asm { BR              X4 }
  }
  v27 = *(_QWORD *)(v0 + 800);
  if (!*(_QWORD *)(inited + 16))
  {
    OUTLINED_FUNCTION_21_1();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v57 = OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_150_2(v57, v58, v59, v60, v61, v62, v63, v64, v69, v70, v72, (uint64_t)v73, v75);
    if (v27)
      goto LABEL_42;
    OUTLINED_FUNCTION_42();
    __swift_destroy_boxed_opaque_existential_1(v0 + 360);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_114_1();
LABEL_24:
    OUTLINED_FUNCTION_131_0();
    OUTLINED_FUNCTION_6_7();
    __asm { BR              X2 }
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_65_0();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v28 = OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_150_2(v28, v29, v30, v31, v32, v33, v34, v35, v69, v70, v72, (uint64_t)v73, v75);
  if (!v27)
  {
    OUTLINED_FUNCTION_50_2();
    __swift_destroy_boxed_opaque_existential_1(v0 + 360);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_114_1();
    goto LABEL_24;
  }
LABEL_42:
  swift_release();
  OUTLINED_FUNCTION_6_7();
}

{
  uint64_t v0;
  uint64_t *v1;
  _OWORD *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;

  v1 = (uint64_t *)(v0 + 16);
  v2 = (_OWORD *)(v0 + 64);
  v3 = (uint64_t *)(v0 + 480);
  v120 = v0 + 520;
  v135 = v0 + 544;
  v139 = v0 + 672;
  v112 = v0 + 688;
  v114 = v0 + 704;
  v4 = (uint64_t **)(v0 + 712);
  v116 = (uint64_t *)(v0 + 696);
  v118 = (uint64_t *)(v0 + 720);
  v106 = v0 + 680;
  v108 = v0 + 728;
  v126 = (_QWORD *)(v0 + 736);
  v138 = (uint64_t *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 888);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v9 = *(_QWORD *)(v0 + 848);
  v143 = (uint64_t *)(v0 + 744);
  v144 = *(_QWORD *)(v0 + 840);
  v110 = v0 + 440;
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  v10 = MEMORY[0x24BEE4AF8];
  v140 = v5;
  v125 = v5 + 32;
  *(_QWORD *)(v0 + 672) = MEMORY[0x24BEE4AF8];
  v133 = v8 + 32;
  v134 = v7 + 32;
  v132 = v6 + 32;
  *(_QWORD *)(v0 + 664) = v10;
  v131 = v144 - 1;
  v137 = v9;
  v130 = v9 + 32;
  v122 = v0 + 72;
  v124 = v0 + 120;
  OUTLINED_FUNCTION_162_2(v0 + 24);
  while (1)
  {
    v20 = *(_QWORD *)(v140 + 16);
    if (v19 == v20)
    {
      v142 = v19;
      v2[1] = 0u;
      v2[2] = 0u;
      *v2 = 0u;
    }
    else
    {
      if (v19 >= v20)
        goto LABEL_97;
      v21 = OUTLINED_FUNCTION_120_2(v11, v12, v13, v14, v15, v16, v17, v18, v106, v108, v110, v112, v114, (uint64_t)v116, (uint64_t)v118, v120, v122, v124, v125);
      v23 = v22;
      v25 = outlined init with copy of DeterministicLanguageModelProtocol(v21, v24);
      *(_QWORD *)v2 = v23;
      OUTLINED_FUNCTION_161_2(v25, v26, v27, v28, v29, v30, v31, v32, v107, v109, v111, v113, v115, v117, v119, v121, v123);
      v142 = v8;
    }
    outlined init with take of (offset: Int, element: LogitCollection)?((uint64_t)v2, (uint64_t)v1);
    if (!*(_QWORD *)(v0 + 48))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_4_0();
      v8 = *(_QWORD *)(v0 + 672);
      v3 = (uint64_t *)(v8 >> 62);
      if (v8 >> 62)
        goto LABEL_98;
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_58;
LABEL_99:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42();
      v67 = *(_QWORD *)(v0 + 848);
      goto LABEL_100;
    }
    v33 = *v1;
    outlined init with take of LogitCollection(v136, (uint64_t)v3);
    if (v33 < 0)
      goto LABEL_91;
    OUTLINED_FUNCTION_168();
    if (v34)
      break;
    OUTLINED_FUNCTION_168();
    if (v34)
      goto LABEL_93;
    OUTLINED_FUNCTION_168();
    if (v34)
      goto LABEL_94;
    v35 = ThreeStageSpeculativeDecoder.makeTinyTokenBeam(tinyLogits:tinyNode:draftNode:targetNode:)(v3, *(_QWORD *)(v134 + 8 * v33), *(_QWORD *)(v133 + 8 * v33), *(_QWORD *)(v132 + 8 * v33));
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    v36 = *(_QWORD *)(v35 + 16);
    v145 = v35;
    if (v36)
    {
      *v4 = (uint64_t *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      OUTLINED_FUNCTION_50_8();
      v37 = v35 + 56;
      v38 = v36;
      do
      {
        v37 += 32;
        OUTLINED_FUNCTION_12_10();
        OUTLINED_FUNCTION_7_17();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v38;
      }
      while (v38);
      v3 = *v4;
      v0 = (uint64_t)v141;
    }
    else
    {
      v3 = (uint64_t *)MEMORY[0x24BEE4AF8];
    }
    v39 = *(_QWORD *)(v0 + 840);
    v8 = v139;
    v0 = v135;
    OUTLINED_FUNCTION_4_0();
    v40 = OUTLINED_FUNCTION_122();
    specialized Array.append<A>(contentsOf:)(v40);
    OUTLINED_FUNCTION_51_5();
    if (v39 > *(_QWORD *)(v137 + 16))
      goto LABEL_95;
    v41 = *(_QWORD *)(v130 + 8 * v131);
    if ((v41 & 0xC000000000000001) != 0)
    {
      OUTLINED_FUNCTION_85_1();
      v8 = MEMORY[0x2495A9EB0](v33, v41);
      OUTLINED_FUNCTION_119_0();
      v42 = v138;
      v0 = v145;
    }
    else
    {
      OUTLINED_FUNCTION_168();
      v42 = v138;
      v0 = v145;
      if (v43 == v44)
        goto LABEL_96;
      OUTLINED_FUNCTION_29_6();
    }
    OUTLINED_FUNCTION_4_0();
    *(_QWORD *)(v8 + 24) = v3;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_116();
    if (v36)
    {
      v45 = v126;
      *v126 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      v46 = *v126;
      v47 = *(_QWORD *)(*v126 + 16);
      v48 = 40;
      do
      {
        v49 = *(_QWORD *)(v0 + v48);
        *v45 = v46;
        if (v47 >= *(_QWORD *)(v46 + 24) >> 1)
        {
          OUTLINED_FUNCTION_10_14();
          v45 = v126;
          v46 = *v126;
        }
        *(_QWORD *)(v46 + 16) = v47 + 1;
        *(_QWORD *)(v46 + 8 * v47 + 32) = v49;
        v48 += 32;
        ++v47;
        --v36;
      }
      while (v36);
      OUTLINED_FUNCTION_58_0();
    }
    else
    {
      OUTLINED_FUNCTION_58_0();
      v46 = MEMORY[0x24BEE4AF8];
    }
    v50 = *(_QWORD *)(v46 + 16);
    v8 = -1;
    if (v50)
    {
      v51 = 0;
      v0 = *v42;
      do
      {
        v3 = v42;
        v52 = v0 + 56;
        while (1)
        {
          v53 = *(_QWORD *)(v46 + 32 + 8 * v51++);
          v54 = OUTLINED_FUNCTION_57_3();
          v55 = -1 << *(_BYTE *)(v0 + 32);
          v56 = v54 & ~v55;
          if (((*(_QWORD *)(v52 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
            break;
          v57 = *(_QWORD *)(v0 + 48);
          if (*(_QWORD *)(v57 + 8 * v56) != v53)
          {
            v58 = ~v55;
            do
            {
              v56 = (v56 + 1) & v58;
              if (((*(_QWORD *)(v52 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
                goto LABEL_38;
            }
            while (*(_QWORD *)(v57 + 8 * v56) != v53);
          }
          if (v51 == v50)
            goto LABEL_53;
        }
LABEL_38:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v143 = v0;
        v42 = v3;
        *v3 = 0x8000000000000000;
        if (*(_QWORD *)(v0 + 24) <= *(_QWORD *)(v0 + 16))
        {
          if (isUniquelyReferenced_nonNull_native)
            specialized _NativeSet.resize(capacity:)();
          else
            specialized _NativeSet.copyAndResize(capacity:)();
          v0 = *v143;
          v60 = OUTLINED_FUNCTION_57_3();
          v8 = -1;
          v61 = -1 << *(_BYTE *)(v0 + 32);
          v56 = v60 & ~v61;
          if (((*(_QWORD *)(v0 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) != 0)
          {
            v62 = *(_QWORD *)(v0 + 48);
            if (*(_QWORD *)(v62 + 8 * v56) == v53)
            {
LABEL_55:
              OUTLINED_FUNCTION_64_7();
              ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              return;
            }
            v63 = ~v61;
            while (1)
            {
              v56 = (v56 + 1) & v63;
              if (((*(_QWORD *)(v0 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0)
                break;
              if (*(_QWORD *)(v62 + 8 * v56) == v53)
                goto LABEL_55;
            }
          }
        }
        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeSet.copy()();
            v0 = *v143;
          }
          v8 = -1;
        }
        OUTLINED_FUNCTION_132_1(v0 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8));
        *(_QWORD *)(v64 + 8 * v56) = v53;
        v65 = *(_QWORD *)(v0 + 16);
        v44 = __OFADD__(v65, 1);
        v66 = v65 + 1;
        if (v44)
        {
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        *(_QWORD *)(v0 + 16) = v66;
        *v3 = v0;
        OUTLINED_FUNCTION_74();
      }
      while (v51 != v50);
    }
LABEL_53:
    OUTLINED_FUNCTION_116_0();
    v3 = (uint64_t *)v127;
    v11 = __swift_destroy_boxed_opaque_existential_1(v127);
    v0 = (uint64_t)v141;
    v19 = v142;
    v2 = v128;
    v1 = v129;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  OUTLINED_FUNCTION_21_1();
  v102 = OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_42();
  if (!v102)
    goto LABEL_99;
LABEL_58:
  v67 = *(_QWORD *)(v0 + 848);
  v68 = *(_QWORD *)(v137 + 16);
  v69 = *(_QWORD *)(v67 + 24);
  OUTLINED_FUNCTION_21_1();
  if (v68 >= v69 >> 1)
  {
    OUTLINED_FUNCTION_91_1();
    v67 = v105;
  }
  *(_QWORD *)(v67 + 16) = v68 + 1;
  *(_QWORD *)(v67 + 8 * v68 + 32) = v8;
  if (v3)
  {
    OUTLINED_FUNCTION_21_1();
    v70 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    v70 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v71 = *(_QWORD *)(v0 + 768);
  v72 = *(_QWORD *)(v71 + 352);
  v44 = __OFADD__(v72, v70);
  v73 = v72 + v70;
  if (v44)
  {
    __break(1u);
    goto LABEL_108;
  }
  v8 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v71 + 352) = v73;
  *(_QWORD *)(v0 + 728) = *(_QWORD *)(v0 + 664);
  swift_bridgeObjectRelease();
  Logger.logObject.getter();
  LOBYTE(v70) = OUTLINED_FUNCTION_111();
  if (OUTLINED_FUNCTION_167_1((os_log_type_t)v70))
  {
    v74 = *(_QWORD *)(v0 + 840);
    v68 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v68 = 134218240;
    *(_QWORD *)(v0 + 688) = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v68 + 12) = 2048;
    v75 = *(_QWORD *)(v0 + 672);
    if (!(v75 >> 62))
    {
      v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_67;
    }
LABEL_108:
    OUTLINED_FUNCTION_50_1();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_51_1();
LABEL_67:
    *v116 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v8, (os_log_type_t)v70, "Tiny tree layer %ld speculated %ld tokens", (uint8_t *)v68);
    OUTLINED_FUNCTION_0_1();
  }
  v77 = *(_QWORD *)(v0 + 840);
  v78 = *(_QWORD *)(v0 + 832);

  OUTLINED_FUNCTION_164_2();
  if (v77 + 1 != v78)
  {
    v86 = *(_QWORD *)(v0 + 840) + 1;
    *(_QWORD *)(v0 + 848) = v67;
    *(_QWORD *)(v0 + 840) = v86;
    if (v86 == *(_QWORD *)(v0 + 832))
      __break(1u);
    v87 = *(_QWORD *)v108;
    v88 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(*(_QWORD *)v108 + 16))
    {
      *v118 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_18_3();
      OUTLINED_FUNCTION_95_3();
      v89 = *v118;
      v0 = 48;
      do
      {
        OUTLINED_FUNCTION_119_3();
        if (v34)
        {
          OUTLINED_FUNCTION_10_14();
          v89 = *v118;
        }
        OUTLINED_FUNCTION_88_2();
      }
      while (!v90);
      OUTLINED_FUNCTION_20_2();
      v91 = *(_QWORD *)(v87 + 16);
      v88 = MEMORY[0x24BEE4AF8];
      if (v91)
      {
        v92 = (_QWORD *)v114;
        *(_QWORD *)v114 = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_18_3();
        OUTLINED_FUNCTION_56_3();
        v88 = *(_QWORD *)v114;
        v93 = *(_QWORD *)(*(_QWORD *)v114 + 16);
        v0 = 40;
        do
        {
          v94 = *(_QWORD *)(v87 + v0);
          *v92 = v88;
          if (v93 >= *(_QWORD *)(v88 + 24) >> 1)
          {
            OUTLINED_FUNCTION_10_14();
            v92 = (_QWORD *)v114;
            v88 = *(_QWORD *)v114;
          }
          *(_QWORD *)(v88 + 16) = v93 + 1;
          *(_QWORD *)(v88 + 8 * v93 + 32) = v94;
          v0 += 32;
          ++v93;
          --v91;
        }
        while (v91);
        OUTLINED_FUNCTION_20_2();
        v95 = *(_QWORD *)(v87 + 16);
        v96 = MEMORY[0x24BEE4AF8];
        if (v95)
        {
          *(_QWORD *)v106 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_18_3();
          OUTLINED_FUNCTION_56_3();
          v96 = *(_QWORD *)v106;
          v97 = *(_QWORD *)(*(_QWORD *)v106 + 16);
          v0 = 32;
          do
          {
            v98 = *(_QWORD *)(v87 + v0);
            OUTLINED_FUNCTION_136_2();
            if (v97 >= v99 >> 1)
            {
              OUTLINED_FUNCTION_10_14();
              v96 = *(_QWORD *)v106;
            }
            *(_QWORD *)(v96 + 16) = v97 + 1;
            *(_QWORD *)(v96 + 8 * v97 + 32) = v98;
            v0 += 32;
            ++v97;
            --v95;
          }
          while (v95);
          OUTLINED_FUNCTION_20_2();
        }
LABEL_89:
        v141[109] = v96;
        v141[108] = v89;
        v141[107] = v88;
        OUTLINED_FUNCTION_145_1(v141[96] + 16, v79, v80, v81, v82, v83, v84, v85, v106, v108, v110);
        OUTLINED_FUNCTION_33_8((_QWORD *)v0, v141[58]);
        v100 = (_QWORD *)OUTLINED_FUNCTION_113_3();
        v141[110] = (uint64_t)v100;
        *v100 = v141;
        v100[1] = ThreeStageSpeculativeDecoder.generateTinyModelTree();
        OUTLINED_FUNCTION_38_7();
        OUTLINED_FUNCTION_64_7();
        __asm { BR              X4 }
      }
    }
    else
    {
      v89 = MEMORY[0x24BEE4AF8];
    }
    v96 = v88;
    goto LABEL_89;
  }
LABEL_100:
  v103 = *(_QWORD *)(v0 + 896);
  if (*(_QWORD *)(v67 + 16))
  {
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_65_0();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_143_2();
    if (!v103)
    {
      OUTLINED_FUNCTION_50_2();
      goto LABEL_106;
    }
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_143_2();
    if (!v103)
    {
      OUTLINED_FUNCTION_42();
LABEL_106:
      __swift_destroy_boxed_opaque_existential_1(v0 + 360);
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_114_1();
      OUTLINED_FUNCTION_131_0();
      OUTLINED_FUNCTION_64_7();
      __asm { BR              X2 }
    }
  }
  swift_release();
  OUTLINED_FUNCTION_64_7();
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 784) = v4;
  *(_BYTE *)(v5 + 904) = a4;
  *(_QWORD *)(v5 + 776) = a3;
  *(_QWORD *)(v5 + 768) = a2;
  *(_QWORD *)(v5 + 760) = a1;
  return swift_task_switch();
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);

  if (*(uint64_t *)(v0 + 760) < 1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8]);
  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 768);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  v4 = OUTLINED_FUNCTION_139_1(inited, *(_QWORD *)(v1 + 152));
  *(_QWORD *)(v0 + 792) = v4;
  *(_QWORD *)(v0 + 744) = v4;
  OUTLINED_FUNCTION_239_0();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_98_3(v1 + 64);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
  v5 = OUTLINED_FUNCTION_2_0();
  *(_QWORD *)(v0 + 800) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v5 + 32) = v2;
  OUTLINED_FUNCTION_39_3(v1 + 280);
  v6 = (_QWORD *)OUTLINED_FUNCTION_58_1();
  *(_QWORD *)(v0 + 808) = v6;
  *v6 = v0;
  v6[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
  v7 = OUTLINED_FUNCTION_69_6();
  return OUTLINED_FUNCTION_41_7(v7, v8, v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_65_1();
  *(_QWORD *)(v1 + 888) = v2;
  *(_QWORD *)(v1 + 896) = v0;
  v3 = OUTLINED_FUNCTION_84();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v4 = OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_72_4(v4, &demangling cache variable for type metadata for LogitPresampler?);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_72_4(v3, &demangling cache variable for type metadata for LogitPresampler?);
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;

  v1 = (unint64_t)(v0 + 2);
  v2 = (uint64_t)(v0 + 14);
  v115 = (uint64_t)(v0 + 71);
  v133 = v0 + 84;
  v107 = (uint64_t)(v0 + 85);
  v109 = (uint64_t)(v0 + 86);
  v3 = v0 + 88;
  v111 = (uint64_t)(v0 + 87);
  v113 = v0 + 89;
  v103 = (uint64_t)(v0 + 90);
  v121 = v0 + 91;
  v138 = v0 + 92;
  v139 = v0 + 93;
  v4 = v0[111];
  v5 = v0[109];
  v6 = v0[108];
  v7 = v0[107];
  v8 = v0[106];
  v105 = (uint64_t)(v0 + 55);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 55));
  v9 = MEMORY[0x24BEE4AF8];
  v0[84] = MEMORY[0x24BEE4AF8];
  v134 = v4;
  v120 = v4 + 32;
  v129 = v5;
  v130 = v6;
  v127 = v5 + 32;
  v128 = v6 + 32;
  v126 = v8 - 1;
  v0[83] = v9;
  v132 = v7;
  v125 = v7 + 32;
  v10 = v0 + 60;
  v117 = (uint64_t)(v0 + 3);
  v119 = (uint64_t)(v0 + 9);
  OUTLINED_FUNCTION_162_2((uint64_t)(v0 + 15));
  while (1)
  {
    v20 = *(_QWORD *)(v134 + 16);
    if (v19 == v20)
    {
      v135 = v19;
      *(_OWORD *)(v1 + 16) = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_OWORD *)v1 = 0u;
    }
    else
    {
      if (v19 >= v20)
        goto LABEL_94;
      v21 = OUTLINED_FUNCTION_120_2(v11, v12, v13, v14, v15, v16, v17, v18, v101, v103, v105, v107, v109, v111, (uint64_t)v113, v115, v117, v119, v120);
      v23 = v22;
      v25 = outlined init with copy of DeterministicLanguageModelProtocol(v21, v24);
      *(_QWORD *)v1 = v23;
      OUTLINED_FUNCTION_161_2(v25, v26, v27, v28, v29, v30, v31, v32, v102, v104, v106, v108, v110, v112, v114, v116, v118);
      v135 = v8;
    }
    v33 = OUTLINED_FUNCTION_153_1();
    outlined init with take of (offset: Int, element: LogitCollection)?(v33, v34);
    if (!v0[18])
      break;
    v35 = *(_QWORD *)v2;
    outlined init with take of LogitCollection(v131, (uint64_t)v10);
    if ((v35 & 0x8000000000000000) != 0)
      goto LABEL_89;
    if (v35 >= *(_QWORD *)(v130 + 16))
      goto LABEL_90;
    if (v35 >= *(_QWORD *)(v129 + 16))
      goto LABEL_91;
    v36 = ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)(v10, *(_QWORD *)(v128 + 8 * v35), *(_QWORD *)(v127 + 8 * v35));
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    v37 = *(_QWORD *)(v36 + 16);
    v137 = v36;
    if (v37)
    {
      *v3 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      OUTLINED_FUNCTION_50_8();
      v38 = v36 + 56;
      v39 = v37;
      do
      {
        v38 += 32;
        OUTLINED_FUNCTION_12_10();
        OUTLINED_FUNCTION_7_17();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_155_1();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v39;
      }
      while (v39);
      v2 = *v3;
      v0 = v136;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
    }
    v1 = v0[106];
    v8 = (uint64_t)v133;
    OUTLINED_FUNCTION_4_0();
    v40 = OUTLINED_FUNCTION_50_1();
    specialized Array.append<A>(contentsOf:)(v40);
    OUTLINED_FUNCTION_51_5();
    if (v1 > *(_QWORD *)(v132 + 16))
      goto LABEL_92;
    v41 = *(_QWORD *)(v125 + 8 * v126);
    if ((v41 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v8 = MEMORY[0x2495A9EB0](v35, v41);
      OUTLINED_FUNCTION_116_0();
    }
    else
    {
      if ((int64_t)v35 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_93;
      OUTLINED_FUNCTION_29_6();
    }
    OUTLINED_FUNCTION_4_0();
    *(_QWORD *)(v8 + 24) = v2;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_116();
    if (v37)
    {
      v42 = v121;
      *v121 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      v43 = *v121;
      v44 = *(_QWORD *)(*v121 + 16);
      v45 = 32;
      do
      {
        v46 = *(_QWORD *)(v137 + v45);
        *v42 = v43;
        if (v44 >= *(_QWORD *)(v43 + 24) >> 1)
        {
          OUTLINED_FUNCTION_10_14();
          v42 = v121;
          v43 = *v121;
        }
        *(_QWORD *)(v43 + 16) = v44 + 1;
        *(_QWORD *)(v43 + 8 * v44 + 32) = v46;
        v45 += 32;
        ++v44;
        --v37;
      }
      while (v37);
      OUTLINED_FUNCTION_58_0();
    }
    else
    {
      OUTLINED_FUNCTION_58_0();
      v43 = MEMORY[0x24BEE4AF8];
    }
    v1 = *(_QWORD *)(v43 + 16);
    v8 = -1;
    if (v1)
    {
      v2 = 0;
      v47 = *v139;
      while (1)
      {
        v48 = v47 + 56;
        while (1)
        {
          v49 = *(_QWORD *)(v43 + 32 + 8 * v2++);
          v50 = OUTLINED_FUNCTION_57_3();
          v51 = -1 << *(_BYTE *)(v47 + 32);
          v52 = v50 & ~v51;
          if (((*(_QWORD *)(v48 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
            break;
          v53 = *(_QWORD *)(v47 + 48);
          if (*(_QWORD *)(v53 + 8 * v52) != v49)
          {
            v54 = ~v51;
            do
            {
              v52 = (v52 + 1) & v54;
              if (((*(_QWORD *)(v48 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
                goto LABEL_36;
            }
            while (*(_QWORD *)(v53 + 8 * v52) != v49);
          }
          if (v2 == v1)
            goto LABEL_51;
        }
LABEL_36:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v138 = v47;
        *v139 = 0x8000000000000000;
        if (*(_QWORD *)(v47 + 24) <= *(_QWORD *)(v47 + 16))
        {
          if (isUniquelyReferenced_nonNull_native)
            specialized _NativeSet.resize(capacity:)();
          else
            specialized _NativeSet.copyAndResize(capacity:)();
          v47 = *v138;
          v56 = OUTLINED_FUNCTION_57_3();
          v8 = -1;
          v57 = -1 << *(_BYTE *)(v47 + 32);
          v52 = v56 & ~v57;
          if (((*(_QWORD *)(v47 + 56 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
          {
            v58 = *(_QWORD *)(v47 + 48);
            if (*(_QWORD *)(v58 + 8 * v52) == v49)
            {
LABEL_53:
              OUTLINED_FUNCTION_59_5();
              return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            v59 = ~v57;
            while (1)
            {
              v52 = (v52 + 1) & v59;
              if (((*(_QWORD *)(v47 + 56 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
                break;
              if (*(_QWORD *)(v58 + 8 * v52) == v49)
                goto LABEL_53;
            }
          }
        }
        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeSet.copy()();
            v47 = *v138;
          }
          v8 = -1;
        }
        OUTLINED_FUNCTION_132_1(v47 + ((v52 >> 3) & 0xFFFFFFFFFFFFFF8));
        *(_QWORD *)(v60 + 8 * v52) = v49;
        v61 = *(_QWORD *)(v47 + 16);
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          break;
        *(_QWORD *)(v47 + 16) = v63;
        *v139 = v47;
        OUTLINED_FUNCTION_74();
        if (v2 == v1)
          goto LABEL_51;
      }
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
LABEL_51:
    OUTLINED_FUNCTION_161();
    v10 = v122;
    v11 = OUTLINED_FUNCTION_94_1();
    v19 = v135;
    v0 = v136;
    v2 = v123;
    v1 = v124;
  }
  v8 = v0[109];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_4_0();
  v1 = v0[84];
  if (!(v1 >> 62))
  {
    v65 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_56;
  }
LABEL_95:
  OUTLINED_FUNCTION_65_0();
  v65 = OUTLINED_FUNCTION_84_4();
  OUTLINED_FUNCTION_50_2();
LABEL_56:
  v66 = (unint64_t)v139;
  if (!v65)
  {
    v70 = v136;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_2();
    v67 = v136[107];
    goto LABEL_65;
  }
  v67 = v136[107];
  v66 = *(_QWORD *)(v132 + 16);
  v68 = *(_QWORD *)(v67 + 24);
  v69 = (char *)(v66 + 1);
  OUTLINED_FUNCTION_65_0();
  if (v66 >= v68 >> 1)
    goto LABEL_97;
  while (1)
  {
    v70 = v136;
    v8 = v136[104];
    *(_QWORD *)(v67 + 16) = v69;
    *(_QWORD *)(v67 + 8 * v66 + 32) = v1;
    v136[90] = v136[83];
    OUTLINED_FUNCTION_18_3();
    OUTLINED_FUNCTION_50_2();
    Logger.logObject.getter();
    v1 = OUTLINED_FUNCTION_111();
    if (OUTLINED_FUNCTION_167_1((os_log_type_t)v1))
    {
      v71 = v136[106];
      v2 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v2 = 134218240;
      v136[85] = v71;
      v66 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v2 + 12) = 2048;
      v72 = v136[84];
      if (!(v72 >> 62))
      {
        v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_61;
      }
LABEL_99:
      OUTLINED_FUNCTION_122();
      v73 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_63_0();
LABEL_61:
      *(_QWORD *)v66 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v8, (os_log_type_t)v1, "Draft tree layer %ld speculated %ld tokens", (uint8_t *)v2);
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_20_2();
    v8 = v136[95];
    v74 = v136[106] + 1;
    swift_bridgeObjectRelease();
    if (v74 != v8)
    {
      v86 = v136[106] + 1;
      v136[107] = v67;
      v136[106] = v86;
      if (v86 < v136[95])
      {
        v87 = *(_QWORD *)v103;
        v88 = MEMORY[0x24BEE4AF8];
        if (*(_QWORD *)(*(_QWORD *)v103 + 16))
        {
          *v113 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_18_3();
          OUTLINED_FUNCTION_95_3();
          v88 = *v113;
          do
          {
            OUTLINED_FUNCTION_119_3();
            if (v89)
            {
              OUTLINED_FUNCTION_10_14();
              v88 = *v113;
            }
            OUTLINED_FUNCTION_88_2();
          }
          while (!v90);
          OUTLINED_FUNCTION_20_2();
          v92 = *(_QWORD *)(v87 + 16);
          v93 = (_QWORD *)MEMORY[0x24BEE4AF8];
          if (v92)
          {
            v94 = (_QWORD *)v111;
            *(_QWORD *)v111 = MEMORY[0x24BEE4AF8];
            OUTLINED_FUNCTION_18_3();
            OUTLINED_FUNCTION_56_3();
            v93 = *(_QWORD **)v111;
            v95 = *(_QWORD *)(*(_QWORD *)v111 + 16);
            v96 = 32;
            do
            {
              v97 = *(_QWORD *)(v87 + v96);
              *v94 = v93;
              if (v95 >= v93[3] >> 1)
              {
                OUTLINED_FUNCTION_10_14();
                v94 = (_QWORD *)v111;
                v93 = *(_QWORD **)v111;
              }
              v93[2] = v95 + 1;
              v93[v95 + 4] = v97;
              v96 += 32;
              ++v95;
              --v92;
            }
            while (v92);
            OUTLINED_FUNCTION_20_2();
          }
        }
        else
        {
          v93 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v136[109] = (uint64_t)v93;
        v136[108] = v88;
        OUTLINED_FUNCTION_145_1(v136[98] + 64, v75, v76, v77, v78, v79, v80, v81, v101, v103, v105);
        OUTLINED_FUNCTION_33_8(v93, v136[58]);
        v98 = (_QWORD *)OUTLINED_FUNCTION_113_3();
        v136[110] = (uint64_t)v98;
        *v98 = v136;
        v98[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
        OUTLINED_FUNCTION_38_7();
        OUTLINED_FUNCTION_59_5();
        __asm { BR              X4 }
      }
      __break(1u);
    }
    v66 = (unint64_t)v139;
LABEL_65:
    v69 = (char *)v70[112];
    if ((v70[113] & 1) == 0)
    {
      v82 = v70[98];
      v83 = *(_QWORD *)(v67 + 16);
      v84 = *(_QWORD *)(v82 + 368);
      v62 = __OFADD__(v84, v83);
      v85 = v84 + v83;
      if (v62)
      {
        __break(1u);
        goto LABEL_99;
      }
      *(_QWORD *)(v82 + 368) = v85;
    }
    if (*(_QWORD *)(v67 + 16))
      break;
    __break(1u);
LABEL_97:
    OUTLINED_FUNCTION_91_1();
    v67 = v100;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_65_0();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_143_2();
  if (!v69)
  {
    OUTLINED_FUNCTION_50_2();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v136 + 20));
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_169_1();
    OUTLINED_FUNCTION_131_0();
    OUTLINED_FUNCTION_59_5();
    __asm { BR              X2 }
  }
  OUTLINED_FUNCTION_59_5();
  return swift_release();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_134_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_169_1();
  return OUTLINED_FUNCTION_27_6(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_107_4();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 816) = v1;
  v5 = swift_task_dealloc();
  if (v1)
  {
    v6 = OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_75_4(v6, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v2 + 824) = a1;
    OUTLINED_FUNCTION_75_4(v5, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_20_2();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_17_8();
}

void ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t *v16;
  uint8_t *v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v47;
  uint64_t *v49;
  uint64_t v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  OUTLINED_FUNCTION_147_2(v0 + 280);
  OUTLINED_FUNCTION_7_0();
  if (!*(_QWORD *)(v0 + 304))
LABEL_43:
    __break(1u);
  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 768);
  outlined init with take of LogitCollection((__int128 *)(v0 + 280), v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  v3 = ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)((_QWORD *)(v0 + 160), v2, v1);
  *(_QWORD *)(v0 + 720) = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3;
    v49 = (uint64_t *)(v0 + 696);
    v6 = (uint64_t *)(v0 + 712);
    v50[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_56_3();
    v7 = v50[0];
    v8 = *(_QWORD *)(v50[0] + 16);
    v9 = 32;
    do
    {
      v10 = *(_QWORD *)(v5 + v9);
      v50[0] = v7;
      v11 = *(_QWORD *)(v7 + 24);
      if (v8 >= v11 >> 1)
      {
        OUTLINED_FUNCTION_44_2(v11);
        OUTLINED_FUNCTION_10_14();
        v7 = v50[0];
      }
      *(_QWORD *)(v7 + 16) = v8 + 1;
      *(_QWORD *)(v7 + 8 * v8 + 32) = v10;
      v9 += 32;
      ++v8;
      --v4;
    }
    while (v4);
    OUTLINED_FUNCTION_116_0();
    OUTLINED_FUNCTION_156_1(v7);
    if (one-time initialization token for device != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_15_4();
    v13 = __swift_project_value_buffer(v12, (uint64_t)static Log.device);
    *(_QWORD *)(v0 + 832) = v13;
    v14 = v13;
    Logger.logObject.getter();
    v15 = OUTLINED_FUNCTION_111();
    v16 = (uint64_t *)(v0 + 720);
    if (os_log_type_enabled(v14, v15))
    {
      v17 = (uint8_t *)OUTLINED_FUNCTION_121();
      *(_DWORD *)v17 = 134217984;
      OUTLINED_FUNCTION_4_0();
      *(_QWORD *)(v0 + 752) = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v14, v15, "Draft tree layer 0 speculated %ld tokens", v17);
      OUTLINED_FUNCTION_0_1();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
    inited = swift_initStackObject();
    *(_QWORD *)(v0 + 840) = inited;
    *(_OWORD *)(inited + 16) = xmmword_248D75A50;
    OUTLINED_FUNCTION_4_0();
    v19 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 16);
    v20 = MEMORY[0x24BEE4AF8];
    if (v19)
    {
      v50[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_122();
      OUTLINED_FUNCTION_159_1();
      OUTLINED_FUNCTION_50_8();
      v21 = 56;
      do
      {
        OUTLINED_FUNCTION_12_10();
        OUTLINED_FUNCTION_7_17();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_155_1();
        OUTLINED_FUNCTION_153_1();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v21 += 32;
        --v19;
      }
      while (v19);
      v20 = v50[0];
      OUTLINED_FUNCTION_63_0();
      v16 = (uint64_t *)(v0 + 720);
    }
    v22 = *(_QWORD *)(v0 + 760);
    *(_QWORD *)(inited + 32) = v20;
    if (v22 == 1)
    {
      v23 = *(_QWORD *)(v0 + 816);
      if ((*(_BYTE *)(v0 + 904) & 1) == 0)
      {
        v24 = *(_QWORD *)(v0 + 784);
        v25 = *(_QWORD *)(inited + 16);
        v26 = *(_QWORD *)(v24 + 368);
        v27 = __OFADD__(v26, v25);
        v28 = v26 + v25;
        if (v27)
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        *(_QWORD *)(v24 + 368) = v28;
      }
      if (*(_QWORD *)(inited + 16))
      {
        OUTLINED_FUNCTION_21_1();
        OUTLINED_FUNCTION_52();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        v30 = v29;
        OUTLINED_FUNCTION_7_0();
        v50[0] = v30;
        specialized MutableCollection<>.sort(by:)(v50);
        if (!v23)
        {
          OUTLINED_FUNCTION_7_0();
          __swift_destroy_boxed_opaque_existential_1(v0 + 160);
          OUTLINED_FUNCTION_161();
          OUTLINED_FUNCTION_169_1();
          goto LABEL_37;
        }
        goto LABEL_23;
      }
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 856) = inited;
      *(_QWORD *)(v0 + 848) = 1;
      if (*(uint64_t *)(v0 + 760) > 1)
      {
        v34 = *v16;
        v35 = *(_QWORD *)(*v16 + 16);
        v36 = MEMORY[0x24BEE4AF8];
        if (v35)
        {
          *v6 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_50_1();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v36 = *v6;
          v37 = *(_QWORD *)(*v6 + 16);
          v38 = 40;
          do
          {
            v39 = *(_QWORD *)(v34 + v38);
            *v6 = v36;
            if (v37 >= *(_QWORD *)(v36 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v36 = *v6;
            }
            *(_QWORD *)(v36 + 16) = v37 + 1;
            *(_QWORD *)(v36 + 8 * v37 + 32) = v39;
            v38 += 32;
            ++v37;
            --v35;
          }
          while (v35);
          OUTLINED_FUNCTION_51_1();
          v40 = *(_QWORD *)(v34 + 16);
          v41 = MEMORY[0x24BEE4AF8];
          if (v40)
          {
            *v49 = MEMORY[0x24BEE4AF8];
            OUTLINED_FUNCTION_50_1();
            OUTLINED_FUNCTION_56_3();
            v41 = *v49;
            v42 = *(_QWORD *)(*v49 + 16);
            v43 = 32;
            do
            {
              v44 = *(_QWORD *)(v34 + v43);
              OUTLINED_FUNCTION_136_2();
              if (v42 >= v45 >> 1)
              {
                OUTLINED_FUNCTION_10_14();
                v41 = *v49;
              }
              *(_QWORD *)(v41 + 16) = v42 + 1;
              *(_QWORD *)(v41 + 8 * v42 + 32) = v44;
              v43 += 32;
              ++v42;
              --v40;
            }
            while (v40);
            OUTLINED_FUNCTION_51_1();
          }
        }
        else
        {
          v41 = MEMORY[0x24BEE4AF8];
        }
        *(_QWORD *)(v0 + 872) = v41;
        *(_QWORD *)(v0 + 864) = v36;
        OUTLINED_FUNCTION_135_2(*(_QWORD *)(v0 + 784) + 64);
        OUTLINED_FUNCTION_33_8((_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 464));
        v47 = (_QWORD *)OUTLINED_FUNCTION_58_1();
        *(_QWORD *)(v0 + 880) = v47;
        *v47 = v0;
        v47[1] = ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:);
        OUTLINED_FUNCTION_127_3();
        __asm { BR              X4 }
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  v31 = *(_QWORD *)(v0 + 816);
  OUTLINED_FUNCTION_21_1();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v33 = v32;
  OUTLINED_FUNCTION_42();
  v50[0] = v33;
  specialized MutableCollection<>.sort(by:)(v50);
  if (!v31)
  {
    OUTLINED_FUNCTION_42();
    __swift_destroy_boxed_opaque_existential_1(v0 + 160);
    swift_bridgeObjectRelease();
LABEL_37:
    OUTLINED_FUNCTION_260();
    OUTLINED_FUNCTION_127_3();
    __asm { BR              X2 }
  }
LABEL_23:
  swift_release();
  OUTLINED_FUNCTION_127_3();
}

uint64_t ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[57] = a2;
  v3[58] = v2;
  v3[56] = a1;
  return swift_task_switch();
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_80_4(v6);
  if (!v2)
  {
    *(_QWORD *)(v3 + 488) = a2;
    *(_QWORD *)(v3 + 496) = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_15();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;

  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_64_2(v6);
  v3[64] = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v3[65] = a2;
    v3[66] = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_15();
}

void ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t inited;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t v154;
  __int128 *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166[2];

  v3 = v0[57];
  v4 = (_QWORD *)v0[58];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  v0[54] = OUTLINED_FUNCTION_139_1(inited, v4[19]);
  specialized Dictionary.subscript.getter(v4[13], v3, (uint64_t)(v0 + 17));
  if (!v0[20])
  {
    v22 = OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_93_3(v22, &demangling cache variable for type metadata for LogitCollection?);
    v23 = (_QWORD *)swift_task_alloc();
    v0[63] = v23;
    v24 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
    goto LABEL_27;
  }
  v6 = (unint64_t)(v0 + 12);
  v165 = v0;
  v7 = v0[56];
  OUTLINED_FUNCTION_163_0();
  v8 = ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)((_QWORD *)v6, v4[13], v4[19]);
  v164 = v8;
  v163 = v6;
  if (v7 >> 62)
    goto LABEL_185;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    if (!v9)
      goto LABEL_13;
    v166[0] = MEMORY[0x24BEE4AF8];
    v11 = v166;
    OUTLINED_FUNCTION_56_3();
    if ((v9 & 0x8000000000000000) == 0)
    {
      v13 = 0;
      v10 = v166[0];
      v14 = v7 & 0xC000000000000001;
      do
      {
        if (v14)
          OUTLINED_FUNCTION_129_3();
        swift_retain();
        OUTLINED_FUNCTION_133_0();
        v166[0] = v10;
        v15 = *(_QWORD *)(v10 + 16);
        if (v15 >= *(_QWORD *)(v10 + 24) >> 1)
        {
          OUTLINED_FUNCTION_10_14();
          v10 = v166[0];
        }
        ++v13;
        *(_QWORD *)(v10 + 16) = v15 + 1;
        *(_QWORD *)(v10 + 8 * v15 + 32) = v1;
      }
      while (v9 != v13);
      v8 = v164;
LABEL_13:
      v2 = *(_QWORD *)(v8 + 16);
      v7 = MEMORY[0x24BEE4AF8];
      if (v2)
      {
        v166[0] = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_56_3();
        v16 = v166[0];
        v17 = *(_QWORD *)(v166[0] + 16);
        v18 = (uint64_t *)(v164 + 56);
        v19 = v2;
        do
        {
          v21 = *v18;
          v18 += 4;
          v20 = v21;
          v166[0] = v16;
          if (v17 >= *(_QWORD *)(v16 + 24) >> 1)
          {
            OUTLINED_FUNCTION_10_14();
            v16 = v166[0];
          }
          *(_QWORD *)(v16 + 16) = v17 + 1;
          *(_QWORD *)(v16 + 8 * v17++ + 32) = v20;
          --v19;
        }
        while (v19);
        v7 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v16 = MEMORY[0x24BEE4AF8];
      }
      v25 = specialized Sequence<>.elementsEqual<A>(_:)(v16, v10);
      OUTLINED_FUNCTION_42();
      if ((v25 & 1) != 0)
      {
        if (v2)
        {
          v166[0] = v7;
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_159_1();
          OUTLINED_FUNCTION_50_8();
          v26 = v164 + 56;
          v27 = v2;
          do
          {
            v26 += 32;
            OUTLINED_FUNCTION_12_10();
            OUTLINED_FUNCTION_7_17();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            --v27;
          }
          while (v27);
          v7 = v166[0];
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v1 = v32;
        v6 = *(_QWORD *)(v32 + 16);
        v12 = *(_QWORD *)(v32 + 24);
        v11 = (uint64_t *)(v6 + 1);
        v4 = v165;
        if (v6 < v12 >> 1)
          goto LABEL_31;
        goto LABEL_190;
      }
      v0 = v165;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_142_1();
      OUTLINED_FUNCTION_50_2();
      v23 = (_QWORD *)swift_task_alloc();
      v165[59] = v23;
      v24 = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
LABEL_27:
      *v23 = v0;
      v23[1] = v24;
      goto LABEL_28;
    }
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    OUTLINED_FUNCTION_44_2(v12);
    OUTLINED_FUNCTION_44_5();
    v1 = v148;
LABEL_31:
    *(_QWORD *)(v1 + 16) = v11;
    *(_QWORD *)(v1 + 8 * v6 + 32) = v7;
    v161 = v2;
    if (v2)
    {
      v166[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      v33 = v166[0];
      v34 = *(_QWORD *)(v166[0] + 16);
      v35 = 32;
      v36 = v2;
      v37 = v164;
      do
      {
        v2 = *(_QWORD *)(v37 + v35);
        v166[0] = v33;
        if (v34 >= *(_QWORD *)(v33 + 24) >> 1)
        {
          OUTLINED_FUNCTION_10_14();
          v37 = v164;
          v33 = v166[0];
        }
        *(_QWORD *)(v33 + 16) = v34 + 1;
        *(_QWORD *)(v33 + 8 * v34 + 32) = v2;
        v35 += 32;
        ++v34;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_142_1();
      v33 = MEMORY[0x24BEE4AF8];
    }
    v38 = v4[58];
    specialized Set.formUnion<A>(_:)(v33);
    v39 = *(_QWORD *)(v10 + 16);
    OUTLINED_FUNCTION_50_2();
    __swift_destroy_boxed_opaque_existential_1(v163);
    v40 = *(_QWORD *)(v38 + 344);
    v41 = v40 + v39;
    if (__OFADD__(v40, v39))
    {
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      OUTLINED_FUNCTION_19_6();
      __break(1u);
      goto LABEL_196;
    }
    v42 = v4[58];
    *(_QWORD *)(v38 + 344) = v41;
    v43 = *(_QWORD *)(v42 + 368);
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      goto LABEL_192;
    v46 = v4[58];
    *(_QWORD *)(v42 + 368) = v45;
    v47 = *(_QWORD *)(v46 + 160);
    v4[67] = v47;
    v48 = v4[56];
    if (v9 != v161 || v47 < 2)
    {
      OUTLINED_FUNCTION_21_1();
LABEL_46:
      if (*(_QWORD *)(v1 + 16))
      {
        OUTLINED_FUNCTION_115_2();
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_65_0();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        v51 = v50;
        OUTLINED_FUNCTION_50_2();
        v166[0] = v51;
        specialized MutableCollection<>.sort(by:)(v166);
        OUTLINED_FUNCTION_42();
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_50_2();
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_149_2();
        OUTLINED_FUNCTION_118_2();
        __asm { BR              X2 }
      }
      goto LABEL_194;
    }
    v159 = v4 + 22;
    v151 = (uint64_t)(v4 + 36);
    v152 = (uint64_t)(v4 + 33);
    v154 = (uint64_t)(v4 + 39);
    v155 = (__int128 *)(v4 + 2);
    v158 = (uint64_t)(v4 + 48);
    v156 = v4 + 49;
    v162 = v4 + 50;
    v163 = (uint64_t)(v4 + 51);
    v153 = (uint64_t **)(v4 + 52);
    v160 = v4 + 30;
    v6 = *(_QWORD *)(v164 + 16);
    v150 = (uint64_t)(v4 + 55);
    OUTLINED_FUNCTION_21_1();
    v52 = v164;
    v53 = 1;
    while (1)
    {
      v4[72] = v1;
      v4[71] = v48;
      v4[70] = v53;
      v4[69] = v52;
      v4[68] = v6;
      v7 = MEMORY[0x24BEE4AF8];
      v4[53] = MEMORY[0x24BEE4AF8];
      v4[50] = v7;
      v4[51] = v7;
      if (v6)
        break;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_42();
      v48 = v7;
LABEL_162:
      v135 = v4[50];
      v134 = v4[51];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v1 = v4[72];
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_44_5();
        v1 = v142;
      }
      v9 = *(_QWORD *)(v1 + 16);
      if (v9 >= *(_QWORD *)(v1 + 24) >> 1)
      {
        OUTLINED_FUNCTION_44_5();
        v1 = v143;
      }
      v137 = v4[58];
      *(_QWORD *)(v1 + 16) = v9 + 1;
      *(_QWORD *)(v1 + 8 * v9 + 32) = v134;
      v138 = *(_QWORD *)(v137 + 368);
      v44 = __OFADD__(v138, 1);
      v139 = v138 + 1;
      if (v44)
        goto LABEL_193;
      v140 = v4[70];
      v141 = v4[67] - 1;
      *(_QWORD *)(v4[58] + 368) = v139;
      if (v140 != v141)
      {
        if (v48 >> 62)
        {
          OUTLINED_FUNCTION_21_1();
          v6 = OUTLINED_FUNCTION_84_4();
          OUTLINED_FUNCTION_42();
          v52 = v135;
        }
        else
        {
          v52 = v135;
          v6 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v53 = v140 + 1;
        if (v6 == *(_QWORD *)(v52 + 16))
          continue;
      }
      goto LABEL_46;
    }
    swift_bridgeObjectRetain();
    v54 = 0;
    while (1)
    {
      v4[73] = v54;
      v55 = v4[69];
      if (v54 >= *(_QWORD *)(v55 + 16))
        goto LABEL_183;
      if (!*(_QWORD *)(v4[57] + 16))
        goto LABEL_156;
      v56 = OUTLINED_FUNCTION_138_1(v55 + 32 * v54);
      if ((v57 & 1) == 0)
        goto LABEL_156;
      v58 = v4[58];
      v7 = v4[71] & 0xC000000000000001;
      OUTLINED_FUNCTION_98_3(*(_QWORD *)(v4[57] + 56) + 40 * v56);
      outlined init with take of LogitCollection(v155, (uint64_t)v159);
      v59 = ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)(v159, v9, v6);
      v4[74] = v59;
      v60 = v4[71];
      if (v7)
        OUTLINED_FUNCTION_129_3();
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v54 >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_184;
      OUTLINED_FUNCTION_29_6();
      OUTLINED_FUNCTION_4_0();
      v6 = *(_QWORD *)(v58 + 24);
      OUTLINED_FUNCTION_52();
      OUTLINED_FUNCTION_116();
      if (v6 >> 62)
      {
        OUTLINED_FUNCTION_52();
        v10 = OUTLINED_FUNCTION_54_6();
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
        v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v11 = v156;
      v164 = v59;
      v157 = v54;
      if (v10)
      {
        *v156 = (uint64_t)v4;
        OUTLINED_FUNCTION_56_3();
        if (v10 < 0)
        {
          __break(1u);
          goto LABEL_187;
        }
        v61 = 0;
        v1 = *v156;
        do
        {
          if ((v6 & 0xC000000000000001) != 0)
            v62 = MEMORY[0x2495A9EB0](v61, v6);
          else
            v62 = OUTLINED_FUNCTION_105_2();
          v63 = *(_QWORD *)(v62 + 16);
          swift_release();
          *v11 = v1;
          v2 = *(_QWORD *)(v1 + 16);
          if (v2 >= *(_QWORD *)(v1 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v11 = v156;
            v1 = *v156;
          }
          ++v61;
          *(_QWORD *)(v1 + 16) = v2 + 1;
          *(_QWORD *)(v1 + 8 * v2 + 32) = v63;
        }
        while (v10 != v61);
        OUTLINED_FUNCTION_7_0();
        v59 = v164;
      }
      else
      {
        OUTLINED_FUNCTION_7_0();
        v1 = (uint64_t)v4;
      }
      v7 = *(_QWORD *)(v59 + 16);
      if (v7)
      {
        *(_QWORD *)v158 = v4;
        OUTLINED_FUNCTION_56_3();
        v64 = (_QWORD *)v158;
        v4 = *(_QWORD **)v158;
        v65 = *(_QWORD *)(*(_QWORD *)v158 + 16);
        v66 = (unint64_t *)(v59 + 56);
        v10 = v7;
        do
        {
          v67 = *v66;
          v66 += 4;
          v2 = v67;
          *v64 = v4;
          if (v65 >= v4[3] >> 1)
          {
            OUTLINED_FUNCTION_10_14();
            v64 = (_QWORD *)v158;
            v4 = *(_QWORD **)v158;
          }
          v4[2] = v65 + 1;
          v4[v65++ + 4] = v2;
          --v10;
        }
        while (v10);
      }
      v68 = Set.init(minimumCapacity:)();
      v69 = v4[2];
      if (v69)
      {
        v2 = 0;
        v10 = (uint64_t)(v4 + 4);
        while (1)
        {
          while (1)
          {
            ++v2;
            OUTLINED_FUNCTION_157_1();
            OUTLINED_FUNCTION_25_8();
            if ((v70 & 1) != 0)
              break;
LABEL_82:
            swift_isUniquelyReferenced_nonNull_native();
            v166[0] = v68;
            OUTLINED_FUNCTION_62_7();
            v68 = v166[0];
            OUTLINED_FUNCTION_74();
            if (v2 == v69)
            {
LABEL_83:
              OUTLINED_FUNCTION_116_0();
              v59 = v164;
              goto LABEL_85;
            }
          }
          OUTLINED_FUNCTION_102_3();
          while (!v71)
          {
            OUTLINED_FUNCTION_21_8();
            if ((v72 & 1) == 0)
              goto LABEL_82;
            OUTLINED_FUNCTION_102_3();
          }
          if (v2 == v69)
            goto LABEL_83;
        }
      }
      OUTLINED_FUNCTION_116_0();
LABEL_85:
      OUTLINED_FUNCTION_122();
      v73 = Set.init(minimumCapacity:)();
      v74 = *(_QWORD *)(v1 + 16);
      if (v74)
      {
        v2 = 0;
        v10 = v1 + 32;
        do
        {
          v75 = v73 + 56;
          while (1)
          {
            ++v2;
            v76 = OUTLINED_FUNCTION_157_1() & ~(-1 << *(_BYTE *)(v73 + 32));
            if (((*(_QWORD *)(v75 + ((v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0)
              break;
            OUTLINED_FUNCTION_102_3();
            if (!v71)
            {
              v78 = ~v77;
              do
              {
                v76 = (v76 + 1) & v78;
                if (((*(_QWORD *)(v75 + ((v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0)
                  goto LABEL_96;
                OUTLINED_FUNCTION_102_3();
              }
              while (!v71);
            }
            if (v2 == v74)
              goto LABEL_97;
          }
LABEL_96:
          OUTLINED_FUNCTION_56_2();
          v166[0] = v73;
          OUTLINED_FUNCTION_62_7();
          v73 = v166[0];
          OUTLINED_FUNCTION_74();
        }
        while (v2 != v74);
LABEL_97:
        OUTLINED_FUNCTION_63_0();
        v59 = v164;
      }
      else
      {
        OUTLINED_FUNCTION_63_0();
      }
      v79 = OUTLINED_FUNCTION_260();
      specialized _NativeSet.intersection(_:)(v79, v80);
      v6 = v81;
      v4 = v165;
      v165[75] = v81;
      OUTLINED_FUNCTION_42();
      v82 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v1 + 16);
      OUTLINED_FUNCTION_63_0();
      if (v82 == v9)
      {
        v2 = (unint64_t)v153;
        if (v7)
        {
          *v153 = (uint64_t *)MEMORY[0x24BEE4AF8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v9 = OUTLINED_FUNCTION_50_8();
          v10 = v59 + 56;
          v83 = v7;
          do
          {
            v10 += 32;
            OUTLINED_FUNCTION_12_10();
            OUTLINED_FUNCTION_7_17();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            --v83;
          }
          while (v83);
          v11 = *v153;
        }
        else
        {
          v11 = (uint64_t *)MEMORY[0x24BEE4AF8];
        }
        v12 = v165[70];
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_188;
        v111 = v165[72];
        v112 = v111 + 8 * (v12 - 1);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v12 - 1, 1, v111);
        v113 = *(_QWORD *)(v112 + 32);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v157, (v113 & 0xC000000000000001) == 0);
        if ((v113 & 0xC000000000000001) != 0)
        {
          OUTLINED_FUNCTION_122();
          v114 = MEMORY[0x2495A9EB0](v157, v113);
          OUTLINED_FUNCTION_63_0();
        }
        else
        {
          v114 = *(_QWORD *)(v113 + 8 * v157 + 32);
          OUTLINED_FUNCTION_274_0();
        }
        v10 = v165[71] & 0xC000000000000001;
        OUTLINED_FUNCTION_4_0();
        v1 = *(_QWORD *)(v114 + 24);
        *(_QWORD *)(v114 + 24) = v11;
        OUTLINED_FUNCTION_21_1();
        OUTLINED_FUNCTION_63_0();
        OUTLINED_FUNCTION_19_3();
        specialized Array.append<A>(contentsOf:)((unint64_t)v11);
        if (v10)
          OUTLINED_FUNCTION_129_3();
        OUTLINED_FUNCTION_29_6();
        OUTLINED_FUNCTION_4_0();
        v9 = *(_QWORD *)(v163 + 24);
        OUTLINED_FUNCTION_18_3();
        OUTLINED_FUNCTION_116();
        specialized Array.append<A>(contentsOf:)(v9);
        OUTLINED_FUNCTION_92_1();
        specialized Array.append<A>(contentsOf:)();
        if (v7)
        {
          *(_QWORD *)v150 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_56_3();
          v2 = *(_QWORD *)v150;
          v115 = *(_QWORD *)(*(_QWORD *)v150 + 16);
          v10 = 32;
          do
          {
            v1 = *(_QWORD *)(v164 + v10);
            OUTLINED_FUNCTION_136_2();
            v9 = v115 + 1;
            if (v115 >= v116 >> 1)
            {
              OUTLINED_FUNCTION_10_14();
              v2 = *(_QWORD *)v150;
            }
            *(_QWORD *)(v2 + 16) = v9;
            *(_QWORD *)(v2 + 8 * v115 + 32) = v1;
            v10 += 32;
            ++v115;
            --v7;
          }
          while (v7);
          OUTLINED_FUNCTION_161();
        }
        else
        {
          OUTLINED_FUNCTION_161();
          v2 = MEMORY[0x24BEE4AF8];
        }
        v7 = v165[58];
        specialized Set.formUnion<A>(_:)(v2);
        v11 = *(uint64_t **)(v6 + 16);
        v117 = OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_141(v117, v118, v119, v120, v121, v122, v123, v124, v149, v150, v151, v152, (uint64_t)v153, v154, (uint64_t)v155, (uint64_t)v156, v157, v158, (uint64_t)v159);
        v125 = *(_QWORD *)(v7 + 344);
        v44 = __OFADD__(v125, v11);
        v12 = (unint64_t)v11 + v125;
        if (v44)
          goto LABEL_189;
        *(_QWORD *)(v165[58] + 344) = v12;
        goto LABEL_156;
      }
      v84 = *(_QWORD *)(v59 + 16);
      v165[76] = v84;
      if (v84)
        break;
      OUTLINED_FUNCTION_30();
LABEL_155:
      v126 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_141(v126, v127, v128, v129, v130, v131, v132, v133, v149, v150, v151, v152, (uint64_t)v153, v154, (uint64_t)v155, (uint64_t)v156, v157, v158, (uint64_t)v159);
LABEL_156:
      v54 = v4[73] + 1;
      if (v54 == v4[68])
      {
        OUTLINED_FUNCTION_19_6();
        OUTLINED_FUNCTION_42();
        v48 = v4[53];
        goto LABEL_162;
      }
    }
    v85 = 0;
LABEL_106:
    v4[77] = v85;
    v86 = v4[75];
    v87 = (_QWORD *)(v4[74] + 32 * v85);
    v9 = v87[4];
    v4[78] = v9;
    v88 = v87[5];
    v4[79] = v88;
    v89 = v87[6];
    v4[80] = v89;
    v1 = v87[7];
    v4[81] = v1;
    specialized Set.contains(_:)(v1, v86);
    v7 = v4[70];
    if ((v90 & 1) == 0)
      break;
    OUTLINED_FUNCTION_50_8();
    OUTLINED_FUNCTION_12_10();
    OUTLINED_FUNCTION_170_2();
    if ((v7 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_125_1();
      if (v94)
        goto LABEL_180;
      v2 = v91;
      v6 = v4[73];
      v164 = v88;
      if ((*(_QWORD *)(v92 + 8 * v93 + 32) & 0xC000000000000001) != 0)
      {
        OUTLINED_FUNCTION_21_1();
        OUTLINED_FUNCTION_81_1();
      }
      OUTLINED_FUNCTION_128_3();
      v7 = (unint64_t)v160;
      if (v94)
        goto LABEL_181;
      OUTLINED_FUNCTION_35_8();
      OUTLINED_FUNCTION_4_0();
      v95 = OUTLINED_FUNCTION_160_1();
      MEMORY[0x2495A9BB0](v95);
      if (*(_QWORD *)((*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        OUTLINED_FUNCTION_13_4();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      OUTLINED_FUNCTION_51_5();
      OUTLINED_FUNCTION_30();
      v96 = OUTLINED_FUNCTION_160_1();
      MEMORY[0x2495A9BB0](v96);
      OUTLINED_FUNCTION_36_6();
      if (v94)
        OUTLINED_FUNCTION_13_4();
      v97 = v4[71] & 0xC000000000000001;
      OUTLINED_FUNCTION_148_1();
      specialized Array._endMutation()();
      if (v97)
        v6 = MEMORY[0x2495A9EB0](v4[73], v4[71]);
      else
        OUTLINED_FUNCTION_35_8();
      OUTLINED_FUNCTION_4_0();
      v98 = *(_QWORD *)(v6 + 24);
      OUTLINED_FUNCTION_21_1();
      OUTLINED_FUNCTION_30();
      if (v98 >> 62)
      {
        OUTLINED_FUNCTION_21_1();
        v99 = OUTLINED_FUNCTION_84_4();
        if (!v99)
          goto LABEL_195;
      }
      else
      {
        v99 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
        OUTLINED_FUNCTION_21_1();
        if (!v99)
          goto LABEL_195;
      }
      v100 = 0;
      while (1)
      {
        if ((v98 & 0xC000000000000001) != 0)
          OUTLINED_FUNCTION_81_1();
        v101 = *(_QWORD *)(v98 + 8 * v100 + 32);
        OUTLINED_FUNCTION_152_2();
        v102 = v100 + 1;
        if (__OFADD__(v100, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        if (*(_QWORD *)(v101 + 16) == *(_QWORD *)(v2 + 16))
          break;
        OUTLINED_FUNCTION_443();
        ++v100;
        if (v102 == v99)
          goto LABEL_195;
      }
      v103 = OUTLINED_FUNCTION_19_6();
      MEMORY[0x2495A9BB0](v103);
      OUTLINED_FUNCTION_36_6();
      v4 = v165;
      if (v94)
        OUTLINED_FUNCTION_13_4();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v104 = *v162;
      if ((OUTLINED_FUNCTION_56_2() & 1) == 0)
      {
        OUTLINED_FUNCTION_30_10();
        v104 = v109;
      }
      v7 = *(_QWORD *)(v104 + 16);
      v6 = v7 + 1;
      if (v7 >= *(_QWORD *)(v104 + 24) >> 1)
      {
        OUTLINED_FUNCTION_32_8();
        v104 = v110;
      }
      v105 = v165[58];
      *(_QWORD *)(v104 + 16) = v6;
      v106 = (_QWORD *)(v104 + 32 * v7);
      v106[4] = v9;
      v106[5] = v164;
      v106[6] = v89;
      v106[7] = v1;
      v165[50] = v104;
      specialized Set._Variant.insert(_:)(v166, v9);
      swift_release();
      v107 = *(_QWORD *)(v105 + 344);
      v44 = __OFADD__(v107, 1);
      v108 = v107 + 1;
      if (v44)
        goto LABEL_182;
      *(_QWORD *)(v165[58] + 344) = v108;
      v85 = v165[77] + 1;
      if (v85 != v165[76])
        goto LABEL_106;
      swift_release();
      goto LABEL_155;
    }
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    OUTLINED_FUNCTION_21_1();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_42();
    v8 = v164;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  v144 = *(_QWORD *)(v4[58] + 320);
  v44 = __OFSUB__(v144, v7);
  v145 = v144 - v7;
  if (v44)
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
  if (__OFSUB__(v145, 1))
  {
LABEL_198:
    __break(1u);
    return;
  }
  v146 = (_QWORD *)swift_task_alloc();
  v4[82] = v146;
  *v146 = v4;
  v146[1] = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
LABEL_28:
  OUTLINED_FUNCTION_118_2();
  ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(v28, v29, v30, v31);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  unint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148[3];

  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(v2 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(v148, v5);
      --v3;
    }
    while (v3);
  }
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 560);
  swift_bridgeObjectRelease();
  v8 = v7 - 1;
  OUTLINED_FUNCTION_50_8();
  OUTLINED_FUNCTION_12_10();
  v9 = OUTLINED_FUNCTION_7_17();
  OUTLINED_FUNCTION_4_0();
  *(_QWORD *)(v9 + 24) = v6;
  swift_bridgeObjectRelease();
  if (v8 < 0)
  {
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  OUTLINED_FUNCTION_125_1();
  if (v10)
  {
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  OUTLINED_FUNCTION_166_0();
  if (!v11)
  {
LABEL_155:
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_81_1();
  }
  OUTLINED_FUNCTION_128_3();
  if (v10)
  {
    __break(1u);
    goto LABEL_157;
  }
  OUTLINED_FUNCTION_35_8();
  v1 = v0 + 408;
  OUTLINED_FUNCTION_4_0();
  v12 = OUTLINED_FUNCTION_274_0();
  MEMORY[0x2495A9BB0](v12);
  if (*(_QWORD *)((*(_QWORD *)(v0 + 384) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 384) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
LABEL_157:
    OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_100_3();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_89_3();
  OUTLINED_FUNCTION_30();
  v13 = OUTLINED_FUNCTION_274_0();
  MEMORY[0x2495A9BB0](v13);
  OUTLINED_FUNCTION_36_6();
  if (v10)
    OUTLINED_FUNCTION_73_4();
  OUTLINED_FUNCTION_85_2();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v14 = *(_QWORD *)(v0 + 400);
  if ((OUTLINED_FUNCTION_56_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_30_10();
    v14 = v134;
  }
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v15 + 1;
  if (v15 >= *(_QWORD *)(v14 + 24) >> 1)
  {
    OUTLINED_FUNCTION_32_8();
    v14 = v135;
  }
  v145 = v0 + 176;
  v17 = *(_OWORD *)(v0 + 624);
  v18 = *(_OWORD *)(v0 + 640);
  *(_QWORD *)(v14 + 16) = v16;
  v19 = v14 + 32 * v15;
  *(_OWORD *)(v19 + 32) = v17;
  *(_OWORD *)(v19 + 48) = v18;
  *(_QWORD *)(v0 + 400) = v14;
  v20 = OUTLINED_FUNCTION_274_0();
  MEMORY[0x2495A9BB0](v20);
  OUTLINED_FUNCTION_36_6();
  if (v10)
    OUTLINED_FUNCTION_13_4();
  v141 = (uint64_t *)(v0 + 384);
  v139 = (uint64_t *)(v0 + 392);
  v137 = (uint64_t *)(v0 + 440);
  v138 = (unint64_t *)(v0 + 416);
  OUTLINED_FUNCTION_85_2();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_19_3();
  v140 = *(_QWORD *)(v0 + 680);
  v144 = v1;
LABEL_19:
  v21 = *(_QWORD *)(v0 + 616) + 1;
  if (v21 == *(_QWORD *)(v0 + 608))
  {
    swift_release();
    while (1)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v145);
      v22 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        while (1)
        {
          v23 = *(_QWORD *)(v0 + 584) + 1;
          v24 = *(_QWORD *)(v0 + 552);
          if (v23 != *(_QWORD *)(v0 + 544))
            goto LABEL_37;
          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_42();
          for (i = *(_QWORD *)(v0 + 424); ; i = v22)
          {
            v24 = *(_QWORD *)(v0 + 400);
            v26 = *(_QWORD *)(v0 + 408);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v28 = *(_QWORD *)(v0 + 576);
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              OUTLINED_FUNCTION_44_5();
              v28 = v36;
            }
            v29 = *(_QWORD *)(v28 + 16);
            if (v29 >= *(_QWORD *)(v28 + 24) >> 1)
            {
              OUTLINED_FUNCTION_44_5();
              v28 = v37;
            }
            v30 = *(_QWORD *)(v0 + 464);
            *(_QWORD *)(v28 + 16) = v29 + 1;
            *(_QWORD *)(v28 + 8 * v29 + 32) = v26;
            v31 = *(_QWORD *)(v30 + 368);
            v32 = __OFADD__(v31, 1);
            v33 = v31 + 1;
            if (v32)
              goto LABEL_151;
            v34 = *(_QWORD *)(v0 + 560);
            v35 = *(_QWORD *)(v0 + 536) - 1;
            *(_QWORD *)(*(_QWORD *)(v0 + 464) + 368) = v33;
            if (v34 == v35)
              goto LABEL_173;
            if (i >> 62)
            {
              OUTLINED_FUNCTION_65_0();
              v16 = OUTLINED_FUNCTION_54_6();
              OUTLINED_FUNCTION_50_2();
            }
            else
            {
              v16 = *(_QWORD *)((i & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v16 != *(_QWORD *)(v24 + 16))
            {
LABEL_173:
              if (*(_QWORD *)(v28 + 16))
              {
                OUTLINED_FUNCTION_115_2();
                OUTLINED_FUNCTION_52();
                OUTLINED_FUNCTION_50_1();
                specialized _copyCollectionToContiguousArray<A>(_:)();
                v125 = v124;
                OUTLINED_FUNCTION_51_1();
                v148[0] = v125;
                specialized MutableCollection<>.sort(by:)(v148);
                if (!v140)
                {
                  OUTLINED_FUNCTION_50_2();
                  OUTLINED_FUNCTION_119_0();
                  OUTLINED_FUNCTION_51_1();
                  OUTLINED_FUNCTION_63_0();
                  OUTLINED_FUNCTION_149_2();
                  OUTLINED_FUNCTION_104_3();
                  __asm { BR              X2 }
                }
                OUTLINED_FUNCTION_104_3();
                swift_release();
                return;
              }
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
              goto LABEL_162;
            }
            *(_QWORD *)(v0 + 576) = v28;
            *(_QWORD *)(v0 + 568) = i;
            *(_QWORD *)(v0 + 560) = v34 + 1;
            *(_QWORD *)(v0 + 552) = v24;
            *(_QWORD *)(v0 + 544) = v16;
            *(_QWORD *)(v0 + 424) = v22;
            *(_QWORD *)(v0 + 400) = v22;
            *(_QWORD *)(v0 + 408) = v22;
            if (v16)
              break;
            OUTLINED_FUNCTION_50_2();
            OUTLINED_FUNCTION_119_0();
          }
          OUTLINED_FUNCTION_85_1();
          v23 = 0;
LABEL_37:
          *(_QWORD *)(v0 + 584) = v23;
          if (v23 >= *(_QWORD *)(v24 + 16))
            goto LABEL_152;
          if (*(_QWORD *)(*(_QWORD *)(v0 + 456) + 16))
          {
            v38 = OUTLINED_FUNCTION_138_1(v24 + 32 * v23);
            if ((v39 & 1) != 0)
              break;
          }
        }
        v40 = *(_QWORD *)(v0 + 464);
        v41 = *(_QWORD *)(v0 + 568) & 0xC000000000000001;
        OUTLINED_FUNCTION_135_2(*(_QWORD *)(*(_QWORD *)(v0 + 456) + 56) + 40 * v38);
        outlined init with take of LogitCollection((__int128 *)(v0 + 16), v145);
        v42 = (_QWORD *)OUTLINED_FUNCTION_100_3();
        v142 = ThreeStageSpeculativeDecoder.makeDraftTokenBeam(draftLogits:draftNode:targetNode:)(v42, v43, v16);
        *(_QWORD *)(v0 + 592) = v142;
        v44 = *(_QWORD *)(v0 + 568);
        v136 = v23;
        if (v41)
        {
          v40 = MEMORY[0x2495A9EB0](v23, v44);
        }
        else
        {
          if (v23 >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_163;
          OUTLINED_FUNCTION_29_6();
        }
        OUTLINED_FUNCTION_4_0();
        v45 = *(_QWORD *)(v40 + 24);
        OUTLINED_FUNCTION_18_3();
        OUTLINED_FUNCTION_116();
        v46 = MEMORY[0x24BEE4AF8];
        if (v45 >> 62)
        {
          OUTLINED_FUNCTION_18_3();
          v47 = OUTLINED_FUNCTION_54_6();
          OUTLINED_FUNCTION_20_2();
        }
        else
        {
          v47 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v48 = (_QWORD *)(v0 + 392);
        if (v47)
        {
          *v139 = v46;
          OUTLINED_FUNCTION_56_3();
          if (v47 < 0)
            goto LABEL_166;
          v49 = 0;
          v50 = *v139;
          do
          {
            if ((v45 & 0xC000000000000001) != 0)
            {
              v51 = OUTLINED_FUNCTION_85_2();
              MEMORY[0x2495A9EB0](v51);
            }
            else
            {
              OUTLINED_FUNCTION_105_2();
            }
            OUTLINED_FUNCTION_133_0();
            *v48 = v50;
            v52 = *(_QWORD *)(v50 + 16);
            v41 = v52 + 1;
            if (v52 >= *(_QWORD *)(v50 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v48 = (_QWORD *)(v0 + 392);
              v50 = *v139;
            }
            ++v49;
            *(_QWORD *)(v50 + 16) = v41;
            *(_QWORD *)(v50 + 8 * v52 + 32) = v23;
          }
          while (v47 != v49);
          OUTLINED_FUNCTION_20_2();
          v46 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          OUTLINED_FUNCTION_20_2();
          v50 = v46;
        }
        v53 = *(_QWORD *)(v142 + 16);
        if (v53)
        {
          *v141 = v46;
          OUTLINED_FUNCTION_56_3();
          v54 = (_QWORD *)(v0 + 384);
          v46 = *v141;
          v55 = *(_QWORD *)(*v141 + 16);
          v41 = v142 + 56;
          v56 = v53;
          do
          {
            v58 = *(_QWORD *)v41;
            v41 += 32;
            v57 = v58;
            *v54 = v46;
            if (v55 >= *(_QWORD *)(v46 + 24) >> 1)
            {
              OUTLINED_FUNCTION_10_14();
              v54 = (_QWORD *)(v0 + 384);
              v46 = *v141;
            }
            *(_QWORD *)(v46 + 16) = v55 + 1;
            *(_QWORD *)(v46 + 8 * v55++ + 32) = v57;
            --v56;
          }
          while (v56);
        }
        v59 = Set.init(minimumCapacity:)();
        v60 = *(_QWORD *)(v46 + 16);
        if (v60)
        {
          v61 = 0;
          do
          {
            v62 = v59 + 56;
            while (1)
            {
              ++v61;
              static Hasher._hash(seed:_:)();
              OUTLINED_FUNCTION_103_4();
              if (((*(_QWORD *)(v62 + v63) >> v41) & 1) == 0)
                break;
              OUTLINED_FUNCTION_146_1();
              while (!v11)
              {
                OUTLINED_FUNCTION_144_0();
                if (((*(_QWORD *)(v62 + v64) >> v41) & 1) == 0)
                  goto LABEL_71;
                OUTLINED_FUNCTION_146_1();
              }
              if (v61 == v60)
                goto LABEL_72;
            }
LABEL_71:
            swift_isUniquelyReferenced_nonNull_native();
            v148[0] = v59;
            OUTLINED_FUNCTION_112_4();
            v59 = v148[0];
            OUTLINED_FUNCTION_74();
          }
          while (v61 != v60);
        }
LABEL_72:
        OUTLINED_FUNCTION_116_0();
        OUTLINED_FUNCTION_92_1();
        v65 = Set.init(minimumCapacity:)();
        v66 = *(_QWORD *)(v50 + 16);
        if (v66)
        {
          v67 = 0;
          do
          {
            v68 = v65 + 56;
            while (1)
            {
              ++v67;
              static Hasher._hash(seed:_:)();
              OUTLINED_FUNCTION_103_4();
              if (((*(_QWORD *)(v68 + v69) >> v41) & 1) == 0)
                break;
              OUTLINED_FUNCTION_146_1();
              while (!v11)
              {
                OUTLINED_FUNCTION_144_0();
                if (((*(_QWORD *)(v68 + v70) >> v41) & 1) == 0)
                  goto LABEL_82;
                OUTLINED_FUNCTION_146_1();
              }
              if (v67 == v66)
                goto LABEL_83;
            }
LABEL_82:
            OUTLINED_FUNCTION_56_2();
            v148[0] = v65;
            OUTLINED_FUNCTION_112_4();
            v65 = v148[0];
            OUTLINED_FUNCTION_74();
          }
          while (v67 != v66);
        }
LABEL_83:
        OUTLINED_FUNCTION_161();
        specialized _NativeSet.intersection(_:)(v65, v59);
        v72 = v71;
        *(_QWORD *)(v0 + 600) = v71;
        OUTLINED_FUNCTION_42();
        v73 = *(_QWORD *)(v72 + 16);
        v16 = *(_QWORD *)(v50 + 16);
        OUTLINED_FUNCTION_161();
        v74 = v142;
        if (v73 != v16)
          break;
        v146 = v72;
        if (v53)
        {
          *v138 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v75 = v142 + 56;
          v76 = v53;
          do
          {
            v75 += 32;
            OUTLINED_FUNCTION_12_10();
            OUTLINED_FUNCTION_7_17();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            OUTLINED_FUNCTION_155_1();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            --v76;
          }
          while (v76);
          v77 = *v138;
          v74 = v142;
        }
        else
        {
          v77 = MEMORY[0x24BEE4AF8];
        }
        v78 = *(_QWORD *)(v0 + 560);
        if (v78 < 0)
          goto LABEL_164;
        v79 = *(_QWORD *)(v0 + 576);
        v80 = v79 + 8 * (v78 - 1);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v78 - 1, 1, v79);
        v81 = *(_QWORD *)(v80 + 32);
        v82 = v81 & 0xC000000000000001;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v136, (v81 & 0xC000000000000001) == 0);
        if ((v81 & 0xC000000000000001) != 0)
        {
          OUTLINED_FUNCTION_65_0();
          v83 = v136;
          v82 = MEMORY[0x2495A9EB0](v136, v81);
          OUTLINED_FUNCTION_50_2();
        }
        else
        {
          v83 = v136;
          OUTLINED_FUNCTION_35_8();
        }
        v84 = *(_QWORD *)(v0 + 568) & 0xC000000000000001;
        OUTLINED_FUNCTION_4_0();
        *(_QWORD *)(v82 + 24) = v77;
        OUTLINED_FUNCTION_21_1();
        OUTLINED_FUNCTION_50_2();
        OUTLINED_FUNCTION_30();
        v85 = v77;
        v86 = v144;
        specialized Array.append<A>(contentsOf:)(v85);
        if (v84)
          v86 = MEMORY[0x2495A9EB0](v83, *(_QWORD *)(v0 + 568));
        else
          OUTLINED_FUNCTION_29_6();
        OUTLINED_FUNCTION_4_0();
        v87 = *(_QWORD *)(v86 + 24);
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_116();
        specialized Array.append<A>(contentsOf:)(v87);
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)();
        v22 = MEMORY[0x24BEE4AF8];
        if (v53)
        {
          *v137 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v88 = *v137;
          v89 = *(_QWORD *)(*v137 + 16);
          v90 = 32;
          do
          {
            v91 = *(_QWORD *)(v74 + v90);
            *v137 = v88;
            if (v89 >= *(_QWORD *)(v88 + 24) >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v88 = *v137;
            }
            *(_QWORD *)(v88 + 16) = v89 + 1;
            *(_QWORD *)(v88 + 8 * v89 + 32) = v91;
            v90 += 32;
            ++v89;
            --v53;
          }
          while (v53);
          OUTLINED_FUNCTION_116_0();
          v22 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          OUTLINED_FUNCTION_116_0();
          v88 = v22;
        }
        v16 = *(_QWORD *)(v0 + 464);
        OUTLINED_FUNCTION_156_1(v88);
        v92 = *(_QWORD *)(v146 + 16);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v145);
        v93 = *(_QWORD *)(v16 + 344);
        v32 = __OFADD__(v93, v92);
        v94 = v93 + v92;
        if (v32)
          goto LABEL_165;
        *(_QWORD *)(*(_QWORD *)(v0 + 464) + 344) = v94;
      }
      v95 = *(_QWORD *)(v142 + 16);
      *(_QWORD *)(v0 + 608) = v95;
      if (v95)
        break;
      OUTLINED_FUNCTION_224_1();
    }
    v21 = 0;
  }
  *(_QWORD *)(v0 + 616) = v21;
  v96 = *(_QWORD *)(v0 + 600);
  v97 = (_QWORD *)(*(_QWORD *)(v0 + 592) + 32 * v21);
  v98 = v97[4];
  *(_QWORD *)(v0 + 624) = v98;
  v99 = v97[5];
  *(_QWORD *)(v0 + 632) = v99;
  v100 = v97[6];
  *(_QWORD *)(v0 + 640) = v100;
  v101 = v97[7];
  *(_QWORD *)(v0 + 648) = v101;
  specialized Set.contains(_:)(v101, v96);
  v102 = *(_QWORD *)(v0 + 560);
  if ((v103 & 1) != 0)
  {
    OUTLINED_FUNCTION_12_10();
    OUTLINED_FUNCTION_170_2();
    if (v102 < 0)
      goto LABEL_159;
    OUTLINED_FUNCTION_125_1();
    if (v10)
      goto LABEL_160;
    v105 = v104;
    v147 = v100;
    OUTLINED_FUNCTION_166_0();
    if (!v11)
    {
      OUTLINED_FUNCTION_21_1();
      OUTLINED_FUNCTION_81_1();
    }
    OUTLINED_FUNCTION_128_3();
    if (v10)
      goto LABEL_161;
    OUTLINED_FUNCTION_35_8();
    OUTLINED_FUNCTION_4_0();
    v106 = OUTLINED_FUNCTION_152_2();
    MEMORY[0x2495A9BB0](v106);
    if (*(_QWORD *)((*(_QWORD *)(v102 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v102 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      OUTLINED_FUNCTION_13_4();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    OUTLINED_FUNCTION_89_3();
    OUTLINED_FUNCTION_30();
    v107 = OUTLINED_FUNCTION_152_2();
    MEMORY[0x2495A9BB0](v107);
    OUTLINED_FUNCTION_36_6();
    if (v10)
      OUTLINED_FUNCTION_73_4();
    v108 = *(_QWORD *)(v0 + 568) & 0xC000000000000001;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (v108)
      v102 = MEMORY[0x2495A9EB0](*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 568));
    else
      OUTLINED_FUNCTION_35_8();
    v143 = v98;
    OUTLINED_FUNCTION_4_0();
    v109 = *(_QWORD *)(v102 + 24);
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_30();
    v110 = v99;
    if (v109 >> 62)
    {
      OUTLINED_FUNCTION_21_1();
      v111 = OUTLINED_FUNCTION_84_4();
      if (!v111)
        goto LABEL_167;
    }
    else
    {
      v111 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_21_1();
      if (!v111)
        goto LABEL_167;
    }
    v112 = 0;
    while (1)
    {
      if ((v109 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_81_1();
      v113 = *(_QWORD *)(v109 + 8 * v112 + 32);
      OUTLINED_FUNCTION_160_1();
      v114 = v112 + 1;
      if (__OFADD__(v112, 1))
        break;
      if (*(_QWORD *)(v113 + 16) == *(_QWORD *)(v105 + 16))
      {
        v115 = OUTLINED_FUNCTION_19_6();
        MEMORY[0x2495A9BB0](v115);
        OUTLINED_FUNCTION_36_6();
        if (v10)
          OUTLINED_FUNCTION_13_4();
        OUTLINED_FUNCTION_148_1();
        specialized Array._endMutation()();
        v116 = *(_QWORD *)(v0 + 400);
        if ((OUTLINED_FUNCTION_56_2() & 1) == 0)
        {
          OUTLINED_FUNCTION_30_10();
          v116 = v122;
        }
        v117 = *(_QWORD *)(v116 + 16);
        v16 = v117 + 1;
        if (v117 >= *(_QWORD *)(v116 + 24) >> 1)
        {
          OUTLINED_FUNCTION_32_8();
          v116 = v123;
        }
        v118 = *(_QWORD *)(v0 + 464);
        *(_QWORD *)(v116 + 16) = v16;
        v119 = (_QWORD *)(v116 + 32 * v117);
        v119[4] = v143;
        v119[5] = v110;
        v119[6] = v147;
        v119[7] = v101;
        *(_QWORD *)(v0 + 400) = v116;
        specialized Set._Variant.insert(_:)(v148, v143);
        OUTLINED_FUNCTION_443();
        v120 = *(_QWORD *)(v118 + 344);
        v32 = __OFADD__(v120, 1);
        v121 = v120 + 1;
        if (!v32)
        {
          *(_QWORD *)(*(_QWORD *)(v0 + 464) + 344) = v121;
          goto LABEL_19;
        }
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        OUTLINED_FUNCTION_19_6();
        __break(1u);
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
      swift_release();
      ++v112;
      if (v114 == v111)
        goto LABEL_167;
    }
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  if (v102 < 0)
    goto LABEL_168;
  v127 = *(_QWORD *)(*(_QWORD *)(v0 + 464) + 320);
  v32 = __OFSUB__(v127, v102);
  v128 = v127 - v102;
  if (v32)
  {
LABEL_169:
    __break(1u);
  }
  else if (!__OFSUB__(v128, 1))
  {
    v129 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v129;
    *v129 = v0;
    v129[1] = ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:);
    OUTLINED_FUNCTION_104_3();
    ThreeStageSpeculativeDecoder.generateDraftModelTreeDirectly(treeDepth:startingDraftNode:startingTargetNode:isAddingToTinyTree:)(v130, v131, v132, v133);
    return;
  }
  __break(1u);
}

uint64_t ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 488));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 520));
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_65_1();
  v1[83] = v2;
  v1[84] = v3;
  v1[85] = v0;
  OUTLINED_FUNCTION_84();
  if (v0)
  {
    swift_release();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_2();
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  OUTLINED_FUNCTION_7_0();
  return OUTLINED_FUNCTION_27_6(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(result + 16);
  v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4)
      break;
    v7 = *(_QWORD *)(a2 + 32 + 8 * v3);
    v8 = v3 + 1;
LABEL_6:
    result = v2 == v5;
    if (v2 == v5)
    {
      v9 = 0;
      v10 = v5;
    }
    else
    {
      if (v2 >= v5)
        goto LABEL_18;
      v9 = *(_QWORD *)(v6 + 8 * v2);
      v10 = v2 + 1;
    }
    if (v3 == v4)
      return result;
    v11 = v2 != v5 && v7 == v9;
    v2 = v10;
    v3 = v8;
    if (!v11)
      return 0;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 128) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 136) = v2;
  *v2 = v1;
  v2[1] = ThreeStageSpeculativeDecoder.generateDraft();
  return ThreeStageSpeculativeDecoder.generateTinyModelTree()();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  if (one-time initialization token for device != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_15_4();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Log.device);
  v0[20] = v2;
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[18];
  if (v5)
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_121();
    *(_DWORD *)v7 = 134217984;
    if (v6 >> 62)
    {
      OUTLINED_FUNCTION_85_1();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_119_0();
    }
    else
    {
      v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    OUTLINED_FUNCTION_119_0();
    v0[15] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_37_2(&dword_248CAA000, v3, v4, "Generated %ld tiny model nodes.", v7);
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_19_6();

  Logger.logObject.getter();
  v9 = OUTLINED_FUNCTION_111();
  if (OUTLINED_FUNCTION_17_3(v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_248CAA000, v2, (os_log_type_t)v3, "Scoring the tiny model tokens against the draft model.", v10, 2u);
    OUTLINED_FUNCTION_0_1();
  }
  v11 = v0[16];

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_83_3(v11 + 64);
  v12 = v0[5];
  v13 = v0[6];
  OUTLINED_FUNCTION_110_3(v0 + 2);
  OUTLINED_FUNCTION_98_3(v11 + 280);
  v14 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  v0[21] = v14;
  *v14 = v0;
  v14[1] = ThreeStageSpeculativeDecoder.generateDraft();
  return OUTLINED_FUNCTION_67_5(v0[19], (uint64_t)(v0 + 7), v12, v13, v16);
}

{
  uint64_t *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[19];
  v1 = v0[20];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v3 = OUTLINED_FUNCTION_239_0();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v3, v4);
  v0[24] = v5;
  Logger.logObject.getter();
  v6 = OUTLINED_FUNCTION_111();
  if (OUTLINED_FUNCTION_264(v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_248CAA000, v1, (os_log_type_t)v2, "Creating a draft tree from the tiny model suggestion.", v7, 2u);
    OUTLINED_FUNCTION_0_1();
  }

  v8 = (_QWORD *)swift_task_alloc();
  v0[25] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = ThreeStageSpeculativeDecoder.generateDraft();
  v9 = OUTLINED_FUNCTION_109_3(v0[18]);
  return ThreeStageSpeculativeDecoder.constructDraftTreeFromTinyTree(firstTinyModelTokenBeam:draftLogitsByNode:)(v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_41_1();
    return OUTLINED_FUNCTION_3_15();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
    v4 = OUTLINED_FUNCTION_85_2();
    return v5(v4);
  }
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 144) = a1;
  *(_QWORD *)(v4 + 152) = a2;
  OUTLINED_FUNCTION_84();
  if (v2)
    return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v4 + 8));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t ThreeStageSpeculativeDecoder.generateDraft()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_37_5();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 176) = v1;
  v5 = swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_93_3(v5, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v2 + 184) = a1;
    OUTLINED_FUNCTION_93_3(v5, &demangling cache variable for type metadata for LogitPresampler?);
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_15();
}

uint64_t ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[80] = v2;
  v3[79] = a2;
  v3[78] = a1;
  return swift_task_switch();
}

uint64_t ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  os_log_type_t v88;
  float *v89;
  uint64_t v90;
  os_log_type_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  os_log_type_t v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;

  v107 = (uint64_t *)(v0 + 616);
  v1 = *(_QWORD **)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = v1[19];
  v4 = v1[13];
  v5 = v1[7];
  *(_QWORD *)(v0 + 560) = 0;
  LOBYTE(v6) = (_BYTE)v1 + 64;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4_0();
  v119 = *(_QWORD *)(v0 + 624);
  v120 = (_QWORD *)v0;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_48;
  v112 = v0 + 256;
  v113 = v0 + 136;
  v110 = v0 + 416;
  v111 = v0 + 392;
  v109 = v0 + 464;
  v103 = v0 + 440;
  v104 = v0 + 488;
  v105 = v0 + 536;
  v106 = v0 + 512;
  v114 = v0 + 96;
  while (2)
  {
    *(_QWORD *)(v0 + 672) = v119;
    *(_QWORD *)(v0 + 664) = v5;
    *(_QWORD *)(v0 + 656) = v4;
    *(_QWORD *)(v0 + 648) = v3;
    v7 = *(_QWORD *)(v0 + 632);
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v9 & 1) == 0)
      break;
    v10 = OUTLINED_FUNCTION_116_2(v8);
    outlined init with copy of DeterministicLanguageModelProtocol(v10, v113);
    OUTLINED_FUNCTION_163_0();
    v11 = *(_QWORD *)(v0 + 640);
    if ((*(_BYTE *)(v7 + 188) & 1) != 0)
    {
      if (*(_BYTE *)(v11 + 189) == 1)
      {
        OUTLINED_FUNCTION_83_3(v11 + 64);
        v99 = *(_QWORD *)(v0 + 80);
        v100 = *(_QWORD *)(v0 + 88);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v99);
        *(_OWORD *)(v0 + 192) = 0u;
        *(_QWORD *)(v0 + 208) = 0;
        *(_OWORD *)(v0 + 176) = 0u;
        v101 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 680) = v101;
        *v101 = v0;
        v101[1] = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
        return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v0 + 16, v4, v0 + 176, v99, v100);
      }
      OUTLINED_FUNCTION_110_3((_QWORD *)(v11 + 200));
      v12 = OUTLINED_FUNCTION_85_2();
      v14 = v13(v12);
      goto LABEL_31;
    }
    v15 = *(float *)(v7 + 184);
    OUTLINED_FUNCTION_39_3(v11 + 200);
    v16 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 288);
    v17 = (_QWORD *)OUTLINED_FUNCTION_260();
    v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
    if (v119 >> 62)
    {
      OUTLINED_FUNCTION_85_1();
      v20 = OUTLINED_FUNCTION_54_6();
    }
    else
    {
      v20 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_85_1();
    }
    v0 = -1;
    v115 = v6;
    v117 = v16;
    v108 = (uint64_t)v19;
    if (v20)
    {
      *v107 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      if (v20 < 0)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v21 = 0;
      v22 = *v107;
      do
      {
        if ((v119 & 0xC000000000000001) != 0)
          v23 = MEMORY[0x2495A9EB0](v21, v119);
        else
          v23 = OUTLINED_FUNCTION_105_2();
        v24 = *(_QWORD *)(v23 + 16);
        swift_release();
        *v107 = v22;
        v26 = *(_QWORD *)(v22 + 16);
        v25 = *(_QWORD *)(v22 + 24);
        if (v26 >= v25 >> 1)
        {
          OUTLINED_FUNCTION_44_2(v25);
          OUTLINED_FUNCTION_10_14();
          v22 = *v107;
        }
        ++v21;
        *(_QWORD *)(v22 + 16) = v26 + 1;
        *(_QWORD *)(v22 + 8 * v26 + 32) = v24;
      }
      while (v20 != v21);
      OUTLINED_FUNCTION_119_0();
    }
    else
    {
      OUTLINED_FUNCTION_119_0();
      v22 = MEMORY[0x24BEE4AF8];
    }
    v27 = Set.init(minimumCapacity:)();
    v28 = *(_QWORD *)(v22 + 16);
    if (v28)
    {
      v29 = 0;
      do
      {
        while (1)
        {
          ++v29;
          OUTLINED_FUNCTION_157_1();
          OUTLINED_FUNCTION_25_8();
          if ((v30 & 1) != 0)
            break;
LABEL_29:
          swift_isUniquelyReferenced_nonNull_native();
          OUTLINED_FUNCTION_62_7();
          OUTLINED_FUNCTION_74();
          if (v29 == v28)
            goto LABEL_30;
        }
        OUTLINED_FUNCTION_102_3();
        while (!v31)
        {
          OUTLINED_FUNCTION_21_8();
          if ((v32 & 1) == 0)
            goto LABEL_29;
          OUTLINED_FUNCTION_102_3();
        }
      }
      while (v29 != v28);
    }
LABEL_30:
    OUTLINED_FUNCTION_116_0();
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v115 + 16))(v114, v27, v117, v15);
    v33 = OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_141(v33, v34, v35, v36, v37, v38, v39, v40, v102, v103, v104, v105, v106, (uint64_t)v107, v108, v109, v110, v111, v112);
    v0 = (unint64_t)v120;
LABEL_31:
    v116 = *(_QWORD *)(v0 + 664);
    v118 = *(_QWORD *)(v0 + 672);
    v41 = *(_QWORD *)(v0 + 656);
    v42 = *(_QWORD **)(v0 + 640);
    OUTLINED_FUNCTION_4_0();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v42 + 14), v42[17]);
    OUTLINED_FUNCTION_165_1();
    v3 = OUTLINED_FUNCTION_82_3(v43, v44, v45, v46);
    OUTLINED_FUNCTION_51_5();
    OUTLINED_FUNCTION_4_0();
    v47 = v42[12];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v42 + 8), v42[11]);
    v4 = OUTLINED_FUNCTION_82_3(v41, v14, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 16));
    OUTLINED_FUNCTION_51_5();
    OUTLINED_FUNCTION_4_0();
    v48 = v42[6];
    v49 = OUTLINED_FUNCTION_239_0();
    __swift_mutable_project_boxed_opaque_existential_1(v49, v50);
    v5 = OUTLINED_FUNCTION_82_3(v116, v14, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 16));
    OUTLINED_FUNCTION_51_5();
    if (v118 >> 62)
    {
      OUTLINED_FUNCTION_52();
      v51 = OUTLINED_FUNCTION_54_6();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      v51 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v51)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v6) = v103;
      OUTLINED_FUNCTION_4_0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_97_4();
      OUTLINED_FUNCTION_108_4();
      v0 = (unint64_t)v120;
      OUTLINED_FUNCTION_66_6(v95);
      __swift_destroy_boxed_opaque_existential_1(v114);
      goto LABEL_49;
    }
    v0 = v119 & 0xC000000000000001;
    v52 = v120[84] + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    do
    {
      if (v0)
      {
        v53 = MEMORY[0x2495A9EB0](v6, v120[84]);
      }
      else
      {
        v53 = *(_QWORD *)(v52 + 8 * v6);
        swift_retain();
      }
      v54 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_77;
      }
      if (*(_QWORD *)(v53 + 16) == v14)
      {
        v55 = v120;
        OUTLINED_FUNCTION_19_6();
        v57 = v120[70];
        v58 = __OFADD__(v57, 1);
        v59 = v57 + 1;
        if (!v58)
        {
          v6 = v120[80];
          v120[70] = v59;
          OUTLINED_FUNCTION_4_0();
          v60 = *(_QWORD *)(v53 + 24);
          OUTLINED_FUNCTION_4_0();
          v119 = v60;
          OUTLINED_FUNCTION_52();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_97_4();
          v61 = *(_QWORD *)(v6 + 328);
          *(_QWORD *)(v61 + 16) = v60 + 1;
          v62 = v61 + 40 * v60;
          *(_QWORD *)(v62 + 32) = v3;
          *(_QWORD *)(v62 + 40) = v4;
          *(_QWORD *)(v62 + 48) = v5;
          *(_QWORD *)(v62 + 56) = v14;
          *(_BYTE *)(v62 + 64) = 0;
          OUTLINED_FUNCTION_51_5();
          OUTLINED_FUNCTION_49_2();
          goto LABEL_44;
        }
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      OUTLINED_FUNCTION_49_2();
      ++v6;
    }
    while (v54 != v51);
    v55 = v120;
    OUTLINED_FUNCTION_19_6();
    LOBYTE(v6) = v104;
    OUTLINED_FUNCTION_4_0();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_97_4();
    OUTLINED_FUNCTION_108_4();
    OUTLINED_FUNCTION_66_6(v56);
    v119 = MEMORY[0x24BEE4AF8];
LABEL_44:
    v63 = v55[79];
    __swift_destroy_boxed_opaque_existential_1(v114);
    v0 = (unint64_t)v55;
    if (*(_QWORD *)(v63 + 16))
      continue;
    break;
  }
LABEL_48:
  OUTLINED_FUNCTION_142_1();
LABEL_49:
  OUTLINED_FUNCTION_158_1();
  if (!v58)
  {
    LOBYTE(v6) = v0 + 64;
    *(_QWORD *)(v64 + 360) = v65;
    if (one-time initialization token for device == -1)
      goto LABEL_51;
    goto LABEL_80;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  swift_once();
LABEL_51:
  v66 = (uint64_t *)(v0 + 560);
  v67 = (_QWORD *)(v0 + 584);
  v68 = v120[80];
  v69 = OUTLINED_FUNCTION_15_4();
  v70 = __swift_project_value_buffer(v69, (uint64_t)static Log.device);
  v71 = v120[70];
  v72 = v120;
  swift_retain();
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  v75 = os_log_type_enabled(v73, v74);
  v76 = v120[80];
  if (v75)
  {
    v77 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v77 = 134218240;
    OUTLINED_FUNCTION_4_0();
    v120[72] = *(_QWORD *)(*(_QWORD *)(v76 + 328) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_443();
    *(_WORD *)(v77 + 12) = 2048;
    v120[71] = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v73, v74, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v77);
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_443();

  OUTLINED_FUNCTION_100_3();
  result = OUTLINED_FUNCTION_4_0();
  if (*v66 < 1)
  {
LABEL_56:
    v82 = v120[80];
    v83 = *(_QWORD *)(v82 + 400);
    v58 = __OFADD__(v83, 1);
    v84 = v83 + 1;
    if (v58)
    {
      __break(1u);
      goto LABEL_82;
    }
    *(_QWORD *)(v82 + 400) = v84;
    if (*(_BYTE *)(v82 + 168) == 1)
    {
      v85 = v120[80];
      OUTLINED_FUNCTION_4_0();
      v86 = *(_QWORD *)(v85 + 320);
      v87 = *(_QWORD *)(*(_QWORD *)(v85 + 328) + 16);
      if ((uint64_t)v86 >= v87)
      {
        if (v86 != v87 && v86 >= 2)
        {
          *(_QWORD *)(v85 + 320) = v86 - 1;
          swift_retain();
          Logger.logObject.getter();
          v96 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v96))
          {
            v97 = (float *)OUTLINED_FUNCTION_121();
            OUTLINED_FUNCTION_71_6(v97, 3.852e-34);
            v120[74] = v98;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v70, (os_log_type_t)v68, "Adjusting draftCount down to %ld", (uint8_t *)v97);
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_19_3();
        }
        else
        {
          swift_retain();
          Logger.logObject.getter();
          v92 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_264(v92))
          {
            v93 = (float *)OUTLINED_FUNCTION_121();
            OUTLINED_FUNCTION_71_6(v93, 3.852e-34);
            v120[76] = v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_224_1();
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v70, (os_log_type_t)v6, "Keeping draftCount at %ld", (uint8_t *)v93);
            OUTLINED_FUNCTION_0_1();
          }
          OUTLINED_FUNCTION_224_1();
        }
      }
      else
      {
        *(_QWORD *)(v85 + 320) = v86 + 1;
        swift_retain();
        Logger.logObject.getter();
        v88 = OUTLINED_FUNCTION_111();
        if (OUTLINED_FUNCTION_17_3(v88))
        {
          v89 = (float *)OUTLINED_FUNCTION_121();
          OUTLINED_FUNCTION_71_6(v89, 3.852e-34);
          *v67 = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_49_2();
          OUTLINED_FUNCTION_37_2(&dword_248CAA000, v70, (os_log_type_t)v68, "Adjusting draftCount up to %ld", (uint8_t *)v89);
          OUTLINED_FUNCTION_0_1();
        }
        OUTLINED_FUNCTION_49_2();
        v72 = v120;
      }

    }
    return ((uint64_t (*)(void))v72[1])();
  }
  else
  {
    v79 = v120[80];
    v80 = *(_QWORD *)(v79 + 392);
    v58 = __OFADD__(v80, 1);
    v81 = v80 + 1;
    if (!v58)
    {
      *(_QWORD *)(v79 + 392) = v81;
      goto LABEL_56;
    }
LABEL_82:
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v1 + 688) = v0;
  v3 = swift_task_dealloc();
  OUTLINED_FUNCTION_72_4(v3, &demangling cache variable for type metadata for LogitPresampler?);
  if (v0)
    OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  os_log_type_t v86;
  float *v87;
  uint64_t v88;
  const char *v89;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  os_log_type_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  __int128 *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;

  v1 = v0 + 216;
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 640) + 200;
  v99 = (_QWORD *)(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  OUTLINED_FUNCTION_98_3(v3);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = (_QWORD *)OUTLINED_FUNCTION_153_1();
  __swift_project_boxed_opaque_existential_1(v6, v7);
  if (v2 >> 62)
    goto LABEL_93;
  v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v117 = v1;
  v120 = v2;
  v112 = v5;
  v114 = v4;
  if (v8)
  {
    *(_QWORD *)(v0 + 600) = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_56_3();
    if (v8 < 0)
      goto LABEL_97;
    v9 = 0;
    v10 = *(_QWORD *)(v0 + 600);
    v11 = v2 & 0xC000000000000001;
    v12 = (_QWORD *)(v0 + 600);
    do
    {
      if (v11)
        OUTLINED_FUNCTION_129_3();
      v13 = *(_QWORD *)(swift_retain() + 16);
      swift_release();
      *v12 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      if (v14 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = (_QWORD *)(v0 + 600);
        v10 = *(_QWORD *)(v0 + 600);
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v14 + 1;
      *(_QWORD *)(v10 + 8 * v14 + 32) = v13;
    }
    while (v8 != v9);
    OUTLINED_FUNCTION_164_2();
  }
  else
  {
    OUTLINED_FUNCTION_164_2();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v105 = v0 + 16;
  v121 = v0 + 96;
  v109 = (_QWORD *)(v0 + 256);
  v110 = (__int128 *)(v0 + 136);
  v107 = v0 + 488;
  v108 = v0 + 536;
  v15 = Set.init(minimumCapacity:)();
  v16 = *(_QWORD *)(v10 + 16);
  if (v16)
  {
    v17 = 0;
    do
    {
      while (1)
      {
        v18 = *(_QWORD *)(v10 + 32 + 8 * v17++);
        static Hasher._hash(seed:_:)();
        OUTLINED_FUNCTION_25_8();
        if ((v19 & 1) != 0)
          break;
LABEL_21:
        swift_isUniquelyReferenced_nonNull_native();
        v22 = OUTLINED_FUNCTION_100_3();
        specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v23);
        OUTLINED_FUNCTION_74();
        if (v17 == v16)
          goto LABEL_22;
      }
      if (*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v8) != v18)
      {
        do
        {
          OUTLINED_FUNCTION_21_8();
          if ((v21 & 1) == 0)
            goto LABEL_21;
        }
        while (*(_QWORD *)(v20 + 8 * v8) != v18);
      }
    }
    while (v17 != v16);
  }
LABEL_22:
  OUTLINED_FUNCTION_50_2();
  v104 = (uint64_t *)(v0 + 560);
  v101 = (_QWORD *)(v0 + 576);
  v102 = (_QWORD *)(v0 + 568);
  v103 = (_QWORD *)(v0 + 584);
  v100 = (_QWORD *)(v0 + 592);
  v98 = (_QWORD *)(v0 + 608);
  v106 = (_QWORD *)(v0 + 616);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 24))(v121, v105, v15, v114);
  OUTLINED_FUNCTION_119_0();
  OUTLINED_FUNCTION_94_1();
  __swift_destroy_boxed_opaque_existential_1(v117);
  v111 = v0;
  while (1)
  {
LABEL_23:
    v115 = *(_QWORD *)(v0 + 664);
    v118 = *(_QWORD *)(v0 + 672);
    v24 = v0;
    v25 = *(_QWORD *)(v0 + 656);
    v26 = *(_QWORD **)(v24 + 640);
    v27 = v26 + 2;
    OUTLINED_FUNCTION_4_0();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v26 + 14), v26[17]);
    OUTLINED_FUNCTION_260();
    OUTLINED_FUNCTION_165_1();
    v113 = v28();
    swift_endAccess();
    OUTLINED_FUNCTION_4_0();
    v29 = v26[11];
    v30 = v26[12];
    OUTLINED_FUNCTION_140_0((uint64_t)(v26 + 8));
    v31 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v30 + 16))(v25, v2, 0, v29, v30);
    OUTLINED_FUNCTION_89_3();
    OUTLINED_FUNCTION_4_0();
    v32 = v26[6];
    OUTLINED_FUNCTION_140_0((uint64_t)(v26 + 2));
    v1 = OUTLINED_FUNCTION_137_2(v115, v2, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 16));
    OUTLINED_FUNCTION_51_5();
    if (v118 >> 62)
    {
      v0 = v111;
      v27 = *(_QWORD **)(v111 + 672);
      v33 = v120;
      OUTLINED_FUNCTION_18_3();
      v34 = OUTLINED_FUNCTION_54_6();
      OUTLINED_FUNCTION_20_2();
    }
    else
    {
      v33 = v120;
      v34 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
      v0 = v111;
    }
    if (!v34)
    {
      v64 = *(_QWORD *)(v0 + 640);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_87_3();
      v65 = *(_QWORD *)(v64 + 328);
      *(_QWORD *)(v65 + 16) = (char *)v27 + 1;
      v66 = v65 + 40 * (_QWORD)v27;
      *(_QWORD *)(v66 + 32) = v113;
      *(_QWORD *)(v66 + 40) = v31;
      *(_QWORD *)(v66 + 48) = v1;
      *(_QWORD *)(v66 + 56) = v2;
      *(_BYTE *)(v66 + 64) = 1;
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1(v121);
LABEL_66:
      OUTLINED_FUNCTION_158_1();
      if (v41)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v67 + 360) = v68;
        if (one-time initialization token for device == -1)
          goto LABEL_68;
      }
      swift_once();
LABEL_68:
      v69 = OUTLINED_FUNCTION_15_4();
      v70 = __swift_project_value_buffer(v69, (uint64_t)static Log.device);
      v71 = *(_QWORD *)(v0 + 560);
      swift_retain();
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      v74 = os_log_type_enabled(v72, v73);
      v75 = *(_QWORD *)(v0 + 640);
      if (v74)
      {
        v76 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v76 = 134218240;
        OUTLINED_FUNCTION_4_0();
        *v101 = *(_QWORD *)(*(_QWORD *)(v75 + 328) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_224_1();
        *(_WORD *)(v76 + 12) = 2048;
        *v102 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_124_0(&dword_248CAA000, v72, v73, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v76);
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_224_1();

      OUTLINED_FUNCTION_4_0();
      if (*v104 >= 1)
      {
        v77 = *(_QWORD *)(v0 + 640);
        v78 = *(_QWORD *)(v77 + 392);
        v41 = __OFADD__(v78, 1);
        v79 = v78 + 1;
        if (v41)
          goto LABEL_98;
        *(_QWORD *)(v77 + 392) = v79;
      }
      v80 = *(_QWORD *)(v0 + 640);
      v81 = *(_QWORD *)(v80 + 400);
      v41 = __OFADD__(v81, 1);
      v82 = v81 + 1;
      if (!v41)
      {
        *(_QWORD *)(v80 + 400) = v82;
        if (*(_BYTE *)(v80 + 168) != 1)
        {
LABEL_89:
          (*(void (**)(void))(v0 + 8))();
          return;
        }
        v83 = *(_QWORD *)(v0 + 640);
        OUTLINED_FUNCTION_4_0();
        v84 = *(_QWORD *)(v83 + 320);
        v85 = *(_QWORD *)(*(_QWORD *)(v83 + 328) + 16);
        if ((uint64_t)v84 < v85)
        {
          *(_QWORD *)(v83 + 320) = v84 + 1;
          swift_retain();
          Logger.logObject.getter();
          v86 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v86))
          {
            v87 = (float *)OUTLINED_FUNCTION_121();
            OUTLINED_FUNCTION_70_6(v87, 3.852e-34);
            *v103 = v88;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v89 = "Adjusting draftCount up to %ld";
            goto LABEL_87;
          }
          goto LABEL_88;
        }
        if (v84 != v85 && v84 >= 2)
        {
          *(_QWORD *)(v83 + 320) = v84 - 1;
          swift_retain();
          Logger.logObject.getter();
          v96 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v96))
          {
            v87 = (float *)OUTLINED_FUNCTION_121();
            OUTLINED_FUNCTION_70_6(v87, 3.852e-34);
            *v100 = v97;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v89 = "Adjusting draftCount down to %ld";
LABEL_87:
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v70, (os_log_type_t)v104, v89, (uint8_t *)v87);
            OUTLINED_FUNCTION_0_1();
          }
        }
        else
        {
          swift_retain();
          Logger.logObject.getter();
          v91 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v91))
          {
            v87 = (float *)OUTLINED_FUNCTION_121();
            OUTLINED_FUNCTION_70_6(v87, 3.852e-34);
            *v98 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v89 = "Keeping draftCount at %ld";
            goto LABEL_87;
          }
        }
LABEL_88:
        OUTLINED_FUNCTION_19_3();

        goto LABEL_89;
      }
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
      return;
    }
    v35 = v31;
    v5 = v33 & 0xC000000000000001;
    v36 = *(_QWORD *)(v0 + 672) + 32;
    swift_bridgeObjectRetain();
    v37 = 0;
    while (2)
    {
      if (v5)
      {
        v4 = MEMORY[0x2495A9EB0](v37, *(_QWORD *)(v0 + 672));
      }
      else
      {
        v4 = *(_QWORD *)(v36 + 8 * v37);
        swift_retain();
      }
      v38 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
        goto LABEL_91;
      }
      if (*(_QWORD *)(v4 + 16) == v2)
      {
        OUTLINED_FUNCTION_19_6();
        v40 = *(_QWORD *)(v0 + 560);
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (!v41)
        {
          *(_QWORD *)(v0 + 560) = v42;
          OUTLINED_FUNCTION_4_0();
          v36 = *(_QWORD *)(v4 + 24);
          v1 = v108;
          OUTLINED_FUNCTION_4_0();
          OUTLINED_FUNCTION_92_1();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_87_3();
          v5 = v36;
          OUTLINED_FUNCTION_56_6(v37 + 1);
          *(_BYTE *)(v43 + 64) = 0;
          OUTLINED_FUNCTION_89_3();
          OUTLINED_FUNCTION_49_2();
          goto LABEL_36;
        }
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        swift_bridgeObjectRetain();
        v8 = OUTLINED_FUNCTION_54_6();
        goto LABEL_3;
      }
      OUTLINED_FUNCTION_49_2();
      ++v37;
      if (v38 != v34)
        continue;
      break;
    }
    OUTLINED_FUNCTION_19_6();
    v1 = v107;
    OUTLINED_FUNCTION_4_0();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    OUTLINED_FUNCTION_87_3();
    OUTLINED_FUNCTION_56_6(v37 + 1);
    *(_BYTE *)(v39 + 64) = 1;
    OUTLINED_FUNCTION_89_3();
    v5 = MEMORY[0x24BEE4AF8];
LABEL_36:
    v44 = *(_QWORD *)(v0 + 632);
    __swift_destroy_boxed_opaque_existential_1(v121);
    v120 = v5;
    if (!*(_QWORD *)(v44 + 16)
      || (*(_QWORD *)(v0 + 672) = v5,
          *(_QWORD *)(v0 + 664) = v35,
          *(_QWORD *)(v0 + 656) = v36,
          *(_QWORD *)(v0 + 648) = v37,
          v45 = *(_QWORD *)(v0 + 632),
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(v37),
          (v47 & 1) == 0))
    {
      OUTLINED_FUNCTION_63_0();
      goto LABEL_66;
    }
    v48 = OUTLINED_FUNCTION_116_2(v46);
    OUTLINED_FUNCTION_83_3(v48);
    outlined init with take of LogitCollection(v110, v121);
    v49 = *(_QWORD *)(v0 + 640);
    if ((*(_BYTE *)(v45 + 188) & 1) != 0)
      break;
    v52 = *(float *)(v45 + 184);
    OUTLINED_FUNCTION_39_3(v49 + 200);
    v116 = *(_QWORD *)(v0 + 288);
    v119 = *(_QWORD *)(v0 + 280);
    __swift_project_boxed_opaque_existential_1(v109, v119);
    v2 = -1;
    if (v5 >> 62)
    {
      OUTLINED_FUNCTION_122();
      v4 = OUTLINED_FUNCTION_54_6();
    }
    else
    {
      v4 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_122();
    }
    v53 = MEMORY[0x24BEE4AF8];
    v54 = v106;
    if (v4)
    {
      *v106 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      if (v4 < 0)
        goto LABEL_92;
      v37 = 0;
      v53 = *v106;
      do
      {
        if ((v5 & 0xC000000000000001) != 0)
          MEMORY[0x2495A9EB0](v37, v5);
        else
          OUTLINED_FUNCTION_105_2();
        OUTLINED_FUNCTION_133_0();
        *v54 = v53;
        v56 = *(_QWORD *)(v53 + 16);
        v55 = *(_QWORD *)(v53 + 24);
        if (v56 >= v55 >> 1)
        {
          OUTLINED_FUNCTION_44_2(v55);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v54 = v106;
          v53 = *v106;
        }
        ++v37;
        *(_QWORD *)(v53 + 16) = v56 + 1;
        *(_QWORD *)(v53 + 8 * v56 + 32) = v5;
      }
      while (v4 != v37);
    }
    OUTLINED_FUNCTION_63_0();
    v57 = Set.init(minimumCapacity:)();
    v58 = *(_QWORD *)(v53 + 16);
    if (v58)
    {
      v59 = 0;
      do
      {
        while (1)
        {
          v60 = *(_QWORD *)(v53 + 32 + 8 * v59++);
          static Hasher._hash(seed:_:)();
          OUTLINED_FUNCTION_25_8();
          if ((v61 & 1) != 0)
            break;
LABEL_60:
          swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v60, v37);
          OUTLINED_FUNCTION_74();
          if (v59 == v58)
            goto LABEL_61;
        }
        if (*(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v37) != v60)
        {
          do
          {
            OUTLINED_FUNCTION_21_8();
            if ((v63 & 1) == 0)
              goto LABEL_60;
          }
          while (*(_QWORD *)(v62 + 8 * v37) != v60);
        }
      }
      while (v59 != v58);
    }
LABEL_61:
    OUTLINED_FUNCTION_119_0();
    v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v116 + 16))(v121, v57, v119, v52);
    OUTLINED_FUNCTION_51_1();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  }
  if (*(_BYTE *)(v49 + 189) != 1)
  {
    v50 = *(_QWORD *)(v49 + 224);
    v51 = *(_QWORD *)(v49 + 232);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v49 + 200), v50);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 8))(v121, v50, v51);
    goto LABEL_23;
  }
  outlined init with copy of DeterministicLanguageModelProtocol(v49 + 64, (uint64_t)v99);
  v94 = *(_QWORD *)(v0 + 80);
  v93 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1(v99, v94);
  *(_OWORD *)(v0 + 192) = 0u;
  *(_QWORD *)(v0 + 208) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  v95 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 680) = v95;
  *v95 = v0;
  v95[1] = ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v105, v36, v0 + 176, v94, v93);
}

uint64_t ThreeStageSpeculativeDecoder.drawBufferedToken()()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  char v11;

  swift_beginAccess();
  specialized RangeReplaceableCollection.removeFirst()((uint64_t)v10);
  result = swift_endAccess();
  v2 = v0[47];
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = v11;
    v0[47] = v4;
    if ((v5 & 1) == 0)
    {
LABEL_5:
      v8 = v10[1];
      v9 = v10[2];
      result = v10[3];
      v0[19] = v10[0];
      v0[13] = v8;
      v0[7] = v9;
      return result;
    }
    v6 = v0[48];
    v3 = __OFADD__(v6, 1);
    v7 = v6 + 1;
    if (!v3)
    {
      v0[48] = v7;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ThreeStageSpeculativeDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v3 = *(_QWORD *)prompt.queryTokens._rawValue;
  v4 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
  v5 = MEMORY[0x24BEE4AF8];
  v44 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    OUTLINED_FUNCTION_18_3();
    swift_bridgeObjectRetain_n();
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 8 * v7 + 32);
      v10 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v8 + 16);
      if (__OFADD__(v11, v10))
        break;
      OUTLINED_FUNCTION_65_0();
      if (!OUTLINED_FUNCTION_56_2() || v11 + v10 > *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v12;
      }
      if (*(_QWORD *)(v9 + 16))
      {
        v13 = *(_QWORD *)(v8 + 16);
        if ((*(_QWORD *)(v8 + 24) >> 1) - v13 < v10)
          goto LABEL_26;
        v14 = (void *)(v8 + 8 * v13 + 32);
        if (v9 + 32 < (unint64_t)v14 + 8 * v10 && (unint64_t)v14 < v9 + 32 + 8 * v10)
          goto LABEL_28;
        memcpy(v14, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          v16 = *(_QWORD *)(v8 + 16);
          v17 = __OFADD__(v16, v10);
          v18 = v16 + v10;
          if (v17)
            goto LABEL_27;
          *(_QWORD *)(v8 + 16) = v18;
        }
      }
      else if (v10)
      {
        goto LABEL_25;
      }
      ++v7;
      OUTLINED_FUNCTION_50_2();
      if (v6 == v7)
      {
        OUTLINED_FUNCTION_58_0();
        v44 = v8;
        v5 = MEMORY[0x24BEE4AF8];
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_18_3();
    swift_bridgeObjectRetain();
LABEL_21:
    OUTLINED_FUNCTION_18_3();
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_20_2();
    v19 = *(_QWORD *)(v44 + 16);
    swift_bridgeObjectRelease();
    if (v19)
    {
      OUTLINED_FUNCTION_4_0();
      *(_QWORD *)(v2 + 328) = v5;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v2 + 152);
      v42 = v3;
      v43 = v4;
      OUTLINED_FUNCTION_4_0();
      v21 = OUTLINED_FUNCTION_154_0();
      OUTLINED_FUNCTION_53_7(v21, v22, v23, v24, v25, v26, v27);
      OUTLINED_FUNCTION_101_3();
      *(_QWORD *)(v2 + 152) = v20;
      v28 = *(_QWORD *)(v2 + 104);
      v42 = v3;
      v43 = v4;
      OUTLINED_FUNCTION_4_0();
      v29 = OUTLINED_FUNCTION_154_0();
      OUTLINED_FUNCTION_53_7(v29, v30, v31, v32, v33, v34, v35);
      OUTLINED_FUNCTION_101_3();
      *(_QWORD *)(v2 + 104) = v28;
      v36 = *(_QWORD *)(v2 + 56);
      v42 = v3;
      v43 = v4;
      OUTLINED_FUNCTION_4_0();
      v37 = *(_QWORD *)(v2 + 40);
      v38 = *(_QWORD *)(v2 + 48);
      v39 = __swift_mutable_project_boxed_opaque_existential_1(v2 + 16, v37);
      v40 = v36;
      v41 = v39;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v38 + 40))(v40, &v42, v37, v38);
      OUTLINED_FUNCTION_101_3();
      *(_QWORD *)(v2 + 56) = v41;
      *(_BYTE *)(v2 + 336) = 1;
    }
  }
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 400) = v0;
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  _QWORD *v10;
  uint64_t (*v11)(void);

  v1 = v0[50];
  if (*(_BYTE *)(v1 + 336) == 1)
  {
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_83_3(v1 + 112);
    v2 = v0[5];
    v3 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
    v0[51] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = OUTLINED_FUNCTION_2_0();
    v0[52] = v4;
    *(_OWORD *)(v4 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v1 + 152);
    OUTLINED_FUNCTION_39_3(v1 + 240);
    v11 = (uint64_t (*)(void))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
    v5 = (_QWORD *)swift_task_alloc();
    v0[53] = v5;
    *v5 = v0;
    v5[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
    return OUTLINED_FUNCTION_67_5(v4, (uint64_t)(v0 + 27), v2, v3, v11);
  }
  else
  {
    OUTLINED_FUNCTION_4_0();
    if (*(_QWORD *)(*(_QWORD *)(v1 + 328) + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v7 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v7 + 16) = xmmword_248D75A50;
      *(_QWORD *)(v7 + 32) = ThreeStageSpeculativeDecoder.drawBufferedToken()();
      v8 = OUTLINED_FUNCTION_149_2();
      return v9(v8);
    }
    else
    {
      v10 = (_QWORD *)swift_task_alloc();
      v0[56] = v10;
      *v10 = v0;
      v10[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
      return ThreeStageSpeculativeDecoder.generateDraft()();
    }
  }
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_147_2(v0 + 56);
  result = OUTLINED_FUNCTION_7_0();
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = *(_QWORD *)(v0 + 400);
    outlined init with take of LogitCollection((__int128 *)(v0 + 56), v0 + 176);
    OUTLINED_FUNCTION_94_1();
    OUTLINED_FUNCTION_110_3((_QWORD *)(v2 + 200));
    v3 = OUTLINED_FUNCTION_100_3();
    result = v4(v3);
    v5 = *(_QWORD *)(v2 + 376);
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      v7 = *(_QWORD *)(v0 + 400);
      *(_QWORD *)(v2 + 376) = v6;
      v8 = *(_QWORD *)(v7 + 384);
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (!v9)
      {
        v11 = result;
        v12 = *(_QWORD *)(v0 + 400);
        *(_QWORD *)(v7 + 384) = v10;
        v13 = *(_QWORD *)(v12 + 152);
        OUTLINED_FUNCTION_4_0();
        v15 = *(_QWORD *)(v12 + 136);
        v14 = *(_QWORD *)(v12 + 144);
        __swift_mutable_project_boxed_opaque_existential_1(v12 + 112, v15);
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(v13, v11, 0, v15, v14);
        swift_endAccess();
        *(_QWORD *)(v12 + 152) = v16;
        OUTLINED_FUNCTION_4_0();
        __swift_mutable_project_boxed_opaque_existential_1(v12 + 64, *(_QWORD *)(v12 + 88));
        OUTLINED_FUNCTION_165_1();
        v18 = v17();
        swift_endAccess();
        *(_QWORD *)(v12 + 104) = v18;
        OUTLINED_FUNCTION_153_1();
        OUTLINED_FUNCTION_4_0();
        OUTLINED_FUNCTION_140_0(v12 + 16);
        OUTLINED_FUNCTION_165_1();
        v23 = OUTLINED_FUNCTION_137_2(v19, v20, v21, v22);
        swift_endAccess();
        *(_QWORD *)(v12 + 56) = v23;
        *(_BYTE *)(v12 + 336) = 0;
        v24 = OUTLINED_FUNCTION_2_0();
        *(_OWORD *)(v24 + 16) = xmmword_248D75A50;
        *(_QWORD *)(v24 + 32) = v11;
        __swift_destroy_boxed_opaque_existential_1(v0 + 176);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v24);
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v1 = v0[50];
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_39_3(v1 + 112);
  OUTLINED_FUNCTION_110_3(v0 + 12);
  OUTLINED_FUNCTION_83_3(v1 + 240);
  v2 = (_QWORD *)OUTLINED_FUNCTION_12_2();
  v0[59] = v2;
  *v2 = v0;
  v2[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
  v3 = OUTLINED_FUNCTION_109_3(v0[58]);
  return v5(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[61];
  v2 = v0[58];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v2, v1);
  v0[62] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[63] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = ThreeStageSpeculativeDecoder.decodeNextChunk();
  v5 = OUTLINED_FUNCTION_109_3(v0[57]);
  return ThreeStageSpeculativeDecoder.fillBufferedTokens(_:_:)(v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 512) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 400);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 328) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v2 = OUTLINED_FUNCTION_2_0();
    *(_OWORD *)(v2 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v2 + 32) = ThreeStageSpeculativeDecoder.drawBufferedToken()();
  }
  v3 = OUTLINED_FUNCTION_149_2();
  return OUTLINED_FUNCTION_68_4(v3, v4);
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *v2;
  v4 = v7;
  OUTLINED_FUNCTION_64_2(&v7);
  *(_QWORD *)(v4 + 432) = v1;
  v5 = swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 440) = a1;
  OUTLINED_FUNCTION_75_4(v5, &demangling cache variable for type metadata for LogitPresampler?);
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_17_8();
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_37_5();
  v5 = OUTLINED_FUNCTION_80_4(v4);
  if (v1)
  {
    OUTLINED_FUNCTION_93_3(v5, &demangling cache variable for type metadata for LogitPresampler?);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v2 + 488) = a1;
    OUTLINED_FUNCTION_93_3(v5, &demangling cache variable for type metadata for LogitPresampler?);
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_15();
}

uint64_t ThreeStageSpeculativeDecoder.decodeNextChunk()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 456) = a1;
  *(_QWORD *)(v4 + 464) = a2;
  OUTLINED_FUNCTION_84();
  if (v2)
    return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v4 + 8));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t ThreeStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  if (v1 < 1)
    return 0;
  else
    return COERCE_UNSIGNED_INT((float)((float)*(uint64_t *)(v0 + 344) * 100.0) / (float)v1);
}

float ThreeStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  if (v1 < 1)
    return 0.0;
  else
    return OUTLINED_FUNCTION_55_6(v1);
}

float ThreeStageSpeculativeDecoder.speculationSuccessRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 400);
  if (v1 < 1)
    return 0.0;
  else
    return OUTLINED_FUNCTION_55_6(v1);
}

uint64_t ThreeStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  result = v1 - v2;
  if (__OFSUB__(v1, v2))
    __break(1u);
  return result;
}

uint64_t ThreeStageSpeculativeDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  __swift_destroy_boxed_opaque_existential_1(v0 + 240);
  __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ThreeStageSpeculativeDecoder.__deallocating_deinit()
{
  ThreeStageSpeculativeDecoder.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance ThreeStageSpeculativeDecoder(uint64_t a1, uint64_t a2)
{
  ThreeStageSpeculativeDecoder.append(prompt:)(*(TokenGenerationInference::SamplingDecoderPrompt *)&a1);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance ThreeStageSpeculativeDecoder()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance ThreeStageSpeculativeDecoder;
  return ThreeStageSpeculativeDecoder.decodeNextChunk()();
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance ThreeStageSpeculativeDecoder(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = swift_task_dealloc();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_68_4(v4, *(uint64_t (**)(void))(v6 + 8));
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  return ThreeStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  unint64_t v0;

  v0 = ThreeStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance ThreeStageSpeculativeDecoder()
{
  return ThreeStageSpeculativeDecoder.speculationSuccessRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance ThreeStageSpeculativeDecoder()
{
  return ThreeStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter();
}

uint64_t type metadata accessor for ThreeStageSpeculativeDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for ThreeStageSpeculativeDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ThreeStageSpeculativeDecoder.__allocating_init(tinyModel:draftModel:languageModel:behavior:sampler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ThreeStageSpeculativeDecoder.BufferedToken(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ThreeStageSpeculativeDecoder.BufferedToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ThreeStageSpeculativeDecoder.BufferedToken()
{
  return &unk_2519E0C80;
}

unint64_t lazy protocol witness table accessor for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken;
  if (!lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ThreeStageSpeculativeDecoder.BufferedToken, &unk_2519E0C80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.BufferedToken and conformance ThreeStageSpeculativeDecoder.BufferedToken);
  }
  return result;
}

uint64_t outlined init with take of (offset: Int, element: LogitCollection)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: LogitCollection)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  return &unk_2519E0D00;
}

unint64_t lazy protocol witness table accessor for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes;
  if (!lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for ThreeStageSpeculativeDecoder.TokenWithNodes, &unk_2519E0D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ThreeStageSpeculativeDecoder.TokenWithNodes and conformance ThreeStageSpeculativeDecoder.TokenWithNodes);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_7_17()
{
  uint64_t v0;

  return TokenTreeNode.init(token:)(v0);
}

void OUTLINED_FUNCTION_10_14()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_12_10()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_17_8()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_27_6(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_29_6()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_30_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_32_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_33_8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a2);
  return outlined init with copy of DeterministicLanguageModelProtocol(v3, v2);
}

uint64_t OUTLINED_FUNCTION_34_5(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_35_8()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_37_5()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_39_3(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of DeterministicLanguageModelProtocol(a1, v1);
}

uint64_t OUTLINED_FUNCTION_41_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void OUTLINED_FUNCTION_44_5()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_50_8()
{
  return type metadata accessor for TokenTreeNode();
}

uint64_t OUTLINED_FUNCTION_51_5()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_53_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v9 + 40))(v7, va, v8, v9);
}

uint64_t OUTLINED_FUNCTION_54_6()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

float OUTLINED_FUNCTION_55_6@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (float)((float)v1 * 100.0) / (float)a1;
}

void OUTLINED_FUNCTION_56_6(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + 16) = a1;
  v6 = (_QWORD *)(v1 + 40 * v3);
  v6[4] = *(_QWORD *)(v5 - 136);
  v6[5] = v4;
  v6[6] = *(_QWORD *)(v5 - 112);
  v6[7] = v2;
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t OUTLINED_FUNCTION_58_1()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_62_7()
{
  unint64_t v0;
  uint64_t v1;

  specialized _NativeSet.insertNew(_:at:isUnique:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_66_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 64) = 1;
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_67_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_68_4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_69_6()
{
  uint64_t v0;

  return v0;
}

float *OUTLINED_FUNCTION_70_6(float *result, float a2)
{
  *result = a2;
  return result;
}

float *OUTLINED_FUNCTION_71_6(float *result, float a2)
{
  *result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_72_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1(v2, a2);
}

uint64_t OUTLINED_FUNCTION_73_4()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_75_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1(v2, a2);
}

uint64_t OUTLINED_FUNCTION_80_4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = *v2;
  *(_QWORD *)(v3 + 480) = v1;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_81_1()
{
  JUMPOUT(0x2495A9EB0);
}

uint64_t OUTLINED_FUNCTION_82_3@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  return a4(a1, a2, a3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_83_3(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of DeterministicLanguageModelProtocol(a1, v1);
}

uint64_t OUTLINED_FUNCTION_84_4()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_85_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_87_3()
{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

void OUTLINED_FUNCTION_88_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 8 * v2 + 32) = v3;
}

uint64_t OUTLINED_FUNCTION_89_3()
{
  return swift_endAccess();
}

void OUTLINED_FUNCTION_91_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_93_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return _s24TokenGenerationInference15LogitPresampler_pSgWOhTm_1(v2, a2);
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

void OUTLINED_FUNCTION_95_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_97_4()
{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_98_3(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of DeterministicLanguageModelProtocol(a1, v1);
}

uint64_t OUTLINED_FUNCTION_100_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_101_3()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_105_2()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_107_4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_108_4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 328) + 16) = v0 + 1;
}

uint64_t OUTLINED_FUNCTION_109_3@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

_QWORD *OUTLINED_FUNCTION_110_3(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

void OUTLINED_FUNCTION_112_4()
{
  uint64_t v0;
  unint64_t v1;

  specialized _NativeSet.insertNew(_:at:isUnique:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_113_3()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_115_2()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_116_2(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + 632) + 56) + 40 * a1;
}

void OUTLINED_FUNCTION_119_3()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

uint64_t OUTLINED_FUNCTION_120_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  return a19 + 40 * v19;
}

void OUTLINED_FUNCTION_129_3()
{
  JUMPOUT(0x2495A9EB0);
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_132_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 56) |= v1;
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_134_1()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 + 200);
}

uint64_t OUTLINED_FUNCTION_135_2(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of DeterministicLanguageModelProtocol(a1, v1);
}

void OUTLINED_FUNCTION_136_2()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

uint64_t OUTLINED_FUNCTION_137_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  return a4(a1, a2, a3, v4, v5);
}

unint64_t OUTLINED_FUNCTION_138_1@<X0>(uint64_t a1@<X8>)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 40));
}

uint64_t OUTLINED_FUNCTION_139_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 32) = a2;
  return specialized Set.init(_nonEmptyArrayLiteral:)();
}

uint64_t OUTLINED_FUNCTION_140_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_141(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return __swift_destroy_boxed_opaque_existential_1(a19);
}

uint64_t OUTLINED_FUNCTION_142_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_143_2()
{
  uint64_t v0;

  return specialized MutableCollection<>.sort(by:)((uint64_t *)(v0 - 104));
}

uint64_t OUTLINED_FUNCTION_145_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return outlined init with copy of DeterministicLanguageModelProtocol(a1, a11);
}

double OUTLINED_FUNCTION_147_2@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized Collection.first.getter(v1, a1);
}

uint64_t OUTLINED_FUNCTION_148_1()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_149_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_150_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  a13 = v13;
  return specialized MutableCollection<>.sort(by:)(&a13);
}

uint64_t OUTLINED_FUNCTION_152_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_153_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_155_1()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_156_1(uint64_t a1)
{
  return specialized Set.formUnion<A>(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_157_1()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t OUTLINED_FUNCTION_159_1()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_161_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __int128 *v17;

  return outlined init with take of LogitCollection(v17, a17);
}

void OUTLINED_FUNCTION_162_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = a1;
  *(_QWORD *)(v2 - 136) = v1;
}

uint64_t OUTLINED_FUNCTION_163_0()
{
  uint64_t v0;
  __int128 *v1;

  return outlined init with take of LogitCollection(v1, v0);
}

uint64_t OUTLINED_FUNCTION_164_2()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_167_1(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_169_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_170_2()
{
  uint64_t v0;

  return TokenTreeNode.init(token:)(v0);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_SDyS2i4next_Sf5logittGs5NeverOTg5058_sS2iSDyS2i4next_Sf5logittGIgyyo_Si6offset_Si7elementtACs5h112OIegnrzr_TR089_s24TokenGenerationInference32WeightedFiniteStateLanguageModelV6tokens9vocabSizeACSaySiG_R39Sgtcfckl1_M22GSi_SitXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 32;
    do
    {
      v5 = v3 + 1;
      v6 = *(_QWORD *)(v4 + 8 * v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, (next: Int, logit: Float))>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_248D75A50;
      *(_QWORD *)(inited + 32) = v6;
      *(_QWORD *)(inited + 40) = v5;
      *(_DWORD *)(inited + 48) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (next: Int, logit: Float));
      v8 = Dictionary.init(dictionaryLiteral:)();
      v9 = *(_QWORD *)(v11 + 16);
      if (v9 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v8;
      v3 = v5;
    }
    while (v2 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So29TGIE5AdapterConfigurationObjCCs5NeverOTg509_sS2SSo29defg28CCIgggo_SS3key_SS5valuetABs5H173OIegnrzr_TR0129_s24TokenGenerationInference22LanguageModelReferenceO04makedE008externalD5MakerAA013DeterministicdE8Protocol_pAaF_pSSKcSg_tKFSo29abcD13CCSS_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = specialized Dictionary.startIndex.getter(v1);
    if (result < 0 || (v5 = result, result >= 1 << *(_BYTE *)(v1 + 32)))
    {
LABEL_13:
      __break(1u);
      return v17;
    }
    else
    {
      v6 = v4;
      v7 = v1 + 64;
      v15 = v1;
      while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(v1 + 36))
          goto LABEL_17;
        v16 = v2;
        v8 = *(_QWORD *)(v1 + 56);
        v9 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v5);
        v10 = *v9;
        v11 = v9[1];
        v12 = (uint64_t *)(v8 + 16 * v5);
        v14 = *v12;
        v13 = v12[1];
        objc_allocWithZone((Class)TGIE5AdapterConfigurationObjC);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        @nonobjc TGIE5AdapterConfigurationObjC.init(adapterType:symbolName:mutableWeightsFilePath:)(0, 0xE000000000000000, v10, v11, v14, v13);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        v1 = v15;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
        if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(v15 + 32)))
          goto LABEL_18;
        if ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
          goto LABEL_19;
        if (v6 != *(_DWORD *)(v15 + 36))
          goto LABEL_20;
        result = _HashTable.occupiedBucket(after:)();
        v2 = v16 - 1;
        if (v16 == 1)
          return v17;
        v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v6 = *(_DWORD *)(v15 + 36);
          if (result < 1 << *(_BYTE *)(v15 + 32))
            continue;
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return OUTLINED_FUNCTION_0_0();
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return OUTLINED_FUNCTION_0_0();
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

void LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(void (*a1)(__int128 *__return_ptr, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __int128 v35[2];
  uint64_t v36;
  __int128 v37[2];

  v6 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24))
  {
    if (*(_BYTE *)(v2 + 24) == 1)
    {
      v8 = OUTLINED_FUNCTION_50_1();
      v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_SDyS2i4next_Sf5logittGs5NeverOTg5058_sS2iSDyS2i4next_Sf5logittGIgyyo_Si6offset_Si7elementtACs5h112OIegnrzr_TR089_s24TokenGenerationInference32WeightedFiniteStateLanguageModelV6tokens9vocabSizeACSaySiG_R39Sgtcfckl1_M22GSi_SitXEfU_Tf3nnnpf_nTf1cn_n(v8);
      v10 = OUTLINED_FUNCTION_109_4();
      outlined consume of LanguageModelReference(v10, v11, v12, 1);
      swift_getKeyPath();
      *(_QWORD *)&v37[0] = MEMORY[0x24BEE4AF8];
      v13 = *(_QWORD *)(v9 + 16);
      if (v13)
      {
        OUTLINED_FUNCTION_122();
        v14 = 0;
        do
        {
          ++v14;
          OUTLINED_FUNCTION_21_1();
          swift_getAtKeyPath();
          OUTLINED_FUNCTION_42();
          specialized Array.append<A>(contentsOf:)(*(uint64_t *)&v35[0]);
        }
        while (v13 != v14);
        swift_release();
        OUTLINED_FUNCTION_63_0();
        v15 = *(_QWORD **)&v37[0];
      }
      else
      {
        swift_release();
        v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v21 = specialized Sequence<>.max()(v15);
      v23 = v22;
      OUTLINED_FUNCTION_42();
      if ((v23 & 1) != 0)
        v24 = 0;
      else
        v24 = v21;
      a2[3] = (uint64_t)&type metadata for WeightedFiniteStateLanguageModel;
      a2[4] = (uint64_t)&protocol witness table for WeightedFiniteStateLanguageModel;
      *a2 = 0;
      a2[1] = v24;
      a2[2] = v9;
    }
    else if (a1)
    {
      OUTLINED_FUNCTION_65_0();
      a1(v35, v6, v5);
      v18 = OUTLINED_FUNCTION_109_4();
      outlined consume of LanguageModelReference(v18, v19, v20, 2);
      if (!v3)
      {
        outlined init with take of LogitCollection(v35, (uint64_t)v37);
        outlined init with take of LogitCollection(v37, (uint64_t)a2);
      }
    }
    else
    {
      v36 = 0;
      memset(v35, 0, sizeof(v35));
      OUTLINED_FUNCTION_65_0();
      outlined destroy of DeterministicLanguageModelProtocol?((uint64_t)v35);
      lazy protocol witness table accessor for type TokenGenerationConfiguration.TokenGenerationConfigurationError and conformance TokenGenerationConfiguration.TokenGenerationConfigurationError();
      OUTLINED_FUNCTION_7_11();
      *v30 = v6;
      v30[1] = v5;
      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v7)
      v16 = v7;
    else
      v16 = Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRetain();
    v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So29TGIE5AdapterConfigurationObjCCs5NeverOTg509_sS2SSo29defg28CCIgggo_SS3key_SS5valuetABs5H173OIegnrzr_TR0129_s24TokenGenerationInference22LanguageModelReferenceO04makedE008externalD5MakerAA013DeterministicdE8Protocol_pAaF_pSSKcSg_tKFSo29abcD13CCSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v16);
    OUTLINED_FUNCTION_42();
    specialized Set.init<A>(_:)(v25);
    if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v26 = objc_allocWithZone((Class)TGIE5ModelConfigurationObjC);
    v27 = @nonobjc TGIE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(0, v6, v5);
    objc_allocWithZone((Class)E5RunnerObjC);
    v28 = v27;
    v29 = @nonobjc E5RunnerObjC.init(modelConfiguration:)(v28);
    if (v3)
    {

    }
    else
    {
      v31 = v29;
      v32 = type metadata accessor for E5TransformerLanguageModel();
      v33 = v31;
      v34 = E5TransformerLanguageModel.__allocating_init(e5Runner:shouldFlattenPromptModules:)(v33, 1);
      a2[3] = v32;
      a2[4] = (uint64_t)&protocol witness table for E5TransformerLanguageModel;

      *a2 = v34;
    }
  }
}

uint64_t static LanguageModelReference.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)a1[2];
  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v8 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a1 + 24))
  {
    if (*((_BYTE *)a1 + 24) == 1)
    {
      if (v8 == 1)
      {
        v9 = specialized static Array<A>.== infix(_:_:)((_QWORD *)*a1, (_QWORD *)*a2);
        v10 = OUTLINED_FUNCTION_108_5();
        outlined copy of LanguageModelReference(v10, v11, v12, v13);
        v14 = OUTLINED_FUNCTION_96_1();
        outlined copy of LanguageModelReference(v14, v15, v16, v17);
        v18 = OUTLINED_FUNCTION_96_1();
        outlined consume of LanguageModelReference(v18, v19, v20, v21);
        v22 = OUTLINED_FUNCTION_108_5();
LABEL_26:
        outlined consume of LanguageModelReference(v22, v23, v24, v25);
        return v9 & 1;
      }
    }
    else if (v8 == 2)
    {
      if (v3 == v6 && v2 == v5)
        v9 = 1;
      else
        v9 = OUTLINED_FUNCTION_198();
      v47 = OUTLINED_FUNCTION_106_3();
      outlined copy of LanguageModelReference(v47, v48, v49, v50);
      v51 = OUTLINED_FUNCTION_95_4();
      outlined copy of LanguageModelReference(v51, v52, v53, v54);
      v55 = OUTLINED_FUNCTION_95_4();
      outlined consume of LanguageModelReference(v55, v56, v57, v58);
      v22 = OUTLINED_FUNCTION_106_3();
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if (*((_BYTE *)a2 + 24))
  {
LABEL_21:
    v31 = OUTLINED_FUNCTION_107_5();
    outlined copy of LanguageModelReference(v31, v32, v33, v34);
    v35 = OUTLINED_FUNCTION_94_2();
    outlined copy of LanguageModelReference(v35, v36, v37, v38);
    v39 = OUTLINED_FUNCTION_94_2();
    outlined consume of LanguageModelReference(v39, v40, v41, v42);
    v43 = OUTLINED_FUNCTION_107_5();
LABEL_22:
    outlined consume of LanguageModelReference(v43, v44, v45, v46);
    goto LABEL_23;
  }
  v26 = v3 == v6 && v2 == v5;
  if (!v26 && (OUTLINED_FUNCTION_198() & 1) == 0)
  {
    OUTLINED_FUNCTION_23_11();
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_22_12();
    v43 = v6;
    v44 = v5;
    v45 = v7;
LABEL_33:
    v46 = 0;
    goto LABEL_22;
  }
  if (!v4)
  {
    OUTLINED_FUNCTION_23_11();
    OUTLINED_FUNCTION_119_4(v3, v2);
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_42_8(v3, v2, 0);
    OUTLINED_FUNCTION_42_8(v6, v5, v7);
    if (v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
LABEL_31:
    v9 = 1;
    return v9 & 1;
  }
  if (!v7)
  {
    OUTLINED_FUNCTION_119_4(v6, v5);
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_22_12();
    v43 = v6;
    v44 = v5;
    v45 = 0;
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_21_9();
  OUTLINED_FUNCTION_21_1();
  v27 = OUTLINED_FUNCTION_50_1();
  specialized static Dictionary<>.== infix(_:_:)(v27, v7);
  v29 = v28;
  OUTLINED_FUNCTION_22_12();
  OUTLINED_FUNCTION_42_8(v6, v5, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    goto LABEL_31;
LABEL_23:
  v9 = 0;
  return v9 & 1;
}

uint64_t LanguageModelReference.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 13669 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7261656E696CLL && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6C616E7265747865 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t LanguageModelReference.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 13669;
  if (a1 == 1)
    return 0x7261656E696CLL;
  return 0x6C616E7265747865;
}

uint64_t LanguageModelReference.E5CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7372657470616461 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t LanguageModelReference.E5CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7372657470616461;
  else
    return 0x6150656C646E7562;
}

uint64_t LanguageModelReference.ExternalCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t LanguageModelReference.ExternalCodingKeys.stringValue.getter()
{
  return 1701667182;
}

uint64_t LanguageModelReference.LinearCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x736E656B6F74 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t LanguageModelReference.LinearCodingKeys.stringValue.getter()
{
  return 0x736E656B6F74;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.CodingKeys()
{
  char *v0;

  return LanguageModelReference.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = LanguageModelReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.CodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.CodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LanguageModelReference.E5CodingKeys()
{
  char *v0;

  return LanguageModelReference.E5CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.E5CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = LanguageModelReference.E5CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.E5CodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.E5CodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance LanguageModelReference.ExternalCodingKeys()
{
  LanguageModelReference.ExternalCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.ExternalCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = LanguageModelReference.ExternalCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.ExternalCodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.ExternalCodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LanguageModelReference.LinearCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = LanguageModelReference.LinearCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LanguageModelReference.LinearCodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LanguageModelReference.LinearCodingKeys()
{
  lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();
  return CodingKey.debugDescription.getter();
}

void LanguageModelReference.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_50_4();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.ExternalCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  v19 = v6;
  v21 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.LinearCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_31_0();
  v20 = v8;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.E5CodingKeys>);
  v9 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_45_0();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LanguageModelReference.CodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_19_1();
  v11 = *(unsigned __int8 *)(v0 + 24);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v11)
  {
    if (v11 != 1)
    {
      OUTLINED_FUNCTION_100_4();
      OUTLINED_FUNCTION_33_9();
      KeyedEncodingContainer.encode(_:forKey:)();
      OUTLINED_FUNCTION_98_4();
      OUTLINED_FUNCTION_194_1(v19, v18);
      v15 = OUTLINED_FUNCTION_111_4();
      v17 = v23;
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_115_3();
    v12 = v23;
    OUTLINED_FUNCTION_33_9();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
    v14 = v20;
  }
  else
  {
    lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
    v12 = v23;
    OUTLINED_FUNCTION_33_9();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    }
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    v14 = v2;
  }
  OUTLINED_FUNCTION_333(v14, v13);
  v15 = OUTLINED_FUNCTION_111_4();
  v17 = v12;
LABEL_9:
  v16(v15, v17);
  OUTLINED_FUNCTION_10_9();
}

void LanguageModelReference.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  OUTLINED_FUNCTION_50_4();
  v14 = v13;
  v45 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.ExternalCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_31_0();
  v44 = v17;
  v42 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.LinearCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_31_0();
  v43 = v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.E5CodingKeys>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_62_8();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LanguageModelReference.CodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_24_8();
  v46 = (uint64_t)v14;
  OUTLINED_FUNCTION_58_2(v14);
  lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
    goto LABEL_11;
  v24 = KeyedDecodingContainer.allKeys.getter();
  v26 = *(_QWORD *)(v24 + 16);
  if (!v26)
  {
LABEL_8:
    v33 = OUTLINED_FUNCTION_86_1();
    OUTLINED_FUNCTION_7_11();
    v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v35 = &type metadata for LanguageModelReference;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_32_9();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, *MEMORY[0x24BEE26D0], v33);
    swift_willThrow();
    OUTLINED_FUNCTION_88_3();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v22);
    goto LABEL_11;
  }
  v41 = v22;
  v27 = *(unsigned __int8 *)(v24 + 32);
  OUTLINED_FUNCTION_83_4(1, v26, v24, v24 + 32, v25, (2 * v26) | 1);
  v29 = v28;
  v31 = v30;
  swift_bridgeObjectRelease();
  if (v29 != v31 >> 1)
  {
    v22 = v41;
    goto LABEL_8;
  }
  v32 = v12;
  if (v27)
  {
    if (v27 == 1)
    {
      OUTLINED_FUNCTION_115_3();
      OUTLINED_FUNCTION_27_7();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      lazy protocol witness table accessor for type [Int] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_159(v43, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
      OUTLINED_FUNCTION_88_3();
      OUTLINED_FUNCTION_52_6();
      v36 = 0;
      v37 = 0;
      v38 = a10;
    }
    else
    {
      OUTLINED_FUNCTION_100_4();
      OUTLINED_FUNCTION_27_7();
      v38 = KeyedDecodingContainer.decode(_:forKey:)();
      v36 = v40;
      OUTLINED_FUNCTION_74_4(v44);
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_52_6();
      v37 = 0;
    }
  }
  else
  {
    lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys();
    OUTLINED_FUNCTION_27_7();
    LOBYTE(a10) = 0;
    v38 = KeyedDecodingContainer.decode(_:forKey:)();
    v36 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_18_9(v21);
    OUTLINED_FUNCTION_16_10();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v32, v41);
    v37 = a10;
  }
  *(_QWORD *)v45 = v38;
  *(_QWORD *)(v45 + 8) = v36;
  *(_QWORD *)(v45 + 16) = v37;
  *(_BYTE *)(v45 + 24) = v27;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1(v46);
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Decodable.init(from:) in conformance LanguageModelReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  LanguageModelReference.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void protocol witness for Encodable.encode(to:) in conformance LanguageModelReference()
{
  LanguageModelReference.encode(to:)();
}

uint64_t static TokenGenerationConfiguration.Sampling.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a2 + 8) || v2 != v3)
      return OUTLINED_FUNCTION_0_0();
    return 1;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4 == 1)
      return *(_QWORD *)&v2 == *(_QWORD *)&v3;
    return OUTLINED_FUNCTION_0_0();
  }
  if (v4 == 2 && *(_QWORD *)&v3 == 0)
    return 1;
  return OUTLINED_FUNCTION_0_0();
}

uint64_t TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t TokenGenerationConfiguration.Sampling.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x78616D677261 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x537375656C63756ELL && a2 == 0xEF676E696C706D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1265659764 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t TokenGenerationConfiguration.Sampling.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x78616D677261;
  if (a1 == 1)
    return 0x537375656C63756ELL;
  return 1265659764;
}

uint64_t TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys.stringValue.getter()
{
  return 0x6C6F687365726874;
}

uint64_t TokenGenerationConfiguration.Sampling.TopKCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t TokenGenerationConfiguration.Sampling.TopKCodingKeys.stringValue.getter()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  char *v0;

  return TokenGenerationConfiguration.Sampling.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.Sampling.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.Sampling.TopKCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();
  return CodingKey.debugDescription.getter();
}

void TokenGenerationConfiguration.Sampling.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_65_5();
  v5 = v1;
  v7 = v6;
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.TopKCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  v18 = v9;
  v17 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_45_0();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_62_8();
  v20 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.Sampling.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_28_3();
  v13 = *(unsigned __int8 *)(v5 + 8);
  OUTLINED_FUNCTION_58_2(v7);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  OUTLINED_FUNCTION_77_3();
  if (v13)
  {
    if (v13 != 1)
    {
      lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
      OUTLINED_FUNCTION_35_9();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v16);
      OUTLINED_FUNCTION_159(v2, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_101_4();
    OUTLINED_FUNCTION_35_9();
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
    v15 = v18;
  }
  else
  {
    OUTLINED_FUNCTION_117_3();
    OUTLINED_FUNCTION_35_9();
    KeyedEncodingContainer.encode(_:forKey:)();
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    v15 = v4;
  }
  OUTLINED_FUNCTION_333(v15, v14);
  OUTLINED_FUNCTION_159(v2, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
LABEL_7:
  OUTLINED_FUNCTION_9_12();
}

void TokenGenerationConfiguration.Sampling.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_65_5();
  v5 = v4;
  v35 = v6;
  v33 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.TopKCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_31_0();
  v37 = v8;
  v32 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_31_0();
  v36 = v10;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys>);
  v11 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_45_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.Sampling.CodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_28_3();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
    goto LABEL_10;
  v13 = v1;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
LABEL_9:
    v23 = OUTLINED_FUNCTION_86_1();
    OUTLINED_FUNCTION_7_11();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for TokenGenerationConfiguration.Sampling;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_32_9();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_333(v13, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_10:
    v26 = (uint64_t)v5;
    goto LABEL_11;
  }
  v17 = *(unsigned __int8 *)(v14 + 32);
  v18 = OUTLINED_FUNCTION_83_4(1, v16, v14, v14 + 32, v15, (2 * v16) | 1);
  v20 = v19;
  v22 = v21;
  OUTLINED_FUNCTION_63_0();
  if (v20 != v22 >> 1)
  {
    v13 = v1;
    goto LABEL_9;
  }
  if (v17)
  {
    if (v17 == 1)
    {
      OUTLINED_FUNCTION_117_3();
      OUTLINED_FUNCTION_40_5();
      KeyedDecodingContainer.decode(_:forKey:)();
      v29 = v28;
      OUTLINED_FUNCTION_159(v36, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
      OUTLINED_FUNCTION_16_10();
      OUTLINED_FUNCTION_333(v18, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      v30 = 0;
      v31 = v29;
    }
    else
    {
      OUTLINED_FUNCTION_101_4();
      OUTLINED_FUNCTION_40_5();
      v31 = KeyedDecodingContainer.decode(_:forKey:)();
      OUTLINED_FUNCTION_159(v37, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
      OUTLINED_FUNCTION_16_10();
      OUTLINED_FUNCTION_333(v18, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      v30 = 1;
    }
  }
  else
  {
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v34);
    OUTLINED_FUNCTION_16_10();
    OUTLINED_FUNCTION_98_4();
    OUTLINED_FUNCTION_333(v1, v27);
    v31 = 0;
    v30 = 2;
  }
  *(_QWORD *)v35 = v31;
  *(_BYTE *)(v35 + 8) = v30;
  v26 = (uint64_t)v5;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1(v26);
  OUTLINED_FUNCTION_9_12();
}

void protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration.Sampling()
{
  TokenGenerationConfiguration.Sampling.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration.Sampling()
{
  TokenGenerationConfiguration.Sampling.encode(to:)();
}

void static TokenGenerationConfiguration.DecoderType.== infix(_:_:)(void *a1, void *a2)
{
  char *v3;
  _BYTE __dst[136];
  _BYTE __src[136];
  _BYTE v6[136];
  uint64_t v7;
  _BYTE v8[144];

  outlined init with take of TokenGenerationConfiguration.DecoderType(a1, __dst);
  outlined init with take of TokenGenerationConfiguration.DecoderType(a2, __src);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__dst, v6);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__src, &v7);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__dst, v8);
  v3 = (char *)sub_248D5DF18
     + 4 * byte_248D77E60[_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v8)];
  __asm { BR              X10 }
}

void sub_248D5DF18()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[136];
  _BYTE v76[136];
  _BYTE v77[552];

  v0 = *(_QWORD *)OUTLINED_FUNCTION_70_7();
  v1 = outlined init with take of TokenGenerationConfiguration.DecoderType(v77, v75);
  if (OUTLINED_FUNCTION_69_7((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38,
                       v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62,
                       v64,
                       v66,
                       v68,
                       v70,
                       v71,
                       v72,
                       v73,
                       v74,
                       v75[0]))
  {
    OUTLINED_FUNCTION_14_8((uint64_t)v76);
    OUTLINED_FUNCTION_14_8((uint64_t)v77);
    OUTLINED_FUNCTION_47_8();
  }
  else
  {
    _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_((uint64_t)v75);
    OUTLINED_FUNCTION_97_5();
    OUTLINED_FUNCTION_38_8(v9);
    OUTLINED_FUNCTION_14_8((uint64_t)v77);
    OUTLINED_FUNCTION_14_8((uint64_t)v76);
    OUTLINED_FUNCTION_14_8((uint64_t)v76);
    OUTLINED_FUNCTION_14_8((uint64_t)v77);
    OUTLINED_FUNCTION_7_18(v10, v11, v12, v13, v14, v15, v16, v17, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39,
      v41,
      v43,
      v45,
      v47,
      v49,
      v51,
      v53,
      v55,
      v57,
      v59,
      v61,
      v63,
      v65,
      v67,
      v69,
      v0);
    OUTLINED_FUNCTION_47_8();
    outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v77);
    outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)v76);
  }
  OUTLINED_FUNCTION_31();
}

uint64_t TokenGenerationConfiguration.DecoderType.BasicCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65676175676E616CLL && a2 == 0xED00006C65646F4DLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void LanguageModelReference.ExternalCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_92_3();
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_50_7();
}

uint64_t TokenGenerationConfiguration.DecoderType.BasicCodingKeys.stringValue.getter()
{
  return 0x65676175676E616CLL;
}

uint64_t TokenGenerationConfiguration.DecoderType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6369736162 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000248D812B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x8000000248D812D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000248D81300)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t TokenGenerationConfiguration.DecoderType.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D5E7FC + 4 * byte_248D77E64[a1]))(0x6369736162, 0xE500000000000000);
}

unint64_t sub_248D5E7FC()
{
  return 0xD000000000000013;
}

unint64_t sub_248D5E818()
{
  return 0xD000000000000022;
}

uint64_t TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7466617264 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 2037279092 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D5EA0C + 4 * byte_248D77E68[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_248D5EA0C()
{
  return 0x7466617264;
}

uint64_t sub_248D5EA20()
{
  return 2037279092;
}

uint64_t sub_248D5EA30()
{
  return 0x726F697661686562;
}

uint64_t TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7466617264 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x726F697661686562 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x746567726174;
  if (a1 == 1)
    return 0x7466617264;
  return 0x726F697661686562;
}

uint64_t TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7466617264 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x726F697661686562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x656B6F54706F7473 && a2 == 0xEB0000000064496ELL)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248D5EDC0 + 4 * byte_248D77E6C[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_248D5EDC0()
{
  return 0x7466617264;
}

uint64_t sub_248D5EDD4()
{
  return 0x726F697661686562;
}

uint64_t sub_248D5EDEC()
{
  return 0x656B6F54706F7473;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageModelReference.ExternalCodingKeys()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_91_2();
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_50_7();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.BasicCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  return E5Function.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for DeterministicLanguageModelProtocol.logitsAreDense.getter in conformance E5TransformerLanguageModel();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  unsigned __int8 *v0;

  return TokenGenerationConfiguration.DecoderType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  unsigned __int8 *v0;

  return TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  char *v0;

  return TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  unsigned __int8 *v0;

  return TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys();
  return CodingKey.debugDescription.getter();
}

void TokenGenerationConfiguration.DecoderType.encode(to:)()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[136];
  _BYTE v13[144];

  OUTLINED_FUNCTION_50_4();
  v1 = v0;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_45_7(v5, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_31_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_28_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.BasicCodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_45_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.DecoderType.CodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_286();
  outlined init with take of TokenGenerationConfiguration.DecoderType(v1, v12);
  OUTLINED_FUNCTION_58_2(v3);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  OUTLINED_FUNCTION_77_3();
  outlined init with take of TokenGenerationConfiguration.DecoderType(v12, v13);
  v10 = (char *)sub_248D5F26C
      + 4 * byte_248D77E70[_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)v13)];
  __asm { BR              X10 }
}

void sub_248D5F26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_71_7();
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 24);
  *(_BYTE *)(v0 + 176) = 0;
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys();
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 192) = v4;
  *(_BYTE *)(v0 + 200) = v5;
  lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
  OUTLINED_FUNCTION_76_2();
  OUTLINED_FUNCTION_194_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_113_4();
  v8(v6, v7);
  OUTLINED_FUNCTION_10_9();
}

void TokenGenerationConfiguration.DecoderType.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_50_4();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_31_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys>);
  OUTLINED_FUNCTION_3_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_45_7(v8, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.BasicCodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_28_3();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.DecoderType.CodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_286();
  v25 = (uint64_t)v4;
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    v12 = KeyedDecodingContainer.allKeys.getter();
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      v26 = v10;
      v15 = *(unsigned __int8 *)(v12 + 32);
      OUTLINED_FUNCTION_83_4(1, v14, v12, v12 + 32, v13, (2 * v14) | 1);
      v17 = v16;
      v19 = v18;
      swift_bridgeObjectRelease();
      if (v17 == v19 >> 1)
        __asm { BR              X9 }
      v20 = v1;
      v10 = v26;
    }
    else
    {
      v20 = v1;
    }
    v21 = OUTLINED_FUNCTION_86_1();
    OUTLINED_FUNCTION_7_11();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v23 = &type metadata for TokenGenerationConfiguration.DecoderType;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_32_9();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v20, v10);
  }
  __swift_destroy_boxed_opaque_existential_1(v25);
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration.DecoderType()
{
  TokenGenerationConfiguration.DecoderType.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration.DecoderType()
{
  TokenGenerationConfiguration.DecoderType.encode(to:)();
}

void *TokenGenerationConfiguration.init(decoder:tokenizerPath:sampling:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9;
  _BYTE v11[136];
  _QWORD __src[21];

  outlined init with take of TokenGenerationConfiguration.DecoderType(a1, v11);
  v9 = *a4;
  LOBYTE(a4) = *((_BYTE *)a4 + 8);
  outlined init with take of TokenGenerationConfiguration.DecoderType(v11, __src);
  __src[17] = v9;
  LOBYTE(__src[18]) = (_BYTE)a4;
  __src[19] = a2;
  __src[20] = a3;
  return memcpy(a5, __src, 0xA8uLL);
}

void TokenGenerationConfiguration.decoder.getter(void *a1@<X8>)
{
  void *v1;
  _BYTE __dst[136];

  outlined init with take of TokenGenerationConfiguration.DecoderType(v1, __dst);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__dst, a1);
  outlined retain of TokenGenerationConfiguration.DecoderType((uint64_t)__dst);
}

void TokenGenerationConfiguration.sampling.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 144);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 136);
  *(_BYTE *)(a1 + 8) = v2;
}

void TokenGenerationConfiguration.tokenizerPath.getter()
{
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_49();
}

void static TokenGenerationConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v15[136];
  _BYTE v16[136];
  _BYTE __dst[136];
  _BYTE __src[136];

  outlined init with take of TokenGenerationConfiguration.DecoderType((void *)a1, __dst);
  v4 = *(double *)(a1 + 136);
  v5 = *(unsigned __int8 *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  outlined init with take of TokenGenerationConfiguration.DecoderType((void *)a2, __src);
  v8 = *(double *)(a2 + 136);
  v9 = *(unsigned __int8 *)(a2 + 144);
  v11 = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 160);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__dst, v16);
  outlined init with take of TokenGenerationConfiguration.DecoderType(__src, v15);
  static TokenGenerationConfiguration.DecoderType.== infix(_:_:)(v16, v15);
  if ((v12 & 1) == 0)
    goto LABEL_21;
  if (v5)
  {
    if (v5 == 1)
    {
      if (v9 != 1 || *(_QWORD *)&v4 != *(_QWORD *)&v8)
        goto LABEL_21;
    }
    else if (v9 != 2 || v8 != 0.0)
    {
      goto LABEL_21;
    }
  }
  else if (v9 || v4 != v8)
  {
    goto LABEL_21;
  }
  if (v7 && v10 && (v6 != v11 || v7 != v10))
  {
    OUTLINED_FUNCTION_55_7();
    OUTLINED_FUNCTION_198();
  }
LABEL_21:
  OUTLINED_FUNCTION_31();
}

uint64_t TokenGenerationConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x7265646F636564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x676E696C706D6173 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t TokenGenerationConfiguration.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x7265646F636564;
  if (a1 == 1)
    return 0x676E696C706D6173;
  return 0x657A696E656B6F74;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TokenGenerationConfiguration.CodingKeys()
{
  char *v0;

  return TokenGenerationConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TokenGenerationConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TokenGenerationConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TokenGenerationConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TokenGenerationConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void TokenGenerationConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[144];
  char v11;

  OUTLINED_FUNCTION_50_4();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TokenGenerationConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_28_3();
  outlined init with take of TokenGenerationConfiguration.DecoderType((void *)v0, v10);
  v7 = *(_QWORD *)(v0 + 136);
  v11 = *(_BYTE *)(v0 + 144);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of TokenGenerationConfiguration.DecoderType(v10, &v8);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType();
  OUTLINED_FUNCTION_37_6();
  if (!v1)
  {
    v8 = v7;
    v9 = v11;
    OUTLINED_FUNCTION_116_3();
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling();
    OUTLINED_FUNCTION_37_6();
    LOBYTE(v8) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  OUTLINED_FUNCTION_159(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_10_9();
}

void TokenGenerationConfiguration.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[21];
  _QWORD v16[21];
  _BYTE v17[136];
  uint64_t v18;
  _QWORD v19[22];

  OUTLINED_FUNCTION_50_4();
  v4 = v3;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TokenGenerationConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_15_11();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_24_8();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_69_5();
  }
  else
  {
    v8 = v6;
    lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType();
    OUTLINED_FUNCTION_54_7();
    outlined init with take of TokenGenerationConfiguration.DecoderType(&v18, v17);
    outlined init with take of TokenGenerationConfiguration.DecoderType(v17, v19);
    LOBYTE(v15[0]) = 1;
    OUTLINED_FUNCTION_84_5();
    lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling();
    OUTLINED_FUNCTION_54_7();
    v9 = v16[1];
    v14 = v16[0];
    v19[17] = v16[0];
    LOBYTE(v19[18]) = v16[1];
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11 = v2;
    v13 = v12;
    OUTLINED_FUNCTION_194_1(v11, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    v19[19] = v10;
    v19[20] = v13;
    outlined init with take of TokenGenerationConfiguration.DecoderType(v17, v15);
    v15[17] = v14;
    LOBYTE(v15[18]) = v9;
    v15[19] = v10;
    v15[20] = v13;
    outlined retain of TokenGenerationConfiguration((uint64_t)v15);
    OUTLINED_FUNCTION_84_5();
    memcpy(v8, v15, 0xA8uLL);
    OUTLINED_FUNCTION_69_5();
    memcpy(v16, v19, sizeof(v16));
    outlined release of TokenGenerationConfiguration((uint64_t)v16);
  }
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Decodable.init(from:) in conformance TokenGenerationConfiguration()
{
  TokenGenerationConfiguration.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TokenGenerationConfiguration()
{
  TokenGenerationConfiguration.encode(to:)();
}

void TokenGenerationConfiguration.makeDecoder(externalLanguageMaker:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  ValueMetadata *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  _BYTE v17[144];

  OUTLINED_FUNCTION_65_5();
  v2 = v0;
  outlined init with take of TokenGenerationConfiguration.DecoderType(v0, v17);
  v3 = (void *)v0[17];
  if (*((_BYTE *)v2 + 144))
  {
    if (*((_BYTE *)v2 + 144) != 1)
    {
      v12 = &type metadata for SeedableRandomNumberGenerator;
      v13 = lazy protocol witness table accessor for type SeedableRandomNumberGenerator and conformance SeedableRandomNumberGenerator();
      *(_QWORD *)&v11 = 0;
      v8 = type metadata accessor for GreedySampling();
      v9 = OUTLINED_FUNCTION_2_0();
      outlined init with take of LogitCollection(&v11, v9 + 16);
      v15 = v8;
      v16 = &protocol witness table for GreedySampling;
      v14 = v9;
LABEL_9:
      outlined init with take of TokenGenerationConfiguration.DecoderType(v17, &v11);
      v10 = (char *)&loc_248D60D20
          + 4
          * byte_248D77E78[_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)&v11)];
      __asm { BR              X10 }
    }
    v4 = type metadata accessor for TopK();
    v5 = TopK.__allocating_init(k:temperature:randomSeed:)(v3, 0, 1, 1.0);
    if (!v1)
    {
      v15 = v4;
      v16 = &protocol witness table for TopK;
LABEL_7:
      v14 = v5;
      goto LABEL_9;
    }
  }
  else
  {
    v6 = *(double *)&v3;
    v7 = type metadata accessor for NucleusSampling();
    v5 = NucleusSampling.__allocating_init(p:temperature:randomSeed:)(0, 1, v6, 1.0);
    if (!v1)
    {
      v15 = v7;
      v16 = &protocol witness table for NucleusSampling;
      goto LABEL_7;
    }
  }
  OUTLINED_FUNCTION_9_12();
}

void GuidedGenerationConfiguration.tokenizerPath.getter()
{
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_49();
}

void GuidedGenerationConfiguration.grammarString.getter()
{
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_55_7();
  OUTLINED_FUNCTION_49();
}

uint64_t GuidedGenerationConfiguration.stopTokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static GuidedGenerationConfiguration.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (OUTLINED_FUNCTION_198() & 1) == 0)
    return 0;
  v7 = v2 == v4 && v3 == v5;
  if (!v7 && (OUTLINED_FUNCTION_198() & 1) == 0)
    return 0;
  v8 = (_QWORD *)OUTLINED_FUNCTION_55_7();
  return specialized static Array<A>.== infix(_:_:)(v8, v9);
}

uint64_t GuidedGenerationConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x5372616D6D617267 && a2 == 0xED0000676E697274;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x656B6F54706F7473 && a2 == 0xEC0000007344496ELL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

void LanguageModelReference.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_92_3();
  Hasher._combine(_:)(a1);
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_50_7();
}

uint64_t GuidedGenerationConfiguration.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x657A696E656B6F74;
  if (a1 == 1)
    return 0x5372616D6D617267;
  return 0x656B6F54706F7473;
}

void protocol witness for Hashable.hashValue.getter in conformance GuidedGenerationConfiguration.CodingKeys()
{
  unsigned __int8 *v0;

  LanguageModelReference.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageModelReference.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_50_7();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GuidedGenerationConfiguration.CodingKeys()
{
  char *v0;

  return GuidedGenerationConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GuidedGenerationConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GuidedGenerationConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GuidedGenerationConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GuidedGenerationConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void GuidedGenerationConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_4();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GuidedGenerationConfiguration.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_58_2(v3);
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_333(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_10_9();
}

void GuidedGenerationConfiguration.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_50_4();
  v4 = v3;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GuidedGenerationConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_46_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_24_8();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_404();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_57_4();
    v10 = v9;
    v17 = v8;
    swift_bridgeObjectRetain();
    v11 = OUTLINED_FUNCTION_57_4();
    v13 = v12;
    v16 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    v15 = v14;
    OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_19_12();
    OUTLINED_FUNCTION_333(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (v15)
    {
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_404();
      OUTLINED_FUNCTION_63_0();
    }
    else
    {
      OUTLINED_FUNCTION_122();
      OUTLINED_FUNCTION_21_1();
      OUTLINED_FUNCTION_63_0();
      *v6 = v17;
      v6[1] = v10;
      v6[2] = v16;
      v6[3] = v13;
      v6[4] = v18;
      OUTLINED_FUNCTION_404();
      OUTLINED_FUNCTION_42();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_9();
}

void protocol witness for Decodable.init(from:) in conformance GuidedGenerationConfiguration()
{
  GuidedGenerationConfiguration.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance GuidedGenerationConfiguration()
{
  GuidedGenerationConfiguration.encode(to:)();
}

id @nonobjc TGIE5ModelConfigurationObjC.init(modelType:modelBundlePath:e5Functions:adapterConfigurations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  Class isa;
  Class v7;
  id v8;

  v5 = (void *)MEMORY[0x2495A9A78](a2, a3);
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5FunctionObjC(0, &lazy cache variable for type metadata for TGIE5FunctionObjC);
  lazy protocol witness table accessor for type TGIE5FunctionObjC and conformance NSObject((uint64_t)&lazy protocol witness table cache variable for type TGIE5FunctionObjC and conformance NSObject);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for TGIE5FunctionObjC(0, (unint64_t *)&lazy cache variable for type metadata for TGIE5AdapterConfigurationObjC);
  lazy protocol witness table accessor for type TGIE5FunctionObjC and conformance NSObject((uint64_t)&lazy protocol witness table cache variable for type TGIE5AdapterConfigurationObjC and conformance NSObject);
  v7 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v3, sel_initWithModelType_modelBundlePath_e5Functions_adapterConfigurations_, a1, v5, isa, v7);

  return v8;
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  BOOL v24;
  char v25;
  int64_t v26;

  if (a1 == a2)
    return;
  OUTLINED_FUNCTION_68_5();
  if (!v24)
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v26)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v26)
        return;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v26)
          return;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
    v19 = *v17;
    v18 = v17[1];
    OUTLINED_FUNCTION_50_1();
    swift_bridgeObjectRetain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_2();
      return;
    }
    v23 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v20);
    v24 = *v23 == v19 && v23[1] == v18;
    if (v24)
    {
      OUTLINED_FUNCTION_20_2();
    }
    else
    {
      v25 = OUTLINED_FUNCTION_198();
      OUTLINED_FUNCTION_20_2();
      if ((v25 & 1) == 0)
        return;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    return;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  if (a1 == a2)
    return;
  OUTLINED_FUNCTION_68_5();
  if (!v35)
    return;
  v37 = v4 + 64;
  OUTLINED_FUNCTION_31_9();
  v38 = v6 >> 6;
  while (v2)
  {
    OUTLINED_FUNCTION_85_3();
    v39 = v8;
    v10 = v9 | (v8 << 6);
LABEL_26:
    v23 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v10);
    v24 = *v23;
    v25 = v23[1];
    v26 = *(_QWORD *)(v7 + 56) + 24 * v10;
    v28 = *(_QWORD *)v26;
    v27 = *(_QWORD *)(v26 + 8);
    v29 = *(_BYTE *)(v26 + 16);
    OUTLINED_FUNCTION_122();
    outlined copy of MetadataSpecialToken(v28, v27, v29);
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
    v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
      goto LABEL_41;
    v33 = *(_QWORD *)(a2 + 56) + 24 * v30;
    v34 = *(_QWORD *)v33;
    if (*(_BYTE *)(v33 + 16) == 1)
    {
      if ((v29 & 1) == 0)
        return;
      v35 = v34 == v28 && *(_QWORD *)(v33 + 8) == v27;
      if (v35)
      {
        OUTLINED_FUNCTION_104_4();
      }
      else
      {
        v36 = OUTLINED_FUNCTION_198();
        OUTLINED_FUNCTION_104_4();
        if ((v36 & 1) == 0)
          return;
      }
    }
    else
    {
      if ((v29 & 1) != 0)
      {
        v29 = 1;
LABEL_41:
        outlined consume of MetadataSpecialToken(v28, v27, v29);
        return;
      }
      v5 = v39;
      if (v34 != v28)
        return;
    }
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v11 >= v38)
    return;
  if (*(_QWORD *)(v37 + 8 * v11))
    goto LABEL_25;
  OUTLINED_FUNCTION_82_4();
  if (v12 == v13)
    return;
  OUTLINED_FUNCTION_81_2();
  if (v14)
    goto LABEL_25;
  OUTLINED_FUNCTION_82_4();
  if (v12 == v13)
    return;
  OUTLINED_FUNCTION_81_2();
  if (v15)
    goto LABEL_25;
  OUTLINED_FUNCTION_82_4();
  if (v12 == v13)
    return;
  OUTLINED_FUNCTION_81_2();
  if (v17)
    goto LABEL_25;
  v18 = v16 + 4;
  if (v18 >= v38)
    return;
  if (*(_QWORD *)(v37 + 8 * v18))
  {
LABEL_25:
    OUTLINED_FUNCTION_120_3();
    v39 = v21;
    v10 = v22 + (v21 << 6);
    goto LABEL_26;
  }
  while (!__OFADD__(v18, 1))
  {
    OUTLINED_FUNCTION_82_4();
    if (v12 == v13)
      return;
    OUTLINED_FUNCTION_81_2();
    v18 = v19 + 1;
    if (v20)
      goto LABEL_25;
  }
LABEL_44:
  __break(1u);
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;

  if (a1 == a2 || (OUTLINED_FUNCTION_68_5(), !v4))
  {
LABEL_28:
    OUTLINED_FUNCTION_31();
    return;
  }
  v5 = 0;
  v6 = a1 + 64;
  OUTLINED_FUNCTION_31_9();
  v8 = v7 >> 6;
  while (1)
  {
    if (v2)
    {
      OUTLINED_FUNCTION_85_3();
      v10 = v9 | (v5 << 6);
      goto LABEL_23;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v8)
      goto LABEL_28;
    ++v5;
    if (!*(_QWORD *)(v6 + 8 * v11))
    {
      v5 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_28;
      if (!*(_QWORD *)(v6 + 8 * v5))
      {
        v5 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_28;
        if (!*(_QWORD *)(v6 + 8 * v5))
        {
          v5 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_28;
          if (!*(_QWORD *)(v6 + 8 * v5))
            break;
        }
      }
    }
LABEL_22:
    OUTLINED_FUNCTION_120_3();
    v10 = v13 + (v5 << 6);
LABEL_23:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    OUTLINED_FUNCTION_65_0();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_2();
      goto LABEL_28;
    }
    v20 = swift_bridgeObjectRetain();
    specialized static Dictionary<>.== infix(_:_:)(v20, v17);
    v22 = v21;
    OUTLINED_FUNCTION_20_2();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_28;
  }
  v12 = v11 + 4;
  if (v12 >= v8)
    goto LABEL_28;
  if (*(_QWORD *)(v6 + 8 * v12))
  {
    v5 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v5 >= v8)
      goto LABEL_28;
    ++v12;
    if (*(_QWORD *)(v6 + 8 * v5))
      goto LABEL_22;
  }
LABEL_30:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.CodingKeys, &unk_2519E1668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.CodingKeys, &unk_2519E1668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.CodingKeys, &unk_2519E1668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.CodingKeys, &unk_2519E1668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.CodingKeys and conformance LanguageModelReference.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.ExternalCodingKeys, &unk_2519E1818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.ExternalCodingKeys, &unk_2519E1818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.ExternalCodingKeys, &unk_2519E1818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.ExternalCodingKeys, &unk_2519E1818);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.LinearCodingKeys, &unk_2519E1788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.LinearCodingKeys, &unk_2519E1788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.LinearCodingKeys, &unk_2519E1788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.LinearCodingKeys, &unk_2519E1788);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.E5CodingKeys, &unk_2519E16F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.E5CodingKeys, &unk_2519E16F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.E5CodingKeys, &unk_2519E16F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys;
  if (!lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for LanguageModelReference.E5CodingKeys, &unk_2519E16F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageModelReference.E5CodingKeys and conformance LanguageModelReference.E5CodingKeys);
  }
  return result;
}

void lazy protocol witness table accessor for type [Int] and conformance <A> [A](uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!OUTLINED_FUNCTION_90_2(a1))
  {
    v4 = v3;
    v5 = v2;
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    v7 = v5;
    atomic_store(MEMORY[0x2495AAEA0](v4, v6, &v7), v1);
  }
  OUTLINED_FUNCTION_25();
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.CodingKeys, &unk_2519E1498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.CodingKeys, &unk_2519E1498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.CodingKeys, &unk_2519E1498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.CodingKeys, &unk_2519E1498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.CodingKeys and conformance TokenGenerationConfiguration.Sampling.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.TopKCodingKeys, &unk_2519E15D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.TopKCodingKeys, &unk_2519E15D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.TopKCodingKeys, &unk_2519E15D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.TopKCodingKeys, &unk_2519E15D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys, &unk_2519E1548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys, &unk_2519E1548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys, &unk_2519E1548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys, &unk_2519E1548);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys, &unk_2519E14B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys, &unk_2519E14B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys, &unk_2519E14B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys and conformance TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys);
  }
  return result;
}

void *outlined init with take of TokenGenerationConfiguration.DecoderType(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x85uLL);
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 132) >> 6;
}

uint64_t outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 152);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 216);
  v13 = *(_OWORD *)(a1 + 200);
  v11 = *(_OWORD *)(a1 + 232);
  v7 = *(unsigned int *)(a1 + 264) | ((unint64_t)*(unsigned __int8 *)(a1 + 268) << 32);
  v8 = *(_QWORD *)(a1 + 248);
  v9 = *(_QWORD *)(a1 + 256);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32));
  outlined copy of TokenGenerationConfiguration.DecoderType(v16, v15, v14, v2, v3, v4, v5, v6, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, v7);
  return a1;
}

void outlined copy of TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __asm { BR              X10 }
}

uint64_t sub_248D62454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5;

  a5();
  v5 = OUTLINED_FUNCTION_36_5();
  return ((uint64_t (*)(uint64_t))a5)(v5);
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(unsigned int *)(result + 128);
  v2 = v1 | ((unint64_t)*(unsigned __int8 *)(result + 132) << 32);
  *(_DWORD *)(result + 128) = v1;
  *(_BYTE *)(result + 132) = BYTE4(v2) & 0x3F;
  return result;
}

void outlined retain of TokenGenerationConfiguration.DecoderType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_90_2(a1);
  outlined copy of TokenGenerationConfiguration.DecoderType(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(unsigned int *)(v1 + 128) | ((unint64_t)*(unsigned __int8 *)(v1 + 132) << 32));
  OUTLINED_FUNCTION_50_7();
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.CodingKeys, &unk_2519E11C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.CodingKeys, &unk_2519E11C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.CodingKeys, &unk_2519E11C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.CodingKeys, &unk_2519E11C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.CodingKeys and conformance TokenGenerationConfiguration.DecoderType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys, &unk_2519E1408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys, &unk_2519E1408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys, &unk_2519E1408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys, &unk_2519E1408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior;
  if (!lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior, &type metadata for DraftingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior;
  if (!lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for DraftingBehavior, &type metadata for DraftingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DraftingBehavior and conformance DraftingBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys, &unk_2519E1378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys, &unk_2519E1378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys, &unk_2519E1378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys, &unk_2519E1378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys, &unk_2519E12E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys, &unk_2519E12E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys, &unk_2519E12E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys, &unk_2519E12E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys and conformance TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys, &unk_2519E1258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys, &unk_2519E1258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys, &unk_2519E1258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys, &unk_2519E1258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType.BasicCodingKeys and conformance TokenGenerationConfiguration.DecoderType.BasicCodingKeys);
  }
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi2_(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v3 = *(_QWORD *)(result - 72) & 3;
  v4 = *(_QWORD *)(result - 40) & 0x10101FFFFFFFFLL;
  v5 = *(_QWORD *)(result - 8) & 0x10101FFFFFFFFLL;
  v6 = ((unint64_t)(*(_BYTE *)(result + 4) & 1) << 32) | 0xC000000000;
  *(_QWORD *)(result - 104) &= 3uLL;
  *(_QWORD *)(result - 72) = v3;
  *(_QWORD *)(result - 40) = v4;
  *(_QWORD *)(result - 8) = v5;
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi1_(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v3 = *(_QWORD *)(result - 72) & 3;
  v4 = *(_QWORD *)(result - 40) & 0x10101FFFFFFFFLL;
  v5 = *(_QWORD *)(result - 8) & 0x10101FFFFFFFFLL;
  v6 = ((unint64_t)(*(_BYTE *)(result + 4) & 1) << 32) | 0x8000000000;
  *(_QWORD *)(result - 104) &= 3uLL;
  *(_QWORD *)(result - 72) = v3;
  *(_QWORD *)(result - 40) = v4;
  *(_QWORD *)(result - 8) = v5;
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi0_(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v3 = *(_QWORD *)(result - 72) & 3;
  v4 = *(_QWORD *)(result - 40) & 0x10101FFFFFFFFLL;
  v5 = *(_QWORD *)(result - 8) & 0x10101FFFFFFFFLL;
  v6 = ((unint64_t)(*(_BYTE *)(result + 4) & 1) << 32) | 0x4000000000;
  *(_QWORD *)(result - 104) &= 3uLL;
  *(_QWORD *)(result - 72) = v3;
  *(_QWORD *)(result - 40) = v4;
  *(_QWORD *)(result - 8) = v5;
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v6);
  return result;
}

uint64_t _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOi_(uint64_t a1)
{
  uint64_t result;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v3 = *(_BYTE *)(result + 4);
  v4 = *(_QWORD *)(result - 72) & 3;
  v5 = *(_QWORD *)(result - 40) & 0x10101FFFFFFFFLL;
  v6 = *(_QWORD *)(result - 8) & 0x10101FFFFFFFFLL;
  *(_QWORD *)(result - 104) &= 3uLL;
  *(_QWORD *)(result - 72) = v4;
  *(_QWORD *)(result - 40) = v5;
  *(_QWORD *)(result - 8) = v6;
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = v3 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.CodingKeys, &unk_2519E1138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.CodingKeys, &unk_2519E1138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.CodingKeys, &unk_2519E1138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.CodingKeys, &unk_2519E1138);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.CodingKeys and conformance TokenGenerationConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType, &type metadata for TokenGenerationConfiguration.DecoderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.DecoderType, &type metadata for TokenGenerationConfiguration.DecoderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.DecoderType and conformance TokenGenerationConfiguration.DecoderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling, &type metadata for TokenGenerationConfiguration.Sampling);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling;
  if (!lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TokenGenerationConfiguration.Sampling, &type metadata for TokenGenerationConfiguration.Sampling);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenGenerationConfiguration.Sampling and conformance TokenGenerationConfiguration.Sampling);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for GuidedGenerationConfiguration.CodingKeys, &unk_2519E10A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for GuidedGenerationConfiguration.CodingKeys, &unk_2519E10A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for GuidedGenerationConfiguration.CodingKeys, &unk_2519E10A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for GuidedGenerationConfiguration.CodingKeys, &unk_2519E10A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationConfiguration.CodingKeys and conformance GuidedGenerationConfiguration.CodingKeys);
  }
  return result;
}

uint64_t destroy for LanguageModelReference(uint64_t a1)
{
  return outlined consume of LanguageModelReference(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LanguageModelReference(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of LanguageModelReference(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of LanguageModelReference(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LanguageModelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of LanguageModelReference(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LanguageModelReference(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LanguageModelReference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for LanguageModelReference(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for LanguageModelReference(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

void type metadata accessor for LanguageModelReference()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t destroy for TokenGenerationConfiguration(uint64_t a1)
{
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104);
  v23 = *(unsigned __int8 *)(a2 + 132);
  v24 = *(unsigned int *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 112);
  v22 = *(_QWORD *)(a2 + 120);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a2, v5, v6, v7, v8, v9, v11, v10, v15, v16, v17, v18, v19, v20, v21, v22, v24 | (v23 << 32));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v21;
  *(_QWORD *)(a1 + 120) = v22;
  *(_BYTE *)(a1 + 132) = v23;
  *(_DWORD *)(a1 + 128) = v24;
  v12 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v28 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 72);
  v30 = *(_QWORD *)(a2 + 80);
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v33 = *(_QWORD *)(a2 + 104);
  v36 = *(unsigned int *)(a2 + 128);
  v37 = *(unsigned __int8 *)(a2 + 132);
  v34 = *(_QWORD *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 120);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a2, v5, v6, v7, v8, v9, v11, v10, v28, v29, v30, v31, v32, v33, v34, v35, v36 | (v37 << 32));
  v12 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v10;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = v29;
  *(_QWORD *)(a1 + 80) = v30;
  *(_QWORD *)(a1 + 88) = v31;
  v23 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 104) = v33;
  *(_DWORD *)(a1 + 128) = v36;
  *(_BYTE *)(a1 + 132) = v37;
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v35;
  outlined copy of TokenGenerationConfiguration.DecoderType(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v12);
  v26 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v26;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy168_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t assignWithTake for TokenGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = *(_BYTE *)(a2 + 132);
  v5 = *(_DWORD *)(a2 + 128);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v20;
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v21;
  v22 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v22;
  v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v23;
  *(_DWORD *)(a1 + 128) = v5;
  *(_BYTE *)(a1 + 132) = v4;
  outlined copy of TokenGenerationConfiguration.DecoderType(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, v18, v19);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v24 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 168))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24) >> 2;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for TokenGenerationConfiguration(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 4 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_QWORD *)(a1 + 125) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TokenGenerationConfiguration()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.Sampling(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.Sampling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TokenGenerationConfiguration.Sampling(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for TokenGenerationConfiguration.Sampling(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for TokenGenerationConfiguration.Sampling()
{
  OUTLINED_FUNCTION_1_6();
}

void destroy for TokenGenerationConfiguration.DecoderType(uint64_t a1)
{
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32));
}

uint64_t initializeWithCopy for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v20 = *(unsigned __int8 *)(a2 + 132);
  v21 = *(unsigned int *)(a2 + 128);
  v11 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a2, v4, v5, v6, v7, v8, v10, v9, v13, v14, v15, v16, v17, v18, v11, v19, v21 | (v20 << 32));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = v19;
  *(_BYTE *)(a1 + 132) = v20;
  *(_DWORD *)(a1 + 128) = v21;
  return a1;
}

uint64_t assignWithCopy for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_QWORD *)(a2 + 96);
  v32 = *(_QWORD *)(a2 + 104);
  v35 = *(unsigned __int8 *)(a2 + 132);
  v11 = *(unsigned int *)(a2 + 128);
  v33 = *(_QWORD *)(a2 + 112);
  v34 = *(_QWORD *)(a2 + 120);
  outlined copy of TokenGenerationConfiguration.DecoderType(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v27, v28, v29, v30, v31, v32, v33, v34, v11 | (v35 << 32));
  v12 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v27;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  v23 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_DWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 132) = v35;
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  outlined copy of TokenGenerationConfiguration.DecoderType(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v12);
  return a1;
}

void *__swift_memcpy133_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x85uLL);
}

uint64_t assignWithTake for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *(_BYTE *)(a2 + 132);
  v4 = *(_DWORD *)(a2 + 128);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(unsigned int *)(a1 + 128) | ((unint64_t)*(unsigned __int8 *)(a1 + 132) << 32);
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  *(_DWORD *)(a1 + 128) = v4;
  *(_BYTE *)(a1 + 132) = v3;
  outlined copy of TokenGenerationConfiguration.DecoderType(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 133))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24) >> 2;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 132) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 133) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 4 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_QWORD *)(a1 + 125) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 133) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destructiveProjectEnumData for TokenGenerationConfiguration.DecoderType(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  unint64_t v3;

  v2 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v3) & 0x3F;
  return result;
}

uint64_t destructiveInjectEnumTag for TokenGenerationConfiguration.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_DWORD *)(a1 + 128);
  result = a1 + 128;
  v4 = *(_QWORD *)(result - 72) & 3;
  v5 = *(_QWORD *)(result - 40) & 0x10101FFFFFFFFLL;
  v6 = *(_QWORD *)(result - 8) & 0x10101FFFFFFFFLL;
  v7 = (a2 << 38) | ((unint64_t)(*(_BYTE *)(result + 4) & 1) << 32);
  *(_QWORD *)(result - 104) &= 3uLL;
  *(_QWORD *)(result - 72) = v4;
  *(_QWORD *)(result - 40) = v5;
  *(_QWORD *)(result - 8) = v6;
  *(_DWORD *)result = v3;
  *(_BYTE *)(result + 4) = BYTE4(v7);
  return result;
}

void type metadata accessor for TokenGenerationConfiguration.DecoderType()
{
  OUTLINED_FUNCTION_1_6();
}

uint64_t destroy for GuidedGenerationConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GuidedGenerationConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GuidedGenerationConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GuidedGenerationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for GuidedGenerationConfiguration()
{
  OUTLINED_FUNCTION_1_6();
}

void *type metadata accessor for GuidedGenerationConfiguration.CodingKeys()
{
  return &unk_2519E10A8;
}

void *type metadata accessor for TokenGenerationConfiguration.CodingKeys()
{
  return &unk_2519E1138;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.CodingKeys()
{
  return &unk_2519E11C8;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.BasicCodingKeys()
{
  return &unk_2519E1258;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeCodingKeys()
{
  return &unk_2519E12E8;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.TwoStageSpeculativeWithStopTokenIdCodingKeys()
{
  return &unk_2519E1378;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_248D6398C + 4 * byte_248D77E85[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_248D639C0 + 4 * byte_248D77E80[v4]))();
}

uint64_t sub_248D639C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D639C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D639D0);
  return result;
}

uint64_t sub_248D639DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D639E4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_248D639E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D639F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TokenGenerationConfiguration.DecoderType.ThreeStageSpeculativeCodingKeys()
{
  return &unk_2519E1408;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.CodingKeys()
{
  return &unk_2519E1498;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.ArgmaxCodingKeys()
{
  return &unk_2519E14B8;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys()
{
  return &unk_2519E1548;
}

void *type metadata accessor for TokenGenerationConfiguration.Sampling.TopKCodingKeys()
{
  return &unk_2519E15D8;
}

uint64_t storeEnumTagSinglePayload for GuidedGenerationConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_248D63A98 + 4 * byte_248D77E8F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_248D63ACC + 4 * byte_248D77E8A[v4]))();
}

uint64_t sub_248D63ACC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D63AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D63ADCLL);
  return result;
}

uint64_t sub_248D63AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D63AF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_248D63AF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D63AFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LanguageModelReference.CodingKeys()
{
  return &unk_2519E1668;
}

uint64_t storeEnumTagSinglePayload for LanguageModelReference.E5CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248D63B64 + 4 * byte_248D77E99[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248D63B98 + 4 * byte_248D77E94[v4]))();
}

uint64_t sub_248D63B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D63BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248D63BA8);
  return result;
}

uint64_t sub_248D63BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248D63BBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248D63BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248D63BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LanguageModelReference.E5CodingKeys()
{
  return &unk_2519E16F8;
}

void *type metadata accessor for LanguageModelReference.LinearCodingKeys()
{
  return &unk_2519E1788;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.BasicCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return OUTLINED_FUNCTION_0_0();
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.DecoderType.BasicCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248D63C80 + 4 * byte_248D77E9E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248D63CA0 + 4 * byte_248D77EA3[v4]))();
}

_BYTE *sub_248D63C80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248D63CA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D63CA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D63CB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248D63CB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248D63CC0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for LanguageModelReference.ExternalCodingKeys()
{
  return &unk_2519E1818;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_248D6485C()
{
  return MEMORY[0x24BEE1778];
}

uint64_t sub_248D64868@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized Dictionary.keys.getter(*a1);
  *a2 = result;
  return result;
}

void type metadata accessor for TGIE5FunctionObjC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_49();
}

unint64_t lazy protocol witness table accessor for type TGIE5FunctionObjC and conformance NSObject(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  unint64_t *v3;
  uint64_t v4;

  result = OUTLINED_FUNCTION_90_2(a1);
  if (!result)
  {
    type metadata accessor for TGIE5FunctionObjC(255, v3);
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE5BD8], v4);
    atomic_store(result, v1);
  }
  return result;
}

_QWORD *assignWithCopy for TokenGenerationConfiguration.TokenGenerationConfigurationError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationConfiguration.TokenGenerationConfigurationError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TokenGenerationConfiguration.TokenGenerationConfigurationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for TokenGenerationConfiguration.TokenGenerationConfigurationError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for TokenGenerationConfiguration.TokenGenerationConfigurationError()
{
  OUTLINED_FUNCTION_1_6();
}

void OUTLINED_FUNCTION_2_16(uint64_t *a1@<X8>)
{
  LanguageModelReference.makeLanguageModel(externalLanguageMaker:)(0, a1);
}

uint64_t OUTLINED_FUNCTION_7_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  return static LanguageModelReference.== infix(_:_:)(&a35, &a29);
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)(v0 + 112) = v1;
  result = _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_(v0 + 320);
  v3 = *(_QWORD *)result;
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(result + 16);
  *(_QWORD *)(v0 + 104) = v3;
  *(_DWORD *)(v0 + 84) = *(unsigned __int8 *)(result + 24);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(result + 64);
  *(_DWORD *)(v0 + 64) = *(unsigned __int8 *)(result + 72);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(result + 80);
  return result;
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void OUTLINED_FUNCTION_14_8(uint64_t a1)
{
  outlined retain of TokenGenerationConfiguration.DecoderType(a1);
}

uint64_t OUTLINED_FUNCTION_16_10()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v2 - 72));
}

uint64_t OUTLINED_FUNCTION_18_9@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_19_12()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return outlined copy of LanguageModelReference(v1, v0, v2, 0);
}

uint64_t OUTLINED_FUNCTION_22_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return outlined consume of LanguageModelReference(v1, v0, v2, 0);
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return outlined copy of LanguageModelReference(v2, v0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_26_9()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void *OUTLINED_FUNCTION_28_8()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of TokenGenerationConfiguration.DecoderType((void *)(v0 + 208), (void *)(v1 - 232));
}

uint64_t OUTLINED_FUNCTION_32_9()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_33_9()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_6()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_37_6()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

__n128 OUTLINED_FUNCTION_38_8(uint64_t a1)
{
  return *(__n128 *)a1;
}

uint64_t OUTLINED_FUNCTION_40_5()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_42_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return outlined consume of LanguageModelReference(a1, a2, a3, 0);
}

unint64_t OUTLINED_FUNCTION_43_8(__n128 a1)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1[11] = a1;
  v1[12].n128_u64[0] = v2;
  v1[12].n128_u8[8] = v3;
  *(_BYTE *)(v4 - 65) = 0;
  return lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
}

void OUTLINED_FUNCTION_45_7(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_46_8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v1, *(_QWORD *)(v0 + 152));
}

uint64_t OUTLINED_FUNCTION_47_8()
{
  return outlined release of (TokenGenerationConfiguration.DecoderType, TokenGenerationConfiguration.DecoderType)((uint64_t)&STACK[0x290]);
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_52_6()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 96) + 8))(v0, *(_QWORD *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_54_7()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_56_7@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 212) = a1;
  *(_BYTE *)(v2 - 65) = 2;
  return lazy protocol witness table accessor for type DraftingBehavior and conformance DraftingBehavior();
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

_QWORD *OUTLINED_FUNCTION_58_2(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_59_6@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 156) = a1;
  return outlined init with copy of DeterministicLanguageModelProtocol(v1 + 456, v1 + 200);
}

Swift::Int OUTLINED_FUNCTION_64_8()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_69_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  return _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOg((uint64_t)&a40);
}

uint64_t OUTLINED_FUNCTION_70_7()
{
  uint64_t v0;

  return _s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_(v0 - 224);
}

__n128 OUTLINED_FUNCTION_71_7()
{
  __n128 *v0;
  uint64_t v1;
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)_s24TokenGenerationInference0aB13ConfigurationV11DecoderTypeOWOj0_(v1 - 224);
  result = *v2;
  v0[8] = *v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_73_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 72));
}

uint64_t OUTLINED_FUNCTION_74_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_76_2()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_77_3()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_78_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return outlined consume of LanguageModelReference(a1, a2, a3, *(_DWORD *)(v3 + 88));
}

uint64_t OUTLINED_FUNCTION_79_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined consume of LanguageModelReference(a1, a2, *(_QWORD *)(v2 + 80), *(_DWORD *)(v2 + 136));
}

uint64_t OUTLINED_FUNCTION_83_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return specialized ArraySlice.subscript.getter(a1, a2, a3, a4, 0, a6);
}

void OUTLINED_FUNCTION_84_5()
{
  uint64_t v0;

  outlined retain of TokenGenerationConfiguration.DecoderType(v0 + 352);
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  return type metadata accessor for DecodingError();
}

void OUTLINED_FUNCTION_87_4()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 88) = *(unsigned __int8 *)(v0 + 448);
  *(_BYTE *)(v0 + 208) = 2;
}

uint64_t OUTLINED_FUNCTION_88_3()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_89_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return outlined consume of LanguageModelReference(a1, a2, a3, *(_DWORD *)(v3 + 128));
}

uint64_t OUTLINED_FUNCTION_90_2(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_91_2()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_93_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  return static DraftingBehavior.== infix(_:_:)((uint64_t)&a35, (uint64_t)&a29);
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_95_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_100_4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 2;
  return lazy protocol witness table accessor for type LanguageModelReference.ExternalCodingKeys and conformance LanguageModelReference.ExternalCodingKeys();
}

unint64_t OUTLINED_FUNCTION_101_4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 2;
  return lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.TopKCodingKeys and conformance TokenGenerationConfiguration.Sampling.TopKCodingKeys();
}

uint64_t OUTLINED_FUNCTION_104_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined consume of MetadataSpecialToken(v1, v0, 1);
  return v2;
}

uint64_t OUTLINED_FUNCTION_106_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_107_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_108_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_109_4()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_110_4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 208) = 0;
  return lazy protocol witness table accessor for type LanguageModelReference and conformance LanguageModelReference();
}

uint64_t OUTLINED_FUNCTION_111_4()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_114_2()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 208) = 1;
}

unint64_t OUTLINED_FUNCTION_115_3()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return lazy protocol witness table accessor for type LanguageModelReference.LinearCodingKeys and conformance LanguageModelReference.LinearCodingKeys();
}

void OUTLINED_FUNCTION_116_3()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
}

unint64_t OUTLINED_FUNCTION_117_3()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 82) = 1;
  return lazy protocol witness table accessor for type TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys and conformance TokenGenerationConfiguration.Sampling.NucleusSamplingCodingKeys();
}

uint64_t OUTLINED_FUNCTION_118_3(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = *(_QWORD *)(result + 32);
  return result;
}

uint64_t OUTLINED_FUNCTION_119_4(uint64_t a1, uint64_t a2)
{
  return outlined copy of LanguageModelReference(a1, a2, 0, 0);
}

uint64_t TokenGenerationSession.__allocating_init(_:externalLanguageMaker:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  TokenGenerationSession.init(_:externalLanguageMaker:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenGenerationSession.addPrompt(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v3 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (*(_QWORD *)(v3 + 56))
  {
    swift_retain();
    v6 = dispatch thunk of TokenizerRunner.tokenize(_:)();
    swift_release();
    if (v2)
      return;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v7 = *(_QWORD *)(specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, countAndFlagsBits, (unint64_t)object)+ 16);
  if (v7)
  {
    v8 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
    v6 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v10 = *(v8 - 3);
      v9 = *(v8 - 2);
      if ((v9 ^ v10) >= 0x4000)
      {
        v12 = *(v8 - 1);
        v11 = *v8;
        if ((*v8 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v15 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v10, v9, v12, v11, 10);
          v19 = v18;
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          if ((v11 & 0x2000000000000000) != 0)
          {
            v14 = HIBYTE(v11) & 0xF;
            v22[0] = *(v8 - 1);
            v22[1] = v11 & 0xFFFFFFFFFFFFFFLL;
            v13 = v22;
          }
          else if ((v12 & 0x1000000000000000) != 0)
          {
            v13 = (_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v14 = v12 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v13 = (_QWORD *)_StringObject.sharedUTF8.getter();
          }
          v15 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n((uint64_t)v13, v14, v10, v9, v12, v11, 10);
          v23 = v16 & 1;
          if ((v16 & 1) == 0)
          {
LABEL_13:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_1_16();
              v6 = v20;
            }
            v17 = *(_QWORD *)(v6 + 16);
            if (v17 >= *(_QWORD *)(v6 + 24) >> 1)
            {
              OUTLINED_FUNCTION_1_16();
              v6 = v21;
            }
            *(_QWORD *)(v6 + 16) = v17 + 1;
            *(_QWORD *)(v6 + 8 * v17 + 32) = v15;
          }
        }
      }
      v8 += 4;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
  }
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x24BEE4AF8];
LABEL_24:
  TokenGenerationSession.addPrompt(tokens:)((Swift::OpaquePointer)v6);
  swift_bridgeObjectRelease();
}

uint64_t TokenGenerationSession.generateTokenChunk()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[5];
  v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 16) + *(_QWORD *)(v3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = TokenGenerationSession.generateTokenChunk();
  return v6(v2, v3);
}

uint64_t TokenGenerationSession.generateTokenChunk()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenGenerationSession.detokenize(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String result;
  uint64_t v21;

  if (*(_QWORD *)(v1 + 56))
  {
    swift_retain();
    v4 = dispatch thunk of TokenizerRunner.detokenize(_:)();
    v6 = v5;
    swift_release();
    if (v2)
      v8 = (void *)v7;
    else
      v8 = v6;
    if (v2)
      v9 = v7;
    else
      v9 = v4;
  }
  else
  {
    v10 = *((_QWORD *)tokens._rawValue + 2);
    if (v10)
    {
      v21 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v11 = (char *)tokens._rawValue + 32;
      do
      {
        v11 += 8;
        v12 = dispatch thunk of CustomStringConvertible.description.getter();
        v14 = v13;
        v15 = *(_QWORD *)(v21 + 16);
        if (v15 >= *(_QWORD *)(v21 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v21 + 16) = v15 + 1;
        v16 = v21 + 16 * v15;
        *(_QWORD *)(v16 + 32) = v12;
        *(_QWORD *)(v16 + 40) = v14;
        --v10;
      }
      while (v10);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v9 = BidirectionalCollection<>.joined(separator:)();
    v8 = v17;
    swift_bridgeObjectRelease();
  }
  v18 = v9;
  v19 = v8;
  result._object = v19;
  result._countAndFlagsBits = v18;
  return result;
}

uint64_t TokenGenerationSession.init(_:externalLanguageMaker:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[152];
  uint64_t v58;

  v4 = v2;
  OUTLINED_FUNCTION_2_17(v57);
  OUTLINED_FUNCTION_2_17(&v32);
  TokenGenerationConfiguration.makeDecoder(externalLanguageMaker:)();
  if (v3)
  {
    v6 = outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> (@out DeterministicLanguageModelProtocol, @error @owned Error))?(a2);
    OUTLINED_FUNCTION_3_16(v6, v7, v8, v9, v10, v11, v12, v13, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53,
      *((uint64_t *)&v53 + 1),
      v54,
      v55,
      v56,
      v57[0]);
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of LogitCollection(&v53, v2 + 16);
    v14 = v58;
    if (v58)
    {
      v15 = swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_3_16(v15, v16, v17, v18, v19, v20, v21, v22, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        *((uint64_t *)&v53 + 1),
        v54,
        v55,
        v56,
        v57[0]);
      Dictionary.init(dictionaryLiteral:)();
      type metadata accessor for TokenizerRunner();
      swift_allocObject();
      v14 = TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> (@out DeterministicLanguageModelProtocol, @error @owned Error))?(a2);
    }
    else
    {
      v23 = outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> (@out DeterministicLanguageModelProtocol, @error @owned Error))?(a2);
      OUTLINED_FUNCTION_3_16(v23, v24, v25, v26, v27, v28, v29, v30, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        *((uint64_t *)&v53 + 1),
        v54,
        v55,
        v56,
        v57[0]);
    }
    *(_QWORD *)(v4 + 56) = v14;
  }
  return v4;
}

Swift::Void __swiftcall TokenGenerationSession.addPrompt(tokens:)(Swift::OpaquePointer tokens)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD v6[2];

  v3 = v1[5];
  v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  v6[0] = tokens._rawValue;
  v6[1] = MEMORY[0x24BEE4AF8];
  v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v5(v6, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v45;

  if ((a1 & 0x8000000000000000) == 0)
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = MEMORY[0x24BEE4AF8];
    v40 = v7 + 16;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = 15;
    v9 = HIBYTE(a4) & 0xF;
    if (!a1 || ((a4 & 0x2000000000000000) != 0 ? (v10 = HIBYTE(a4) & 0xF) : (v10 = a3 & 0xFFFFFFFFFFFFLL), !v10))
    {
      if ((a4 & 0x2000000000000000) == 0)
        v9 = a3 & 0xFFFFFFFFFFFFLL;
      v28 = 7;
      if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
        v28 = 11;
      specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v28 | (v9 << 16), v8, a2 & 1, v7);
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v11;
    }
    v39 = a1;
    v45 = 4 * v10;
    v11 = MEMORY[0x24BEE4AF8];
    v12 = 15;
    v13 = 15;
    v14 = 15;
    do
    {
      String.subscript.getter();
      v15 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
      {
        v16 = (v13 >> 14 == v12 >> 14) & a2;
        if (!v16)
        {
          if (v12 >> 14 < v13 >> 14)
            goto LABEL_35;
          v17 = String.subscript.getter();
          v42 = v18;
          v43 = v17;
          v20 = v19;
          v41 = v21;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v11 = v26;
          }
          v22 = *(_QWORD *)(v11 + 16);
          if (v22 >= *(_QWORD *)(v11 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v11 = v27;
          }
          *(_QWORD *)(v11 + 16) = v22 + 1;
          v23 = (_QWORD *)(v11 + 32 * v22);
          v23[4] = v43;
          v23[5] = v42;
          v23[6] = v20;
          v23[7] = v41;
          *(_QWORD *)v40 = v11;
        }
        v24 = String.index(after:)();
        *(_QWORD *)(v8 + 16) = v24;
        if ((v16 & 1) != 0)
        {
          v13 = v24;
          v14 = v24;
        }
        else
        {
          v13 = v24;
          v14 = v24;
          if (*(_QWORD *)(v11 + 16) == v39)
            break;
        }
      }
      else
      {
        v24 = String.index(after:)();
      }
      v25 = v45 == v24 >> 14;
      v12 = v24;
      v24 = v14;
    }
    while (!v25);
    if (v45 == v13 >> 14 && (a2 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v11;
    }
    if (v45 >= v24 >> 14)
    {
      v29 = String.subscript.getter();
      v31 = v30;
      v33 = v32;
      v35 = v34;
      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v36 = *(_QWORD *)(*(_QWORD *)v40 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      v11 = *(_QWORD *)v40;
      *(_QWORD *)(v11 + 16) = v36 + 1;
      v37 = (_QWORD *)(v11 + 32 * v36);
      v37[4] = v29;
      v37[5] = v31;
      v37[6] = v33;
      v37[7] = v35;
      *(_QWORD *)v40 = v11;
      goto LABEL_33;
    }
  }
LABEL_35:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TokenGenerationSession.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t TokenGenerationSession.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    v15 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v15 + 16) = v14 + 1;
    v16 = (_QWORD *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_0_17(v6);
    return v7 | 4;
  }
  else
  {
    v3 = MEMORY[0x2495A9B38](15, a1 >> 16);
    OUTLINED_FUNCTION_0_17(v3);
    return v4 | 8;
  }
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = static String._copying(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = specialized Collection.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x2495A9AD8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2495A9AD8);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2495A9AD8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;

  v11 = a3;
  v12 = result;
  v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a3 & 0xC;
  v16 = a3;
  if (v15 == 4 << v13)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a5, a6);
    v16 = result;
  }
  v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0)
      v19 = HIBYTE(a6) & 0xF;
    if (v19 < v16 >> 16)
      goto LABEL_96;
    result = String.UTF8View._foreignDistance(from:to:)();
    v18 = result;
    v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    v20 = v17;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a5, a6);
    v17 = v20;
    v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    v21 = a4;
    v22 = v17;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v21, a5, a6);
    v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v23 = v17;
  if (v23 < v11 >> 16)
    goto LABEL_92;
  if (v23 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v24 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12)
    v25 = 0;
  v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v37 = a7 + 48;
        v38 = a7 + 55;
        v39 = a7 + 87;
        if (a7 > 10)
        {
          v37 = 58;
        }
        else
        {
          v39 = 97;
          v38 = 65;
        }
        if (v25)
        {
          v30 = 0;
          v40 = v25 + 1;
          v41 = result - 1;
          do
          {
            v42 = *v40;
            if (v42 < 0x30 || v42 >= v37)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                v35 = 0;
                if (v42 < 0x61 || v42 >= v39)
                  return v35;
                v43 = -87;
              }
              else
              {
                v43 = -55;
              }
            }
            else
            {
              v43 = -48;
            }
            v44 = v30 * a7;
            if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63)
              return 0;
            v30 = v44 + (v42 + v43);
            if (__OFADD__(v44, (v42 + v43)))
              return 0;
            ++v40;
            --v41;
          }
          while (v41);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      v45 = a7 + 48;
      v46 = a7 + 55;
      v47 = a7 + 87;
      if (a7 > 10)
      {
        v45 = 58;
      }
      else
      {
        v47 = 97;
        v46 = 65;
      }
      if (v25)
      {
        v48 = 0;
        do
        {
          v49 = *v25;
          if (v49 < 0x30 || v49 >= v45)
          {
            if (v49 < 0x41 || v49 >= v46)
            {
              v35 = 0;
              if (v49 < 0x61 || v49 >= v47)
                return v35;
              v50 = -87;
            }
            else
            {
              v50 = -55;
            }
          }
          else
          {
            v50 = -48;
          }
          v51 = v48 * a7;
          if ((unsigned __int128)(v48 * (__int128)a7) >> 64 != (v48 * a7) >> 63)
            return 0;
          v48 = v51 + (v49 + v50);
          if (__OFADD__(v51, (v49 + v50)))
            return 0;
          ++v25;
          --result;
        }
        while (result);
        return v51 + (v49 + v50);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v27 = a7 + 48;
      v28 = a7 + 55;
      v29 = a7 + 87;
      if (a7 > 10)
      {
        v27 = 58;
      }
      else
      {
        v29 = 97;
        v28 = 65;
      }
      if (v25)
      {
        v30 = 0;
        v31 = v25 + 1;
        v32 = result - 1;
        while (1)
        {
          v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              v35 = 0;
              if (v33 < 0x61 || v33 >= v29)
                return v35;
              v34 = -87;
            }
            else
            {
              v34 = -55;
            }
          }
          else
          {
            v34 = -48;
          }
          v36 = v30 * a7;
          if ((unsigned __int128)(v30 * (__int128)a7) >> 64 != (v30 * a7) >> 63)
            return 0;
          v30 = v36 - (v33 + v34);
          if (__OFSUB__(v36, (v33 + v34)))
            return 0;
          ++v31;
          if (!--v32)
            return v30;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed String) -> (@out DeterministicLanguageModelProtocol, @error @owned Error))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for TokenGenerationSession()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenGenerationSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenGenerationSession.__allocating_init(_:externalLanguageMaker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x2495AAEA0](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t sub_248D669EC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_248D66A10()
{
  return swift_deallocObject();
}

unint64_t OUTLINED_FUNCTION_0_17(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

void OUTLINED_FUNCTION_1_16()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *OUTLINED_FUNCTION_2_17(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xA8uLL);
}

uint64_t OUTLINED_FUNCTION_3_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  return outlined release of TokenGenerationConfiguration((uint64_t)&a35);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs_Sis5NeverOTg5119_s24TokenGenerationInference0A14HealingDecoderC25proceedingCharacterTokens10sourceText06targetJ0SaySiGSS_SStKFSiSJXEfU_0fG9Inference0fjK0CTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = Substring.distance(from:to:)();
  if (!v6)
  {
LABEL_25:
    swift_release();
    return;
  }
  v7 = v6;
  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v7 & 0x8000000000000000) == 0)
  {
    v26 = a5 + 2;
    v27 = a5;
    do
    {
      v8 = Substring.subscript.getter();
      v10 = v9;
      v11 = v8 == 32 && v9 == 0xE100000000000000;
      if (v11 || (v12 = v8, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v13 = a5[5];
        v14 = a5[6];
        __swift_project_boxed_opaque_existential_1(v26, v13);
        v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 32))(8492770, 0xA300000000000000, v13, v14);
      }
      else
      {
        v16 = v12 == 9 && v10 == 0xE100000000000000;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v17 = a5[5];
          v18 = a5[6];
          __swift_project_boxed_opaque_existential_1(v26, v17);
          v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 32))(0x3E393078303CLL, 0xE600000000000000, v17, v18);
        }
        else
        {
          v19 = v12 == 10 && v10 == 0xE100000000000000;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v20 = a5[5];
            v21 = a5[6];
            __swift_project_boxed_opaque_existential_1(v26, v20);
            v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v21 + 32))(0x3E413078303CLL, 0xE600000000000000, v20, v21);
          }
          else
          {
            v24 = a5[5];
            v25 = a5[6];
            __swift_project_boxed_opaque_existential_1(v26, v24);
            v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 32))(v12, v10, v24, v25);
          }
        }
      }
      v22 = v15;
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v28 + 16);
      if (v23 >= *(_QWORD *)(v28 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v28 + 16) = v23 + 1;
      *(_QWORD *)(v28 + 8 * v23 + 32) = v22;
      Substring.index(after:)();
      --v7;
      a5 = v27;
    }
    while (v7);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  v4[22] = *v3;
  return swift_task_switch();
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 168);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol);
  OUTLINED_FUNCTION_260();
  if (swift_dynamicCast())
  {
    v1 = (__int128 *)OUTLINED_FUNCTION_260();
    outlined init with take of LogitCollection(v1, v2);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    OUTLINED_FUNCTION_24_6((_QWORD *)(v0 + 16), v3);
    v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v4 + 16) + *(_QWORD *)(v4 + 16));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v5;
    *v5 = v0;
    v5[1] = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:);
    return v10(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v3, v4);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
    outlined destroy of LogitPresampler?(v0 + 56, &demangling cache variable for type metadata for UnbatchedDeterministicLanguageModelProtocol?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v8 = swift_allocObject();
    *(_QWORD *)(v0 + 200) = v8;
    *(_OWORD *)(v8 + 16) = xmmword_248D75A50;
    *(_QWORD *)(v8 + 32) = v7;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v9;
    *v9 = v0;
    v9[1] = specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:);
    return DelayedMaskedLanguageModel.nextTokensLogits(nodes:presampler:)(v8, *(_QWORD *)(v0 + 160));
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t result;

  specialized Collection.first.getter(*(_QWORD *)(v0 + 224), v0 + 96);
  result = OUTLINED_FUNCTION_7_0();
  if (*(_QWORD *)(v0 + 120))
  {
    outlined init with take of LogitCollection((__int128 *)(v0 + 96), *(_QWORD *)(v0 + 144));
    return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_43_9();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_43_9();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 216) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 224) = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t specialized Sequence.forEach(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];

  v3 = v2;
  v6 = *a2;
  if (a1 >> 62)
    goto LABEL_11;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    v10[6] = v3;
    v3 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2495A9EB0](v3 - 4, a1);
      else
        swift_retain();
      v8 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v10[3] = v6;
      v10[4] = &protocol witness table for OneTokenHealingPrefixMatchingLanguageModel;
      v10[0] = a2;
      swift_retain();
      DelayedMaskedLanguageModel.resolve(maskLanguageModel:)((uint64_t)v10);
      outlined destroy of LogitPresampler?((uint64_t)v10, &demangling cache variable for type metadata for DeterministicLanguageModelProtocol?);
      swift_release();
      ++v3;
      if (v8 == v7)
        goto LABEL_12;
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_12:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t TokenHealingDecoder.__allocating_init(processor:buildDecoder:)(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>), _QWORD *))
{
  uint64_t v4;

  v4 = swift_allocObject();
  TokenHealingDecoder.init(processor:buildDecoder:)(a1, a2);
  return v4;
}

void TokenHealingDecoder.baseDecoder.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_22();
  v0 = OUTLINED_FUNCTION_260();
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v0, v1);
  OUTLINED_FUNCTION_2();
}

void TokenHealingDecoder.baseDecoder.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 56;
  OUTLINED_FUNCTION_7_9();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of LogitCollection(a1, v3);
  swift_endAccess();
  OUTLINED_FUNCTION_2();
}

uint64_t (*TokenHealingDecoder.baseDecoder.modify())()
{
  OUTLINED_FUNCTION_7_9();
  return DelayedMaskedLanguageModel.baseLanguageModel.modify;
}

uint64_t TokenHealingDecoder.init(processor:buildDecoder:)(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>), _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD v8[4];
  __int128 v9[2];
  uint64_t v10;

  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 104) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 112) = v6;
  *(_BYTE *)(v2 + 128) = 0;
  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, v2 + 16);
  *(_QWORD *)(v2 + 96) = v6;
  v10 = v6;
  v8[2] = &v10;
  a2(v9, partial apply for closure #1 in TokenHealingDecoder.init(processor:buildDecoder:), v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  if (v3)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_2();
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of LogitCollection(v9, v2 + 56);
    *(_QWORD *)(v2 + 120) = v10;
  }
  return v2;
}

uint64_t closure #1 in TokenHealingDecoder.init(processor:buildDecoder:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9[2];

  _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(a1, (uint64_t)v9);
  v5 = type metadata accessor for DelayedMaskedLanguageModel();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  outlined init with take of LogitCollection(v9, v6 + 24);
  v7 = swift_retain();
  MEMORY[0x2495A9BB0](v7);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFF8) + 0x10));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  result = specialized Array._endMutation()();
  a3[3] = v5;
  a3[4] = (uint64_t)&protocol witness table for DelayedMaskedLanguageModel;
  *a3 = v6;
  return result;
}

Swift::Void __swiftcall TokenHealingDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v1 + 128) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
    *(_QWORD *)(v1 + 104) = *(_QWORD *)prompt.queryTokens._rawValue;
    *(_QWORD *)(v1 + 112) = v2;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_52();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t TokenHealingDecoder.decodeNextChunk()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = v0;
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = *(_QWORD *)(v0 + 80);
  if ((*(_BYTE *)(v1 + 128) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (*(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v1 + 96) = MEMORY[0x24BEE4AF8];
      return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v0 + 8));
    }
    else
    {
      v5 = v1 + 56;
      OUTLINED_FUNCTION_22();
      OUTLINED_FUNCTION_186_1(v5);
      v6 = (_QWORD *)OUTLINED_FUNCTION_10_16();
      *(_QWORD *)(v0 + 96) = v6;
      v7 = OUTLINED_FUNCTION_41_8(v6, (uint64_t)TokenHealingDecoder.decodeNextChunk());
      return OUTLINED_FUNCTION_18_2(v7, v8, v9);
    }
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v4;
    *v4 = v0;
    v4[1] = TokenHealingDecoder.decodeNextChunk();
    return TokenHealingDecoder.healPromptTokens()();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  if (v0)
    return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v2 + 16))
  {
    *(_QWORD *)(v1 + 96) = MEMORY[0x24BEE4AF8];
    return OUTLINED_FUNCTION_7_5(v2, *(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v4 = v1 + 56;
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_186_1(v4);
    v5 = (_QWORD *)OUTLINED_FUNCTION_10_16();
    *(_QWORD *)(v0 + 96) = v5;
    v6 = OUTLINED_FUNCTION_41_8(v5, (uint64_t)TokenHealingDecoder.decodeNextChunk());
    return OUTLINED_FUNCTION_18_2(v6, v7, v8);
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_43_9();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_43_9();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t TokenHealingDecoder.decodeNextChunk()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v4);
  *(_QWORD *)(v2 + 104) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 112) = a1;
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t TokenHealingDecoder.healPromptTokens()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 248) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[3];
  Swift::OpaquePointer v40;

  v1 = v0[31];
  if ((*(_BYTE *)(v1 + 128) & 1) != 0)
  {
    __break(1u);
LABEL_28:
    swift_once();
LABEL_5:
    v6 = OUTLINED_FUNCTION_15_4();
    v7 = (void *)__swift_project_value_buffer(v6, (uint64_t)static Log.healing);
    Logger.logObject.getter();
    v8 = OUTLINED_FUNCTION_83_0();
    if (OUTLINED_FUNCTION_17_3(v8))
    {
      *(_WORD *)OUTLINED_FUNCTION_4_11() = 0;
      OUTLINED_FUNCTION_24_9(&dword_248CAA000, v9, v10, "Skipping token healing because prompt was empty");
      OUTLINED_FUNCTION_0_1();
    }
    v11 = v0[31];

    v12 = *(_QWORD *)(v11 + 120);
    if (v12 >> 62)
    {
      OUTLINED_FUNCTION_59_3();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      if (v13)
        goto LABEL_9;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_59_3();
      if (v13)
      {
LABEL_9:
        if (v13 >= 1)
        {
          while ((v12 & 0xC000000000000001) == 0)
          {
            OUTLINED_FUNCTION_35_10();
            OUTLINED_FUNCTION_22_13();
            OUTLINED_FUNCTION_52_7();
            OUTLINED_FUNCTION_116();
          }
          OUTLINED_FUNCTION_50_9();
        }
        __break(1u);
LABEL_32:
        swift_once();
        goto LABEL_18;
      }
    }
    OUTLINED_FUNCTION_19_6();
LABEL_14:
    v14 = (uint64_t (*)(void))OUTLINED_FUNCTION_30_11();
    return v14();
  }
  v2 = *(_QWORD *)(v1 + 104);
  if (!*(_QWORD *)(v2 + 16))
  {
    if (one-time initialization token for healing == -1)
      goto LABEL_5;
    goto LABEL_28;
  }
  v3 = (_QWORD *)(v1 + 16);
  OUTLINED_FUNCTION_186_1(v1 + 16);
  type metadata accessor for OneTokenHealingPrefixMatchingLanguageModel();
  swift_allocObject();
  OUTLINED_FUNCTION_59_3();
  v4 = (_QWORD *)OUTLINED_FUNCTION_260();
  v5 = OneTokenHealingPrefixMatchingLanguageModel.init(processor:prompt:)(v4, v40);
  v0[32] = v5;
  v16 = (uint64_t *)v5;
  if (v5)
  {
    v17 = v0[31];
    swift_retain();
    v18 = OUTLINED_FUNCTION_21_1();
    specialized Sequence.forEach(_:)(v18, v16);
    OUTLINED_FUNCTION_42();
    v19 = *(_QWORD *)(v17 + 40);
    v20 = *(_QWORD *)(v17 + 48);
    OUTLINED_FUNCTION_24_6(v3, v19);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v2, v19, v20);
    v0[33] = v21;
    v0[34] = v22;
    v35 = v21;
    v36 = v22;
    OUTLINED_FUNCTION_7_0();
    v37 = *(uint64_t *)((char *)v16
                     + OBJC_IVAR____TtC24TokenGenerationInference42OneTokenHealingPrefixMatchingLanguageModel_leadingTokens);
    v0[35] = v37;
    OUTLINED_FUNCTION_52();
    v38 = (_QWORD *)swift_task_alloc();
    v0[36] = v38;
    *v38 = v0;
    v38[1] = TokenHealingDecoder.healPromptTokens();
    return TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptText:)(v37, v35, v36);
  }
  OUTLINED_FUNCTION_7_0();
  if (one-time initialization token for healing != -1)
    goto LABEL_32;
LABEL_18:
  v23 = OUTLINED_FUNCTION_15_4();
  v24 = (void *)__swift_project_value_buffer(v23, (uint64_t)static Log.healing);
  Logger.logObject.getter();
  v25 = OUTLINED_FUNCTION_83_0();
  if (OUTLINED_FUNCTION_17_3(v25))
  {
    *(_WORD *)OUTLINED_FUNCTION_4_11() = 0;
    OUTLINED_FUNCTION_24_9(&dword_248CAA000, v26, v27, "Skipping token healing because no healing is possible");
    OUTLINED_FUNCTION_0_1();
  }
  v28 = v0[31];

  v29 = *(_QWORD *)(v28 + 120);
  if (v29 >> 62)
  {
    OUTLINED_FUNCTION_59_3();
    result = _CocoaArrayWrapper.endIndex.getter();
    v30 = result;
    if (result)
      goto LABEL_22;
    goto LABEL_26;
  }
  v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = OUTLINED_FUNCTION_59_3();
  if (!v30)
  {
LABEL_26:
    v31 = v0[31];
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_22();
    _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v31 + 56, (uint64_t)(v0 + 17));
    v32 = v0[20];
    v33 = v0[21];
    OUTLINED_FUNCTION_24_6(v0 + 17, v32);
    v34 = *(_QWORD *)(v31 + 112);
    v39[0] = *(_QWORD *)(v1 + 104);
    v39[1] = v34;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v33 + 8))(v39, v32, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
    goto LABEL_14;
  }
LABEL_22:
  if (v30 >= 1)
  {
    while ((v29 & 0xC000000000000001) == 0)
    {
      OUTLINED_FUNCTION_35_10();
      OUTLINED_FUNCTION_22_13();
      OUTLINED_FUNCTION_52_7();
      OUTLINED_FUNCTION_116();
    }
    OUTLINED_FUNCTION_50_9();
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0 + 31;
  v2 = v0[38];
  v3 = TokenHealingDecoder.proceedingCharacterTokens(sourceText:targetText:)(v0[33], v0[34], v0[39], v0[37]);
  if (v2)
  {
    OUTLINED_FUNCTION_50_2();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_116();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_31_10();
  }
  else
  {
    v5 = v3;
    v6 = *v1;
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_50_2();
    *(_QWORD *)(v6 + 96) = v5;
    swift_bridgeObjectRelease();
    if (one-time initialization token for healing != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_15_4();
    __swift_project_value_buffer(v7, (uint64_t)static Log.healing);
    OUTLINED_FUNCTION_206_0();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v31 = v9;
      v10 = *v1 + 16;
      v11 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      v35 = OUTLINED_FUNCTION_4_11();
      v32 = v11;
      v33 = v0 + 22;
      *(_DWORD *)v11 = 136315138;
      v12 = *(_QWORD *)(v6 + 96);
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v10, (uint64_t)(v0 + 22));
      v13 = *(_QWORD *)(v12 + 16);
      v14 = MEMORY[0x24BEE4AF8];
      v34 = v0;
      if (v13)
      {
        v30 = v8;
        v36 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = 0;
        v14 = v36;
        do
        {
          v16 = v13;
          v17 = v12;
          v18 = *(_QWORD *)(v12 + 8 * v15 + 32);
          v19 = v0[25];
          v20 = v0[26];
          __swift_project_boxed_opaque_existential_1(v33, v19);
          v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))(v18, v19, v20);
          v23 = v22;
          v36 = v14;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v14 = v36;
          }
          v24 = *(_QWORD *)(v14 + 16);
          if (v24 >= *(_QWORD *)(v14 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v14 = v36;
          }
          ++v15;
          *(_QWORD *)(v14 + 16) = v24 + 1;
          v25 = v14 + 16 * v24;
          *(_QWORD *)(v25 + 32) = v21;
          *(_QWORD *)(v25 + 40) = v23;
          v13 = v16;
          v12 = v17;
          v0 = v34;
        }
        while (v16 != v15);
        OUTLINED_FUNCTION_20_2();
        v8 = v30;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      v26 = MEMORY[0x2495A9BC8](v14, MEMORY[0x24BEE0D00]);
      v28 = v27;
      OUTLINED_FUNCTION_63_0();
      v34[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_101();
      _os_log_impl(&dword_248CAA000, v8, v31, "Boundary overflow tokens: %s", v32, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_1();
    }
    OUTLINED_FUNCTION_101();

    OUTLINED_FUNCTION_116();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_30_11();
  }
  return v4();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_42();
  swift_release();
  *(_BYTE *)(*(_QWORD *)(v0 + 248) + 128) = 1;
  return OUTLINED_FUNCTION_1_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t TokenHealingDecoder.healPromptTokens()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v4);
  v2[37] = v5;
  v2[38] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    v2[39] = a1;
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptText:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  return swift_task_switch();
}

uint64_t TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptText:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  TokenGenerationInference::SamplingDecoderPrompt v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  NSObject *v30;
  os_log_type_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t (*v48)(void);
  uint64_t (*v49)(void);
  uint64_t v50;
  uint64_t (*v51)(void);

  if (one-time initialization token for healing != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_15_4();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.healing);
  *(_QWORD *)(v0 + 224) = v3;
  swift_retain();
  OUTLINED_FUNCTION_21_1();
  v4 = v3;
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_83_0();
  v6 = os_log_type_enabled(v3, v5);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  if (v6)
  {
    v9 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(*(_QWORD *)(v7 + 104) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v9 + 12) = 2048;
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_51_1();
    _os_log_impl(&dword_248CAA000, v4, v5, "Healing prompt from %ld to %ld token(s)", (uint8_t *)v9, 0x16u);
    OUTLINED_FUNCTION_0_1();
  }
  swift_release();
  OUTLINED_FUNCTION_51_1();

  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(uint64_t (**)(void))(v10 + 112);
  *(_QWORD *)(v0 + 232) = v11;
  v12 = *(_QWORD *)(v10 + 120);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!(v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_21_1();
    if (v13)
      goto LABEL_7;
LABEL_19:
    OUTLINED_FUNCTION_42();
    __break(1u);
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_21_1();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13)
    goto LABEL_19;
LABEL_7:
  if (__OFSUB__(v13--, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v13, (v12 & 0xC000000000000001) == 0);
  if ((v12 & 0xC000000000000001) == 0)
  {
    v15 = *(_QWORD *)(v12 + 8 * v13 + 32);
    swift_retain();
    goto LABEL_10;
  }
LABEL_21:
  v15 = MEMORY[0x2495A9EB0](v13, v12);
LABEL_10:
  *(_QWORD *)(v0 + 240) = v15;
  v16 = *(_QWORD *)(v0 + 192);
  OUTLINED_FUNCTION_42();
  v17 = DelayedMaskedLanguageModel.startNode.getter();
  swift_bridgeObjectRetain();
  v50 = v16;
  v51 = v11;
  v18.queryTokens._rawValue = &v50;
  v47 = DelayedMaskedLanguageModel.node(forPreviousNode:prompt:)(v17, v18);
  OUTLINED_FUNCTION_50_2();
  v48 = v11;
  OUTLINED_FUNCTION_51_1();
  v19 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v0 + 248) = v19;
  OUTLINED_FUNCTION_36_7();
  result = (*(uint64_t (**)(uint64_t (*)(void), uint64_t))(v1 + 48))(v11, v1);
  v21 = v19 + result;
  *(_QWORD *)(v0 + 256) = v19 + result;
  if (__OFADD__(v19, result))
  {
    __break(1u);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 192);
    OUTLINED_FUNCTION_36_7();
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v22, v0, v1);
    v25 = v24;
    swift_bridgeObjectRetain();
    if (!OUTLINED_FUNCTION_23_12() && v19 < v21)
    {
      OUTLINED_FUNCTION_50_2();
      v26 = *(_QWORD *)(v0 + 192);
      *(_QWORD *)(v0 + 264) = v47;
      *(_QWORD *)(v0 + 272) = v26;
      OUTLINED_FUNCTION_29_7();
      v27 = (_QWORD *)OUTLINED_FUNCTION_25_9();
      *(_QWORD *)(v0 + 280) = v27;
      *v27 = v0;
      v27[1] = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptText:);
      return OUTLINED_FUNCTION_8_11(v0 + 16, v47, v19, v48);
    }
    v28 = *(_QWORD *)(v0 + 192);
    v29 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 112);
    swift_bridgeObjectRetain_n();
    v49 = v29;
    OUTLINED_FUNCTION_59_3();
    OUTLINED_FUNCTION_206_0();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    v46 = v23;
    if (!os_log_type_enabled(v30, v31))
    {
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_58_3();
      OUTLINED_FUNCTION_19_6();

      v42 = *(_QWORD *)(v0 + 216) + 56;
      OUTLINED_FUNCTION_22();
      _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v42, v0 + 56);
      v44 = *(_QWORD *)(v0 + 80);
      v43 = *(_QWORD *)(v0 + 88);
      OUTLINED_FUNCTION_24_6((_QWORD *)(v0 + 56), v44);
      v50 = v28;
      v51 = v49;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v43 + 8))(&v50, v44, v43);
      swift_release();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_7_0();
      __swift_destroy_boxed_opaque_existential_1(v0 + 56);
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_119_0();
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_7_19(v46, v25, *(uint64_t (**)(void))(v0 + 8));
    }
    v45 = v31;
    v32 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 216);
    v34 = OUTLINED_FUNCTION_4_11();
    v50 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v34 = 136315394;
    specialized MutableCollection.subscript.getter(v32, *(_QWORD *)(v33 + 104));
    v35 = ArraySlice.description.getter();
    v37 = v36;
    swift_unknownObjectRelease();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    result = OUTLINED_FUNCTION_19_6();
    *(_WORD *)(v34 + 12) = 2080;
    if (*(_QWORD *)(v28 + 16) >= v32)
    {
      swift_bridgeObjectRetain();
      v38 = ArraySlice.description.getter();
      v40 = v39;
      OUTLINED_FUNCTION_20_2();
      *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_19_6();
      OUTLINED_FUNCTION_32_10(&dword_248CAA000, v41, v45, "Healed from %s to %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_1();
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v1 + 288) = v0;
  swift_task_dealloc();
  outlined destroy of LogitPresampler?(v1 + 96, &demangling cache variable for type metadata for LogitPresampler?);
  if (v0)
    OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v42[3];

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v5 = DelayedMaskedLanguageModel.node(forPreviousNode:token:isPrompt:)(v1, v4, 1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v0 + 272);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    OUTLINED_FUNCTION_56_8();
    v7 = v37;
  }
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 >= *(_QWORD *)(v7 + 24) >> 1)
  {
    OUTLINED_FUNCTION_56_8();
    v7 = v38;
  }
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD **)(v0 + 216);
  *(_QWORD *)(v7 + 16) = v8 + 1;
  *(_QWORD *)(v7 + 32 + 8 * v8) = v4;
  v11 = v10[5];
  v12 = v10[6];
  OUTLINED_FUNCTION_24_6(v10 + 2, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v14 = OUTLINED_FUNCTION_52();
  v15 = v13(v14, v11, v12);
  if (v9)
  {
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_116();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_50_2();
    return OUTLINED_FUNCTION_9_13(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v18 = v15;
    v19 = v16;
    OUTLINED_FUNCTION_7_0();
    if (OUTLINED_FUNCTION_23_12() || *(_QWORD *)(v7 + 16) >= *(_QWORD *)(v0 + 256))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 112);
      swift_bridgeObjectRetain_n();
      v40 = v21;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_206_0();
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v39 = v23;
        v24 = *(_QWORD *)(v0 + 248);
        v25 = *(_QWORD *)(v0 + 216);
        v26 = OUTLINED_FUNCTION_4_11();
        v42[0] = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v26 = 136315394;
        specialized MutableCollection.subscript.getter(v24, *(_QWORD *)(v25 + 104));
        v27 = ArraySlice.description.getter();
        v29 = v28;
        swift_unknownObjectRelease();
        *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_51_1();
        OUTLINED_FUNCTION_101();
        result = OUTLINED_FUNCTION_19_6();
        *(_WORD *)(v26 + 12) = 2080;
        if (*(_QWORD *)(v7 + 16) >= v24)
        {
          OUTLINED_FUNCTION_52();
          v30 = ArraySlice.description.getter();
          v32 = v31;
          OUTLINED_FUNCTION_7_0();
          *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_63_0();
          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_32_10(&dword_248CAA000, v33, v39, "Healed from %s to %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_1();
        }
        __break(1u);
      }
      else
      {
        OUTLINED_FUNCTION_101();
        OUTLINED_FUNCTION_58_3();
        OUTLINED_FUNCTION_19_6();

        v34 = *(_QWORD *)(v0 + 216) + 56;
        OUTLINED_FUNCTION_22();
        _s24TokenGenerationInference34DeterministicLanguageModelProtocol_pWOcTm_0(v34, v0 + 56);
        v35 = *(_QWORD *)(v0 + 80);
        v36 = *(_QWORD *)(v0 + 88);
        OUTLINED_FUNCTION_24_6((_QWORD *)(v0 + 56), v35);
        v42[0] = v7;
        v42[1] = v40;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v36 + 8))(v42, v35, v36);
        swift_release();
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_50_2();
        __swift_destroy_boxed_opaque_existential_1(v0 + 56);
        OUTLINED_FUNCTION_7_0();
        OUTLINED_FUNCTION_50_2();
        OUTLINED_FUNCTION_119_0();
        OUTLINED_FUNCTION_63_0();
        return OUTLINED_FUNCTION_7_19(v18, v19, *(uint64_t (**)(void))(v0 + 8));
      }
    }
    else
    {
      OUTLINED_FUNCTION_50_2();
      *(_QWORD *)(v0 + 264) = v5;
      *(_QWORD *)(v0 + 272) = v7;
      OUTLINED_FUNCTION_29_7();
      v20 = (_QWORD *)OUTLINED_FUNCTION_25_9();
      *(_QWORD *)(v0 + 280) = v20;
      *v20 = v0;
      v20[1] = TokenHealingDecoder.decodeUntilPromptRegenerated(leadingTokens:originalPromptText:);
      return OUTLINED_FUNCTION_8_11(v0 + 16, v5, v7, v41);
    }
  }
  return result;
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_42();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *TokenHealingDecoder.proceedingCharacterTokens(sourceText:targetText:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v6 = v5;
  v7 = v4;
  if (!String.hasPrefix(_:)(*(Swift::String *)&a1))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v12 = a1;
  v13 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v14 = v13 | (v12 << 16);
  OUTLINED_FUNCTION_21_1();
  v15 = specialized Collection.suffix(from:)(v14, a3, a4);
  if (!((v15 ^ v16) >> 14))
  {
    OUTLINED_FUNCTION_50_2();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v20 = v7[5];
  v19 = v7[6];
  __swift_project_boxed_opaque_existential_1(v7 + 2, v20);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v20, v19) & 1) != 0)
  {
    v21 = v7[5];
    v22 = v7[6];
    v17 = __swift_project_boxed_opaque_existential_1(v7 + 2, v21);
    v23 = OUTLINED_FUNCTION_55_8();
    v24 = MEMORY[0x2495A9AC0](v23);
    v26 = v25;
    OUTLINED_FUNCTION_50_2();
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(v24, v26, v21, v22);
    if (!v6)
      v17 = (_QWORD *)v27;
  }
  else
  {
    swift_retain();
    v28 = OUTLINED_FUNCTION_55_8();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs_Sis5NeverOTg5119_s24TokenGenerationInference0A14HealingDecoderC25proceedingCharacterTokens10sourceText06targetJ0SaySiGSS_SStKFSiSJXEfU_0fG9Inference0fjK0CTf1cn_n(v28, v29, v30, v31, v7);
    v17 = v32;
  }
  swift_bridgeObjectRelease();
  return v17;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v4 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

void TokenHealingDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_49();
}

uint64_t TokenHealingDecoder.__deallocating_deinit()
{
  TokenHealingDecoder.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance TokenHealingDecoder(uint64_t a1, uint64_t a2)
{
  TokenHealingDecoder.append(prompt:)(*(TokenGenerationInference::SamplingDecoderPrompt *)&a1);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TokenHealingDecoder()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance TokenHealingDecoder;
  return TokenHealingDecoder.decodeNextChunk()();
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TokenHealingDecoder(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_6_5();
  v4 = OUTLINED_FUNCTION_75_1();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

uint64_t partial apply for closure #1 in TokenHealingDecoder.init(processor:buildDecoder:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TokenHealingDecoder.init(processor:buildDecoder:)(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t type metadata accessor for TokenHealingDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenHealingDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenHealingDecoder.__allocating_init(processor:buildDecoder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t OUTLINED_FUNCTION_7_19(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_9_13(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_10_16()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 40));
  return swift_task_alloc();
}

unint64_t OUTLINED_FUNCTION_22_13()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return DelayedMaskedLanguageModel.resolve(maskLanguageModel:)(v0);
}

BOOL OUTLINED_FUNCTION_23_12()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  return String.hasPrefix(_:)(v2);
}

void OUTLINED_FUNCTION_24_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_25_9()
{
  return swift_task_alloc();
}

double OUTLINED_FUNCTION_29_7()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_11()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 248) + 128) = 1;
  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 248) + 128) = 1;
  return *(_QWORD *)(v0 + 8);
}

void OUTLINED_FUNCTION_32_10(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_impl(a1, v4, a3, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_35_10()
{
  return swift_retain();
}

_QWORD *OUTLINED_FUNCTION_36_7()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, *(_QWORD *)(v1 + 40));
}

uint64_t OUTLINED_FUNCTION_41_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_43_9()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 + 16);
}

void OUTLINED_FUNCTION_50_9()
{
  JUMPOUT(0x2495A9EB0);
}

void OUTLINED_FUNCTION_52_7()
{
  uint64_t v0;
  uint64_t *v1;

  outlined destroy of LogitPresampler?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_55_8()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_56_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, remaining: String));
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v11;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v11;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      v6 = (_QWORD *)(v2 + 24 * v5);
      v6[4] = v8;
      v6[5] = v9;
      v6[6] = v10;
      v4 += 24;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void TokenizerRunnerPrefixMatchingTextProcessor.__allocating_init(tokenizer:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 32) = 1;
  *(_QWORD *)(v2 + 40) = 0;
  *(_WORD *)(v2 + 48) = 513;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = 0;
  OUTLINED_FUNCTION_49();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.tokenizer.getter()
{
  return swift_retain();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.init(tokenizer:)(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = 1;
  *(_QWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 48) = 513;
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.encode(text:)()
{
  return dispatch thunk of TokenizerRunner.tokenize(_:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenizerRunnerPrefixMatchingTextProcessor.decode(tokenIDs:)(Swift::OpaquePointer tokenIDs)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = dispatch thunk of TokenizerRunner.detokenize(_:)();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall TokenizerRunnerPrefixMatchingTextProcessor.text(forTokenID:)(Swift::Int forTokenID)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  dispatch thunk of TokenizerRunner.text(forTokenID:)();
  OUTLINED_FUNCTION_49();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Int __swiftcall TokenizerRunnerPrefixMatchingTextProcessor.tokenID(forText:)(Swift::String forText)
{
  Swift::Int result;

  dispatch thunk of TokenizerRunner.tokenID(forText:)();
  OUTLINED_FUNCTION_49();
  return result;
}

void TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    *(_QWORD *)(v0 + 24) = dispatch thunk of TokenizerRunner.longestTokenLength.getter();
    *(_BYTE *)(v0 + 32) = 0;
  }
  OUTLINED_FUNCTION_49();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

void TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
  *a1 = v3;
  OUTLINED_FUNCTION_49();
}

_QWORD *TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 24) = *result;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

void TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 48) == 1)
  {
    *(_QWORD *)(v0 + 40) = dispatch thunk of TokenizerRunner.vocabularyCount.getter();
    *(_BYTE *)(v0 + 48) = 0;
  }
  OUTLINED_FUNCTION_49();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

void TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
  *a1 = v3;
  OUTLINED_FUNCTION_49();
}

_QWORD *TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.modify(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 40) = *result;
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 49);
  if (v1 == 2)
  {
    v2 = closure #1 in TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter();
    *(_BYTE *)(v0 + 49) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t closure #1 in TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v0 + 32) = dispatch thunk of TokenizerRunner.tokenID(forText:)();
  v1 = dispatch thunk of TokenizerRunner.detokenize(_:)();
  v3 = v2;
  swift_bridgeObjectRelease();
  if (v1 == 24864 && v3 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      if (one-time initialization token for healing != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Log.healing);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v8))
      {
        v10 = 0;
        goto LABEL_18;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_248CAA000, v7, v8, "Non-continuation tokenizer with token healing: results may be unexpected", v9, 2u);
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (one-time initialization token for healing != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.healing);
  v7 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v7, v12))
  {
    v10 = 1;
    goto LABEL_18;
  }
  v9 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v9 = 0;
  _os_log_impl(&dword_248CAA000, v7, v12, "Detected continuation tokenizer", v9, 2u);
  v10 = 1;
LABEL_15:
  MEMORY[0x2495AAF60](v9, -1, -1);
LABEL_18:

  return v10;
}

void TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter() & 1;
  OUTLINED_FUNCTION_49();
}

_BYTE *TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 49) = result[8];
  return result;
}

void TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)()
{
  uint64_t v0;

  v0 = dispatch thunk of TokenizerRunner.prefixTokenIDs(forPrefix:)();
  specialized _arrayForceCast<A, B>(_:)(v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_49();
}

void TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forRawPrefix:)()
{
  dispatch thunk of TokenizerRunner.tokenIDs(forRawPrefix:)();
  OUTLINED_FUNCTION_49();
}

void TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:)()
{
  dispatch thunk of TokenizerRunner.tokenIDs(forDecodedPrefix:)();
  OUTLINED_FUNCTION_49();
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t TokenizerRunnerPrefixMatchingTextProcessor.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.encode(text:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return TokenizerRunnerPrefixMatchingTextProcessor.encode(text:)();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.decode(tokenIDs:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(Swift::OpaquePointer a1)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.decode(tokenIDs:)(a1)._countAndFlagsBits;
}

uint64_t protocol witness for PrefixMatchingTextProcessor.text(forTokenID:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(Swift::Int a1)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.text(forTokenID:)(a1)._countAndFlagsBits;
}

Swift::Int protocol witness for PrefixMatchingTextProcessor.tokenID(forText:) in conformance TokenizerRunnerPrefixMatchingTextProcessor(uint64_t a1, uint64_t a2)
{
  return TokenizerRunnerPrefixMatchingTextProcessor.tokenID(forText:)(*(Swift::String *)&a1);
}

void protocol witness for PrefixMatchingTextProcessor.vocabularyCount.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
}

void protocol witness for PrefixMatchingTextProcessor.longestTokenLength.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
}

uint64_t protocol witness for PrefixMatchingTextProcessor.isContinuationTokenizer.getter in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  return TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter() & 1;
}

void protocol witness for PrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  TokenizerRunnerPrefixMatchingTextProcessor.prefixTokenIDs(forPrefix:)();
}

void protocol witness for PrefixMatchingTextProcessor.tokenIDs(forRawPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forRawPrefix:)();
}

void protocol witness for PrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:) in conformance TokenizerRunnerPrefixMatchingTextProcessor()
{
  TokenizerRunnerPrefixMatchingTextProcessor.tokenIDs(forDecodedPrefix:)();
}

void sub_248D69798(_QWORD *a1@<X8>)
{
  uint64_t v2;

  TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_49();
}

void sub_248D697BC(uint64_t *a1)
{
  TokenizerRunnerPrefixMatchingTextProcessor.longestTokenLength.setter(*a1);
  OUTLINED_FUNCTION_49();
}

void sub_248D697DC(_QWORD *a1@<X8>)
{
  uint64_t v2;

  TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_49();
}

void sub_248D69800(uint64_t *a1)
{
  TokenizerRunnerPrefixMatchingTextProcessor.vocabularyCount.setter(*a1);
  OUTLINED_FUNCTION_49();
}

void sub_248D69820(_BYTE *a1@<X8>)
{
  *a1 = TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.getter() & 1;
  OUTLINED_FUNCTION_49();
}

void sub_248D69848(unsigned __int8 *a1)
{
  TokenizerRunnerPrefixMatchingTextProcessor.isContinuationTokenizer.setter(*a1);
  OUTLINED_FUNCTION_49();
}

uint64_t type metadata accessor for TokenizerRunnerPrefixMatchingTextProcessor()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenizerRunnerPrefixMatchingTextProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenizerRunnerPrefixMatchingTextProcessor.__allocating_init(tokenizer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_n(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v7 = v22;
    v8 = (uint64_t *)(a1 + 32);
    do
    {
      v9 = *v8;
      v21 = v8 + 1;
      swift_beginAccess();
      v10 = a2[11];
      v11 = a2[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 8), v10);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 16))(a3, v9, 0, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      v13 = a2[5];
      v14 = a2[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(a2 + 2), v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(a4, v9, 0, v13, v14);
      swift_endAccess();
      v16 = *(_QWORD *)(v22 + 16);
      if (v16 >= *(_QWORD *)(v22 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v22 + 16) = v16 + 1;
      v17 = (_QWORD *)(v22 + 24 * v16);
      v17[4] = v12;
      v17[5] = v15;
      v17[6] = v9;
      --v5;
      v8 = v21;
    }
    while (v5);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnDeviceInferenceSuspendedFetch?);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  specialized Collection.first.getter(*v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  result = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v8);
  if ((_DWORD)result != 1)
  {
    result = outlined init with take of OnDeviceInferenceSuspendedFetch((uint64_t)v6, a1);
    if (*(_QWORD *)(v7 + 16))
      return specialized Array.replaceSubrange<A>(_:with:)(0, 1, specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for OnDeviceInferenceSuspendedFetch, specialized UnsafeMutablePointer.moveInitialize(from:count:));
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized RangeReplaceableCollection.removeFirst()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v4 = *(_BYTE *)(v3 + 64);
    v6 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 56);
    v7 = *(_OWORD *)(v3 + 32);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 32) = v4;
  }
  else
  {
    __break(1u);
  }
}

void TwoStageSpeculativeDecoder.__allocating_init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_55_9();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_140_0(v0);
  OUTLINED_FUNCTION_75_5();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_15_12(v2, v3, v4);
  OUTLINED_FUNCTION_11_8();
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_31();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(a1 + 32);
    do
    {
      v3 = *v2++;
      specialized Set._Variant.insert(_:)(&v5, v3);
      --v1;
    }
    while (v1);
  }
  return swift_bridgeObjectRelease();
}

void TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_55_9();
  OUTLINED_FUNCTION_140_0(v1);
  OUTLINED_FUNCTION_75_5();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_15_12(v3, v4, v5);
  OUTLINED_FUNCTION_11_8();
  __swift_destroy_boxed_opaque_existential_1(v0);
  OUTLINED_FUNCTION_31();
}

void TwoStageSpeculativeDecoder.BufferedToken.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4, char a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(a5 & 1);
}

uint64_t static TwoStageSpeculativeDecoder.BufferedToken.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  _BOOL4 v10;

  v10 = a1 == a5 && a2 == a6 && a3 == a7;
  return v10 & (a4 ^ a8 ^ 1u);
}

Swift::Int TwoStageSpeculativeDecoder.BufferedToken.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4 & 1);
  return Hasher._finalize()();
}

void TwoStageSpeculativeDecoder.TokenWithNodes.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
}

BOOL static TwoStageSpeculativeDecoder.TokenWithNodes.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

Swift::Int TwoStageSpeculativeDecoder.TokenWithNodes.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  uint64_t v0;

  return TwoStageSpeculativeDecoder.BufferedToken.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance TwoStageSpeculativeDecoder.BufferedToken(int a1)
{
  uint64_t v1;

  TwoStageSpeculativeDecoder.BufferedToken.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt8 v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TwoStageSpeculativeDecoder.BufferedToken(uint64_t a1, uint64_t a2)
{
  return static TwoStageSpeculativeDecoder.BufferedToken.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt *v0;

  return TwoStageSpeculativeDecoder.TokenWithNodes.hashValue.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Hashable.hash(into:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes(int a1)
{
  Swift::UInt *v1;

  TwoStageSpeculativeDecoder.TokenWithNodes.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TwoStageSpeculativeDecoder.TokenWithNodes(uint64_t *a1, uint64_t *a2)
{
  return static TwoStageSpeculativeDecoder.TokenWithNodes.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t TwoStageSpeculativeDecoder.makeDraftTokens(logits:draftNode:targetNode:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v8 + 40))(v3[16], v7, v8);
  swift_retain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_24TokenGenerationInference26TwoStageSpeculativeDecoderC0D9WithNodes33_997C69FF02F080FB13F8B8AFFD1FC4ECLLVs5NeverOTg504_s24de11Inference26ghij24C15makeDraftTokens33_997mnopqrst39ECLL6logits9draftNode06targetV0SayAC0A9kL42AELLVGAA15LogitCollection_p_S2itFAJSiXEfU_AIS2iTf1cn_n(v9, v4, a3, a2);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t TwoStageSpeculativeDecoder.generateDraftTokens()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 760) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[95];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248D75A50;
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v2 + 104);
  v4 = specialized Set.init(_nonEmptyArrayLiteral:)();
  v0[96] = v4;
  v0[93] = v4;
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_98_3(v2 + 16);
  v5 = v0[28];
  v6 = v0[29];
  __swift_project_boxed_opaque_existential_1(v0 + 25, v5);
  v7 = OUTLINED_FUNCTION_2_0();
  v0[97] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v2 + 56);
  OUTLINED_FUNCTION_39_3(v2 + 232);
  v8 = (_QWORD *)OUTLINED_FUNCTION_58_1();
  v0[98] = v8;
  *v8 = v0;
  v8[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
  return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))(v1 + v2))(v7, v0 + 30, v5, v6);
}

{
  uint64_t *v0;
  unint64_t v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109[4];

  v1 = (unint64_t)(v0 + 2);
  v2 = (unint64_t *)(v0 + 14);
  v109[2] = *MEMORY[0x24BDAC8D0];
  v85 = v0 + 86;
  v3 = v0 + 88;
  v86 = v0 + 87;
  v87 = v0 + 89;
  v83 = v0 + 90;
  v91 = v0 + 91;
  v107 = v0 + 92;
  v108 = v0 + 93;
  v4 = v0[109];
  v5 = v0[107];
  v6 = v0[106];
  v7 = v0[105];
  v8 = v0[104];
  v84 = v0 + 55;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 55));
  v9 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  v0[84] = MEMORY[0x24BEE4AF8];
  v103 = v4;
  v90 = v4 + 32;
  v99 = v5;
  v100 = v6;
  v97 = v5 + 32;
  v98 = v6 + 32;
  v96 = v8 - 1;
  v0[83] = v10;
  v102 = v7;
  v95 = v7 + 32;
  v11 = v0 + 60;
  v88 = (uint64_t)(v0 + 3);
  v89 = (__int128 *)(v0 + 9);
  v101 = (__int128 *)(v0 + 15);
  v105 = v0;
  v93 = (unint64_t *)(v0 + 14);
  v94 = v0 + 2;
  v92 = (uint64_t)(v0 + 60);
  while (1)
  {
    v12 = *(_QWORD *)(v103 + 16);
    if (v9 == v12)
    {
      v104 = v9;
      *(_OWORD *)(v1 + 16) = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_OWORD *)v1 = 0u;
    }
    else
    {
      if (v9 >= v12)
        goto LABEL_90;
      v13 = v9 + 1;
      v14 = v9;
      outlined init with copy of DeterministicLanguageModelProtocol(v90 + 40 * v9, (uint64_t)v89);
      *(_QWORD *)v1 = v14;
      outlined init with take of LogitCollection(v89, v88);
      v104 = v13;
    }
    outlined init with take of (offset: Int, element: LogitCollection)?(v1, (uint64_t)v2);
    if (!v0[18])
      break;
    v15 = *v2;
    outlined init with take of LogitCollection(v101, (uint64_t)v11);
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_85;
    if (v15 >= *(_QWORD *)(v100 + 16))
      goto LABEL_86;
    if (v15 >= *(_QWORD *)(v99 + 16))
      goto LABEL_87;
    v16 = TwoStageSpeculativeDecoder.makeDraftTokens(logits:draftNode:targetNode:)(v11, *(_QWORD *)(v98 + 8 * v15), *(_QWORD *)(v97 + 8 * v15));
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    v11 = *(_QWORD **)(v16 + 16);
    v106 = v16;
    if (v11)
    {
      *v3 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      v17 = v16 + 48;
      v18 = v11;
      do
      {
        v17 += 24;
        OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_7_17();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v18 = (_QWORD *)((char *)v18 - 1);
      }
      while (v18);
      v19 = *v3;
      v0 = v105;
    }
    else
    {
      v19 = MEMORY[0x24BEE4AF8];
    }
    v1 = v0[104];
    OUTLINED_FUNCTION_4_0();
    v20 = OUTLINED_FUNCTION_50_1();
    specialized Array.append<A>(contentsOf:)(v20);
    swift_endAccess();
    if (v1 > *(_QWORD *)(v102 + 16))
      goto LABEL_88;
    v21 = *(_QWORD *)(v95 + 8 * v96);
    if ((v21 & 0xC000000000000001) != 0)
    {
      OUTLINED_FUNCTION_74_1();
      OUTLINED_FUNCTION_68_6();
    }
    if ((int64_t)v15 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_89;
    v22 = *(_QWORD *)(v21 + 8 * v15 + 32);
    swift_retain();
    OUTLINED_FUNCTION_4_0();
    *(_QWORD *)(v22 + 24) = v19;
    swift_bridgeObjectRelease();
    swift_release();
    if (v11)
    {
      v23 = v91;
      *v91 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_56_3();
      v24 = *v91;
      v25 = *(_QWORD *)(*v91 + 16);
      v26 = 32;
      do
      {
        v27 = *(_QWORD *)(v106 + v26);
        *v23 = v24;
        if (v25 >= *(_QWORD *)(v24 + 24) >> 1)
        {
          OUTLINED_FUNCTION_45_8();
          v23 = v91;
          v24 = *v91;
        }
        *(_QWORD *)(v24 + 16) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25 + 32) = v27;
        v26 += 24;
        ++v25;
        v11 = (_QWORD *)((char *)v11 - 1);
      }
      while (v11);
      OUTLINED_FUNCTION_58_0();
    }
    else
    {
      OUTLINED_FUNCTION_58_0();
      v24 = MEMORY[0x24BEE4AF8];
    }
    v1 = *(_QWORD *)(v24 + 16);
    if (v1)
    {
      v28 = 0;
      v29 = *v108;
      while (1)
      {
        v30 = v29 + 56;
        while (1)
        {
          v11 = *(_QWORD **)(v24 + 32 + 8 * v28++);
          v31 = OUTLINED_FUNCTION_91_3();
          v32 = -1 << *(_BYTE *)(v29 + 32);
          v33 = v31 & ~v32;
          if (((*(_QWORD *)(v30 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
            break;
          v34 = *(_QWORD *)(v29 + 48);
          if (*(_QWORD **)(v34 + 8 * v33) != v11)
          {
            v35 = ~v32;
            do
            {
              v33 = (v33 + 1) & v35;
              if (((*(_QWORD *)(v30 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                goto LABEL_35;
            }
            while (*(_QWORD **)(v34 + 8 * v33) != v11);
          }
          if (v28 == v1)
            goto LABEL_50;
        }
LABEL_35:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v107 = v29;
        *v108 = 0x8000000000000000;
        if (*(_QWORD *)(v29 + 24) <= *(_QWORD *)(v29 + 16))
        {
          if (isUniquelyReferenced_nonNull_native)
            specialized _NativeSet.resize(capacity:)();
          else
            specialized _NativeSet.copyAndResize(capacity:)();
          v29 = *v107;
          v37 = OUTLINED_FUNCTION_91_3();
          v38 = -1 << *(_BYTE *)(v29 + 32);
          v33 = v37 & ~v38;
          if (((*(_QWORD *)(v29 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
          {
            v39 = *(_QWORD *)(v29 + 48);
            if (*(_QWORD **)(v39 + 8 * v33) == v11)
            {
LABEL_52:
              OUTLINED_FUNCTION_59_5();
              return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            v40 = ~v38;
            while (1)
            {
              v33 = (v33 + 1) & v40;
              if (((*(_QWORD *)(v29 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                break;
              if (*(_QWORD **)(v39 + 8 * v33) == v11)
                goto LABEL_52;
            }
          }
        }
        else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeSet.copy()();
          v29 = *v107;
        }
        *(_QWORD *)(v29 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v33;
        *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * v33) = v11;
        v41 = *(_QWORD *)(v29 + 16);
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (v42)
          break;
        *(_QWORD *)(v29 + 16) = v43;
        *v108 = v29;
        OUTLINED_FUNCTION_74();
        if (v28 == v1)
          goto LABEL_50;
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
LABEL_50:
    OUTLINED_FUNCTION_161();
    v11 = (_QWORD *)v92;
    __swift_destroy_boxed_opaque_existential_1(v92);
    v9 = v104;
    v0 = v105;
    v2 = v93;
    v1 = (unint64_t)v94;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_4_0();
  v1 = v0[84];
  if (!(v1 >> 62))
  {
    v45 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_55;
  }
LABEL_91:
  OUTLINED_FUNCTION_65_0();
  v45 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_50_2();
LABEL_55:
  v46 = (unint64_t)v108;
  if (!v45)
  {
    v49 = v105;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_2();
    v47 = v105[105];
    goto LABEL_64;
  }
  v47 = v105[105];
  v46 = *(_QWORD *)(v102 + 16);
  v48 = *(_QWORD *)(v47 + 24);
  v11 = (_QWORD *)(v46 + 1);
  OUTLINED_FUNCTION_65_0();
  if (v46 >= v48 >> 1)
    goto LABEL_94;
  while (1)
  {
    v49 = v105;
    v50 = v105[101];
    *(_QWORD *)(v47 + 16) = v11;
    *(_QWORD *)(v47 + 8 * v46 + 32) = v1;
    v11 = (_QWORD *)v105[83];
    v105[90] = (uint64_t)v11;
    OUTLINED_FUNCTION_18_3();
    OUTLINED_FUNCTION_50_2();
    Logger.logObject.getter();
    v1 = OUTLINED_FUNCTION_111();
    if (os_log_type_enabled(v50, (os_log_type_t)v1))
    {
      v51 = v105[104];
      v52 = OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v52 = 134218240;
      v105[85] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2048;
      v53 = v105[84];
      if (v53 >> 62)
      {
        swift_bridgeObjectRetain();
        v54 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      *v85 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_124_0(&dword_248CAA000, v50, (os_log_type_t)v1, "Tree layer %ld speculated %ld tokens", (uint8_t *)v52);
      OUTLINED_FUNCTION_0_1();
    }

    OUTLINED_FUNCTION_20_2();
    v55 = v105[103];
    v56 = v105[104] + 1;
    swift_bridgeObjectRelease();
    if (v56 != v55)
    {
      v63 = v105[104] + 1;
      v105[105] = v47;
      v105[104] = v63;
      if (v63 != v105[103])
      {
        v64 = *v83;
        v65 = *(_QWORD *)(*v83 + 16);
        v66 = MEMORY[0x24BEE4AF8];
        if (v65)
        {
          *v87 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_18_3();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v67 = v87;
          v66 = *v87;
          v68 = *(_QWORD *)(*v87 + 16);
          v69 = 40;
          do
          {
            v70 = *(_QWORD *)(v64 + v69);
            *v67 = v66;
            if (v68 >= *(_QWORD *)(v66 + 24) >> 1)
            {
              OUTLINED_FUNCTION_45_8();
              v67 = v87;
              v66 = *v87;
            }
            *(_QWORD *)(v66 + 16) = v68 + 1;
            *(_QWORD *)(v66 + 8 * v68 + 32) = v70;
            v69 += 24;
            ++v68;
            --v65;
          }
          while (v65);
          OUTLINED_FUNCTION_20_2();
          v72 = *(_QWORD *)(v64 + 16);
          v73 = MEMORY[0x24BEE4AF8];
          if (v72)
          {
            v74 = v86;
            *v86 = MEMORY[0x24BEE4AF8];
            OUTLINED_FUNCTION_18_3();
            OUTLINED_FUNCTION_56_3();
            v73 = *v86;
            v75 = *(_QWORD *)(*v86 + 16);
            v76 = 32;
            do
            {
              v77 = *(_QWORD *)(v64 + v76);
              *v74 = v73;
              if (v75 >= *(_QWORD *)(v73 + 24) >> 1)
              {
                OUTLINED_FUNCTION_45_8();
                v74 = v86;
                v73 = *v86;
              }
              *(_QWORD *)(v73 + 16) = v75 + 1;
              *(_QWORD *)(v73 + 8 * v75 + 32) = v77;
              v76 += 24;
              ++v75;
              --v72;
            }
            while (v72);
            OUTLINED_FUNCTION_20_2();
          }
        }
        else
        {
          v73 = MEMORY[0x24BEE4AF8];
        }
        v105[107] = v73;
        v105[106] = v66;
        v78 = v105[95];
        v79 = v78 + 232;
        outlined init with copy of DeterministicLanguageModelProtocol(v78 + 16, (uint64_t)v84);
        __swift_project_boxed_opaque_existential_1(v84, v105[58]);
        OUTLINED_FUNCTION_39_3(v79);
        v80 = (_QWORD *)swift_task_alloc();
        v105[108] = (uint64_t)v80;
        *v80 = v105;
        v80[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
        OUTLINED_FUNCTION_55_7();
        OUTLINED_FUNCTION_59_5();
        __asm { BR              X4 }
      }
      __break(1u);
    }
    v46 = (unint64_t)v108;
LABEL_64:
    v57 = v49[95];
    v58 = *(_QWORD *)(v47 + 16);
    v59 = *(_QWORD *)(v57 + 296);
    v42 = __OFADD__(v59, v58);
    v60 = v59 + v58;
    if (v42)
    {
      __break(1u);
      goto LABEL_93;
    }
    v11 = (_QWORD *)v49[110];
    *(_QWORD *)(v57 + 296) = v60;
    if (*(_QWORD *)(v47 + 16))
      break;
LABEL_93:
    __break(1u);
LABEL_94:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v47 = v82;
  }
  OUTLINED_FUNCTION_21_1();
  OUTLINED_FUNCTION_65_0();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v62 = v61;
  OUTLINED_FUNCTION_50_2();
  v109[0] = v62;
  specialized MutableCollection<>.sort(by:)(v109);
  if (!v11)
  {
    OUTLINED_FUNCTION_50_2();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v105 + 20));
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_169_1();
    OUTLINED_FUNCTION_59_5();
    __asm { BR              X2 }
  }
  OUTLINED_FUNCTION_59_5();
  return swift_release();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  OUTLINED_FUNCTION_37_1();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_169_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TwoStageSpeculativeDecoder.generateDraftTokens()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  OUTLINED_FUNCTION_64_2(&v6);
  *(_QWORD *)(v4 + 792) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_20_2();
    outlined destroy of LogitPresampler?(v4 + 240);
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v4 + 800) = a1;
    outlined destroy of LogitPresampler?(v4 + 240);
    OUTLINED_FUNCTION_20_2();
  }
  OUTLINED_FUNCTION_41_1();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 872) = a1;
  *(_QWORD *)(v3 + 880) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_10_17();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_10_17();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

void TwoStageSpeculativeDecoder.generateDraftTokens()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v49;
  NSObject *v50;
  uint64_t v51[3];

  v51[2] = *MEMORY[0x24BDAC8D0];
  specialized Collection.first.getter(*(_QWORD *)(v0 + 800), v0 + 280);
  OUTLINED_FUNCTION_7_0();
  if (!*(_QWORD *)(v0 + 304))
LABEL_41:
    __break(1u);
  v1 = *(_QWORD *)(v0 + 760);
  outlined init with take of LogitCollection((__int128 *)(v0 + 280), v0 + 160);
  OUTLINED_FUNCTION_404();
  v2 = TwoStageSpeculativeDecoder.makeDraftTokens(logits:draftNode:targetNode:)((_QWORD *)(v0 + 160), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 104));
  *(_QWORD *)(v0 + 720) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2;
    v49 = (uint64_t *)(v0 + 696);
    v5 = (uint64_t *)(v0 + 712);
    v50 = (v0 + 744);
    v51[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_56_3();
    v6 = v51[0];
    v7 = *(_QWORD *)(v51[0] + 16);
    v8 = 32;
    do
    {
      v9 = *(_QWORD *)(v4 + v8);
      v51[0] = v6;
      if (v7 >= *(_QWORD *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v6 = v51[0];
      }
      *(_QWORD *)(v6 + 16) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7 + 32) = v9;
      v8 += 24;
      ++v7;
      --v3;
    }
    while (v3);
    OUTLINED_FUNCTION_116_0();
    specialized Set.formUnion<A>(_:)(v6);
    if (one-time initialization token for device != -1)
      swift_once();
    v10 = OUTLINED_FUNCTION_15_4();
    *(_QWORD *)(v0 + 808) = __swift_project_value_buffer(v10, (uint64_t)static Log.device);
    OUTLINED_FUNCTION_77_4();
    v11 = OUTLINED_FUNCTION_111();
    if (os_log_type_enabled(v50, v11))
    {
      v12 = (uint8_t *)OUTLINED_FUNCTION_4_11();
      *(_DWORD *)v12 = 134217984;
      OUTLINED_FUNCTION_4_0();
      *(_QWORD *)(v0 + 752) = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_37_2(&dword_248CAA000, v50, v11, "Tree layer 0 speculated %ld tokens", v12);
      OUTLINED_FUNCTION_0_1();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[TokenTreeNode]>);
    inited = swift_initStackObject();
    *(_QWORD *)(v0 + 816) = inited;
    *(_OWORD *)(inited + 16) = xmmword_248D75A50;
    OUTLINED_FUNCTION_4_0();
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 16);
    v15 = MEMORY[0x24BEE4AF8];
    if (v14)
    {
      v51[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_50_1();
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for TokenTreeNode();
      v16 = 48;
      do
      {
        OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_7_17();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v16 += 24;
        --v14;
      }
      while (v14);
      v15 = v51[0];
      OUTLINED_FUNCTION_51_1();
    }
    v17 = *(_QWORD *)(v0 + 760);
    *(_QWORD *)(inited + 32) = v15;
    v18 = *(_QWORD *)(v17 + 272);
    *(_QWORD *)(v0 + 824) = v18;
    if (v18 < 1)
    {
      __break(1u);
    }
    else
    {
      if (v18 != 1)
      {
        *(_QWORD *)(v0 + 840) = inited;
        *(_QWORD *)(v0 + 832) = 1;
        v30 = *(_QWORD *)(v0 + 720);
        v31 = *(_QWORD *)(v30 + 16);
        v32 = MEMORY[0x24BEE4AF8];
        if (v31)
        {
          *v5 = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_50_1();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v32 = *v5;
          v33 = *(_QWORD *)(*v5 + 16);
          v34 = 40;
          do
          {
            v35 = *(_QWORD *)(v30 + v34);
            *v5 = v32;
            v36 = *(_QWORD *)(v32 + 24);
            if (v33 >= v36 >> 1)
            {
              OUTLINED_FUNCTION_88_4(v36);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v32 = *v5;
            }
            *(_QWORD *)(v32 + 16) = v33 + 1;
            *(_QWORD *)(v32 + 8 * v33 + 32) = v35;
            v34 += 24;
            ++v33;
            --v31;
          }
          while (v31);
          OUTLINED_FUNCTION_51_1();
          v37 = *(_QWORD *)(v30 + 16);
          v38 = MEMORY[0x24BEE4AF8];
          if (v37)
          {
            v39 = (_QWORD *)(v0 + 696);
            *v49 = MEMORY[0x24BEE4AF8];
            OUTLINED_FUNCTION_50_1();
            OUTLINED_FUNCTION_56_3();
            v38 = *v49;
            v40 = *(_QWORD *)(*v49 + 16);
            v41 = 32;
            do
            {
              v42 = *(_QWORD *)(v30 + v41);
              *v39 = v38;
              v43 = *(_QWORD *)(v38 + 24);
              if (v40 >= v43 >> 1)
              {
                OUTLINED_FUNCTION_89_5(v43);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v39 = (_QWORD *)(v0 + 696);
                v38 = *v49;
              }
              *(_QWORD *)(v38 + 16) = v40 + 1;
              *(_QWORD *)(v38 + 8 * v40 + 32) = v42;
              v41 += 24;
              ++v40;
              --v37;
            }
            while (v37);
            OUTLINED_FUNCTION_51_1();
          }
        }
        else
        {
          v38 = MEMORY[0x24BEE4AF8];
        }
        *(_QWORD *)(v0 + 856) = v38;
        *(_QWORD *)(v0 + 848) = v32;
        v45 = *(_QWORD *)(v0 + 760);
        v46 = v45 + 232;
        outlined init with copy of DeterministicLanguageModelProtocol(v45 + 16, v0 + 440);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 464));
        OUTLINED_FUNCTION_39_3(v46);
        v47 = (_QWORD *)OUTLINED_FUNCTION_58_1();
        *(_QWORD *)(v0 + 864) = v47;
        *v47 = v0;
        v47[1] = TwoStageSpeculativeDecoder.generateDraftTokens();
        OUTLINED_FUNCTION_127_3();
        __asm { BR              X4 }
      }
      v19 = *(_QWORD *)(v0 + 760);
      v20 = *(_QWORD *)(inited + 16);
      v21 = *(_QWORD *)(v19 + 296);
      v22 = __OFADD__(v21, v20);
      v23 = v21 + v20;
      if (!v22)
      {
        v24 = *(_QWORD *)(v0 + 792);
        *(_QWORD *)(v19 + 296) = v23;
        if (*(_QWORD *)(inited + 16))
        {
          OUTLINED_FUNCTION_21_1();
          swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)();
          v26 = v25;
          OUTLINED_FUNCTION_7_0();
          v51[0] = v26;
          specialized MutableCollection<>.sort(by:)(v51);
          if (!v24)
          {
            OUTLINED_FUNCTION_7_0();
            __swift_destroy_boxed_opaque_existential_1(v0 + 160);
            OUTLINED_FUNCTION_161();
            OUTLINED_FUNCTION_169_1();
            goto LABEL_35;
          }
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v27 = *(_QWORD *)(v0 + 792);
  OUTLINED_FUNCTION_21_1();
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v29 = v28;
  OUTLINED_FUNCTION_42();
  v51[0] = v29;
  specialized MutableCollection<>.sort(by:)(v51);
  if (!v27)
  {
    OUTLINED_FUNCTION_42();
    __swift_destroy_boxed_opaque_existential_1(v0 + 160);
    swift_bridgeObjectRelease();
LABEL_35:
    OUTLINED_FUNCTION_127_3();
    __asm { BR              X2 }
  }
LABEL_22:
  swift_release();
  OUTLINED_FUNCTION_127_3();
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[77] = v2;
  v3[76] = a2;
  v3[75] = a1;
  return swift_task_switch();
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t (*v91)(void);
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  unint64_t v98;

  v92 = v0 + 74;
  v1 = v0[77];
  v2 = v0[76];
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 56);
  v0[67] = 0;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4_0();
  v5 = v0[75];
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_52;
  v6 = (uint64_t)(v0 + 12);
  v95 = (uint64_t)(v0 + 32);
  v96 = (__int128 *)(v0 + 17);
  v94 = v0;
  v97 = (uint64_t)(v0 + 12);
  while (1)
  {
    v0[80] = v5;
    v0[79] = v4;
    v0[78] = v3;
    v7 = v0[76];
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v9 & 1) == 0)
      goto LABEL_52;
    v10 = OUTLINED_FUNCTION_62_9(v8);
    OUTLINED_FUNCTION_83_3(v10);
    outlined init with take of LogitCollection(v96, v6);
    v11 = v0[77];
    if ((*(_BYTE *)(v7 + 140) & 1) != 0)
    {
      if (*(_BYTE *)(v11 + 141) == 1)
      {
        OUTLINED_FUNCTION_39_3(v11 + 16);
        v88 = v0[25];
        v89 = v0[26];
        __swift_project_boxed_opaque_existential_1(v0 + 22, v88);
        OUTLINED_FUNCTION_59_7();
        v90 = (_QWORD *)swift_task_alloc();
        v0[81] = v90;
        *v90 = v0;
        v90[1] = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
        return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)((uint64_t)(v0 + 7), v4, v3, v88, v89);
      }
      v12 = *(_QWORD *)(v11 + 176);
      v13 = *(_QWORD *)(v11 + 184);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + 152), v12);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(v6, v12, v13);
    }
    else
    {
      v15 = *(float *)(v7 + 136);
      OUTLINED_FUNCTION_39_3(v11 + 152);
      v2 = v0[35];
      v16 = v0[36];
      OUTLINED_FUNCTION_82_5();
      if (v5 >> 62)
      {
        OUTLINED_FUNCTION_74_1();
        v17 = OUTLINED_FUNCTION_54_6();
      }
      else
      {
        v17 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
        OUTLINED_FUNCTION_74_1();
      }
      v18 = v92;
      v93 = v16;
      if (v17)
      {
        *v92 = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_56_3();
        if (v17 < 0)
          goto LABEL_81;
        v19 = 0;
        v20 = *v92;
        do
        {
          if ((v5 & 0xC000000000000001) != 0)
            OUTLINED_FUNCTION_68_6();
          v21 = *(_QWORD *)(OUTLINED_FUNCTION_105_2() + 16);
          swift_release();
          *v18 = v20;
          v23 = *(_QWORD *)(v20 + 16);
          v22 = *(_QWORD *)(v20 + 24);
          if (v23 >= v22 >> 1)
          {
            OUTLINED_FUNCTION_88_4(v22);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v18 = v92;
            v20 = *v92;
          }
          ++v19;
          *(_QWORD *)(v20 + 16) = v23 + 1;
          *(_QWORD *)(v20 + 8 * v23 + 32) = v21;
        }
        while (v17 != v19);
        OUTLINED_FUNCTION_116_0();
      }
      else
      {
        OUTLINED_FUNCTION_116_0();
        v20 = MEMORY[0x24BEE4AF8];
      }
      v24 = Set.init(minimumCapacity:)();
      v25 = *(_QWORD *)(v20 + 16);
      if (v25)
      {
        v26 = 0;
        do
        {
          v27 = v24 + 56;
          while (1)
          {
            v28 = *(_QWORD *)(v20 + 32 + 8 * v26++);
            v29 = static Hasher._hash(seed:_:)();
            v30 = -1 << *(_BYTE *)(v24 + 32);
            v31 = v29 & ~v30;
            if (((*(_QWORD *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
              break;
            v32 = *(_QWORD *)(v24 + 48);
            if (*(_QWORD *)(v32 + 8 * v31) != v28)
            {
              v33 = ~v30;
              do
              {
                v31 = (v31 + 1) & v33;
                if (((*(_QWORD *)(v27 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
                  goto LABEL_29;
              }
              while (*(_QWORD *)(v32 + 8 * v31) != v28);
            }
            if (v26 == v25)
              goto LABEL_30;
          }
LABEL_29:
          swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v28, v31);
          OUTLINED_FUNCTION_74();
        }
        while (v26 != v25);
      }
LABEL_30:
      OUTLINED_FUNCTION_161();
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, float))(v93 + 16))(v97, v24, v2, v15);
      OUTLINED_FUNCTION_51_1();
      __swift_destroy_boxed_opaque_existential_1(v95);
    }
    v98 = v0[80];
    v34 = v0;
    v35 = v0[79];
    v36 = v34[78];
    v37 = (_QWORD *)v34[77];
    OUTLINED_FUNCTION_4_0();
    v38 = v37[11];
    v39 = v37[12];
    OUTLINED_FUNCTION_140_0((uint64_t)(v37 + 8));
    v3 = OUTLINED_FUNCTION_83_5(v36, v14, 0, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 16));
    swift_endAccess();
    OUTLINED_FUNCTION_4_0();
    v40 = v37[5];
    v41 = v37[6];
    OUTLINED_FUNCTION_154_0();
    v4 = OUTLINED_FUNCTION_83_5(v35, v14, 0, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 16));
    swift_endAccess();
    if (v98 >> 62)
    {
      v0 = v94;
      OUTLINED_FUNCTION_18_3();
      v42 = OUTLINED_FUNCTION_54_6();
      OUTLINED_FUNCTION_20_2();
    }
    else
    {
      v42 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      v0 = v94;
    }
    if (!v42)
      break;
    v2 = v5 & 0xC000000000000001;
    v43 = v0[80] + 32;
    swift_bridgeObjectRetain();
    v44 = 0;
    do
    {
      if (v2)
      {
        v45 = MEMORY[0x2495A9EB0](v44, v0[80]);
      }
      else
      {
        v45 = *(_QWORD *)(v43 + 8 * v44);
        swift_retain();
      }
      v46 = v44 + 1;
      if (__OFADD__(v44, 1))
      {
        __break(1u);
        goto LABEL_80;
      }
      if (*(_QWORD *)(v45 + 16) == v14)
      {
        OUTLINED_FUNCTION_19_6();
        v51 = v0[67];
        v52 = __OFADD__(v51, 1);
        v53 = v51 + 1;
        if (!v52)
        {
          v2 = v0[77];
          v0[67] = v53;
          OUTLINED_FUNCTION_4_0();
          v5 = *(_QWORD *)(v45 + 24);
          OUTLINED_FUNCTION_4_0();
          OUTLINED_FUNCTION_74_1();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_47_9();
          OUTLINED_FUNCTION_46_9();
          *(_BYTE *)(v54 + 56) = 0;
          OUTLINED_FUNCTION_340();
          swift_release();
          v6 = v97;
          goto LABEL_48;
        }
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      swift_release();
      ++v44;
    }
    while (v46 != v42);
    v47 = v0[77];
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_4_0();
    v48 = *(_QWORD *)(v47 + 280);
    v49 = OUTLINED_FUNCTION_56_2();
    *(_QWORD *)(v47 + 280) = v48;
    if ((v49 & 1) == 0)
    {
      v56 = v0[77];
      OUTLINED_FUNCTION_26_10();
      v48 = v57;
      *(_QWORD *)(v56 + 280) = v57;
    }
    v6 = v97;
    v2 = *(_QWORD *)(v48 + 16);
    if (v2 >= *(_QWORD *)(v48 + 24) >> 1)
    {
      v58 = v0[77];
      OUTLINED_FUNCTION_26_10();
      v48 = v59;
      *(_QWORD *)(v58 + 280) = v59;
    }
    *(_QWORD *)(v48 + 16) = v2 + 1;
    v50 = v48 + 32 * v2;
    *(_QWORD *)(v50 + 32) = v3;
    *(_QWORD *)(v50 + 40) = v4;
    *(_QWORD *)(v50 + 48) = v14;
    *(_BYTE *)(v50 + 56) = 1;
    swift_endAccess();
    v5 = MEMORY[0x24BEE4AF8];
LABEL_48:
    v55 = v0[76];
    __swift_destroy_boxed_opaque_existential_1(v6);
    if (!*(_QWORD *)(v55 + 16))
    {
LABEL_52:
      OUTLINED_FUNCTION_116_0();
      goto LABEL_53;
    }
  }
  v2 = v0[77];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_47_9();
  OUTLINED_FUNCTION_46_9();
  *(_BYTE *)(v85 + 56) = 1;
  OUTLINED_FUNCTION_76_3();
  __swift_destroy_boxed_opaque_existential_1(v97);
LABEL_53:
  OUTLINED_FUNCTION_64_9();
  if (!v52)
  {
    *(_QWORD *)(v60 + 288) = v61;
    if (one-time initialization token for device == -1)
      goto LABEL_55;
    goto LABEL_83;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  swift_once();
LABEL_55:
  v62 = OUTLINED_FUNCTION_15_4();
  v63 = __swift_project_value_buffer(v62, (uint64_t)static Log.device);
  v64 = v0[67];
  swift_retain();
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  v67 = os_log_type_enabled(v65, v66);
  v68 = v0[77];
  if (v67)
  {
    v69 = OUTLINED_FUNCTION_4_11();
    *(_DWORD *)v69 = 134218240;
    OUTLINED_FUNCTION_4_0();
    v0[69] = *(_QWORD *)(*(_QWORD *)(v68 + 280) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_443();
    *(_WORD *)(v69 + 12) = 2048;
    v0[68] = v64;
    OUTLINED_FUNCTION_69_8();
    OUTLINED_FUNCTION_124_0(&dword_248CAA000, v65, v66, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v69);
    OUTLINED_FUNCTION_0_1();
  }
  OUTLINED_FUNCTION_443();

  result = OUTLINED_FUNCTION_4_0();
  if ((uint64_t)v0[67] < 1)
  {
LABEL_60:
    v74 = v0[77];
    v75 = *(_QWORD *)(v74 + 328);
    v52 = __OFADD__(v75, 1);
    v76 = v75 + 1;
    if (v52)
    {
      __break(1u);
      goto LABEL_85;
    }
    *(_QWORD *)(v74 + 328) = v76;
    if (*(_BYTE *)(v74 + 120) != 1)
      goto LABEL_78;
    v77 = v0[77];
    OUTLINED_FUNCTION_4_0();
    v78 = *(_QWORD *)(v77 + 272);
    v79 = *(_QWORD *)(*(_QWORD *)(v77 + 280) + 16);
    if ((uint64_t)v78 < v79)
    {
      *(_QWORD *)(v77 + 272) = v78 + 1;
      swift_retain();
      Logger.logObject.getter();
      v80 = OUTLINED_FUNCTION_111();
      if (OUTLINED_FUNCTION_17_3(v80))
      {
        v81 = (uint8_t *)OUTLINED_FUNCTION_4_18();
        *(_DWORD *)v81 = 134217984;
        OUTLINED_FUNCTION_67_7();
        OUTLINED_FUNCTION_69_8();
        OUTLINED_FUNCTION_443();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v63, (os_log_type_t)v2, "Adjusting draftCount up to %ld", v81);
        goto LABEL_75;
      }
      goto LABEL_77;
    }
    if (v78 != v79 && v78 >= 2)
    {
      *(_QWORD *)(v77 + 272) = v78 - 1;
      swift_retain();
      Logger.logObject.getter();
      v86 = OUTLINED_FUNCTION_111();
      if (OUTLINED_FUNCTION_17_3(v86))
      {
        v87 = (uint8_t *)OUTLINED_FUNCTION_4_18();
        *(_DWORD *)v87 = 134217984;
        v0[71] = *(_QWORD *)(v77 + 272);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_19_3();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v63, (os_log_type_t)v2, "Adjusting draftCount down to %ld", v87);
LABEL_75:
        OUTLINED_FUNCTION_0_1();
      }
    }
    else
    {
      swift_retain();
      Logger.logObject.getter();
      v83 = OUTLINED_FUNCTION_111();
      if (OUTLINED_FUNCTION_264(v83))
      {
        v84 = (uint8_t *)OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v84 = 134217984;
        OUTLINED_FUNCTION_67_7();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_224_1();
        OUTLINED_FUNCTION_37_2(&dword_248CAA000, v63, (os_log_type_t)((_BYTE)v0 + 24), "Keeping draftCount at %ld", v84);
        goto LABEL_75;
      }
    }
LABEL_77:
    swift_release();

LABEL_78:
    v91 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
    return v91();
  }
  v71 = v0[77];
  v72 = *(_QWORD *)(v71 + 320);
  v52 = __OFADD__(v72, 1);
  v73 = v72 + 1;
  if (!v52)
  {
    *(_QWORD *)(v71 + 320) = v73;
    goto LABEL_60;
  }
LABEL_85:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_84_6();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v1 + 656) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_17();
  if (v0)
    OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

void TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  os_log_type_t v90;
  float *v91;
  uint64_t v92;
  const char *v93;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  os_log_type_t v100;
  uint64_t v101;
  void (*v102)(void);
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;

  v2 = v0 + 176;
  v3 = v0 + 216;
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 616) + 152;
  OUTLINED_FUNCTION_404();
  OUTLINED_FUNCTION_98_3(v5);
  v112 = *(_QWORD **)(v0 + 248);
  v113 = *(_QWORD *)(v0 + 240);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 216), v113);
  if (v4 >> 62)
    goto LABEL_97;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v104 = (_QWORD *)v2;
  v114 = v3;
  if (v6)
  {
    *(_QWORD *)(v0 + 576) = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_56_3();
    if (v6 < 0)
      goto LABEL_101;
    v1 = 0;
    v7 = *(_QWORD *)(v0 + 576);
    v8 = (_QWORD *)(v0 + 576);
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_98_5();
      v9 = *(_QWORD *)(swift_retain() + 16);
      swift_release();
      *v8 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      if (v10 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = (_QWORD *)(v0 + 576);
        v7 = *(_QWORD *)(v0 + 576);
      }
      ++v1;
      *(_QWORD *)(v7 + 16) = v10 + 1;
      *(_QWORD *)(v7 + 8 * v10 + 32) = v9;
    }
    while (v6 != v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v110 = v0 + 56;
  v120 = v0 + 96;
  v117 = (__int128 *)(v0 + 136);
  v116 = v0 + 256;
  v11 = Set.init(minimumCapacity:)();
  v12 = *(_QWORD *)(v7 + 16);
  v119 = v4;
  if (v12)
  {
    v13 = 0;
    do
    {
      while (1)
      {
        v14 = *(_QWORD *)(v7 + 32 + 8 * v13++);
        OUTLINED_FUNCTION_91_3();
        OUTLINED_FUNCTION_33_10();
        if ((v15 & 1) != 0)
          break;
LABEL_21:
        swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeSet.insertNew(_:at:isUnique:)(v14, v1);
        OUTLINED_FUNCTION_74();
        if (v13 == v12)
          goto LABEL_22;
      }
      if (*(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v1) != v14)
      {
        do
        {
          OUTLINED_FUNCTION_38_9();
          if ((v17 & 1) == 0)
            goto LABEL_21;
        }
        while (*(_QWORD *)(v16 + 8 * v1) != v14);
      }
    }
    while (v13 != v12);
  }
LABEL_22:
  OUTLINED_FUNCTION_50_2();
  v109 = (uint64_t *)(v0 + 536);
  v106 = (_QWORD *)(v0 + 552);
  v107 = (_QWORD *)(v0 + 544);
  v108 = (_QWORD *)(v0 + 560);
  v105 = (_QWORD *)(v0 + 568);
  v103 = (_QWORD *)(v0 + 584);
  v111 = (unint64_t *)(v0 + 592);
  v18 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v112[3])(v120, v110, v11, v113);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_404();
  __swift_destroy_boxed_opaque_existential_1(v114);
  v118 = v0;
  while (1)
  {
LABEL_23:
    v19 = (_QWORD *)v0;
    v20 = *(_QWORD *)(v0 + 640);
    v21 = v19[79];
    v22 = v19[78];
    v23 = v19[77];
    v24 = v23 + 16;
    OUTLINED_FUNCTION_4_0();
    v25 = *(_QWORD *)(v23 + 96);
    OUTLINED_FUNCTION_140_0(v23 + 64);
    v3 = OUTLINED_FUNCTION_137_2(v22, v18, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16));
    OUTLINED_FUNCTION_340();
    OUTLINED_FUNCTION_4_0();
    v26 = *(_QWORD *)(v23 + 48);
    OUTLINED_FUNCTION_140_0(v23 + 16);
    v2 = OUTLINED_FUNCTION_137_2(v21, v18, 0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16));
    OUTLINED_FUNCTION_340();
    if (v20 >> 62)
    {
      v0 = v118;
      v24 = *(_QWORD *)(v118 + 640);
      v27 = v119;
      OUTLINED_FUNCTION_18_3();
      v28 = OUTLINED_FUNCTION_54_6();
      OUTLINED_FUNCTION_20_2();
    }
    else
    {
      v27 = v119;
      v28 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10);
      v0 = v118;
    }
    if (!v28)
    {
      v69 = *(_QWORD *)(v0 + 616);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      OUTLINED_FUNCTION_47_9();
      v70 = *(_QWORD *)(v69 + 280);
      *(_QWORD *)(v70 + 16) = v24 + 1;
      OUTLINED_FUNCTION_93_5(v70 + 32 * v24);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1(v120);
LABEL_70:
      OUTLINED_FUNCTION_64_9();
      if (v37)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v71 + 288) = v72;
        if (one-time initialization token for device == -1)
          goto LABEL_72;
      }
      swift_once();
LABEL_72:
      v73 = OUTLINED_FUNCTION_15_4();
      v74 = __swift_project_value_buffer(v73, (uint64_t)static Log.device);
      v75 = *(_QWORD *)(v0 + 536);
      swift_retain();
      v76 = Logger.logObject.getter();
      v77 = static os_log_type_t.debug.getter();
      v78 = os_log_type_enabled(v76, v77);
      v79 = *(_QWORD *)(v0 + 616);
      if (v78)
      {
        v80 = OUTLINED_FUNCTION_4_11();
        *(_DWORD *)v80 = 134218240;
        OUTLINED_FUNCTION_4_0();
        *v106 = *(_QWORD *)(*(_QWORD *)(v79 + 280) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_224_1();
        *(_WORD *)(v80 + 12) = 2048;
        *v107 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_124_0(&dword_248CAA000, v76, v77, "Produced token count = %ld. Accepting draft count = %ld", (uint8_t *)v80);
        OUTLINED_FUNCTION_0_1();
      }
      OUTLINED_FUNCTION_224_1();

      OUTLINED_FUNCTION_4_0();
      if (*v109 >= 1)
      {
        v81 = *(_QWORD *)(v0 + 616);
        v82 = *(_QWORD *)(v81 + 320);
        v37 = __OFADD__(v82, 1);
        v83 = v82 + 1;
        if (v37)
          goto LABEL_102;
        *(_QWORD *)(v81 + 320) = v83;
      }
      v84 = *(_QWORD *)(v0 + 616);
      v85 = *(_QWORD *)(v84 + 328);
      v37 = __OFADD__(v85, 1);
      v86 = v85 + 1;
      if (!v37)
      {
        *(_QWORD *)(v84 + 328) = v86;
        if (*(_BYTE *)(v84 + 120) != 1)
        {
LABEL_93:
          v102 = (void (*)(void))OUTLINED_FUNCTION_324_0();
          v102();
          return;
        }
        v87 = *(_QWORD *)(v0 + 616);
        OUTLINED_FUNCTION_4_0();
        v88 = *(_QWORD *)(v87 + 272);
        v89 = *(_QWORD *)(*(_QWORD *)(v87 + 280) + 16);
        if ((uint64_t)v88 < v89)
        {
          *(_QWORD *)(v87 + 272) = v88 + 1;
          swift_retain();
          Logger.logObject.getter();
          v90 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v90))
          {
            v91 = (float *)OUTLINED_FUNCTION_4_18();
            OUTLINED_FUNCTION_31_11(v91, 3.852e-34);
            *v108 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v93 = "Adjusting draftCount up to %ld";
            goto LABEL_91;
          }
          goto LABEL_92;
        }
        if (v88 != v89 && v88 >= 2)
        {
          *(_QWORD *)(v87 + 272) = v88 - 1;
          swift_retain();
          Logger.logObject.getter();
          v100 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v100))
          {
            v91 = (float *)OUTLINED_FUNCTION_4_18();
            OUTLINED_FUNCTION_31_11(v91, 3.852e-34);
            *v105 = v101;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v93 = "Adjusting draftCount down to %ld";
LABEL_91:
            OUTLINED_FUNCTION_37_2(&dword_248CAA000, v74, (os_log_type_t)v109, v93, (uint8_t *)v91);
            OUTLINED_FUNCTION_0_1();
          }
        }
        else
        {
          swift_retain();
          Logger.logObject.getter();
          v95 = OUTLINED_FUNCTION_111();
          if (OUTLINED_FUNCTION_17_3(v95))
          {
            v91 = (float *)OUTLINED_FUNCTION_4_18();
            OUTLINED_FUNCTION_31_11(v91, 3.852e-34);
            *v103 = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_19_3();
            v93 = "Keeping draftCount at %ld";
            goto LABEL_91;
          }
        }
LABEL_92:
        OUTLINED_FUNCTION_19_3();

        goto LABEL_93;
      }
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      return;
    }
    v29 = v27 & 0xC000000000000001;
    v30 = *(_QWORD *)(v0 + 640) + 32;
    swift_bridgeObjectRetain();
    v1 = 0;
    while (2)
    {
      if (v29)
        OUTLINED_FUNCTION_98_5();
      v31 = *(_QWORD *)(v30 + 8 * v1);
      swift_retain();
      v4 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_95;
      }
      if (*(_QWORD *)(v31 + 16) == v18)
      {
        OUTLINED_FUNCTION_19_6();
        v36 = *(_QWORD *)(v0 + 536);
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (!v37)
        {
          v39 = *(_QWORD *)(v0 + 616);
          *(_QWORD *)(v0 + 536) = v38;
          OUTLINED_FUNCTION_4_0();
          v4 = *(_QWORD *)(v31 + 24);
          OUTLINED_FUNCTION_4_0();
          OUTLINED_FUNCTION_74_1();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v1 = *(_QWORD *)(*(_QWORD *)(v39 + 280) + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v40 = *(_QWORD *)(v39 + 280);
          *(_QWORD *)(v40 + 16) = v1 + 1;
          v41 = v40 + 32 * v1;
          *(_QWORD *)(v41 + 32) = v3;
          *(_QWORD *)(v41 + 40) = v2;
          *(_QWORD *)(v41 + 48) = v18;
          *(_BYTE *)(v41 + 56) = 0;
          OUTLINED_FUNCTION_340();
          OUTLINED_FUNCTION_19_3();
          v35 = MEMORY[0x24BEE4AF8];
          goto LABEL_39;
        }
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        swift_bridgeObjectRetain();
        v6 = OUTLINED_FUNCTION_54_6();
        goto LABEL_3;
      }
      OUTLINED_FUNCTION_19_3();
      ++v1;
      if (v4 != v28)
        continue;
      break;
    }
    v32 = *(_QWORD *)(v0 + 616);
    OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_4_0();
    v33 = *(_QWORD *)(v32 + 280);
    v34 = OUTLINED_FUNCTION_56_2();
    *(_QWORD *)(v32 + 280) = v33;
    if ((v34 & 1) == 0)
    {
      v65 = *(_QWORD *)(v0 + 616);
      OUTLINED_FUNCTION_26_10();
      v33 = v66;
      *(_QWORD *)(v65 + 280) = v66;
    }
    v35 = MEMORY[0x24BEE4AF8];
    v1 = *(_QWORD *)(v33 + 16);
    if (v1 >= *(_QWORD *)(v33 + 24) >> 1)
    {
      v67 = *(_QWORD *)(v0 + 616);
      OUTLINED_FUNCTION_26_10();
      v33 = v68;
      *(_QWORD *)(v67 + 280) = v68;
    }
    *(_QWORD *)(v33 + 16) = v1 + 1;
    OUTLINED_FUNCTION_93_5(v33 + 32 * v1);
    swift_endAccess();
    v4 = v35;
LABEL_39:
    v42 = *(_QWORD *)(v0 + 608);
    __swift_destroy_boxed_opaque_existential_1(v120);
    v119 = v4;
    if (!*(_QWORD *)(v42 + 16)
      || (*(_QWORD *)(v0 + 640) = v4,
          *(_QWORD *)(v0 + 632) = v2,
          *(_QWORD *)(v0 + 624) = v3,
          v43 = *(_QWORD *)(v0 + 608),
          v44 = specialized __RawDictionaryStorage.find<A>(_:)(v3),
          (v45 & 1) == 0))
    {
      OUTLINED_FUNCTION_116_0();
      goto LABEL_70;
    }
    v46 = OUTLINED_FUNCTION_62_9(v44);
    OUTLINED_FUNCTION_90_3(v46);
    outlined init with take of LogitCollection(v117, v120);
    v47 = *(_QWORD *)(v0 + 616);
    if ((*(_BYTE *)(v43 + 140) & 1) != 0)
      break;
    v49 = *(float *)(v43 + 136);
    OUTLINED_FUNCTION_39_3(v47 + 152);
    v2 = *(_QWORD *)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 288);
    v50 = OUTLINED_FUNCTION_82_5();
    if (v4 >> 62)
    {
      OUTLINED_FUNCTION_74_1();
      v51 = OUTLINED_FUNCTION_54_6();
    }
    else
    {
      v51 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_74_1();
    }
    v52 = v111;
    v113 = v3;
    v115 = v2;
    v112 = v50;
    if (v51)
    {
      *v111 = v35;
      OUTLINED_FUNCTION_56_3();
      if (v51 < 0)
        goto LABEL_96;
      v53 = 0;
      v54 = *v111;
      do
      {
        if ((v4 & 0xC000000000000001) != 0)
          OUTLINED_FUNCTION_68_6();
        v55 = *(_QWORD *)(OUTLINED_FUNCTION_105_2() + 16);
        swift_release();
        *v52 = v54;
        v57 = *(_QWORD *)(v54 + 16);
        v56 = *(_QWORD *)(v54 + 24);
        v1 = v57 + 1;
        if (v57 >= v56 >> 1)
        {
          OUTLINED_FUNCTION_89_5(v56);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v52 = v111;
          v54 = *v111;
        }
        ++v53;
        *(_QWORD *)(v54 + 16) = v1;
        *(_QWORD *)(v54 + 8 * v57 + 32) = v55;
      }
      while (v51 != v53);
      OUTLINED_FUNCTION_116_0();
    }
    else
    {
      OUTLINED_FUNCTION_116_0();
      v54 = v35;
    }
    v58 = Set.init(minimumCapacity:)();
    v59 = *(_QWORD *)(v54 + 16);
    if (v59)
    {
      v60 = 0;
      do
      {
        while (1)
        {
          v61 = *(_QWORD *)(v54 + 32 + 8 * v60++);
          static Hasher._hash(seed:_:)();
          OUTLINED_FUNCTION_33_10();
          if ((v62 & 1) != 0)
            break;
LABEL_64:
          swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v61, v1);
          OUTLINED_FUNCTION_74();
          if (v60 == v59)
            goto LABEL_65;
        }
        if (*(_QWORD *)(*(_QWORD *)(v58 + 48) + 8 * v1) != v61)
        {
          do
          {
            OUTLINED_FUNCTION_38_9();
            if ((v64 & 1) == 0)
              goto LABEL_64;
          }
          while (*(_QWORD *)(v63 + 8 * v1) != v61);
        }
      }
      while (v60 != v59);
    }
LABEL_65:
    swift_bridgeObjectRelease();
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(v113 + 16))(v120, v58, v115, v49);
    OUTLINED_FUNCTION_20_2();
    __swift_destroy_boxed_opaque_existential_1(v116);
  }
  if (*(_BYTE *)(v47 + 141) != 1)
  {
    v48 = *(_QWORD *)(v47 + 184);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v47 + 152), *(_QWORD *)(v47 + 176));
    v18 = OUTLINED_FUNCTION_94_3(v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 8));
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_98_3(v47 + 16);
  v97 = *(_QWORD *)(v0 + 200);
  v98 = *(_QWORD *)(v0 + 208);
  __swift_project_boxed_opaque_existential_1(v104, v97);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v99 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 648) = v99;
  *v99 = v0;
  v99[1] = TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:);
  DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v110, v2, v0 + 16, v97, v98);
}

Swift::Void __swiftcall TwoStageSpeculativeDecoder.append(prompt:)(TokenGenerationInference::SamplingDecoderPrompt prompt)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v3 = *(_QWORD *)prompt.queryTokens._rawValue;
  v4 = *((_QWORD *)prompt.queryTokens._rawValue + 1);
  v5 = MEMORY[0x24BEE4AF8];
  v34 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    OUTLINED_FUNCTION_18_3();
    swift_bridgeObjectRetain_n();
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 8 * v7 + 32);
      v10 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v8 + 16);
      if (__OFADD__(v11, v10))
        break;
      OUTLINED_FUNCTION_65_0();
      if (!OUTLINED_FUNCTION_56_2() || v11 + v10 > *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v12;
      }
      if (*(_QWORD *)(v9 + 16))
      {
        v13 = *(_QWORD *)(v8 + 16);
        if ((*(_QWORD *)(v8 + 24) >> 1) - v13 < v10)
          goto LABEL_26;
        v14 = (void *)(v8 + 8 * v13 + 32);
        if (v9 + 32 < (unint64_t)v14 + 8 * v10 && (unint64_t)v14 < v9 + 32 + 8 * v10)
          goto LABEL_28;
        memcpy(v14, (const void *)(v9 + 32), 8 * v10);
        if (v10)
        {
          v16 = *(_QWORD *)(v8 + 16);
          v17 = __OFADD__(v16, v10);
          v18 = v16 + v10;
          if (v17)
            goto LABEL_27;
          *(_QWORD *)(v8 + 16) = v18;
        }
      }
      else if (v10)
      {
        goto LABEL_25;
      }
      ++v7;
      OUTLINED_FUNCTION_50_2();
      if (v6 == v7)
      {
        OUTLINED_FUNCTION_58_0();
        v34 = v8;
        v5 = MEMORY[0x24BEE4AF8];
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_18_3();
    swift_bridgeObjectRetain();
LABEL_21:
    OUTLINED_FUNCTION_18_3();
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_20_2();
    v19 = *(_QWORD *)(v34 + 16);
    swift_bridgeObjectRelease();
    if (v19)
    {
      OUTLINED_FUNCTION_4_0();
      *(_QWORD *)(v2 + 280) = v5;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v2 + 104);
      v32 = v3;
      v33 = v4;
      OUTLINED_FUNCTION_4_0();
      v21 = *(_QWORD *)(v2 + 88);
      v22 = *(_QWORD *)(v2 + 96);
      v23 = OUTLINED_FUNCTION_154_0();
      v24 = v20;
      v25 = v23;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 40))(v24, &v32, v21, v22);
      OUTLINED_FUNCTION_101_3();
      *(_QWORD *)(v2 + 104) = v25;
      v26 = *(_QWORD *)(v2 + 56);
      v32 = v3;
      v33 = v4;
      OUTLINED_FUNCTION_4_0();
      v27 = *(_QWORD *)(v2 + 40);
      v28 = *(_QWORD *)(v2 + 48);
      v29 = __swift_mutable_project_boxed_opaque_existential_1(v2 + 16, v27);
      v30 = v26;
      v31 = v29;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v28 + 40))(v30, &v32, v27, v28);
      OUTLINED_FUNCTION_101_3();
      *(_QWORD *)(v2 + 56) = v31;
      *(_BYTE *)(v2 + 344) = 1;
    }
  }
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = v0;
  return OUTLINED_FUNCTION_38_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_4_0();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 280) + 16))
  {
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
    return OUTLINED_FUNCTION_33(v2);
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v4;
    *v4 = v0;
    v4[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
    return TwoStageSpeculativeDecoder.generateDraftTokens()();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD *, uint64_t, uint64_t);

  v1 = v0[18];
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_39_3(v1 + 64);
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  OUTLINED_FUNCTION_83_3(v1 + 192);
  v6 = (uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v0[22] = v4;
  *v4 = v0;
  v4[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  return v6(v0[21], v0 + 7, v2, v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v1 = OUTLINED_FUNCTION_55_7();
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(v1, v2);
  v4 = v3;
  v0[25] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[26] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty();
  return TwoStageSpeculativeDecoder.fillBufferedTokens(_:_:)(v0[20], v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_42();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_324_0();
  return OUTLINED_FUNCTION_33(v0);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_95_5();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 160) = a1;
  *(_QWORD *)(v4 + 168) = a2;
  swift_task_dealloc();
  if (v2)
    return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v4 + 8));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

uint64_t TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  OUTLINED_FUNCTION_64_2(&v6);
  *(_QWORD *)(v4 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_10_17();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_42();
  }
  else
  {
    *(_QWORD *)(v4 + 192) = a1;
    OUTLINED_FUNCTION_10_17();
  }
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

uint64_t TwoStageSpeculativeDecoder.decodeNextChunk()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 560) = v0;
  return OUTLINED_FUNCTION_38_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 560);
  if (*(_BYTE *)(v1 + 344) == 1)
  {
    if (*(_BYTE *)(v1 + 142) == 1)
    {
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_83_3(v1 + 16);
      v2 = *(_QWORD *)(v0 + 160);
      v3 = *(_QWORD *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 136), v2);
      v4 = *(_QWORD *)(v1 + 56);
      *(_OWORD *)(v0 + 72) = 0u;
      *(_QWORD *)(v0 + 88) = 0;
      *(_OWORD *)(v0 + 56) = 0u;
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 568) = v5;
      *v5 = v0;
      v5[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
      v6 = v0 + 256;
      v7 = v4;
      v8 = v0 + 56;
      v9 = v2;
      v10 = v3;
    }
    else
    {
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_83_3(v1 + 64);
      v13 = *(_QWORD *)(v0 + 200);
      v14 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v13);
      v15 = *(_QWORD *)(v1 + 104);
      OUTLINED_FUNCTION_39_3(v1 + 192);
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 584) = v16;
      *v16 = v0;
      v16[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
      v6 = v0 + 96;
      v7 = v15;
      v8 = v0 + 216;
      v9 = v13;
      v10 = v14;
    }
    return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v6, v7, v8, v9, v10);
  }
  else
  {
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 624) = v11;
    *v11 = v0;
    v11[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
    return TwoStageSpeculativeDecoder.fillBufferedTokensIfEmpty()();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 576) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_17();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 592) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_17();
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_4_5();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = (_QWORD *)v0[70];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 22));
  v2 = v1[23];
  __swift_project_boxed_opaque_existential_1(v1 + 19, v1[22]);
  result = OUTLINED_FUNCTION_94_3((uint64_t)(v0 + 12), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8));
  v0[75] = result;
  v4 = v1[38];
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = v0[70];
    v1[38] = v5;
    v7 = *(_QWORD *)(v6 + 312);
    v8 = __OFADD__(v7, 1);
    v9 = v7 + 1;
    if (!v8)
    {
      v10 = result;
      v11 = (_QWORD *)v0[70];
      *(_QWORD *)(v6 + 312) = v9;
      v12 = v11[13];
      OUTLINED_FUNCTION_4_0();
      v13 = v11[11];
      v14 = v11[12];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v11 + 8), v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(v12, v10, 0, v13, v14);
      swift_endAccess();
      v11[13] = v15;
      v16 = v11[7];
      OUTLINED_FUNCTION_4_0();
      v17 = v11[5];
      v18 = v11[6];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v11 + 2), v17);
      v19 = OUTLINED_FUNCTION_83_5(v16, v10, 0, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16));
      OUTLINED_FUNCTION_76_3();
      v11[7] = v19;
      OUTLINED_FUNCTION_90_3((uint64_t)(v11 + 2));
      v20 = v0[45];
      v21 = v0[46];
      __swift_project_boxed_opaque_existential_1(v0 + 42, v20);
      OUTLINED_FUNCTION_59_7();
      v22 = (_QWORD *)swift_task_alloc();
      v0[76] = v22;
      *v22 = v0;
      v22[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
      return DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)((uint64_t)(v0 + 37), v19, (uint64_t)(v11 + 2), v20, v21);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_84_6();
  OUTLINED_FUNCTION_64_2(v2);
  *(_QWORD *)(v1 + 616) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_17();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v1 + 296);
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 560);
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  *(_BYTE *)(v2 + 344) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v3 = OUTLINED_FUNCTION_2_0();
  *(_OWORD *)(v3 + 16) = xmmword_248D75A50;
  *(_QWORD *)(v3 + 32) = v1;
  OUTLINED_FUNCTION_37_1();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_75_1();
  if (v0)
    return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_41_1();
  return OUTLINED_FUNCTION_2_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 560);
  OUTLINED_FUNCTION_4_0();
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 280) + 16))
  {
    v18 = 0;
    return OUTLINED_FUNCTION_10_4(v18, *(uint64_t (**)(void))(v0 + 8));
  }
  v2 = *(_QWORD *)(v0 + 560);
  OUTLINED_FUNCTION_4_0();
  v3 = specialized RangeReplaceableCollection.removeFirst()();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  result = OUTLINED_FUNCTION_76_3();
  v11 = *(_QWORD *)(v2 + 304);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 304) = v13;
    if ((v9 & 1) == 0)
    {
LABEL_6:
      v17 = *(_QWORD *)(v0 + 560);
      *(_QWORD *)(v17 + 104) = v3;
      *(_QWORD *)(v17 + 56) = v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v18 = OUTLINED_FUNCTION_2_0();
      *(_OWORD *)(v18 + 16) = xmmword_248D75A50;
      *(_QWORD *)(v18 + 32) = v7;
      return OUTLINED_FUNCTION_10_4(v18, *(uint64_t (**)(void))(v0 + 8));
    }
    v14 = *(_QWORD *)(v0 + 560);
    v15 = *(_QWORD *)(v14 + 312);
    v12 = __OFADD__(v15, 1);
    v16 = v15 + 1;
    if (!v12)
    {
      *(_QWORD *)(v14 + 312) = v16;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  OUTLINED_FUNCTION_37_1();
  return OUTLINED_FUNCTION_33(*(uint64_t (**)(void))(v0 + 8));
}

void TwoStageSpeculativeDecoder.decodeNextChunk()()
{
  uint64_t v0;
  char *v1;
  float v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL *v7;
  uint64_t *v8;
  uint64_t v9;
  float v10;
  _QWORD *v11;
  uint64_t v12;
  float *rawValue;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v3 = *(uint64_t **)(v0 + 560);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  v4 = TwoStageSpeculativeDecoder.makeDraftTokens(logits:draftNode:targetNode:)((_QWORD *)(v0 + 256), v3[7], v3[13]);
  v5 = v3[42];
  if (v5)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v6 = *(_QWORD *)(v4 + 48);
      swift_bridgeObjectRelease();
      if (v6 == v5)
      {
        v7 = (BOOL *)(v0 + 636);
        v8 = (uint64_t *)(v0 + 560);
        v9 = *(_QWORD *)(v0 + 560);
        *(_BYTE *)(v0 + 636) = 1;
        if ((*(_BYTE *)(v9 + 148) & 1) != 0)
          goto LABEL_17;
        v10 = *(float *)(v9 + 144);
        v11 = (_QWORD *)OUTLINED_FUNCTION_55_7();
        __swift_project_boxed_opaque_existential_1(v11, v12);
        rawValue = (float *)LogitCollection.applySoftmax()()._0._rawValue;
        swift_bridgeObjectRelease();
        if ((v5 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v5 < *((_QWORD *)rawValue + 2))
        {
          v1 = (char *)(rawValue + 8);
          v2 = rawValue[v5 + 8];
          *v7 = v10 <= v2;
          if (one-time initialization token for device == -1)
          {
LABEL_8:
            v14 = OUTLINED_FUNCTION_15_4();
            __swift_project_value_buffer(v14, (uint64_t)static Log.device);
            swift_retain();
            OUTLINED_FUNCTION_50_1();
            v15 = Logger.logObject.getter();
            v16 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v15, v16))
            {
              v44 = v1;
              v17 = OUTLINED_FUNCTION_4_11();
              *(_DWORD *)v17 = 67109632;
              *(_DWORD *)(v0 + 632) = v10 <= v2;
              OUTLINED_FUNCTION_69_8();
              *(_WORD *)(v17 + 8) = 2048;
              *(double *)(v0 + 552) = *(float *)&v44[4 * v5];
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_19_6();
              swift_release();
              *(_WORD *)(v17 + 18) = 2048;
              *(double *)(v0 + 544) = v10;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl(&dword_248CAA000, v15, v16, "shouldDoEarlyReturn: %{BOOL}d, Stop token probability: %f, Early return probability threshold: %f", (uint8_t *)v17, 0x1Cu);
              OUTLINED_FUNCTION_0_1();
            }
            OUTLINED_FUNCTION_19_6();
            swift_release();

LABEL_17:
            OUTLINED_FUNCTION_4_0();
            if (*v7)
            {
              v22 = *v8;
              v23 = *(_QWORD *)(*v8 + 304);
              v24 = __OFADD__(v23, 1);
              v25 = v23 + 1;
              if (v24)
              {
                __break(1u);
              }
              else
              {
                *(_QWORD *)(v22 + 304) = v25;
                v26 = *(_QWORD *)(v22 + 288);
                v27 = v26 + 1;
                if (!__OFADD__(v26, 1))
                {
                  v28 = *v8;
                  *(_QWORD *)(v22 + 288) = v27;
                  v29 = *(_QWORD *)(v28 + 296);
                  v24 = __OFADD__(v29, 1);
                  v30 = v29 + 1;
                  if (!v24)
                  {
                    *(_QWORD *)(v28 + 296) = v30;
                    if (one-time initialization token for device == -1)
                      goto LABEL_22;
                    goto LABEL_32;
                  }
LABEL_31:
                  __break(1u);
LABEL_32:
                  swift_once();
LABEL_22:
                  v31 = OUTLINED_FUNCTION_15_4();
                  __swift_project_value_buffer(v31, (uint64_t)static Log.device);
                  v32 = OUTLINED_FUNCTION_77_4();
                  v33 = static os_log_type_t.info.getter();
                  if (OUTLINED_FUNCTION_264(v33))
                  {
                    v34 = (uint8_t *)OUTLINED_FUNCTION_4_11();
                    *(_WORD *)v34 = 0;
                    _os_log_impl(&dword_248CAA000, v32, (os_log_type_t)(v0 + 48), "Early return from draft model is triggered", v34, 2u);
                    OUTLINED_FUNCTION_0_1();
                  }

                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
                  v35 = OUTLINED_FUNCTION_2_0();
                  *(_OWORD *)(v35 + 16) = xmmword_248D75A50;
                  *(_QWORD *)(v35 + 32) = v5;
                  OUTLINED_FUNCTION_404();
                  OUTLINED_FUNCTION_35_11();
                  __asm { BR              X1 }
                }
              }
              __break(1u);
              goto LABEL_31;
            }
            goto LABEL_25;
          }
LABEL_28:
          swift_once();
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_25:
    OUTLINED_FUNCTION_404();
    v37 = *(_QWORD *)(v0 + 560);
    OUTLINED_FUNCTION_55_7();
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_98_3(v37 + 64);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
    OUTLINED_FUNCTION_90_3(v37 + 192);
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 584) = v38;
    *v38 = v0;
    v38[1] = TwoStageSpeculativeDecoder.decodeNextChunk();
    OUTLINED_FUNCTION_35_11();
    DeterministicLanguageModelProtocol.nextTokenLogits(node:presampler:)(v39, v40, v41, v42, v43);
    return;
  }
  if (one-time initialization token for device != -1)
    swift_once();
  v18 = OUTLINED_FUNCTION_15_4();
  __swift_project_value_buffer(v18, (uint64_t)static Log.device);
  v19 = OUTLINED_FUNCTION_77_4();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)OUTLINED_FUNCTION_4_11();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_248CAA000, v19, v20, "Stop token id cannot be 0 when earlyReturn in drafting behavior is set to true", v21, 2u);
    OUTLINED_FUNCTION_0_1();
  }

  _assertionFailure(_:_:file:line:flags:)();
  OUTLINED_FUNCTION_35_11();
}

float TwoStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 296);
  if (v1 < 1)
    return 0.0;
  else
    return OUTLINED_FUNCTION_55_6(v1);
}

uint64_t TwoStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter()
{
  return 0x100000000;
}

float TwoStageSpeculativeDecoder.speculationSuccessRateInPercent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 328);
  if (v1 < 1)
    return 0.0;
  else
    return OUTLINED_FUNCTION_55_6(v1);
}

uint64_t TwoStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  result = v1 - v2;
  if (__OFSUB__(v1, v2))
    __break(1u);
  return result;
}

uint64_t TwoStageSpeculativeDecoder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TwoStageSpeculativeDecoder.__deallocating_deinit()
{
  TwoStageSpeculativeDecoder.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for SamplingDecoder.append(prompt:) in conformance TwoStageSpeculativeDecoder(uint64_t a1, uint64_t a2)
{
  TwoStageSpeculativeDecoder.append(prompt:)(*(TokenGenerationInference::SamplingDecoderPrompt *)&a1);
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TwoStageSpeculativeDecoder()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SamplingDecoder.decodeNextChunk() in conformance TwoStageSpeculativeDecoder;
  return TwoStageSpeculativeDecoder.decodeNextChunk()();
}

uint64_t protocol witness for SamplingDecoder.decodeNextChunk() in conformance TwoStageSpeculativeDecoder(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_6_5();
  v4 = OUTLINED_FUNCTION_75_1();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_10_4(v4, *(uint64_t (**)(void))(v2 + 8));
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.draftTokenAcceptanceRateInPercent.getter in conformance TwoStageSpeculativeDecoder()
{
  return TwoStageSpeculativeDecoder.draftTokenAcceptanceRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.tinyTokenAcceptanceRateInPercent.getter in conformance TwoStageSpeculativeDecoder()
{
  unint64_t v0;

  v0 = TwoStageSpeculativeDecoder.tinyTokenAcceptanceRateInPercent.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

float protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.speculationSuccessRateInPercent.getter in conformance TwoStageSpeculativeDecoder()
{
  return TwoStageSpeculativeDecoder.speculationSuccessRateInPercent.getter();
}

uint64_t protocol witness for SpeculativeDecoderPerformanceLoggingProtocol.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter in conformance TwoStageSpeculativeDecoder()
{
  return TwoStageSpeculativeDecoder.numberOfDraftOutputTokensVsTotalNumberOutputTokens.getter();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)OUTLINED_FUNCTION_2_0();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  OUTLINED_FUNCTION_7_0();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  specialized Array.subscript.read(v6, a2, a3);
  v6[4] = v7;
  OUTLINED_FUNCTION_37();
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void specialized Array.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0);
  if (v6)
    v7 = MEMORY[0x2495A9EB0](a2, a3);
  else
    v7 = OUTLINED_FUNCTION_105_2();
  *a1 = v7;
  OUTLINED_FUNCTION_37();
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_70_8();
  if (v6 != v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v5;
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = v4 - v9;
  if (__OFADD__(v4, v10))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v11 <= *(_QWORD *)(v1 + 24) >> 1)
  {
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v1 = v12;
    if (!v10)
    {
LABEL_14:
      *v2 = v1;
      OUTLINED_FUNCTION_16();
      return;
    }
  }
  v13 = *(_QWORD *)(v1 + 16);
  if (__OFSUB__(v13, v3))
    goto LABEL_20;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v1 + 32 + 8 * v3), v13 - v3, (char *)(v1 + 32 + 8 * v8));
  v14 = *(_QWORD *)(v1 + 16);
  v7 = __OFADD__(v14, v10);
  v15 = v14 + v10;
  if (!v7)
  {
    *(_QWORD *)(v1 + 16) = v15;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_70_8();
  if (v6 != v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = v5;
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = v4 - v9;
  if (__OFADD__(v4, v10))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v11 <= *(_QWORD *)(v1 + 24) >> 1)
  {
    if (!v10)
      goto LABEL_14;
  }
  else
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v1 = v12;
    if (!v10)
    {
LABEL_14:
      *v2 = v1;
      OUTLINED_FUNCTION_16();
      return;
    }
  }
  v13 = *(_QWORD *)(v1 + 16);
  if (__OFSUB__(v13, v3))
    goto LABEL_20;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v1 + 32 + 32 * v3), v13 - v3, (char *)(v1 + 32 + 32 * v8));
  v14 = *(_QWORD *)(v1 + 16);
  v7 = __OFADD__(v14, v10);
  v15 = v14 + v10;
  if (!v7)
  {
    *(_QWORD *)(v1 + 16) = v15;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x24BEB86E8], specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD), uint64_t (*a5)(unint64_t, uint64_t, unint64_t))
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v9 = result;
  v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = result - a2;
  if (__OFSUB__(0, v10))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v8, v11))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v8 - v10 > *(_QWORD *)(v7 + 24) >> 1)
    v7 = a3();
  v14 = *(_QWORD *)(a4(0) - 8);
  v15 = v7 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v15 + v16 * v9;
  result = swift_arrayDestroy();
  if (!v10)
    goto LABEL_13;
  v18 = *(_QWORD *)(v7 + 16);
  if (__OFSUB__(v18, a2))
    goto LABEL_19;
  result = a5(v15 + v16 * a2, v18 - a2, v17);
  v19 = *(_QWORD *)(v7 + 16);
  v20 = __OFADD__(v19, v11);
  v21 = v19 - v10;
  if (!v20)
  {
    *(_QWORD *)(v7 + 16) = v21;
LABEL_13:
    *v5 = v7;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = v10;
    if (!v8)
    {
LABEL_14:
      *v2 = v4;
      return;
    }
  }
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_20;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 32 * a2), v11 - a2, (char *)(v4 + 32 + 32 * a1));
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = v10;
    if (!v8)
    {
LABEL_14:
      *v2 = v4;
      return;
    }
  }
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_20;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 40 * a2), v11 - a2, (char *)(v4 + 32 + 40 * a1));
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

uint64_t specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  int v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v30[2];
  uint64_t v31[5];

  v31[3] = a7;
  v31[4] = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_1, a1, a7);
  v16 = *a3;
  v17 = a3[2];
  LODWORD(a1) = *((_DWORD *)a3 + 6);
  v27 = *((_BYTE *)a3 + 28);
  v28 = *((_BYTE *)a3 + 8);
  v25 = *((_BYTE *)a3 + 30);
  v26 = *((_BYTE *)a3 + 29);
  v23 = *((_BYTE *)a3 + 36);
  v24 = *((_DWORD *)a3 + 8);
  *(_QWORD *)(a6 + 280) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a6 + 344) = 0;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)v31, a6 + 16);
  *(_QWORD *)(a6 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a2, a6 + 64);
  v18 = a2[3];
  v19 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v18);
  *(_QWORD *)(a6 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  *(_QWORD *)(a6 + 112) = v16;
  *(_BYTE *)(a6 + 120) = v28;
  *(_QWORD *)(a6 + 128) = v17;
  *(_DWORD *)(a6 + 136) = a1;
  *(_BYTE *)(a6 + 140) = v27;
  *(_BYTE *)(a6 + 141) = v26;
  *(_BYTE *)(a6 + 142) = v25;
  *(_DWORD *)(a6 + 144) = v24;
  *(_BYTE *)(a6 + 148) = v23;
  *(_QWORD *)(a6 + 272) = v16;
  outlined init with copy of DeterministicLanguageModelProtocol((uint64_t)a4, a6 + 152);
  v20 = a4[3];
  v21 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v20);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v21 + 32))(v30, v20, v21);
  outlined init with take of LogitCollection(v30, a6 + 192);
  type metadata accessor for TopK();
  static TopK.makeTopKPresampler(k:)(v17, a6 + 232);
  *(_QWORD *)(a6 + 336) = a5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return a6;
}

uint64_t type metadata accessor for TwoStageSpeculativeDecoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for TwoStageSpeculativeDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TwoStageSpeculativeDecoder.__allocating_init(draftModel:languageModel:behavior:sampler:stopTokenId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t getEnumTagSinglePayload for TwoStageSpeculativeDecoder.BufferedToken(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TwoStageSpeculativeDecoder.BufferedToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TwoStageSpeculativeDecoder.BufferedToken()
{
  return &unk_2519E1B40;
}

unint64_t lazy protocol witness table accessor for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken;
  if (!lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TwoStageSpeculativeDecoder.BufferedToken, &unk_2519E1B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.BufferedToken and conformance TwoStageSpeculativeDecoder.BufferedToken);
  }
  return result;
}

uint64_t outlined init with take of OnDeviceInferenceSuspendedFetch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OnDeviceInferenceSuspendedFetch(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for TwoStageSpeculativeDecoder.TokenWithNodes()
{
  return &unk_2519E1BC0;
}

unint64_t lazy protocol witness table accessor for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes;
  if (!lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes)
  {
    result = MEMORY[0x2495AAEA0](&protocol conformance descriptor for TwoStageSpeculativeDecoder.TokenWithNodes, &unk_2519E1BC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TwoStageSpeculativeDecoder.TokenWithNodes and conformance TwoStageSpeculativeDecoder.TokenWithNodes);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  uint64_t v0;

  return outlined destroy of LogitPresampler?(v0);
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return specialized TwoStageSpeculativeDecoder.init(draftModel:languageModel:behavior:sampler:stopTokenId:)(v7, v4, v3, v2, v0, v1, v5, v6);
}

uint64_t OUTLINED_FUNCTION_15_12@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

void OUTLINED_FUNCTION_26_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

float *OUTLINED_FUNCTION_31_11(float *result, float a2)
{
  *result = a2;
  return result;
}

void OUTLINED_FUNCTION_45_8()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_46_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v5 + 16) = v1 + 1;
  v6 = (_QWORD *)(v5 + 32 * v1);
  v6[4] = v3;
  v6[5] = v2;
  v6[6] = v4;
}

void OUTLINED_FUNCTION_47_9()
{
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

double OUTLINED_FUNCTION_59_7()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_62_9(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + 608) + 56) + 40 * a1;
}

_QWORD *OUTLINED_FUNCTION_67_7()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = *(_QWORD *)(v1 + 272);
  return v0;
}

void OUTLINED_FUNCTION_68_6()
{
  JUMPOUT(0x2495A9EB0);
}

uint64_t OUTLINED_FUNCTION_69_8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_76_3()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return Logger.logObject.getter();
}

_QWORD *OUTLINED_FUNCTION_82_5()
{
  uint64_t v0;
  _QWORD *v1;

  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

uint64_t OUTLINED_FUNCTION_83_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v5;

  return a5(a1, a2, a3, a4, v5);
}

void OUTLINED_FUNCTION_84_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

BOOL OUTLINED_FUNCTION_88_4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL OUTLINED_FUNCTION_89_5@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_90_3(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of DeterministicLanguageModelProtocol(a1, v1);
}

uint64_t OUTLINED_FUNCTION_91_3()
{
  return static Hasher._hash(seed:_:)();
}

void OUTLINED_FUNCTION_93_5(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 56) = 1;
}

uint64_t OUTLINED_FUNCTION_94_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_95_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_98_5()
{
  JUMPOUT(0x2495A9EB0);
}

ValueMetadata *type metadata accessor for WeightedFiniteStateLanguageModel()
{
  return &type metadata for WeightedFiniteStateLanguageModel;
}

Swift::Int __swiftcall WeightedFiniteStateLanguageModel.node(forPreviousNode:token:isPrompt:)(Swift::Int forPreviousNode, Swift::Int token, Swift::Bool isPrompt)
{
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v4 = *(_QWORD *)(v3 + 16);
  if (v4 > forPreviousNode)
  {
    if (forPreviousNode < 0)
    {
LABEL_9:
      __break(1u);
      return forPreviousNode;
    }
    v5 = *(_QWORD *)(v3 + 8 * forPreviousNode + 32);
    if (*(_QWORD *)(v5 + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(token);
      if ((v7 & 1) != 0)
        return *(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v6);
    }
  }
  forPreviousNode = v4 + 2;
  if (__OFADD__(v4, 2))
  {
    __break(1u);
    goto LABEL_9;
  }
  return forPreviousNode;
}

unint64_t WeightedFiniteStateLanguageModel.FiniteStateLogitCollection.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t result;
  char v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD v11[2];
  unint64_t v12;
  unint64_t v13;

  v3 = OUTLINED_FUNCTION_1_17();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16)
    || (result = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) == 0))
  {
    outlined init with copy of WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(v1, (uint64_t)v5);
    v12 = 0;
    v13 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000015;
    v13 = 0x8000000248D7F670;
    v11[1] = a1;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x206E6920746F6E20;
    v9._object = (void *)0xE800000000000000;
    String.append(_:)(v9);
    OUTLINED_FUNCTION_3_2();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for LogitCollection.indexSet.getter in conformance WeightedFiniteStateLanguageModel.FiniteStateLogitCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = OUTLINED_FUNCTION_3_2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a2;
  v6[4] = a6;
  v6[2] = a1;
  return swift_task_switch();
}

void WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)(v1 + 16) <= v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (next: Int, logit: Float));
    v5 = Dictionary.init(dictionaryLiteral:)();
    v6 = OUTLINED_FUNCTION_1_17();
    *OUTLINED_FUNCTION_2_18(v6, (uint64_t)&protocol witness table for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection) = v5;
    goto LABEL_5;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v1 + 8 * v2 + 32);
    v4 = OUTLINED_FUNCTION_1_17();
    *OUTLINED_FUNCTION_2_18(v4, (uint64_t)&protocol witness table for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection) = v3;
    swift_bridgeObjectRetain();
LABEL_5:
    v7 = swift_bridgeObjectRetain();
    specialized SetAlgebra.init<A>(_:)(v7);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
}

uint64_t protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance WeightedFiniteStateLanguageModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for UnbatchedDeterministicLanguageModelProtocol.singleNextTokenLogits(node:presampler:) in conformance OneTokenHealingPrefixMatchingLanguageModel;
  return WeightedFiniteStateLanguageModel.singleNextTokenLogits(node:presampler:)(a1, a2, v8, v9, v10, v6);
}

Swift::Int protocol witness for DeterministicLanguageModelProtocol.node(forPreviousNode:token:isPrompt:) in conformance WeightedFiniteStateLanguageModel(Swift::Int a1, Swift::Int a2)
{
  return WeightedFiniteStateLanguageModel.node(forPreviousNode:token:isPrompt:)(a1, a2, 0);
}

uint64_t type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection;
  if (!type metadata singleton initialization cache for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for IndexSet();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for IndexSet();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248D6FB74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_3_2();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_248D6FBF0(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_2();
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  return type metadata accessor for WeightedFiniteStateLanguageModel.FiniteStateLogitCollection();
}

uint64_t *OUTLINED_FUNCTION_2_18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::ANEAJAXE5MLModel(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a2;
  v5 = 134218240;
  v6 = v3;
  v7 = 2048;
  v8 = v4;
  _os_log_debug_impl(&dword_248CAA000, log, OS_LOG_TYPE_DEBUG, "Model vocab size: %zu, max context length: %zu", (uint8_t *)&v5, 0x16u);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::prompt()
{
  __assert_rtn("prompt", "ane_ajax_e5ml_model.mm", 429, "!mInDynamicState && \"Inference cannot be run while in dynamic state\"");
}

{
  __assert_rtn("prompt", "ane_ajax_e5ml_model.mm", 428, "mNumTokensProcessed == 0");
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend()
{
  __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 256, "tokens.size() >= startTokenOffset");
}

{
  __assert_rtn("singleExtend", "ane_ajax_e5ml_model.mm", 257, "!mInDynamicState && \"Inference cannot be run while in dynamic state\"");
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::singleExtend(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl(&dword_248CAA000, a2, OS_LOG_TYPE_DEBUG, "Setting ANE request QoS to %u", (uint8_t *)v2, 8u);
}

void cgm::token_generation_inference::ajax::ANEAJAXE5MLModel::reset()
{
  __assert_rtn("reset", "ane_ajax_e5ml_model.mm", 496, "numHoles <= mCacheHoleIndices.size() && \"More holes before reset than exist?\"");
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::switchExtendModule(cgm::token_generation_inference::ajax::AJAXExtendE5MLModule **a1, cgm::token_generation_inference::ajax::AJAXExtendE5MLModule *a2, NSObject *a3)
{
  uint64_t MaxStateLength;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  MaxStateLength = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(*a1);
  v6 = 134218240;
  v7 = MaxStateLength;
  v8 = 2048;
  v9 = cgm::token_generation_inference::ajax::AJAXExtendE5MLModule::getMaxStateLength(a2);
  _os_log_debug_impl(&dword_248CAA000, a3, OS_LOG_TYPE_DEBUG, "Switching extend module from size %zu to size %zu", (uint8_t *)&v6, 0x16u);
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::forward()
{
  __assert_rtn("forward", "enumerated_shape_ajax_e5ml_model.cpp", 191, "mCurExtendModule != nullptr");
}

void cgm::token_generation_inference::ajax::EnumeratedShapeAJAXE5MLModel::clearAllState(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_248CAA000, log, OS_LOG_TYPE_ERROR, "EnumeratedShape model doesn't know how to zero all state. This model is outdated, please use a newer one.", v1, 2u);
}

void cgm::token_generation_inference::ajax::FlexibleShapeAJAXE5MLModel::forward()
{
  __assert_rtn("forward", "flexible_shape_ajax_e5ml_model.cpp", 196, "!mInDynamicState && \"Inference cannot be run while in dynamic state\"");
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::forward()
{
  __assert_rtn("forward", "static_shape_ajax_e5ml_model.cpp", 69, "mExtendModule != nullptr");
}

void cgm::token_generation_inference::ajax::StaticShapeAJAXE5MLModel::clearAllState(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_248CAA000, log, OS_LOG_TYPE_ERROR, "StaticShape model doesn't know how to zero all state. This model is outdated, please use a newer one.", v1, 2u);
}

uint64_t type metadata accessor for BNNS.DataLayout()
{
  return MEMORY[0x24BEDF528]();
}

uint64_t static BNNS.applyActivation(activation:input:output:batchSize:filterParameters:)()
{
  return MEMORY[0x24BEDF6D8]();
}

uint64_t type metadata accessor for BNNS.ActivationFunction()
{
  return MEMORY[0x24BEDF7E8]();
}

uint64_t BNNS.Shape.size.getter()
{
  return MEMORY[0x24BEDFA48]();
}

uint64_t BNNS.Shape.layout.getter()
{
  return MEMORY[0x24BEDFA50]();
}

uint64_t BNNS.Shape.stride.getter()
{
  return MEMORY[0x24BEDFA58]();
}

uint64_t type metadata accessor for BNNS.Shape()
{
  return MEMORY[0x24BEDFA60]();
}

uint64_t BNNS.Shape.init(_:dataLayout:stride:)()
{
  return MEMORY[0x24BEDFA70]();
}

uint64_t static BNNS.applyTopK(k:input:bestValues:bestIndices:axis:batchSize:filterParameters:)()
{
  return MEMORY[0x24BEDFAA0]();
}

uint64_t type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return MEMORY[0x24BDCB1A8]();
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  return MEMORY[0x24BDCB1B0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return MEMORY[0x24BDCF320]();
}

uint64_t IndexSet.init(integersIn:)()
{
  return MEMORY[0x24BDCF338]();
}

uint64_t IndexSet.intersection(_:)()
{
  return MEMORY[0x24BDCF350]();
}

uint64_t IndexSet.makeIterator()()
{
  return MEMORY[0x24BDCF358]();
}

uint64_t IndexSet.count.getter()
{
  return MEMORY[0x24BDCF388]();
}

uint64_t IndexSet.union(_:)()
{
  return MEMORY[0x24BDCF398]();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1;
  Swift::Int v2;
  Swift::tuple_inserted_Bool_memberAfterInsert_Int result;

  v1 = MEMORY[0x24BDCF3B0](a1);
  result.memberAfterInsert = v2;
  result.inserted = v1;
  return result;
}

uint64_t IndexSet.init(integer:)()
{
  return MEMORY[0x24BDCF3C8]();
}

uint64_t IndexSet.isEmpty.getter()
{
  return MEMORY[0x24BDCF3D0]();
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  return MEMORY[0x24BDCF3D8](a1);
}

uint64_t IndexSet.init()()
{
  return MEMORY[0x24BDCF420]();
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x24BDCF428]();
}

uint64_t dispatch thunk of CatalogAssetProtocol.contents.getter()
{
  return MEMORY[0x24BE681E8]();
}

NSNumber __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CatalogClientProtocol.requestCompileResource(identifier:userInitiated:)(Swift::String identifier, Swift::Bool userInitiated)
{
  return (NSNumber)MEMORY[0x24BE68208](identifier._countAndFlagsBits, identifier._object, userInitiated);
}

uint64_t dispatch thunk of CatalogClient.resourceBundle(for:)()
{
  return MEMORY[0x24BE68280]();
}

uint64_t dispatch thunk of CatalogClient.resource(for:)()
{
  return MEMORY[0x24BE68298]();
}

uint64_t CatalogClient.init()()
{
  return MEMORY[0x24BE682B0]();
}

uint64_t type metadata accessor for CatalogClient()
{
  return MEMORY[0x24BE682B8]();
}

uint64_t dispatch thunk of CatalogResource.dependentResourceIDs.getter()
{
  return MEMORY[0x24BE68318]();
}

uint64_t dispatch thunk of CatalogResource.id.getter()
{
  return MEMORY[0x24BE68320]();
}

uint64_t CostProfile.energyEfficientMode.getter()
{
  return MEMORY[0x24BE68370]();
}

uint64_t type metadata accessor for CostProfile()
{
  return MEMORY[0x24BE68378]();
}

uint64_t dispatch thunk of AssetContents.baseURL.getter()
{
  return MEMORY[0x24BE68408]();
}

uint64_t dispatch thunk of ResourceBundle.resources.getter()
{
  return MEMORY[0x24BE68420]();
}

uint64_t dispatch thunk of ManagedResource.cost.getter()
{
  return MEMORY[0x24BE68448]();
}

uint64_t dispatch thunk of AssetBackedResource.fetchAsset()()
{
  return MEMORY[0x24BE68508]();
}

uint64_t Token.init(text:)()
{
  return MEMORY[0x24BEB86D8]();
}

uint64_t Token.text.getter()
{
  return MEMORY[0x24BEB86E0]();
}

uint64_t type metadata accessor for Token()
{
  return MEMORY[0x24BEB86E8]();
}

uint64_t TokenGenerationError.inferenceErrorContext.getter()
{
  return MEMORY[0x24BEB8058]();
}

uint64_t TokenGenerationError.Context.init(debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEB8078]();
}

uint64_t type metadata accessor for TokenGenerationError.Context()
{
  return MEMORY[0x24BEB8080]();
}

uint64_t type metadata accessor for TokenGenerationError()
{
  return MEMORY[0x24BEB8098]();
}

uint64_t type metadata accessor for Constraints()
{
  return MEMORY[0x24BEB80D8]();
}

uint64_t type metadata accessor for FinishReason()
{
  return MEMORY[0x24BEB8130]();
}

uint64_t static Serialization.decode<A>(_:from:)()
{
  return MEMORY[0x24BEB8140]();
}

uint64_t static Serialization.encode<A>(_:)()
{
  return MEMORY[0x24BEB8148]();
}

uint64_t type metadata accessor for RequestPayload()
{
  return MEMORY[0x24BEB8168]();
}

uint64_t ModelInformation.Asset.init(identifier:version:metadata:)()
{
  return MEMORY[0x24BEB8190]();
}

uint64_t type metadata accessor for ModelInformation.Asset()
{
  return MEMORY[0x24BEB8198]();
}

uint64_t ModelInformation.init(assets:systemVersion:)()
{
  return MEMORY[0x24BEB81A8]();
}

uint64_t type metadata accessor for ModelInformation()
{
  return MEMORY[0x24BEB81B8]();
}

uint64_t static PromptCompletion.collecting<A>(events:)()
{
  return MEMORY[0x24BEB81F8]();
}

uint64_t type metadata accessor for PromptCompletion()
{
  return MEMORY[0x24BEB8298]();
}

uint64_t type metadata accessor for SamplingStrategy.Choice()
{
  return MEMORY[0x24BEB82D0]();
}

uint64_t SamplingStrategy.choice.getter()
{
  return MEMORY[0x24BEB82E8]();
}

uint64_t type metadata accessor for SamplingStrategy()
{
  return MEMORY[0x24BEB82F0]();
}

uint64_t CountTokensRequest.prompt.getter()
{
  return MEMORY[0x24BEB8300]();
}

uint64_t type metadata accessor for CountTokensRequest()
{
  return MEMORY[0x24BEB8308]();
}

uint64_t SamplingParameters.randomSeed.getter()
{
  return MEMORY[0x24BEB8318]();
}

uint64_t SamplingParameters.temperature.getter()
{
  return MEMORY[0x24BEB8320]();
}

uint64_t SamplingParameters.tokenHealing.getter()
{
  return MEMORY[0x24BEB8328]();
}

uint64_t SamplingParameters.maximumTokens.getter()
{
  return MEMORY[0x24BEB8340]();
}

uint64_t SamplingParameters.stopSequences.getter()
{
  return MEMORY[0x24BEB8350]();
}

uint64_t SamplingParameters.promptLookupDraftSteps.getter()
{
  return MEMORY[0x24BEB8360]();
}

uint64_t SamplingParameters.strategy.getter()
{
  return MEMORY[0x24BEB8380]();
}

uint64_t type metadata accessor for SamplingParameters()
{
  return MEMORY[0x24BEB8388]();
}

uint64_t CountTokensResponse.init(count:renderedPrompt:)()
{
  return MEMORY[0x24BEB83C0]();
}

uint64_t CountTokensResponse.count.getter()
{
  return MEMORY[0x24BEB83C8]();
}

uint64_t type metadata accessor for CountTokensResponse()
{
  return MEMORY[0x24BEB83D0]();
}

uint64_t CompletePromptRequest.parameters.getter()
{
  return MEMORY[0x24BEB8438]();
}

uint64_t CompletePromptRequest.constraints.getter()
{
  return MEMORY[0x24BEB8440]();
}

uint64_t CompletePromptRequest.prompt.getter()
{
  return MEMORY[0x24BEB8448]();
}

uint64_t type metadata accessor for CompletePromptRequest()
{
  return MEMORY[0x24BEB8450]();
}

uint64_t CompletePromptResponse.init(completion:)()
{
  return MEMORY[0x24BEB8460]();
}

uint64_t type metadata accessor for CompletePromptResponse()
{
  return MEMORY[0x24BEB8468]();
}

uint64_t type metadata accessor for StreamingRequestPayload()
{
  return MEMORY[0x24BEB84B0]();
}

uint64_t PromptCompletionEventUsage.init(responseIdentifier:usage:)()
{
  return MEMORY[0x24BEB84F0]();
}

uint64_t type metadata accessor for PromptCompletionEventUsage()
{
  return MEMORY[0x24BEB8500]();
}

uint64_t type metadata accessor for CompletePromptResponseElement()
{
  return MEMORY[0x24BEB8508]();
}

uint64_t CompletePromptResponseElement.init(_:)()
{
  return MEMORY[0x24BEB8518]();
}

uint64_t PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)()
{
  return MEMORY[0x24BEB8548]();
}

uint64_t type metadata accessor for PromptCompletionEventModelInformation()
{
  return MEMORY[0x24BEB8558]();
}

uint64_t PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)()
{
  return MEMORY[0x24BEB8588]();
}

uint64_t type metadata accessor for PromptCompletionEventCandidateFinished()
{
  return MEMORY[0x24BEB8598]();
}

uint64_t PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)()
{
  return MEMORY[0x24BEB85A0]();
}

uint64_t type metadata accessor for PromptCompletionEventCandidateTextDelta()
{
  return MEMORY[0x24BEB85B0]();
}

uint64_t Usage.init(promptTokenCount:completionTokenCount:)()
{
  return MEMORY[0x24BEB85C0]();
}

uint64_t type metadata accessor for Usage()
{
  return MEMORY[0x24BEB85C8]();
}

uint64_t Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)()
{
  return MEMORY[0x24BEB8708]();
}

uint64_t static Prompt.SpecialToken.endPrompt.getter()
{
  return MEMORY[0x24BEB8710]();
}

uint64_t Prompt.SpecialToken.init(identifier:)()
{
  return MEMORY[0x24BEB8720]();
}

uint64_t type metadata accessor for Prompt.SpecialToken()
{
  return MEMORY[0x24BEB87B8]();
}

uint64_t Prompt.RenderedPromptFragment.text.getter()
{
  return MEMORY[0x24BEB87D8]();
}

uint64_t type metadata accessor for Prompt.RenderedPromptFragment()
{
  return MEMORY[0x24BEB87E0]();
}

uint64_t Prompt.renderPromptModules(tokenTable:)()
{
  return MEMORY[0x24BEB87E8]();
}

uint64_t Prompt.description.getter()
{
  return MEMORY[0x24BEB8838]();
}

uint64_t Prompt.Rendering.Source.init(identifier:version:)()
{
  return MEMORY[0x24BEB8950]();
}

uint64_t type metadata accessor for Prompt.Rendering.Source()
{
  return MEMORY[0x24BEB8968]();
}

uint64_t Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:)()
{
  return MEMORY[0x24BEB8970]();
}

uint64_t type metadata accessor for Prompt.Rendering()
{
  return MEMORY[0x24BEB8998]();
}

uint64_t type metadata accessor for Prompt()
{
  return MEMORY[0x24BEB89B8]();
}

uint64_t GuidedGenerationConstraints.generateNextLogitMask(from:)()
{
  return MEMORY[0x24BEB89D8]();
}

uint64_t GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)()
{
  return MEMORY[0x24BEB89E8]();
}

uint64_t type metadata accessor for GuidedGenerationConstraints()
{
  return MEMORY[0x24BEB89F0]();
}

uint64_t type metadata accessor for GuidedGenerationError()
{
  return MEMORY[0x24BEB8A08]();
}

uint64_t TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)()
{
  return MEMORY[0x24BEB8A10]();
}

uint64_t type metadata accessor for TokenIDToTextConverter()
{
  return MEMORY[0x24BEB8A20]();
}

uint64_t dispatch thunk of TokenIDToTextConverterProtocol.text.getter()
{
  return MEMORY[0x24BEB8A30]();
}

uint64_t TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)()
{
  return MEMORY[0x24BEB8A38]();
}

uint64_t Overridable.wrappedValue.getter()
{
  return MEMORY[0x24BEB8A40]();
}

uint64_t Overridable<A>.init(key:)()
{
  return MEMORY[0x24BEB8A48]();
}

{
  return MEMORY[0x24BEB8A50]();
}

{
  return MEMORY[0x24BEB8A58]();
}

{
  return MEMORY[0x24BEB8A60]();
}

uint64_t type metadata accessor for Overridable()
{
  return MEMORY[0x24BEB8A68]();
}

uint64_t dispatch thunk of TokenizerRunner.prefixTokenIDs(forPrefix:)()
{
  return MEMORY[0x24BEB8AA8]();
}

uint64_t dispatch thunk of TokenizerRunner.longestTokenLength.getter()
{
  return MEMORY[0x24BEB8AB0]();
}

uint64_t dispatch thunk of TokenizerRunner.detokenize(_:)()
{
  return MEMORY[0x24BEB8AB8]();
}

uint64_t TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)()
{
  return MEMORY[0x24BEB8AC0]();
}

uint64_t TokenizerRunner.init(tokenizerPath:)()
{
  return MEMORY[0x24BEB8AC8]();
}

uint64_t dispatch thunk of TokenizerRunner.vocabularyCount.getter()
{
  return MEMORY[0x24BEB8AD0]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenizePromptModules(promptModules:tokenTable:)()
{
  return MEMORY[0x24BEB8AD8]();
}

uint64_t static TokenizerRunner.== infix(_:_:)()
{
  return MEMORY[0x24BEB8AE0]();
}

uint64_t dispatch thunk of TokenizerRunner.text(forTokenID:)()
{
  return MEMORY[0x24BEB8AE8]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenID(forText:)()
{
  return MEMORY[0x24BEB8AF0]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenIDs(forRawPrefix:)()
{
  return MEMORY[0x24BEB8AF8]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenIDs(forDecodedPrefix:)()
{
  return MEMORY[0x24BEB8B00]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)()
{
  return MEMORY[0x24BEB8B08]();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(_:)()
{
  return MEMORY[0x24BEB8B10]();
}

uint64_t type metadata accessor for TokenizerRunner()
{
  return MEMORY[0x24BEB8B18]();
}

uint64_t type metadata accessor for LogitMaskResponse()
{
  return MEMORY[0x24BEB8B38]();
}

uint64_t StopSequenceMonitor.init(stopSequences:)()
{
  return MEMORY[0x24BEB8B90]();
}

Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional __swiftcall StopSequenceMonitor.handleOutputTokens(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional result;

  v1 = (void *)MEMORY[0x24BEB8B98](a1._rawValue);
  result.stopSequence.value._object = v3;
  result.stopSequence.value._countAndFlagsBits = v2;
  result.tokens._rawValue = v1;
  return result;
}

uint64_t StopSequenceMonitor.currentBufferedTokens()()
{
  return MEMORY[0x24BEB8BA0]();
}

uint64_t type metadata accessor for StopSequenceMonitor()
{
  return MEMORY[0x24BEB8BA8]();
}

uint64_t Grammar.init(backusNaurForm:prependSpaceToRootRule:)()
{
  return MEMORY[0x24BEB8C40]();
}

uint64_t Grammar.init(schema:)()
{
  return MEMORY[0x24BEB8C48]();
}

uint64_t type metadata accessor for Grammar()
{
  return MEMORY[0x24BEB8C50]();
}

uint64_t AuditToken.realUserIdentifier.getter()
{
  return MEMORY[0x24BE688E0]();
}

uint64_t type metadata accessor for AuditToken()
{
  return MEMORY[0x24BE688F0]();
}

uint64_t InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)()
{
  return MEMORY[0x24BE689A8]();
}

uint64_t type metadata accessor for InferenceError.Context()
{
  return MEMORY[0x24BE689C8]();
}

uint64_t type metadata accessor for InferenceError()
{
  return MEMORY[0x24BE689F0]();
}

uint64_t InferenceProvider.cancelRequest(uuid:)()
{
  return MEMORY[0x24BE68AC8]();
}

uint64_t InferenceProvider.requestStream(clientData:configuration:)()
{
  return MEMORY[0x24BE68AE0]();
}

uint64_t InferenceProvider.requestOneShot(clientData:configuration:)()
{
  return MEMORY[0x24BE68AF8]();
}

uint64_t InferenceProvider.loadIn(inferenceAssetIdentifier:)()
{
  return MEMORY[0x24BE68B18]();
}

uint64_t InferenceProvider.loadOut(inferenceAssetIdentifier:)()
{
  return MEMORY[0x24BE68B28]();
}

uint64_t InferenceProviderRequestConfiguration.auditToken.getter()
{
  return MEMORY[0x24BE68B80]();
}

uint64_t InferenceProviderRequestConfiguration.requestUUID.getter()
{
  return MEMORY[0x24BE68B88]();
}

uint64_t InferenceProviderRequestConfiguration.sessionUUID.getter()
{
  return MEMORY[0x24BE68B90]();
}

uint64_t InferenceProviderRequestConfiguration.assetIdentifiers.getter()
{
  return MEMORY[0x24BE68BA0]();
}

uint64_t InferenceProviderRequestConfiguration.assetBundleIdentifier.getter()
{
  return MEMORY[0x24BE68BB0]();
}

uint64_t type metadata accessor for InferenceProviderRequestConfiguration()
{
  return MEMORY[0x24BE68BB8]();
}

uint64_t LoadState.rawValue.getter()
{
  return MEMORY[0x24BE68C90]();
}

uint64_t type metadata accessor for LoadState()
{
  return MEMORY[0x24BE68CA0]();
}

uint64_t type metadata accessor for GenerativeExperiencesTransparencyLog.ExecutionEnvironment()
{
  return MEMORY[0x24BE59D78]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.Identifiers.catalogResourceIdentifier.setter()
{
  return MEMORY[0x24BE5A2C0]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.Identifiers()
{
  return MEMORY[0x24BE5A350]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.identifiers.setter()
{
  return MEMORY[0x24BE5A380]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.identifier.setter()
{
  return MEMORY[0x24BE5A3C0]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion.version.setter()
{
  return MEMORY[0x24BE5A3D0]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent.CatalogResourceIdentifierAndVersion()
{
  return MEMORY[0x24BE5A3E0]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.metadata.setter()
{
  return MEMORY[0x24BE5A4D0]();
}

uint64_t GenerativeFunctionsInstrumentationEvent.eventType.setter()
{
  return MEMORY[0x24BE5A4E8]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationEvent()
{
  return MEMORY[0x24BE5A510]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.totalPages.setter()
{
  return MEMORY[0x24BE5A560]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentPages.setter()
{
  return MEMORY[0x24BE5A568]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo.residentRatio.setter()
{
  return MEMORY[0x24BE5A578]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition.FileResidentInfo()
{
  return MEMORY[0x24BE5A588]();
}

uint64_t GenerativeFunctionsInstrumentationMetadata.AssetTransition.fileResidentInfo.setter()
{
  return MEMORY[0x24BE5A5A0]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.AssetTransition()
{
  return MEMORY[0x24BE5A738]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata.TGIExecuteRequest.ErrorType()
{
  return MEMORY[0x24BE5A990]();
}

uint64_t type metadata accessor for GenerativeFunctionsInstrumentationMetadata()
{
  return MEMORY[0x24BE5B128]();
}

uint64_t static Buildable.with(_:)()
{
  return MEMORY[0x24BE5B1C8]();
}

uint64_t type metadata accessor for GenerationSchema.StringConstraint()
{
  return MEMORY[0x24BE3B5A0]();
}

uint64_t type metadata accessor for GenerationSchema()
{
  return MEMORY[0x24BE3B648]();
}

uint64_t Schema.init(type:)()
{
  return MEMORY[0x24BE3B970]();
}

uint64_t type metadata accessor for Schema()
{
  return MEMORY[0x24BE3B9A0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t type metadata accessor for Instrumenter()
{
  return MEMORY[0x24BE3BBE8]();
}

uint64_t EventReporter.send(eventBuiltWithPresetsAnd:)()
{
  return MEMORY[0x24BE3BBF0]();
}

uint64_t EventReporter.init()()
{
  return MEMORY[0x24BE3BBF8]();
}

uint64_t type metadata accessor for EventReporter()
{
  return MEMORY[0x24BE3BC00]();
}

uint64_t TransparencyReport.logEvent(configuration:prompt:response:model:modelVersion:executionEnvironment:)()
{
  return MEMORY[0x24BE3BC40]();
}

uint64_t TransparencyReport.init()()
{
  return MEMORY[0x24BE3BC48]();
}

uint64_t type metadata accessor for TransparencyReport()
{
  return MEMORY[0x24BE3BC50]();
}

uint64_t InstrumenterFinalizer.init()()
{
  return MEMORY[0x24BE3BC60]();
}

uint64_t type metadata accessor for InstrumenterFinalizer()
{
  return MEMORY[0x24BE3BC68]();
}

uint64_t ExtendInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)()
{
  return MEMORY[0x24BE3BCA0]();
}

uint64_t ExtendInferenceInstrumenter.outputTokensCount.setter()
{
  return MEMORY[0x24BE3BCA8]();
}

uint64_t type metadata accessor for ExtendInferenceInstrumenter()
{
  return MEMORY[0x24BE3BCB8]();
}

uint64_t PromptProcessingInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)()
{
  return MEMORY[0x24BE3BCC8]();
}

uint64_t PromptProcessingInstrumenter.inputTokensCount.setter()
{
  return MEMORY[0x24BE3BCD0]();
}

uint64_t PromptProcessingInstrumenter.errorType.setter()
{
  return MEMORY[0x24BE3BCD8]();
}

uint64_t type metadata accessor for PromptProcessingInstrumenter()
{
  return MEMORY[0x24BE3BCE0]();
}

uint64_t dispatch thunk of InstrumenterFinalizerProtocol.end(instrumenter:)()
{
  return MEMORY[0x24BE3BD10]();
}

uint64_t FirstTokenInferenceInstrumenter.init(signpostLogger:requestIdentifier:onBehalfOfUserIdentifier:)()
{
  return MEMORY[0x24BE3BD18]();
}

uint64_t type metadata accessor for FirstTokenInferenceInstrumenter()
{
  return MEMORY[0x24BE3BD28]();
}

uint64_t CompletePromptRequestInstrumenter.init(signpostLogger:requestIdentifier:oneshot:onBehalfOfUserIdentifier:)()
{
  return MEMORY[0x24BE3BD40]();
}

uint64_t CompletePromptRequestInstrumenter.inputTokensCount.setter()
{
  return MEMORY[0x24BE3BD48]();
}

uint64_t CompletePromptRequestInstrumenter.outputTokensCount.setter()
{
  return MEMORY[0x24BE3BD50]();
}

uint64_t CompletePromptRequestInstrumenter.speculativeDecoderStats.setter()
{
  return MEMORY[0x24BE3BD58]();
}

uint64_t CompletePromptRequestInstrumenter.prefixKVCacheTokensMatchCount.setter()
{
  return MEMORY[0x24BE3BD60]();
}

uint64_t CompletePromptRequestInstrumenter.promptModulesKVCacheTokensMatchCount.setter()
{
  return MEMORY[0x24BE3BD68]();
}

uint64_t CompletePromptRequestInstrumenter.errorType.setter()
{
  return MEMORY[0x24BE3BD78]();
}

uint64_t type metadata accessor for CompletePromptRequestInstrumenter()
{
  return MEMORY[0x24BE3BD80]();
}

uint64_t static BinaryFloatingPoint<>.random<A>(in:using:)()
{
  return MEMORY[0x24BEE0230]();
}

{
  return MEMORY[0x24BEE0238]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x24BEE06A0]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x24BEE0760]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return MEMORY[0x24BDCF870]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.debugDescription.getter()
{
  return MEMORY[0x24BEE0A78]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return MEMORY[0x24BEE0E00]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t Array.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE11B0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t AsyncThrowingStream.Iterator.next()()
{
  return MEMORY[0x24BEE6CF8]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Iterator()
{
  return MEMORY[0x24BEE6D08]();
}

uint64_t AsyncThrowingStream.init<>(unfolding:)()
{
  return MEMORY[0x24BEE6D20]();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return MEMORY[0x24BEE6D28]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t static Float.bnnsDataType.getter()
{
  return MEMORY[0x24BEDFD30]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x24BEE14C8]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F0](BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x24BEE1DA8]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x24BEE1DF0]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x24BEE1E50]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t ArraySlice.description.getter()
{
  return MEMORY[0x24BEE2118]();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return MEMORY[0x24BEE2238]();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return MEMORY[0x24BEE22B8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x24BEE22D8]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x24BEE24F0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x24BEE2E58](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  MEMORY[0x24BEE2E68]();
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x24BEE2E70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32E0]();
}

{
  return MEMORY[0x24BEE32F0]();
}

{
  return MEMORY[0x24BEE32F8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3360]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3440]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B0]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t AsyncThrowingMapSequence.init(_:transform:)()
{
  return MEMORY[0x24BEE7088]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x24BEE3A58]();
}

{
  return MEMORY[0x24BEE3A78]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Clock.measure(_:)()
{
  return MEMORY[0x24BEE7130]();
}

{
  return MEMORY[0x24BEE7138]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t static Int32.bnnsDataType.getter()
{
  return MEMORY[0x24BEDFE20]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x24BEE45E8]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x24BEE4828]();
}

uint64_t static Duration.+= infix(_:_:)()
{
  return MEMORY[0x24BEE4888]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x24BEE4898]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t E5RT_Private::GetMaxPortDescriptor()
{
  return MEMORY[0x24BE2F3E0]();
}

uint64_t E5RT_Private::SetMaxPortDescriptor()
{
  return MEMORY[0x24BE2F3E8]();
}

uint64_t E5RT_Private::SetANEExecutionPriorityForStream()
{
  return MEMORY[0x24BE2F3F0]();
}

uint64_t E5RT::E5Compiler::MakeCompiler()
{
  return MEMORY[0x24BE2F400]();
}

uint64_t E5RT::E5Compiler::IsNewCompileRequired()
{
  return MEMORY[0x24BE2F408]();
}

uint64_t E5RT::E5Compiler::Compile()
{
  return MEMORY[0x24BE2F410]();
}

uint64_t E5RT::BufferObject::AllocMemory()
{
  return MEMORY[0x24BE2F418]();
}

uint64_t E5RT::BufferObject::GetDataSpan(E5RT::BufferObject *this)
{
  return MEMORY[0x24BE2F420](this);
}

uint64_t E5RT::MemoryObject::TryAsBuffer(E5RT::MemoryObject *this)
{
  return MEMORY[0x24BE2F438](this);
}

uint64_t E5RT::MemoryObject::Buffer(E5RT::MemoryObject *this)
{
  return MEMORY[0x24BE2F440](this);
}

uint64_t E5RT::ExecuteOptions::SetExecutionIdentifier()
{
  return MEMORY[0x24BE2F450]();
}

uint64_t E5RT::ExecuteOptions::SetEnableResourceTelemetry(E5RT::ExecuteOptions *this)
{
  return MEMORY[0x24BE2F458](this);
}

uint64_t E5RT::ExecuteOptions::Create(E5RT::ExecuteOptions *this)
{
  return MEMORY[0x24BE2F460](this);
}

uint64_t E5RT::ProgramLibrary::OpenLibrary()
{
  return MEMORY[0x24BE2F468]();
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return MEMORY[0x24BE2F470](this);
}

uint64_t E5RT::TensorDataType::TensorDataType()
{
  return MEMORY[0x24BE2F478]();
}

{
  return MEMORY[0x24BE2F480]();
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
  MEMORY[0x24BE2F488](this);
}

uint64_t E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F490](this);
}

uint64_t E5RT::ExecutionStream::EncodeOperation()
{
  return MEMORY[0x24BE2F498]();
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this, const E5RT::ExecuteOptions *a2)
{
  return MEMORY[0x24BE2F4A0](this, a2);
}

uint64_t E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F4A8](this);
}

uint64_t E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F4B0](this);
}

uint64_t E5RT::ExecutionStream::PreWireInUseAllocations(E5RT::ExecutionStream *this)
{
  return MEMORY[0x24BE2F4B8](this);
}

uint64_t E5RT::TensorDescriptor::CreateTensorDesc()
{
  return MEMORY[0x24BE2F4C8]();
}

uint64_t E5RT::E5CompilerOptions::SetMilEntryPoints()
{
  return MEMORY[0x24BE2F4D0]();
}

uint64_t E5RT::E5CompilerOptions::SetCustomAneCompilerOptions()
{
  return MEMORY[0x24BE2F4E8]();
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed()
{
  return MEMORY[0x24BE2F4F0]();
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x24BE2F4F8](this);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x24BE2F500](this);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x24BE2F508](this);
}

uint64_t E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
  return MEMORY[0x24BE2F510](this);
}

uint64_t E5RT::E5CompilerConfigOptions::SetBundleCacheLocation()
{
  return MEMORY[0x24BE2F518]();
}

uint64_t E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  return MEMORY[0x24BE2F520](this);
}

void E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  MEMORY[0x24BE2F528](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPortRef()
{
  return MEMORY[0x24BE2F530]();
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPortRef()
{
  return MEMORY[0x24BE2F538]();
}

{
  return MEMORY[0x24BE2F6B8]();
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPortRef()
{
  return MEMORY[0x24BE2F540]();
}

uint64_t E5RT::ExecutionStreamOperation::ReshapeOperation()
{
  return MEMORY[0x24BE2F548]();
}

uint64_t E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp()
{
  return MEMORY[0x24BE2F550]();
}

uint64_t E5RT::ExecutionStreamOperation::SerializeInferenceFrameData()
{
  return MEMORY[0x24BE2F560]();
}

uint64_t E5RT::ExecutionStreamOperation::CreateResourceSharingPreCompiledComputeOps()
{
  return MEMORY[0x24BE2F568]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths()
{
  return MEMORY[0x24BE2F578]();
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x24BE2F588](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x24BE2F590](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return MEMORY[0x24BE2F598](this);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::Create()
{
  return MEMORY[0x24BE2F5A0]();
}

{
  return MEMORY[0x24BE2F5A8]();
}

uint64_t E5RT::IOPort::GetMemoryObject(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F5B0](this);
}

{
  return MEMORY[0x24BE2F6C0](this);
}

uint64_t E5RT::IOPort::BindMemoryObject()
{
  return MEMORY[0x24BE2F5B8]();
}

uint64_t E5RT::IOPort::GetMemoryObjectRef(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F5C0](this);
}

uint64_t E5RT::operator!=()
{
  return MEMORY[0x24BE2F5C8]();
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F610](this);
}

uint64_t E5RT::TensorDataType::GetNumComponents(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F618](this);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return MEMORY[0x24BE2F620](this);
}

uint64_t E5RT::TensorDescriptor::AllocateMemory()
{
  return MEMORY[0x24BE2F628]();
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F630](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F638](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F640](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F648](this);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataTypeRef(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F650](this);
}

uint64_t E5RT::TensorDescriptor::GetRank(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F658](this);
}

uint64_t E5RT::TensorDescriptor::GetSize(E5RT::TensorDescriptor *this)
{
  return MEMORY[0x24BE2F660](this);
}

uint64_t E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x24BE2F668](this);
}

uint64_t E5RT::OperandDescriptor::TryAsTensorDescriptor(E5RT::OperandDescriptor *this)
{
  return MEMORY[0x24BE2F678](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x24BE2F6A0](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x24BE2F6A8](this);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperation *this)
{
  return MEMORY[0x24BE2F6B0](this);
}

uint64_t E5RT::IOPort::GetPortDescriptor(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F6C8](this);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F6D0](this);
}

uint64_t E5RT::IOPort::IsDynamic(E5RT::IOPort *this)
{
  return MEMORY[0x24BE2F6D8](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA08](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF58]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E8](retstr, a2, __ec);
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x24BEDB3B0]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x24BEDB5A0](this, a2, a3, a4);
}

{
  return MEMORY[0x24BEDB5B8](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x24BEDB5A8]();
}

{
  return MEMORY[0x24BEDB5B0]();
}

{
  return MEMORY[0x24BEDB5C0]();
}

{
  return MEMORY[0x24BEDB5C8]();
}

{
  return MEMORY[0x24BEDB5D8]();
}

{
  return MEMORY[0x24BEDB5E0]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x24BEDB5D0](this, a2, a3, a4);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_2519DD790();
}

void operator delete(void *__p)
{
  off_2519DD798(__p);
}

uint64_t operator delete()
{
  return off_2519DD7A0();
}

uint64_t operator new[]()
{
  return off_2519DD7A8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2519DD7B0(__sz);
}

uint64_t operator new()
{
  return off_2519DD7B8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t __udivti3()
{
  return MEMORY[0x24BDAC940]();
}

uint64_t __umodti3()
{
  return MEMORY[0x24BDAC958]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x24BDAEEB8](__b, __pattern4, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x24BEDD010](dest, src, copyHelper);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3E0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x24BDAF408](log);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x24BDAF458](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

uint64_t sendAneSessionSignal()
{
  return MEMORY[0x24BDFD200]();
}

uint64_t sendAneSignal()
{
  return MEMORY[0x24BDFD208]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x24BEE4C20]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3220](__A, __IA, __C, __N);
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
  MEMORY[0x24BDB3230](__A, __IA, __C, __I, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32D0](__A, __I, __C, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34C0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsorti(const float *__C, vDSP_Length *__I, vDSP_Length *__Temporary, vDSP_Length __N, int __Order)
{
  MEMORY[0x24BDB3510](__C, __I, __Temporary, __N, *(_QWORD *)&__Order);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3730](src, dest, *(_QWORD *)&flags);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B30](a1, a2, a3);
}

