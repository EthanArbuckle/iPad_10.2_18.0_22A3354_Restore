uint64_t key path getter for NearbyInvitationServiceClient.delegate : NearbyInvitationServiceClient@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for NearbyInvitationServiceClient.delegate : NearbyInvitationServiceClient(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t NearbyInvitationServiceClient.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  return MEMORY[0x2494EAA04](v1);
}

uint64_t NearbyInvitationServiceClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*NearbyInvitationServiceClient.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for NearbyInvitationServiceClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x2494EAA04](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return NearbyInvitationServiceClient.delegate.modify;
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceClient()), sel_init);
  static NearbyInvitationServiceClient.shared = (uint64_t)result;
  return result;
}

id NearbyInvitationServiceClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t *NearbyInvitationServiceClient.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static NearbyInvitationServiceClient.shared;
}

id static NearbyInvitationServiceClient.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static NearbyInvitationServiceClient.shared;
}

id NearbyInvitationServiceClient.init()()
{
  char *v0;
  objc_class *ObjectType;
  id v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[direct field offset for NearbyInvitationServiceClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  v2 = objc_msgSendSuper2(&v4, sel_init);
  dispatch thunk of XPCClient.connectionClosure.setter();

  return v2;
}

id closure #1 in NearbyInvitationServiceClient.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v11;

  v0 = type metadata accessor for MachServiceName();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BE19EC0], v0);
  v4 = MachServiceName.rawValue.getter();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = objc_allocWithZone(MEMORY[0x24BDD1988]);
  v8 = (void *)MEMORY[0x2494E9EDC](v4, v6);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithServiceName_, v8);

  return v9;
}

id @objc NearbyInvitationServiceClient.init()(char *a1)
{
  objc_class *ObjectType;
  id v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&a1[direct field offset for NearbyInvitationServiceClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v5.receiver = a1;
  v5.super_class = ObjectType;
  v3 = objc_msgSendSuper2(&v5, sel_init);
  dispatch thunk of XPCClient.connectionClosure.setter();

  return v3;
}

Swift::Void __swiftcall NearbyInvitationServiceClient.handleServerDisconnect()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = XPCClient.queue.getter();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v5 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v6 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
    swift_beginAccess();
    if (MEMORY[0x2494EAA04](v6))
    {
      v7 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v7 + 16))(v0, &protocol witness table for NearbyInvitationServiceClient, ObjectType, v7);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FAA8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:), (uint64_t)&block_descriptor);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

{
  uint64_t v0;

  return closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t aBlock[6];
  uint64_t v24;

  v7 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a2;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v21 = a3;
    v13 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315650;
    aBlock[0] = v13;
    v14 = _typeName(_:qualified:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000002429DC130, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    v24 = (uint64_t)v9;
    type metadata accessor for NearbyGroupCreationRequest(0);
    v16 = v9;
    v17 = String.init<A>(reflecting:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    v19 = v13;
    a3 = v21;
    MEMORY[0x2494EA95C](v19, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_177;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_createGroupWith_response_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, void *a2, uint64_t (*a3)(_QWORD, void *))
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = a2;
  v8 = a1;
  v9 = v7;
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21 = v20;
    *(_DWORD *)v13 = 138412546;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v9;

    *(_WORD *)(v13 + 12) = 2080;
    v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v11, v12, "Failed createGroup(with: %@), error: %s", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v20, -1, -1);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }
  else
  {

  }
  return a3(0, a1);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2494EA890]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2494EA89C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FAF8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:), (uint64_t)&block_descriptor_6);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t aBlock[6];
  uint64_t v24;

  v7 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a2;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v21 = a3;
    v13 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315650;
    aBlock[0] = v13;
    v14 = _typeName(_:qualified:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000002429DC0B0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    v24 = (uint64_t)v9;
    type metadata accessor for InvitationApprovalRequest();
    v16 = v9;
    v17 = String.init<A>(reflecting:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    v19 = v13;
    a3 = v21;
    MEMORY[0x2494EA95C](v19, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_171;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_requestApprovalWith_completion_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1, void *a2, uint64_t (*a3)(_QWORD, void *))
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = a2;
  v8 = a1;
  v9 = v7;
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136315394;
    type metadata accessor for InvitationApprovalRequest();
    v15 = v9;
    v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v19 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v11, v12, "Failed requestApproval(with: %s), error: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }
  else
  {

  }
  return a3(0, a1);
}

uint64_t NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_25136FB48, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:), (uint64_t)&block_descriptor_12);
}

uint64_t closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  id v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a5;
  v9 = a2;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t aBlock[6];
  uint64_t v26;

  v8 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = a2;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v22 = a5;
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315650;
    v15 = _typeName(_:qualified:)();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    v23 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000002429DC030, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    v26 = (uint64_t)v10;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    v17 = v10;
    v18 = String.init<A>(reflecting:)();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v8 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v11, v12, "%s %s %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    v20 = v13;
    a5 = v22;
    MEMORY[0x2494EA95C](v20, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_165;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_approveWithPendingMember_response_completion_, v10, a3, v21);
  _Block_release(v21);
}

uint64_t NearbyInvitationServiceClient.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FB98, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:), (uint64_t)&block_descriptor_18);
}

uint64_t closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  id v8;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
  v8 = a2;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t aBlock[6];
  uint64_t v24;

  v7 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a2;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v21 = a3;
    v13 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315650;
    aBlock[0] = v13;
    v14 = _typeName(_:qualified:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000002429DC000, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    v24 = (uint64_t)v9;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    v16 = v9;
    v17 = String.init<A>(reflecting:)();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    v19 = v13;
    a3 = v21;
    MEMORY[0x2494EA95C](v19, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_159;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_rejectWithPendingMember_completion_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t (*a3)(void *), uint64_t a4, const char *a5)
{
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;

  if (one-time initialization token for client != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = a2;
  v11 = a1;
  v12 = v10;
  v13 = a1;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v25 = v17;
    *(_DWORD *)v16 = 136315394;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    v18 = v12;
    v19 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v21 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v14, v15, a5, (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v17, -1, -1);
    MEMORY[0x2494EA95C](v16, -1, -1);
  }
  else
  {

  }
  return a3(a1);
}

uint64_t NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, a2, a3, (uint64_t)&unk_25136FBE8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:), (uint64_t)&block_descriptor_24);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t aBlock[6];
  uint64_t v17;

  v6 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v10 = 136315394;
    v11 = _typeName(_:qualified:)();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002429DBFD0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v8, v9, "%s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    MEMORY[0x2494EA95C](v10, -1, -1);
  }

  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_153;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_generateNearbyInvitationWithProvider_response_, a2, v13);
  _Block_release(v13);
}

uint64_t NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  ObjectType = swift_getObjectType();
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v13 - 8);
  v23 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)XPCClient.queue.getter();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v4;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  v17[7] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_30;
  v18 = _Block_copy(aBlock);
  v19 = v4;
  v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
  return swift_release();
}

uint64_t sub_242984DA4()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock[6];
  uint64_t v25;

  v9 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = a2;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v23 = a5;
    v14 = swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)v14 = 136315650;
    v15 = _typeName(_:qualified:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002429DBF50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2112;
    v25 = (uint64_t)v11;
    v17 = a4;
    v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v11;

    a4 = v17;
    _os_log_impl(&dword_242981000, v12, v13, "%s %s %@", (uint8_t *)v14, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v21, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v22, -1, -1);
    v19 = v14;
    a5 = v23;
    MEMORY[0x2494EA95C](v19, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_150;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_advertiseNearbyInvitation_provider_response_, v11, a3, v20);
  _Block_release(v20);
}

uint64_t NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FC88, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:), (uint64_t)&block_descriptor_36);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_25136FCD8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:), (uint64_t)&block_descriptor_42);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)();
}

{
  type metadata accessor for UUID();
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Class isa;
  void *v22;
  _QWORD v23[3];
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t aBlock[6];
  uint64_t v28;

  v26 = a4;
  v24 = a3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v23[2] = a2;
  v12(v10, a2, v7);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    aBlock[0] = v23[0];
    *(_DWORD *)v15 = 136315650;
    v16 = _typeName(_:qualified:)();
    v23[1] = v4;
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002429DBEE0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_242981000, v13, v14, "%s %s %s", (uint8_t *)v15, 0x20u);
    v20 = v23[0];
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v20, -1, -1);
    MEMORY[0x2494EA95C](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = v24;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_144;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v25, sel_stopAdvertisingNearbyInvitation_response_, isa, v22);
  _Block_release(v22);

}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  ObjectType = swift_getObjectType();
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v18[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)XPCClient.queue.getter();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_48;
  v15 = _Block_copy(aBlock);
  v16 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_2429856DC()
{
  return objectdestroy_44Tm();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t aBlock[6];
  uint64_t v15;

  v5 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = _typeName(_:qualified:)();
    v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002429DBEB0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v7, v8, "%s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v10, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }

  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_141;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_stopAdvertisingNearbySessionEndpointWithResponse_, v13);
  _Block_release(v13);
}

uint64_t NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FD78, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:), (uint64_t)&block_descriptor_54);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

uint64_t NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v31 = a3;
  v32 = a4;
  v30 = a2;
  ObjectType = swift_getObjectType();
  v35 = type metadata accessor for DispatchWorkItemFlags();
  v38 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v34 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v14, v13, v10);
  v19 = v31;
  *(_QWORD *)(v18 + v15) = v30;
  v20 = (_QWORD *)(v18 + v16);
  v21 = v32;
  *v20 = v19;
  v20[1] = v21;
  *(_QWORD *)(v18 + v17) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_60;
  v22 = _Block_copy(aBlock);
  v23 = v4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v39 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v25 = v34;
  v24 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v26 = (void *)v33;
  MEMORY[0x2494EA128](0, v9, v25, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return swift_release();
}

uint64_t sub_242985C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)()
{
  type metadata accessor for UUID();
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Class isa;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t aBlock[6];
  uint64_t v35;

  v33 = a5;
  v31 = a4;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v30 = a2;
  v14(v12, a2, v9);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v29 = v5;
    v18 = v17;
    v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)v18 = 136315650;
    v19 = _typeName(_:qualified:)();
    v28 = a3;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000002429DBE50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, aBlock);
    a3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_242981000, v15, v16, "%s %s %s", (uint8_t *)v18, 0x20u);
    v23 = v27;
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v23, -1, -1);
    MEMORY[0x2494EA95C](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = v31;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed UUID?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_135;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v32, sel_assertAdvertisementPublic_rotations_response_, isa, a3, v25);
  _Block_release(v25);

}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed UUID?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  v12 = a3;
  v9(v8, a3);
  swift_release();

  return outlined destroy of UUID?((uint64_t)v8);
}

uint64_t NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t ObjectType;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  ObjectType = swift_getObjectType();
  v32 = type metadata accessor for DispatchWorkItemFlags();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&ObjectType - v14;
  v30 = XPCClient.queue.getter();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v15, a1, v9);
  v16(v13, a2, v9);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v11 + v17 + v18) & ~v17;
  v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v2;
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v22(v21 + v18, v15, v9);
  v22(v21 + v19, v13, v9);
  *(_QWORD *)(v21 + v20) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_66;
  v23 = _Block_copy(aBlock);
  v24 = v2;
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v26 = v31;
  v25 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v27 = (void *)v30;
  MEMORY[0x2494EA128](0, v8, v26, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
  return swift_release();
}

uint64_t sub_2429864BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;

  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)()
{
  type metadata accessor for UUID();
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Class isa;
  Class v23;
  _QWORD v24[3];
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v26 = a2;
  v12(v10, a2, v7);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v24[1] = a3;
    v16 = v15;
    v24[0] = swift_slowAlloc();
    v28 = v24[0];
    *(_DWORD *)v16 = 136315650;
    v17 = _typeName(_:qualified:)();
    v24[2] = v3;
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003BLL, 0x80000002429DBDF0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_242981000, v13, v14, "%s %s %s", (uint8_t *)v16, 0x20u);
    v21 = v24[0];
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v21, -1, -1);
    MEMORY[0x2494EA95C](v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v23 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, sel_releaseAdvertisementPublicAssertion_assertionIdentifier_, isa, v23);

}

uint64_t NearbyInvitationServiceClient.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_25136FE68, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:), (uint64_t)&block_descriptor_72);
}

uint64_t NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v23 = a5;
  v24 = a6;
  ObjectType = swift_getObjectType();
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v14 - 8);
  v26 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)XPCClient.queue.getter();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v6;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  v18[6] = ObjectType;
  aBlock[4] = v23;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v24;
  v19 = _Block_copy(aBlock);
  v20 = v6;
  v21 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v28 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v26);
  return swift_release();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, SEL *a9)
{
  SEL *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t aBlock[6];
  uint64_t v30;

  v11 = a9;
  v12 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  v14 = a2;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v23 = (_QWORD *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    aBlock[0] = v24;
    *(_DWORD *)v17 = 136315650;
    v18 = _typeName(_:qualified:)();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2112;
    v30 = (uint64_t)v14;
    v20 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v14;

    _os_log_impl(&dword_242981000, v15, v16, "%s %s %@", (uint8_t *)v17, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v24, -1, -1);
    v21 = v17;
    v11 = a9;
    MEMORY[0x2494EA95C](v21, -1, -1);

  }
  else
  {

  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = a8;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v12, *v11, v14, v22);
  _Block_release(v22);
}

uint64_t NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_25136FEB8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:), (uint64_t)&block_descriptor_78);
}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v32 = a5;
  v33 = a6;
  v27 = a4;
  v29 = a2;
  v30 = a3;
  ObjectType = swift_getObjectType();
  v34 = type metadata accessor for DispatchWorkItemFlags();
  v37 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  v20 = (_QWORD *)(v19 + v18);
  v21 = v30;
  *v20 = v29;
  v20[1] = v21;
  *(_QWORD *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = v32;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v33;
  v22 = _Block_copy(aBlock);
  v23 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v38 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v24 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v25 = (void *)v31;
  MEMORY[0x2494EA128](0, v12, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v24);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
  return swift_release();
}

uint64_t objectdestroy_38Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;
  uint64_t aBlock[6];
  uint64_t v17;

  v6 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)v10 = 136315394;
    v11 = _typeName(_:qualified:)();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000002429DBDA0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v8, v9, "%s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v15, -1, -1);
    MEMORY[0x2494EA95C](v10, -1, -1);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_129;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_scanNearbyInvitationsWithScannerID_response_, isa, v14);
  _Block_release(v14);

}

uint64_t NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v28 = a3;
  v29 = a4;
  ObjectType = swift_getObjectType();
  v32 = type metadata accessor for DispatchWorkItemFlags();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&ObjectType - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v4;
  *(_QWORD *)(v17 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  v18 = (_QWORD *)(v17 + v16);
  v19 = v29;
  *v18 = v28;
  v18[1] = v19;
  *(_QWORD *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_84;
  v20 = _Block_copy(aBlock);
  v21 = v4;
  v22 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v24 = v31;
  v23 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v25 = (void *)v30;
  MEMORY[0x2494EA128](0, v10, v24, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

uint64_t sub_242987788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)()
{
  type metadata accessor for UUID();
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Class isa;
  void *v15;
  uint64_t v16;
  uint64_t aBlock[6];
  uint64_t v19;

  v7 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)v11 = 136315394;
    v12 = _typeName(_:qualified:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002429DBD70, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    MEMORY[0x2494EA95C](v11, -1, -1);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_126;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_scanNearbyEndpointsWithParams_scannerID_response_, a2, isa, v15);
  _Block_release(v15);

}

uint64_t NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, a2, a3, (uint64_t)&unk_25136FF58, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:), (uint64_t)&block_descriptor_90);
}

uint64_t NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v22 = a5;
  v23 = a6;
  ObjectType = swift_getObjectType();
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v14 - 8);
  v25 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)XPCClient.queue.getter();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v6;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  v18[6] = ObjectType;
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v23;
  v19 = _Block_copy(aBlock);
  v20 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v25);
  return swift_release();
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, SEL *a9)
{
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t aBlock[6];
  uint64_t v27;

  v12 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v22 = a8;
    v16 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    aBlock[0] = v21;
    *(_DWORD *)v16 = 136315394;
    v17 = _typeName(_:qualified:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v14, v15, "%s %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v21, -1, -1);
    v19 = v16;
    a8 = v22;
    MEMORY[0x2494EA95C](v19, -1, -1);
  }

  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = a8;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v12, *a9, a2, v20);
  _Block_release(v20);
}

uint64_t NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_25136FFA8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:), (uint64_t)&block_descriptor_96);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t aBlock[6];
  uint64_t v19;

  v8 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)v12 = 136315394;
    v13 = _typeName(_:qualified:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000002429DBCF0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v10, v11, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);
  }

  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_120;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_requestConnectionWith_localInvitation_response_, a2, a3, v15);
  _Block_release(v15);
}

void thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_25136FFF8, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:), (uint64_t)&block_descriptor_102);
}

uint64_t NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v28 = a6;
  v29 = a7;
  v27 = a3;
  ObjectType = swift_getObjectType();
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v15 - 8);
  v31 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)XPCClient.queue.getter();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v7;
  v19[3] = a1;
  v20 = v27;
  v19[4] = a2;
  v19[5] = v20;
  v19[6] = a4;
  v19[7] = ObjectType;
  aBlock[4] = v28;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v29;
  v21 = _Block_copy(aBlock);
  v22 = v7;
  v23 = a1;
  v24 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v17, v14, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
  return swift_release();
}

uint64_t objectdestroy_8Tm()
{
  id *v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t aBlock[6];
  uint64_t v19;

  v8 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)v12 = 136315394;
    v13 = _typeName(_:qualified:)();
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000002429DBC70, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v10, v11, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);
  }

  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_117;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_requestEndpointConnectionWith_pseudonym_response_, a2, a3, v15);
  _Block_release(v15);
}

uint64_t NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  ObjectType = swift_getObjectType();
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)XPCClient.queue.getter();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  v15[6] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_108;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  v18 = a1;
  outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t sub_242988A64()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void **a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  Class isa;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v8 = 136315650;
    v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002429DBC20, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2112;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v5;

    _os_log_impl(&dword_242981000, v6, v7, "%s %s %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);

  }
  else
  {

  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_approveConnectionRequest_localInvitation_, v5, isa);

}

uint64_t NearbyInvitationServiceClient.denyConnectionRequest(_:)(void *a1)
{
  void *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  ObjectType = swift_getObjectType();
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)XPCClient.queue.getter();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v1;
  v13[3] = a1;
  v13[4] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_114;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  v16 = a1;
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_242989024()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

id closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(void **a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v8 = 136315650;
    v10 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000002429DBC00, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2112;
    v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_242981000, v6, v7, "%s %s %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(v3, sel_denyConnectionRequest_, v5, v14);
}

uint64_t NearbyInvitationServiceClient.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of weak NearbyInvitationServiceClientDelegate?(v0 + direct field offset for NearbyInvitationServiceClient.delegate);
}

id NearbyInvitationServiceClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc NearbyInvitationServiceClient.__ivar_destroyer(uint64_t a1)
{
  return outlined destroy of weak NearbyInvitationServiceClientDelegate?(a1 + direct field offset for NearbyInvitationServiceClient.delegate);
}

uint64_t protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.getter in conformance NearbyInvitationServiceClient()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  return MEMORY[0x2494EAA04](v1);
}

uint64_t protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.setter in conformance NearbyInvitationServiceClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.modify in conformance NearbyInvitationServiceClient(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for NearbyInvitationServiceClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x2494EAA04](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return NearbyInvitationServiceClient.delegate.modify;
}

void NearbyInvitationServiceClient.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

Swift::Void __swiftcall NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17[3];

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = type metadata accessor for NearbyGroupConnectionInfo(0);
    v10 = swift_bridgeObjectRetain();
    v11 = MEMORY[0x2494E9F90](v10, v9);
    v13 = v12;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v5, v6, "Did receive updated groups: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x2494EAA04](v14))
  {
    v15 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t))(*(_QWORD *)(v15 + 8) + 8))(a1._rawValue, ObjectType);
    swift_unknownObjectRelease();
  }
}

uint64_t NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t ObjectType;

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_242981000, v6, v7, "Did receive invitation approval request: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v9, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);

  }
  else
  {

  }
  v11 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v11);
  if (result)
  {
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t))(*(_QWORD *)(v13 + 8) + 16))(v5, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_242981000, v5, v6, "Did discover nearby advertisement from the host", v7, 2u);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }

  v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 24))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_242981000, v5, v6, "Did discover nearby advertisement from the host", v7, 2u);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }

  v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 32))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_242981000, v5, v6, "Did lose nearby advertisement from the host", v7, 2u);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }

  v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 40))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t ObjectType;

  v5 = v4;
  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_242981000, v11, v12, "Did discover nearby advertisement from the host", v13, 2u);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }

  v14 = v5 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v14);
  if (result)
  {
    v16 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8) + 48))(a1, a2, a3, a4, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;

  v2 = v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_242981000, v5, v6, "Did receive join response from the host", v7, 2u);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }

  v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x2494EAA04](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + 56))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)(void *a1)
{
  uint64_t v2;
  id v3;

  type metadata accessor for NearbyGroupConnectionInfo(0);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = a1;
  NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)((Swift::OpaquePointer)v2);

  return swift_bridgeObjectRelease();
}

void @objc NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(v4);

}

void @objc NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)((uint64_t)v4);

}

void @objc NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)((uint64_t)v4);

}

void @objc NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)((uint64_t)v4);

}

uint64_t @objc NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = a4;
  v10 = a1;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(v6, v8, v11, v13);
  outlined consume of Data._Representation(v11, v13);

  return swift_bridgeObjectRelease();
}

void @objc NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)((uint64_t)v4);

}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.createGroup(with:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestApproval(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.reject(pendingMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.advertiseNearbySessionEndpoint(params:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.markInvitationUsed(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.releaseInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveUpdatedGroups(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveInvitationApprovalRequest(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveSessionJoinResponse(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegate.didDisconnect(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata accessor for NearbyInvitationServiceClient()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NearbyInvitationServiceClient;
  if (!type metadata singleton initialization cache for NearbyInvitationServiceClient)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for NearbyInvitationServiceClient()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for NearbyInvitationServiceClient()
{
  return type metadata accessor for NearbyInvitationServiceClient();
}

void type metadata accessor for CBNearbyInfoV2InvitationRouteType()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CBNearbyInfoV2InvitationRouteType)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBNearbyInfoV2InvitationRouteType);
  }
}

uint64_t outlined destroy of weak NearbyInvitationServiceClientDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(void **a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(a1, *(void **)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(a1, v1[2], v1[3], v1[4], v1[5], 0xD000000000000031, 0x80000002429DBD30, (uint64_t)&block_descriptor_123, (SEL *)&selRef_stopScanningNearbyInvitationsWithProvider_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), 0xD00000000000001ELL, 0x80000002429DBDD0, (uint64_t)&block_descriptor_132, (SEL *)&selRef_releaseInvitation_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(id *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2494EA8A8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(id *a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), 0xD00000000000001FLL, 0x80000002429DBE90, (uint64_t)&block_descriptor_138, (SEL *)&selRef_markInvitationUsed_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(id *a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(a1, v1[2], v1[3], v1[4], v1[5], 0xD000000000000030, 0x80000002429DBF10, (uint64_t)&block_descriptor_147, (SEL *)&selRef_advertiseNearbySessionEndpointWithParams_response_);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(void **a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24298AE2C()
{
  return objectdestroy_44Tm();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24), *(_QWORD *)(v1 + 32), "Failed reject(pendingMember: %s), error: %s");
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_24298AE98()
{
  return objectdestroy_44Tm();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24), *(_QWORD *)(v1 + 32), "Failed approve(pendingMember: %s), error: %s");
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24298AEE0()
{
  return objectdestroy_44Tm();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(_QWORD, void *))(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24298AF10()
{
  return objectdestroy_44Tm();
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(_QWORD, void *))(v1 + 24));
}

void NearbyGroupTable.contents.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t (*Invitation_HostConnectionInfo.publicKey.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t (*Invitation_HostConnectionInfo.handle.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Invitation_HostConnectionInfo.unknownFields.getter(type metadata accessor for Invitation_HostConnectionInfo, a1);
}

uint64_t type metadata accessor for Invitation_HostConnectionInfo(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for Invitation_HostConnectionInfo);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.setter(uint64_t a1)
{
  return Invitation_HostConnectionInfo.unknownFields.setter(a1, type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t (*Invitation_HostConnectionInfo.unknownFields.modify())()
{
  type metadata accessor for Invitation_HostConnectionInfo(0);
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_HostConnectionInfo.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2429D9010;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  type metadata accessor for Invitation_HostConnectionInfo(0);
  return UnknownStorage.init()();
}

uint64_t Invitation_InvitationData.invitationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Invitation_InvitationData.invitationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Invitation_InvitationData.invitationID.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Invitation_InvitationData.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Invitation_InvitationData.displayName.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.userInfo.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for Invitation_InvitationData(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for Invitation_InvitationData);
}

uint64_t type metadata accessor for Invitation_HostConnectionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t key path setter for Invitation_InvitationData.userInfo : Invitation_InvitationData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  result = outlined consume of Data?(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t Invitation_InvitationData.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t (*Invitation_InvitationData.userInfo.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return Invitation_InvitationData.userInfo.modify;
}

uint64_t Invitation_InvitationData.userInfo.modify(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    result = outlined consume of Data?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

BOOL Invitation_InvitationData.hasUserInfo.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall Invitation_InvitationData.clearUserInfo()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_2429D9020;
}

uint64_t Invitation_InvitationData.hostConnectionInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(v1 + *(int *)(v6 + 32), (uint64_t)v5);
  v7 = type metadata accessor for Invitation_HostConnectionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, a1);
  *(_OWORD *)a1 = xmmword_2429D9010;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
}

uint64_t outlined init with copy of Invitation_HostConnectionInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for Invitation_InvitationData.hostConnectionInfo : Invitation_InvitationData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(a1 + *(int *)(v7 + 32), (uint64_t)v6);
  v8 = type metadata accessor for Invitation_HostConnectionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of Invitation_HostConnectionInfo((uint64_t)v6, a2);
  *(_OWORD *)a2 = xmmword_2429D9010;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
}

uint64_t key path setter for Invitation_InvitationData.hostConnectionInfo : Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Invitation_HostConnectionInfo(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v8, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Invitation_InvitationData.hostConnectionInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo(a1, v3);
  v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*Invitation_InvitationData.hostConnectionInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of Invitation_HostConnectionInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_2429D9010;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  }
  else
  {
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, (uint64_t)v9);
  }
  return Invitation_InvitationData.hostConnectionInfo.modify;
}

void Invitation_InvitationData.hostConnectionInfo.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of Invitation_HostConnectionInfo(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4);
    outlined destroy of Invitation_HostConnectionInfo?(v9, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v4, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v5);
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?(**(_QWORD **)a1 + v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

uint64_t outlined init with copy of Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Invitation_HostConnectionInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL Invitation_InvitationData.hasHostConnectionInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(v0 + *(int *)(v4 + 32), (uint64_t)v3);
  v5 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  return v6;
}

Swift::Void __swiftcall Invitation_InvitationData.clearHostConnectionInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v1, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  v2 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t Invitation_InvitationData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Invitation_HostConnectionInfo.unknownFields.getter(type metadata accessor for Invitation_InvitationData, a1);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Invitation_InvitationData.unknownFields.setter(uint64_t a1)
{
  return Invitation_HostConnectionInfo.unknownFields.setter(a1, type metadata accessor for Invitation_InvitationData);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*Invitation_InvitationData.unknownFields.modify())()
{
  type metadata accessor for Invitation_InvitationData(0);
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = xmmword_2429D9010;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  v2 = type metadata accessor for Invitation_InvitationData(0);
  UnknownStorage.init()();
  *(_OWORD *)(a1 + *(int *)(v2 + 28)) = xmmword_2429D9020;
  v3 = a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

void one-time initialization function for _protobuf_package()
{
  _protobuf_package._countAndFlagsBits = 28771;
  _protobuf_package._object = (void *)0xE200000000000000;
}

uint64_t one-time initialization function for protoMessageName(uint64_t a1)
{
  return one-time initialization function for protoMessageName(a1, 0xD000000000000015, static Invitation_HostConnectionInfo.protoMessageName, 0x80000002429DCB20, &static Invitation_HostConnectionInfo.protoMessageName[1]);
}

{
  return one-time initialization function for protoMessageName(a1, 0xD000000000000011, static Invitation_InvitationData.protoMessageName, 0x80000002429DCB00, &static Invitation_InvitationData.protoMessageName[1]);
}

_QWORD *Invitation_HostConnectionInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return static Invitation_HostConnectionInfo.protoMessageName;
}

uint64_t static Invitation_HostConnectionInfo.protoMessageName.getter()
{
  return static Invitation_HostConnectionInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, static Invitation_HostConnectionInfo.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Invitation_HostConnectionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2429D9030;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "publicKey";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "handle";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Invitation_InvitationData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Invitation_InvitationData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2429D9040;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "invitationID";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "displayName";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "userInfo";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "hostConnectionInfo";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap);
}

uint64_t static Invitation_HostConnectionInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static Invitation_HostConnectionInfo._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap, a1);
}

uint64_t Invitation_HostConnectionInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void Invitation_HostConnectionInfo.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_24298C050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
    {
      type metadata accessor for Invitation_HostConnectionInfo(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int Invitation_HostConnectionInfo.hashValue.getter()
{
  return Invitation_HostConnectionInfo.hashValue.getter(type metadata accessor for Invitation_HostConnectionInfo, &lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
}

uint64_t protocol witness for Message.init() in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2429D9010;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(a1, a2, &one-time initialization token for protoMessageName, static Invitation_HostConnectionInfo.protoMessageName);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Invitation_HostConnectionInfo())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Invitation_HostConnectionInfo()
{
  return Invitation_HostConnectionInfo.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance Invitation_HostConnectionInfo()
{
  Invitation_HostConnectionInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Invitation_HostConnectionInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Invitation_HostConnectionInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Invitation_HostConnectionInfo()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for protoMessageName(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;

  if (one-time initialization token for _protobuf_package != -1)
    result = swift_once();
  *a3 = a2;
  *a5 = a4;
  return result;
}

_QWORD *Invitation_InvitationData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return static Invitation_InvitationData.protoMessageName;
}

uint64_t static Invitation_InvitationData.protoMessageName.getter()
{
  return static Invitation_HostConnectionInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, static Invitation_InvitationData.protoMessageName);
}

uint64_t static Invitation_HostConnectionInfo.protoMessageName.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Invitation_InvitationData._protobuf_nameMap.unsafeMutableAddressor()
{
  return Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap);
}

uint64_t Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Invitation_InvitationData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static Invitation_HostConnectionInfo._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap, a1);
}

uint64_t static Invitation_HostConnectionInfo._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t Invitation_InvitationData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 2:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for Invitation_InvitationData(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          closure #4 in Invitation_InvitationData.decodeMessage<A>(decoder:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in Invitation_InvitationData.decodeMessage<A>(decoder:)()
{
  type metadata accessor for Invitation_InvitationData(0);
  type metadata accessor for Invitation_HostConnectionInfo(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

void Invitation_InvitationData.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_24298C8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
    {
      result = closure #1 in Invitation_InvitationData.traverse<A>(visitor:)(v3);
      if (!v2)
      {
        closure #2 in Invitation_InvitationData.traverse<A>(visitor:)(v3);
        type metadata accessor for Invitation_InvitationData(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in Invitation_InvitationData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for Invitation_InvitationData(0);
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in Invitation_InvitationData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(a1 + *(int *)(v9 + 32), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Invitation_HostConnectionInfo((uint64_t)v8);
}

Swift::Int Invitation_InvitationData.hashValue.getter()
{
  return Invitation_HostConnectionInfo.hashValue.getter(type metadata accessor for Invitation_InvitationData, &lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
}

Swift::Int Invitation_HostConnectionInfo.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance Invitation_InvitationData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a2 = xmmword_2429D9010;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = *(int *)(a1 + 32);
  *(_OWORD *)(a2 + *(int *)(a1 + 28)) = xmmword_2429D9020;
  v5 = a2 + v4;
  v6 = type metadata accessor for Invitation_HostConnectionInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(a1, a2, &one-time initialization token for protoMessageName, static Invitation_InvitationData.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Invitation_InvitationData()
{
  return Invitation_InvitationData.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance Invitation_InvitationData()
{
  Invitation_InvitationData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Invitation_InvitationData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_InvitationData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Invitation_InvitationData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Invitation_HostConnectionInfo()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Invitation_InvitationData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Invitation_HostConnectionInfo()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static Invitation_HostConnectionInfo.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = a1[2] == *(_QWORD *)(a2 + 16) && a1[3] == *(_QWORD *)(a2 + 24);
    if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v14 = type metadata accessor for Invitation_HostConnectionInfo(0);
      v15 = (char *)a1 + *(int *)(v14 + 24);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, (char *)(a2 + *(int *)(v14 + 24)), v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static Invitation_InvitationData.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t *v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  v65 = type metadata accessor for UnknownStorage();
  v67 = *(_QWORD *)(v65 - 8);
  v4 = MEMORY[0x24BDAC7A8](v65);
  v66 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v64 = (char *)&v56 - v6;
  v7 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Invitation_HostConnectionInfo?, Invitation_HostConnectionInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v56 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v56 - v21;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v23 & 1) == 0)
    goto LABEL_26;
  v59 = v11;
  v60 = v8;
  v62 = v20;
  v63 = v22;
  v57 = v10;
  v58 = v17;
  v61 = v13;
  v24 = a1;
  if (a1[2] == *(_QWORD *)(a2 + 16) && a1[3] == *(_QWORD *)(a2 + 24)
    || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v26 = type metadata accessor for Invitation_InvitationData(0);
    v27 = *(int *)(v26 + 28);
    v28 = *(uint64_t *)((char *)a1 + v27);
    v29 = *(uint64_t *)((char *)a1 + v27 + 8);
    v30 = (uint64_t *)(a2 + v27);
    v32 = *v30;
    v31 = v30[1];
    if (v29 >> 60 == 15)
    {
      if (v31 >> 60 == 15)
      {
LABEL_11:
        v35 = (uint64_t)v63;
        outlined init with copy of Invitation_HostConnectionInfo?((uint64_t)v24 + *(int *)(v26 + 32), (uint64_t)v63);
        v56 = v26;
        v36 = (uint64_t)v62;
        outlined init with copy of Invitation_HostConnectionInfo?(a2 + *(int *)(v26 + 32), (uint64_t)v62);
        v37 = (uint64_t)v61;
        v38 = (uint64_t)&v61[*(int *)(v59 + 48)];
        outlined init with copy of Invitation_HostConnectionInfo?(v35, (uint64_t)v61);
        outlined init with copy of Invitation_HostConnectionInfo?(v36, v38);
        v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
        if (v39(v37, 1, v7) == 1)
        {
          outlined destroy of Invitation_HostConnectionInfo?(v36, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?(v35, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          v40 = v39(v38, 1, v7);
          v42 = v66;
          v41 = v67;
          if (v40 == 1)
          {
            outlined destroy of Invitation_HostConnectionInfo?(v37, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
            v43 = v65;
LABEL_14:
            v44 = v56;
            v45 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
            v46 = v64;
            v45(v64, (char *)v24 + *(int *)(v56 + 24), v43);
            v45(v42, (char *)(a2 + *(int *)(v44 + 24)), v43);
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v25 = dispatch thunk of static Equatable.== infix(_:_:)();
            v47 = *(void (**)(char *, uint64_t))(v41 + 8);
            v47(v42, v43);
            v47(v46, v43);
            return v25 & 1;
          }
          goto LABEL_17;
        }
        v48 = v58;
        outlined init with copy of Invitation_HostConnectionInfo?(v37, (uint64_t)v58);
        v49 = v39(v38, 1, v7);
        v42 = v66;
        v41 = v67;
        if (v49 == 1)
        {
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo((uint64_t)v48);
LABEL_17:
          v50 = &demangling cache variable for type metadata for (Invitation_HostConnectionInfo?, Invitation_HostConnectionInfo?);
          v51 = v37;
LABEL_25:
          outlined destroy of Invitation_HostConnectionInfo?(v51, v50);
          goto LABEL_26;
        }
        v52 = (uint64_t)v57;
        outlined init with take of Invitation_HostConnectionInfo(v38, (uint64_t)v57);
        specialized static Data.== infix(_:_:)(*v48, v48[1]);
        if ((v53 & 1) == 0
          || (v48[2] != *(_QWORD *)(v52 + 16) || v48[3] != *(_QWORD *)(v52 + 24))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          outlined destroy of Invitation_HostConnectionInfo(v52);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo((uint64_t)v48);
          v51 = v37;
          v50 = (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?;
          goto LABEL_25;
        }
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v43 = v65;
        v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Invitation_HostConnectionInfo(v52);
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        outlined destroy of Invitation_HostConnectionInfo((uint64_t)v48);
        outlined destroy of Invitation_HostConnectionInfo?(v37, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        if ((v54 & 1) != 0)
          goto LABEL_14;
LABEL_26:
        v25 = 0;
        return v25 & 1;
      }
    }
    else if (v31 >> 60 != 15)
    {
      outlined copy of Data?(v28, v29);
      outlined copy of Data?(v32, v31);
      specialized static Data.== infix(_:_:)(v28, v29);
      v34 = v33;
      outlined consume of Data?(v32, v31);
      outlined consume of Data?(v28, v29);
      if ((v34 & 1) == 0)
        goto LABEL_26;
      goto LABEL_11;
    }
    outlined copy of Data?(v28, v29);
    outlined copy of Data?(v32, v31);
    outlined consume of Data?(v28, v29);
    outlined consume of Data?(v32, v31);
    goto LABEL_26;
  }
  return v25 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Message in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Hashable in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Equatable in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Message in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Hashable in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Equatable in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
}

uint64_t sub_24298D808@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  if (v5 >> 60 == 15)
    v6 = 0;
  else
    v6 = *v3;
  v7 = 0xC000000000000000;
  if (v5 >> 60 != 15)
    v7 = v5;
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for Invitation_HostConnectionInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Invitation_HostConnectionInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24298DB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Invitation_HostConnectionInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24298DC08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for Invitation_HostConnectionInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = a3[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = a3[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v20 = *(_QWORD *)v17;
      outlined copy of Data._Representation(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
      *(_QWORD *)v16 = v20;
      *((_QWORD *)v16 + 1) = v18;
    }
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = type metadata accessor for Invitation_HostConnectionInfo(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = *v23;
      v28 = v23[1];
      outlined copy of Data._Representation(*v23, v28);
      *v22 = v27;
      v22[1] = v28;
      v29 = v23[3];
      v22[2] = v23[2];
      v22[3] = v29;
      v30 = *(int *)(v24 + 24);
      v31 = (char *)v22 + v30;
      v32 = (char *)v23 + v30;
      swift_bridgeObjectRetain();
      v14(v31, v32, v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for Invitation_InvitationData(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = (uint64_t *)(a1 + a2[7]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Invitation_HostConnectionInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  }
  return result;
}

uint64_t *initializeWithCopy for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_QWORD *)v16 + 1);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v18 = *(_QWORD *)v16;
    outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
    *(_QWORD *)v15 = v18;
    *((_QWORD *)v15 + 1) = v17;
  }
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *v21;
    v26 = v21[1];
    outlined copy of Data._Representation(*v21, v26);
    *v20 = v25;
    v20[1] = v26;
    v27 = v21[3];
    v20[2] = v21[2];
    v20[3] = v27;
    v28 = *(int *)(v22 + 24);
    v29 = (char *)v20 + v28;
    v30 = (char *)v21 + v28;
    swift_bridgeObjectRetain();
    v13(v29, v30, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t *assignWithCopy for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = a3[7];
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *(uint64_t *)((char *)a2 + v16 + 8);
  if (*(unint64_t *)((char *)a1 + v16 + 8) >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      v20 = *v18;
      outlined copy of Data._Representation(v20, v19);
      *v17 = v20;
      v17[1] = v19;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v19 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v17);
LABEL_6:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_8;
  }
  v21 = *v18;
  outlined copy of Data._Representation(v21, v19);
  v22 = *v17;
  v23 = v17[1];
  *v17 = v21;
  v17[1] = v19;
  outlined consume of Data._Representation(v22, v23);
LABEL_8:
  v24 = a3[8];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      v40 = *v26;
      v41 = v26[1];
      outlined copy of Data._Representation(*v26, v41);
      v42 = *v25;
      v43 = v25[1];
      *v25 = v40;
      v25[1] = v41;
      outlined consume of Data._Representation(v42, v43);
      v25[2] = v26[2];
      v25[3] = v26[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v13);
      return a1;
    }
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v25);
    goto LABEL_13;
  }
  if (v31)
  {
LABEL_13:
    v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  v32 = *v26;
  v33 = v26[1];
  outlined copy of Data._Representation(*v26, v33);
  *v25 = v32;
  v25[1] = v33;
  v25[2] = v26[2];
  v25[3] = v26[3];
  v34 = *(int *)(v27 + 24);
  v35 = (char *)v25 + v34;
  v36 = (char *)v26 + v34;
  v37 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  v37(v35, v36, v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

_OWORD *initializeWithTake for Invitation_InvitationData(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithTake for Invitation_InvitationData(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v15 = a3[7];
  v16 = (uint64_t)a1 + v15;
  v17 = a2 + v15;
  v18 = *(uint64_t *)((char *)a1 + v15 + 8);
  if (v18 >> 60 == 15)
    goto LABEL_4;
  v19 = *(_QWORD *)(v17 + 8);
  if (v19 >> 60 == 15)
  {
    outlined destroy of Data(v16);
LABEL_4:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_6;
  }
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v19;
  outlined consume of Data._Representation(v20, v18);
LABEL_6:
  v21 = a3[8];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v32 = *v22;
      v33 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      outlined consume of Data._Representation(v32, v33);
      v34 = v23[3];
      v22[2] = v23[2];
      v22[3] = v34;
      swift_bridgeObjectRelease();
      v14((char *)v22 + *(int *)(v24 + 24), (uint64_t)v23 + *(int *)(v24 + 24), v12);
      return a1;
    }
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v22);
    goto LABEL_11;
  }
  if (v28)
  {
LABEL_11:
    v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  v29 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v29;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v12);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Invitation_InvitationData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24298E6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Invitation_InvitationData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24298E758(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for Invitation_InvitationData()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Invitation_HostConnectionInfo?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Invitation_HostConnectionInfo?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Invitation_HostConnectionInfo?)
  {
    type metadata accessor for Invitation_HostConnectionInfo(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Invitation_HostConnectionInfo?);
  }
}

uint64_t outlined destroy of Invitation_HostConnectionInfo?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t Log.client.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for client, (uint64_t)static Log.client);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[4];
  _QWORD v5[2];

  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v2, (uint64_t)v5);
  if (v5[1])
    return v5[0];
  else
    return 7104878;
}

BOOL Subsystem.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subsystem.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t Subsystem.rawValue.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subsystem()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Subsystem()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subsystem()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Subsystem()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subsystem@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Subsystem, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Subsystem(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000002429DB940;
}

uint64_t one-time initialization function for client()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.client);
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.init<A>(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  Logger.init(subsystem:category:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for client, (uint64_t)static Log.client, a1);
}

uint64_t one-time initialization function for host()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.host);
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.host.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for host, (uint64_t)static Log.host);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for host, (uint64_t)static Log.host, a1);
}

uint64_t one-time initialization function for session()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.session);
  __swift_project_value_buffer(v0, (uint64_t)static Log.session);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.session.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for session, (uint64_t)static Log.session);
}

uint64_t static Log.session.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for session, (uint64_t)static Log.session, a1);
}

uint64_t one-time initialization function for provider()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.provider);
  __swift_project_value_buffer(v0, (uint64_t)static Log.provider);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.provider.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for provider, (uint64_t)static Log.provider);
}

uint64_t static Log.provider.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for provider, (uint64_t)static Log.provider, a1);
}

uint64_t one-time initialization function for group()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.group);
  __swift_project_value_buffer(v0, (uint64_t)static Log.group);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.group.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for group, (uint64_t)static Log.group);
}

uint64_t Log.client.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Log.group.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for group, (uint64_t)static Log.group, a1);
}

uint64_t static Log.client.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[4];
  uint64_t v8;
  unint64_t v9;

  v7[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:), (uint64_t)v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v2, (uint64_t)&v8);
  if (v9)
    v3 = v8;
  else
    v3 = 7104878;
  if (v9)
    v4 = v9;
  else
    v4 = 0xE300000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type Subsystem and conformance Subsystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subsystem and conformance Subsystem;
  if (!lazy protocol witness table cache variable for type Subsystem and conformance Subsystem)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for Subsystem, &type metadata for Subsystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subsystem and conformance Subsystem);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Subsystem(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Subsystem(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24298F3BC + 4 * byte_2429D93D8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24298F3DC + 4 * byte_2429D93DD[v4]))();
}

_BYTE *sub_24298F3BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24298F3DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24298F3E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24298F3EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24298F3F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24298F3FC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for Subsystem()
{
  return 0;
}

ValueMetadata *type metadata accessor for Subsystem()
{
  return &type metadata for Subsystem;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t NearbyGroupMember.handle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroupMember.tokenID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyGroupMember.__allocating_init(handle:tokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v9[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id NearbyGroupMember.init(handle:tokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v6 = &v4[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for NearbyGroupMember();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for NearbyGroupMember()
{
  return objc_opt_self();
}

uint64_t NearbyGroupMember.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  char *v7;
  _BYTE v8[24];
  uint64_t v9;

  outlined init with copy of Any?(a1, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_17;
  }
  type metadata accessor for NearbyGroupMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle) == *(_QWORD *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle]
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8) == *(_QWORD *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8];
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {

    goto LABEL_17;
  }
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8);
  v4 = *(_QWORD *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8];
  if (!v3)
  {
    swift_bridgeObjectRetain();

    if (!v4)
      goto LABEL_23;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v4)
  {
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID) != *(_QWORD *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID]
      || v3 != v4)
    {
      LOBYTE(v4) = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_15;
    }

LABEL_23:
    LOBYTE(v4) = 1;
    return v4 & 1;
  }
LABEL_15:

  return v4 & 1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int NearbyGroupMember.hash.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  Hasher.init()();
  lazy protocol witness table accessor for type String and conformance String();
  v1 = StringProtocol.hash.getter();
  Hasher._combine(_:)(v1);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8))
  {
    v2 = StringProtocol.hash.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t static NearbyGroupMember.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t NearbyGroupMember.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyGroupMember.init(coder:)(a1);
}

uint64_t NearbyGroupMember.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;

  v2 = v1;
  type metadata accessor for NSString();
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  type metadata accessor for NearbyGroupMember();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

Swift::Void __swiftcall NearbyGroupMember.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle), *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8));
  v4 = (void *)MEMORY[0x2494E9EDC](0x656C646E6168, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8))
    v5 = MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID));
  else
    v5 = 0;
  v6 = (id)MEMORY[0x2494E9EDC](0x44496E656B6F74, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

}

id NearbyGroupMember.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NearbyGroupMember.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NearbyGroupMember.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyGroupMember();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t NearbyGroupMember.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  swift_getObjectType();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D656C646E616820;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x44496E656B6F7420;
  v7._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 60;
}

uint64_t method lookup function for NearbyGroupMember()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroupMember.__allocating_init(handle:tokenID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupMember.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupMember.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t NearbySessionInvitation.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NearbySessionInvitation.activityType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
}

id NearbySessionInvitation.metadata.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
}

uint64_t NearbySessionInvitation.sourceProviderID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.sourceProviderName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.isPublic.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic);
}

uint64_t NearbySessionInvitation.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.handle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8));
  return v1;
}

id NearbySessionInvitation.__allocating_init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  objc_class *v11;
  id v20;

  v20 = objc_allocWithZone(v11);
  return NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11);
}

id NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _BYTE *v13;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  objc_super v32;

  v19 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier];
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a1, v20);
  *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = a3;
  v22 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
  *v22 = a4;
  v22[1] = a5;
  v23 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
  *v23 = a6;
  v23[1] = a7;
  v24 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo];
  *v24 = a12;
  v24[1] = a13;
  v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = 0;
  v25 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
  *v25 = a8;
  v25[1] = a9;
  v26 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
  *v26 = a10;
  v26[1] = a11;
  v32.receiver = v13;
  v32.super_class = (Class)type metadata accessor for NearbySessionInvitation();
  v27 = objc_msgSendSuper2(&v32, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v20);
  return v27;
}

uint64_t type metadata accessor for NearbySessionInvitation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NearbySessionInvitation;
  if (!type metadata singleton initialization cache for NearbySessionInvitation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t NearbySessionInvitation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v27;

  v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(68);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646920;
  v4._object = (void *)0xED0000203A726569;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x203A6570797420;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  LODWORD(v27) = *(_DWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0xEC000000203A6F66;
  v7._countAndFlagsBits = 0x6E4972657375202CLL;
  String.append(_:)(v7);
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8);
  if (v8 >> 60 == 15)
  {
    v10 = 0xE300000000000000;
    v11 = 7104878;
  }
  else
  {
    v27 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
    outlined copy of Data._Representation(v9, v8);
    outlined copy of Data._Representation(v9, v8);
    v11 = String.init<A>(reflecting:)();
    v10 = v12;
  }
  v13 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v9, v8);
  v14._countAndFlagsBits = 0x61646174656D202CLL;
  v14._object = (void *)0xEC000000203A6174;
  String.append(_:)(v14);
  v15 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  v16 = objc_msgSend(v15, sel_description, v27);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);

  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x63696C627570202CLL;
  v21._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v21);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic))
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic))
    v23 = 0xE400000000000000;
  else
    v23 = 0xE500000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return 0;
}

uint64_t static NearbySessionInvitation.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbySessionInvitation.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  void *v5;
  Class v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  Class v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](0x696669746E656469, 0xEA00000000007265);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = UInt32._bridgeToObjectiveC()().super.super.isa;
  v7 = (void *)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  v9 = (void *)MEMORY[0x2494E9EDC](0x617461646174656DLL, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

  v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8);
  if (v11 >> 60 != 15)
  {
    v12 = *v10;
    outlined copy of Data._Representation(*v10, *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8));
    v13 = Data._bridgeToObjectiveC()().super.isa;
    v14 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);

    outlined consume of Data?(v12, v11);
  }
  v15 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic);
  v16 = (void *)MEMORY[0x2494E9EDC](0x63696C6275507369, 0xE800000000000000);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15, v16);

  v17 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName + 8));
  v18 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);

  v19 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle + 8));
  v20 = (void *)MEMORY[0x2494E9EDC](0x656C646E6168, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19, v20);

  v21 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID + 8));
  v22 = (void *)MEMORY[0x2494E9EDC](0xD000000000000010, 0x80000002429DCC70);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);

  v23 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName + 8));
  v24 = (id)MEMORY[0x2494E9EDC](0xD000000000000012, 0x80000002429DCC90);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);

}

id NearbySessionInvitation.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbySessionInvitation.init(coder:)(a1);
}

id NearbySessionInvitation.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  id v12;
  int v13;
  void (*v14)(char *, char *, uint64_t);
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  int v32;
  void *v33;
  unint64_t v34;
  void *v35;
  id v36;
  id v37;
  char v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  objc_class *v47;
  unint64_t v48;
  void *v49;
  void *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  void (*v55)(char *, char *, uint64_t);
  id v56;
  int v57;
  objc_super v58;
  void *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  uint64_t v64;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1;
  v11 = (void *)MEMORY[0x2494E9EDC](0x696669746E656469, 0xEA00000000007265);
  v12 = objc_msgSend(a1, sel_decodeObjectForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    v13 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v13 ^ 1u, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v14 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v14(v9, v5, v6);
      v15 = (void *)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
      v16 = objc_msgSend(a1, sel_decodeObjectForKey_, v15);

      if (v16)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v61 = 0u;
        v62 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
      if (v64)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (v59 > 1)
            goto LABEL_24;
          v57 = (int)v59;
LABEL_17:
          v17 = (void *)MEMORY[0x2494E9EDC](0x617461646174656DLL, 0xE800000000000000);
          v18 = objc_msgSend(a1, sel_decodeObjectForKey_, v17);

          if (v18)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            v61 = 0u;
            v62 = 0u;
          }
          outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
          if (!v64)
          {

LABEL_56:
            outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
            goto LABEL_61;
          }
          type metadata accessor for NearbyInvitationJoinRequestMetadata();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v56 = v59;
            v19 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
            v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

            if (v20)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              v61 = 0u;
              v62 = 0u;
            }
            outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
            if (v64)
            {
              if ((swift_dynamicCast() & 1) == 0)
              {

LABEL_60:
                goto LABEL_61;
              }
              v21 = v60;
              v54 = v59;
              v55 = v14;
              v22 = (void *)MEMORY[0x2494E9EDC](0x656C646E6168, 0xE600000000000000);
              v23 = objc_msgSend(a1, sel_decodeObjectForKey_, v22);

              if (v23)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                v61 = 0u;
                v62 = 0u;
              }
              outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
              if (v64)
              {
                if ((swift_dynamicCast() & 1) == 0)
                {

LABEL_59:
                  swift_bridgeObjectRelease();
                  goto LABEL_60;
                }
                v52 = v59;
                v53 = v60;
                v24 = (void *)MEMORY[0x2494E9EDC](0xD000000000000010, 0x80000002429DCC70);
                v25 = objc_msgSend(a1, sel_decodeObjectForKey_, v24);

                if (v25)
                {
                  _bridgeAnyObjectToAny(_:)();
                  swift_unknownObjectRelease();
                }
                else
                {
                  v61 = 0u;
                  v62 = 0u;
                }
                outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
                if (v64)
                {
                  if ((swift_dynamicCast() & 1) == 0)
                  {

LABEL_58:
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  v50 = v59;
                  v51 = v60;
                  v26 = (void *)MEMORY[0x2494E9EDC](0xD000000000000012, 0x80000002429DCC90);
                  v27 = objc_msgSend(a1, sel_decodeObjectForKey_, v26);

                  if (v27)
                  {
                    _bridgeAnyObjectToAny(_:)();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    v61 = 0u;
                    v62 = 0u;
                  }
                  outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
                  if (v64)
                  {
                    if ((swift_dynamicCast() & 1) != 0)
                    {
                      v49 = v59;
                      v48 = v60;
                      v28 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
                      v29 = objc_msgSend(a1, sel_decodeObjectForKey_, v28);

                      if (v29)
                      {
                        _bridgeAnyObjectToAny(_:)();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        v61 = 0u;
                        v62 = 0u;
                      }
                      outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
                      if (v64)
                      {
                        v32 = swift_dynamicCast();
                        if (v32)
                          v33 = v59;
                        else
                          v33 = 0;
                        if (v32)
                          v34 = v60;
                        else
                          v34 = 0xF000000000000000;
                      }
                      else
                      {
                        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
                        v33 = 0;
                        v34 = 0xF000000000000000;
                      }
                      v35 = (void *)MEMORY[0x2494E9EDC](0x63696C6275507369, 0xE800000000000000);
                      v36 = objc_msgSend(a1, sel_decodeObjectForKey_, v35);

                      if (v36)
                      {
                        _bridgeAnyObjectToAny(_:)();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        v61 = 0u;
                        v62 = 0u;
                      }
                      v37 = v56;
                      outlined init with take of Any?((uint64_t)&v61, (uint64_t)v63);
                      if (v64)
                      {
                        if (swift_dynamicCast())
                        {
                          v38 = (char)v59;
LABEL_81:
                          v55(&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier], v9, v6);
                          *(_DWORD *)&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = v57;
                          *(_QWORD *)&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = v37;
                          v39 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo];
                          *(_QWORD *)v39 = v33;
                          *((_QWORD *)v39 + 1) = v34;
                          v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = v38;
                          v40 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
                          *(_QWORD *)v40 = v54;
                          *((_QWORD *)v40 + 1) = v21;
                          v41 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
                          v42 = v51;
                          *(_QWORD *)v41 = v50;
                          *((_QWORD *)v41 + 1) = v42;
                          v43 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
                          v44 = v48;
                          *(_QWORD *)v43 = v49;
                          *((_QWORD *)v43 + 1) = v44;
                          v45 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
                          v46 = v53;
                          *(_QWORD *)v45 = v52;
                          *((_QWORD *)v45 + 1) = v46;

                          v47 = (objc_class *)type metadata accessor for NearbySessionInvitation();
                          v58.receiver = v10;
                          v58.super_class = v47;
                          v30 = objc_msgSendSuper2(&v58, sel_init);

                          return v30;
                        }
                      }
                      else
                      {
                        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
                      }
                      v38 = 0;
                      goto LABEL_81;
                    }

                    swift_bridgeObjectRelease();
                    goto LABEL_58;
                  }

                  swift_bridgeObjectRelease();
                }
                else
                {

                }
                swift_bridgeObjectRelease();
              }
              else
              {

              }
              swift_bridgeObjectRelease();
            }
            else
            {

            }
            goto LABEL_56;
          }
LABEL_24:

LABEL_61:
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          goto LABEL_62;
        }
      }
      else
      {
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
      }
      v57 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }

  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_62:
  type metadata accessor for NearbySessionInvitation();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id NearbySessionInvitation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NearbySessionInvitation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NearbySessionInvitation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24299146C + 4 * byte_2429D94E0[a1]))(0xD000000000000010, 0x80000002429DCC70);
}

uint64_t sub_24299146C()
{
  return 0x696669746E656469;
}

uint64_t sub_242991488()
{
  return 0x7974697669746361;
}

uint64_t sub_2429914A8()
{
  return 0x617461646174656DLL;
}

uint64_t sub_2429914C0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_2429914D8()
{
  return 0x63696C6275507369;
}

uint64_t sub_2429914F0()
{
  return 0x4E79616C70736964;
}

uint64_t sub_242991510()
{
  return 0x656C646E6168;
}

uint64_t sub_242991524()
{
  return 0x6F666E4972657375;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbySessionInvitation.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbySessionInvitation.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbySessionInvitation.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  unsigned __int8 *v0;

  return NearbySessionInvitation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbySessionInvitation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NearbySessionInvitation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbySessionInvitation.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbySessionInvitation.CodingKeys()
{
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbySessionInvitation.CodingKeys()
{
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id NearbySessionInvitation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySessionInvitation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t NearbySessionInvitation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbySessionInvitation.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LODWORD(v10) = *(_DWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
    v11 = 1;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
    v11 = 2;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, (uint64_t (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata, (uint64_t)&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
    v11 = 8;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbySessionInvitation.CodingKeys, &unk_251370940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbySessionInvitation.CodingKeys, &unk_251370940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbySessionInvitation.CodingKeys, &unk_251370940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbySessionInvitation.CodingKeys, &unk_251370940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationActivityType, &type metadata for NearbyInvitationActivityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationActivityType, &type metadata for NearbyInvitationActivityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationActivityType, &type metadata for NearbyInvitationActivityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationActivityType, &type metadata for NearbyInvitationActivityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

id NearbySessionInvitation.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbySessionInvitation.init(from:)(a1);
}

id NearbySessionInvitation.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  _BYTE *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  objc_super v35;
  __int128 v36;
  char v37;

  v3 = v1;
  v5 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NearbySessionInvitation.CodingKeys>);
  v7 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  v33 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v13 = v33;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);

    type metadata accessor for NearbySessionInvitation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v11 = v7;
    LOBYTE(v36) = 0;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v12 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v15 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))((uint64_t)v33 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier, v12, v5);
    v37 = 1;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_DWORD *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = v36;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    v37 = 2;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, (uint64_t (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata, (uint64_t)&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = v36;
    LOBYTE(v36) = 3;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
    *v17 = v16;
    v17[1] = v18;
    LOBYTE(v36) = 4;
    v19 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = (char *)v5;
    v20 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
    *v20 = v19;
    v20[1] = v21;
    LOBYTE(v36) = 5;
    v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v36) = 6;
    v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
    *v23 = v22;
    v23[1] = v24;
    LOBYTE(v36) = 7;
    v25 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
    *v26 = v25;
    v26[1] = v27;
    v37 = 8;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo] = v36;

    v28 = (objc_class *)type metadata accessor for NearbySessionInvitation();
    v35.receiver = v15;
    v35.super_class = v28;
    v13 = objc_msgSendSuper2(&v35, sel_init);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v31);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  }
  return v13;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbySessionInvitation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbySessionInvitation()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xB0))();
}

uint64_t ObjC metadata update function for NearbySessionInvitation()
{
  return type metadata accessor for NearbySessionInvitation();
}

uint64_t type metadata completion function for NearbySessionInvitation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbySessionInvitation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NearbySessionInvitation.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of NearbySessionInvitation.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySessionInvitation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySessionInvitation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2429924B0 + 4 * byte_2429D94EE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2429924E4 + 4 * byte_2429D94E9[v4]))();
}

uint64_t sub_2429924E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429924EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429924F4);
  return result;
}

uint64_t sub_242992500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x242992508);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24299250C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_242992514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for NearbySessionInvitation.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for NearbySessionInvitation.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for NearbySessionInvitation.CodingKeys()
{
  return &unk_251370940;
}

uint64_t specialized NearbySessionInvitation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEC00000065707954
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002429DCC70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002429DCC90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x63696C6275507369 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t one-time initialization function for identity()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for XPCIdentity();
  __swift_allocate_value_buffer(v0, static NearbyGroupInterface.identity);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static NearbyGroupInterface.identity);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x24BE19EA8], v0);
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for XPCIdentity();
  __swift_allocate_value_buffer(v0, static NearbyInvitationServiceInterface.identity);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static NearbyInvitationServiceInterface.identity);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, *MEMORY[0x24BE19EA0], v0);
}

uint64_t static NearbyGroupInterface.identity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static NearbyGroupInterface.identity.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static NearbyGroupInterface.identity.modify())()
{
  uint64_t v0;

  if (one-time initialization token for identity != -1)
    swift_once();
  v0 = type metadata accessor for XPCIdentity();
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

id one-time initialization function for hostObjectInterface()
{
  id result;

  result = closure #1 in variable initialization expression of static NearbyGroupInterface.hostObjectInterface();
  static NearbyGroupInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

{
  id result;

  result = closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.hostObjectInterface();
  static NearbyInvitationServiceInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static NearbyGroupInterface.hostObjectInterface()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_257211AA0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2429D96E0;
  v2 = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v1 + 32) = v2;
  v3 = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v1 + 40) = v3;
  v4 = type metadata accessor for NearbyGroupMember();
  *(_QWORD *)(v1 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2429D96E0;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

id static NearbyGroupInterface.hostObjectInterface.getter()
{
  return static NearbyGroupInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static NearbyGroupInterface.hostObjectInterface);
}

void static NearbyGroupInterface.hostObjectInterface.setter(void *a1)
{
  static NearbyGroupInterface.hostObjectInterface.setter(a1, &one-time initialization token for hostObjectInterface, (void **)&static NearbyGroupInterface.hostObjectInterface);
}

uint64_t (*static NearbyGroupInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t one-time initialization function for clientObjectInterface()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_257211B00);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2429D9030;
  *(_QWORD *)(v1 + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v1 + 40) = type metadata accessor for NearbyGroupMember();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  result = swift_bridgeObjectRelease();
  static NearbyGroupInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

id static NearbyGroupInterface.clientObjectInterface.getter()
{
  return static NearbyGroupInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static NearbyGroupInterface.clientObjectInterface);
}

id static NearbyGroupInterface.hostObjectInterface.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

void static NearbyGroupInterface.clientObjectInterface.setter(void *a1)
{
  static NearbyGroupInterface.hostObjectInterface.setter(a1, &one-time initialization token for clientObjectInterface, (void **)&static NearbyGroupInterface.clientObjectInterface);
}

void static NearbyGroupInterface.hostObjectInterface.setter(void *a1, _QWORD *a2, void **a3)
{
  void *v5;

  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *a3;
  *a3 = a1;

}

uint64_t (*static NearbyGroupInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance NearbyGroupInterface@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static NearbyGroupInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static NearbyGroupInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  swift_beginAccess();
  return *a4;
}

ValueMetadata *type metadata accessor for NearbyGroupInterface()
{
  return &type metadata for NearbyGroupInterface;
}

uint64_t type metadata accessor for NSSet(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t NearbyGroupCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id, a1);
}

uint64_t NearbyGroupCreationRequest.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupCreationRequest.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  swift_getObjectType();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x203A6469283ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x7265626D656D202CLL;
  v3._object = (void *)0xEB00000000203A73;
  String.append(_:)(v3);
  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NearbyGroupMember, MEMORY[0x24BEE5BD8]);
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 60;
}

id NearbyGroupCreationRequest.__allocating_init(id:members:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(_QWORD *)&v5[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = a2;
  v11.receiver = v5;
  v11.super_class = v2;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id NearbyGroupCreationRequest.init(id:members:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(_QWORD *)&v2[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = a2;
  v11.receiver = v2;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

uint64_t static NearbyGroupCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyGroupCreationRequest.encode(with:)(NSCoder with)
{
  Class isa;
  void *v3;
  Class v4;
  id v5;

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v3 = (void *)MEMORY[0x2494E9EDC](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v3);

  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NearbyGroupMember, MEMORY[0x24BEE5BD8]);
  v4 = Set._bridgeToObjectiveC()().super.isa;
  v5 = (id)MEMORY[0x2494E9EDC](0x737265626D656DLL, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

}

id NearbyGroupCreationRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyGroupCreationRequest.init(coder:)(a1);
}

id NearbyGroupCreationRequest.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  id v22;
  objc_class *ObjectType;
  objc_super v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&ObjectType - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_8;
  }
  v15 = (void *)v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  v17 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB0]);
  MEMORY[0x2494EA314](v15, v6, v9, v17);

  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
LABEL_8:
    v16(v8, 1, 1, v9);
    goto LABEL_9;
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v18(v8, 1, v9) == 1)
  {
LABEL_9:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_10:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19(v12, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2429D9030;
  *(_QWORD *)(v20 + 32) = type metadata accessor for NearbyGroupMember();
  *(_QWORD *)(v20 + 40) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v28)
  {

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_14;
  }
  v21 = v26;
  v19(&v13[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id], v12, v9);
  *(_QWORD *)&v13[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = v21;

  v25.receiver = v13;
  v25.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v25, sel_init);

  return v22;
}

void NearbyGroupCreationRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NearbyGroupConnectionInfo.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id, a1);
}

uint64_t NearbyGroupCreationRequest.id.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

id NearbyGroupConnectionInfo.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
}

uint64_t NearbyGroupConnectionInfo.localMember.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyGroupConnectionInfo.__allocating_init(id:endpoint:localMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  objc_super v16;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = a2;
  v13 = &v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  v16.receiver = v9;
  v16.super_class = v4;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id NearbyGroupConnectionInfo.init(id:endpoint:localMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  *(_QWORD *)&v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = a2;
  v13 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  v16.receiver = v4;
  v16.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id @objc NearbyGroupCreationRequest.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x2494E9EDC](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NearbyGroupConnectionInfo.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;

  v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A6469283ELL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x696F70646E65202CLL;
  v5._object = (void *)0xEC000000203A746ELL;
  String.append(_:)(v5);
  v6 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x4D6C61636F6C202CLL;
  v12._object = (void *)0xEF203A7265626D65;
  String.append(_:)(v12);
  v13 = v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember);
  v15 = *(void **)(v13 + 8);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t static NearbyGroupConnectionInfo.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyGroupConnectionInfo.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  v7 = (void *)MEMORY[0x2494E9EDC](0x746E696F70646E65, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember + 8));
  v9 = (id)MEMORY[0x2494E9EDC](0x6D654D6C61636F6CLL, 0xEB00000000726562);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

}

id NearbyGroupConnectionInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyGroupConnectionInfo.init(coder:)(a1);
}

id NearbyGroupConnectionInfo.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v29;
  objc_class *ObjectType;
  objc_super v31;
  uint64_t v32;
  uint64_t v33;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v29 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_9;
  }
  v15 = (void *)v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  v17 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB0]);
  MEMORY[0x2494EA314](v15, v6, v9, v17);

  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
LABEL_9:
    v16(v8, 1, 1, v9);
    goto LABEL_10;
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v18(v8, 1, v9) == 1)
  {
LABEL_10:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_11:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19(v12, v8, v9);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSXPCListenerEndpoint);
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20)
  {

LABEL_15:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_11;
  }
  v21 = (void *)v20;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v22
    || (v23 = (void *)v22,
        v32 = 0,
        v33 = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v23,
        (v24 = v33) == 0))
  {

    goto LABEL_15;
  }
  v25 = v32;
  v19(&v13[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id], v12, v9);
  *(_QWORD *)&v13[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = v21;
  v26 = &v13[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
  *(_QWORD *)v26 = v25;
  *((_QWORD *)v26 + 1) = v24;

  v31.receiver = v13;
  v31.super_class = ObjectType;
  v27 = objc_msgSendSuper2(&v31, sel_init);

  return v27;
}

id NearbyGroupConnectionInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NearbyGroupConnectionInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NearbyGroupCreationRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path setter for NearbyGroupTable.serialQueue : NearbyGroupTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 104))(v6);
}

uint64_t NearbyGroupTable.serialQueue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  swift_beginAccess();
  v4 = type metadata accessor for AsyncSerialQueue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NearbyGroupTable.serialQueue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  swift_beginAccess();
  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*NearbyGroupTable.serialQueue.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyGroupTable.WeakNearbyGroup));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = MEMORY[0x24BEE4B00];
LABEL_9:
    swift_bridgeObjectRelease();
    return v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_9;
  v9 = v6 + 64;
  v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v21[1] = a1;
  v11 = a1 + v10;
  v12 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v11, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NearbyGroupTable.WeakNearbyGroup));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v14 & 1) != 0)
      break;
    v15 = result;
    *(_QWORD *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = *(_QWORD *)(v7 + 48);
    v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v15, v5, v17);
    result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    v18 = *(_QWORD *)(v7 + 16);
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_12;
    *(_QWORD *)(v7 + 16) = v20;
    v11 += v12;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v7;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyGroupConnectionInfo));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NearbyGroupConnectionInfo));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Bool));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Bool));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_BYTE *)(v7[7] + v16) = v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.getter()
{
  return swift_weakLoadStrong();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.setter()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t (*NearbyGroupTable.WeakNearbyGroup.group.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_weakLoadStrong();
  return NearbyGroupTable.WeakNearbyGroup.group.modify;
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.modify()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.init()()
{
  return swift_weakInit();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.init(group:)()
{
  swift_weakInit();
  return swift_release();
}

uint64_t NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for AsyncSerialQueue();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  v2 = v0[3];
  (*(void (**)(void))(*(_QWORD *)v2 + 96))();
  v3 = swift_allocObject();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = NearbyGroupTable.cleanUpIfNotPresent(_:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  return swift_task_switch();
}

uint64_t closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _NativeDictionary.filter(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v3, (void (*)(char *, char *))partial apply for closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[8];
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[8];

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v13 & 1) != 0)
      return 0;
  }
  if (one-time initialization token for group != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v26 = v17;
    v18 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v31 = v25;
    *(_DWORD *)v18 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v18 + 12) = 2080;
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    v30 = 0;
    outlined init with copy of (UUID, Bool)((uint64_t)&v29, (uint64_t)v28, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    if ((v28[8] & 1) != 0)
    {
      v21 = 0xE300000000000000;
      v22 = 7104878;
    }
    else
    {
      outlined init with take of NearbyGroupTable.WeakNearbyGroup();
      outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
      v22 = String.init<A>(reflecting:)();
      v21 = v23;
      outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v27);
    }
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)&v29, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v32);
    _os_log_impl(&dword_242981000, v16, (os_log_type_t)v26, "NearbyGroup %s, %s was removed.", (uint8_t *)v18, 0x16u);
    v24 = v25;
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v24, -1, -1);
    MEMORY[0x2494EA95C](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v32);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return 1;
}

uint64_t closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20[3];
  _QWORD v21[2];

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v18[1] = a3;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    *(_DWORD *)v13 = 136315138;
    v19 = a1;
    v20[0] = v14;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
    a1 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_242981000, v10, v11, "NearbyGroup %s is no longer tracked. Cleaning up.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v14, -1, -1);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1, (uint64_t)v21);
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v21, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  return swift_endAccess();
}

uint64_t NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for UUID();
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = *(_QWORD *)(v6 + 64);
  v4[10] = swift_task_alloc();
  v7 = type metadata accessor for AsyncSerialQueue();
  v4[11] = v7;
  v4[12] = *(_QWORD *)(v7 - 8);
  v4[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v6 = v0[5];
  v5 = v0[6];
  v7 = v0[3];
  v8 = v0[4];
  (*(void (**)(void))(*(_QWORD *)v5 + 96))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v9 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v10 = swift_allocObject();
  v0[14] = v10;
  *(_QWORD *)(v10 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v1, v3);
  v11 = (_QWORD *)(v10 + ((v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v11 = v8;
  v11[1] = v6;
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc();
  v0[15] = v12;
  type metadata accessor for NearbyGroup();
  *v12 = v0;
  v12[1] = NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for UUID();
  v5[24] = v6;
  v5[25] = *(_QWORD *)(v6 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void **v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void);
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(_QWORD *)(v0 + 240) = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  v3 = v1 + v2;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    v4 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v4);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
      *(_BYTE *)(v0 + 72) = 0;
    }
    else
    {
      *(_QWORD *)(v0 + 64) = 0;
      *(_BYTE *)(v0 + 72) = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v0 + 64) = 0;
    *(_BYTE *)(v0 + 72) = 1;
  }
  v6 = (void **)(v0 + 120);
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    outlined destroy of Invitation_HostConnectionInfo?(v0 + 64, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
LABEL_23:
    if (one-time initialization token for group != -1)
      swift_once();
    v30 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 248) = __swift_project_value_buffer(v34, (uint64_t)static Log.group);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    *(_QWORD *)(v0 + 256) = v35;
    v35(v30, v33, v31);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.default.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 224);
    v40 = *(_QWORD *)(v0 + 192);
    v41 = *(_QWORD *)(v0 + 200);
    if (v38)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v52 = v43;
      *(_DWORD *)v42 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v44 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v46(v39, v40);
      _os_log_impl(&dword_242981000, v36, v37, "Attempting generation for %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v43, -1, -1);
      MEMORY[0x2494EA95C](v42, -1, -1);
    }
    else
    {
      v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v46(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 192));
    }

    *(_QWORD *)(v0 + 264) = v46;
    v51 = (uint64_t (*)(void))(**(int **)(v0 + 176) + *(_QWORD *)(v0 + 176));
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v47;
    *v47 = v0;
    v47[1] = closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
    v29 = v51;
    return v29();
  }
  Strong = swift_weakLoadStrong();
  outlined destroy of Invitation_HostConnectionInfo?(v0 + 64, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  if (!Strong)
    goto LABEL_23;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v8 = *v6;
  if ((unint64_t)*v6 >= 2)
  {
    if (one-time initialization token for group != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.group);
    swift_retain_n();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v52 = v49;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)(v0 + 128) = Strong;
      type metadata accessor for NearbyGroup();
      swift_retain();
      v27 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_242981000, v24, v25, "NearbyGroup already but is invalidated. Creating a new NearbyGroup to replace it. Existing: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v49, -1, -1);
      MEMORY[0x2494EA95C](v26, -1, -1);
      outlined consume of NearbyGroup.State(v8);
      swift_release();
    }
    else
    {
      swift_release_n();
      outlined consume of NearbyGroup.State(v8);
    }

    goto LABEL_23;
  }
  if (one-time initialization token for group != -1)
    swift_once();
  v9 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.group);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 200);
  if (v16)
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v52 = v50;
    *(_DWORD *)v20 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    _os_log_impl(&dword_242981000, v14, v15, "Group already exists for identifier: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v50, -1, -1);
    MEMORY[0x2494EA95C](v20, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v19 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 192));
  }

  **(_QWORD **)(v0 + 152) = Strong;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 192));
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 192);
    v5 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v18 = v16;
    *(_DWORD *)v5 = 136315394;
    swift_retain();
    v6 = NearbyGroup.description.getter();
    v8 = v7;
    swift_release();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17(v3, v4);
    _os_log_impl(&dword_242981000, v1, v2, "Generated group: %s for identifier: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    MEMORY[0x2494EA95C](v5, -1, -1);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 192);
    swift_release_n();
    v11(v12, v13);
  }

  v14 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 256))(v14, *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 192));
  swift_weakInit();
  *(_BYTE *)(v0 + 88) = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v0 + 80, v14);
  swift_endAccess();
  **(_QWORD **)(v0 + 152) = *(_QWORD *)(v0 + 280);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 280) = a1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(a1, v6, v7, v9, v10);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v9, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  }
  else
  {
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  }
}

uint64_t NearbyGroupTable.firstGroup()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[3] = v0;
  v2 = type metadata accessor for AsyncSerialQueue();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(void))(**(_QWORD **)(v0 + 24) + 96))();
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  type metadata accessor for NearbyGroup();
  *v1 = v0;
  v1[1] = NearbyGroupTable.firstGroup();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroupTable.firstGroup()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NearbyGroupTable.firstGroup()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  swift_beginAccess();
  v1 = swift_bridgeObjectRetain();
  v2 = specialized Sequence.compactMap<A>(_:)(v1);
  result = swift_bridgeObjectRelease();
  if (!(v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup()();
    swift_allocError();
    swift_willThrow();
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_8;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x2494EA260](0, v2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD *)(v2 + 32);
    swift_retain();
LABEL_6:
    v5 = *(uint64_t **)(v0 + 40);
    swift_bridgeObjectRelease();
    *v5 = v4;
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in NearbyGroupTable.firstGroup()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  v4[5] = a1;
  v4[6] = v1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NearbyGroupTable.firstGroup()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v22 - v6;
  v25 = MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v24 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_22:
    v19 = *(_QWORD *)(a1 + 48);
    v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v7, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, v20);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
    Strong = swift_weakLoadStrong();
    result = outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
    if (Strong)
    {
      MEMORY[0x2494E9F6C](result);
      if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v16 >= v24)
    goto LABEL_26;
  v17 = *(_QWORD *)(v23 + 8 * v16);
  ++v13;
  if (v17)
    goto LABEL_21;
  v13 = v16 + 1;
  if (v16 + 1 >= v24)
    goto LABEL_26;
  v17 = *(_QWORD *)(v23 + 8 * v13);
  if (v17)
    goto LABEL_21;
  v13 = v16 + 2;
  if (v16 + 2 >= v24)
    goto LABEL_26;
  v17 = *(_QWORD *)(v23 + 8 * v13);
  if (v17)
    goto LABEL_21;
  v13 = v16 + 3;
  if (v16 + 3 >= v24)
    goto LABEL_26;
  v17 = *(_QWORD *)(v23 + 8 * v13);
  if (v17)
  {
LABEL_21:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_22;
  }
  v18 = v16 + 4;
  if (v18 >= v24)
  {
LABEL_26:
    swift_release();
    return v25;
  }
  v17 = *(_QWORD *)(v23 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v24)
      goto LABEL_26;
    v17 = *(_QWORD *)(v23 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NearbyGroupMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NearbyGroupMember, MEMORY[0x24BEE5BD8]);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v27;
    v25 = v28;
    v3 = v29;
    v4 = v30;
    v5 = v31;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v24 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v9 = (v5 - 1) & v5;
      v10 = __clz(__rbit64(v5)) | (v4 << 6);
      v11 = v4;
      goto LABEL_29;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v13 >= v24)
      goto LABEL_36;
    v14 = *(_QWORD *)(v25 + 8 * v13);
    v11 = v4 + 1;
    if (!v14)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v24)
        goto LABEL_36;
      v14 = *(_QWORD *)(v25 + 8 * v11);
      if (!v14)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v24)
          goto LABEL_36;
        v14 = *(_QWORD *)(v25 + 8 * v11);
        if (!v14)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v24)
            goto LABEL_36;
          v14 = *(_QWORD *)(v25 + 8 * v11);
          if (!v14)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v24)
              goto LABEL_36;
            v14 = *(_QWORD *)(v25 + 8 * v11);
            if (!v14)
            {
              v15 = v4 + 6;
              while (v24 != v15)
              {
                v14 = *(_QWORD *)(v25 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              outlined consume of Set<NearbyGroupMember>.Iterator._Variant();
              return (uint64_t)v26;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = (char *)*(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_36;
    while (1)
    {
      v16 = v1;
      v17 = *(_QWORD *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
      v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8];
      v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
      v20 = *(_QWORD *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();

      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        v26 = (_QWORD *)result;
      }
      v22 = v26[2];
      v21 = v26[3];
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v26);
        v26 = (_QWORD *)result;
      }
      v26[2] = v22 + 1;
      v23 = &v26[4 * v22];
      v23[4] = v17;
      v23[5] = v18;
      v23[6] = v19;
      v23[7] = v20;
      v4 = v11;
      v5 = v9;
      v1 = v16;
      if ((v16 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NearbyGroupMember();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v32;
        swift_unknownObjectRelease();
        v11 = v4;
        v9 = v5;
        if (v32)
          continue;
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t NearbyGroupTable.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NearbyGroupTable.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NearbyGroupTable.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject();
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  v9 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(_QWORD *)(v7 + v9) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return v7;
}

uint64_t NearbyGroupTable.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE6A10], v1);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  v9 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(_QWORD *)(v0 + v9) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return v0;
}

_QWORD *one-time initialization function for shared()
{
  _QWORD *result;

  result = specialized NearbyInvitationsController.__allocating_init(provider:)(1);
  static NearbyInvitationsController.shared = (uint64_t)result;
  return result;
}

uint64_t static NearbyInvitationsController.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t NearbyInvitationsController.groups.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for NearbyInvitationsController.groups : NearbyInvitationsController@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyInvitationsController.groups : NearbyInvitationsController()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t NearbyInvitationsController.groups.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*NearbyInvitationsController.groups.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

void NearbyInvitationsController.groups.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t NearbyInvitationsController.$groups.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path getter for NearbyInvitationsController.$groups : NearbyInvitationsController()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for NearbyInvitationsController.$groups : NearbyInvitationsController(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t NearbyInvitationsController.$groups.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*NearbyInvitationsController.$groups.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationsController.$groups.modify;
}

void NearbyInvitationsController.$groups.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t NearbyInvitationsController.approvalRequests.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t NearbyInvitationsController.approvalRequests.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*NearbyInvitationsController.approvalRequests.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

BOOL static NearbyInvitationsController.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void NearbyInvitationsController.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int NearbyInvitationsController.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t NearbyInvitationsController.groupTable.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NearbyInvitationsController.__allocating_init(dataSource:queue:provider:));
}

uint64_t NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NearbyInvitationsController.init(dataSource:queue:provider:));
}

uint64_t NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v12;

  ObjectType = swift_getObjectType();
  v12 = a5(a1, a3, a4, v5, ObjectType, a2);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t NearbyInvitationsController.createGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t NearbyInvitationsController.createGroup(with:)()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  type metadata accessor for NearbyGroupConnectionInfo(0);
  *v2 = v0;
  v2[1] = NearbyInvitationsController.createGroup(with:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsController.createGroup(with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v9 - 8);
  v23 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(a2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, v15, v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_166;
  v18 = _Block_copy(aBlock);
  v19 = a3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v11, v8, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t ObjectType;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v29 = v8;
  v30 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v26 = a2;
    v13 = swift_slowAlloc();
    v27 = a3;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v28 = v6;
    v16 = (_QWORD *)v15;
    *(_DWORD *)v14 = 138412290;
    v31 = v10;
    v17 = v10;
    a2 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v16 = v10;

    _os_log_impl(&dword_242981000, v11, v12, "NearbyInvitationsController received request to create group %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v18 = v16;
    v6 = v28;
    MEMORY[0x2494EA95C](v18, -1, -1);
    v19 = v14;
    a3 = v27;
    MEMORY[0x2494EA95C](v19, -1, -1);

  }
  else
  {

  }
  v20 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v30, a3, v6);
  v23 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v23, v22, v6);
  (*(void (**)(id, void *(*)(void *, void *), uint64_t, uint64_t, uint64_t))(v20 + 32))(v10, partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:), v24, ObjectType, v20);
  return swift_release();
}

void *closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *result, id a2)
{
  id v2;
  id v3;

  if (result)
  {
    v2 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    v3 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NearbyInvitationsController.addObserver(_:)()
{
  swift_getObjectType();
  return specialized NearbyInvitationsController.addObserver(_:)();
}

uint64_t NearbyInvitationsController.removeObserver(_:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_251370AB8, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestApproval(with:completion:), (uint64_t)&block_descriptor_0);
}

uint64_t closure #1 in NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v21;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21 = v13;
    *(_DWORD *)v12 = 136315138;
    type metadata accessor for InvitationApprovalRequest();
    v14 = a4;
    v15 = v9;
    v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "NearbyInvitationsController requestApproval with %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  v18 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 40))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a2) + 0x80))();
  v5 = v4;
  NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(a1, v3, v4);
  return outlined consume of Data._Representation(v3, v5);
}

uint64_t NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v4 + 32);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = v4;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24_0;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  swift_retain();
  outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v9, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v21;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21 = v13;
    *(_DWORD *)v12 = 136315138;
    type metadata accessor for NearbyAdvertisement(0);
    v14 = a4;
    v15 = v9;
    v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "NearbyInvitationsController approving connection request of advertisement %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  v18 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 176))(v9, a3, a4, ObjectType, v18);
}

uint64_t closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v16;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for NearbyAdvertisement(0);
    v10 = v5;
    v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v6, v7, "NearbyInvitationsController approving connection request of advertisement %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v9, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);

  }
  else
  {

  }
  v13 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 184))(v5, ObjectType, v13);
}

uint64_t NearbyInvitationsController.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v24 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v5 + 32);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v5;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_30_0;
  v18 = _Block_copy(aBlock);
  v19 = a1;
  v20 = a2;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v11, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;

  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = a1;
  v12 = a2;
  v13 = v11;
  v14 = v12;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v29 = v18;
    *(_DWORD *)v17 = 136315394;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    v28 = a5;
    v19 = v13;
    v20 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    type metadata accessor for InvitationJoinResponse();
    v22 = v14;
    v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v15, v16, "NearbyInvitationsController requested approval of pendingMember %s with response: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v18, -1, -1);
    MEMORY[0x2494EA95C](v17, -1, -1);

  }
  else
  {

  }
  v25 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 48))(v13, v14, a4, a5, ObjectType, v25);
}

uint64_t NearbyInvitationsController.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_251370BA8, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.reject(pendingMember:completion:), (uint64_t)&block_descriptor_36_0);
}

uint64_t NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v9 = v6;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v16 - 8);
  v25 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v9 + 32);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = v9;
  v19[4] = a2;
  v19[5] = a3;
  aBlock[4] = a5;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a6;
  v20 = _Block_copy(aBlock);
  v21 = a1;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v25);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v19;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    v19 = a3;
    v14 = a4;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    a4 = v14;
    a3 = v19;
    _os_log_impl(&dword_242981000, v10, v11, "NearbyInvitationsController rejecting pending member %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  v16 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v9, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2)
{
  return NearbyInvitationsController.generateNearbyInvitation(response:)(a1, a2, (uint64_t)&unk_251370BF8, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:), (uint64_t)&block_descriptor_42_0);
}

uint64_t closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_242981000, v7, v8, "NearbyInvitationsController generateNearbyInvitiation", v9, 2u);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }

  v10 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(*(_QWORD *)(a1 + 40), a2, a3, ObjectType, v10);
}

uint64_t NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v19;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_242981000, v12, v13, "Utilization of deprecated SPI advertiseNearbyInvitation.", v14, 2u);
    MEMORY[0x2494EA95C](v14, -1, -1);
  }

  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v4;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  swift_retain();
  v17 = a1;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), (uint64_t)v16);
  return swift_release();
}

{
  return NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_251370C70, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), (uint64_t)&block_descriptor_52);
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v8 = type metadata accessor for UUID();
  v7[8] = v8;
  v7[9] = *(_QWORD *)(v8 - 8);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 32)
                                                  + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable)
                                    + 160)
                         + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 32)
                                                   + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable)
                                     + 160));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  _BYTE *v21;
  uint64_t *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 16);
  v2(*(_QWORD *)(v0 + 88), v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier, *(_QWORD *)(v0 + 64));
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName + 8);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  v6 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  v7 = v5;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = static NearbyInvitationsController.shared;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>);
  swift_allocObject();
  swift_retain();
  v12 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(v10, v3, v4, v7, 0, 0xF000000000000000, v11, v9);
  swift_release();
  swift_release();

  if (!v8)
  {
    v13 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 48);
    v26 = *(_QWORD *)(v0 + 56);
    v16 = v2(v13, v12 + direct field offset for NearbyInvitation.id, v15);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 160))(v16);
    v19 = v18;
    v20 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
    v21 = objc_allocWithZone(v20);
    v2((uint64_t)&v21[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], v13, v15);
    v22 = (uint64_t *)&v21[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
    *v22 = v17;
    v22[1] = v19;
    v21[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = 2;
    *(_DWORD *)&v21[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = 1;
    *(_QWORD *)(v0 + 16) = v21;
    *(_QWORD *)(v0 + 24) = v20;
    v23 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(v23, v25, v26);

    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19 = a4;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x80000002429DCF30, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v12, -1, -1);
    v15 = v11;
    a4 = v19;
    MEMORY[0x2494EA95C](v15, -1, -1);
  }

  v16 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 72))(a2, *(_QWORD *)(a1 + 40), a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_251370CC0, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:), (uint64_t)&block_descriptor_58);
}

uint64_t NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v23[0] = a6;
  v8 = v6;
  v12 = *v8;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v16 - 8);
  v25 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = v8[4];
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v8;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  v19[6] = v12;
  aBlock[4] = a5;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v23[0];
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v27 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v25);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19 = a4;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000002429DBF10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v12, -1, -1);
    v15 = v11;
    a4 = v19;
    MEMORY[0x2494EA95C](v15, -1, -1);
  }

  v16 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 80))(a2, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_251370D10, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:), (uint64_t)&block_descriptor_64);
}

uint64_t closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v23 = v13;
    *(_DWORD *)v12 = 136315138;
    v22 = a3;
    v14 = a4;
    v15 = *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    v16 = *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8];
    swift_bridgeObjectRetain();
    v17 = v15;
    a2 = v21;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    a3 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "Requesting to mark pseudonym %s as used.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  v18 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 104))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v5 = v4;
  v27 = a3;
  v28 = a4;
  v26 = a2;
  v31 = type metadata accessor for DispatchWorkItemFlags();
  v34 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v5 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v15, v14, v11);
  *(_QWORD *)(v18 + v16) = v5;
  v19 = v27;
  *(_QWORD *)(v18 + v17) = v26;
  v20 = (_QWORD *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  v21 = v28;
  *v20 = v19;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_70;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v35 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v24 = v30;
  v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v10, v24, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v30 = a4;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v31 = a5;
    v19 = v18;
    v34 = v18;
    v28 = a1;
    v29 = a3;
    *(_DWORD *)v17 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    a1 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_242981000, v14, v15, "Requesting to assert invitation %s as public.", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    a5 = v31;
    MEMORY[0x2494EA95C](v22, -1, -1);
    v23 = v17;
    a4 = v30;
    MEMORY[0x2494EA95C](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  v24 = *(_QWORD *)(v32 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 112))(a1, a3, a4, a5, ObjectType, v24);
}

uint64_t NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  void *v24;
  uint64_t v25;
  char *v26;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v3 = v2;
  v30 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v28 - v15;
  v28[1] = *(_QWORD *)(v3 + 32);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)v28 - v15, a2, v10);
  v17(v14, a1, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject();
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v23(v22 + v19, v16, v10);
  *(_QWORD *)(v22 + v20) = v3;
  v23(v22 + v21, v14, v10);
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_76;
  v24 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v26 = v29;
  v25 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v9, v26, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v23 = a2;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v27 = v15;
    v24 = a1;
    v25 = a3;
    *(_DWORD *)v14 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v27);
    a1 = v24;
    a3 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_242981000, v11, v12, "Request to release assertion identifier: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v15, -1, -1);
    v18 = v14;
    a2 = v23;
    MEMORY[0x2494EA95C](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  v19 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 120))(a3, a1, ObjectType, v19);
}

uint64_t NearbyInvitationsController.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_251370E00, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.releaseInvitation(_:response:), (uint64_t)&block_descriptor_82);
}

uint64_t closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v23 = v13;
    *(_DWORD *)v12 = 136315138;
    v22 = a3;
    v14 = a4;
    v15 = *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    v16 = *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8];
    swift_bridgeObjectRetain();
    v17 = v15;
    a2 = v21;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    a3 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v10, v11, "Requesting to release invitation from pseudonym %s.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

  }
  else
  {

  }
  v18 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 128))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_242981000, v7, v8, "Utilization of deprecated SPI stopAdvertisingNearbyInvitation.", v9, 2u);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }

  return NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(a1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier, a2, a3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v4 = v3;
  v25 = a2;
  v26 = a3;
  v24 = *v3;
  v28 = type metadata accessor for DispatchWorkItemFlags();
  v31 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v4[4];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  v18 = (_QWORD *)(v17 + v16);
  v19 = v26;
  *v18 = v25;
  v18[1] = v19;
  *(_QWORD *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_88;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v21 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v19 = a4;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002429DBEE0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v12, -1, -1);
    v15 = v11;
    a4 = v19;
    MEMORY[0x2494EA95C](v15, -1, -1);
  }

  v16 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 88))(a2, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = v3[4];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_94;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v16;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002429DBEB0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v7, v8, "%s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v10, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }

  v13 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(a2, a3, ObjectType, v13);
}

uint64_t NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v4 = v3;
  v24 = a2;
  v25 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v4 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  v19 = (_QWORD *)(v18 + v17);
  v20 = v25;
  *v19 = v24;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_100;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_242981000, v9, v10, "NearbyInvitationsController scanNearbyInvitations", v11, 2u);
    MEMORY[0x2494EA95C](v11, -1, -1);
  }

  v12 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 136))(a2, a3, a4, ObjectType, v12);
}

uint64_t NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v5 = v4;
  v24 = a3;
  v25 = a4;
  v26 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v27 = *(_QWORD *)(v5 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v13);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v17 + v16, (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v18 = (_QWORD *)(v17 + ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  v19 = v25;
  *v18 = v24;
  v18[1] = v19;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_106;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v31 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v22 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_242981000, v11, v12, "NearbyInvitationsController scan nearby endpoints", v13, 2u);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }

  v14 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 144))(a2, a3, a4, a5, ObjectType, v14);
}

uint64_t NearbyInvitationsController.stopScanningNearbyInvitations(response:)(uint64_t a1, uint64_t a2)
{
  return NearbyInvitationsController.generateNearbyInvitation(response:)(a1, a2, (uint64_t)&unk_251370F90, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:), (uint64_t)&block_descriptor_112);
}

uint64_t NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v8 = v5;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v8 + 32);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v8;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a5;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_242981000, v7, v8, "NearbyInvitationsController stopScanningNearbyInvitations", v9, 2u);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }

  v10 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 152))(*(_QWORD *)(a1 + 40), a2, a3, ObjectType, v10);
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;

  if (one-time initialization token for client != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_242981000, v9, v10, "Utilization of deprecated SPI requestConnection.", v11, 2u);
    MEMORY[0x2494EA95C](v11, -1, -1);
  }

  v12 = *(void **)(a2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  swift_retain();
  NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, v12, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:), v13);
  return swift_release();
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_251371008, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:), (uint64_t)&block_descriptor_121);
}

uint64_t closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_242981000, v11, v12, "NearbyInvitationsController requestConnection", v13, 2u);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }

  v14 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 160))(a2, a3, a4, a5, ObjectType, v14);
}

uint64_t NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_251371058, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:), (uint64_t)&block_descriptor_127);
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v25[0] = a7;
  v9 = v7;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v28 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v26 = *(_QWORD *)(v17 - 8);
  v27 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v9 + 32);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v9;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  aBlock[4] = a6;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v25[0];
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = a1;
  v23 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v29 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t ObjectType;

  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_242981000, v11, v12, "NearbyInvitationsController requestEndpointConnection", v13, 2u);
    MEMORY[0x2494EA95C](v13, -1, -1);
  }

  v14 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 168))(a2, a3, a4, a5, ObjectType, v14);
}

void NearbyInvitationsController.requestJoiningSession(with:response:)(uint64_t a1, void (*a2)(void))
{
  void *v3;
  _BYTE *v4;

  lazy protocol witness table accessor for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors();
  v3 = (void *)swift_allocError();
  *v4 = 2;
  a2();

}

uint64_t NearbyInvitationsController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t NearbyInvitationsController.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall NearbyInvitationsController.didReceiveUpdatedGroups(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  Swift::OpaquePointer *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v29 = v2;
    v13 = swift_slowAlloc();
    v32 = v4;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v30 = v8;
    v16 = v15;
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v31 = v7;
    v17 = type metadata accessor for NearbyGroupConnectionInfo(0);
    v18 = swift_bridgeObjectRetain();
    v19 = MEMORY[0x2494E9F90](v18, v17);
    v21 = v20;
    swift_bridgeObjectRelease();
    v22 = v19;
    v2 = v29;
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, aBlock);
    v7 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v11, v12, "NearbyInvitationsController: didReceiveUpdatedGroups %s", v14, 0xCu);
    swift_arrayDestroy();
    v23 = v16;
    v8 = v30;
    MEMORY[0x2494EA95C](v23, -1, -1);
    v24 = v14;
    v4 = v32;
    MEMORY[0x2494EA95C](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v25 = (Swift::OpaquePointer *)swift_allocObject();
  v25[2]._rawValue = v2;
  v25[3]._rawValue = a1._rawValue;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:);
  aBlock[5] = (uint64_t)v25;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_133;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v27 = v33;
  static DispatchQoS.unspecified.getter();
  v35 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v27, v7, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v8);
  swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  isUniquelyReferenced_nonNull_native = type metadata accessor for UUID();
  v5 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
  MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (a2 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    v35 = v8;
    swift_retain();
    return static Published.subscript.setter();
  }
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_25;
LABEL_3:
  v30 = a1;
  v31 = v9;
  v32 = (id *)a2;
  v33 = a2 & 0xC000000000000001;
  v10 = 4;
  while (1)
  {
    v13 = v10 - 4;
    if (v33)
    {
      v14 = (char *)MEMORY[0x2494EA260](v10 - 4, a2);
      v15 = v10 - 3;
      if (__OFADD__(v13, 1))
        goto LABEL_21;
    }
    else
    {
      v14 = (char *)*(id *)(a2 + 8 * v10);
      v15 = v10 - 3;
      if (__OFADD__(v13, 1))
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    v34 = v15;
    v16 = v14;
    a1 = v5;
    a2 = *(_QWORD *)(v5 + 16);
    v5 = isUniquelyReferenced_nonNull_native;
    ((void (*)(char *, char *, uint64_t))a2)(v7, &v14[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id], isUniquelyReferenced_nonNull_native);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = v8;
    v17 = (uint64_t)v7;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    v20 = v8[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_22;
    v23 = v18;
    if (v8[3] < v22)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
LABEL_17:
    isUniquelyReferenced_nonNull_native = v5;
    v8 = v35;
    v5 = a1;
    if ((v23 & 1) != 0)
    {
      v11 = v35[7];
      v12 = 8 * v19;

      *(_QWORD *)(v11 + v12) = v16;
      v7 = (char *)v17;
    }
    else
    {
      v35[(v19 >> 6) + 8] |= 1 << v19;
      v7 = (char *)v17;
      ((void (*)(unint64_t, uint64_t, uint64_t))a2)(v8[6] + *(_QWORD *)(a1 + 72) * v19, v17, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v8[7] + 8 * v19) = v16;
      v26 = v8[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_23;
      v8[2] = v28;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(a1 + 8))(v7, isUniquelyReferenced_nonNull_native);
    ++v10;
    a2 = (unint64_t)v32;
    if (v34 == v31)
      goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
  if ((v23 & 1) == (v25 & 1))
  {
    v19 = v24;
    goto LABEL_17;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NearbyInvitationsController.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v3;

    _os_log_impl(&dword_242981000, v4, v5, "NearbyInvitationsController didReceiveInvitationApprovalRequest %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

  }
  swift_beginAccess();
  swift_retain();
  PassthroughSubject.send(_:)();
  return swift_release();
}

void NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
  NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(a1, "NearbyInvitationsController didDiscoverNearbyAdvertisement %@");
}

uint64_t NearbyInvitationsController.notifyObservers(with:)()
{
  uint64_t result;

  result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

void NearbyInvitationsController.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
  NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(a1, "NearbyInvitationsController didLoseNearbyAdvertisement %@");
}

void NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(void *a1, const char *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  _QWORD *v11;

  if (one-time initialization token for client != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v5;

    _os_log_impl(&dword_242981000, v6, v7, a2, v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v11, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);

  }
  else
  {

  }
  v10 = v5;
  specialized NearbyInvitationsController.notifyObservers(with:)();

}

void NearbyInvitationsController.didReceiveConnectionRequest(advertisement:)(void *a1)
{
  NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(a1, "NearbyInvitationsController didReceiveConnectionRequest %@");
}

uint64_t NearbyInvitationsController.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for client != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  outlined copy of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a3, a4);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    outlined copy of Data._Representation(a3, a4);
    v11 = Data.description.getter();
    v13 = v12;
    outlined consume of Data._Representation(a3, a4);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl(&dword_242981000, v7, v8, "NearbyInvitationsController didDiscoverNearbySessionInvitation %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v10, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  outlined copy of Data._Representation(a3, a4);
  swift_bridgeObjectRetain();
  specialized NearbyInvitationsController.notifyObservers(with:)();
  outlined consume of Data._Representation(a3, a4);
  return swift_bridgeObjectRelease();
}

void closure #1 in NearbyInvitationsController.didDiscoverNearbySessionInvitation(id:invitation:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  Class isa;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_didDiscoverNearbySessionInvitationWithId_invitation_) & 1) != 0)
  {
    swift_unknownObjectRetain();
    v14 = (void *)MEMORY[0x2494E9EDC](a2, a3);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, sel_didDiscoverNearbySessionInvitationWithId_invitation_, v14, isa);
    swift_unknownObjectRelease();

  }
  v16 = specialized static NearbyInvitationData.create(from:)(a4, a5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v10);
  v28 = *(id *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo];
  v17 = UUID.uuidString.getter();
  v26 = v18;
  v27 = v17;
  v19 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  v20 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName + 8];
  v21 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  v22 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8];
  v24 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  v23 = *(_QWORD *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8];
  objc_allocWithZone((Class)type metadata accessor for NearbySessionInvitation());
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v24, v23);
  v25 = NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)((uint64_t)v13, 1, (uint64_t)v28, v27, v26, v19, v20, v21, v22, v21, v22, v24, v23);
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_didDiscoverNearbySessionInvitationWithInvitation_) & 1) != 0)
    objc_msgSend(a1, sel_didDiscoverNearbySessionInvitationWithInvitation_, v25);

}

void NearbyInvitationsController.didDisconnect(client:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_242981000, oslog, v1, "NearbyInvitationsController didDisconnect", v2, 2u);
    MEMORY[0x2494EA95C](v2, -1, -1);
  }

}

void NearbyInvitationsController.didReceiveSessionJoinResponse(response:)(void *a1)
{
  NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(a1, "NearbyInvitationsController didReceiveSessionJoinResponse %@");
}

uint64_t closure #1 in NearbyInvitationsController.notifyObservers(with:)(uint64_t *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*(id *)(a2 + 56), sel_allObjects);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsControllerObserver);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v4;
  return swift_bridgeObjectRelease();
}

void protocol witness for NearbyInvitationServiceClientDelegate.didDisconnect(client:) in conformance NearbyInvitationsController()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for client != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_242981000, oslog, v1, "NearbyInvitationsController didDisconnect", v2, 2u);
    MEMORY[0x2494EA95C](v2, -1, -1);
  }

}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v12;
  void *v13;
  void (*v14)(void *);
  _QWORD *v15;
  id v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  id v30[9];
  _BYTE v31[32];
  _QWORD v32[2];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x88))();
    if (v5)
    {
      v6 = (void *)v5;
      v8 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
      swift_bridgeObjectRetain();

      v9 = direct field offset for NearbyInvitation.invitationHostInfo;
      v10 = (_QWORD *)(*(_QWORD *)(v3 + direct field offset for NearbyInvitation.invitationHostInfo)
                     + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      if (v8 == *v10 && v7 == v10[1])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
          return swift_release();
      }
      swift_weakInit();
      v13 = *(void **)(v3 + v9);
      v14 = *(void (**)(void *))((*v4 & *a1) + 0x90);
      v15 = a1;
      swift_retain();
      v16 = v13;
      v14(v13);

      v30[0] = v15;
      swift_weakAssign();
      swift_release();
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v30, (uint64_t)v32, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
      v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 184))(v31);
      v19 = v18;
      v20 = *v18;
      Hasher.init(_seed:)();
      v21 = (void *)v32[0];
      swift_bridgeObjectRetain();
      v22 = v21;
      NSObject.hash(into:)();

      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v20 + 32);
      v25 = v23 & ~v24;
      if (((*(_QWORD *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
      {
        v26 = ~v24;
        type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        while (1)
        {
          outlined init with copy of (UUID, Bool)(*(_QWORD *)(v20 + 48) + 16 * v25, (uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
          v27 = static NSObject.== infix(_:_:)();
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
          if ((v27 & 1) != 0)
            break;
          v25 = (v25 + 1) & v26;
          if (((*(_QWORD *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        outlined init with copy of (UUID, Bool)((uint64_t)v32, (uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
        v29 = *v19;
        *v19 = 0x8000000000000000;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v30, v25, isUniquelyReferenced_nonNull_native);
        *v19 = v29;
      }
      swift_bridgeObjectRelease();
      outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v32, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
      v17(v31, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v38 = a1;
  v44 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v44 - 8);
  v7 = MEMORY[0x24BDAC7A8](v44);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v37 - v10;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v12 = result;
  v37 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v38;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v40 = v9;
  v16 = v41;
  v17 = v44;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v43 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v37)
        return v12;
      v21 = v38[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v37)
          return v12;
        v21 = v38[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v37)
            return v12;
          v21 = v38[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v37)
              return v12;
            v21 = v38[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v37)
                  return v12;
                v21 = v38[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v43 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v16, *(_QWORD *)(a4 + 48) + v25 * v19, v17);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27 = v40;
    v26(v40, v16, v17);
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    v26((char *)(*(_QWORD *)(v12 + 48) + v31 * v25), v27, v44);
    result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v14;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (result + 1) & v11;
      v12 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v10 * v12;
        v17 = v13;
        v31(v7, *(_QWORD *)(a2 + 48) + v10 * v12, v4);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (a1 * v15 < v16
              || *(_QWORD *)(a2 + 48) + a1 * v15 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a1 * v15 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            result = v22 + 8 * a1;
            if (a1 < (uint64_t)v10 || result >= v22 + 8 * v10 + 8)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v12 = v15;
              v13 = v17;
            }
            else
            {
              v23 = a1 == v10;
              a1 = v10;
              v12 = v15;
              v13 = v17;
              if (!v23)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                v12 = v15;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = *(_QWORD *)(v12 + 24);
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NearbyGroupTable.WeakNearbyGroup();
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NearbyGroupTable.WeakNearbyGroup();
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  *(_QWORD *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  v7 = *(_QWORD *)(a4 + 48);
  v8 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a2, v8);
  result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
  v10 = *(_QWORD *)(a4 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v12;
  return result;
}

_QWORD *specialized NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a2;
  v28 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Lock();
  swift_allocObject();
  a4[6] = Lock.init()();
  a4[7] = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  v17 = (char *)a4 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v29 = MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  v18 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  swift_allocObject();
  *(_QWORD *)((char *)a4 + v18) = PassthroughSubject.init()();
  v19 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  type metadata accessor for NearbyGroupTable(0);
  v20 = swift_allocObject();
  v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 1, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE6A10], v6);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  v22 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(_QWORD *)(v20 + v22) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)a4 + v19) = v20;
  a4[2] = a1;
  a4[3] = &protocol witness table for NearbyInvitationServiceClient;
  v23 = v28;
  a4[4] = v27;
  a4[5] = v23;
  v24 = a1 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(_QWORD *)(v24 + 8) = &protocol witness table for NearbyInvitationsController;
  swift_unknownObjectWeakAssign();
  return a4;
}

uint64_t specialized NearbyInvitationsController.addObserver(_:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t specialized NearbyInvitationsController.notifyObservers(with:)()
{
  uint64_t result;

  result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _BYTE v28[8];

  v23 = a2;
  v24 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = *(_QWORD *)(a3 + 64);
  v25 = 0;
  v26 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_5;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v27)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
    v20 = *(_QWORD *)(v26 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v27)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
      v20 = *(_QWORD *)(v26 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v27)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
        v20 = *(_QWORD *)(v26 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v15 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    v18 = closure #1 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)((uint64_t)v10, (uint64_t)v28, a4);
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v28);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v27)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
  v20 = *(_QWORD *)(v26 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v27)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, v23, v25, a3);
    v20 = *(_QWORD *)(v26 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x2494EA95C](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v23)
        return swift_release();
      v19 = *(_QWORD *)(v22 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v23)
          return swift_release();
        v19 = *(_QWORD *)(v22 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 3;
          if (v18 + 3 >= v23)
            return swift_release();
          v19 = *(_QWORD *)(v22 + 8 * v12);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = &v6[*(int *)(v4 + 48)];
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    a2(v6, v17);
    result = outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  }
  v20 = v18 + 4;
  if (v20 >= v23)
    return swift_release();
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v23)
      return swift_release();
    v19 = *(_QWORD *)(v22 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *specialized NearbyInvitationsController.__allocating_init(provider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v22 = a1;
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v20 = *(_QWORD *)(v1 - 8);
  v21 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v23 = 0xD000000000000026;
  v24 = 0x80000002429DCF60;
  UUID.init()();
  v10 = UUID.uuidString.getter();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v3, *MEMORY[0x24BEE5750], v21);
  v14 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (one-time initialization token for shared != -1)
    swift_once();
  v15 = (void *)static NearbyInvitationServiceClient.shared;
  type metadata accessor for NearbyInvitationsController(0);
  v16 = (_QWORD *)swift_allocObject();
  v17 = v15;
  return specialized NearbyInvitationsController.init(dataSource:queue:provider:)((uint64_t)v17, v14, v22, v16);
}

_QWORD *specialized NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void (*v27)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a5;
  v33 = a2;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v9 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Lock();
  swift_allocObject();
  a4[6] = Lock.init()();
  a4[7] = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  v19 = (char *)a4 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v36 = MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  v20 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  swift_allocObject();
  *(_QWORD *)((char *)a4 + v20) = PassthroughSubject.init()();
  v21 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  type metadata accessor for NearbyGroupTable(0);
  v22 = swift_allocObject();
  v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE6A10], v32);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  v24 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(_QWORD *)(v22 + v24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)((char *)a4 + v21) = v22;
  a4[2] = a1;
  a4[3] = a6;
  v26 = v33;
  v25 = v34;
  a4[4] = v33;
  a4[5] = v25;
  v27 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a6 + 16);
  swift_unknownObjectRetain_n();
  v28 = v26;
  v29 = swift_retain();
  v27(v29, &protocol witness table for NearbyInvitationsController, v35, a6);
  swift_unknownObjectRelease();

  return a4;
}

_QWORD *specialized NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;

  v11 = (_QWORD *)swift_allocObject();
  return specialized NearbyInvitationsController.init(dataSource:queue:provider:)(a1, a2, a3, v11, a5, a6);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.createGroup(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyInvitationsController.createGroup(with:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for NearbyGroupConnectionInfo(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupConnectionInfo);
}

id partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)((SEL *)&selRef_removeObject_);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestApproval(with:completion:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.requestApproval(with:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_24299FAB0()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t specialized NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(_QWORD *)(v2 + 32);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = v2;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_160;
  v14 = _Block_copy(aBlock);
  v15 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v5, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_24299FCE4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_24299FD3C()
{
  return objectdestroy_38Tm_0();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)()
{
  uint64_t *v0;

  return closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_24299FD50()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:));
}

uint64_t objectdestroy_48Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_24299FE7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_24299FF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (v3 + ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  swift_release();
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(v0 + v3, *(_QWORD *)(v0 + v4), v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_2429A00A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_2429A0194()
{
  return objectdestroy_38Tm_0();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)()
{
  uint64_t *v0;

  return closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_4Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_2429A0288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *v3, v3[1]);
}

uint64_t sub_2429A036C()
{
  return objectdestroy_38Tm_0();
}

uint64_t objectdestroy_38Tm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)()
{
  uint64_t *v0;

  return closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_2429A03B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:));
}

uint64_t objectdestroy_117Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationsController.Errors, &type metadata for NearbyInvitationsController.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationsController.Errors, &type metadata for NearbyInvitationsController.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.notifyObservers(with:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.notifyObservers(with:)(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2429A054C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
}

uint64_t sub_2429A0578@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Strong;
  uint64_t result;
  _BYTE v4[8];

  outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
  Strong = swift_weakLoadStrong();
  result = outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v4);
  *a1 = Strong;
  return result;
}

uint64_t sub_2429A05BC()
{
  return swift_weakAssign();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.scanNearbyEndpoints(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.requestConnection(with:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t ObjC metadata update function for NearbyGroupCreationRequest()
{
  return type metadata accessor for NearbyGroupCreationRequest(0);
}

uint64_t type metadata accessor for NearbyGroupCreationRequest(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupCreationRequest);
}

uint64_t type metadata completion function for NearbyGroupCreationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyGroupCreationRequest(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58]);
}

uint64_t method lookup function for NearbyGroupCreationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroupCreationRequest.__allocating_init(id:members:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupCreationRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ObjC metadata update function for NearbyGroupConnectionInfo()
{
  return type metadata accessor for NearbyGroupConnectionInfo(0);
}

uint64_t type metadata completion function for NearbyGroupConnectionInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyGroupConnectionInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroupConnectionInfo.__allocating_init(id:endpoint:localMember:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupConnectionInfo.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ObjC metadata update function for NearbyGroupTable()
{
  return type metadata accessor for NearbyGroupTable(0);
}

uint64_t type metadata accessor for NearbyGroupTable(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupTable);
}

uint64_t type metadata completion function for NearbyGroupTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyGroupCreationRequest(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BE19F00]);
}

uint64_t type metadata completion function for NearbyGroupCreationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyGroupTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 144) + *(_QWORD *)(*(_QWORD *)v1 + 144));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 152)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 152));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of NearbyGroupTable.firstGroup()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 160) + *(_QWORD *)(*(_QWORD *)v0 + 160));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t dispatch thunk of NearbyGroupTable.firstGroup()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of NearbyGroupTable.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyGroupTable.WeakNearbyGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for NearbyGroupTable.WeakNearbyGroup(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NearbyGroupTable.WeakNearbyGroup(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupTable.WeakNearbyGroup()
{
  return &type metadata for NearbyGroupTable.WeakNearbyGroup;
}

uint64_t ObjC metadata update function for NearbyInvitationsController()
{
  return type metadata accessor for NearbyInvitationsController(0);
}

uint64_t type metadata accessor for NearbyInvitationsController(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsController);
}

void type metadata completion function for NearbyInvitationsController()
{
  unint64_t v0;

  type metadata accessor for Published<[UUID : NearbyGroupConnectionInfo]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NearbyInvitationsController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t getEnumTagSinglePayload for NearbyInvitationsController.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationsController.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2429A0C10 + 4 * byte_2429D9775[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2429A0C44 + 4 * asc_2429D9770[v4]))();
}

uint64_t sub_2429A0C44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429A0C4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429A0C54);
  return result;
}

uint64_t sub_2429A0C60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429A0C68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2429A0C6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429A0C74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationsController.Errors()
{
  return &type metadata for NearbyInvitationsController.Errors;
}

uint64_t outlined init with copy of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakCopyInit();
}

uint64_t outlined destroy of NearbyGroupTable.WeakNearbyGroup(uint64_t a1)
{
  swift_weakDestroy();
  return a1;
}

uint64_t specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = v8;
  v32 = a5;
  v33 = a8;
  v30 = a2;
  v31 = a3;
  v37 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyInvitation<NearbyGroup>.PendingMember>>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v9 + *(_QWORD *)(*(_QWORD *)v9 + 144);
  v18 = MEMORY[0x24BEE4B08];
  v36 = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyInvitation<NearbyGroup>.PendingMember>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  *(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 + 152)) = v18;
  *(_QWORD *)(v9 + direct field offset for NearbyInvitation.invitationHostInfo) = a4;
  *(_QWORD *)(v9 + direct field offset for NearbyInvitation.controller) = a7;
  v19 = v9 + direct field offset for NearbyInvitation.id;
  v20 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v19, v37, v20);
  v21 = (_QWORD *)(v9 + direct field offset for NearbyInvitation.displayName);
  v22 = v31;
  v23 = v32;
  *v21 = v30;
  v21[1] = v22;
  v24 = (uint64_t *)(v9 + direct field offset for NearbyInvitation.userInfo);
  *v24 = v23;
  v24[1] = a6;
  v25 = a6;
  v26 = (_QWORD *)(v9 + direct field offset for NearbyInvitation.sourceProvider);
  v26[3] = type metadata accessor for NearbyGroup();
  v26[4] = &protocol witness table for NearbyGroup;
  *v26 = v33;
  v27 = (uint64_t *)(a7 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  v35 = *v27;
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  v28 = a4;
  swift_retain();
  outlined copy of Data?(v23, v25);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>, MEMORY[0x24BDB9CB0]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v20);
  return v9;
}

uint64_t sub_2429A0F94()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(_QWORD **a1)
{
  return specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(*a1);
}

uint64_t sub_2429A0FC4()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)()
{
  uint64_t v0;

  return closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id partial apply for closure #1 in NearbyInvitationsController.addObserver(_:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)((SEL *)&selRef_addObject_);
}

id partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)(SEL *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 16) + 56), *a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_2429A1048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_2429A10FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2494EA8A8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakTakeInit();
}

unint64_t lazy protocol witness table accessor for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup();
  if (!lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup())
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for Errors #1 in NearbyGroupTable.firstGroup(), &unk_251371438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup());
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup();
  if (!lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup())
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for Errors #1 in NearbyGroupTable.firstGroup(), &unk_251371438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup());
  }
  return result;
}

uint64_t outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void outlined consume of NearbyGroup.State(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t outlined assign with take of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakTakeAssign();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(a1, a2, v2);
}

uint64_t outlined init with copy of (UUID, Bool)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for Errors #1 in NearbyGroupTable.firstGroup()(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2429A133C + 4 * byte_2429D977A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2429A135C + 4 * byte_2429D977F[v4]))();
}

_BYTE *sub_2429A133C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2429A135C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429A1364(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429A136C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429A1374(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429A137C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Errors #1 in NearbyGroupTable.firstGroup()()
{
  return &unk_251371438;
}

uint64_t closure #1 in NearbyInvitationsController.notifyObservers(with:)partial apply()
{
  return partial apply for closure #1 in NearbyInvitationsController.notifyObservers(with:)();
}

uint64_t @objc NearbyInvitationAdvertiser.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a4;
  swift_retain();
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  outlined consume of Data._Representation(v5, v7);
  return swift_release();
}

BOOL static NearbyInvitationAdvertiser.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationAdvertiser.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int NearbyInvitationAdvertiser.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationAdvertiser<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NearbyInvitationAdvertiser.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationAdvertiser<A>.Errors()
{
  char *v0;

  return NearbyInvitationAdvertiser.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationAdvertiser<A>.Errors(uint64_t a1)
{
  char *v1;

  NearbyInvitationAdvertiser.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationAdvertiser<A>.Errors()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  NearbyInvitationAdvertiser.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(uint64_t *);
  id v22;
  uint64_t (*v23)(uint64_t *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[7];
  id v33[3];

  v2 = v1;
  v4 = *v2;
  if (one-time initialization token for client != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.client);
  swift_retain_n();
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v29 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)v9 = 136315394;
    v33[0] = v2;
    v10 = *(_QWORD *)(v4 + 88);
    v30 = *(_QWORD *)(v4 + 80);
    v12 = type metadata accessor for NearbyInvitationAdvertiser(0, v30, v10, v11);
    v13 = >> prefix<A>(_:)((uint64_t)v33, v12);
    v33[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v33[0] = v6;
    v15 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v29 = v6;

    _os_log_impl(&dword_242981000, v7, v8, "%s did receive connection request for advertisement %@ about to insert pending invitation member", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v29, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v31, -1, -1);
    v16 = v9;
    v17 = v30;
    MEMORY[0x2494EA95C](v16, -1, -1);

  }
  else
  {
    swift_release_n();

    v17 = *(_QWORD *)(v4 + 80);
    v10 = *(_QWORD *)(v4 + 88);
  }
  v18 = (uint64_t *)(v2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  v19 = *v18;
  v20 = v18[1];
  v32[4] = (uint64_t)v6;
  v32[5] = v19;
  v32[6] = v20;
  v21 = *(uint64_t (**)(uint64_t *))(*v2 + 184);
  v22 = v6;
  outlined copy of Data._Representation(v19, v20);
  v23 = (uint64_t (*)(uint64_t *, _QWORD))v21(v32);
  v25 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v17, v10, v24);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v25);
  type metadata accessor for Set();
  Set.insert(_:)();
  v26 = v33[1];
  v27 = v33[2];

  outlined consume of Data._Representation((uint64_t)v26, (unint64_t)v27);
  return v23(v32, 0);
}

uint64_t NearbyInvitationAdvertiser.PendingMember.init(advertisement:invitationData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationAdvertiser.PendingMember);
}

void @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
  @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(a1, a2, a3, (void (*)(id))NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:));
}

void NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *);
  id v21;
  void (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  _QWORD v34[2];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[6];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for UUID();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8) >> 60 == 15)
  {
    __break(1u);
    goto LABEL_9;
  }
  lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v35 = v44[0];
  v36 = v44[1];
  v8 = v44[4];
  v37 = v44[3];
  v9 = v44[5];
  UUID.init()();
  v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8);
  if (!v11)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v12 = *v10;
  v13 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement(0));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v14 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)((uint64_t)v7, v12, v11, 1, v8, v9, v8, v9, v8, v9, 0, 0xF000000000000000, 0, 1, 0, 0, 0, 0);
  v15 = (uint64_t *)(v2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  v16 = *v15;
  v17 = v15[1];
  v18 = *(_QWORD *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 88);
  v38 = v14;
  v39 = v16;
  v40 = v17;
  v20 = *(uint64_t (**)(_QWORD *))(*v2 + 184);
  v21 = v14;
  outlined copy of Data._Representation(v16, v17);
  v22 = (void (*)(_QWORD *, _QWORD))v20(v44);
  v24 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v18, v19, v23);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v24);
  type metadata accessor for Set();
  Set.insert(_:)();
  v25 = v42;
  v26 = v43;

  outlined consume of Data._Representation(v25, v26);
  v22(v44, 0);
  if (one-time initialization token for client != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Log.client);
  v28 = v21;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v31 = 138412290;
    v34[1] = v9;
    v44[0] = v28;
    v33 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v32 = v28;

    _os_log_impl(&dword_242981000, v29, v30, "NearbyInvitationAdvertiser is sending pendingMember through %@", v31, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v32, -1, -1);
    MEMORY[0x2494EA95C](v31, -1, -1);
    swift_release();

    outlined consume of Data?(v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {

    swift_release();
    outlined consume of Data?(v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

void @objc NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)(uint64_t a1, uint64_t a2, void *a3)
{
  @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(a1, a2, a3, (void (*)(id))NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:));
}

void @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v5;

  v5 = a3;
  swift_retain();
  a4(v5);
  swift_release();

}

uint64_t static NearbyInvitationAdvertiser.PendingMember.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitationAdvertiser.PendingMember.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int NearbyInvitationAdvertiser.PendingMember.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NearbyInvitationAdvertiser.PendingMember.contactID.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(a1, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.displayName.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(a1, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.identifier.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.userInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo;
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

id NearbyInvitationAdvertiser.PendingMember.advertisement.getter()
{
  id *v0;

  return *v0;
}

void NearbyInvitationAdvertiser.PendingMember.advertisement.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*NearbyInvitationAdvertiser.PendingMember.advertisement.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t NearbyInvitationAdvertiser.PendingMember.invitationData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.invitationData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NearbyInvitationAdvertiser.PendingMember.invitationData.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

void NearbyInvitationAdvertiser.PendingMember.description.getter()
{
  void **v0;
  char *v1;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;

  v1 = (char *)*v0;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2108704;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  v4 = *(void **)&v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8];
  if (v4)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v5;
    v6._object = v4;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x80000002429DCF90;
    v7._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v7);
    v8 = v1;
    v9 = objc_msgSend(v8, sel_description);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);

    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x6361746E6F63202CLL;
    v14._object = (void *)0xED0000203A444974;
    String.append(_:)(v14);
    v15 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
    v16 = *(void **)&v8[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8];
    if (v16)
    {
      v17 = *v15;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = v17;
      v18._object = v16;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void NearbyInvitationAdvertiser.PendingMember.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSObject.hash(into:)();

}

uint64_t static NearbyInvitationAdvertiser.PendingMember.== infix(_:_:)()
{
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.approve()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *(_QWORD *)v0;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(v0 + 8);
  return swift_task_switch();
}

{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationAdvertiser.PendingMember.reject()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  specialized NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int NearbyInvitationAdvertiser.PendingMember.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, a2, a3, a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v4);
  v5 = type metadata accessor for Set();
  return Published.init(wrappedValue:)((uint64_t)&v7, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationAdvertiser<A>.PendingMember()
{
  Hasher.init(_seed:)();
  NearbyInvitationAdvertiser.PendingMember.hash(into:)();
  return Hasher._finalize()();
}

uint64_t key path getter for NearbyInvitationAdvertiser.pendingMembers : <A>NearbyInvitationAdvertiser<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyInvitationAdvertiser.pendingMembers : <A>NearbyInvitationAdvertiser<A>(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyInvitationAdvertiser.pendingMembers.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.pendingMembers.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*NearbyInvitationAdvertiser.pendingMembers.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

uint64_t key path setter for NearbyInvitationAdvertiser.$pendingMembers : <A>NearbyInvitationAdvertiser<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v6);
  type metadata accessor for Set();
  v7 = type metadata accessor for Published.Publisher();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 200))(v9);
}

uint64_t NearbyInvitationAdvertiser.$pendingMembers.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v3);
  type metadata accessor for Set();
  type metadata accessor for Published();
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t NearbyInvitationAdvertiser.$pendingMembers.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *v4;
  specialized NearbyInvitationAdvertiser.$pendingMembers.setter(a1, a2, a3, a4);
  v8 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v7);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v8);
  type metadata accessor for Set();
  v9 = type metadata accessor for Published.Publisher();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
}

void (*NearbyInvitationAdvertiser.$pendingMembers.modify(_QWORD *a1))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v5 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88), v4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v5);
  type metadata accessor for Set();
  v6 = type metadata accessor for Published.Publisher();
  v3[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[3] = malloc(v8);
  v3[4] = malloc(v8);
  NearbyInvitationAdvertiser.$pendingMembers.getter();
  return NearbyInvitationAdvertiser.$pendingMembers.modify;
}

void NearbyInvitationAdvertiser.$pendingMembers.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 24);
  v6 = *(void **)(*(_QWORD *)a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v6, v7);
    specialized NearbyInvitationAdvertiser.$pendingMembers.setter((uint64_t)v5, v9, v10, v11);
    v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
  }
  else
  {
    specialized NearbyInvitationAdvertiser.$pendingMembers.setter(*(_QWORD *)(*(_QWORD *)a1 + 32), a2, a3, a4);
    v12 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v12(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

_QWORD *NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  swift_allocObject();
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(a1, a3, a4);
}

_QWORD *NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(a1, a3, a4);
}

uint64_t NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:params:)(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  swift_allocObject();
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(a1, a3, a4, a5);
}

uint64_t NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(a1, a3, a4, a5);
}

char *NearbyInvitationAdvertiser.__allocating_init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  swift_allocObject();
  return specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(a1, a2, a4, a5, a6);
}

char *NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  return specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(a1, a2, a4, a5, a6);
}

uint64_t NearbyInvitationAdvertiser.start()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[4];
    v5 = v0[5];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    v0[2] = v4;
    v9 = type metadata accessor for NearbyInvitationAdvertiser(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v8);
    v10 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v9);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v2, v3, "%s: client called start on NearbyInvitationsAdvertiser", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[6] = v12;
  *v12 = v0;
  v12[1] = NearbyInvitationAdvertiser.start();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.start()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE1A010]), sel_init);
  v10 = objc_msgSend(v9, sel_wranglerHomePodBoopEnabled);

  if (v10 && (v11 = (void *)a2[4]) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v13 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v8, v5);
    v14 = v11;
    NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(v14, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.start(), v13);

  }
  else
  {
    v15 = (void *)a2[3];
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v17 = (v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v18 + 24) = *(_QWORD *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v16, v8, v5);
    *(_QWORD *)(v18 + v17) = a2;
    swift_retain();
    NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(v15, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.start(), v18);
  }
  return swift_release();
}

void closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *oslog;
  uint64_t v15;

  if (a1)
  {
    v2 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.client);
    v4 = a1;
    v5 = a1;
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = a1;
      v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v15;

      _os_log_impl(&dword_242981000, oslog, v6, "Could not start advertising %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v8, -1, -1);
      MEMORY[0x2494EA95C](v7, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.client);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_242981000, v11, v12, "Started advertising request through NearbyInvitationLisntener", v13, 2u);
      MEMORY[0x2494EA95C](v13, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationAdvertiser.stop()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[4];
    v5 = v0[5];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    v0[2] = v4;
    v9 = type metadata accessor for NearbyInvitationAdvertiser(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v8);
    v10 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v9);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v2, v3, "%s: client called stop on NearbyInvitationsAdvertiser", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[6] = v12;
  *v12 = v0;
  v12[1] = NearbyInvitationAdvertiser.stop();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stop()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unsigned int v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v3 = *a2;
  v24 = a1;
  v25 = v3;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE1A010]), sel_init);
  v12 = objc_msgSend(v11, sel_wranglerHomePodBoopEnabled);

  if (v12 && (v13 = (void *)a2[4]) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v8);
    v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = swift_allocObject();
    v16 = v25;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v25 + 80);
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    *(_QWORD *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    v17 = v13;
    swift_retain();
    NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.stop(), v15);

    return swift_release();
  }
  else
  {
    v23[1] = a2[2];
    v19 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v8);
    v20 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v21 = swift_allocObject();
    v22 = v25;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v25 + 80);
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    *(_QWORD *)(v21 + ((v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    swift_retain();
    NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)((uint64_t)v7, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop(), v21);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  }
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1, uint64_t a2, uint64_t *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    v4 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    v6 = a1;
    v7 = a1;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      v12 = a1;
      v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v11 = v26;

      _os_log_impl(&dword_242981000, v8, v9, "Could not stop advertising %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v11, -1, -1);
      MEMORY[0x2494EA95C](v10, -1, -1);
    }
    else
    {

    }
    v26 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v14 = *a3;
    if (one-time initialization token for client != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.client);
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      *(_DWORD *)v18 = 136315138;
      v25 = (uint64_t)a3;
      v26 = v19;
      v21 = type metadata accessor for NearbyInvitationAdvertiser(0, *(_QWORD *)(v14 + 80), *(_QWORD *)(v14 + 88), v20);
      v22 = >> prefix<A>(_:)((uint64_t)&v25, v21);
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v16, v17, "%s: stopping advertising for NearbySessionEndpoint", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v19, -1, -1);
      MEMORY[0x2494EA95C](v18, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;

  if (a1)
  {
    v7 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.client);
    v9 = a1;
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138412290;
      v15 = a1;
      v35 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v14 = v35;

      _os_log_impl(&dword_242981000, v11, v12, a4, v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v14, -1, -1);
      MEMORY[0x2494EA95C](v13, -1, -1);
    }
    else
    {

    }
    v35 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v18 = *(_QWORD *)a3;
    if (one-time initialization token for client != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.client);
    swift_retain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      type = v21;
      v22 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v34 = a3;
      v35 = v32;
      *(_DWORD *)v22 = 136315394;
      v24 = type metadata accessor for NearbyInvitationAdvertiser(0, *(_QWORD *)(v18 + 80), *(_QWORD *)(v18 + 88), v23);
      v25 = >> prefix<A>(_:)((uint64_t)&v34, v24);
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2080;
      v27 = objc_msgSend(*(id *)(a3 + 24), sel_description);
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v20, type, a5, (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v32, -1, -1);
      MEMORY[0x2494EA95C](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = type metadata accessor for UUID();
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 + 64);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyInvitationAdvertiser.assertPublic(rotations:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v17 = v0[5];
    v5 = v0[6];
    v4 = v0[7];
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v18 = v7;
    *(_DWORD *)v6 = 136315394;
    v0[2] = v5;
    v9 = type metadata accessor for NearbyInvitationAdvertiser(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v8);
    v10 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v9);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2048;
    v0[4] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v2, v3, "%s: Client wants to assert for the advertisement to be public for %lu rotations", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v13 = v0[5];
  v12 = v0[6];
  v14 = swift_task_alloc();
  v0[13] = v14;
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = (_QWORD *)swift_task_alloc();
  v0[14] = v15;
  *v15 = v0;
  v15[1] = NearbyInvitationAdvertiser.assertPublic(rotations:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  v7 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = (char *)swift_allocObject();
  *((_QWORD *)v8 + 2) = *(_QWORD *)(v5 + 80);
  *((_QWORD *)v8 + 3) = *(_QWORD *)(v5 + 88);
  *((_QWORD *)v8 + 4) = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v8[v7], v1, v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  v9 = AnyCancellable.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a3;
  v5 = *a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v5 + 88);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)((uint64_t)v12, v17, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:), v14);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v25 - v17;
  if (a2)
  {
    v26 = (uint64_t)a2;
    v19 = a2;
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  outlined init with copy of UUID?(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of UUID?((uint64_t)v11);
    v21 = type metadata accessor for NearbyInvitationAdvertiser.Errors(0, a4, a5, v20);
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.Errors, v21);
    v22 = swift_allocError();
    *v23 = 1;
    v26 = v22;
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  CheckedContinuation.resume(returning:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_log_t v24;
  uint64_t v25;
  uint64_t *v26;
  os_log_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - v8;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = result;
    if (one-time initialization token for client != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.client);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v13(v9, a2, v3);
    swift_retain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      v17 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v32 = v29;
      *(_DWORD *)v17 = 136315394;
      v30 = a2;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v28 = v16;
      v27 = v14;
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v32);
      v26 = &v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v9, v3);
      *(_WORD *)(v17 + 12) = 2080;
      v13(v7, *(_QWORD *)(v11 + 24) + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, v3);
      swift_release();
      v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v23 = v22;
      v20(v7, v3);
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v32);
      a2 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      v24 = v27;
      _os_log_impl(&dword_242981000, v27, (os_log_type_t)v28, "Releasing assertionIdentifier: %s for invitationID: %s", (uint8_t *)v17, 0x16u);
      v25 = v29;
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v25, -1, -1);
      MEMORY[0x2494EA95C](v17, -1, -1);

    }
    else
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

      swift_release();
    }
    NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(*(_QWORD *)(v11 + 24) + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, a2);
    return swift_release();
  }
  return result;
}

id *NearbyInvitationAdvertiser.deinit()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_release();

  v2 = (char *)v0 + *((_QWORD *)*v0 + 15);
  v4 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v1[10], v1[11], v3);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v4);
  type metadata accessor for Set();
  v5 = type metadata accessor for Published();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  return v0;
}

uint64_t NearbyInvitationAdvertiser.__deallocating_deinit()
{
  NearbyInvitationAdvertiser.deinit();
  return swift_deallocClassInstance();
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationAdvertiser);
}

unint64_t lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData;
  if (!lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequestData, &type metadata for InvitationRequestData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData);
  }
  return result;
}

uint64_t specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*v2 + *a2);
  if (v3[1])
    return *v3;
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_2429A4B74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_2429A4BA4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2429A4BD4()
{
  return 16;
}

__n128 sub_2429A4BE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized NearbyInvitationAdvertiser.$pendingMembers.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v6);
  type metadata accessor for Set();
  v7 = type metadata accessor for Published.Publisher();
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v9, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

_QWORD *specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  _BYTE *v29;
  uint64_t *v30;
  id v31;
  uint64_t v32;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  objc_super v42;

  v4 = v3;
  v35 = a3;
  v40 = a2;
  v38 = a1;
  v5 = (_QWORD *)*v3;
  v36 = type metadata accessor for UUID();
  v41 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v5[10];
  v9 = v5[11];
  v11 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v8, v9, v10);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v11);
  type metadata accessor for Set();
  v12 = type metadata accessor for Published();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v34[-v14];
  v16 = (char *)v4 + v5[15];
  v17 = Set.init()();
  v39 = v8;
  v37 = v9;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v17, v8, v9, v18);
  (*(void (**)(char *, _BYTE *, uint64_t))(v13 + 32))(v16, v15, v12);
  if (one-time initialization token for shared != -1)
    swift_once();
  v4[2] = static NearbyInvitationsController.shared;
  v19 = v38;
  v20 = v41;
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 16);
  v22 = v36;
  v21(v7, v38 + direct field offset for NearbyInvitation.id, v36);
  v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 160);
  v24 = swift_retain();
  v25 = v23(v24);
  v27 = v26;
  v28 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
  v29 = objc_allocWithZone(v28);
  v21(&v29[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], (uint64_t)v7, v22);
  v30 = (uint64_t *)&v29[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *v30 = v25;
  v30[1] = v27;
  v29[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v35;
  *(_DWORD *)&v29[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v40;
  v42.receiver = v29;
  v42.super_class = v28;
  v31 = objc_msgSendSuper2(&v42, sel_init);
  (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v7, v22);
  v4[3] = v31;
  v4[4] = 0;
  type metadata accessor for NearbyInvitationAdvertiser(0, v39, v37, v32);
  swift_retain();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(uint64_t a1, int a2, int a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t, _QWORD *);
  _QWORD *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *v29;
  _BYTE *v30;
  uint64_t *v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v54;
  _BYTE v55[12];
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  objc_super v64;
  uint64_t v65;
  uint64_t v66[2];

  v5 = v4;
  v60 = a4;
  v56 = a3;
  LODWORD(v58) = a2;
  v63 = a1;
  v66[1] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*v4;
  v59 = (_QWORD *)type metadata accessor for UUID();
  v57 = *(v59 - 1);
  MEMORY[0x24BDAC7A8](v59);
  v8 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v6[10];
  v10 = v6[11];
  v12 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v9, v10, v11);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v12);
  type metadata accessor for Set();
  v13 = type metadata accessor for Published();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v55[-v15];
  v17 = (char *)v4 + v6[15];
  v18 = Set.init()();
  v61 = v10;
  v62 = v9;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v18, v9, v10, v19);
  (*(void (**)(char *, _BYTE *, uint64_t))(v14 + 32))(v17, v16, v13);
  if (one-time initialization token for shared != -1)
    swift_once();
  v4[2] = static NearbyInvitationsController.shared;
  v20 = v63;
  v21 = v57;
  v22 = *(void (**)(_BYTE *, uint64_t, _QWORD *))(v57 + 16);
  v23 = v59;
  v22(v8, v63 + direct field offset for NearbyInvitation.id, v59);
  v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 160);
  v25 = swift_retain();
  v26 = v24(v25);
  v28 = v27;
  v29 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
  v30 = objc_allocWithZone(v29);
  v22(&v30[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], (uint64_t)v8, v23);
  v31 = (uint64_t *)&v30[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *v31 = v26;
  v31[1] = v28;
  v30[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v56;
  *(_DWORD *)&v30[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v58;
  v64.receiver = v30;
  v64.super_class = v29;
  v32 = objc_msgSendSuper2(&v64, sel_init);
  (*(void (**)(_BYTE *, _QWORD *))(v21 + 8))(v8, v23);
  v5[3] = v32;
  v34 = v60;
  v35 = (uint64_t)v5;
  if (!v60)
    goto LABEL_11;
  v36 = objc_allocWithZone(MEMORY[0x24BE1A010]);
  v37 = v34;
  v38 = objc_msgSend(v36, sel_init);
  v39 = objc_msgSend(v38, sel_wranglerHomePodBoopEnabled);

  if (!v39)
  {

LABEL_11:
    v5[4] = 0;
    goto LABEL_12;
  }
  v5[4] = v34;
  v40 = one-time initialization token for client;
  v41 = v37;
  if (v40 != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Log.client);
  swift_retain_n();
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v59 = v41;
    v45 = swift_slowAlloc();
    v46 = (_QWORD *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    v65 = v35;
    v66[0] = v58;
    *(_DWORD *)v45 = 136315394;
    v48 = type metadata accessor for NearbyInvitationAdvertiser(0, v62, v61, v47);
    v49 = >> prefix<A>(_:)((uint64_t)&v65, v48);
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v45 + 12) = 2112;
    v51 = *(void **)(v35 + 32);
    if (v51)
    {
      v65 = *(_QWORD *)(v35 + 32);
      v52 = v51;
    }
    else
    {
      v65 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v34 = v60;
    *v46 = v51;
    swift_release_n();
    _os_log_impl(&dword_242981000, v43, v44, "%s: parameters = %@", (uint8_t *)v45, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v46, -1, -1);
    v54 = v58;
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v54, -1, -1);
    MEMORY[0x2494EA95C](v45, -1, -1);

  }
  else
  {

    swift_release_n();
  }
LABEL_12:
  type metadata accessor for NearbyInvitationAdvertiser(0, v62, v61, v33);
  swift_retain();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();

  swift_release();
  swift_release();
  swift_release();
  return v35;
}

char *specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, int a3, int a4, void *a5)
{
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  objc_class *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  unsigned __int8 v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v68;
  uint64_t v69;
  _BYTE v70[4];
  int v71;
  char *v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  objc_super v84;
  uint64_t v85;
  uint64_t v86[2];

  v81 = a5;
  v82 = a2;
  v71 = a4;
  v73 = a3;
  v83 = a1;
  v86[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)v5;
  v7 = type metadata accessor for UUID();
  v74 = *(_QWORD **)(v7 - 8);
  v75 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v72 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v6[10];
  v9 = v6[11];
  v12 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, v10, v9, v11);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v12);
  type metadata accessor for Set();
  v13 = type metadata accessor for Published();
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v70[-v15];
  v17 = &v5[v6[15]];
  v18 = Set.init()();
  v79 = v10;
  v80 = v9;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v18, v10, v9, v19);
  v76 = v14;
  v77 = v13;
  ((void (**)(char *, _BYTE *, uint64_t))v14)[4](v17, v16, v13);
  if (one-time initialization token for shared != -1)
    swift_once();
  *((_QWORD *)v5 + 2) = static NearbyInvitationsController.shared;
  v20 = one-time initialization token for client;
  swift_retain();
  v21 = v5;
  if (v20 != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.client);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_242981000, v23, v24, "Attempting to decode NearbyInvitationData from given payload", v25, 2u);
    MEMORY[0x2494EA95C](v25, -1, -1);
  }

  v27 = v82;
  v26 = v83;
  v28 = v78;
  v29 = specialized static NearbyInvitationData.create(from:)(v83, v82);
  if (!v28)
  {
    v77 = 0;
    v78 = v29;
    v40 = v74;
    v39 = v75;
    v41 = (void (*)(char *, char *, uint64_t))v74[2];
    v42 = v72;
    v41(v72, &v29[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v75);
    v43 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
    v44 = objc_allocWithZone(v43);
    v41(&v44[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], v42, v39);
    v45 = v83;
    v46 = &v44[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
    *v46 = v83;
    v46[1] = v27;
    v44[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v71;
    *(_DWORD *)&v44[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v73;
    outlined copy of Data._Representation(v45, v27);
    v84.receiver = v44;
    v84.super_class = v43;
    v47 = objc_msgSendSuper2(&v84, sel_init);
    ((void (*)(char *, uint64_t))v40[1])(v42, v39);
    *((_QWORD *)v5 + 3) = v47;
    v49 = v81;
    if (v81)
    {
      v50 = objc_allocWithZone(MEMORY[0x24BE1A010]);
      v51 = v49;
      v52 = objc_msgSend(v50, sel_init);
      v53 = objc_msgSend(v52, sel_wranglerHomePodBoopEnabled);

      if ((v53 & 1) != 0)
      {
        *((_QWORD *)v5 + 4) = v49;
        swift_retain_n();
        v54 = v51;
        v55 = Logger.logObject.getter();
        v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v76 = v54;
          v57 = swift_slowAlloc();
          v74 = (_QWORD *)swift_slowAlloc();
          v75 = swift_slowAlloc();
          v85 = (uint64_t)v21;
          v86[0] = v75;
          *(_DWORD *)v57 = 136315394;
          v59 = type metadata accessor for NearbyInvitationAdvertiser(0, v79, v80, v58);
          v60 = >> prefix<A>(_:)((uint64_t)&v85, v59);
          v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v57 + 12) = 2112;
          v62 = (void *)*((_QWORD *)v21 + 4);
          if (v62)
          {
            v85 = *((_QWORD *)v21 + 4);
            v63 = v62;
          }
          else
          {
            v85 = 0;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v66 = v82;
          v68 = v74;
          *v74 = v62;
          swift_release_n();
          _os_log_impl(&dword_242981000, v55, v56, "%s: parameters = %@", (uint8_t *)v57, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x2494EA95C](v68, -1, -1);
          v69 = v75;
          swift_arrayDestroy();
          MEMORY[0x2494EA95C](v69, -1, -1);
          MEMORY[0x2494EA95C](v57, -1, -1);

          v45 = v83;
          v49 = v81;
          goto LABEL_20;
        }

        swift_release_n();
LABEL_19:
        v66 = v82;
LABEL_20:
        type metadata accessor for NearbyInvitationAdvertiser(0, v79, v80, v48);
        swift_retain();
        specialized NearbyInvitationsController.addObserver(_:)();

        outlined consume of Data._Representation(v45, v66);
        swift_release();
        return v21;
      }

    }
    *((_QWORD *)v5 + 4) = 0;
    goto LABEL_19;
  }
  v30 = v28;
  v31 = v28;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v85 = (uint64_t)v28;
    v86[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v37 = String.init<A>(reflecting:)();
    v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v86);
    v27 = v82;
    v26 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v32, v33, "Failed to decode payload, error: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v35, -1, -1);
    MEMORY[0x2494EA95C](v34, -1, -1);
  }
  else
  {

  }
  v64 = v81;
  swift_willThrow();

  outlined consume of Data._Representation(v26, v27);
  swift_release();
  (*((void (**)(char *, uint64_t))v76 + 1))(&v21[*(_QWORD *)(*(_QWORD *)v21 + 120)], v77);
  type metadata accessor for NearbyInvitationAdvertiser(0, v79, v80, v65);
  swift_deallocPartialClassInstance();
  return v21;
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.start()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in NearbyInvitationAdvertiser.start()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.stop()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in NearbyInvitationAdvertiser.stop()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2429A5C90()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2429A5CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)(*(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

void base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.Errors()
{
  JUMPOUT(0x2494EA8A8);
}

void base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.PendingMember.Errors()
{
  JUMPOUT(0x2494EA8A8);
}

void base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.PendingMember()
{
  JUMPOUT(0x2494EA8A8);
}

uint64_t sub_2429A5DA4()
{
  return 16;
}

__n128 sub_2429A5DB0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429A5DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
}

uint64_t sub_2429A5DE8()
{
  return 16;
}

__n128 sub_2429A5DF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for NearbyInvitationAdvertiser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v4 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember, v4);
  type metadata accessor for Set();
  result = type metadata accessor for Published();
  if (v6 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyInvitationAdvertiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didDiscoverNearbySessionInvitation(id:invitation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didDiscoverNearbyAdvertisement(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didLoseNearbyAdvertisement(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(remoteInvitationData:provider:activityType:route:params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.start()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 240) + *(_QWORD *)(*(_QWORD *)v0 + 240));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.stop()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 248) + *(_QWORD *)(*(_QWORD *)v0 + 248));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 256) + *(_QWORD *)(*(_QWORD *)v1 + 256));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t type metadata instantiation function for NearbyInvitationAdvertiser.Errors()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for NearbyInvitationAdvertiser.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationAdvertiser.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2429A617C + 4 * byte_2429D9AF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2429A61B0 + 4 * byte_2429D9AF0[v4]))();
}

uint64_t sub_2429A61B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429A61B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429A61C0);
  return result;
}

uint64_t sub_2429A61CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429A61D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2429A61D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429A61E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for NearbyInvitationAdvertiser.Errors(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationAdvertiser.Errors);
}

uint64_t type metadata instantiation function for NearbyInvitationAdvertiser.PendingMember()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for NearbyInvitationAdvertiser.PendingMember(uint64_t a1)
{

  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *initializeBufferWithCopyOfBuffer for NearbyInvitationAdvertiser.PendingMember(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v3;
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v8, v7);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v9, v10);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2429A63FC + 4 * byte_2429D9AFA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2429A641C + 4 * byte_2429D9AFF[v4]))();
}

_BYTE *sub_2429A63FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2429A641C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429A6424(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429A642C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429A6434(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429A643C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.PendingMember.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationAdvertiser.PendingMember.Errors);
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t sub_2429A649C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(a1, a2, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1)
{
  return partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, "Could not stop advertising %@", "%s: stopping advertising for request %s");
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, v1 + v4, *(uint64_t **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  return partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, "Could not start advertising %@", "%s: started advertising for request %s");
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1, const char *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(a1, v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), a2, a3);
}

uint64_t sub_2429A671C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(a1);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2494EA854](a1, v6, a5);
}

BOOL NearbyInvitationSessionProvider.init(rawValue:)(uint64_t a1)
{
  return a1 == 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationSessionProvider(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationSessionProvider()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationSessionProvider()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationSessionProvider()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationSessionProvider@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationSessionProvider(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t static NearbyInvitationServiceInterface.identity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyInvitationServiceInterface.identity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.hostObjectInterface()
{
  id v0;
  uint64_t inited;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_257211B60);
  specialized getContiguousArrayStorageType<A>(for:)();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2429D9E10;
  *(_QWORD *)(inited + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  *(_QWORD *)(inited + 40) = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(inited + 48) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  *(_QWORD *)(inited + 56) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(inited + 64) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSArray);
  v2 = type metadata accessor for NearbyAdvertisement(0);
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *(_QWORD *)(inited + 88) = v2;
  *(_QWORD *)(inited + 96) = type metadata accessor for IncomingInvitationJoinRequest(0);
  *(_QWORD *)(inited + 104) = type metadata accessor for InvitationJoinResponse();
  *(_QWORD *)(inited + 112) = type metadata accessor for InvitationApprovalRequest();
  *(_QWORD *)(inited + 120) = type metadata accessor for NearbyInvitationData(0);
  *(_QWORD *)(inited + 128) = type metadata accessor for NearbyGroupMember();
  *(_QWORD *)(inited + 136) = type metadata accessor for NearbyAdvertisementRequest();
  *(_QWORD *)(inited + 144) = type metadata accessor for NearbyInvitationParameters();
  *(_QWORD *)(inited + 152) = type metadata accessor for InvitationBlob();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  swift_setDeallocating();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_QWORD *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

id static NearbyInvitationServiceInterface.hostObjectInterface.getter()
{
  return static NearbyInvitationServiceInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static NearbyInvitationServiceInterface.hostObjectInterface);
}

id one-time initialization function for clientObjectInterface()
{
  id result;

  result = closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.clientObjectInterface();
  static NearbyInvitationServiceInterface.clientObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.clientObjectInterface()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_257211BC0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2429D9030;
  v2 = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = type metadata accessor for NearbyGroupConnectionInfo(0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized getContiguousArrayStorageType<A>(for:)();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2429D9E20;
  *(_QWORD *)(inited + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  *(_QWORD *)(inited + 40) = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(inited + 48) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  *(_QWORD *)(inited + 56) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 72) = type metadata accessor for NearbyAdvertisement(0);
  v4 = type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *(_QWORD *)(inited + 80) = v4;
  *(_QWORD *)(inited + 88) = type metadata accessor for InvitationJoinResponse();
  *(_QWORD *)(inited + 96) = type metadata accessor for IncomingInvitationJoinRequest(0);
  *(_QWORD *)(inited + 104) = v4;
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  swift_setDeallocating();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

id static NearbyInvitationServiceInterface.clientObjectInterface.getter()
{
  return static NearbyInvitationServiceInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static NearbyInvitationServiceInterface.clientObjectInterface);
}

id static NearbyInvitationServiceInterface.hostObjectInterface.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider;
  if (!lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationSessionProvider, &type metadata for NearbyInvitationSessionProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider);
  }
  return result;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance NearbyInvitationServiceInterface@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = type metadata accessor for XPCIdentity();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyInvitationServiceInterface.identity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static NearbyInvitationServiceInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static NearbyInvitationServiceInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  return *a4;
}

ValueMetadata *type metadata accessor for NearbyInvitationSessionProvider()
{
  return &type metadata for NearbyInvitationSessionProvider;
}

ValueMetadata *type metadata accessor for NearbyInvitationServiceInterface()
{
  return &type metadata for NearbyInvitationServiceInterface;
}

uint64_t specialized getContiguousArrayStorageType<A>(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>;
  else
    v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSObject.Type>;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t NearbyInvitationScanner.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for NearbyInvitationScanner.uuid;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NearbyInvitationScanner.invitationDataBlobs.getter()
{
  return swift_retain();
}

BOOL static NearbyInvitationScanner.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationScanner.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int NearbyInvitationScanner.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationScanner<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NearbyInvitationScanner.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationScanner<A>.Errors()
{
  char *v0;

  return NearbyInvitationScanner.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationScanner<A>.Errors(uint64_t a1)
{
  char *v1;

  NearbyInvitationScanner.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationScanner<A>.Errors()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  NearbyInvitationScanner.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t KeyPath;
  id v18;
  void (*v19)(uint64_t *, _QWORD);
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[4];
  id v34;

  v2 = v1;
  v4 = *v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.client);
  swift_retain_n();
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  v32 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v33[0] = v31;
    *(_DWORD *)v9 = 136315394;
    v34 = v1;
    v12 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v11);
    v13 = >> prefix<A>(_:)((uint64_t)&v34, v12);
    v34 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v34 = v6;
    v15 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v6;

    _os_log_impl(&dword_242981000, v7, v8, "%s Did discover NearbyAdvertisement callback: %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v31, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v16 = static UUID.== infix(_:_:)();
  if ((v16 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](v16);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    swift_getKeyPath();
    v18 = v6;
    v19 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
    specialized Set._Variant.insert(_:)(&v34, v18, (void (*)(_QWORD))type metadata accessor for NearbyAdvertisement, &demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>);

    v19(v33, 0);
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    v20 = v6;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v24 = (_QWORD *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33[0] = v25;
      *(_DWORD *)v23 = 136315394;
      v34 = v2;
      v27 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v32 + 80), *(_QWORD *)(v32 + 88), v26);
      v28 = >> prefix<A>(_:)((uint64_t)&v34, v27);
      v34 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v23 + 12) = 2112;
      v34 = v20;
      v30 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v24 = v20;

      _os_log_impl(&dword_242981000, v21, v22, "%s Ignored discovered advertisement: %@ since it's not for our scanner", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v24, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v25, -1, -1);
      MEMORY[0x2494EA95C](v23, -1, -1);
    }
    else
    {
      swift_release_n();

    }
  }
}

void @objc NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
  @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(a1, a2, a3, NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:));
}

void NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t KeyPath;
  void (*v18)(uint64_t *, _QWORD);
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];
  uint64_t v33;

  v2 = v1;
  v4 = *v1;
  if (one-time initialization token for client != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.client);
  swift_retain_n();
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  v31 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32[0] = v30;
    *(_DWORD *)v9 = 136315394;
    v33 = (uint64_t)v1;
    v12 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v11);
    v13 = >> prefix<A>(_:)((uint64_t)&v33, v12);
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v33 = (uint64_t)v6;
    v15 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v6;

    _os_log_impl(&dword_242981000, v7, v8, "%s Did lose NearbyAdvertisement callback: %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v30, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v16 = static UUID.== infix(_:_:)();
  if ((v16 & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](v16);
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    swift_getKeyPath();
    v18 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();

    v18(v32, 0);
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    v19 = v6;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v32[0] = v24;
      *(_DWORD *)v22 = 136315394;
      v33 = (uint64_t)v2;
      v26 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v31 + 80), *(_QWORD *)(v31 + 88), v25);
      v27 = >> prefix<A>(_:)((uint64_t)&v33, v26);
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2112;
      v33 = (uint64_t)v19;
      v29 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v23 = v19;

      _os_log_impl(&dword_242981000, v20, v21, "%s Ignored lost advertisement: %@ since it's not for our scanner", (uint8_t *)v22, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v23, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v24, -1, -1);
      MEMORY[0x2494EA95C](v22, -1, -1);
    }
    else
    {
      swift_release_n();

    }
  }
}

void @objc NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
  @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(a1, a2, a3, NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:));
}

uint64_t NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26[4];

  v5 = v4;
  v10 = *v4;
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    type = v13;
    v14 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v25 = (uint64_t)v5;
    v26[0] = v23;
    *(_DWORD *)v14 = 136315650;
    v16 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v15);
    v17 = >> prefix<A>(_:)((uint64_t)&v25, v16);
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2080;
    outlined copy of Data._Representation(a3, a4);
    v19 = Data.description.getter();
    v21 = v20;
    outlined consume of Data._Representation(a3, a4);
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl(&dword_242981000, v12, type, "%s Did discover NearbySessionInvitation callback: [%s:%s]", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v23, -1, -1);
    MEMORY[0x2494EA95C](v14, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a3;
  v26[3] = a4;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(a3, a4);
}

uint64_t @objc NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v8 = a4;
  swift_retain();
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(v5, v7, v9, v11);
  outlined consume of Data._Representation(v9, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t key path getter for NearbyInvitationScanner.advertisements : <A>NearbyInvitationScanner<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyInvitationScanner.advertisements : <A>NearbyInvitationScanner<A>()
{
  swift_bridgeObjectRetain();
  return NearbyInvitationScanner.advertisements.setter();
}

uint64_t NearbyInvitationScanner.advertisements.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationScanner.advertisements.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path setter for NearbyInvitationScanner.$advertisements : <A>NearbyInvitationScanner<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>.Publisher);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return NearbyInvitationScanner.$advertisements.setter((uint64_t)v4);
}

uint64_t NearbyInvitationScanner.$advertisements.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t NearbyInvitationScanner.$advertisements.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

_QWORD *NearbyInvitationScanner.__allocating_init(provider:)()
{
  swift_allocObject();
  return specialized NearbyInvitationScanner.init(provider:)();
}

_QWORD *NearbyInvitationScanner.__allocating_init(provider:configuration:)(uint64_t a1, void *a2)
{
  swift_allocObject();
  return specialized NearbyInvitationScanner.init(provider:configuration:)(a2);
}

_QWORD *NearbyInvitationScanner.init(provider:configuration:)(uint64_t a1, void *a2)
{
  return specialized NearbyInvitationScanner.init(provider:configuration:)(a2);
}

uint64_t NearbyInvitationScanner.start()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[4];
    v5 = v0[5];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    v0[2] = v4;
    v9 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v8);
    v10 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v9);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v2, v3, "%s: client called start on NearbyInvitationsScanner", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[6] = v12;
  *v12 = v0;
  v12[1] = NearbyInvitationAdvertiser.start();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in NearbyInvitationScanner.start()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v4 = *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE1A010]), sel_init);
  v10 = objc_msgSend(v9, sel_wranglerHomePodBoopEnabled);

  if (v10 && (v11 = *(void **)((char *)a2 + direct field offset for NearbyInvitationScanner.setup)) != 0)
  {
    v22[1] = *(uint64_t *)((char *)a2 + direct field offset for NearbyInvitationScanner.controller);
    v12 = (uint64_t)a2 + direct field offset for NearbyInvitationScanner.uuid;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v13, v8, v5);
    *(_QWORD *)(v15 + v14) = a2;
    v16 = v11;
    swift_retain();
    NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(v16, v12, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start(), v15);

  }
  else
  {
    v17 = (uint64_t)a2 + direct field offset for NearbyInvitationScanner.uuid;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v18, v8, v5);
    *(_QWORD *)(v20 + v19) = a2;
    swift_retain();
    NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(v17, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start(), v20);
  }
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationScanner.start()(void *a1, uint64_t a2, uint64_t *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    v4 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    v6 = a1;
    v7 = a1;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      v12 = a1;
      v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v11 = v26;

      _os_log_impl(&dword_242981000, v8, v9, "NearbyInvitationScanner could not start scanning - Error: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v11, -1, -1);
      MEMORY[0x2494EA95C](v10, -1, -1);
    }
    else
    {

    }
    v26 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v14 = *a3;
    if (one-time initialization token for client != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.client);
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      *(_DWORD *)v18 = 136315138;
      v25 = (uint64_t)a3;
      v26 = v19;
      v21 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v14 + 80), *(_QWORD *)(v14 + 88), v20);
      v22 = >> prefix<A>(_:)((uint64_t)&v25, v21);
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v16, v17, "%s NearbyInvitationScanner did start scanning", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v19, -1, -1);
      MEMORY[0x2494EA95C](v18, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationScanner.stop()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[4];
    v5 = v0[5];
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    v0[2] = v4;
    v9 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v8);
    v10 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v9);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v2, v3, "%s: client called stop on NearbyInvitationsScanner", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = (_QWORD *)swift_task_alloc();
  v0[6] = v12;
  *v12 = v0;
  v12[1] = NearbyInvitationAdvertiser.stop();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in NearbyInvitationScanner.stop()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, v8, v5);
  NearbyInvitationsController.stopScanningNearbyInvitations(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationScanner.stop(), v10);
  swift_release();
  if (one-time initialization token for client != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    *(_DWORD *)v14 = 136315138;
    v21 = (uint64_t)a2;
    v22 = v15;
    v17 = type metadata accessor for NearbyInvitationScanner(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v16);
    v18 = >> prefix<A>(_:)((uint64_t)&v21, v17);
    v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v12, v13, "%s NearbyInvitationScanner did stop scanning", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v15, -1, -1);
    MEMORY[0x2494EA95C](v14, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return CheckedContinuation.resume(returning:)();
}

void *closure #1 in closure #1 in NearbyInvitationScanner.stop()(void *result)
{
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;

  if (result)
  {
    v1 = result;
    v2 = result;
    if (one-time initialization token for client != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.client);
    v4 = v1;
    v5 = v1;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = v1;
      v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v11;

      _os_log_impl(&dword_242981000, v6, v7, "NearbyInvitationScanner could not stop scanning Nearby Invitation - Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v9, -1, -1);
      MEMORY[0x2494EA95C](v8, -1, -1);
    }
    else
    {

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  return result;
}

uint64_t NearbyInvitationScanner.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + direct field offset for NearbyInvitationScanner.uuid;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  v3 = v0 + direct field offset for NearbyInvitationScanner._advertisements;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t NearbyInvitationScanner.__deallocating_deinit()
{
  NearbyInvitationScanner.deinit();
  return swift_deallocClassInstance();
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[57] = a6;
  v7[58] = v6;
  v7[55] = a4;
  v7[56] = a5;
  v7[53] = a2;
  v7[54] = a3;
  v7[52] = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>);
  v7[59] = v8;
  v7[60] = *(_QWORD *)(v8 - 8);
  v7[61] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator);
  v7[62] = v9;
  v7[63] = *(_QWORD *)(v9 - 8);
  v7[64] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  _QWORD *v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = (void *)v0[53];
  v2 = type metadata accessor for Logger();
  v0[65] = __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  swift_retain_n();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[58];
  v8 = (void *)v0[53];
  if (v6)
  {
    v9 = swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v9 = 136315394;
    v0[49] = v7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    v10 = String.init<A>(reflecting:)();
    v0[50] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v0[51] = v8;
    v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v8;

    _os_log_impl(&dword_242981000, v4, v5, "%s: about to request to be let in to NearbyAdvertisement %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v13 = (_QWORD *)swift_task_alloc();
  v0[66] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationJoinRequestMetadata?);
  *v13 = v0;
  v13[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 536) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 344);
  *(_QWORD *)(v0 + 544) = v1;
  if (v1)
  {
    swift_retain_n();
    v2 = v1;
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 464);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v24 = v2;
      v25 = swift_slowAlloc();
      v8 = v25;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 376) = v6;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v9 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v3, v4, "%s requesting for preLMI, and now going to await for datablobs", v7, 0xCu);
      swift_arrayDestroy();
      v11 = v8;
      v2 = v24;
      MEMORY[0x2494EA95C](v11, -1, -1);
      MEMORY[0x2494EA95C](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE1A010]), sel_init);
    v15 = objc_msgSend(v14, sel_wranglerHomePodBoopEnabled);

    if (v15)
    {
      v16 = *(_QWORD *)(v0 + 464);
      v17 = *(_QWORD *)(v0 + 424);
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 552) = v18;
      v18[2] = v16;
      v18[3] = v17;
      v18[4] = v2;
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 560) = v19;
      *v19 = v0;
      v19[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 464);
      v21 = *(_QWORD *)(v0 + 424);
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 664) = v22;
      v22[2] = v20;
      v22[3] = v21;
      v22[4] = v2;
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 672) = v23;
      *(_QWORD *)(v0 + 680) = type metadata accessor for InvitationBlob();
      *v23 = v0;
      v23[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    }
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors, (uint64_t)&protocol conformance descriptor for NearbyInvitationScanner<A>.Errors);
    swift_allocError();
    *v12 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = v0[58];
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v15 = v5;
    *(_DWORD *)v4 = 136315138;
    v0[45] = v3;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    v6 = String.init<A>(reflecting:)();
    v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v1, v2, "%s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v5, -1, -1);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v9 = v0[60];
  v8 = v0[61];
  v10 = v0[59];
  v0[36] = *(_QWORD *)(v0[58] + direct field offset for NearbyInvitationScanner.invitationDataBlobs);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  v12 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(String, Data), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>, MEMORY[0x24BDB9CB0]);
  MEMORY[0x2494E9E64](v11, v12);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v0[72] = OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier;
  v0[73] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator, MEMORY[0x24BDB9BC0]);
  v13 = (_QWORD *)swift_task_alloc();
  v0[74] = v13;
  *v13 = v0;
  v13[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 624) = v0;
  else
    *(_QWORD *)(v2 + 600) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  id v46;
  NSObject *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  NSObject *log;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  os_log_type_t typea;
  os_log_type_t typeb[8];
  void *type;
  uint64_t v61;
  uint64_t v62[2];

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 608) = v2;
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 616) = v4;
  if (!v3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 496));
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 464);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v62[0] = v21;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v0 + 312) = v19;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v22 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v16, v17, "%s scanner could not request for invitation request for NearbyGroups", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v21, -1, -1);
      MEMORY[0x2494EA95C](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v35 = *(void **)(v0 + 544);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors, (uint64_t)&protocol conformance descriptor for NearbyInvitationScanner<A>.Errors);
    swift_allocError();
    *v36 = 1;
    swift_willThrow();

    goto LABEL_14;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v4);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 464);
  if (v7)
  {
    typea = v6;
    v9 = swift_slowAlloc();
    v56 = swift_slowAlloc();
    v62[0] = v56;
    *(_DWORD *)v9 = 136315650;
    *(_QWORD *)(v0 + 352) = v8;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v62);
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v9 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v3, v62);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2080;
    outlined copy of Data._Representation(v2, v4);
    v12 = Data.description.getter();
    v14 = v13;
    outlined consume of Data._Representation(v2, v4);
    *(_QWORD *)(v9 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v62);
    v15 = v1;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v2, v4);
    outlined consume of Data._Representation(v2, v4);
    _os_log_impl(&dword_242981000, v5, typea, "%s Starting to request: [%s:%s]", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v56, -1, -1);
    MEMORY[0x2494EA95C](v9, -1, -1);

  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v2, v4);
    outlined consume of Data._Representation(v2, v4);

    v15 = v1;
  }
  v24 = (uint64_t *)(*(_QWORD *)(v0 + 424) + *(_QWORD *)(v0 + 576));
  v26 = *v24;
  v25 = v24[1];
  if (v15 == *v24 && v3 == v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v27 = *(_QWORD *)(v0 + 600);
    v29 = *(_QWORD *)(v0 + 448);
    v28 = *(_QWORD *)(v0 + 456);
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v2, v4);
    outlined copy of Data?(v29, v28);
    swift_bridgeObjectRetain();
    v30 = specialized static NearbyInvitationData.create(from:)(v2, v4);
    if (v27)
    {
      v31 = *(void **)(v0 + 544);
      v33 = *(_QWORD *)(v0 + 504);
      v32 = *(_QWORD *)(v0 + 512);
      v34 = *(_QWORD *)(v0 + 496);
      outlined consume of Data?(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456));
      outlined consume of Data._Representation(v2, v4);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);

      outlined consume of Data._Representation(v2, v4);
LABEL_14:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v38 = v30;
    v61 = *(_QWORD *)(v0 + 456);
    v39 = *(_QWORD *)(v0 + 440);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 448);
    v40 = *(_QWORD *)(v0 + 432);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    v41 = (_QWORD *)swift_allocObject();
    *(_QWORD *)(v0 + 632) = v41;
    v41[3] = 0;
    v41[4] = 0;
    v41[2] = 0;
    v41[5] = 0xF000000000000000;
    v41[6] = v38;
    swift_beginAccess();
    v41[2] = v40;
    v41[3] = v39;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v42 = v41[4];
    v43 = v41[5];
    v41[4] = *(_QWORD *)typeb;
    v41[5] = v61;
    outlined consume of Data?(v42, v43);
    outlined consume of Data._Representation(v2, v4);
    v44 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 640) = v44;
    *v44 = v0;
    v44[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    return InvitationRequest<>.request()(*(_QWORD *)(v0 + 416));
  }
  else
  {
    v45 = *(void **)(v0 + 424);
    swift_retain_n();
    v46 = v45;
    swift_bridgeObjectRetain();
    v47 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    v48 = os_log_type_enabled(v47, v57);
    v49 = *(_QWORD *)(v0 + 464);
    type = *(void **)(v0 + 424);
    if (v48)
    {
      log = v47;
      v50 = swift_slowAlloc();
      v55 = swift_slowAlloc();
      v62[0] = v55;
      *(_DWORD *)v50 = 136315650;
      *(_QWORD *)(v0 + 328) = v49;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v51 = String.init<A>(reflecting:)();
      *(_QWORD *)(v50 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v62);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v50 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v50 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v3, v62);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v50 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v50 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v62);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, log, v57, "%s: Datablob does not have valid id %s and advertisement = %s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v55, -1, -1);
      MEMORY[0x2494EA95C](v50, -1, -1);

      outlined consume of Data._Representation(v2, v4);
    }
    else
    {
      outlined consume of Data._Representation(v2, v4);
      swift_release_n();
      swift_bridgeObjectRelease_n();

    }
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v53;
    *v53 = v0;
    v53[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 624);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(void **)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 496);
  swift_release();

  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 624) = v0;
  else
    *(_QWORD *)(v2 + 600) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 688) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v42;
  id v43;
  id v44;
  NSObject *v45;
  _BOOL4 v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t type;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60[2];

  v1 = *(void **)(v0 + 336);
  *(_QWORD *)(v0 + 696) = v1;
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v58 = v2;
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v60[0] = v6;
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)(v0 + 272) = v58;
    v7 = v58;
    v8 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v3, v4, "Received connection Info %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v6, -1, -1);
    v10 = v5;
    v2 = v58;
    MEMORY[0x2494EA95C](v10, -1, -1);
  }
  else
  {

  }
  v11 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID];
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8];
  v14 = &v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob];
  v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob];
  *(_QWORD *)(v0 + 704) = v15;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v0 + 712) = v16;
  v17 = (uint64_t *)(v11 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  v19 = *v17;
  v18 = v17[1];
  v20 = v13 == *v17 && v12 == v18;
  if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    outlined copy of Data._Representation(v15, v16);
    swift_retain();
    outlined copy of Data._Representation(v15, v16);
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of Data._Representation(v15, v16);
    swift_bridgeObjectRetain();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 464);
    if (v23)
    {
      v25 = swift_slowAlloc();
      v54 = swift_slowAlloc();
      v60[0] = v54;
      *(_DWORD *)v25 = 136315650;
      *(_QWORD *)(v0 + 240) = v24;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v26 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 22) = 2080;
      outlined copy of Data._Representation(v15, v16);
      v28 = Data.description.getter();
      v30 = v29;
      outlined consume of Data._Representation(v15, v16);
      *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v15, v16);
      outlined consume of Data._Representation(v15, v16);
      _os_log_impl(&dword_242981000, v21, v22, "%s Starting to request: [%s:%s]", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v54, -1, -1);
      MEMORY[0x2494EA95C](v25, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      outlined consume of Data._Representation(v15, v16);
      outlined consume of Data._Representation(v15, v16);
    }

    v31 = *(_QWORD *)(v0 + 688);
    outlined copy of Data?(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456));
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v15, v16);
    v32 = specialized static NearbyInvitationData.create(from:)(v15, v16);
    if (!v31)
    {
      v34 = v32;
      v59 = *(_QWORD *)(v0 + 456);
      v35 = *(_QWORD *)(v0 + 440);
      v57 = *(_QWORD *)(v0 + 448);
      v36 = *(_QWORD *)(v0 + 432);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
      v37 = (_QWORD *)swift_allocObject();
      *(_QWORD *)(v0 + 720) = v37;
      v37[3] = 0;
      v37[4] = 0;
      v37[2] = 0;
      v37[5] = 0xF000000000000000;
      v37[6] = v34;
      swift_beginAccess();
      v37[2] = v36;
      v37[3] = v35;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v38 = v37[4];
      v39 = v37[5];
      v37[4] = v57;
      v37[5] = v59;
      outlined consume of Data?(v38, v39);
      outlined consume of Data._Representation(v15, v16);
      v40 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 728) = v40;
      *v40 = v0;
      v40[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
      return InvitationRequest<>.request()(*(_QWORD *)(v0 + 416));
    }
    v33 = *(void **)(v0 + 544);
    outlined consume of Data?(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456));
    outlined consume of Data._Representation(v15, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(void **)(v0 + 424);
    swift_retain_n();
    v43 = v42;
    swift_bridgeObjectRetain();
    v44 = v43;
    outlined copy of Data._Representation(v15, v16);
    swift_bridgeObjectRetain();
    v45 = Logger.logObject.getter();
    type = static os_log_type_t.default.getter();
    v46 = os_log_type_enabled(v45, type);
    v47 = *(_QWORD *)(v0 + 464);
    v48 = *(void **)(v0 + 424);
    if (v46)
    {
      v53 = *(void **)(v0 + 424);
      v49 = swift_slowAlloc();
      v55 = swift_slowAlloc();
      v60[0] = v55;
      *(_DWORD *)v49 = 136315650;
      *(_QWORD *)(v0 + 296) = v47;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v50 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v49 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v49 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v45, type, "%s: Datablob does not have valid id %s and advertisement = %s", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v55, -1, -1);
      MEMORY[0x2494EA95C](v49, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

    }
    v33 = *(void **)(v0 + 544);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors, (uint64_t)&protocol conformance descriptor for NearbyInvitationScanner<A>.Errors);
    swift_allocError();
    *v52 = 0;
    swift_willThrow();
  }
  outlined consume of Data._Representation(v15, v16);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(void **)(v0 + 696);
  v4 = *(void **)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 464);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  swift_retain();
  v7 = v4;
  NearbyInvitationsController.releaseInvitation(_:response:)(v7, (uint64_t)closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:)partial apply, v6);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(v2, v1);

  v8 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 544);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(void **)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 496);
  swift_willThrow();

  swift_release();
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 544);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 736);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 736);
    v7 = *(_QWORD *)(v0 + 464);
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 216) = v7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    v12 = v6;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 232) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v13;

    _os_log_impl(&dword_242981000, v4, v5, "%s scanner could not request for invitation request for NearbyGroups %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v23, -1, -1);
    MEMORY[0x2494EA95C](v8, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 736);
    swift_release_n();

  }
  v15 = *(_QWORD *)(v0 + 712);
  v16 = *(_QWORD *)(v0 + 704);
  v17 = *(void **)(v0 + 696);
  v18 = *(void **)(v0 + 544);
  v19 = *(_QWORD *)(v0 + 464);
  swift_willThrow();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v18;
  swift_retain();
  v21 = v18;
  NearbyInvitationsController.releaseInvitation(_:response:)(v21, (uint64_t)partial apply for closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v20);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(v16, v15);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[18] = v2;
  v3[19] = a1;
  v3[20] = v1;
  v3[81] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[21] = v2;
  v3[22] = a1;
  v3[23] = v1;
  v3[92] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4[6] = a1;
    outlined consume of Data?(v4[2], v4[3]);
  }
  return swift_task_switch();
}

uint64_t closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v8, v7, v4);
  *(_QWORD *)(v10 + v9) = a2;
  swift_retain();
  NearbyInvitationsController.generateNearbyInvitation(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, id a2)
{
  id v2;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v17[0] = (uint64_t)a2;
    v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    v6 = a1;
    swift_retain_n();
    v7 = v6;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v15 = (_QWORD *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v17[0] = v16;
      *(_DWORD *)v10 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2112;
      if (a1)
        v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v15 = a1;

      _os_log_impl(&dword_242981000, v8, v9, "%s scanner is generating metadata %@", (uint8_t *)v10, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v15, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v16, -1, -1);
      MEMORY[0x2494EA95C](v10, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v17[0] = (uint64_t)a1;
    v14 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v13 = a3;
  swift_retain();
  NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(v13, a4, (uint64_t)partial apply for closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v12);
  return swift_release();
}

void closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  NSObject *oslog;
  uint64_t v26;

  if (a1)
  {
    v4 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    v6 = a2;
    v7 = a1;
    v8 = v6;
    v9 = a1;
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = swift_slowAlloc();
      v12 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v11 = 138412546;
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v12 = v8;

      *(_WORD *)(v11 + 12) = 2112;
      v14 = a1;
      v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v12[1] = v26;

      _os_log_impl(&dword_242981000, oslog, v10, "We could not establish connection to our endpoint %@ with err: %@", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v12, -1, -1);
      MEMORY[0x2494EA95C](v11, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.client);
    swift_retain_n();
    v16 = a2;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = (_QWORD *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v26 = v21;
      *(_DWORD *)v19 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v22 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v20 = v16;

      _os_log_impl(&dword_242981000, v17, v18, "%s scanner is requesting connection to our endpoint %@", (uint8_t *)v19, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v20, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v21, -1, -1);
      MEMORY[0x2494EA95C](v19, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  void *v19;

  v19 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + direct field offset for NearbyInvitationScanner.controller);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v11, v10, v7);
  *(_QWORD *)(v15 + v12) = a2;
  *(_QWORD *)(v15 + v13) = a3;
  v16 = v19;
  *(_QWORD *)(v15 + v14) = v19;
  swift_retain();
  NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a3, v16, (uint64_t)partial apply for closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v15);
  return swift_release();
}

uint64_t closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2, uint64_t a3, _WORD *a4, _WORD *a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _WORD *v23;
  NSObject *v24;
  os_log_type_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v36 = (uint64_t)a2;
    v16 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (!a1)
    {
      v33 = v15;
      v34 = v13;
      if (one-time initialization token for client != -1)
        goto LABEL_9;
      while (1)
      {
        v20 = v34;
        v21 = __swift_project_value_buffer(v34, (uint64_t)static Log.client);
        v22 = v33;
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v33, v21, v20);
        swift_retain_n();
        v23 = a5;
        a5 = v22;
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          a5 = (_WORD *)swift_slowAlloc();
          v26 = (_QWORD *)swift_slowAlloc();
          v32 = swift_slowAlloc();
          v35 = (uint64_t)a4;
          v36 = v32;
          *(_DWORD *)a5 = 136315650;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
          v27 = String.init<A>(reflecting:)();
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          a5[6] = 2112;
          a4 = a5 + 11;
          v35 = (uint64_t)v23;
          v29 = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v26 = v23;

          a5[11] = 2080;
          v23 = a5 + 12;
          v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_242981000, v24, v25, "%s: Failed to get InvitationData from requestConnection(with: %@, error: %s", (uint8_t *)a5, 0x20u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x2494EA95C](v26, -1, -1);
          v30 = v32;
          swift_arrayDestroy();
          MEMORY[0x2494EA95C](v30, -1, -1);
          MEMORY[0x2494EA95C](a5, -1, -1);

          (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
          __break(1u);
        }

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
        __break(1u);
LABEL_9:
        swift_once();
      }
    }
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a6;
    swift_retain();
    v19 = a1;
    NearbyInvitationsController.markInvitationUsed(_:response:)(a6, (uint64_t)partial apply for closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v18);
    swift_release();
    v36 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v11;
  *v11 = v5;
  v11[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return NearbyInvitationScanner<>.request(_:displayName:userInfo:)(v5 + 16, a1, a2, a3, a4, a5);
}

void closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, uint64_t a2, void *a3, const char *a4, const char *a5)
{
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v34;
  uint64_t v35;

  if (a1)
  {
    v8 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.client);
    swift_retain();
    v10 = a3;
    v11 = a1;
    swift_retain();
    v12 = v10;
    v13 = a1;
    oslog = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = swift_slowAlloc();
      v16 = (_QWORD *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v35 = v31;
      *(_DWORD *)v15 = 136315650;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      v19 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v16 = v12;

      *(_WORD *)(v15 + 22) = 2112;
      v20 = a1;
      v34 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16[1] = v34;

      _os_log_impl(&dword_242981000, oslog, v14, a4, (uint8_t *)v15, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v31, -1, -1);
      MEMORY[0x2494EA95C](v15, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.client);
    swift_retain_n();
    v23 = a3;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = (_QWORD *)swift_slowAlloc();
      osloga = (os_log_t)swift_slowAlloc();
      v35 = (uint64_t)osloga;
      *(_DWORD *)v26 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2112;
      v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v27 = v23;

      _os_log_impl(&dword_242981000, v24, v25, a5, (uint8_t *)v26, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v27, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](osloga, -1, -1);
      MEMORY[0x2494EA95C](v26, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t type metadata accessor for NearbyInvitationScanner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationScanner);
}

uint64_t sub_2429ACE34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_2429ACE64()
{
  swift_bridgeObjectRetain();
  return NearbyInvitationScanner.advertisements.setter();
}

uint64_t sub_2429ACE8C()
{
  return 16;
}

__n128 sub_2429ACE98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for AddressableMember();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FB8]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FC0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for NearbyGroupMember, &demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, void (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t result;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  Swift::Int v26;
  unint64_t v27;
  _QWORD *v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = a2;
    v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v36;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = specialized _NativeSet.init(_:capacity:)(v11, result + 1, a4, a3);
    v37 = (_QWORD *)v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (*(_QWORD *)(v26 + 24) <= v27)
    {
      v32 = v27 + 1;
      v33 = v12;
      specialized _NativeSet.resize(capacity:)(v32, a4);
      v28 = v37;
    }
    else
    {
      v28 = (_QWORD *)v26;
      v29 = v12;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v12, v28);
    *v7 = (uint64_t)v28;
    swift_bridgeObjectRelease();
    *a1 = v12;
  }
  else
  {
    v15 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain();
    v16 = NSObject._rawHashValue(seed:)(v15);
    v17 = -1 << *(_BYTE *)(v10 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
    {
      a3(0);
      v19 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
      v20 = static NSObject.== infix(_:_:)();

      if ((v20 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v24 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v18);
        *a1 = v24;
        v25 = v24;
        return 0;
      }
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
        v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v38 = *v7;
    *v7 = 0x8000000000000000;
    v31 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v31, v18, isUniquelyReferenced_nonNull_native, a4, a3);
    *v7 = v38;
    swift_bridgeObjectRelease();
    *a1 = v31;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  Swift::Int *v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t *v30;
  Swift::Int *v31;
  uint64_t v32;

  v6 = v5;
  v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  v15 = v13 & ~v14;
  v16 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v30 = v5;
    v31 = a1;
    v17 = ~v14;
    v18 = *(_QWORD *)(v12 + 48);
    while (1)
    {
      v19 = (_QWORD *)(v18 + 32 * v15);
      v21 = v19[2];
      v20 = v19[3];
      v22 = *v19 == a2 && v19[1] == a3;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v20)
        {
          if (a5)
          {
            v23 = v21 == a4 && v20 == a5;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_24:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v26 = (Swift::Int *)(*(_QWORD *)(*v30 + 48) + 32 * v15);
              v27 = v26[1];
              v29 = v26[2];
              v28 = v26[3];
              *v31 = *v26;
              v31[1] = v27;
              v31[2] = v29;
              v31[3] = v28;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              return 0;
            }
          }
        }
        else if (!a5)
        {
          goto LABEL_24;
        }
      }
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v6 = v30;
        a1 = v31;
        goto LABEL_23;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_23:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = *v6;
  *v6 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
  *v6 = v32;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(_QWORD))
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v6 = static _SetStorage.convert(_:capacity:)();
    v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        v6 = v19;
        v13 = *(_QWORD *)(v19 + 16);
        if (*(_QWORD *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          v6 = v19;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
        v8 = v6 + 56;
        v9 = -1 << *(_BYTE *)(v6 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = 0;
          v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v16 = v11 == v15;
            if (v11 == v15)
              v11 = 0;
            v14 |= v16;
            v17 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
        ++*(_QWORD *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  id v29[2];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_31;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_31;
          v17 = v6[v12];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v9)
            {
LABEL_31:
              swift_release();
              v1 = v28;
              v27 = 1 << *(_BYTE *)(v2 + 32);
              if (v27 > 63)
                bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v6 = -1 << v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v17 = v6[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_37;
                if (v12 >= v9)
                  goto LABEL_31;
                v17 = v6[v12];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v12 = v18;
          }
        }
LABEL_21:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v29);
      Hasher.init(_seed:)();
      v19 = v29[0];
      NSObject.hash(into:)();

      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v29, *(_QWORD *)(v4 + 48) + 16 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for AddressableMember();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FB8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v32 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v31 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v31)
          goto LABEL_36;
        v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_36;
          v16 = v32[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_36;
            v16 = v32[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_36:
                swift_release();
                v1 = v0;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v10 >= v31)
                    goto LABEL_36;
                  v16 = v32[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v19 = *v18;
      v20 = v18[1];
      v22 = v18[2];
      v21 = v18[3];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v19;
      v12[1] = v20;
      v12[2] = v22;
      v12[3] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(id *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  v10 = *a1;
  NSObject.hash(into:)();

  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    type metadata accessor for NSObject();
    do
    {
      outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(_QWORD *)(v9 + 48) + 16 * a2, (uint64_t)v20);
      v14 = static NSObject.== infix(_:_:)();
      outlined destroy of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v20);
      if ((v14 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)a1, *(_QWORD *)(v15 + 48) + 16 * a2);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v15 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for AddressableMember();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FB8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FC0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(_QWORD))
{
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  v12 = *v5;
  v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    a5(0);
    v15 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
    v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * a2);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * a2) = a1;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v23;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, Swift::Int a3, Swift::Int a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int *v19;
  Swift::Int v20;
  Swift::Int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  Swift::Int *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_28;
  if ((a6 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_28;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v14 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  result = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v14 + 48);
    do
    {
      v19 = (Swift::Int *)(v18 + 32 * a5);
      result = *v19;
      v21 = v19[2];
      v20 = v19[3];
      v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v20)
        {
          if (a4)
          {
            v23 = v21 == a3 && v20 == a4;
            if (v23 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
LABEL_27:
              result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              break;
            }
          }
        }
        else if (!a4)
        {
          goto LABEL_27;
        }
      }
      a5 = (a5 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_28:
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (Swift::Int *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v11;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[16];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for AddressableMember();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v20 = v17[2];
    v19 = v17[3];
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  id v28[2];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_33:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v16 >= v9)
      goto LABEL_31;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_31;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
        break;
    }
LABEL_21:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v28);
    Hasher.init(_seed:)();
    v19 = v28[0];
    NSObject.hash(into:)();

    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v28, *(_QWORD *)(v4 + 48) + 16 * v13);
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 2;
  if (v18 >= v9)
  {
LABEL_31:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_33;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_31;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for AddressableMember();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FB8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_36;
      v16 = *(_QWORD *)(v30 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_36;
        v16 = *(_QWORD *)(v30 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v22 = v18[2];
    v21 = v18[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v21)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v19;
    v12[1] = v20;
    v12[2] = v22;
    v12[3] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = v4 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_33;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_33;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    if ((v6 & 1) != 0)
    {
      v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  v9 = NSObject._rawHashValue(seed:)(v8);
  v10 = -1 << *(_BYTE *)(v4 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_12;
  type metadata accessor for NearbyAdvertisement(0);
  v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    v14 = ~v10;
    do
    {
      v11 = (v11 + 1) & v14;
      if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_12;
      v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
      v16 = static NSObject.== infix(_:_:)();

    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v2;
  v20 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>);
    v18 = v20;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = __CocoaSet.count.getter();
  v3 = swift_unknownObjectRetain();
  v4 = specialized _NativeSet.init(_:capacity:)(v3, v2, &demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>, (void (*)(_QWORD))type metadata accessor for NearbyAdvertisement);
  v16 = v4;
  v5 = *(_QWORD *)(v4 + 40);
  swift_retain();
  v6 = NSObject._rawHashValue(seed:)(v5);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    type metadata accessor for NearbyAdvertisement(0);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v11 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v11;
        if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
        v13 = static NSObject.== infix(_:_:)();

        if ((v13 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

_QWORD *specialized NearbyInvitationScanner.init(provider:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v1 = v0;
  v2 = *v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v7 = direct field offset for NearbyInvitationScanner.invitationDataBlobs;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  swift_allocObject();
  *(_QWORD *)((char *)v0 + v7) = PassthroughSubject.init()();
  v8 = (char *)v0 + direct field offset for NearbyInvitationScanner._advertisements;
  v9 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  v13[1] = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8, v6, v3);
  *(_QWORD *)((char *)v1 + direct field offset for NearbyInvitationScanner.setup) = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)((char *)v1 + direct field offset for NearbyInvitationScanner.controller) = static NearbyInvitationsController.shared;
  type metadata accessor for NearbyInvitationScanner(0, v9, v10, v11);
  swift_retain_n();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();
  return v1;
}

_QWORD *specialized NearbyInvitationScanner.init(provider:configuration:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unsigned __int8 v17;
  void *v18;
  _QWORD v20[2];

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v9 = direct field offset for NearbyInvitationScanner.invitationDataBlobs;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v9) = PassthroughSubject.init()();
  v10 = (char *)v1 + direct field offset for NearbyInvitationScanner._advertisements;
  v11 = *(_QWORD *)(v4 + 80);
  v12 = *(_QWORD *)(v4 + 88);
  v20[1] = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v8, v5);
  if (a1)
  {
    v14 = objc_allocWithZone(MEMORY[0x24BE1A010]);
    v15 = a1;
    v16 = objc_msgSend(v14, sel_init);
    v17 = objc_msgSend(v16, sel_wranglerHomePodBoopEnabled);

    v18 = a1;
    if ((v17 & 1) != 0)
      goto LABEL_5;

  }
  v18 = 0;
LABEL_5:
  *(_QWORD *)((char *)v2 + direct field offset for NearbyInvitationScanner.setup) = v18;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)((char *)v2 + direct field offset for NearbyInvitationScanner.controller) = static NearbyInvitationsController.shared;
  type metadata accessor for NearbyInvitationScanner(0, v11, v12, v13);
  swift_retain_n();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();

  return v2;
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.start()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in NearbyInvitationScanner.start()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.stop()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in NearbyInvitationScanner.stop()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, v1);
}

uint64_t partial apply for closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void partial apply for closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), "%s: Failed to release invitation: %@, error: %@", "%s: Released invitation: %@");
}

uint64_t partial apply for closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void base witness table accessor for Equatable in NearbyInvitationScanner<A>.Errors()
{
  JUMPOUT(0x2494EA8A8);
}

uint64_t sub_2429B0704()
{
  return 16;
}

__n128 sub_2429B0710(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B071C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
}

uint64_t sub_2429B0748()
{
  return 16;
}

__n128 sub_2429B0754(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for NearbyInvitationScanner()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<NearbyAdvertisement>>();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t method lookup function for NearbyInvitationScanner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didReceiveConnectionRequest(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didReceiveSessionJoinResponse(response:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.advertisements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.$advertisements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.__allocating_init(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.__allocating_init(provider:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.start()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 240) + *(_QWORD *)(*(_QWORD *)v0 + 240));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationScanner.stop()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 248) + *(_QWORD *)(*(_QWORD *)v0 + 248));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v4();
}

void type metadata accessor for Published<Set<NearbyAdvertisement>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Set<NearbyAdvertisement>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationScanner.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2429B09C4 + 4 * byte_2429D9F95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2429B09F8 + 4 * asc_2429D9F90[v4]))();
}

uint64_t sub_2429B09F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429B0A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429B0A08);
  return result;
}

uint64_t sub_2429B0A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429B0A1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2429B0A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429B0A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationScanner.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitationScanner.Errors);
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AddressableMember();
    result = MEMORY[0x2494EA8A8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2429B0A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_2429B0B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, a2, v2 + v6, *(_WORD **)(v2 + v7), *(_WORD **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), "%s: Failed to mark invitation used: %@, error: %@", "%s: Marked invitation as used: %@");
}

uint64_t sub_2429B0CB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  return closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, a2);
}

uint64_t sub_2429B0D94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in NearbyInvitationScanner.stop()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in NearbyInvitationScanner.stop()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start()(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in closure #1 in NearbyInvitationScanner.start()(a1, v1 + v4, *(uint64_t **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NearbyGroupSessionProvider.nearbyGroup.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.nearbyGroup.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.nearbyGroup.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t NearbyGroupSessionProvider.members.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.members.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.members.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupSessionProvider.id.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.state.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.state.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.state.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
}

uint64_t NearbyGroupSessionProvider.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupSessionProvider.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136));
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupSessionProvider.cancellables.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess();
  return outlined init with copy of Member?(v3, a1);
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NearbyGroupSessionProvider.localMember.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess();
  outlined assign with take of Member?(a1, v3);
  return swift_endAccess();
}

uint64_t NearbyGroupSessionProvider.__allocating_init(nearbyGroup:activity:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  swift_allocObject();
  v6 = specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, a2);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a2);
  return v6;
}

uint64_t NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, a2);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a2);
  return v5;
}

uint64_t closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[14] = a4;
  v5[15] = a5;
  v6 = type metadata accessor for AddressableMember();
  v5[16] = v6;
  v5[17] = *(_QWORD *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>);
  v5[21] = v7;
  v5[22] = *(_QWORD *)(v7 - 8);
  v5[23] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher);
  v5[24] = v8;
  v5[25] = *(_QWORD *)(v8 - 8);
  v5[26] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator);
  v5[27] = v9;
  v5[28] = *(_QWORD *)(v9 - 8);
  v5[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  if (one-time initialization token for provider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[30] = __swift_project_value_buffer(v1, (uint64_t)static Log.provider);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[14];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v19 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[12] = v5;
    type metadata accessor for NearbyGroup();
    swift_retain();
    v8 = String.init<A>(reflecting:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v2, v3, "Starting task to listen for NearbyGroup updates for members: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = v0[25];
  v11 = v0[26];
  v13 = v0[23];
  v12 = v0[24];
  v15 = v0[21];
  v14 = v0[22];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  Published.projectedValue.getter();
  swift_endAccess();
  v16 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<NearbyGroup.Member>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x2494E9E64](v12, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_beginAccess();
  v0[31] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v17 = (_QWORD *)swift_task_alloc();
  v0[32] = v17;
  *v17 = v0;
  v17[1] = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 272) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 264);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_242981000, v12, v13, "Subscription ended on NearbySession", v14, 2u);
      MEMORY[0x2494EA95C](v14, -1, -1);
    }

    goto LABEL_9;
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    swift_bridgeObjectRelease();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = Strong;
  swift_bridgeObjectRetain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v49 = v3;
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v55 = v7;
    *(_DWORD *)v6 = 136315138;
    lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
    swift_bridgeObjectRetain();
    v8 = Set.description.getter();
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = v8;
    v3 = v49;
    *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_242981000, v4, v5, "Updating session provider with participants: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v7, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(void))(*(_QWORD *)v3 + 176))();
  v16 = *(_QWORD *)(v1 + 16);
  if (v16)
  {
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    v17 = *(_QWORD *)(v0 + 80);
    result = specialized Set.startIndex.getter(v1);
    v18 = result;
    v20 = v19;
    v22 = v21 & 1;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *(_BYTE *)(v1 + 32))
    {
      if (((*(_QWORD *)(v1 + 56 + (((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_34;
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v20)
        goto LABEL_35;
      v53 = v22;
      swift_bridgeObjectRetain();
      AddressableMember.init(handle:)();
      *(_QWORD *)(v0 + 80) = v17;
      v24 = *(_QWORD *)(v17 + 16);
      v23 = *(_QWORD *)(v17 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v17 = *(_QWORD *)(v0 + 80);
      }
      v25 = *(_QWORD *)(v0 + 160);
      v26 = *(_QWORD *)(v0 + 128);
      v27 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v17 + 16) = v24 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v17+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v24, v25, v26);
      result = specialized _NativeSet.index(after:)(v18, v20, v53 & 1, v1);
      v18 = result;
      v20 = v28;
      v22 = v29 & 1;
      if (!--v16)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(result, v28, v22);
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
LABEL_22:
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FB8]);
    v30 = Set.init(minimumCapacity:)();
    v51 = *(_QWORD *)(v17 + 16);
    if (v51)
    {
      v31 = 0;
      v32 = *(_QWORD *)(v0 + 136);
      v50 = v17 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      v54 = *(_QWORD *)(v32 + 72);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
      do
      {
        v52 = v31;
        v33(*(_QWORD *)(v0 + 152), v50 + v31 * v54, *(_QWORD *)(v0 + 128));
        swift_bridgeObjectRetain();
        v40 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v41 = -1 << *(_BYTE *)(v30 + 32);
        v42 = v40 & ~v41;
        if (((*(_QWORD *)(v30 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
        {
          v43 = ~v41;
          while (1)
          {
            v44 = *(_QWORD *)(v0 + 144);
            v45 = *(_QWORD *)(v0 + 128);
            v46 = *(_QWORD *)(v0 + 136);
            v33(v44, *(_QWORD *)(v30 + 48) + v42 * v54, v45);
            lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FC0]);
            v47 = dispatch thunk of static Equatable.== infix(_:_:)();
            v39 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
            v39(v44, v45);
            if ((v47 & 1) != 0)
              break;
            v42 = (v42 + 1) & v43;
            if (((*(_QWORD *)(v30 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
              goto LABEL_24;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_24:
          v34 = *(_QWORD *)(v0 + 144);
          v35 = *(_QWORD *)(v0 + 152);
          v36 = *(_QWORD *)(v0 + 128);
          v37 = *(_QWORD *)(v0 + 136);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v33(v34, v35, v36);
          v55 = v30;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v34, v42, isUniquelyReferenced_nonNull_native);
          v30 = v55;
          swift_bridgeObjectRelease();
          v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        }
        v39(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
        v31 = v52 + 1;
      }
      while (v52 + 1 != v51);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 88) = v30;
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v48 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v48;
    *v48 = v0;
    v48[1] = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  return result;
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 272);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 272) = v0;
  return swift_task_switch();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v8 = type metadata accessor for GroupSessionProviderState();
  v7[14] = v8;
  v7[15] = *(_QWORD *)(v8 - 8);
  v7[16] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>);
  v7[17] = v9;
  v7[18] = *(_QWORD *)(v9 - 8);
  v7[19] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher);
  v7[20] = v10;
  v7[21] = *(_QWORD *)(v10 - 8);
  v7[22] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator);
  v7[23] = v11;
  v7[24] = *(_QWORD *)(v11 - 8);
  v7[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if (one-time initialization token for provider != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v1, (uint64_t)static Log.provider);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_242981000, v2, v3, "Starting task to listen for NearbyGroup state updates.", v4, 2u);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  v5 = v0[21];
  v6 = v0[22];
  v7 = v0[19];
  v8 = v0[20];
  v9 = v0[17];
  v13 = v0[18];

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  v10 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<NearbyGroup.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x2494E9E64](v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v8);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v7, v9);
  swift_beginAccess();
  v0[27] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v11 = (_QWORD *)swift_task_alloc();
  v0[28] = v11;
  *v11 = v0;
  v11[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  else
    *(_DWORD *)(v2 + 272) = *MEMORY[0x24BDD1D70];
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 232) = v1;
  if ((unint64_t)v1 < 2)
  {
    outlined consume of NearbyGroup.State?(v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v2;
    *v2 = v0;
    v2[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  if (v1 == (void *)2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  }
  else
  {
    swift_retain_n();
    outlined copy of NearbyGroup.State?(v1);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v17 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_retain();
      v8 = NearbyGroup.description.getter();
      v10 = v9;
      swift_release();
      *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v17);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_242981000, v4, v5, "NearbyGroup %s invalidated.", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v7, -1, -1);
      MEMORY[0x2494EA95C](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 256) = Strong;
    if (Strong)
    {
      v13 = *(_QWORD *)(v0 + 96);
      v12 = *(_QWORD *)(v0 + 104);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 264) = v14;
      v16 = type metadata accessor for NearbyGroupSessionProvider(0, v13, v12, v15);
      MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyGroupSessionProvider<A>, v16);
      *v14 = v0;
      v14[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
      return GroupSessionProvider.leave()();
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    outlined consume of NearbyGroup.State?(v1);
    outlined consume of NearbyGroup.State?(v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 240);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  return swift_task_switch();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 232);
  v2 = *(unsigned int *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD **)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  (*(void (**)(void))(**(_QWORD **)(v0 + 256) + 224))();
  *v3 = v1;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  outlined copy of NearbyGroup.State(v1);
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  outlined consume of NearbyGroup.State?(v1);
  outlined consume of NearbyGroup.State?(v1);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v3, v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v6;
  *v6 = v0;
  v6[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t *NearbyGroupSessionProvider.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *v0;
  if (one-time initialization token for provider != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.provider);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = (*(uint64_t (**)(void))(*v0 + 304))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_242981000, v3, v4, "%s Deinit'd", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v6, -1, -1);
    MEMORY[0x2494EA95C](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  swift_bridgeObjectRelease();
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v0 + *(_QWORD *)(*v0 + 144), &demangling cache variable for type metadata for Member?);
  return v0;
}

uint64_t NearbyGroupSessionProvider.__deallocating_deinit()
{
  NearbyGroupSessionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t NearbyGroupSessionProvider.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(48);
  v1._object = (void *)0x80000002429DD0A0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for GroupSessionProvider.state.getter in conformance NearbyGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t protocol witness for GroupSessionProvider.members.getter in conformance NearbyGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t protocol witness for GroupSessionProvider.localMember.getter in conformance NearbyGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyGroupSessionProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 304))();
}

uint64_t protocol witness for Identifiable.id.getter in conformance NearbyGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 200))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
  v10 = *(_QWORD *)(type metadata accessor for AddressableMember() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for AddressableMember() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *);
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v3 = v2;
  v53 = *v2;
  v54 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for AddressableMember();
  v7 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v49 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupSessionProviderState();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *MEMORY[0x24BDD1D78];
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v14(v11, v12, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v2[6] = CurrentValueSubject.init(_:)();
  v15 = v2 + 6;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = MEMORY[0x24BEE4B08];
  v16 = (char *)v3 + *(_QWORD *)(*v3 + 144);
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_QWORD *)v16 + 4) = 0;
  v2[4] = UUID.uuidString.getter();
  v2[5] = v17;
  v14(v11, v12, v9);
  swift_allocObject();
  v18 = CurrentValueSubject.init(_:)();
  swift_beginAccess();
  *v15 = v18;
  swift_release();
  v19 = (char *)v3 + *(_QWORD *)(*v3 + 128);
  v20 = *(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v53 + 80) - 8) + 16);
  v50 = *(_QWORD *)(v53 + 80);
  v20(v19, v54);
  swift_getKeyPath();
  swift_getKeyPath();
  v52 = a1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v21 = v56;
  v22 = *(_QWORD *)(v56 + 16);
  if (v22)
  {
    v48 = v3;
    *(_QWORD *)&v56 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v23 = v56;
    result = specialized Set.startIndex.getter(v21);
    v25 = result;
    v27 = v26;
    v29 = v28 & 1;
    v54 = (char *)(v21 + 56);
    v30 = v49;
    while ((v25 & 0x8000000000000000) == 0 && v25 < 1 << *(_BYTE *)(v21 + 32))
    {
      if (((*(_QWORD *)&v54[((unint64_t)v25 >> 3) & 0xFFFFFFFFFFFFF8] >> v25) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v21 + 36) != (_DWORD)v27)
        goto LABEL_18;
      swift_bridgeObjectRetain();
      AddressableMember.init(handle:)();
      *(_QWORD *)&v56 = v23;
      v32 = *(_QWORD *)(v23 + 16);
      v31 = *(_QWORD *)(v23 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        v23 = v56;
      }
      *(_QWORD *)(v23 + 16) = v32 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v23+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v32, v30, v55);
      result = specialized _NativeSet.index(after:)(v25, v27, v29 & 1, v21);
      v25 = result;
      v27 = v33;
      v29 = v34 & 1;
      if (!--v22)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(result, v33, v34 & 1);
        swift_bridgeObjectRelease();
        v3 = v48;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
LABEL_12:
    v35 = specialized Set.init<A>(_:)(v23);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v56 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    swift_allocObject();
    v36 = CurrentValueSubject.init(_:)();
    v37 = v52;
    v3[2] = v52;
    v3[3] = v36;
    v38 = v37 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle;
    swift_beginAccess();
    if (*(_QWORD *)(v38 + 8))
    {
      *((_QWORD *)&v57 + 1) = v55;
      v58 = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x24BDD1FA0]);
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v56);
      swift_bridgeObjectRetain_n();
      swift_retain();
      AddressableMember.init(handle:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = 0;
      v56 = 0u;
      v57 = 0u;
      swift_retain();
    }
    v39 = (uint64_t)v3 + *(_QWORD *)(*v3 + 144);
    swift_beginAccess();
    outlined assign with take of Member?((uint64_t)&v56, v39);
    swift_endAccess();
    v40 = type metadata accessor for TaskPriority();
    v54 = *(char **)(*(_QWORD *)(v40 - 8) + 56);
    v41 = (uint64_t)v51;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v54)(v51, 1, 1, v40);
    v42 = swift_allocObject();
    swift_weakInit();
    v43 = (_QWORD *)swift_allocObject();
    v43[2] = 0;
    v43[3] = 0;
    v44 = v50;
    v43[4] = v50;
    v45 = *(_QWORD *)(v53 + 88);
    v43[5] = v45;
    v43[6] = v37;
    v43[7] = v42;
    swift_retain();
    v55 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), (uint64_t)v43);
    type metadata accessor for AnyCancellable();
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54)(v41, 1, 1, v40);
    v46 = swift_allocObject();
    swift_weakInit();
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = 0;
    v47[3] = 0;
    v47[4] = v44;
    v47[5] = v45;
    v47[6] = v37;
    v47[7] = v46;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), (uint64_t)v47);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v3;
  }
  return result;
}

void base witness table accessor for Identifiable in NearbyGroupSessionProvider<A>()
{
  JUMPOUT(0x2494EA8A8);
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in NearbyGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x24BEE0D08];
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_2429B39E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_2429B3A10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 160);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_2429B3A40()
{
  return 16;
}

__n128 sub_2429B3A4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B3A58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_2429B3A88(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_2429B3AB8()
{
  return 16;
}

__n128 sub_2429B3AC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B3AD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429B3B00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2429B3B44()
{
  return 16;
}

__n128 sub_2429B3B50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B3B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_2429B3B8C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_2429B3BBC()
{
  return 16;
}

__n128 sub_2429B3BC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B3BD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_2429B3C04(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 256);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2429B3C34()
{
  return 16;
}

__n128 sub_2429B3C40(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429B3C4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
}

uint64_t sub_2429B3C74(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of Member?(a1, (uint64_t)v2);
  return NearbyGroupSessionProvider.localMember.setter((uint64_t)v2);
}

uint64_t sub_2429B3CAC()
{
  return 16;
}

__n128 sub_2429B3CB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for NearbyGroupSessionProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for NearbyGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyGroupSessionProvider);
}

uint64_t method lookup function for NearbyGroupSessionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.localMember.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.__allocating_init(nearbyGroup:activity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t outlined assign with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of Set<NearbyGroup.Member>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2429B3EB0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[6];
  v6 = v1[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, v4, v5, v7, v6);
}

void partial apply for closure #3 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
  JUMPOUT(0x2494EA050);
}

uint64_t objectdestroy_26Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, v6, v7, v9, v8, v4, v5);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void outlined consume of NearbyGroup.State?(id a1)
{
  if (a1 != (id)2)
    outlined consume of NearbyGroup.State(a1);
}

id outlined copy of NearbyGroup.State?(id result)
{
  if (result != (id)2)
    return outlined copy of NearbyGroup.State(result);
  return result;
}

id outlined copy of NearbyGroup.State(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t sub_2429B40B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

unint64_t lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyGroup.Member, &type metadata for NearbyGroup.Member);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyGroup.Member, &type metadata for NearbyGroup.Member);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t NearbyGroup.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[4] = a1;
  v2[5] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v3 = (_QWORD *)swift_task_alloc();
  v2[6] = v3;
  *v3 = v2;
  v3[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TQ0_;
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TQ0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2)
      goto LABEL_5;
  }
  else if (v2)
  {
LABEL_5:
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TY2_()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InvitationRequest<>.request()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[14] = a1;
  v2[15] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  v2[16] = v3;
  v2[17] = *(_QWORD *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>);
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 - 8);
  v2[21] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Iterator);
  v2[22] = v5;
  v2[23] = *(_QWORD *)(v5 - 8);
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v2[27] = v6;
  v2[28] = *(_QWORD *)(v6 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v7 = type metadata accessor for Logger();
  v2[31] = v7;
  v2[32] = *(_QWORD *)(v7 - 8);
  v2[33] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 288) = a1;
  *(_QWORD *)(v3 + 296) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t InvitationRequest<>.request()()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(void);
  uint64_t v13;

  if (one-time initialization token for group != -1)
    swift_once();
  v0[34] = __swift_project_value_buffer(v0[31], (uint64_t)static Log.group);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = v0[15];
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v0[12] = v4;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    v7 = String.init<A>(reflecting:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v1, v2, "Requesting to be let in with request: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v6, -1, -1);
    MEMORY[0x2494EA95C](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v9 = *(int **)(*(_QWORD *)v0[15] + 200);
  v12 = (uint64_t (*)(void))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc();
  v0[35] = v10;
  *v10 = v0;
  v10[1] = InvitationRequest<>.request();
  return v12();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v1 = *(void **)(v0 + 288);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 16))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 248));
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(char **)(v0 + 288);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v55[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)&v6[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8];
    if (v9)
    {
      *(_QWORD *)(v0 + 16) = *(_QWORD *)&v6[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
      *(_QWORD *)(v0 + 24) = v9;
      swift_bridgeObjectRetain();
      v10 = String.init<A>(reflecting:)();
      v12 = v11;
    }
    else
    {
      v12 = 0xE300000000000000;
      v10 = 7104878;
    }
    v16 = *(void **)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v3, v4, "Waiting for group with ID: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v53, v18);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 248);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  v19 = *(char **)(v0 + 288);
  if (!*(_QWORD *)&v19[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8])
    goto LABEL_10;
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
  {
    outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 208), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v19 = *(char **)(v0 + 288);
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type InvitationRequest<NearbyGroup>.Errors and conformance InvitationRequest<A>.Errors, &demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors, (uint64_t)&protocol conformance descriptor for InvitationRequest<A>.Errors);
    v23 = (void *)swift_allocError();
    *v24 = 2;
    swift_willThrow();

    swift_retain();
    v25 = v23;
    swift_retain();
    v26 = v23;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 120);
    if (v29)
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v55[0] = v32;
      *(_DWORD *)v31 = 136315394;
      *(_QWORD *)(v0 + 88) = v30;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
      v33 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      *(_QWORD *)(v0 + 40) = v23;
      v35 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v36 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v27, v28, "%s failed to request access, reason: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v32, -1, -1);
      MEMORY[0x2494EA95C](v31, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v39 = *(_QWORD *)(v0 + 240);
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 32))(v39, *(_QWORD *)(v0 + 208), v40);
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  *(_QWORD *)(v0 + 304) = v43;
  v43(v42, v39, v40);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  if (one-time initialization token for shared != -1)
    swift_once();
  v44 = *(_QWORD *)(v0 + 200);
  v45 = *(_QWORD *)(v0 + 168);
  v54 = *(_QWORD *)(v0 + 160);
  v47 = *(_QWORD *)(v0 + 144);
  v46 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 128);
  v48 = *(_QWORD *)(v0 + 136);
  v50 = static NearbyInvitationsController.shared;
  v51 = swift_task_alloc();
  *(_QWORD *)(v51 + 16) = v50;
  *(_QWORD *)(v51 + 24) = v44;
  type metadata accessor for NearbyGroup();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104))(v47, *MEMORY[0x24BEE6A10], v49);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  outlined destroy of Invitation_HostConnectionInfo?(v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v45, v46);
  v52 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v52;
  *v52 = v0;
  v52[1] = InvitationRequest<>.request();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  os_log_type_t v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216));
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    v4 = os_log_type_enabled(v2, v3);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)v40 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 176);
    v42 = v1;
    if (v4)
    {
      v10 = swift_slowAlloc();
      v39 = swift_slowAlloc();
      v44[0] = v39;
      *(_DWORD *)v10 = 136315394;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v10 + 12) = 2080;
      v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v15(v6, v8);
      _os_log_impl(&dword_242981000, v2, v3, "Observed group: %s, waiting for %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v39, -1, -1);
      MEMORY[0x2494EA95C](v10, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 8))(v9, v41);
    }
    else
    {

      v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v15(v6, v8);
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 8))(v9, v41);
    }
    v15(v5, v8);
    v34 = *(char **)(v0 + 288);
    v35 = *(uint64_t **)(v0 + 112);
    v36 = *(_QWORD *)&v34[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
    v37 = *(_QWORD *)&v34[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8];
    outlined copy of Data?(v36, v37);

    *v35 = v36;
    v35[1] = v37;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v42);
  }
  else
  {
    v16 = *(void **)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type InvitationRequest<NearbyGroup>.Errors and conformance InvitationRequest<A>.Errors, &demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors, (uint64_t)&protocol conformance descriptor for InvitationRequest<A>.Errors);
    v20 = (void *)swift_allocError();
    *v21 = 0;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_retain();
    v22 = v20;
    swift_retain();
    v23 = v20;
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 120);
    if (v26)
    {
      v28 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v44[0] = v43;
      *(_DWORD *)v28 = 136315394;
      *(_QWORD *)(v0 + 88) = v27;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
      v29 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v28 + 12) = 2080;
      *(_QWORD *)(v0 + 40) = v20;
      v31 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v32 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v24, v25, "%s failed to request access, reason: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v43, -1, -1);
      MEMORY[0x2494EA95C](v28, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15[2];

  v1 = *(void **)(v0 + 296);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 120);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15[0] = v8;
    *(_DWORD *)v7 = 136315394;
    *(_QWORD *)(v0 + 88) = v6;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    v9 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 40) = v1;
    v11 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v4, v5, "%s failed to request access, reason: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return InvitationRequest<>.request()(v0 + 16);
}

uint64_t NearbyGroup.members.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyGroup.$members.getter()
{
  return NearbyGroup.$members.getter((uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t NearbyGroup.$state.getter()
{
  return NearbyGroup.$members.getter((uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t NearbyGroup.$members.getter(uint64_t a1, uint64_t *a2)
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t NearbyGroup.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL static NearbyGroup.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void NearbyGroup.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int NearbyGroup.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t NearbyGroup.Member.handle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroup.Member.handle.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NearbyGroup.Member.handle.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t NearbyGroup.Member.tokenDestination.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroup.Member.tokenDestination.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NearbyGroup.Member.tokenDestination.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

void NearbyGroup.Member.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int NearbyGroup.Member.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

NearbySessions::NearbyGroup::Member __swiftcall NearbyGroup.Member.init(handle:tokenDestination:)(Swift::String handle, Swift::String_optional tokenDestination)
{
  Swift::String_optional *v2;
  NearbySessions::NearbyGroup::Member result;

  v2->value = handle;
  v2[1] = tokenDestination;
  result.tokenDestination = tokenDestination;
  result.handle = handle;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance NearbyGroup.Member()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroup.Member()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t key path getter for NearbyGroup.members : NearbyGroup@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyGroup.members : NearbyGroup()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for NearbyGroup.state : NearbyGroup@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyGroup.state : NearbyGroup(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  outlined copy of NearbyGroup.State(v1);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for NearbyGroup.$members : NearbyGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a5);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for NearbyGroup.$members : NearbyGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v18 - v14, a1, v9);
  v16(v13, (uint64_t)v15, v9);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t NearbyGroup.localMemberHandle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

id NearbyGroup.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint);
}

id NearbyGroup.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue);
}

id NearbyGroup.connection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection);
}

uint64_t NearbyGroup.__allocating_init(members:service:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  type metadata accessor for UUID();
  *(_QWORD *)(v1 + 40) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t NearbyGroup.__allocating_init(members:service:)()
{
  objc_super *v0;
  uint64_t receiver;
  uint64_t v2;
  unint64_t *v3;
  int64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  unint64_t v25;

  receiver = (uint64_t)v0[2].receiver;
  v2 = *(_QWORD *)(receiver + 16);
  if (v2)
  {
    v25 = MEMORY[0x24BEE4AF8];
    v3 = &v25;
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = specialized Set.startIndex.getter(receiver);
    v6 = v5;
    v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(receiver + 32))
    {
      if (((*(_QWORD *)(receiver + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(receiver + 36) != v6)
        goto LABEL_14;
      v9 = (uint64_t)v0[2].receiver;
      v10 = (uint64_t *)(*(_QWORD *)(receiver + 48) + 16 * v4);
      v12 = *v10;
      v11 = v10[1];
      v13 = (objc_class *)type metadata accessor for NearbyGroupMember();
      v14 = (char *)objc_allocWithZone(v13);
      v15 = &v14[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
      *(_QWORD *)v15 = v12;
      *((_QWORD *)v15 + 1) = v11;
      v16 = &v14[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v0[1].receiver = v14;
      v0[1].super_class = v13;
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(v0 + 1, sel_init);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v3 = &v25;
      specialized ContiguousArray._endMutation()();
      v17 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v9);
      v4 = v17;
      v6 = v18;
      v8 = v19 & 1;
      if (!--v2)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(v17, v18, v19 & 1);
        v20 = v25;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v20 = MEMORY[0x24BEE4AF8];
LABEL_10:
  UUID.init()();
  v3 = (unint64_t *)specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1)
LABEL_15:
    swift_once();
  v21 = static NearbyInvitationsController.shared;
  v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:)
                                                          + async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:));
  swift_retain();
  v22 = (_QWORD *)swift_task_alloc();
  v0[3].receiver = v22;
  *v22 = v0;
  v22[1] = NearbyGroup.__allocating_init(members:service:);
  return v24((uint64_t)v0[2].super_class, (uint64_t)v3, v21);
}

uint64_t NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:)
                                                         + async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = NearbyGroup.__allocating_init(id:members:controller:);
  return v9(a1, a2, a3);
}

uint64_t NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t NearbyGroup.__allocating_init(connectionInfo:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 56);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();

  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t NearbyGroup.__allocating_init(connectionInfo:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = v0[2];
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[5] + 16))(v0[6], v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id, v0[4]);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  v0[7] = v2;
  swift_allocObject();
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  v3 = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = NearbyGroup.__allocating_init(connectionInfo:);
  return v6(v0[6], (uint64_t)v3);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroup.init(id:members:controller:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_retain();
  return closure #1 in NearbyGroup.init(id:members:controller:)(v3, v1, a1);
}

uint64_t NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = a2;
  swift_allocObject();
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = NearbyGroup.__allocating_init(id:endpoint:);
  return v7(a1, a2);
}

uint64_t NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = a2;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = NearbyGroup.init(id:endpoint:);
  return v7(a1, a2);
}

uint64_t closure #1 in NearbyGroup.init(id:endpoint:)()
{
  uint64_t result;
  void *v1;
  _BYTE *v2;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    v1 = (void *)swift_allocError();
    *v2 = 0;
    NearbyGroup.invalidate(reason:)(v1);

    return swift_release();
  }
  return result;
}

uint64_t NearbyGroup.invalidate(reason:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  swift_retain();
  v10 = a1;
  swift_retain();
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v34 = v4;
    v15 = v14;
    v16 = (_QWORD *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v33 = v5;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v15 = 136315394;
    swift_retain();
    v19 = NearbyGroup.description.getter();
    v21 = v20;
    swift_release();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v15 + 12) = 2112;
    v22 = a1;
    v23 = _swift_stdlib_bridgeErrorToNSError();
    v39 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v16 = v23;

    _os_log_impl(&dword_242981000, v12, v13, "%s Invalidating for reason: %@", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v16, -1, -1);
    swift_arrayDestroy();
    v24 = v18;
    v5 = v33;
    MEMORY[0x2494EA95C](v24, -1, -1);
    v25 = v15;
    v4 = v34;
    MEMORY[0x2494EA95C](v25, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v2;
  *(_QWORD *)(v26 + 24) = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyGroup.invalidate(reason:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_1;
  v27 = _Block_copy(aBlock);
  swift_retain();
  v28 = a1;
  v29 = v35;
  static DispatchQoS.unspecified.getter();
  v39 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  v30 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2494EA128](0, v29, v30, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v4);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v37);
  return swift_release();
}

uint64_t closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  _QWORD v15[3];
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = result;
    v15[1] = *(_QWORD *)(result + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a1;
    *(_QWORD *)(v12 + 24) = v11;
    aBlock[4] = partial apply for closure #1 in closure #2 in NearbyGroup.init(id:endpoint:);
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_131;
    v13 = _Block_copy(aBlock);
    v15[0] = v3;
    v14 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v15[2] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2494EA128](0, v9, v5, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v15[0] + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for group != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_242981000, v3, v4, "Received updated membership list %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v6, -1, -1);
    MEMORY[0x2494EA95C](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = specialized Sequence.compactMap<A>(_:)(a1);
  v10 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  v12 = v10;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v26[3];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.group);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v28 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc();
    aBlock[0] = v13;
    v26[2] = v6;
    *(_DWORD *)v12 = 136315138;
    v26[1] = v12 + 4;
    swift_retain();
    v14 = NearbyGroup.description.getter();
    v27 = a1;
    v15 = v4;
    v17 = v16;
    swift_release();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v4 = v15;
    a1 = v27;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v9, v10, "%s Attempting to join", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v13, -1, -1);
    v18 = v12;
    v7 = v28;
    MEMORY[0x2494EA95C](v18, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v19 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v20 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v7, v4);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #1 in closure #3 in NearbyGroup.init(id:endpoint:);
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_116;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v19, v23);

  _Block_release(v23);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v11 = a1;
  v12 = a2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v8 + v7, &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Set<NearbyGroupMember>?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_125;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_joinWithNearbyGroupMembers_, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67[2];
  uint64_t v68[3];

  v66 = a1;
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = a4;
  v18 = Logger.logObject.getter();
  v65 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v18, (os_log_type_t)v65))
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (!a4)
      goto LABEL_20;
LABEL_7:
    v26 = a4;
    swift_retain();
    v27 = a4;
    swift_retain();
    v28 = a4;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v68[0] = v32;
      *(_DWORD *)v31 = 136315394;
      swift_retain();
      v33 = NearbyGroup.description.getter();
      v35 = v34;
      swift_release();
      v67[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      v67[0] = (uint64_t)a4;
      v36 = a4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v37 = String.init<A>(reflecting:)();
      v67[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v29, v30, "%s was told an error remotely when trying to join %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v32, -1, -1);
      MEMORY[0x2494EA95C](v31, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    v68[0] = (uint64_t)a4;
    goto LABEL_11;
  }
  v59 = v11;
  v61 = v18;
  v62 = v12;
  v63 = v15;
  v64 = a6;
  v19 = swift_slowAlloc();
  v60 = swift_slowAlloc();
  v67[0] = v60;
  *(_DWORD *)v19 = 136315906;
  swift_retain();
  v20 = NearbyGroup.description.getter();
  v22 = v21;
  swift_release();
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v19 + 12) = 2080;
  if (a2)
  {
    v68[0] = v66;
    v68[1] = a2;
    swift_bridgeObjectRetain();
    v23 = String.init<A>(reflecting:)();
    v25 = v24;
  }
  else
  {
    v25 = 0xE300000000000000;
    v23 = 7104878;
  }
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v19 + 22) = 2080;
  if (a3)
  {
    v68[0] = a3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    v40 = String.init<A>(reflecting:)();
    v42 = v41;
  }
  else
  {
    v42 = 0xE300000000000000;
    v40 = 7104878;
  }
  v43 = v59;
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v19 + 32) = 2080;
  if (a4)
  {
    v68[0] = (uint64_t)a4;
    v44 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v45 = String.init<A>(reflecting:)();
    v47 = v46;
  }
  else
  {
    v47 = 0xE300000000000000;
    v45 = 7104878;
  }
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  v48 = v61;
  _os_log_impl(&dword_242981000, v61, (os_log_type_t)v65, "%s received response: (localHandle: %s, members: %s, error: %s)", (uint8_t *)v19, 0x2Au);
  v49 = v60;
  swift_arrayDestroy();
  MEMORY[0x2494EA95C](v49, -1, -1);
  MEMORY[0x2494EA95C](v19, -1, -1);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v43);
  if (a4)
    goto LABEL_7;
LABEL_20:
  if (!a3)
  {
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      _os_log_impl(&dword_242981000, v53, v54, "Received invalid callback where we didn't have an error, but also didn't have a membership list!", v55, 2u);
      MEMORY[0x2494EA95C](v55, -1, -1);
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    v56 = swift_allocError();
    *v57 = 0;
    v68[0] = v56;
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  v50 = (uint64_t *)(a5 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  swift_beginAccess();
  *v50 = v66;
  v50[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51 = specialized Sequence.compactMap<A>(_:)(a3);
  v52 = specialized Set.init<A>(_:)(v51);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  v67[0] = v52;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  v67[0] = 1;
  swift_retain();
  static Published.subscript.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Set<NearbyGroupMember>?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v5 = a3;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    v7 = 0;
    v9 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
  if (v5)
  {
LABEL_3:
    type metadata accessor for NearbyGroupMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NearbyGroupMember, MEMORY[0x24BEE5BD8]);
    v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_4:
  swift_retain();
  v10 = a4;
  v6(v7, v9, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v17;

  if (one-time initialization token for group != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.group);
  swift_retain();
  v3 = a1;
  swift_retain();
  v4 = a1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_retain();
    v9 = NearbyGroup.description.getter();
    v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v5, v6, "%s Had errorHandler called when trying to join %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v17 = (uint64_t)a1;
  v15 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t closure #1 in NearbyGroup.invalidate(reason:)(uint64_t a1, void *a2)
{
  id v3;

  swift_getKeyPath();
  swift_getKeyPath();
  v3 = a2;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return swift_task_switch();
}

uint64_t NearbyGroup.addMember(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v3 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v3, v1, v2, (uint64_t)v23);
  swift_bridgeObjectRelease();
  v4 = v23[0];
  v5 = v23[1];
  *(_QWORD *)(v0 + 96) = v23[0];
  *(_QWORD *)(v0 + 104) = v5;
  v6 = v24;
  v7 = v25;
  *(_QWORD *)(v0 + 112) = v24;
  *(_QWORD *)(v0 + 120) = v7;
  if (v5)
  {
    *(_QWORD *)(v0 + 16) = v4;
    *(_QWORD *)(v0 + 24) = v5;
    *(_QWORD *)(v0 + 32) = v6;
    *(_QWORD *)(v0 + 40) = v7;
    v8 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v8;
    *(_QWORD *)v8 = v0;
    *(_QWORD *)(v8 + 8) = NearbyGroup.addMember(_:);
    *(_QWORD *)(v8 + 96) = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v8 + 104) = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v8 + 112) = *(_QWORD *)(v0 + 24);
    *(_OWORD *)(v8 + 120) = *(_OWORD *)(v0 + 32);
    return swift_task_switch();
  }
  else
  {
    if (one-time initialization token for group != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 80);
    if (v13)
    {
      v21 = *(_QWORD *)(v0 + 72);
      v15 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v23[0] = v22;
      *(_DWORD *)v15 = 136315394;
      swift_retain();
      type = v12;
      v16 = NearbyGroup.description.getter();
      v18 = v17;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v14, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_242981000, v11, type, "%s There is no member: %s in NearbyGroup.Member list", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v22, -1, -1);
      MEMORY[0x2494EA95C](v15, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *v19 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  outlined consume of NearbyGroup.Member?(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  objc_super *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  Class v11;
  id v12;
  Class v13;
  id v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  Class v23;
  objc_class *v24;
  Class super_class;
  objc_class *receiver;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for group != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[8].super_class = (Class)__swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    receiver = (objc_class *)v0[8].receiver;
    v24 = (objc_class *)v0[7].receiver;
    super_class = v0[7].super_class;
    v23 = v0[6].super_class;
    v4 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v28 = v27;
    *(_DWORD *)v4 = 136315394;
    swift_retain();
    v5 = NearbyGroup.description.getter();
    v7 = v6;
    swift_release();
    v0[5].receiver = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    v0[1].receiver = v23;
    v0[1].super_class = v24;
    v0[2].receiver = super_class;
    v0[2].super_class = receiver;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = String.init<A>(reflecting:)();
    v0[5].super_class = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_242981000, v2, v3, "%s received request to add member: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v27, -1, -1);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v11 = v0[7].super_class;
  v10 = v0[8].receiver;
  v13 = v0[6].super_class;
  v12 = v0[7].receiver;
  v14 = v0[6].receiver;
  v15 = (objc_class *)type metadata accessor for NearbyGroupMember();
  v16 = (char *)objc_allocWithZone(v15);
  v17 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(_QWORD *)v17 = v13;
  *((_QWORD *)v17 + 1) = v12;
  v18 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(_QWORD *)v18 = v11;
  *((_QWORD *)v18 + 1) = v10;
  v0[3].receiver = v16;
  v0[3].super_class = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = objc_msgSendSuper2(v0 + 3, sel_init);
  v0[9].receiver = v19;
  v20 = swift_task_alloc();
  v0[9].super_class = (Class)v20;
  *(_QWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = (_QWORD *)swift_task_alloc();
  v0[10].receiver = v21;
  *v21 = v0;
  v21[1] = NearbyGroup.addMember(_:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 144);
  swift_retain_n();
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 144);
    v16 = v5;
    v6 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v6 = 136315394;
    swift_retain();
    v7 = NearbyGroup.description.getter();
    v9 = v8;
    swift_release();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = objc_msgSend(v5, sel_description);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v3, v4, "%s successfully added member: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v17, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 144);

    swift_release_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  int64_t v25;

  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v25)
      goto LABEL_29;
    v15 = *(_QWORD *)(v24 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v25)
        goto LABEL_29;
      v15 = *(_QWORD *)(v24 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v25)
          goto LABEL_29;
        v15 = *(_QWORD *)(v24 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v25)
            goto LABEL_29;
          v15 = *(_QWORD *)(v24 + 8 * v11);
          if (!v15)
          {
            v16 = v14 + 4;
            if (v16 >= v25)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              result = swift_release();
              *(_OWORD *)a4 = 0u;
              *(_OWORD *)(a4 + 16) = 0u;
              return result;
            }
            v15 = *(_QWORD *)(v24 + 8 * v16);
            v11 = v16;
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v13);
    v18 = *v17;
    v19 = v17[1];
    v21 = v17[2];
    v20 = v17[3];
    if (*v17 == a2 && v19 == a3)
    {
      v18 = a2;
      v19 = a3;
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)a4 = v18;
      *(_QWORD *)(a4 + 8) = v19;
      *(_QWORD *)(a4 + 16) = v21;
      *(_QWORD *)(a4 + 24) = v20;
      return result;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v25)
      goto LABEL_29;
    v15 = *(_QWORD *)(v24 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t NearbyGroup.addMember(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)(v2 + 96) = v1;
  *(_QWORD *)(v2 + 104) = v3;
  *(_QWORD *)(v2 + 112) = v4;
  *(_OWORD *)(v2 + 120) = *((_OWORD *)a1 + 1);
  return swift_task_switch();
}

uint64_t closure #1 in NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.addMember(_:);
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_91;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v13 = a2;
  v14 = a3;
  v15 = a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))(v10 + v9, &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

uint64_t NearbyGroup.kickMember(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return swift_task_switch();
}

uint64_t NearbyGroup.kickMember(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v3 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v3, v1, v2, (uint64_t)v23);
  swift_bridgeObjectRelease();
  v4 = v23[0];
  v5 = v23[1];
  *(_QWORD *)(v0 + 96) = v23[0];
  *(_QWORD *)(v0 + 104) = v5;
  v6 = v24;
  v7 = v25;
  *(_QWORD *)(v0 + 112) = v24;
  *(_QWORD *)(v0 + 120) = v7;
  if (v5)
  {
    *(_QWORD *)(v0 + 16) = v4;
    *(_QWORD *)(v0 + 24) = v5;
    *(_QWORD *)(v0 + 32) = v6;
    *(_QWORD *)(v0 + 40) = v7;
    v8 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v8;
    *(_QWORD *)v8 = v0;
    *(_QWORD *)(v8 + 8) = NearbyGroup.kickMember(_:);
    *(_QWORD *)(v8 + 96) = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v8 + 104) = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v8 + 112) = *(_QWORD *)(v0 + 24);
    *(_OWORD *)(v8 + 120) = *(_OWORD *)(v0 + 32);
    return swift_task_switch();
  }
  else
  {
    if (one-time initialization token for group != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 80);
    if (v13)
    {
      v21 = *(_QWORD *)(v0 + 72);
      v15 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v23[0] = v22;
      *(_DWORD *)v15 = 136315394;
      swift_retain();
      type = v12;
      v16 = NearbyGroup.description.getter();
      v18 = v17;
      swift_release();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v14, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_242981000, v11, type, "%s There is no member: %s in NearbyGroup.Member list", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v22, -1, -1);
      MEMORY[0x2494EA95C](v15, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *v19 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  outlined consume of NearbyGroup.Member?(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  outlined consume of NearbyGroup.Member?(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroup.kickMember(member:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)(v2 + 96) = v1;
  *(_QWORD *)(v2 + 104) = v3;
  *(_QWORD *)(v2 + 112) = v4;
  *(_OWORD *)(v2 + 120) = *((_OWORD *)a1 + 1);
  return swift_task_switch();
}

uint64_t NearbyGroup.kickMember(member:)()
{
  objc_super *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  Class v11;
  id v12;
  Class v13;
  id v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  Class v23;
  objc_class *v24;
  Class super_class;
  objc_class *receiver;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for group != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[8].super_class = (Class)__swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    receiver = (objc_class *)v0[8].receiver;
    v24 = (objc_class *)v0[7].receiver;
    super_class = v0[7].super_class;
    v23 = v0[6].super_class;
    v4 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v28 = v27;
    *(_DWORD *)v4 = 136315394;
    swift_retain();
    v5 = NearbyGroup.description.getter();
    v7 = v6;
    swift_release();
    v0[5].receiver = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    v0[1].receiver = v23;
    v0[1].super_class = v24;
    v0[2].receiver = super_class;
    v0[2].super_class = receiver;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = String.init<A>(reflecting:)();
    v0[5].super_class = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_242981000, v2, v3, "%s received request to kick member: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v27, -1, -1);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v11 = v0[7].super_class;
  v10 = v0[8].receiver;
  v13 = v0[6].super_class;
  v12 = v0[7].receiver;
  v14 = v0[6].receiver;
  v15 = (objc_class *)type metadata accessor for NearbyGroupMember();
  v16 = (char *)objc_allocWithZone(v15);
  v17 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(_QWORD *)v17 = v13;
  *((_QWORD *)v17 + 1) = v12;
  v18 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(_QWORD *)v18 = v11;
  *((_QWORD *)v18 + 1) = v10;
  v0[3].receiver = v16;
  v0[3].super_class = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = objc_msgSendSuper2(v0 + 3, sel_init);
  v0[9].receiver = v19;
  v20 = swift_task_alloc();
  v0[9].super_class = (Class)v20;
  *(_QWORD *)(v20 + 16) = v14;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = (_QWORD *)swift_task_alloc();
  v0[10].receiver = v21;
  *v21 = v0;
  v21[1] = NearbyGroup.kickMember(member:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 144);
  swift_retain_n();
  v2 = v1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 144);
    v16 = v5;
    v6 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v6 = 136315394;
    swift_retain();
    v7 = NearbyGroup.description.getter();
    v9 = v8;
    swift_release();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = objc_msgSend(v5, sel_description);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v3, v4, "%s successfully kicked member: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v17, -1, -1);
    MEMORY[0x2494EA95C](v6, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 144);

    swift_release_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:);
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_72_0;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  _BYTE v13[16];
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v14 = a2;
  v15 = a3;
  v16 = a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))(v10 + v9, &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
  swift_retain();
  v11 = a2;
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  SEL *v27;
  _QWORD aBlock[6];

  v26 = a7;
  v27 = a8;
  v23 = a2;
  v24 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  *(_QWORD *)(v17 + v16) = a4;
  v19 = v23;
  v18 = v24;
  *(_QWORD *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = v18;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = v26;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = v19;
  swift_release();
  objc_msgSend(v25, *v27, v21, v20);
  _Block_release(v20);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1, uint64_t a2, uint64_t a3, void *a4, char *a5)
{
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  char *format;
  uint64_t v29;
  uint64_t v30;

  if (a1)
  {
    v8 = a1;
    if (one-time initialization token for group != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.group);
    v10 = a1;
    swift_retain();
    v11 = a4;
    v12 = a1;
    swift_retain();
    v13 = v11;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v30 = v29;
      *(_DWORD *)v16 = 136315650;
      format = a5;
      swift_retain();
      v17 = NearbyGroup.description.getter();
      v19 = v18;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      v20 = objc_msgSend(v13, sel_description);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2080;
      v24 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v25 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v14, v15, format, (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v29, -1, -1);
      MEMORY[0x2494EA95C](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }

    v30 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  if (one-time initialization token for group != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.group);
  swift_retain();
  v6 = a3;
  v7 = a1;
  swift_retain();
  v8 = v6;
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v26 = v25;
    *(_DWORD *)v12 = 136315650;
    swift_retain();
    v13 = NearbyGroup.description.getter();
    v15 = v14;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v16 = objc_msgSend(v8, sel_description);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    v20 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v21 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v10, v11, "%s Had errorHandler called when trying to kick member: %s, error: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v25, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  v26 = (uint64_t)a1;
  v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t NearbyGroup.leave()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (one-time initialization token for group != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    swift_retain();
    v6 = NearbyGroup.description.getter();
    v8 = v7;
    swift_release();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v2, v3, "%s received request to leave", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v5, -1, -1);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v9 = (_QWORD *)swift_task_alloc();
  v0[6] = v9;
  *v9 = v0;
  v9[1] = NearbyGroup.leave();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v9 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_retain();
    v5 = NearbyGroup.description.getter();
    v7 = v6;
    swift_release();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v1, v2, "%s successfully left", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v4, -1, -1);
    MEMORY[0x2494EA95C](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyGroup.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.leave();
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_53;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);

  _Block_release(v11);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v11 = a2;
  v12 = a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v8 + v7, &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(_QWORD *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave();
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_62;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_leaveWithCompletion_, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (a1)
  {
    v2 = a1;
    if (one-time initialization token for group != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.group);
    v4 = a1;
    swift_retain();
    v5 = a1;
    swift_retain();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136315394;
      swift_retain();
      v10 = NearbyGroup.description.getter();
      v12 = v11;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      v13 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_242981000, v6, v7, "%s was told an error remotely when trying to leave, error: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v9, -1, -1);
      MEMORY[0x2494EA95C](v8, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    v17 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v22;

  if (one-time initialization token for group != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.group);
  swift_retain();
  v7 = a1;
  swift_retain();
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v22 = v12;
    *(_DWORD *)v11 = 136315394;
    swift_retain();
    v13 = NearbyGroup.description.getter();
    v14 = a4;
    v16 = v15;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v17 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v18 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v9, v10, v14, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v12, -1, -1);
    MEMORY[0x2494EA95C](v11, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v22 = (uint64_t)a1;
  v20 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t NearbyGroup.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NearbyGroup.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for InvitationSourceProvider.id.getter in conformance NearbyGroup@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for InvitationSourceProvider.didApproveMember(member:) in conformance NearbyGroup(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v1;
  v5 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  v6 = *a1;
  v7 = a1[1];
  *(_QWORD *)(v5 + 88) = v4;
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = v7;
  *(_OWORD *)(v5 + 112) = *((_OWORD *)a1 + 1);
  return swift_task_switch();
}

uint64_t NearbyGroup.didApproveMember(member:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)(v2 + 88) = v1;
  *(_QWORD *)(v2 + 96) = v3;
  *(_QWORD *)(v2 + 104) = v4;
  *(_OWORD *)(v2 + 112) = *((_OWORD *)a1 + 1);
  return swift_task_switch();
}

uint64_t NearbyGroup.didApproveMember(member:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for group != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v17 = v8;
    *(_QWORD *)(v0 + 48) = v6;
    *(_QWORD *)(v0 + 56) = v5;
    *(_QWORD *)(v0 + 64) = v4;
    *(_QWORD *)(v0 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_242981000, v2, v3, "Received approved member: %s attempting to add now", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v11 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 24) = v11;
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 112);
  v12 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v12;
  *(_QWORD *)v12 = v0;
  *(_QWORD *)(v12 + 8) = NearbyGroup.didApproveMember(member:);
  v13 = *(_QWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v12 + 96) = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v12 + 104) = v13;
  *(_QWORD *)(v12 + 112) = v14;
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(v0 + 32);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroup.description.getter()
{
  char *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v21;

  _StringGuts.grow(_:)(88);
  v1._object = (void *)0x80000002429DD150;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
  v21 = v0;
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A6469202CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6574617473202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  outlined consume of NearbyGroup.State(v0);
  v5._countAndFlagsBits = 0x696F70646E65202CLL;
  v5._object = (void *)0xEC000000203A746ELL;
  String.append(_:)(v5);
  v6 = *(id *)&v0[OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint];
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();

  v12._countAndFlagsBits = 0x7265626D656D202CLL;
  v12._object = (void *)0xEB00000000203A73;
  String.append(_:)(v12);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
  v13._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000014;
  v14._object = (void *)0x80000002429DD170;
  String.append(_:)(v14);
  v15 = &v21[OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle];
  swift_beginAccess();
  if (*((_QWORD *)v15 + 1))
  {
    swift_bridgeObjectRetain_n();
    v16 = String.init<A>(reflecting:)();
    v18 = v17;
  }
  else
  {
    v18 = 0xE300000000000000;
    v16 = 7104878;
  }
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyGroup()
{
  return NearbyGroup.description.getter();
}

uint64_t static NearbyGroup.groups(service:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  if (one-time initialization token for shared != -1)
    v8 = swift_once();
  MEMORY[0x24BDAC7A8](v8);
  *(&v11 - 2) = v9;
  *(&v11 - 1) = (uint64_t)v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  AsyncStream.init(_:bufferingPolicy:_:)();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v5 = swift_once();
  MEMORY[0x24BDAC7A8](v5);
  *(&v10 - 2) = v8;
  *(&v10 - 1) = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x24BEE6A10], v3);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v31 = a1;
  v32 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v28 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v29 = v10;
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  outlined init with copy of (UUID, Bool)(a3, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = a1;
  v17 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v5);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (v10 + *(unsigned __int8 *)(v6 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = v32;
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v11, (uint64_t)&v21[v19], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v21[v20], v28, v17);
  swift_retain();
  v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), (uint64_t)v21);
  outlined init with copy of (UUID, Bool)(v30, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v23 = (v18 + 16) & ~v18;
  v24 = (v29 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject();
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v11, v25 + v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v25 + v24) = v22;
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  v7 = type metadata accessor for Logger();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.YieldResult);
  v6[20] = v8;
  v6[21] = *(_QWORD *)(v8 - 8);
  v6[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6[23] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v6[24] = v9;
  v6[25] = *(_QWORD *)(v9 - 8);
  v6[26] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v6[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[28] = v11;
  v6[29] = *(_QWORD *)(v11 + 64);
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>);
  v6[41] = v12;
  v6[42] = *(_QWORD *)(v12 - 8);
  v6[43] = swift_task_alloc();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v6[44] = v13;
  v6[45] = *(_QWORD *)(v13 - 8);
  v6[46] = swift_task_alloc();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator);
  v6[47] = v14;
  v6[48] = *(_QWORD *)(v14 - 8);
  v6[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  char *v13;

  if (one-time initialization token for group != -1)
    swift_once();
  v0[50] = __swift_project_value_buffer(v0[15], (uint64_t)static Log.group);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_242981000, v1, v2, "Waiting for groups", v3, 2u);
    MEMORY[0x2494EA95C](v3, -1, -1);
  }
  v4 = v0[45];
  v5 = v0[46];
  v6 = v0[43];
  v7 = v0[44];
  v8 = v0[41];
  v12 = v0[42];

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  swift_endAccess();
  v9 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UUID : NearbyGroupConnectionInfo]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x2494E9E64](v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v6, v8);
  v0[51] = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  v13 = (char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
      + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu;
  v10 = (_QWORD *)swift_task_alloc();
  v0[52] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t *))v13)(0, 0, v0 + 5);
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  void *v34;
  uint64_t v35;
  id v36;
  int isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t (*v62)(_QWORD *);
  _QWORD *v63;
  uint64_t v64;

  v1 = v0[53];
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    v58 = v0;
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v64 = v5;
      *(_DWORD *)v4 = 136315138;
      v0[10] = v1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
      v6 = String.init<A>(reflecting:)();
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_242981000, v2, v3, "Heard about groups: %s", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v5, -1, -1);
      MEMORY[0x2494EA95C](v4, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v59 = v0 + 6;
    v12 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v55 = v1 + 64;
    v13 = -1;
    v14 = -1 << *(_BYTE *)(v1 + 32);
    if (-v14 < 64)
      v13 = ~(-1 << -(char)v14);
    v15 = v13 & *(_QWORD *)(v1 + 64);
    v56 = (unint64_t)(63 - v14) >> 6;
    v57 = v1;
    result = swift_bridgeObjectRetain();
    for (i = 0; ; i = v61)
    {
      v0[54] = v12;
      v63 = v12;
      if (v15)
      {
        v60 = (v15 - 1) & v15;
        v61 = i;
        v21 = __clz(__rbit64(v15)) | (i << 6);
      }
      else
      {
        v22 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_46;
        if (v22 >= v56)
        {
LABEL_42:
          v51 = v0[51];
          v52 = v0[12];
          swift_release();
          v53 = *(_QWORD *)(v52 + v51);
          v0[55] = v53;
          v62 = (uint64_t (*)(_QWORD *))(**(int **)(*(_QWORD *)v53 + 144)
                                                 + *(_QWORD *)(*(_QWORD *)v53 + 144));
          v54 = (_QWORD *)swift_task_alloc();
          v0[56] = v54;
          *v54 = v0;
          v54[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
          return v62(v12);
        }
        v23 = *(_QWORD *)(v55 + 8 * v22);
        v24 = i + 1;
        if (!v23)
        {
          v24 = i + 2;
          if (i + 2 >= v56)
            goto LABEL_42;
          v23 = *(_QWORD *)(v55 + 8 * v24);
          if (!v23)
          {
            v24 = i + 3;
            if (i + 3 >= v56)
              goto LABEL_42;
            v23 = *(_QWORD *)(v55 + 8 * v24);
            if (!v23)
            {
              v24 = i + 4;
              if (i + 4 >= v56)
                goto LABEL_42;
              v23 = *(_QWORD *)(v55 + 8 * v24);
              if (!v23)
              {
                v24 = i + 5;
                if (i + 5 >= v56)
                  goto LABEL_42;
                v23 = *(_QWORD *)(v55 + 8 * v24);
                if (!v23)
                {
                  v25 = i + 6;
                  if (i + 6 >= v56)
                    goto LABEL_42;
                  v23 = *(_QWORD *)(v55 + 8 * v25);
                  if (!v23)
                  {
                    while (1)
                    {
                      v24 = v25 + 1;
                      if (__OFADD__(v25, 1))
                        goto LABEL_47;
                      if (v24 >= v56)
                        goto LABEL_42;
                      v23 = *(_QWORD *)(v55 + 8 * v24);
                      ++v25;
                      if (v23)
                        goto LABEL_32;
                    }
                  }
                  v24 = i + 6;
                }
              }
            }
          }
        }
LABEL_32:
        v60 = (v23 - 1) & v23;
        v61 = v24;
        v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      v27 = v0[39];
      v26 = v0[40];
      v28 = v0[38];
      v29 = v0[27];
      v31 = v0[24];
      v30 = v0[25];
      v32 = *(_QWORD *)(v30 + 72);
      v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16);
      v33(v26, *(_QWORD *)(v57 + 48) + v32 * v21, v31);
      v0 = v58;
      v34 = *(void **)(*(_QWORD *)(v57 + 56) + 8 * v21);
      *(_QWORD *)(v26 + *(int *)(v29 + 48)) = v34;
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v26, v27, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v35 = *(int *)(v29 + 48);
      v33(v28, v27, v31);
      *(_QWORD *)(v28 + v35) = *(_QWORD *)(v27 + v35);
      v36 = v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v58[6] = v63;
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      v40 = v63[2];
      v41 = (v38 & 1) == 0;
      result = v40 + v41;
      if (__OFADD__(v40, v41))
        break;
      v42 = v38;
      if (v63[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        v43 = v58[38];
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
        v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
        if ((v42 & 1) != (v45 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v39 = v44;
      }
      v12 = (_QWORD *)*v59;
      if ((v42 & 1) != 0)
      {
        *(_BYTE *)(v12[7] + v39) = 1;
      }
      else
      {
        v46 = v58[38];
        v47 = v58[24];
        v12[(v39 >> 6) + 8] |= 1 << v39;
        result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v33)(v12[6] + v39 * v32, v46, v47);
        *(_BYTE *)(v12[7] + v39) = 1;
        v48 = v12[2];
        v49 = __OFADD__(v48, 1);
        v50 = v48 + 1;
        if (v49)
          goto LABEL_45;
        v12[2] = v50;
      }
      v18 = v58[38];
      v17 = v58[39];
      v20 = v58[24];
      v19 = v58[25];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      result = outlined destroy of Invitation_HostConnectionInfo?(v17, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v15 = v60;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[48] + 8))(v0[49], v0[47]);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, (os_log_type_t)v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_242981000, v8, (os_log_type_t)v9, "No longer waiting for groups", v10, 2u);
      MEMORY[0x2494EA95C](v10, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
    AsyncStream.Continuation.finish()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
  return result;
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD, void *, uint64_t);
  uint64_t (*v49)(uint64_t, uint64_t);

  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  result = outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v6 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 464);
  if (!v5)
    goto LABEL_3;
LABEL_2:
  v7 = __clz(__rbit64(v5));
  v8 = (v5 - 1) & v5;
  v9 = v7 | (v6 << 6);
  v10 = *(_QWORD *)(v0 + 424);
  while (1)
  {
    v45 = v8;
    v46 = v6;
    *(_QWORD *)(v0 + 456) = v6;
    *(_QWORD *)(v0 + 464) = v8;
    v17 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v19 + 72) * v9;
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
    *(_QWORD *)(v0 + 472) = v23;
    v23(v16, v22, v20);
    v24 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v9);
    *(_QWORD *)(v16 + *(int *)(v18 + 48)) = v24;
    v25 = *(int *)(v18 + 48);
    *(_DWORD *)(v0 + 512) = v25;
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
    v26(v17, v16, v20);
    *(_QWORD *)(v17 + v25) = v24;
    outlined init with copy of (UUID, Bool)(v47, v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) == 1)
    {
      v32 = *(_QWORD *)(v0 + 184);
      v33 = v24;
      outlined destroy of Invitation_HostConnectionInfo?(v32, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_22:
      v34 = *(_QWORD *)(v0 + 440);
      v36 = *(_QWORD *)(v0 + 280);
      v35 = *(_QWORD *)(v0 + 288);
      v37 = *(_QWORD *)(v0 + 224);
      v38 = *(int *)(*(_QWORD *)(v0 + 216) + 48);
      v23(v36, v35, *(_QWORD *)(v0 + 192));
      v39 = *(void **)(v35 + v25);
      *(_QWORD *)(v36 + v38) = v39;
      v40 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      v41 = swift_allocObject();
      *(_QWORD *)(v0 + 480) = v41;
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v36, v41 + v40, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v48 = (uint64_t (*)(_QWORD, void *, uint64_t))(**(int **)(*(_QWORD *)v34 + 152)
                                                            + *(_QWORD *)(*(_QWORD *)v34 + 152));
      v42 = v39;
      v43 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 488) = v43;
      *v43 = v0;
      v43[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
      return v48(*(_QWORD *)(v0 + 288), &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v41);
    }
    v28 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 192);
    v26(v27, *(_QWORD *)(v0 + 184), v29);
    v30 = v24;
    v31 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    if ((v31 & 1) != 0)
      goto LABEL_22;
    result = outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    v5 = v45;
    v6 = v46;
    if (v45)
      goto LABEL_2;
LABEL_3:
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    v12 = (unint64_t)((1 << *(_BYTE *)(v0 + 516)) + 63) >> 6;
    v10 = *(_QWORD *)(v0 + 424);
    if (v11 >= v12)
      goto LABEL_23;
    v13 = v10 + 64;
    v14 = *(_QWORD *)(v10 + 64 + 8 * v11);
    ++v6;
    if (!v14)
    {
      v6 = v11 + 1;
      if (v11 + 1 >= v12)
        goto LABEL_23;
      v14 = *(_QWORD *)(v13 + 8 * v6);
      if (!v14)
      {
        v6 = v11 + 2;
        if (v11 + 2 >= v12)
          goto LABEL_23;
        v14 = *(_QWORD *)(v13 + 8 * v6);
        if (!v14)
          break;
      }
    }
LABEL_16:
    v8 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v6 << 6);
  }
  v15 = v11 + 3;
  if (v15 >= v12)
  {
LABEL_23:
    swift_release();
    v49 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                   + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
    v44 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v44;
    *v44 = v0;
    v44[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
    return v49(0, 0);
  }
  v14 = *(_QWORD *)(v13 + 8 * v15);
  if (v14)
  {
    v6 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v12)
      goto LABEL_23;
    v14 = *(_QWORD *)(v13 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t (*v90)(_QWORD, void *, uint64_t);
  uint64_t (*v91)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 496);
  v2 = *(int *)(v0 + 512);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  v87 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 16))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 120));
  v9 = *(int *)(v7 + 48);
  v3(v5, v4, v8);
  v10 = *(void **)(v4 + v2);
  *(_QWORD *)(v5 + v9) = v10;
  outlined init with copy of (UUID, Bool)(v5, v6, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v5, v87, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v11 = v1;
  v12 = v1;
  v13 = v10;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v88 = (uint64_t *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 152);
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    *(_QWORD *)(v0 + 56) = v22;
    *(_DWORD *)v21 = 136315394;
    outlined init with copy of (UUID, Bool)(v16, v19, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v18);
    outlined init with copy of (UUID, Bool)(v19, v20, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v18) == 1)
    {
      v23 = 0xE300000000000000;
      v24 = 7104878;
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 264);
      v32 = *(_QWORD *)(v0 + 272);
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(*(_QWORD *)(v0 + 144), v32, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      outlined init with copy of (UUID, Bool)(v32, v31, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v24 = String.init<A>(reflecting:)();
      v23 = v33;
      outlined destroy of Invitation_HostConnectionInfo?(v32, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    }
    v34 = *(void **)(v0 + 496);
    v35 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 248);
    v82 = *(_QWORD *)(v0 + 128);
    v83 = *(_QWORD *)(v0 + 120);
    v84 = *(_QWORD *)(v0 + 136);
    outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 152), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
    *(_QWORD *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, v88);
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?(v35, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v36, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v0 + 64) = v34;
    v37 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v38 = String.init<A>(reflecting:)();
    *(_QWORD *)(v21 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v88);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v14, v15, "Failed to create new nearbyGroup %s, error: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v22, -1, -1);
    MEMORY[0x2494EA95C](v21, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v83);
  }
  else
  {
    v25 = *(void **)(v0 + 496);
    v27 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 120);

    outlined destroy of Invitation_HostConnectionInfo?(v27, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v26, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }
  v40 = v0;
  result = outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v43 = *(_QWORD *)(v0 + 456);
  v42 = *(_QWORD *)(v0 + 464);
  if (!v42)
    goto LABEL_9;
LABEL_8:
  v44 = __clz(__rbit64(v42));
  v45 = (v42 - 1) & v42;
  v46 = v44 | (v43 << 6);
  v47 = *(_QWORD *)(v40 + 424);
  while (1)
  {
    v85 = v45;
    v86 = v43;
    *(_QWORD *)(v40 + 456) = v43;
    *(_QWORD *)(v40 + 464) = v45;
    v54 = *(_QWORD *)(v40 + 288);
    v53 = *(_QWORD *)(v40 + 296);
    v55 = *(_QWORD *)(v40 + 216);
    v57 = *(_QWORD *)(v40 + 192);
    v56 = *(_QWORD *)(v40 + 200);
    v58 = *(_QWORD *)(v40 + 184);
    v89 = *(_QWORD *)(v40 + 104);
    v59 = *(_QWORD *)(v47 + 48) + *(_QWORD *)(v56 + 72) * v46;
    v60 = *(void (**)(uint64_t, unint64_t, uint64_t))(v56 + 16);
    *(_QWORD *)(v40 + 472) = v60;
    v60(v53, v59, v57);
    v61 = *(void **)(*(_QWORD *)(v47 + 56) + 8 * v46);
    *(_QWORD *)(v53 + *(int *)(v55 + 48)) = v61;
    v62 = *(int *)(v55 + 48);
    *(_DWORD *)(v40 + 512) = v62;
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
    v63(v54, v53, v57);
    *(_QWORD *)(v54 + v62) = v61;
    outlined init with copy of (UUID, Bool)(v89, v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v58, 1, v57) == 1)
    {
      v69 = *(_QWORD *)(v40 + 184);
      v70 = v61;
      outlined destroy of Invitation_HostConnectionInfo?(v69, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_28:
      v71 = *(_QWORD *)(v40 + 440);
      v73 = *(_QWORD *)(v40 + 280);
      v72 = *(_QWORD *)(v40 + 288);
      v74 = *(_QWORD *)(v40 + 224);
      v75 = *(int *)(*(_QWORD *)(v40 + 216) + 48);
      v60(v73, v72, *(_QWORD *)(v40 + 192));
      v76 = *(void **)(v72 + v62);
      *(_QWORD *)(v73 + v75) = v76;
      v77 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
      v78 = swift_allocObject();
      *(_QWORD *)(v40 + 480) = v78;
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v73, v78 + v77, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v90 = (uint64_t (*)(_QWORD, void *, uint64_t))(**(int **)(*(_QWORD *)v71 + 152)
                                                            + *(_QWORD *)(*(_QWORD *)v71 + 152));
      v79 = v76;
      v80 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v40 + 488) = v80;
      *v80 = v40;
      v80[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
      return v90(*(_QWORD *)(v40 + 288), &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v78);
    }
    v65 = *(_QWORD *)(v40 + 200);
    v64 = *(_QWORD *)(v40 + 208);
    v66 = *(_QWORD *)(v40 + 192);
    v63(v64, *(_QWORD *)(v40 + 184), v66);
    v67 = v61;
    v68 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    if ((v68 & 1) != 0)
      goto LABEL_28;
    result = outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v40 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    v42 = v85;
    v43 = v86;
    if (v85)
      goto LABEL_8;
LABEL_9:
    v48 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    v49 = (unint64_t)((1 << *(_BYTE *)(v40 + 516)) + 63) >> 6;
    v47 = *(_QWORD *)(v40 + 424);
    if (v48 >= v49)
      goto LABEL_29;
    v50 = v47 + 64;
    v51 = *(_QWORD *)(v47 + 64 + 8 * v48);
    ++v43;
    if (!v51)
    {
      v43 = v48 + 1;
      if (v48 + 1 >= v49)
        goto LABEL_29;
      v51 = *(_QWORD *)(v50 + 8 * v43);
      if (!v51)
      {
        v43 = v48 + 2;
        if (v48 + 2 >= v49)
          goto LABEL_29;
        v51 = *(_QWORD *)(v50 + 8 * v43);
        if (!v51)
          break;
      }
    }
LABEL_22:
    v45 = (v51 - 1) & v51;
    v46 = __clz(__rbit64(v51)) + (v43 << 6);
  }
  v52 = v48 + 3;
  if (v52 >= v49)
  {
LABEL_29:
    swift_release();
    v91 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                   + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
    v81 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v40 + 416) = v81;
    *v81 = v40;
    v81[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
    return v91(0, 0);
  }
  v51 = *(_QWORD *)(v50 + 8 * v52);
  if (v51)
  {
    v43 = v52;
    goto LABEL_22;
  }
  while (1)
  {
    v43 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (v43 >= v49)
      goto LABEL_29;
    v51 = *(_QWORD *)(v50 + 8 * v43);
    ++v52;
    if (v51)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 424) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 496) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1)
    *(_QWORD *)(v4 + 504) = a1;
  return swift_task_switch();
}

void closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, void *, uint64_t);
  void (*v52)(uint64_t, uint64_t);

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 516) = v3;
  v4 = 1 << v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v4 < 64;
  v7 = -1 << v4;
  if (v6)
    v8 = ~v7;
  else
    v8 = -1;
  v9 = v8 & v5;
  if ((v8 & v5) == 0)
    goto LABEL_6;
LABEL_5:
  v10 = __clz(__rbit64(v9));
  v11 = (v9 - 1) & v9;
  v12 = v10 | (v1 << 6);
  v13 = *(_QWORD *)(v0 + 424);
  while (1)
  {
    v48 = v11;
    v49 = v1;
    *(_QWORD *)(v0 + 456) = v1;
    *(_QWORD *)(v0 + 464) = v11;
    v20 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 296);
    v21 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 184);
    v50 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v13 + 48) + *(_QWORD *)(v22 + 72) * v12;
    v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16);
    *(_QWORD *)(v0 + 472) = v26;
    v26(v19, v25, v23);
    v27 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v12);
    *(_QWORD *)(v19 + *(int *)(v21 + 48)) = v27;
    v28 = *(int *)(v21 + 48);
    *(_DWORD *)(v0 + 512) = v28;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
    v29(v20, v19, v23);
    *(_QWORD *)(v20 + v28) = v27;
    outlined init with copy of (UUID, Bool)(v50, v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
    {
      v35 = *(_QWORD *)(v0 + 184);
      v36 = v27;
      outlined destroy of Invitation_HostConnectionInfo?(v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_25:
      v37 = *(_QWORD *)(v0 + 440);
      v38 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 288);
      v40 = *(_QWORD *)(v0 + 224);
      v41 = *(int *)(*(_QWORD *)(v0 + 216) + 48);
      v26(v38, v39, *(_QWORD *)(v0 + 192));
      v42 = *(void **)(v39 + v28);
      *(_QWORD *)(v38 + v41) = v42;
      v43 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      v44 = swift_allocObject();
      *(_QWORD *)(v0 + 480) = v44;
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v38, v44 + v43, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      v51 = (void (*)(_QWORD, void *, uint64_t))(**(int **)(*(_QWORD *)v37 + 152)
                                                         + *(_QWORD *)(*(_QWORD *)v37 + 152));
      v45 = v42;
      v46 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 488) = v46;
      *v46 = v0;
      v46[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
      v51(*(_QWORD *)(v0 + 288), &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v44);
      return;
    }
    v31 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 192);
    v29(v30, *(_QWORD *)(v0 + 184), v32);
    v33 = v27;
    v34 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    if ((v34 & 1) != 0)
      goto LABEL_25;
    outlined destroy of Invitation_HostConnectionInfo?(*(_QWORD *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    v9 = v48;
    v1 = v49;
    if (v48)
      goto LABEL_5;
LABEL_6:
    v14 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 516)) + 63) >> 6;
    v13 = *(_QWORD *)(v0 + 424);
    if (v14 >= v15)
      goto LABEL_26;
    v16 = v13 + 64;
    v17 = *(_QWORD *)(v13 + 64 + 8 * v14);
    ++v1;
    if (!v17)
    {
      v1 = v14 + 1;
      if (v14 + 1 >= v15)
        goto LABEL_26;
      v17 = *(_QWORD *)(v16 + 8 * v1);
      if (!v17)
      {
        v1 = v14 + 2;
        if (v14 + 2 >= v15)
          goto LABEL_26;
        v17 = *(_QWORD *)(v16 + 8 * v1);
        if (!v17)
          break;
      }
    }
LABEL_19:
    v11 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v1 << 6);
  }
  v18 = v14 + 3;
  if (v18 >= v15)
  {
LABEL_26:
    swift_release();
    v52 = (void (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v47;
    *v47 = v0;
    v47[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
    v52(0, 0);
    return;
  }
  v17 = *(_QWORD *)(v16 + 8 * v18);
  if (v17)
  {
    v1 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v1 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v1 >= v15)
      goto LABEL_26;
    v17 = *(_QWORD *)(v16 + 8 * v1);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_28:
  __break(1u);
}

uint64_t closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[5] = a1;
  v2 = type metadata accessor for UUID();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  v3 = *v2;
  v4 = *(void **)(*v2 + 144);
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  id v34;
  _QWORD *v35;
  NSObject *log;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t type;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;

  if (one-time initialization token for group != -1)
    swift_once();
  v1 = v0[5];
  v2 = v0[14];
  v3 = v0[15];
  v41 = v0[13];
  v4 = v0[10];
  v5 = v0[6];
  v6 = v0[7];
  v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Log.group);
  v44 = v4;
  v8 = *(int *)(v4 + 48);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v9(v3, v1, v5);
  v45 = v1;
  v10 = *(void **)(v1 + v8);
  v43 = v8;
  *(_QWORD *)(v3 + v8) = v10;
  outlined init with copy of (UUID, Bool)(v3, v2, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v3, v41, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v11 = v10;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = v0[14];
  if (v14)
  {
    v38 = v0[13];
    v16 = v0[12];
    type = v13;
    v17 = v0[9];
    log = v12;
    v18 = v0[6];
    v19 = v0[7];
    v42 = v9;
    v20 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v47 = v39;
    *(_DWORD *)v20 = 136315138;
    v42(v16, v15, v18);
    v21 = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v16, v18);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v17, v18);
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?(v38, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v15, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    v12 = log;
    _os_log_impl(&dword_242981000, log, type, "Creating NearbyGroup: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v39, -1, -1);
    v25 = v20;
    v9 = v42;
    MEMORY[0x2494EA95C](v25, -1, -1);
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?(v0[13], &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v15, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  }

  v26 = v0[11];
  v27 = v0[8];
  v28 = v0[6];
  v29 = *(int *)(v44 + 48);
  v9(v26, v0[5], v28);
  v30 = *(char **)(v45 + v43);
  v0[17] = v30;
  *(_QWORD *)(v26 + v29) = v30;
  v31 = &v30[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  v32 = v30;
  v9(v27, (uint64_t)v31, v28);
  v33 = *(void **)&v32[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint];
  v0[18] = v33;
  v0[19] = type metadata accessor for NearbyGroup();
  swift_allocObject();
  v46 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                 + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  v34 = v33;
  v35 = (_QWORD *)swift_task_alloc();
  v0[20] = v35;
  *v35 = v0;
  v35[1] = closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  return v46(v0[8], (uint64_t)v34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 168);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v12 = v8;
    *(_QWORD *)(v0 + 16) = v6;
    swift_retain();
    v9 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_242981000, v4, v5, "Created NearbyGroup: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)&v34 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v34 - v14;
  v16 = type metadata accessor for Logger();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1)
    swift_once();
  v20 = __swift_project_value_buffer(v16, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  outlined init with copy of (UUID, Bool)(a2, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v36 = v17;
    v37 = a3;
    v23 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v41 = v35;
    *(_DWORD *)v23 = 136315138;
    outlined init with copy of (UUID, Bool)((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v24 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5) == 1)
    {
      v25 = 0xE300000000000000;
      v26 = 7104878;
    }
    else
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v28 = v39;
      v27(v39, v13, v5);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v38, v28, v5);
      v29 = String.init<A>(reflecting:)();
      v30 = v24;
      v26 = v29;
      v25 = v31;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v5);
    }
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_242981000, v21, v22, "Group listener for id: %s cancelled.", v23, 0xCu);
    v32 = v35;
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v32, -1, -1);
    MEMORY[0x2494EA95C](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v16);
    a3 = v37;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  return MEMORY[0x2494EA050](a3, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
}

uint64_t InvitationRequest<>.Context.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t InvitationRequest<>.Context.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data?(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*InvitationRequest<>.Context.userInfo.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

double InvitationRequest<>.Context.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_2429D9020;
  return result;
}

uint64_t InvitationRequest<>.Context.init(userInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyGroup.Member>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static NearbyGroup.groups(service:identifier:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for NearbyGroup()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NearbyGroup;
  if (!type metadata singleton initialization cache for NearbyGroup)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  v40 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v2;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    }
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v2;
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    v35 = v38;
LABEL_42:
    *v35 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v40 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  HIDWORD(v37) = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v41 = v17;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= v39)
    {
      swift_release();
      v35 = v38;
      v22 = v40;
      if ((v37 & 0x100000000) != 0)
      {
LABEL_37:
        v36 = 1 << *(_BYTE *)(v7 + 32);
        if (v36 >= 64)
          bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v22 = -1 << v36;
        *(_QWORD *)(v7 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v22 = v40;
    v23 = v40[v21];
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_34;
      v23 = v40[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + v41))(v6, *(_QWORD *)(v7 + 48) + v25 * v20, v4);
    v26 = v7;
    v27 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v20);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v42 + 32))(*(_QWORD *)(v9 + 48) + v25 * v18, v6, v4);
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v18) = v27;
    ++*(_QWORD *)(v9 + 16);
    v7 = v26;
  }
  v24 = v21 + 2;
  if (v24 >= v39)
  {
LABEL_34:
    swift_release();
    v35 = v38;
    if ((v37 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v23 = v40[v24];
  if (v23)
  {
    v16 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v39)
      goto LABEL_34;
    v23 = v40[v16];
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)outlined init with take of NearbyGroupTable.WeakNearbyGroup();
  }
  v22 = v20 + 2;
  if (v22 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static NearbyGroup.Member.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;
  BOOL v9;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v3)
    {
      if (v4)
      {
        v9 = v2 == v5 && v3 == v4;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for AddressableMember();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, v10, MEMORY[0x24BDD1FB8]);
  result = Set.init(minimumCapacity:)();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NearbyGroupMember, MEMORY[0x24BEE5BD8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x2494EA260](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v3[18] = *v2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3[19] = v4;
  v3[20] = *(_QWORD *)(v4 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for OS_dispatch_queue.Attributes();
  v3[23] = swift_task_alloc();
  type metadata accessor for DispatchQoS();
  v3[24] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  v3[25] = v5;
  v3[26] = *(_QWORD *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  v3[28] = v6;
  v3[29] = *(_QWORD *)(v6 - 8);
  v3[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized NearbyGroup.init(id:endpoint:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v3 = v0[29];
  v2 = v0[30];
  v5 = v0[27];
  v4 = v0[28];
  v6 = v0[26];
  v32 = v0[20];
  v33 = v0[21];
  v34 = v0[19];
  v7 = v0[17];
  v30 = (void *)v0[16];
  v28 = v0[25];
  v29 = v0[15];
  v8 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  v0[11] = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroup.Member>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v2, v4);
  v9 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  v1[13] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v5, v28);
  v10 = (_QWORD *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  *v10 = 0;
  v10[1] = 0;
  v11 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  v12 = type metadata accessor for UUID();
  v1[31] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[32] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v29, v12);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v4);
  v1[14] = MEMORY[0x24BEE4B08];
  Published.init(initialValue:)();
  swift_endAccess();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint) = v30;
  v31 = v30;
  _typeName(_:qualified:)();
  type metadata accessor for OS_dispatch_queue();
  v14._countAndFlagsBits = 45;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v1[12] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v33, *MEMORY[0x24BEE5750], v34);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for NearbyGroupClientConnection();
  v16 = v31;
  v17 = XPCClient.__allocating_init(listenerEndpoint:)();
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection) = v17;
  v18 = OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection;
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = (uint64_t *)(v17 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v21 = *v20;
  *v20 = (uint64_t)partial apply for closure #1 in NearbyGroup.init(id:endpoint:);
  v20[1] = v19;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
  v22 = *(_QWORD *)(v7 + v18);
  v23 = swift_allocObject();
  swift_weakInit();
  v24 = (uint64_t *)(v22 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  v25 = *v24;
  *v24 = (uint64_t)partial apply for closure #2 in NearbyGroup.init(id:endpoint:);
  v24[1] = v23;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
  v26 = (_QWORD *)swift_task_alloc();
  v1[33] = v26;
  *v26 = v1;
  v26[1] = specialized NearbyGroup.init(id:endpoint:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 248));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 248));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for UUID();
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)()
{
  objc_super *v0;
  Class super_class;
  id receiver;
  Class v3;
  Class v4;
  id v5;
  Class v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  objc_class *v8;
  char *v9;
  objc_class *v10;
  void (*v11)(_QWORD, _QWORD);
  uint64_t v12;
  _QWORD *v13;

  super_class = v0[6].super_class;
  receiver = v0[5].receiver;
  v3 = v0[5].super_class;
  v5 = v0[4].receiver;
  v4 = v0[4].super_class;
  v6 = v0[3].super_class;
  v7 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v3 + 2);
  v0[7].receiver = v7;
  v7(super_class, v6, receiver);
  v8 = (objc_class *)type metadata accessor for NearbyGroupCreationRequest(0);
  v9 = (char *)objc_allocWithZone(v8);
  v7(&v9[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id], super_class, receiver);
  *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = v5;
  v0[1].receiver = v9;
  v0[1].super_class = v8;
  v10 = (objc_class *)objc_msgSendSuper2(v0 + 1, sel_init);
  v0[7].super_class = v10;
  v11 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v3 + 1);
  v0[8].receiver = v11;
  v11(super_class, receiver);
  v12 = swift_task_alloc();
  v0[8].super_class = (Class)v12;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = (_QWORD *)swift_task_alloc();
  v0[9].receiver = v13;
  type metadata accessor for NearbyGroupConnectionInfo(0);
  *v13 = v0;
  v13[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v1 = *(void (**)(uint64_t, char *, uint64_t))(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);

  v4 = *(char **)(v0 + 32);
  *(_QWORD *)(v0 + 160) = v4;
  v5 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  v6 = v4;
  v1(v2, v5, v3);
  v7 = *(void **)&v6[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint];
  *(_QWORD *)(v0 + 168) = v7;
  *(_QWORD *)(v0 + 176) = type metadata accessor for NearbyGroup();
  swift_allocObject();
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                 + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  v8 = v7;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v9;
  *v9 = v0;
  v9[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  return v11(*(_QWORD *)(v0 + 96), (uint64_t)v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD, void *, _QWORD);

  v1 = *(_QWORD *)(v0 + 72);

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable);
  *(_QWORD *)(v0 + 208) = v2;
  v5 = (uint64_t (*)(_QWORD, void *, _QWORD))(**(int **)(*(_QWORD *)v2 + 152)
                                                      + *(_QWORD *)(*(_QWORD *)v2 + 152));
  swift_retain_n();
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v3;
  *v3 = v0;
  v3[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  return v5(*(_QWORD *)(v0 + 56), &async function pointer to partial apply for closure #1 in NearbyGroup.init(id:members:controller:), *(_QWORD *)(v0 + 192));
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 160);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);

  swift_release();
  v2(v4, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);

  swift_task_dealloc();
  swift_release();
  v1(v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v16;
  _BYTE *v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  swift_release();
  if (v1 == v2)
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    v13 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 56);

    swift_release();
    swift_release();
    v12(v14, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 192));
  }
  else
  {
    if (one-time initialization token for group != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.group);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 224);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v18 = v9;
      *(_DWORD *)v8 = 136315138;
      *(_QWORD *)(v0 + 40) = v7;
      swift_retain();
      v10 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_242981000, v4, v5, "Group already exists: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v9, -1, -1);
      MEMORY[0x2494EA95C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v16 = *(void **)(v0 + 160);
    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *v17 = 2;
    swift_willThrow();
    swift_release();
    swift_release();

    (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_release();

  (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = v1;
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
    swift_release();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_2429C17A8()
{
  return objectdestroyTm_2((void (*)(_QWORD))MEMORY[0x24BEE4EF8], (void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t partial apply for closure #1 in NearbyGroup.invalidate(reason:)()
{
  uint64_t v0;

  return closure #1 in NearbyGroup.invalidate(reason:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyGroup.Errors, &type metadata for NearbyGroup.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyGroup.Errors, &type metadata for NearbyGroup.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors);
  }
  return result;
}

uint64_t outlined consume of NearbyGroup.Member?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyGroup.addMember(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyGroup.addMember(_:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyGroup.kickMember(member:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroup.leave()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyGroup.leave()(a1, v1);
}

uint64_t sub_2429C18F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t sub_2429C191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t sub_2429C1948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t sub_2429C196C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t ObjC metadata update function for NearbyGroup()
{
  return type metadata accessor for NearbyGroup();
}

void type metadata completion function for NearbyGroup()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<NearbyGroup.Member>>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<NearbyGroup.State>();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for NearbyGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v2 + 136) + *(_QWORD *)(v2 + 136));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v8(a1, a2);
}

void type metadata accessor for Published<Set<NearbyGroup.Member>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Set<NearbyGroup.Member>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyGroup.Member>);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  }
}

void type metadata accessor for Published<NearbyGroup.State>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<NearbyGroup.State>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<NearbyGroup.State>);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for NearbyGroup.State(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for NearbyGroup.State(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for NearbyGroup.State(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for NearbyGroup.State(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroup.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NearbyGroup.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for NearbyGroup.State(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for NearbyGroup.State(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.State()
{
  return &type metadata for NearbyGroup.State;
}

uint64_t storeEnumTagSinglePayload for NearbyGroup.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2429C1E04 + 4 * byte_2429DA2D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2429C1E38 + 4 * byte_2429DA2D0[v4]))();
}

uint64_t sub_2429C1E38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429C1E40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429C1E48);
  return result;
}

uint64_t sub_2429C1E54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429C1E5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2429C1E60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429C1E68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.Errors()
{
  return &type metadata for NearbyGroup.Errors;
}

uint64_t destroy for NearbyGroup.Member()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for NearbyGroup.Member(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NearbyGroup.Member(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for NearbyGroup.Member(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroup.Member(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyGroup.Member(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.Member()
{
  return &type metadata for NearbyGroup.Member;
}

uint64_t type metadata instantiation function for InvitationRequest<>.Context()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t *destroy for InvitationRequest<>.Context(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for InvitationRequest<>.Context(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for InvitationRequest<>.Context(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for InvitationRequest<>.Context(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for InvitationRequest<>.Context(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InvitationRequest<>.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t type metadata accessor for InvitationRequest<>.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvitationRequest<>.Context);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.leave()()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.leave()(closure #1 in closure #1 in NearbyGroup.leave());
}

uint64_t sub_2429C2294()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(a1, "%s Had errorHandler called when trying to leave %s");
}

uint64_t sub_2429C22EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)((uint64_t (*)(_QWORD, _QWORD, uint64_t))closure #1 in closure #1 in NearbyGroup.kickMember(member:));
}

uint64_t sub_2429C23C8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(id *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_251372410, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:), (uint64_t)&block_descriptor_81, (SEL *)&selRef_kickMemberWithNearbyGroupMember_completion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1)
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, "%s was told an error remotely when trying to kick member: %s, error: %s");
}

uint64_t objectdestroy_64Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.addMember(_:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)(closure #1 in closure #1 in NearbyGroup.addMember(_:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                                      - 8)
                          + 80);
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_2429C2540()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(id *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_251372500, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:), (uint64_t)&block_descriptor_100_0, (SEL *)&selRef_addMemberWithNearbyGroupMember_completion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(a1, "%s Had errorHandler called when trying to join %s");
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                                      - 8)
                          + 80);
  return closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t objectdestroy_77Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, "%s was told an error remotely when trying to add member: %s error: %s");
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_2429C2744()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyGroup.init(id:endpoint:)()
{
  return closure #1 in NearbyGroup.init(id:endpoint:)();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  return closure #2 in NearbyGroup.init(id:endpoint:)(a1);
}

uint64_t partial apply for closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in NearbyGroup.init(id:endpoint:)(a1, v1);
}

uint64_t partial apply for closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.leave()(closure #1 in closure #3 in NearbyGroup.init(id:endpoint:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.leave()(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                                      - 8)
                          + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_2429C27E4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void **a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1);
}

uint64_t objectdestroy_46Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9));
}

uint64_t outlined consume of Set<NearbyGroupMember>.Iterator._Variant()
{
  return swift_release();
}

uint64_t sub_2429C2944()
{
  return objectdestroyTm_2((void (*)(_QWORD))MEMORY[0x24BEE4BC0], (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroyTm_2(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)()
{
  uint64_t v0;

  return closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in NearbyGroup.init(id:members:controller:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  v2 = swift_retain();
  return dispatch thunk of NearbyGroupTable.firstGroup()(v2);
}

uint64_t closure #1 in NearbyGroup.init(id:members:controller:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2429C2A04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 64);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  swift_unknownObjectRelease();
  swift_release();
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v2, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v2, v6);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v9 + v5) & ~v5), v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation)
                                      - 8)
                          + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_2429C2BCC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_2429C2CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo))
                                      - 8)
                          + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(v3);
}

uint64_t key path getter for NearbyGroupClientConnection.serverDisconnectedCallback : NearbyGroupClientConnection@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for NearbyGroupClientConnection.serverDisconnectedCallback : NearbyGroupClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.getter()
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.getter(&direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed () -> ())?);
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed () -> ())?);
}

uint64_t (*NearbyGroupClientConnection.serverDisconnectedCallback.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t key path getter for NearbyGroupClientConnection.setMembersCallback : NearbyGroupClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for NearbyGroupClientConnection.setMembersCallback : NearbyGroupClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<NearbyGroupMember>) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t NearbyGroupClientConnection.setMembersCallback.getter()
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.getter(&direct field offset for NearbyGroupClientConnection.setMembersCallback, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ())?);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.getter(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t NearbyGroupClientConnection.setMembersCallback.setter(uint64_t a1, uint64_t a2)
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for NearbyGroupClientConnection.setMembersCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ())?);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*NearbyGroupClientConnection.setMembersCallback.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

Swift::Void __swiftcall NearbyGroupClientConnection.handleServerDisconnect()()
{
  uint64_t v0;
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);
  }
}

uint64_t NearbyGroupClientConnection.setMembers(_:)(uint64_t a1)
{
  uint64_t v1;
  void (**v3)(uint64_t);
  uint64_t result;
  void (*v5)(uint64_t);

  v3 = (void (**)(uint64_t))(v1 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  result = swift_beginAccess();
  v5 = *v3;
  if (*v3)
  {
    swift_retain();
    v5(a1);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v5);
  }
  return result;
}

uint64_t @objc NearbyGroupClientConnection.setMembers(_:)(char *a1)
{
  uint64_t v2;
  char *v3;
  void (*v4)(uint64_t);
  char *v5;

  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject();
  v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = &a1[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  swift_beginAccess();
  v4 = *(void (**)(uint64_t))v3;
  if (*(_QWORD *)v3)
  {
    v5 = a1;
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
    v4(v2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);

  }
  return swift_bridgeObjectRelease();
}

id NearbyGroupClientConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id NearbyGroupClientConnection.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = &v0[direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = &v0[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc NearbyGroupClientConnection.init()(char *a1)
{
  objc_class *ObjectType;
  char *v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = &a1[direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &a1[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v6.receiver = a1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t NearbyGroupClientConnection.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0
                                                                         + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback));
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0
                                                                                + direct field offset for NearbyGroupClientConnection.setMembersCallback));
}

id NearbyGroupClientConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NearbyGroupClientConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NearbyGroupClientConnection;
  if (!type metadata singleton initialization cache for NearbyGroupClientConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for NearbyGroupClientConnection()
{
  return swift_initClassMetadata2();
}

uint64_t @objc NearbyGroupClientConnection.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(a1
                                                                         + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback));
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(a1
                                                                                + direct field offset for NearbyGroupClientConnection.setMembersCallback));
}

uint64_t ObjC metadata update function for NearbyGroupClientConnection()
{
  return type metadata accessor for NearbyGroupClientConnection();
}

unint64_t lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject)
  {
    v1 = type metadata accessor for NearbyGroupMember();
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject);
  }
  return result;
}

uint64_t sub_2429C3660()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<NearbyGroupMember>) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

id NearbyAdvertisementRequest.__allocating_init(identifier:invitation:route:activityType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  objc_class *v5;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  objc_super v18;

  v11 = objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier];
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  v15 = &v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *v15 = a2;
  v15[1] = a3;
  v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = a4;
  *(_DWORD *)&v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = a5;
  v18.receiver = v11;
  v18.super_class = v5;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v16;
}

uint64_t NearbyAdvertisementRequest.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NearbyAdvertisementRequest.invitation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation + 8));
  return v1;
}

uint64_t NearbyAdvertisementRequest.route.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route);
}

uint64_t NearbyAdvertisementRequest.activityType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType);
}

id NearbyAdvertisementRequest.init(identifier:invitation:route:activityType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  _BYTE *v5;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  objc_super v17;

  v11 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier];
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  v14 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *v14 = a2;
  v14[1] = a3;
  v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = a4;
  *(_DWORD *)&v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = a5;
  v17.receiver = v5;
  v17.super_class = (Class)type metadata accessor for NearbyAdvertisementRequest();
  v15 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v15;
}

uint64_t type metadata accessor for NearbyAdvertisementRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NearbyAdvertisementRequest;
  if (!type metadata singleton initialization cache for NearbyAdvertisementRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static NearbyAdvertisementRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyAdvertisementRequest.encode(with:)(NSCoder with)
{
  Class isa;
  void *v3;
  Class v4;
  void *v5;
  Class v6;
  void *v7;
  Class v8;
  id v9;

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v3 = (void *)MEMORY[0x2494E9EDC](0x696669746E656469, 0xEA00000000007265);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v3);

  v4 = Data._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](0x6974617469766E69, 0xEA00000000006E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = UInt8._bridgeToObjectiveC()().super.super.isa;
  v7 = (void *)MEMORY[0x2494E9EDC](0x6574756F72, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = UInt32._bridgeToObjectiveC()().super.super.isa;
  v9 = (id)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

}

uint64_t NearbyAdvertisementRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyAdvertisementRequest.init(coder:)(a1);
}

uint64_t NearbyAdvertisementRequest.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  char *v27;
  objc_class *v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  __int128 v34;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_13;
  }
  v15 = (void *)v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  v17 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEAB0]);
  MEMORY[0x2494EA314](v15, v6, v9, v17);

  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
LABEL_13:
    v16(v8, 1, 1, v9);
    goto LABEL_14;
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v18(v8, 1, v9) == 1)
  {
LABEL_14:

    outlined destroy of UUID?((uint64_t)v8);
LABEL_15:
    type metadata accessor for NearbyAdvertisementRequest();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19(v12, v8, v9);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20
    || (v21 = (void *)v20,
        v34 = xmmword_2429D9020,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v21,
        v22 = *((_QWORD *)&v34 + 1),
        *((_QWORD *)&v34 + 1) >> 60 == 15))
  {
LABEL_18:

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_15;
  }
  v32 = v34;
  v23 = (void *)MEMORY[0x2494E9EDC](0x6574756F72, 0xE500000000000000);
  v24 = (unint64_t)objc_msgSend(a1, sel_decodeIntegerForKey_, v23);

  if ((v24 & 0x8000000000000000) == 0 && v24 < 0x100)
  {
    v25 = (void *)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
    v26 = (unint64_t)objc_msgSend(a1, (SEL)0x2513755C8, v25);

    if ((v26 & 0x8000000000000000) == 0 && !HIDWORD(v26))
    {
      if (v26 < 2)
      {
        v19(&v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], v12, v9);
        v27 = &v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
        *(_QWORD *)v27 = v32;
        *((_QWORD *)v27 + 1) = v22;
        v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v24;
        *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v26;

        v28 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
        v33.receiver = v13;
        v33.super_class = v28;
        v29 = objc_msgSendSuper2(&v33, sel_init);

        return (uint64_t)v29;
      }
      outlined consume of Data?(v32, v22);
      goto LABEL_18;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NearbyAdvertisementRequest.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  swift_getObjectType();
  _StringGuts.grow(_:)(69);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEAB8]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000002429DD3B0;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation + 8);
  outlined copy of Data._Representation(v6, v7);
  v8._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v6, v7);
  v9._countAndFlagsBits = 0x206574756F72202CLL;
  v9._object = (void *)0xEE00203A65707974;
  String.append(_:)(v9);
  type metadata accessor for CBNearbyInfoV2InvitationRouteType();
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0xD000000000000015;
  v10._object = (void *)0x80000002429DD3D0;
  String.append(_:)(v10);
  v13 = *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return HIDWORD(v13);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x2494EA8A8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id NearbyAdvertisementRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NearbyAdvertisementRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NearbyAdvertisementRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyAdvertisementRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for NearbyAdvertisementRequest()
{
  return type metadata accessor for NearbyAdvertisementRequest();
}

uint64_t type metadata completion function for NearbyAdvertisementRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyAdvertisementRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.__allocating_init(identifier:invitation:route:activityType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

unint64_t NearbyInvitationActivityType.init(rawValue:)(unsigned int a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = a1;
  if (a1 == 1)
  {
    v2 = 0;
  }
  else
  {
    v1 = 0;
    v2 = 1;
  }
  if (!a1)
  {
    v1 = 0;
    v2 = 0;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t *NearbyInvitation.__allocating_init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v16;

  swift_allocObject();
  v16 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 8))(a8, a9);
  swift_release();
  outlined consume of Data?(a5, a6);

  return v16;
}

char *static NearbyInvitationData.create(from:)(uint64_t a1, unint64_t a2)
{
  return specialized static NearbyInvitationData.create(from:)(a1, a2);
}

id NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  objc_class *v17;
  id v19;
  id v20;

  v19 = objc_allocWithZone(v17);
  v20 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1, a15, *((uint64_t *)&a15 + 1), a16, a17);
  outlined consume of Data?(a11, a12);
  return v20;
}

uint64_t InvitationRequest.__allocating_init(invitationData:displayName:userInfo:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v14;

  v14 = specialized static NearbyInvitationData.create(from:)(a1, a2);
  if (v7)
  {
    outlined consume of Data?(a5, a6);
    outlined consume of Data._Representation(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t))(v6 + 192))(v14, a3, a4, a5, a6);
    outlined consume of Data._Representation(a1, a2);
  }
  return v6;
}

uint64_t specialized static InvitationSourceProvider.providerIdentifier.getter()
{
  id v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = 0x724779627261654ELL;
    v4._object = (void *)0xEB0000000070756FLL;
    String.append(_:)(v4);
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(148);
    v6._object = (void *)0x80000002429DD460;
    v6._countAndFlagsBits = 0xD000000000000091;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 0x724779627261654ELL;
    v7._object = (void *)0xEB0000000070756FLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static InvitationSourceProvider.providerIdentifier.getter()
{
  id v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(148);
    v6._object = (void *)0x80000002429DD460;
    v6._countAndFlagsBits = 0xD000000000000091;
    String.append(_:)(v6);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return static InvitationSourceProvider.providerIdentifier.getter();
}

Swift::String __swiftcall NearbyInvitationActivityType.description()()
{
  int v0;
  void *v1;
  uint64_t v2;
  Swift::String result;

  if (v0)
  {
    if (v0 == 1)
    {
      v1 = (void *)0xEB00000000636973;
      v2 = 0x754D20656C707041;
    }
    else
    {
      v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
    }
  }
  else
  {
    v1 = (void *)0xE400000000000000;
    v2 = 1701736302;
  }
  result._object = v1;
  result._countAndFlagsBits = v2;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationActivityType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_DWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 4) = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationActivityType()
{
  lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationActivityType()
{
  lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
  return RawRepresentable<>.encode(to:)();
}

Swift::String __swiftcall NearbyInvitationScopeType.description()()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  if (v0 >= 3)
  {
    v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    v1 = 8 * (int)v0;
    v2 = *(_QWORD *)&aEveryonefriend[v1];
    v3 = *(void **)&aProximit[v1 + 8];
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationScopeType()
{
  lazy protocol witness table accessor for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationScopeType()
{
  lazy protocol witness table accessor for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType();
  return RawRepresentable<>.encode(to:)();
}

Swift::String __swiftcall NearbyInvitationRouteType.description()()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  if (v0 >= 3)
  {
    v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    v1 = 8 * (int)v0;
    v2 = *(_QWORD *)((char *)&unk_2429DB858 + v1);
    v3 = *(void **)((char *)&unk_2429DB870 + v1);
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

unint64_t NearbyInvitationScopeType.init(rawValue:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = a1;
  v2 = 2;
  if (a1 != 2)
    v2 = 0;
  v3 = a1 != 2;
  if (a1 == 1)
    v3 = 0;
  else
    v1 = v2;
  if (!a1)
  {
    v1 = 0;
    v3 = 0;
  }
  return v1 | ((unint64_t)v3 << 32);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationRouteType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationActivityType()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationRouteType()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationActivityType()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

int *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationRouteType@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *result;
  v3 = *result > 2;
  if (*result > 2)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationRouteType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationRouteType()
{
  lazy protocol witness table accessor for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationRouteType()
{
  lazy protocol witness table accessor for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t NearbyInvitationParameters.serviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationParameters.browserType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType);
}

unint64_t NearbyInvitationParameters.routeType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType) | ((unint64_t)*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4) << 32);
}

id NearbyInvitationParameters.__allocating_init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *(_DWORD *)&v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType] = a3;
  v11 = &v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType];
  *(_DWORD *)v11 = a4;
  v11[4] = BYTE4(a4) & 1;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id NearbyInvitationParameters.init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  *(_DWORD *)&v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType] = a3;
  v6 = &v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType];
  *(_DWORD *)v6 = a4;
  v6[4] = BYTE4(a4) & 1;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for NearbyInvitationParameters();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t NearbyInvitationParameters.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE v14[12];

  swift_getObjectType();
  *(_DWORD *)&v14[8] = 0;
  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6563697672657320;
  v3._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName + 8);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6573776F7262202CLL;
  v7._object = (void *)0xEF203A6570795472;
  String.append(_:)(v7);
  *(_QWORD *)v14 = *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType);
  _print_unlocked<A, B>(_:_:)();
  v8._object = (void *)0x80000002429DD530;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4) & 1) != 0)
  {
    v9 = 0xE300000000000000;
    v10 = 7104878;
  }
  else
  {
    v10 = String.init<A>(reflecting:)();
    v9 = v11;
  }
  v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v14[4];
}

uint64_t static NearbyInvitationParameters.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationParameters.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  Class isa;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName), *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName + 8));
  v4 = (void *)MEMORY[0x2494E9EDC](0x4E65636976726573, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  v6 = (void *)MEMORY[0x2494E9EDC](0x54726573776F7262, 0xEB00000000657079);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4) & 1) != 0)
    v7 = 0;
  else
    v7 = _bridgeAnythingToObjectiveC<A>(_:)();
  v8 = (void *)MEMORY[0x2494E9EDC](0x7079546574756F72, 0xE900000000000065);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

}

uint64_t NearbyInvitationParameters.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyInvitationParameters.init(coder:)(a1);
}

uint64_t NearbyInvitationParameters.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    v5 = (void *)v4;
    v7 = 0;
    v8 = 0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  type metadata accessor for NearbyInvitationParameters();
  swift_deallocPartialClassInstance();
  return 0;
}

void NearbyInvitationParameters.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id NearbyInvitationParameters.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for NearbyInvitationParameters);
}

uint64_t InvitationJoinResponse.sessionIdentifier.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier);
}

uint64_t InvitationJoinResponse.memberHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InvitationJoinResponse.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8));
  return v1;
}

id one-time initialization function for denied()
{
  objc_class *v0;
  char *v1;
  char *v2;
  id result;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  v1 = (char *)objc_allocWithZone(v0);
  v2 = &v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = 0;
  *(_OWORD *)&v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo] = xmmword_2429D9020;
  v4.receiver = v1;
  v4.super_class = v0;
  result = objc_msgSendSuper2(&v4, sel_init);
  static InvitationJoinResponse.denied = (uint64_t)result;
  return result;
}

id static InvitationJoinResponse.denied.getter()
{
  if (one-time initialization token for denied != -1)
    swift_once();
  return (id)static InvitationJoinResponse.denied;
}

id static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  objc_class *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  objc_super v15;

  v10 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = a3;
  v13 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
  *v13 = a4;
  v13[1] = a5;
  outlined copy of Data?(a4, a5);
  v15.receiver = v11;
  v15.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v15, sel_init);
}

uint64_t static InvitationJoinResponse.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationJoinResponse.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  NSArray v5;
  void *v6;
  Class isa;
  id v8;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8))
    v3 = MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier));
  else
    v3 = 0;
  v4 = (void *)MEMORY[0x2494E9EDC](0xD000000000000011, 0x80000002429DD5A0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles))
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v5.super.isa = 0;
  v6 = (void *)MEMORY[0x2494E9EDC](0x61487265626D656DLL, 0xED000073656C646ELL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5.super.isa, v6);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = (id)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v8);
  swift_unknownObjectRelease();

}

uint64_t InvitationJoinResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return InvitationJoinResponse.init(coder:)(a1);
}

uint64_t InvitationJoinResponse.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;

  v2 = v1;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t InvitationJoinResponse.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;

  v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6973736573202D20;
  v3._object = (void *)0xEE00203A44496E6FLL;
  String.append(_:)(v3);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8))
  {
    swift_bridgeObjectRetain_n();
    v4 = String.init<A>(reflecting:)();
    v6 = v5;
  }
  else
  {
    v6 = 0xE300000000000000;
    v4 = 7104878;
  }
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x73656C646E616820;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles))
  {
    swift_bridgeObjectRetain_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    v9 = String.init<A>(reflecting:)();
    v11 = v10;
  }
  else
  {
    v11 = 0xE300000000000000;
    v9 = 7104878;
  }
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x666E497265737520;
  v13._object = (void *)0xEB00000000203A6FLL;
  String.append(_:)(v13);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8);
  if (v14 >> 60 == 15)
  {
    v16 = (void *)0xE300000000000000;
  }
  else
  {
    outlined copy of Data._Representation(v15, v14);
    outlined copy of Data._Representation(v15, v14);
    v1 = String.init<A>(reflecting:)();
    v16 = v17;
  }
  v18._countAndFlagsBits = v1;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v15, v14);
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 60;
}

void InvitationJoinResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id InvitationJoinResponse.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationJoinResponse);
}

id NearbyInvitationParameters.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t InvitationBlob.invitationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationBlob.dataBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob + 8));
  return v1;
}

id InvitationBlob.__allocating_init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.__allocating_init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
}

id InvitationBlob.init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob, type metadata accessor for InvitationBlob);
}

uint64_t InvitationBlob.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(56);
  v1._countAndFlagsBits = 0xD000000000000015;
  v1._object = (void *)0x80000002429DD600;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000002429DD620;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6C4261746164202CLL;
  v6._object = (void *)0xEC000000203A626FLL;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob + 8);
  outlined copy of Data._Representation(v7, v8);
  v9._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v8);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t static InvitationBlob.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationBlob.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  Class isa;
  id v6;

  v3 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID), *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8));
  v4 = (void *)MEMORY[0x2494E9EDC](0x6974617469766E69, 0xEC00000044496E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = (id)MEMORY[0x2494E9EDC](0x626F6C4261746164, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

}

uint64_t InvitationBlob.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return InvitationBlob.init(coder:)(a1);
}

uint64_t InvitationBlob.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;

  v2 = v1;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  type metadata accessor for InvitationBlob();
  swift_deallocPartialClassInstance();
  return 0;
}

void InvitationBlob.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t InvitationBlob.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x626F6C4261746164;
  else
    return 0x6974617469766E69;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationBlob.CodingKeys()
{
  char *v0;

  return InvitationBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationBlob.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InvitationBlob.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InvitationBlob.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationBlob.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationBlob.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id InvitationBlob.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationBlob);
}

uint64_t InvitationBlob.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationBlob.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id InvitationBlob.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return InvitationBlob.init(from:)(a1);
}

id InvitationBlob.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  char *v19;
  objc_super v20;
  __int128 v21;
  char v22;

  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationBlob.CodingKeys>);
  v4 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  v19 = v1;
  v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v12 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for InvitationBlob();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    LOBYTE(v21) = 0;
    v10 = v18;
    v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = v19;
    v15 = (uint64_t *)&v19[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID];
    *v15 = v11;
    v15[1] = v16;
    v22 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v14[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob] = v21;

    v17 = (objc_class *)type metadata accessor for InvitationBlob();
    v20.receiver = v14;
    v20.super_class = v17;
    v8 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t IncomingInvitationJoinRequest.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID, a1);
}

uint64_t IncomingInvitationJoinRequest.remotePseudonym.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IncomingInvitationJoinRequest.remotePublicKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey + 8));
  return v1;
}

uint64_t IncomingInvitationJoinRequest.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IncomingInvitationJoinRequest.destinationToken.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken);
}

uint64_t IncomingInvitationJoinRequest.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8));
  return v1;
}

void *IncomingInvitationJoinRequest.hostInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void IncomingInvitationJoinRequest.hostInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*IncomingInvitationJoinRequest.hostInfo.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

id IncomingInvitationJoinRequest.__allocating_init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  objc_class *v12;
  objc_class *v13;
  char *v18;
  void **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  objc_class *v35;
  uint64_t v36;
  objc_super v37;

  v13 = v12;
  v18 = (char *)objc_allocWithZone(v13);
  v19 = (void **)&v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(_QWORD *)&v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  v20 = &v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID];
  v21 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v20, a1, v21);
  v22 = &v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  *(_QWORD *)v22 = a2;
  *((_QWORD *)v22 + 1) = a3;
  v23 = &v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken];
  *(_QWORD *)v23 = a4;
  *((_QWORD *)v23 + 1) = a5;
  v24 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  *v24 = a6;
  v24[1] = a7;
  v25 = &v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(_QWORD *)v25 = a8;
  *((_QWORD *)v25 + 1) = a9;
  v26 = &v18[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *(_QWORD *)v26 = a10;
  *((_QWORD *)v26 + 1) = a11;
  swift_beginAccess();
  v27 = *v19;
  *v19 = a12;
  outlined copy of Data._Representation(a6, a7);
  outlined copy of Data?(a10, a11);
  v28 = a12;

  v37.receiver = v18;
  v37.super_class = v35;
  v29 = objc_msgSendSuper2(&v37, sel_init);

  outlined consume of Data?(a10, a11);
  outlined consume of Data._Representation(a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a1, v21);
  return v29;
}

id IncomingInvitationJoinRequest.init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  char *v12;
  void **v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v33;
  objc_super v34;

  v17 = (void **)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(_QWORD *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  v18 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID];
  v19 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v18, a1, v19);
  v20 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = a3;
  v21 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken];
  *(_QWORD *)v21 = a4;
  *((_QWORD *)v21 + 1) = a5;
  v22 = (uint64_t *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  *v22 = a6;
  v22[1] = a7;
  v23 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(_QWORD *)v23 = a8;
  *((_QWORD *)v23 + 1) = a9;
  v24 = (uint64_t *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *v24 = a10;
  v24[1] = a11;
  swift_beginAccess();
  v25 = *v17;
  *v17 = a12;
  outlined copy of Data._Representation(a6, a7);
  outlined copy of Data?(a10, a11);
  v26 = a12;

  v34.receiver = v12;
  v34.super_class = (Class)type metadata accessor for IncomingInvitationJoinRequest(0);
  v27 = objc_msgSendSuper2(&v34, sel_init);

  outlined consume of Data?(a10, a11);
  outlined consume of Data._Representation(a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a1, v19);
  return v27;
}

uint64_t IncomingInvitationJoinRequest.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;

  v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(127);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x74617469766E6920;
  v4._object = (void *)0xEF203A44496E6F69;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000002429DD670;
  v6._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v6);
  v7 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000014;
  v10._object = (void *)0x80000002429DD690;
  String.append(_:)(v10);
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken + 8))
  {
    swift_bridgeObjectRetain_n();
    v11 = String.init<A>(reflecting:)();
    v13 = v12;
  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000013;
  v15._object = (void *)0x80000002429DD6B0;
  String.append(_:)(v15);
  v16 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey);
  v17 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey + 8);
  outlined copy of Data._Representation(v16, v17);
  v18._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v16, v17);
  v19._countAndFlagsBits = 0x79616C7073696420;
  v19._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v19);
  v20 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  v21 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName + 8);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6E4972657375202CLL;
  v23._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v23);
  v25 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo);
  v24 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8);
  if (v24 >> 60 == 15)
  {
    v26 = 0xE300000000000000;
    v27 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v25, v24);
    outlined copy of Data._Representation(v25, v24);
    v27 = String.init<A>(reflecting:)();
    v26 = v28;
  }
  v29 = v26;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v25, v24);
  v30._countAndFlagsBits = 0x666E4974736F6820;
  v30._object = (void *)0xEB00000000203A6FLL;
  String.append(_:)(v30);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))(v31, v32);
  if (v33)
  {
    v34 = (void *)v33;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    v35 = v34;
    v1 = String.init<A>(reflecting:)();
    v37 = v36;
  }
  else
  {
    v35 = 0;
    v37 = (void *)0xE300000000000000;
  }
  v38._countAndFlagsBits = v1;
  v38._object = v37;
  String.append(_:)(v38);

  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 62;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  return 0;
}

uint64_t static IncomingInvitationJoinRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall IncomingInvitationJoinRequest.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  Class isa;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Class v10;
  void *v11;
  void *v12;
  void *v13;
  Class v14;
  void *v15;
  void *v16;
  id v17;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](0x6974617469766E69, 0xEC00000044496E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym), *(_QWORD *)((char *)v2+ OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym+ 8));
  v7 = (void *)MEMORY[0x2494E9EDC](0x735065746F6D6572, 0xEF6D796E6F647565);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken + 8))
    v8 = MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2
                                       + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken));
  else
    v8 = 0;
  v9 = (void *)MEMORY[0x2494E9EDC](0xD000000000000010, 0x80000002429DD6E0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);
  swift_unknownObjectRelease();

  v10 = Data._bridgeToObjectiveC()().super.isa;
  v11 = (void *)MEMORY[0x2494E9EDC](0x755065746F6D6572, 0xEF79654B63696C62);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);

  v12 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName), *(_QWORD *)((char *)v2+ OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName+ 8));
  v13 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v12, v13);

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8) >> 60 == 15)
    v14 = 0;
  else
    v14 = Data._bridgeToObjectiveC()().super.isa;
  v15 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v14, v15);
  swift_unknownObjectRelease();

  v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x88))();
  v17 = (id)MEMORY[0x2494E9EDC](0x6F666E4974736F68, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);

}

id IncomingInvitationJoinRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return IncomingInvitationJoinRequest.init(coder:)(a1);
}

id IncomingInvitationJoinRequest.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  objc_class *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  objc_super v56;
  __int128 v57;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v51 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void **)&v1[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(_QWORD *)&v1[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  v14 = v1;
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_10;
  }
  v16 = (void *)v15;
  v55 = v12;
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v6, 1, 1, v9);
  v18 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB0]);
  MEMORY[0x2494EA314](v16, v6, v9, v18);

  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v19(v6, 1, v9) == 1)
  {
LABEL_10:
    v17(v8, 1, 1, v9);
    goto LABEL_11;
  }
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v20(v8, v6, v9);
  v17(v8, 0, 1, v9);
  if (v19(v8, 1, v9) == 1)
  {
LABEL_11:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_12:
    v27 = *v13;

    type metadata accessor for IncomingInvitationJoinRequest(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v21 = v55;
  v20(v55, v8, v9);
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v22
    || (v23 = (void *)v22,
        v57 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v23,
        (v24 = *((_QWORD *)&v57 + 1)) == 0))
  {

    goto LABEL_15;
  }
  v54 = v57;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  v25 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v25
    || (v26 = (void *)v25,
        v57 = xmmword_2429D9020,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v26,
        *((_QWORD *)&v57 + 1) >> 60 == 15))
  {

    swift_bridgeObjectRelease();
LABEL_15:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    goto LABEL_12;
  }
  v53 = v57;
  v30 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v30
    || (v31 = (void *)v30,
        v57 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v31,
        (v32 = *((_QWORD *)&v57 + 1)) == 0))
  {

    swift_bridgeObjectRelease();
    outlined consume of Data?(v53, *((unint64_t *)&v53 + 1));
    (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v9);
    goto LABEL_12;
  }
  v52 = v57;
  v33 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v33)
  {
    v34 = (void *)v33;
    v57 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v35 = v57;
  }
  else
  {
    v35 = 0uLL;
  }
  *(_OWORD *)&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken] = v35;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID], v55, v9);
  v36 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  v37 = *((_QWORD *)&v53 + 1);
  *(_QWORD *)v36 = v54;
  *((_QWORD *)v36 + 1) = v24;
  v38 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  v40 = v52;
  v39 = v53;
  *(_QWORD *)v38 = v53;
  *((_QWORD *)v38 + 1) = v37;
  v41 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(_QWORD *)v41 = v40;
  *((_QWORD *)v41 + 1) = v32;
  outlined copy of Data._Representation(v39, v37);
  v42 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v42)
  {
    v43 = (void *)v42;
    v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0xF000000000000000;
  }
  v47 = (uint64_t *)&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *v47 = v44;
  v47[1] = v46;
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  v48 = NSCoder.decodeObject<A>(of:forKey:)();
  outlined consume of Data?(v53, *((unint64_t *)&v53 + 1));
  (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v9);
  swift_beginAccess();
  v49 = *v13;
  *v13 = (void *)v48;

  v50 = (objc_class *)type metadata accessor for IncomingInvitationJoinRequest(0);
  v56.receiver = v14;
  v56.super_class = v50;
  v28 = objc_msgSendSuper2(&v56, sel_init);

  return v28;
}

void IncomingInvitationJoinRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IncomingInvitationJoinRequest.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for IncomingInvitationJoinRequest);
}

BOOL static InvitationRequest.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void InvitationRequest.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int InvitationRequest.Errors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InvitationRequest<A>.Errors(char *a1, char *a2)
{
  return static InvitationRequest.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InvitationRequest<A>.Errors()
{
  unsigned __int8 *v0;

  return InvitationRequest.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InvitationRequest<A>.Errors(uint64_t a1)
{
  unsigned __int8 *v1;

  InvitationRequest.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvitationRequest<A>.Errors()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  InvitationRequest.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t InvitationRequest.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequest.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*InvitationRequest.displayName.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t InvitationRequest.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t InvitationRequest.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t InvitationRequest.invitationDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequest.invitationUserInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo;
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

id InvitationRequest.remoteInvitationData.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

uint64_t InvitationRequest.__allocating_init(remoteInvitationData:providerType:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject();
  InvitationRequest.init(remoteInvitationData:providerType:displayName:)(a1, v8, a3, a4);
  return v7;
}

_QWORD *InvitationRequest.init(remoteInvitationData:providerType:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  unint64_t v8;

  v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  v4[5] = 0xF000000000000000;
  v4[6] = a1;
  swift_beginAccess();
  v4[2] = a3;
  v4[3] = a4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = v4[4];
  v8 = v4[5];
  *((_OWORD *)v4 + 2) = xmmword_2429D9020;
  outlined consume of Data?(v7, v8);
  return v4;
}

uint64_t InvitationRequest.__allocating_init(invitationData:providerType:displayName:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return InvitationRequest.__allocating_init(invitationData:displayName:userInfo:)(a1, a2, a4, a5, 0, 0xF000000000000000);
}

uint64_t InvitationRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  InvitationRequest.init(remoteInvitationData:displayName:userInfo:)(a1, a2, a3, a4, a5);
  return v10;
}

_QWORD *InvitationRequest.init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  unint64_t v11;

  v5[3] = 0;
  v5[4] = 0;
  v5[2] = 0;
  v5[5] = 0xF000000000000000;
  v5[6] = a1;
  swift_beginAccess();
  v5[2] = a2;
  v5[3] = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10 = v5[4];
  v11 = v5[5];
  v5[4] = a4;
  v5[5] = a5;
  outlined consume of Data?(v10, v11);
  return v5;
}

uint64_t InvitationRequest.requestApproval()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = v0[3];
  v2 = static NearbyInvitationsController.shared;
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  type metadata accessor for InvitationJoinResponse();
  *v4 = v0;
  v4[1] = InvitationRequest.requestApproval();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in InvitationRequest.requestApproval()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  id v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD v43[2];
  uint64_t v44;
  objc_super v45;
  uint64_t v46;

  v44 = a1;
  v5 = *a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*((uint64_t (**)(uint64_t))v5 + 15))(v9);
  if (v12)
  {
    v13 = v11;
    v14 = v12;
    v15 = (uint64_t (*)(void))*((_QWORD *)*a2 + 18);
    v16 = a2[6];
    v43[1] = a3;
    v17 = v5;
    v18 = v16;
    v19 = v15();
    v43[0] = v6;
    v21 = v20;
    v22 = (objc_class *)type metadata accessor for InvitationApprovalRequest();
    v23 = (char *)objc_allocWithZone(v22);
    *(_QWORD *)&v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = v18;
    v24 = &v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
    *(_QWORD *)v24 = v13;
    *((_QWORD *)v24 + 1) = v14;
    v25 = (uint64_t *)&v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
    *v25 = v19;
    v25[1] = v21;
    v45.receiver = v23;
    v45.super_class = v22;
    v26 = objc_msgSendSuper2(&v45, sel_init);
    v27 = v43[0];
    (*(void (**)(char *, uint64_t, _QWORD))(v7 + 16))((char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v44, v43[0]);
    v28 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v17[10];
    *(_QWORD *)(v29 + 24) = v17[11];
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v29 + v28, v10, v27);
    NearbyInvitationsController.requestApproval(with:completion:)(v26, (uint64_t)partial apply for closure #1 in closure #1 in InvitationRequest.requestApproval(), v29);

    return swift_release();
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.client);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v34 = 138412290;
      v37 = type metadata accessor for InvitationRequest.Errors(0, *((_QWORD *)v5 + 10), *((_QWORD *)v5 + 11), v36);
      MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequest<A>.Errors, v37);
      swift_allocError();
      *v38 = 1;
      v39 = _swift_stdlib_bridgeErrorToNSError();
      v46 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v35 = v39;
      _os_log_impl(&dword_242981000, v32, v33, "Passed an invalid displayName to the provider %@", v34, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v35, -1, -1);
      MEMORY[0x2494EA95C](v34, -1, -1);

    }
    else
    {

      v37 = type metadata accessor for InvitationRequest.Errors(0, *((_QWORD *)v5 + 10), *((_QWORD *)v5 + 11), v40);
    }
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequest<A>.Errors, v37);
    v41 = swift_allocError();
    *v42 = 1;
    v46 = v41;
    return CheckedContinuation.resume(throwing:)();
  }
}

id InvitationApprovalRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = a1;
  v12 = &v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  v13 = &v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, sel_init);
}

uint64_t closure #1 in closure #1 in InvitationRequest.requestApproval()(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  uint64_t v8;
  _BYTE *v9;

  if (a2)
  {
    v5 = a2;
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    v8 = type metadata accessor for InvitationRequest.Errors(0, a4, a5, a4);
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequest<A>.Errors, v8);
    swift_allocError();
    *v9 = 2;
    goto LABEL_3;
  }
  v7 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t InvitationRequest.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));

  return v0;
}

uint64_t InvitationRequest.__deallocating_deinit()
{
  InvitationRequest.deinit();
  return swift_deallocClassInstance();
}

uint64_t Handle.handle.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Handle.tokenDestination.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

NearbySessions::Handle __swiftcall Handle.init(handle:tokenDestination:)(Swift::String handle, Swift::String_optional tokenDestination)
{
  Swift::String_optional *v2;
  NearbySessions::Handle result;

  v2->value = handle;
  v2[1] = tokenDestination;
  result.tokenDestination = tokenDestination;
  result.handle = handle;
  return result;
}

unint64_t Handle.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *v0;
  v2 = (void *)v0[1];
  v3 = v0[3];
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000002429DD790;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  if (v3)
  {
    swift_bridgeObjectRetain_n();
    v6 = String.init<A>(reflecting:)();
    v8 = v7;
  }
  else
  {
    v8 = 0xE300000000000000;
    v6 = 7104878;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

uint64_t NearbyInvitation.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&direct field offset for NearbyInvitation.id, a1);
}

uint64_t NearbyInvitation.controller.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitation.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + direct field offset for NearbyInvitation.displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitation.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + direct field offset for NearbyInvitation.userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + direct field offset for NearbyInvitation.userInfo + 8));
  return v1;
}

id NearbyInvitation.invitationHostInfo.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for NearbyInvitation.invitationHostInfo);
}

uint64_t NearbyInvitation.invitationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  swift_retain();
  v3 = objc_allocWithZone(v2);
  v4 = specialized NearbyInvitationData.init<A>(from:)(v1);
  v5 = swift_release();
  v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v4) + 0x80))(v5);

  return v6;
}

id NearbyInvitationData.__allocating_init<A>(from:)(uint64_t a1)
{
  id v1;

  v1 = specialized NearbyInvitationData.__allocating_init<A>(from:)(a1);
  swift_release();
  return v1;
}

uint64_t NearbyInvitation.sourceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of InvitationSourceProvider(v1 + direct field offset for NearbyInvitation.sourceProvider, a1);
}

uint64_t static NearbyInvitation.PendingMember.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitation.PendingMember.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int NearbyInvitation.PendingMember.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NearbyInvitation.PendingMember.displayName.getter()
{
  uint64_t v0;

  v0 = specialized NearbyInvitation.PendingMember.displayName.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t NearbyInvitation.PendingMember.joinRequestUserInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo;
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t NearbyInvitation.PendingMember.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id NearbyInvitation.PendingMember.joinRequest.getter()
{
  id *v0;

  return *v0;
}

uint64_t key path getter for NearbyInvitation.PendingMember.invitation : <A>NearbyInvitation<A>.PendingMember@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t result;
  _BYTE v11[16];

  v7 = type metadata accessor for NearbyInvitation.PendingMember(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  Strong = swift_weakLoadStrong();
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = Strong;
  return result;
}

uint64_t NearbyInvitation.PendingMember.invitation.getter()
{
  return swift_weakLoadStrong();
}

uint64_t NearbyInvitation.PendingMember.invitation.setter()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t (*NearbyInvitation.PendingMember.invitation.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_weakLoadStrong();
  return NearbyInvitation.PendingMember.invitation.modify;
}

uint64_t NearbyInvitation.PendingMember.invitation.modify()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t NearbyInvitation.PendingMember.description.getter()
{
  void **v0;
  Swift::String v1;
  Swift::String v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3 = *v0;
  v4 = (uint64_t *)((char *)*v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  v5 = *v4;
  v6 = (void *)v4[1];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000002429DD7B0;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  v9 = v3;
  v10 = objc_msgSend(v9, sel_description);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 60;
}

uint64_t NearbyInvitation.PendingMember.init(joinRequest:invitation:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void (*v7)(void *);
  _QWORD *v8;
  id v9;

  swift_weakInit();
  v6 = *(void **)(a2 + direct field offset for NearbyInvitation.invitationHostInfo);
  v7 = *(void (**)(void *))((*MEMORY[0x24BEE4EA0] & *a1) + 0x90);
  v8 = a1;
  v9 = v6;
  v7(v6);

  *a3 = v8;
  swift_weakAssign();
  return swift_release();
}

void NearbyInvitation.PendingMember.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSObject.hash(into:)();

}

uint64_t static NearbyInvitation.PendingMember.== infix(_:_:)()
{
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t NearbyInvitation.PendingMember.approve()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = v1;
  *(_OWORD *)(v4 + 16) = xmmword_2429D9020;
  return swift_task_switch();
}

uint64_t NearbyInvitation.PendingMember.approve(userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t NearbyInvitation.PendingMember.approve(userInfo:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD);

  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
  {
    v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(*(_QWORD *)Strong + 264)
                                                        + *(_QWORD *)(*(_QWORD *)Strong + 264));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = NearbyInvitation.PendingMember.approve(userInfo:);
    return v6(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v5 = type metadata accessor for NearbyInvitation.PendingMember.Errors(0, *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 32) + 24), v2);
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember.Errors, v5);
    swift_allocError();
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitation.PendingMember.reject()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t NearbyInvitation.PendingMember.reject()()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);

  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
  {
    v6 = (uint64_t (*)(_QWORD))(**(int **)(*(_QWORD *)Strong + 272) + *(_QWORD *)(*(_QWORD *)Strong + 272));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v3;
    *v3 = v0;
    v3[1] = NearbyInvitation.PendingMember.reject();
    return v6(*(_QWORD *)(v0 + 24));
  }
  else
  {
    v5 = type metadata accessor for NearbyInvitation.PendingMember.Errors(0, *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24), v2);
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember.Errors, v5);
    swift_allocError();
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int NearbyInvitation.PendingMember.hashValue.getter()
{
  id *v0;
  id v1;

  Hasher.init(_seed:)();
  v1 = *v0;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t property wrapper backing initializer of NearbyInvitation.pendingMembers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a1;
  v4 = type metadata accessor for NearbyInvitation.PendingMember(255, a2, a3, a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v4);
  v5 = type metadata accessor for Set();
  return Published.init(wrappedValue:)((uint64_t)&v7, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitation<A>.PendingMember()
{
  Hasher.init(_seed:)();
  NearbyInvitation.PendingMember.hash(into:)();
  return Hasher._finalize()();
}

uint64_t NearbyInvitation.pendingMembers.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitation.pendingMembers.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*NearbyInvitation.pendingMembers.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

uint64_t key path setter for NearbyInvitation.$pendingMembers : <A>NearbyInvitation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v6);
  type metadata accessor for Set();
  v7 = type metadata accessor for Published.Publisher();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 200))(v9);
}

uint64_t NearbyInvitation.$pendingMembers.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v3);
  type metadata accessor for Set();
  type metadata accessor for Published();
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t NearbyInvitation.$pendingMembers.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *v4;
  specialized NearbyInvitation.$pendingMembers.setter(a1, a2, a3, a4);
  v8 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v7);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v8);
  type metadata accessor for Set();
  v9 = type metadata accessor for Published.Publisher();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
}

void (*NearbyInvitation.$pendingMembers.modify(_QWORD *a1))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v5 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88), v4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v5);
  type metadata accessor for Set();
  v6 = type metadata accessor for Published.Publisher();
  v3[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[3] = malloc(v8);
  v3[4] = malloc(v8);
  NearbyInvitation.$pendingMembers.getter();
  return NearbyInvitation.$pendingMembers.modify;
}

void NearbyInvitation.$pendingMembers.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, uint64_t);

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 24);
  v6 = *(void **)(*(_QWORD *)a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v8 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v6, v7);
    specialized NearbyInvitation.$pendingMembers.setter((uint64_t)v5, v9, v10, v11);
    v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
  }
  else
  {
    specialized NearbyInvitation.$pendingMembers.setter(*(_QWORD *)(*(_QWORD *)a1 + 32), a2, a3, a4);
    v12 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v12(v6, v7);
  free(v6);
  free(v5);
  free(v4);
}

uint64_t NearbyInvitation.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitation.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitation.cancellables.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = v6;
  v7[4] = a4;
  v7[5] = a5;
  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for UUID();
  v7[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)()
{
  uint64_t *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[5];
  v1 = (_QWORD *)v0[6];
  v3 = v0[4];
  v4 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  UUID.init()();
  outlined copy of Data?(v3, v2);
  if (one-time initialization token for shared != -1)
    swift_once();
  v5 = static NearbyInvitationsController.shared;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = swift_task_alloc();
  v0[9] = v7;
  (*(void (**)(void))(v6 + 16))();
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:);
  return NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(v0[8], v0[2], v0[3], v0[4], v0[5], v5, v7, v4);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  __swift_destroy_boxed_opaque_existential_0(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_QWORD *)(v4 + 96) = a1;
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v9[11] = v12;
  v9[12] = v8;
  v9[9] = a7;
  v9[10] = a8;
  v9[7] = a5;
  v9[8] = a6;
  v9[5] = a3;
  v9[6] = a4;
  v9[3] = a1;
  v9[4] = a2;
  v9[13] = *(_QWORD *)(a8 - 8);
  v9[14] = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  v9[15] = v10;
  v9[16] = *(_QWORD *)(v10 - 8);
  v9[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *v1 = v0;
  v1[1] = NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 16))(v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 240))(v1, v8, v7, v9, v20, v21, v22, v2, v5, v19);
  if (v23)
  {
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  swift_release();
  outlined consume of Data?(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  NearbyInvitationsController.generateNearbyInvitation(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:), v6);
  return swift_release();
}

void *closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(void *result, id a2)
{
  id v2;
  id v3;

  if (result)
  {
    v2 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    v3 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v14;

  v14 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 8))(a8, a9);
  swift_release();
  outlined consume of Data?(a5, a6);

  return v14;
}

uint64_t closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v16;
  _QWORD *v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  _BYTE v23[16];

  v7 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = result;
    v10 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v7) + 0x88))();
    if (v10)
    {
      v11 = (void *)v10;
      v13 = *(_QWORD *)(v10 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      v12 = *(_QWORD *)(v10 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
      swift_bridgeObjectRetain();

      v14 = (_QWORD *)(*(_QWORD *)(v9 + direct field offset for NearbyInvitation.invitationHostInfo)
                     + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      if (v13 == *v14 && v12 == v14[1])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          return swift_release();
      }
      v17 = v7;
      swift_retain();
      NearbyInvitation.PendingMember.init(joinRequest:invitation:)(v17, v9, &v22);
      v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 184))(v21);
      v20 = type metadata accessor for NearbyInvitation.PendingMember(255, a3, a5, v19);
      MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v20);
      type metadata accessor for Set();
      Set.insert(_:)();
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v23, v20);
      v18(v21, 0);
    }
    return swift_release();
  }
  return result;
}

_QWORD *NearbyInvitation.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v18 = *v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = direct field offset for NearbyInvitation.controller;
  v17 = direct field offset for NearbyInvitation.invitationHostInfo;
  v6 = *(void **)((char *)v0 + direct field offset for NearbyInvitation.invitationHostInfo);
  v7 = (char *)v0 + direct field offset for NearbyInvitation.id;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, (uint64_t)v0 + direct field offset for NearbyInvitation.id, v2);
  v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10 + v8, v5, v2);
  *(_QWORD *)(v10 + v9) = v6;
  NearbyInvitationsController.releaseInvitation(_:response:)(v6, (uint64_t)partial apply for closure #1 in NearbyInvitation.deinit, v10);
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data?(*(_QWORD *)((char *)v1 + direct field offset for NearbyInvitation.userInfo), *(_QWORD *)((char *)v1 + direct field offset for NearbyInvitation.userInfo + 8));

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v0 + direct field offset for NearbyInvitation.sourceProvider);
  v11 = (char *)v1 + *(_QWORD *)(*v1 + 144);
  v13 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(v18 + 80), *(_QWORD *)(v18 + 88), v12);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v13);
  type metadata accessor for Set();
  v14 = type metadata accessor for Published();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
  swift_bridgeObjectRelease();
  return v1;
}

void closure #1 in NearbyInvitation.deinit(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  os_log_t v39;
  uint64_t v40;
  _BYTE v41[12];
  int v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v41[-v11];
  if (a1)
  {
    v13 = a1;
    if (one-time initialization token for client != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.client);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    v15 = a3;
    v16 = a1;
    v17 = v15;
    v18 = a1;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v22 = swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      v46 = v44;
      *(_DWORD *)v22 = 136315650;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v43 = v19;
      v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v46);
      v42 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v22 + 12) = 2112;
      v45 = (uint64_t)v17;
      v26 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v23 = v17;

      *(_WORD *)(v22 + 22) = 2112;
      v27 = a1;
      v28 = _swift_stdlib_bridgeErrorToNSError();
      v45 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v23[1] = v28;

      v29 = v43;
      _os_log_impl(&dword_242981000, v43, (os_log_type_t)v42, "Failed to release invitation: %s - %@, reason: %@", (uint8_t *)v22, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v23, -1, -1);
      v30 = v44;
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v30, -1, -1);
      MEMORY[0x2494EA95C](v22, -1, -1);

    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.client);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v12, a2, v6);
    v32 = a3;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v43 = (os_log_t)swift_slowAlloc();
      v44 = swift_slowAlloc();
      v46 = v44;
      *(_DWORD *)v35 = 136315394;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v36 = dispatch thunk of CustomStringConvertible.description.getter();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
      *(_WORD *)(v35 + 12) = 2112;
      v45 = (uint64_t)v32;
      v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v39 = v43;
      v43->isa = (Class)v32;

      _os_log_impl(&dword_242981000, v33, v34, "Successfully released invitation: %s - %@", (uint8_t *)v35, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v39, -1, -1);
      v40 = v44;
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v40, -1, -1);
      MEMORY[0x2494EA95C](v35, -1, -1);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);

    }
  }
}

uint64_t NearbyInvitation.__deallocating_deinit()
{
  NearbyInvitation.deinit();
  return swift_deallocClassInstance();
}

uint64_t NearbyInvitation.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v16;

  _StringGuts.grow(_:)(28);
  v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v16 = v1;
  v2._countAndFlagsBits = 1029990688;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3D656D616E20;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + direct field offset for NearbyInvitation.displayName);
  v6 = *(void **)(v0 + direct field offset for NearbyInvitation.displayName + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x666E4974736F6820;
  v8._object = (void *)0xEA00000000003D6FLL;
  String.append(_:)(v8);
  v9 = *(id *)(v0 + direct field offset for NearbyInvitation.invitationHostInfo);
  v10 = objc_msgSend(v9, sel_description);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t NearbyInvitation.markUsed()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[4] = v0;
  v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.client);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v9 = v0[6];
  v8 = v0[7];
  v10 = v0[4];
  v11 = v0[5];
  if (v7)
  {
    v19 = v0[7];
    v18 = v0[6];
    v12 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v20 = v17;
    *(_DWORD *)v12 = 136315394;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 248))();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v12 + 12) = 2080;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646573556B72616DLL, 0xEA00000000002928, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_242981000, v5, v6, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v17, -1, -1);
    MEMORY[0x2494EA95C](v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v11);
  }
  else
  {
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  }
  v15 = (_QWORD *)swift_task_alloc();
  v0[8] = v15;
  *v15 = v0;
  v15[1] = NearbyInvitation.markUsed();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitation.markUsed()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[2];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + direct field offset for NearbyInvitation.controller);
  v20[0] = *(_QWORD *)(a2 + direct field offset for NearbyInvitation.invitationHostInfo);
  v20[1] = v12;
  v13 = a2 + direct field offset for NearbyInvitation.id;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = (v10 + *(unsigned __int8 *)(v5 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v14, v11, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  v18 = (void *)v20[0];
  *(_QWORD *)(v17 + v16) = v20[0];
  NearbyInvitationsController.markInvitationUsed(_:response:)(v18, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.markUsed(), v17);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitation.markUsed()(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v27 = (uint64_t)a1;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.client);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    v14 = a4;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v24 = (_QWORD *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v27 = v25;
      *(_DWORD *)v17 = 136315394;
      v23[1] = v17 + 4;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      *(_WORD *)(v17 + 12) = 2112;
      v26 = (uint64_t)v14;
      v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v21 = v24;
      *v24 = v14;

      _os_log_impl(&dword_242981000, v15, v16, "Successfully marked invitation: %s - %@ as used.", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v21, -1, -1);
      v22 = v25;
      swift_arrayDestroy();
      MEMORY[0x2494EA95C](v22, -1, -1);
      MEMORY[0x2494EA95C](v17, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t NearbyInvitation.approve(_:userInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v6 = *(_OWORD *)(v0 + 64);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v6;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v4;
  *v4 = v0;
  v4[1] = NearbyInvitation.approve(_:userInfo:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(_QWORD *, uint64_t, uint64_t);

  if (one-time initialization token for client != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_242981000, v2, v3, "Successfully approved, now telling sourceProvider to add the member", v4, 2u);
    MEMORY[0x2494EA95C](v4, -1, -1);
  }
  v5 = v0[11];
  v6 = (uint64_t *)v0[8];

  v7 = *v6;
  v8 = (uint64_t *)(*v6 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  v10 = *v8;
  v9 = v8[1];
  v0[16] = v9;
  v11 = (uint64_t *)(v7 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken);
  v13 = *v11;
  v12 = v11[1];
  v0[17] = v12;
  v14 = (_QWORD *)(v5 + direct field offset for NearbyInvitation.sourceProvider);
  v15 = *(_QWORD *)(v5 + direct field offset for NearbyInvitation.sourceProvider + 24);
  v16 = v14[4];
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v0[2] = v10;
  v0[3] = v9;
  v0[4] = v13;
  v0[5] = v12;
  v19 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))(**(int **)(v16 + 24) + *(_QWORD *)(v16 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = (_QWORD *)swift_task_alloc();
  v0[18] = v17;
  *v17 = v0;
  v17[1] = NearbyInvitation.approve(_:userInfo:);
  return v19(v0 + 2, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_242981000, v1, v2, "SourceProvider successfully handled adding the approvedMember", v3, 2u);
    MEMORY[0x2494EA95C](v3, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 152);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 152);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v14 = v8;
    *(_QWORD *)(v0 + 48) = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_242981000, v4, v5, "SourceProvider failed to handle adding the approvedMember, error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2494EA95C](v8, -1, -1);
    MEMORY[0x2494EA95C](v7, -1, -1);
  }
  else
  {
    v12 = *(void **)(v0 + 152);

  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;

  v32 = a4;
  v33 = a5;
  v36 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + direct field offset for NearbyInvitation.controller);
  v34 = *a3;
  v35 = v15;
  v16 = (_QWORD *)(a2 + direct field offset for NearbyInvitation.sourceProvider);
  v18 = *(_QWORD *)(a2 + direct field offset for NearbyInvitation.sourceProvider + 24);
  v17 = v16[4];
  __swift_project_boxed_opaque_existential_1(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
  v19 = UUID.uuidString.getter();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v22 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  v23 = (char *)objc_allocWithZone(v22);
  v24 = (uint64_t *)&v23[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *v24 = v19;
  v24[1] = v21;
  *(_QWORD *)&v23[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = MEMORY[0x24BEE4AF8];
  v25 = (uint64_t *)&v23[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
  v26 = v32;
  v27 = v33;
  *v25 = v32;
  v25[1] = v27;
  outlined copy of Data?(v26, v27);
  v37.receiver = v23;
  v37.super_class = v22;
  v28 = objc_msgSendSuper2(&v37, sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v36, v7);
  v29 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v30 + v29, v10, v7);
  NearbyInvitationsController.approve(pendingMember:response:completion:)(v34, v28, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:), v30);
  swift_release();

}

uint64_t closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitation.reject(_:)()
{
  uint64_t v0;

  return NearbyInvitation.reject(_:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitation<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

id InvitationApprovalRequest.remoteInvitationData.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
}

uint64_t InvitationApprovalRequest.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationApprovalRequest.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8));
  return v1;
}

id InvitationApprovalRequest.init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v7;
  objc_super v9;

  *(_QWORD *)&v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = a1;
  v6 = &v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
  *(_QWORD *)v6 = a2;
  *((_QWORD *)v6 + 1) = a3;
  v7 = &v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
  *(_QWORD *)v7 = a4;
  *((_QWORD *)v7 + 1) = a5;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for InvitationApprovalRequest();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t InvitationApprovalRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;

  v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(60);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000002429DD840;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  v5 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  v6 = objc_msgSend(v5, sel_description);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x616C70736964202CLL;
  v11._object = (void *)0xEF203A656D614E79;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName);
  v13 = *(void **)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName + 8);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E4972657375202CLL;
  v15._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v15);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8);
  if (v16 >> 60 == 15)
  {
    v18 = 0xE300000000000000;
    v19 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v17, v16);
    outlined copy of Data._Representation(v17, v16);
    v19 = String.init<A>(reflecting:)();
    v18 = v20;
  }
  v21 = v18;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v17, v16);
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t static InvitationApprovalRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationApprovalRequest.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  Class isa;
  id v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  v4 = (void *)MEMORY[0x2494E9EDC](0xD000000000000014, 0x80000002429DD860);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName), *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName + 8));
  v6 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = (id)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v8);
  swift_unknownObjectRelease();

}

uint64_t InvitationApprovalRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return InvitationApprovalRequest.init(coder:)(a1);
}

uint64_t InvitationApprovalRequest.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = v1;
  type metadata accessor for NearbyInvitationData(0);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    v7 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v7)
    {
      v8 = (void *)v7;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

    }
    a1 = v4;
  }
  else
  {
    v6 = v4;
  }

  type metadata accessor for InvitationApprovalRequest();
  swift_deallocPartialClassInstance();
  return 0;
}

void InvitationApprovalRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t InvitationApprovalRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0xD000000000000014;
  if (a1 == 1)
    return 0x4E79616C70736964;
  return 0x6F666E4972657375;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationApprovalRequest.CodingKeys()
{
  char *v0;

  return InvitationApprovalRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationApprovalRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InvitationApprovalRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InvitationApprovalRequest.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationApprovalRequest.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationApprovalRequest.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id InvitationApprovalRequest.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationApprovalRequest);
}

uint64_t InvitationApprovalRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationApprovalRequest.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)&v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  v11 = 0;
  type metadata accessor for NearbyInvitationData(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationData and conformance NearbyInvitationData, 255, type metadata accessor for NearbyInvitationData, (uint64_t)&protocol conformance descriptor for NearbyInvitationData);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
    v11 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id InvitationApprovalRequest.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return InvitationApprovalRequest.init(from:)(a1);
}

id InvitationApprovalRequest.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  void *v10;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  char *v18;
  objc_super v19;
  __int128 v20;
  char v21;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationApprovalRequest.CodingKeys>);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  v18 = v1;
  v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v10 = v18;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for InvitationApprovalRequest();
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for NearbyInvitationData(0);
    v21 = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationData and conformance NearbyInvitationData, 255, type metadata accessor for NearbyInvitationData, (uint64_t)&protocol conformance descriptor for NearbyInvitationData);
    v9 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v18;
    *(_QWORD *)&v18[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = v20;
    LOBYTE(v20) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = (uint64_t *)&v12[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
    *v14 = v13;
    v14[1] = v15;
    v21 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v12[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo] = v20;

    v16 = (objc_class *)type metadata accessor for InvitationApprovalRequest();
    v19.receiver = v12;
    v19.super_class = v16;
    v8 = objc_msgSendSuper2(&v19, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationApprovalRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 136))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationApprovalRequest()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x80))();
}

uint64_t NearbyInvitationData.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID, a1);
}

uint64_t NearbyInvitationData.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationData.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8));
  return v1;
}

id NearbyInvitationData.hostConnectionInfo.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
}

uint64_t NearbyInvitationData.sourceProviderID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID, a1);
}

uint64_t NearbyInvitationData.sourceProviderName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static NearbyInvitationData.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitationData.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int NearbyInvitationData.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NearbyInvitationData.encodedData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;

  v1 = type metadata accessor for Invitation_InvitationData(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v0;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, 255, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
  static Message.with(_:)();
  v4 = Message.serializedData(partial:)();
  outlined destroy of Invitation_InvitationData((uint64_t)v3, type metadata accessor for Invitation_InvitationData);
  return v4;
}

uint64_t closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;

  v5 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = UUID.data.getter();
  v11 = v10;
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v9;
  a1[1] = v11;
  v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8);
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRelease();
  a1[2] = v13;
  a1[3] = v12;
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8);
  if (v15 >> 60 != 15)
  {
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
    v17 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
    v26 = v5;
    v18 = v8;
    v19 = v6;
    v25[1] = v2;
    v20 = *v17;
    v21 = v17[1];
    outlined copy of Data._Representation(v16, v15);
    v22 = v20;
    v6 = v19;
    v8 = v18;
    v5 = v26;
    v14 = outlined consume of Data?(v22, v21);
    *v17 = v16;
    v17[1] = v15;
  }
  MEMORY[0x24BDAC7A8](v14);
  v25[-2] = a2;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, 255, type metadata accessor for Invitation_HostConnectionInfo, (uint64_t)&protocol conformance descriptor for Invitation_HostConnectionInfo);
  static Message.with(_:)();
  v23 = (uint64_t)a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v23, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v8, v23);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
}

uint64_t closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8);
  v6 = *a1;
  v7 = a1[1];
  outlined copy of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  *a1 = v4;
  a1[1] = v5;
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a1[2] = v9;
  a1[3] = v8;
  return result;
}

id NearbyInvitationJoinRequestMetadata.__allocating_init(publicKey:pseudonym:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.__allocating_init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
}

id InvitationBlob.__allocating_init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[*a5];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[*a6];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

id NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  objc_class *v6;
  id v13;
  id v14;

  v13 = objc_allocWithZone(v6);
  v14 = specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(a1, a2, a3, a4, a5, a6);

  outlined consume of Data?(a4, a5);
  return v14;
}

id NearbyInvitationData.init<A>(from:)(uint64_t a1)
{
  id v1;

  v1 = specialized NearbyInvitationData.init<A>(from:)(a1);
  swift_release();
  return v1;
}

id NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  objc_class *v10;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  char *v21;
  char *v22;
  id v23;
  void (*v24)(uint64_t, uint64_t);
  objc_super v30;

  v10 = v9;
  v15 = (char *)objc_allocWithZone(v9);
  v16 = &v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID];
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19(v16, a1, v17);
  v20 = &v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = a3;
  v21 = &v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *(_QWORD *)v21 = a4;
  *((_QWORD *)v21 + 1) = a5;
  *(_QWORD *)&v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  v19(&v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], a7, v17);
  v22 = &v15[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *(_QWORD *)v22 = a8;
  *((_QWORD *)v22 + 1) = a9;
  v30.receiver = v15;
  v30.super_class = v10;
  v23 = objc_msgSendSuper2(&v30, sel_init);
  v24 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v24(a7, v17);
  v24(a1, v17);
  return v23;
}

id NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  char *v20;
  char *v21;
  id v22;
  void (*v23)(uint64_t, uint64_t);
  objc_super v28;

  v15 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID];
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, a1, v16);
  v19 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  v20 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *(_QWORD *)v20 = a4;
  *((_QWORD *)v20 + 1) = a5;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  v18(&v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], a7, v16);
  v21 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *(_QWORD *)v21 = a8;
  *((_QWORD *)v21 + 1) = a9;
  v28.receiver = v9;
  v28.super_class = (Class)type metadata accessor for NearbyInvitationData(0);
  v22 = objc_msgSendSuper2(&v28, sel_init);
  v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v23(a7, v16);
  v23(a1, v16);
  return v22;
}

id NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  id v9;

  v9 = specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(a1, a2, a3, a4, a5, a6);

  outlined consume of Data?(a4, a5);
  return v9;
}

uint64_t NearbyInvitationData.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;

  swift_getObjectType();
  _StringGuts.grow(_:)(75);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x74617469766E6920;
  v3._object = (void *)0xEF203A44496E6F69;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x79616C7073696420;
  v5._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  v7 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E4972657375202CLL;
  v9._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v9);
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8);
  if (v10 >> 60 == 15)
  {
    v12 = 0xE300000000000000;
    v13 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v11, v10);
    outlined copy of Data._Representation(v11, v10);
    v13 = String.init<A>(reflecting:)();
    v12 = v14;
  }
  v15 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v11, v10);
  v16._object = (void *)0x80000002429DD8B0;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  v18 = objc_msgSend(v17, sel_description);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);

  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return 0;
}

uint64_t static NearbyInvitationData.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationData.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  void *v5;
  void *v6;
  void *v7;
  Class v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](0x6974617469766E69, 0xEC00000044496E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName), *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8));
  v7 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8) >> 60 == 15)
    v8 = 0;
  else
    v8 = Data._bridgeToObjectiveC()().super.isa;
  v9 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);
  swift_unknownObjectRelease();

  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  v11 = (id)MEMORY[0x2494E9EDC](0xD000000000000012, 0x80000002429DCAE0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);

}

id NearbyInvitationData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyInvitationData.init(coder:)(a1);
}

id NearbyInvitationData.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  id v22;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  objc_class *v29;
  objc_super v30;
  __int128 v31;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  v8 = v2;
  v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9)
    goto LABEL_8;
  v10 = (void *)v9;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v11
    || (v12 = (void *)v11,
        v31 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v12,
        (v13 = *((_QWORD *)&v31 + 1)) == 0))
  {

LABEL_8:
LABEL_9:
    type metadata accessor for NearbyInvitationData(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  v14 = v31;
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v16 = (void *)v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v17(&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v7, v4);
  v18 = &v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(_QWORD *)v18 = v14;
  *((_QWORD *)v18 + 1) = v13;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  v19 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v19)
  {
    v20 = (void *)v19;
    v31 = xmmword_2429D9020;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

    v21 = v31;
  }
  else
  {
    v21 = xmmword_2429D9020;
  }
  *(_OWORD *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo] = v21;
  *(_QWORD *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v16;
  v24 = v16;
  UUID.init()();
  v17(&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v7, v4);
  v25 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  v27 = v26;

  v28 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *v28 = v25;
  v28[1] = v27;

  v29 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v30.receiver = v8;
  v30.super_class = v29;
  v22 = objc_msgSendSuper2(&v30, sel_init);

  return v22;
}

void NearbyInvitationData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NearbyInvitationData.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2429CDF34 + 4 * byte_2429DA5F0[a1]))(0xD000000000000012, 0x80000002429DCAE0);
}

uint64_t sub_2429CDF34()
{
  return 0x6974617469766E69;
}

uint64_t sub_2429CDF54()
{
  return 0x4E79616C70736964;
}

uint64_t sub_2429CDF74()
{
  return 0x6F666E4972657375;
}

uint64_t sub_2429CDF8C(uint64_t a1)
{
  return a1 - 2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyInvitationData.CodingKeys()
{
  unsigned __int8 *v0;

  return NearbyInvitationData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyInvitationData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NearbyInvitationData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbyInvitationData.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationData.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyInvitationData.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id NearbyInvitationData.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for NearbyInvitationData);
}

uint64_t NearbyInvitationData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  __int128 v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyInvitationData.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
    v12 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
    v12 = 3;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, v9, (uint64_t (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata, (uint64_t)&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

char *NearbyInvitationData.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyInvitationData.init(from:)(a1);
}

char *NearbyInvitationData.init(from:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  objc_class *v29;
  _QWORD v30[2];
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  objc_super v37;
  __int128 v38;
  char v39;

  v2 = v1;
  v31 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v31 - 8);
  v5 = MEMORY[0x24BDAC7A8](v31);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v32 = (void (*)(char *, char *, uint64_t))((char *)v30 - v8);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyInvitationData.CodingKeys>);
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  v13 = v2;
  v34 = v11;
  v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);

    type metadata accessor for NearbyInvitationData(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v15 = v7;
    v16 = v9;
    v36 = v4;
    LOBYTE(v38) = 0;
    v17 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v18 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30[1] = v17;
    v20 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v20(&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], (char *)v32, v18);
    LOBYTE(v38) = 1;
    v21 = KeyedDecodingContainer.decode(_:forKey:)();
    v32 = v20;
    v22 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
    *v22 = v21;
    v22[1] = v23;
    v39 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    v24 = v33;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo] = v38;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    v39 = 3;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, v25, (uint64_t (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata, (uint64_t)&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata);
    v30[0] = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v38;
    LOBYTE(v38) = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v32(&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v15, v18);
    LOBYTE(v38) = 5;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
    *v27 = v26;
    v27[1] = v28;

    v29 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
    v37.receiver = v13;
    v37.super_class = v29;
    v13 = (char *)objc_msgSendSuper2(&v37, sel_init);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v24);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  }
  return v13;
}

unint64_t static NearbyAdvertisement.meContactID.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t NearbyAdvertisement.scannerID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID, a1);
}

uint64_t NearbyAdvertisement.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyAdvertisement.activityType.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType);
}

uint64_t NearbyAdvertisement.contactID.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
}

uint64_t NearbyAdvertisement.handle.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle);
}

uint64_t NearbyAdvertisement.displayName.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
}

uint64_t InvitationJoinResponse.sessionIdentifier.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t NearbyAdvertisement.deviceColor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t NearbyAdvertisement.deviceColor.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*NearbyAdvertisement.deviceColor.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.deviceModel.getter()
{
  return NearbyAdvertisement.deviceModel.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel);
}

uint64_t NearbyAdvertisement.deviceModel.setter(uint64_t a1, uint64_t a2)
{
  return NearbyAdvertisement.deviceModel.setter(a1, a2, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel);
}

uint64_t (*NearbyAdvertisement.deviceModel.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.deviceID.getter()
{
  return NearbyAdvertisement.deviceModel.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID);
}

uint64_t NearbyAdvertisement.deviceModel.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t NearbyAdvertisement.deviceID.setter(uint64_t a1, uint64_t a2)
{
  return NearbyAdvertisement.deviceModel.setter(a1, a2, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID);
}

uint64_t NearbyAdvertisement.deviceModel.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyAdvertisement.deviceID.modify())()
{
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.userInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
  return v1;
}

id NearbyAdvertisement.dataSource.getter()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  void *v3;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource))
  {
    v2 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v3 = (void *)static NearbyInvitationServiceClient.shared;
    *v1 = static NearbyInvitationServiceClient.shared;
    v1[1] = &protocol witness table for NearbyInvitationServiceClient;
    v2 = v3;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t NearbyAdvertisement.dataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  *v3 = a1;
  v3[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*NearbyAdvertisement.dataSource.modify(id *a1))(uint64_t a1)
{
  void *v1;
  void *v3;

  a1[2] = v1;
  *a1 = NearbyAdvertisement.dataSource.getter();
  a1[1] = v3;
  return NearbyAdvertisement.dataSource.modify;
}

uint64_t NearbyAdvertisement.dataSource.modify(uint64_t a1)
{
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource) = *(_OWORD *)a1;
  return swift_unknownObjectRelease();
}

id NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  id v18;

  v18 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1, a15, a16, a17, a18);
  outlined consume of Data?(a11, a12);
  return v18;
}

uint64_t NearbyAdvertisement.approve(with:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t ObjectType;

  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF0))();
  v5 = v4;
  v6 = (*(uint64_t (**)(void))((*v3 & *a1) + 0x80))();
  v8 = v7;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 176))(v1, v6, v8, ObjectType, v5);
  outlined consume of Data._Representation(v6, v8);
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall NearbyAdvertisement.reject()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
  v2 = v1;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 184))(v0, ObjectType, v2);
  swift_unknownObjectRelease();
}

uint64_t static NearbyAdvertisement.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyAdvertisement.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  Class isa;
  void *v5;
  void *v6;
  void *v7;
  Class v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Class v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  char v19;
  NSNumber v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x2494E9EDC](0x4972656E6E616373, 0xE900000000000044);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8));
  v7 = (void *)MEMORY[0x2494E9EDC](0x696669746E656469, 0xEA00000000007265);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  v8 = UInt32._bridgeToObjectiveC()().super.super.isa;
  v9 = (void *)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8))
    v10 = MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID));
  else
    v10 = 0;
  v11 = (void *)MEMORY[0x2494E9EDC](0x49746361746E6F63, 0xE900000000000044);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8) >> 60 == 15)
    v12 = 0;
  else
    v12 = Data._bridgeToObjectiveC()().super.isa;
  v13 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v12, v13);
  swift_unknownObjectRelease();

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8))
    v14 = MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle));
  else
    v14 = 0;
  v15 = (void *)MEMORY[0x2494E9EDC](0x656C646E6168, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v14, v15);
  swift_unknownObjectRelease();

  if (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8))
    v16 = MEMORY[0x2494E9EDC](*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName));
  else
    v16 = 0;
  v17 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA8))();
  if ((v19 & 1) != 0)
    v20.super.super.isa = 0;
  else
    v20.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  v21 = (void *)MEMORY[0x2494E9EDC](0x6F43656369766564, 0xEB00000000726F6CLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v20.super.super.isa, v21);
  swift_unknownObjectRelease();

  v22 = (*(uint64_t (**)(void))((*v18 & *v2) + 0xC0))();
  if (v23)
  {
    v24 = MEMORY[0x2494E9EDC](v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  v25 = (void *)MEMORY[0x2494E9EDC](0x6F4D656369766564, 0xEB000000006C6564);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v24, v25);
  swift_unknownObjectRelease();

  v26 = (*(uint64_t (**)(void))((*v18 & *v2) + 0xD8))();
  if (v27)
  {
    v28 = MEMORY[0x2494E9EDC](v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  v29 = (id)MEMORY[0x2494E9EDC](0x4449656369766564, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v28, v29);
  swift_unknownObjectRelease();

}

id NearbyAdvertisement.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyAdvertisement.init(coder:)(a1);
}

id NearbyAdvertisement.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  id v15;
  int v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  int v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  void *v33;
  id v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  void *v39;
  id v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void *v45;
  id v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  void *v51;
  id v52;
  int v53;
  uint64_t v54;
  char v55;
  char *v56;
  void *v57;
  id v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  objc_class *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  objc_super v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[24];
  uint64_t v85;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v73 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(_QWORD *)v9 = 0;
  v72 = v9;
  v9[8] = 1;
  v10 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v74 = v11;
  v12 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = v1;
  v14 = (void *)MEMORY[0x2494E9EDC](0x4972656E6E616373, 0xE900000000000044);
  v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_9;
  }
  v16 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v16 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_9:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    type metadata accessor for NearbyAdvertisement(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v73, v5, v6);
  v17 = (void *)MEMORY[0x2494E9EDC](0x696669746E656469, 0xEA00000000007265);
  v18 = objc_msgSend(a1, sel_decodeObjectForKey_, v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
LABEL_17:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_17;
  }
  v70 = v80;
  v71 = v81;
  v19 = (void *)MEMORY[0x2494E9EDC](0x7974697669746361, 0xEC00000065707954);
  v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    goto LABEL_26;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    v23 = 0;
    goto LABEL_27;
  }
  v23 = v80;
  if (v80 >= 2)
  {

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_27:
  v24 = (void *)MEMORY[0x2494E9EDC](0x49746361746E6F63, 0xE900000000000044);
  v25 = objc_msgSend(a1, sel_decodeObjectForKey_, v24);

  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  v26 = a1;
  if (v85)
  {
    v27 = swift_dynamicCast();
    if (v27)
      v28 = v80;
    else
      v28 = 0;
    if (v27)
      v29 = v81;
    else
      v29 = 0;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v28 = 0;
    v29 = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID], v73, v6);
  v30 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
  v31 = v71;
  *(_QWORD *)v30 = v70;
  *((_QWORD *)v30 + 1) = v31;
  *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = v23;
  v32 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
  *(_QWORD *)v32 = v28;
  *((_QWORD *)v32 + 1) = v29;
  v33 = (void *)MEMORY[0x2494E9EDC](0x6F666E4972657375, 0xE800000000000000);
  v34 = objc_msgSend(a1, sel_decodeObjectForKey_, v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v35 = swift_dynamicCast();
    v36 = v80;
    v37 = v81;
    if (!v35)
    {
      v36 = 0;
      v37 = 0xF000000000000000;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v36 = 0;
    v37 = 0xF000000000000000;
  }
  v38 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo];
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  v39 = (void *)MEMORY[0x2494E9EDC](0x656C646E6168, 0xE600000000000000);
  v40 = objc_msgSend(a1, sel_decodeObjectForKey_, v39);

  if (v40)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v41 = swift_dynamicCast();
    v42 = v80;
    v43 = v81;
    if (!v41)
    {
      v42 = 0;
      v43 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v42 = 0;
    v43 = 0;
  }
  v44 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
  *(_QWORD *)v44 = v42;
  *((_QWORD *)v44 + 1) = v43;
  v45 = (void *)MEMORY[0x2494E9EDC](0x4E79616C70736964, 0xEB00000000656D61);
  v46 = objc_msgSend(a1, sel_decodeObjectForKey_, v45);

  if (v46)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v47 = swift_dynamicCast();
    v48 = v80;
    v49 = v81;
    if (!v47)
    {
      v48 = 0;
      v49 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v48 = 0;
    v49 = 0;
  }
  v50 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
  *(_QWORD *)v50 = v48;
  *((_QWORD *)v50 + 1) = v49;
  v51 = (void *)MEMORY[0x2494E9EDC](0x6F43656369766564, 0xEB00000000726F6CLL);
  v52 = objc_msgSend(a1, sel_decodeObjectForKey_, v51);

  if (v52)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v53 = swift_dynamicCast();
    if (v53)
      v54 = v80;
    else
      v54 = 0;
    v55 = v53 ^ 1;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v54 = 0;
    v55 = 1;
  }
  v56 = v72;
  swift_beginAccess();
  *(_QWORD *)v56 = v54;
  v56[8] = v55;
  v57 = (void *)MEMORY[0x2494E9EDC](0x6F4D656369766564, 0xEB000000006C6564);
  v58 = objc_msgSend(a1, sel_decodeObjectForKey_, v57);

  if (v58)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v59 = swift_dynamicCast();
    if (v59)
      v60 = v78;
    else
      v60 = 0;
    if (v59)
      v61 = v79;
    else
      v61 = 0;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v60 = 0;
    v61 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v10 = v60;
  *((_QWORD *)v10 + 1) = v61;
  swift_bridgeObjectRelease();
  v62 = (void *)MEMORY[0x2494E9EDC](0x4449656369766564, 0xE800000000000000);
  v63 = objc_msgSend(a1, sel_decodeObjectForKey_, v62);

  if (v63)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
    v82 = 0u;
    v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    v64 = swift_dynamicCast();
    if (v64)
      v65 = v75;
    else
      v65 = 0;
    if (v64)
      v66 = v76;
    else
      v66 = 0;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    v65 = 0;
    v66 = 0;
  }
  v67 = v74;
  swift_beginAccess();
  *(_QWORD *)v67 = v65;
  *((_QWORD *)v67 + 1) = v66;

  swift_bridgeObjectRelease();
  v68 = (objc_class *)type metadata accessor for NearbyAdvertisement(0);
  v77.receiver = v13;
  v77.super_class = v68;
  v21 = objc_msgSendSuper2(&v77, sel_init);

  return v21;
}

uint64_t NearbyAdvertisement.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  void *v20;
  void *v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  char v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;

  v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v39 = 60;
  v40 = 0xE100000000000000;
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x61746E6F63202D20;
  v7._object = (void *)0xEC000000203A7463;
  String.append(_:)(v7);
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  if (v8)
  {
    v38._countAndFlagsBits = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
    v38._object = v8;
    swift_bridgeObjectRetain_n();
    v9 = String.init<A>(reflecting:)();
    v11 = v10;
  }
  else
  {
    v11 = 0xE300000000000000;
    v9 = 7104878;
  }
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A656C646E616820;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  if (v14)
  {
    v38._countAndFlagsBits = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle);
    v38._object = v14;
    swift_bridgeObjectRetain_n();
    v15 = String.init<A>(reflecting:)();
    v17 = v16;
  }
  else
  {
    v17 = 0xE300000000000000;
    v15 = 7104878;
  }
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x79616C7073696420;
  v19._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v19);
  v20 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  if (v20)
  {
    v38._countAndFlagsBits = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
    v38._object = v20;
    swift_bridgeObjectRetain_n();
    v1 = String.init<A>(reflecting:)();
    v22 = v21;
  }
  else
  {
    v22 = (void *)0xE300000000000000;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24 = swift_bridgeObjectRelease();
  v25 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v26 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))(v24);
  if (v27)
  {
    v28 = v26;
    v29 = v27;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v38, " deviceModel: ");
    HIBYTE(v38._object) = -18;
    v30._countAndFlagsBits = v28;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    v26 = swift_bridgeObjectRelease();
  }
  v31 = (*(uint64_t (**)(uint64_t))((*v25 & *v0) + 0xA8))(v26);
  if ((v32 & 1) == 0)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v38, " deviceColor: ");
    HIBYTE(v38._object) = -18;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    v31 = swift_bridgeObjectRelease();
  }
  v34 = (*(uint64_t (**)(uint64_t))((*v25 & *v0) + 0xD8))(v31);
  if (v35)
  {
    strcpy((char *)&v38, "deviceID: ");
    BYTE3(v38._object) = 0;
    HIDWORD(v38._object) = -369098752;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
  }
  v36._countAndFlagsBits = 62;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  return v39;
}

Swift::Int NearbyAdvertisement.hash.getter()
{
  _QWORD *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  _QWORD *v7;
  char v8;
  Swift::UInt v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  Swift::UInt v13;

  Hasher.init()();
  v1 = UUID.hashValue.getter();
  Hasher._combine(_:)(v1);
  v2 = String.hashValue.getter();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(*(_DWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType));
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8))
  {
    v3 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = Data.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8))
  {
    v5 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8))
  {
    v6 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
  if ((v8 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = Int.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  (*(void (**)(void))((*v7 & *v0) + 0xC0))();
  if (v10)
  {
    v11 = String.hashValue.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(void))((*v7 & *v0) + 0xD8))();
  if (v12)
  {
    v13 = String.hashValue.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

uint64_t NearbyAdvertisement.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v37[24];
  uint64_t v38;

  v2 = v1;
  outlined init with copy of (UUID, Bool)(a1, (uint64_t)v37, &demangling cache variable for type metadata for Any?);
  if (!v38)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v37, &demangling cache variable for type metadata for Any?);
    goto LABEL_24;
  }
  type metadata accessor for NearbyAdvertisement(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    v10 = 0;
    return v10 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    goto LABEL_23;
  v3 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier) == *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier)
    && *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8) == *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8);
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType) != *(_DWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType))
  {
    goto LABEL_23;
  }
  v4 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  v5 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  if (v4)
  {
    if (!v5
      || (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID) != *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID)
       || v4 != v5)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v5)
  {
    goto LABEL_23;
  }
  v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  v7 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8);
  v8 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  v9 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8);
  if (v7 >> 60 == 15)
  {
    if (v9 >> 60 == 15)
      goto LABEL_27;
LABEL_22:
    outlined copy of Data?(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
    outlined copy of Data?(v8, v9);
    outlined consume of Data?(v6, v7);
    outlined consume of Data?(v8, v9);
    goto LABEL_23;
  }
  if (v9 >> 60 == 15)
    goto LABEL_22;
  outlined copy of Data?(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo), *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
  outlined copy of Data?(v8, v9);
  specialized static Data.== infix(_:_:)(v6, v7);
  v13 = v12;
  outlined consume of Data?(v8, v9);
  outlined consume of Data?(v6, v7);
  if ((v13 & 1) == 0)
    goto LABEL_23;
LABEL_27:
  v14 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  v15 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  if (v14)
  {
    if (!v15
      || (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle) != *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle)
       || v14 != v15)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v15)
  {
    goto LABEL_23;
  }
  v16 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  v17 = *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  if (v16)
  {
    if (!v17
      || (*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName) != *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName)
       || v16 != v17)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v17)
  {
    goto LABEL_23;
  }
  v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v19 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA8))();
  v21 = v20;
  v22 = (*(uint64_t (**)(void))((*v18 & *v36) + 0xA8))();
  if ((v21 & 1) != 0)
  {
    if ((v23 & 1) == 0)
      goto LABEL_23;
  }
  else if ((v23 & 1) != 0 || v19 != v22)
  {
    goto LABEL_23;
  }
  v24 = (*(uint64_t (**)(void))((*v18 & *v2) + 0xC0))();
  v26 = v25;
  v27 = (*(uint64_t (**)(void))((*v18 & *v36) + 0xC0))();
  v10 = v28;
  if (!v26)
  {
    if (v28)
    {
LABEL_52:

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    goto LABEL_55;
  }
  if (!v28)
  {

    swift_bridgeObjectRelease();
    return v10 & 1;
  }
  if (v24 == v27 && v26 == v28)
  {
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v27 = swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
LABEL_23:

    goto LABEL_24;
  }
LABEL_55:
  v30 = (*(uint64_t (**)(uint64_t))((*v18 & *v2) + 0xD8))(v27);
  v32 = v31;
  v33 = (*(uint64_t (**)(void))((*v18 & *v36) + 0xD8))();
  v35 = v34;
  if (!v32)
  {

    if (!v35)
    {
      v10 = 1;
      return v10 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!v34)
    goto LABEL_52;
  if (v30 == v33 && v32 == v34)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

id NearbyAdvertisement.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NearbyAdvertisement.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NearbyAdvertisement.CodingKeys.stringValue.getter(char a1)
{
  return *(_QWORD *)&aScanneriidenti[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyAdvertisement.CodingKeys()
{
  char *v0;

  return NearbyAdvertisement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyAdvertisement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NearbyAdvertisement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbyAdvertisement.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyAdvertisement.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyAdvertisement.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id NearbyAdvertisement.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for NearbyAdvertisement);
}

uint64_t NearbyAdvertisement.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyAdvertisement.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LODWORD(v14) = *(_DWORD *)((char *)v3 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType);
    v15 = 2;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 5;
    v9 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0xA8))(v9);
    LOBYTE(v14) = 6;
    v11 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xC0))(v11);
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xD8))(v13);
    LOBYTE(v14) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    v14 = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
    v15 = 9;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

char *NearbyAdvertisement.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyAdvertisement.init(from:)(a1);
}

char *NearbyAdvertisement.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  objc_class *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  objc_super v50;
  __int128 v51;
  char v52;
  char v53;
  int v54;
  char v55;

  v49 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v40 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyAdvertisement.CodingKeys>);
  v4 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v48 = (uint64_t *)v8;
  v9 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v47 = (uint64_t *)v9;
  v10 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v44 = v10;
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  v11 = v1;
  v42 = v6;
  v12 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    type metadata accessor for NearbyAdvertisement(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v7;
    LOBYTE(v54) = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v14 = v40;
    v15 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID], v14, v15);
    LOBYTE(v54) = 1;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
    *v17 = v16;
    v17[1] = v18;
    v53 = 2;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_DWORD *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = v54;
    LOBYTE(v54) = 3;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v21 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
    *v21 = v19;
    v21[1] = v22;
    LOBYTE(v54) = 4;
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v24 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
    *v24 = v23;
    v24[1] = v25;
    LOBYTE(v54) = 5;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v27 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
    *v27 = v26;
    v27[1] = v28;
    LOBYTE(v54) = 6;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v14) = v30;
    swift_beginAccess();
    *(_QWORD *)v13 = v29;
    v13[8] = v14 & 1;
    v53 = 7;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v33 = v32;
    v34 = v48;
    swift_beginAccess();
    *v34 = v31;
    v34[1] = v33;
    swift_bridgeObjectRelease();
    v52 = 8;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37 = v36;
    v38 = v47;
    swift_beginAccess();
    *v38 = v35;
    v38[1] = v37;
    swift_bridgeObjectRelease();
    v55 = 9;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v11[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo] = v51;

    v39 = (objc_class *)type metadata accessor for NearbyAdvertisement(0);
    v50.receiver = v11;
    v50.super_class = v39;
    v11 = (char *)objc_msgSendSuper2(&v50, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v42, v41);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  }
  return v11;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyAdvertisement@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyAdvertisement()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x130))();
}

uint64_t NearbyInvitationJoinRequestMetadata.publicKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8));
  return v1;
}

uint64_t NearbyInvitationJoinRequestMetadata.pseudonym.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym, type metadata accessor for NearbyInvitationJoinRequestMetadata);
}

id InvitationBlob.init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t (*a7)(void))
{
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v8 = &v7[*a5];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  v9 = &v7[*a6];
  *(_QWORD *)v9 = a3;
  *((_QWORD *)v9 + 1) = a4;
  v11.receiver = v7;
  v11.super_class = (Class)a7();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t NearbyInvitationJoinRequestMetadata.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  swift_getObjectType();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x4B63696C62757020;
  v2._object = (void *)0xEC000000203A7965;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8);
  outlined copy of Data._Representation(v3, v4);
  v5._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v3, v4);
  v6._countAndFlagsBits = 0x6F6475657370202CLL;
  v6._object = (void *)0xED0000203A6D796ELL;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  v8 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 60;
}

uint64_t static NearbyInvitationJoinRequestMetadata.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationJoinRequestMetadata.encode(with:)(NSCoder with)
{
  uint64_t v1;
  Class isa;
  void *v4;
  void *v5;
  id v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = (void *)MEMORY[0x2494E9EDC](0x654B63696C627570, 0xE900000000000079);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v4);

  v5 = (void *)MEMORY[0x2494E9EDC](*(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym), *(_QWORD *)(v1 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8));
  v6 = (id)MEMORY[0x2494E9EDC](0x796E6F6475657370, 0xE90000000000006DLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

}

uint64_t NearbyInvitationJoinRequestMetadata.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestMetadata.init(coder:)(a1);
}

uint64_t NearbyInvitationJoinRequestMetadata.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v8;

  v2 = v1;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    v8 = xmmword_2429D9020;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  swift_deallocPartialClassInstance();
  return 0;
}

void NearbyInvitationJoinRequestMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NearbyInvitationJoinRequestMetadata.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x796E6F6475657370;
  else
    return 0x654B63696C627570;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationJoinRequestMetadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  char *v0;

  return NearbyInvitationJoinRequestMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyInvitationJoinRequestMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NearbyInvitationJoinRequestMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id NearbyInvitationJoinRequestMetadata.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for NearbyInvitationJoinRequestMetadata);
}

uint64_t NearbyInvitationJoinRequestMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyInvitationJoinRequestMetadata.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  v10[15] = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id NearbyInvitationJoinRequestMetadata.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestMetadata.init(from:)(a1);
}

id NearbyInvitationJoinRequestMetadata.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  char *v19;
  objc_super v20;
  __int128 v21;
  char v22;

  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyInvitationJoinRequestMetadata.CodingKeys>);
  v4 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  v19 = v1;
  v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v11 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    v22 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    v10 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v19;
    *(_OWORD *)&v19[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey] = v21;
    LOBYTE(v21) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    *v15 = v14;
    v15[1] = v16;

    v17 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestMetadata();
    v20.receiver = v13;
    v20.super_class = v17;
    v8 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationJoinRequestMetadata@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationJoinRequestMetadata()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x78))();
}

uint64_t InvitationRequestData.invitationData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t InvitationRequestData.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequestData.pseudonym.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequestData.init(invitationData:id:pseudo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t InvitationRequestData.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  void *v16;
  Swift::String v17;

  v1 = 7104878;
  v3 = *v0;
  v2 = v0[1];
  v5 = v0[2];
  v4 = (void *)v0[3];
  v6 = v0[5];
  _StringGuts.grow(_:)(60);
  v7._object = (void *)0x80000002429DD9F0;
  v7._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v7);
  if (v2 >> 60 == 15)
  {
    v8 = 0xE300000000000000;
    v9 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v3, v2);
    outlined copy of Data._Representation(v3, v2);
    v9 = String.init<A>(reflecting:)();
    v8 = v10;
  }
  v11 = v8;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v3, v2);
  v12._countAndFlagsBits = 0x203A6469202CLL;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v5;
  v13._object = v4;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6F6475657370202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    v1 = String.init<A>(reflecting:)();
    v16 = v15;
  }
  else
  {
    v16 = (void *)0xE300000000000000;
  }
  v17._countAndFlagsBits = v1;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t InvitationRequestData.CodingKeys.stringValue.getter(char a1)
{
  return *(_QWORD *)&aInvitatiid[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationRequestData.CodingKeys()
{
  char *v0;

  return InvitationRequestData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationRequestData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized InvitationRequestData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationRequestData.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationRequestData.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InvitationRequestData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationRequestData.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v13[3] = v1[3];
  v13[4] = v9;
  v10 = v1[4];
  v13[1] = v1[5];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v8;
  v15 = v7;
  v16 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  v11 = v13[5];
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t InvitationRequestData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationRequestData.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v28 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v10 = v26;
  v9 = v27;
  LOBYTE(v26) = 1;
  outlined copy of Data?(v10, v27);
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  v13 = v12;
  v23 = v11;
  v25 = v9;
  LOBYTE(v26) = 2;
  swift_bridgeObjectRetain();
  v14 = v13;
  v24 = 0;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v15;
  v18(v8, v5);
  v20 = v25;
  outlined copy of Data?(v10, v25);
  swift_bridgeObjectRetain();
  outlined consume of Data?(v10, v20);
  *a2 = v10;
  a2[1] = v20;
  a2[2] = v23;
  a2[3] = v14;
  a2[4] = v19;
  a2[5] = v17;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  outlined consume of Data?(v10, v20);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationRequestData@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return InvitationRequestData.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationRequestData(_QWORD *a1)
{
  return InvitationRequestData.encode(to:)(a1);
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_2429D29FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x2429D2BE0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2429D2DD8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_2429D2E0C + dword_2429D2FE4[v0 >> 62]))();
}

uint64_t sub_2429D2E1C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized NearbyInvitation.PendingMember.displayName.getter()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
}

id specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  objc_class *v24;
  id v25;
  objc_super v27;

  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], a1, v13);
  v17 = &v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(_QWORD *)v17 = a2;
  *((_QWORD *)v17 + 1) = a3;
  v18 = (uint64_t *)&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *v18 = a4;
  v18[1] = a5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  v19 = v6;
  outlined copy of Data?(a4, a5);
  v20 = a6;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v16, v13);
  v21 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  v22 = (uint64_t *)&v19[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *v22 = v21;
  v22[1] = v23;

  v24 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v27.receiver = v19;
  v27.super_class = v24;
  v25 = objc_msgSendSuper2(&v27, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v25;
}

char *specialized static NearbyInvitationData.create(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  id v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  objc_super v85;
  _OWORD v86[2];
  uint64_t v87;
  uint64_t v88;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v80 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v76 = (uint64_t)&v69 - v7;
  v78 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v75 = *(_QWORD *)(v78 - 8);
  v8 = MEMORY[0x24BDAC7A8](v78);
  v79 = (_OWORD *)((char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v77 = (uint64_t *)((char *)&v69 - v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v11);
  v81 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  v83 = v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v69 - v18;
  v20 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Invitation_InvitationData(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (uint64_t *)((char *)&v69 - v27);
  v87 = 0;
  memset(v86, 0, sizeof(v86));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, 255, type metadata accessor for Invitation_InvitationData, (uint64_t)&protocol conformance descriptor for Invitation_InvitationData);
  v29 = v84;
  Message.init(serializedData:extensions:partial:options:)();
  if (!v29)
  {
    v72 = v23;
    v70 = v26;
    v71 = 0;
    v73 = v17;
    v84 = v19;
    v22 = (char *)*v28;
    outlined copy of Data._Representation(*v28, v28[1]);
    v30 = v81;
    UUID.init(data:)();
    v32 = v82;
    v31 = v83;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v30, 1, v82);
    v74 = v28;
    if (v33 == 1)
    {
      outlined destroy of Invitation_HostConnectionInfo?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for client != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Log.client);
      v35 = (uint64_t)v70;
      outlined init with copy of Invitation_InvitationData((uint64_t)v28, (uint64_t)v70);
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        *(_QWORD *)&v86[0] = v39;
        *(_DWORD *)v38 = 136315138;
        v22 = (char *)(v38 + 12);
        v40 = Message.debugDescription.getter();
        v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of Invitation_InvitationData(v35, type metadata accessor for Invitation_InvitationData);
        _os_log_impl(&dword_242981000, v36, v37, "Invalid payload passed in: %s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2494EA95C](v39, -1, -1);
        MEMORY[0x2494EA95C](v38, -1, -1);
      }
      else
      {
        outlined destroy of Invitation_InvitationData(v35, type metadata accessor for Invitation_InvitationData);
      }

      lazy protocol witness table accessor for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors();
      swift_allocError();
      swift_willThrow();
      outlined destroy of Invitation_InvitationData((uint64_t)v74, type metadata accessor for Invitation_InvitationData);
    }
    else
    {
      v42 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v84, v30, v32);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v73, v42, v32);
      v70 = (char *)v28[2];
      v81 = v28[3];
      v43 = *(int *)(v72 + 32);
      v44 = (uint64_t *)((char *)v28 + *(int *)(v72 + 28));
      v46 = *v44;
      v45 = v44[1];
      if (v45 >> 60 == 15)
        v47 = 0;
      else
        v47 = *v44;
      v48 = 0xC000000000000000;
      if (v45 >> 60 != 15)
        v48 = v45;
      v72 = v48;
      v49 = (uint64_t)v28 + v43;
      v50 = v76;
      outlined init with copy of (UUID, Bool)((uint64_t)v28 + v43, v76, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
      v52 = v78;
      if (v51(v50, 1, v78) == 1)
      {
        v53 = v77;
        *(_OWORD *)v77 = xmmword_2429D9010;
        v53[2] = 0;
        v53[3] = 0xE000000000000000;
        swift_bridgeObjectRetain();
        outlined copy of Data?(v46, v45);
        UnknownStorage.init()();
        v32 = v82;
        outlined destroy of Invitation_HostConnectionInfo?(v50, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      }
      else
      {
        v53 = v77;
        outlined init with take of Invitation_HostConnectionInfo(v50, (uint64_t)v77);
        swift_bridgeObjectRetain();
        outlined copy of Data?(v46, v45);
      }
      v55 = (uint64_t)v53;
      v56 = *v53;
      v57 = v53[1];
      outlined copy of Data._Representation(v56, v57);
      outlined destroy of Invitation_InvitationData(v55, type metadata accessor for Invitation_HostConnectionInfo);
      v58 = v80;
      outlined init with copy of (UUID, Bool)(v49, v80, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      if (v51(v58, 1, v52) == 1)
      {
        v59 = v79;
        *v79 = xmmword_2429D9010;
        *((_QWORD *)v59 + 2) = 0;
        *((_QWORD *)v59 + 3) = 0xE000000000000000;
        UnknownStorage.init()();
        outlined destroy of Invitation_HostConnectionInfo?(v58, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      }
      else
      {
        v59 = v79;
        outlined init with take of Invitation_HostConnectionInfo(v58, (uint64_t)v79);
      }
      v61 = *((_QWORD *)v59 + 2);
      v60 = *((_QWORD *)v59 + 3);
      swift_bridgeObjectRetain();
      outlined destroy of Invitation_InvitationData((uint64_t)v59, type metadata accessor for Invitation_HostConnectionInfo);
      v62 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestMetadata();
      v63 = (char *)objc_allocWithZone(v62);
      v64 = (uint64_t *)&v63[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey];
      *v64 = v56;
      v64[1] = v57;
      v65 = &v63[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
      *(_QWORD *)v65 = v61;
      *((_QWORD *)v65 + 1) = v60;
      v85.receiver = v63;
      v85.super_class = v62;
      v66 = objc_msgSendSuper2(&v85, sel_init);
      v67 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationData(0));
      v68 = v72;
      v22 = (char *)specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)((uint64_t)v73, (uint64_t)v70, v81, v47, v72, v66);

      outlined consume of Data._Representation(v47, v68);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v32);
      outlined destroy of Invitation_InvitationData((uint64_t)v74, type metadata accessor for Invitation_InvitationData);
    }
  }
  return v22;
}

id specialized NearbyInvitationData.init<A>(from:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  void *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  objc_class *v18;
  objc_super v20;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], a1 + direct field offset for NearbyInvitation.id, v3);
  v7 = *(_QWORD *)(a1 + direct field offset for NearbyInvitation.displayName + 8);
  v8 = &v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(_QWORD *)v8 = *(_QWORD *)(a1 + direct field offset for NearbyInvitation.displayName);
  *((_QWORD *)v8 + 1) = v7;
  v9 = *(_QWORD *)(a1 + direct field offset for NearbyInvitation.userInfo);
  v10 = *(_QWORD *)(a1 + direct field offset for NearbyInvitation.userInfo + 8);
  v11 = (uint64_t *)&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *v11 = v9;
  v11[1] = v10;
  v12 = *(void **)(a1 + direct field offset for NearbyInvitation.invitationHostInfo);
  *(_QWORD *)&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v12;
  v13 = v1;
  swift_bridgeObjectRetain();
  outlined copy of Data?(v9, v10);
  v14 = v12;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v6, v3);
  v15 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  v16 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *v16 = v15;
  v16[1] = v17;

  v18 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v20.receiver = v13;
  v20.super_class = v18;
  return objc_msgSendSuper2(&v20, sel_init);
}

id specialized NearbyInvitationData.__allocating_init<A>(from:)(uint64_t a1)
{
  id v2;

  v2 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationData(0));
  return specialized NearbyInvitationData.init<A>(from:)(a1);
}

uint64_t *specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;

  v54 = a4;
  v11 = v10;
  v50 = a6;
  v51 = a8;
  v42 = a7;
  v43 = a2;
  v56 = a1;
  v48 = a5;
  v49 = a10;
  v12 = *v10;
  v13 = *(_QWORD *)(*v10 + 80);
  v14 = *(_QWORD *)(*v10 + 88);
  v44 = a3;
  v45 = v13;
  v46 = a9;
  v47 = v14;
  v15 = type metadata accessor for NearbyInvitation.PendingMember(255, v13, v14, (uint64_t)a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v15);
  type metadata accessor for Set();
  v16 = type metadata accessor for Published();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - v18;
  v20 = (uint64_t)v11 + *(_QWORD *)(v12 + 144);
  v21 = Set.init()();
  property wrapper backing initializer of NearbyInvitation.pendingMembers(v21, v13, v14, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20, v19, v16);
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 + 152)) = MEMORY[0x24BEE4B08];
  *(uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.invitationHostInfo) = (uint64_t)v54;
  v23 = v42;
  *(uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.controller) = v42;
  v24 = (uint64_t)v11 + direct field offset for NearbyInvitation.id;
  v25 = type metadata accessor for UUID();
  v26 = *(_QWORD *)(v25 - 8);
  v52 = v25;
  v53 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v56, v25);
  v27 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.displayName);
  v28 = v44;
  *v27 = v43;
  v27[1] = v28;
  v29 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.userInfo);
  v31 = v48;
  v30 = v49;
  v32 = v50;
  *v29 = v48;
  v29[1] = v32;
  v33 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.sourceProvider);
  v34 = v46;
  v33[3] = v46;
  v33[4] = v30;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(boxed_opaque_existential_1, v51, v34);
  v36 = (uint64_t *)(v23 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  v55 = *v36;
  v37 = swift_allocObject();
  swift_weakInit();
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v45;
  v38[3] = v34;
  v38[4] = v47;
  v38[5] = v30;
  v38[6] = v37;
  v39 = v54;
  swift_retain();
  outlined copy of Data?(v31, v32);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  lazy protocol witness table accessor for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v56, v52);
  return v11;
}

id specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v18;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id v34;
  uint64_t v41;
  objc_super v42;

  v22 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  v23 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v24 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v25 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v26 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID];
  v27 = type metadata accessor for UUID();
  v41 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v26, a1, v27);
  v28 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
  *(_QWORD *)v28 = a2;
  *((_QWORD *)v28 + 1) = a3;
  *(_DWORD *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = a4;
  v29 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
  *(_QWORD *)v29 = a5;
  *((_QWORD *)v29 + 1) = a6;
  v30 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
  *(_QWORD *)v30 = a7;
  *((_QWORD *)v30 + 1) = a8;
  v31 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
  *(_QWORD *)v31 = a9;
  *((_QWORD *)v31 + 1) = a10;
  v32 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo];
  *v32 = a11;
  v32[1] = a12;
  swift_beginAccess();
  *(_QWORD *)v22 = a13;
  v22[8] = a14 & 1;
  swift_beginAccess();
  *(_QWORD *)v23 = a15;
  *((_QWORD *)v23 + 1) = a16;
  v33 = v18;
  outlined copy of Data?(a11, a12);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)v24 = a17;
  *((_QWORD *)v24 + 1) = a18;

  swift_bridgeObjectRelease();
  v42.receiver = v33;
  v42.super_class = (Class)type metadata accessor for NearbyAdvertisement(0);
  v34 = objc_msgSendSuper2(&v42, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a1, v27);
  return v34;
}

uint64_t type metadata accessor for NearbyInvitationParameters()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InvitationJoinResponse()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InvitationBlob()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationBlob.CodingKeys, &unk_251373330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationBlob.CodingKeys, &unk_251373330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationBlob.CodingKeys, &unk_251373330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationBlob.CodingKeys, &unk_251373330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for IncomingInvitationJoinRequest(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for IncomingInvitationJoinRequest);
}

uint64_t type metadata accessor for NearbyInvitationJoinRequestMetadata()
{
  return objc_opt_self();
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2494EA8A8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InvitationRequest.requestApproval()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in InvitationRequest.requestApproval()(a1, *(id **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for NearbyInvitationData(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationData);
}

uint64_t outlined init with copy of InvitationSourceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for NearbyInvitation.PendingMember.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitation.PendingMember.Errors);
}

uint64_t sub_2429D416C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_2429D419C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2429D41CC()
{
  return 16;
}

__n128 sub_2429D41D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for NearbyInvitation.PendingMember(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitation.PendingMember);
}

uint64_t specialized InvitationBlob.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6974617469766E69 && a2 == 0xEC00000044496E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x626F6C4261746164 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized NearbyInvitation.$pendingMembers.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v6);
  type metadata accessor for Set();
  v7 = type metadata accessor for Published.Publisher();
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v9, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1)
{
  return closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(a1);
}

uint64_t sub_2429D43DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in NearbyInvitation.deinit(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in NearbyInvitation.deinit(a1, v1 + v4, *(void **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in NearbyInvitation.markUsed()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NearbyInvitation.markUsed()(a1, v1);
}

void partial apply for closure #1 in NearbyInvitation.approve(_:userInfo:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in NearbyInvitation.approve(_:userInfo:)(a1, *(_QWORD *)(v1 + 16), *(void ***)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t NearbyInvitation.reject(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for InvitationApprovalRequest()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationApprovalRequest.CodingKeys, &unk_2513732A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationApprovalRequest.CodingKeys, &unk_2513732A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationApprovalRequest.CodingKeys, &unk_2513732A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationApprovalRequest.CodingKeys, &unk_2513732A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in NearbyInvitationData.encodedData.getter(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.CodingKeys, &unk_251373210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.CodingKeys, &unk_251373210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.CodingKeys, &unk_251373210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.CodingKeys, &unk_251373210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NearbyAdvertisement(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, type metadata singleton initialization cache for NearbyAdvertisement);
}

unint64_t lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyAdvertisement.CodingKeys, &unk_251373180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyAdvertisement.CodingKeys, &unk_251373180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyAdvertisement.CodingKeys, &unk_251373180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyAdvertisement.CodingKeys, &unk_251373180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata.CodingKeys, &unk_2513730F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata.CodingKeys, &unk_2513730F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata.CodingKeys, &unk_2513730F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationJoinRequestMetadata.CodingKeys, &unk_2513730F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequestData.CodingKeys, &unk_251373060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequestData.CodingKeys, &unk_251373060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequestData.CodingKeys, &unk_251373060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for InvitationRequestData.CodingKeys, &unk_251373060);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationScopeType, &type metadata for NearbyInvitationScopeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationScopeType, &type metadata for NearbyInvitationScopeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationRouteType, &type metadata for NearbyInvitationRouteType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationRouteType, &type metadata for NearbyInvitationRouteType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType);
  }
  return result;
}

void base witness table accessor for Equatable in InvitationRequest<A>.Errors()
{
  JUMPOUT(0x2494EA8A8);
}

void base witness table accessor for Equatable in NearbyInvitation<A>.PendingMember.Errors()
{
  JUMPOUT(0x2494EA8A8);
}

void base witness table accessor for Equatable in NearbyInvitation<A>.PendingMember()
{
  JUMPOUT(0x2494EA8A8);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.Errors, &type metadata for NearbyInvitationData.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors)
  {
    result = MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitationData.Errors, &type metadata for NearbyInvitationData.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors);
  }
  return result;
}

uint64_t sub_2429D47B0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_2429D47F0(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x90);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_2429D483C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429D486C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 128);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2429D48B0()
{
  return 16;
}

__n128 sub_2429D48BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D48C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429D48F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t (*v4)(uint64_t, unint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)a2 + 152);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_2429D4940()
{
  return 16;
}

__n128 sub_2429D494C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D495C()
{
  return swift_weakAssign();
}

uint64_t sub_2429D496C()
{
  return 16;
}

__n128 sub_2429D4978(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D4984()
{
  return 16;
}

__n128 sub_2429D4990(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D499C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
}

uint64_t sub_2429D49C8()
{
  return 16;
}

__n128 sub_2429D49D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D49E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_2429D4A10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 224);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2429D4A40()
{
  return 16;
}

__n128 sub_2429D4A4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2429D4A58@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA8))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_2429D4AA0(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB0))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_2429D4AE8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429D4B28(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2429D4B7C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429D4BBC(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2429D4C10@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xF0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2429D4C50(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xF8);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of NearbyInvitationsProvider.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

ValueMetadata *type metadata accessor for NearbyInvitationActivityType()
{
  return &type metadata for NearbyInvitationActivityType;
}

ValueMetadata *type metadata accessor for NearbyInvitationScopeType()
{
  return &type metadata for NearbyInvitationScopeType;
}

ValueMetadata *type metadata accessor for NearbyInvitationRouteType()
{
  return &type metadata for NearbyInvitationRouteType;
}

uint64_t method lookup function for NearbyInvitationParameters()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v4 + 104))(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32));
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(serviceName:browserType:route:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v4 + 112))(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32));
}

uint64_t dispatch thunk of NearbyInvitationParameters.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for InvitationJoinResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvitationJoinResponse.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InvitationJoinResponse.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for InvitationBlob()
{
  return swift_lookUpClassMethod();
}

uint64_t ObjC metadata update function for IncomingInvitationJoinRequest()
{
  return type metadata accessor for IncomingInvitationJoinRequest(0);
}

uint64_t type metadata completion function for IncomingInvitationJoinRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IncomingInvitationJoinRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.__allocating_init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata completion function for InvitationRequest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InvitationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvitationRequest);
}

uint64_t method lookup function for InvitationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvitationRequest.displayName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of InvitationRequest.displayName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of InvitationRequest.displayName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of InvitationRequest.invitationDisplayName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of InvitationRequest.invitationUserInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of InvitationRequest.__allocating_init(remoteInvitationData:providerType:displayName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of InvitationRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of InvitationRequest.requestApproval()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 200) + *(_QWORD *)(*(_QWORD *)v0 + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t type metadata accessor for InvitationRequest.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvitationRequest.Errors);
}

uint64_t dispatch thunk of static InvitationSourceProvider.providerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InvitationSourceProvider.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InvitationSourceProvider.didApproveMember(member:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for Handle()
{
  return &type metadata for Handle;
}

uint64_t type metadata completion function for NearbyInvitation(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = type metadata accessor for UUID();
  if (v4 <= 0x3F)
  {
    v5 = type metadata accessor for NearbyInvitation.PendingMember(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v3);
    MEMORY[0x2494EA8A8](&protocol conformance descriptor for NearbyInvitation<A>.PendingMember, v5);
    type metadata accessor for Set();
    result = type metadata accessor for Published();
    if (v6 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for NearbyInvitation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NearbyInvitation);
}

uint64_t method lookup function for NearbyInvitation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitation.invitationData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitation.__allocating_init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 240))(a1, a2);
}

uint64_t dispatch thunk of NearbyInvitation.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NearbyInvitation.markUsed()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 256) + *(_QWORD *)(*(_QWORD *)v0 + 256));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 264)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 264));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of NearbyInvitation.reject(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 272) + *(_QWORD *)(*(_QWORD *)v1 + 272));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t destroy for NearbyInvitation.PendingMember(id *a1)
{

  return swift_weakDestroy();
}

void **initializeWithCopy for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  swift_weakCopyInit();
  return a1;
}

void **assignWithCopy for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  swift_weakCopyAssign();
  return a1;
}

_QWORD *initializeWithTake for NearbyInvitation.PendingMember(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void **assignWithTake for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitation.PendingMember(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitation.PendingMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t method lookup function for InvitationApprovalRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvitationApprovalRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ObjC metadata update function for NearbyInvitationData()
{
  return type metadata accessor for NearbyInvitationData(0);
}

uint64_t type metadata completion function for NearbyInvitationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyInvitationData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationData.encodedData.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init<A>(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationData.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationData.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t storeEnumTagSinglePayload for NearbyInvitation.PendingMember.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2429D57A8 + 4 * byte_2429DA5F6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2429D57C8 + 4 * byte_2429DA5FB[v4]))();
}

_BYTE *sub_2429D57A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2429D57C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429D57D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429D57D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2429D57E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2429D57E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationData.Errors()
{
  return &type metadata for NearbyInvitationData.Errors;
}

uint64_t ObjC metadata update function for NearbyAdvertisement()
{
  return type metadata accessor for NearbyAdvertisement(0);
}

uint64_t type metadata completion function for NearbyAdvertisement()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NearbyAdvertisement()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB0))(a1, a2 & 1);
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 264))(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NearbyAdvertisement.approve(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of NearbyAdvertisement.reject()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of NearbyAdvertisement.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of NearbyAdvertisement.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t method lookup function for NearbyInvitationJoinRequestMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(publicKey:pseudonym:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t destroy for InvitationRequestData(uint64_t *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*a1, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InvitationRequestData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for InvitationRequestData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  outlined copy of Data._Representation(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for InvitationRequestData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvitationRequestData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvitationRequestData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InvitationRequestData()
{
  return &type metadata for InvitationRequestData;
}

void *type metadata accessor for InvitationRequestData.CodingKeys()
{
  return &unk_251373060;
}

void *type metadata accessor for NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  return &unk_2513730F0;
}

uint64_t getEnumTagSinglePayload for NearbyAdvertisement.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyAdvertisement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_2429D5F70 + 4 * byte_2429DA605[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_2429D5FA4 + 4 * byte_2429DA600[v4]))();
}

uint64_t sub_2429D5FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D5FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429D5FB4);
  return result;
}

uint64_t sub_2429D5FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429D5FC8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2429D5FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D5FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NearbyAdvertisement.CodingKeys()
{
  return &unk_251373180;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2429D60CC + 4 * byte_2429DA60F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2429D6100 + 4 * byte_2429DA60A[v4]))();
}

uint64_t sub_2429D6100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D6108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429D6110);
  return result;
}

uint64_t sub_2429D611C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429D6124);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2429D6128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D6130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NearbyInvitationData.CodingKeys()
{
  return &unk_251373210;
}

uint64_t storeEnumTagSinglePayload for InvitationRequest.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2429D6198 + 4 * byte_2429DA619[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2429D61CC + 4 * byte_2429DA614[v4]))();
}

uint64_t sub_2429D61CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D61D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429D61DCLL);
  return result;
}

uint64_t sub_2429D61E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429D61F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2429D61F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D61FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InvitationApprovalRequest.CodingKeys()
{
  return &unk_2513732A0;
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationJoinRequestMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2429D6264 + 4 * byte_2429DA623[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2429D6298 + 4 * byte_2429DA61E[v4]))();
}

uint64_t sub_2429D6298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D62A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2429D62A8);
  return result;
}

uint64_t sub_2429D62B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2429D62BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2429D62C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2429D62C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for InvitationBlob.CodingKeys()
{
  return &unk_251373330;
}

uint64_t specialized InvitationApprovalRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000002429DD860
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized NearbyInvitationData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6974617469766E69 && a2 == 0xEC00000044496E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002429DCAE0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002429DCC70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002429DCC90)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized NearbyAdvertisement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4972656E6E616373 && a2 == 0xE900000000000044;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEC00000065707954
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F43656369766564 && a2 == 0xEB00000000726F6CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F4D656369766564 && a2 == 0xEB000000006C6564
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t specialized NearbyInvitationJoinRequestMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x796E6F6475657370 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized InvitationRequestData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6974617469766E69 && a2 == 0xEE00617461446E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796E6F6475657370 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2429D72FC()
{
  return objectdestroy_65Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(a1);
}

uint64_t sub_2429D7348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitation.markUsed()(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return closure #1 in closure #1 in NearbyInvitation.markUsed()(a1, v1 + v4, v1 + v7, *(void **)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_2429D7494()
{
  return objectdestroy_65Tm(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
}

uint64_t objectdestroy_65Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
  return closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(a1, a2);
}

uint64_t sub_2429D754C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in InvitationRequest.requestApproval()(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in InvitationRequest.requestApproval()(a1, a2, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t outlined init with copy of Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Invitation_InvitationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Invitation_InvitationData(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2429D76D8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2429D76FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(_QWORD **a1)
{
  uint64_t *v1;

  return closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1, v1[6], v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>;
  if (!lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
    result = MEMORY[0x2494EA8A8](MEMORY[0x24BDB9CB0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>);
  }
  return result;
}

uint64_t dispatch thunk of InvitationBlob.__allocating_init(from:)()
{
  return dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(from:)();
}

uint64_t dispatch thunk of InvitationBlob.encode(to:)()
{
  return dispatch thunk of NearbyInvitationJoinRequestMetadata.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationBlob@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance NearbyInvitationJoinRequestMetadata(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationBlob()
{
  return protocol witness for Encodable.encode(to:) in conformance NearbyInvitationJoinRequestMetadata();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x24BDCDBE0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCDCD8]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.hashValue.getter()
{
  return MEMORY[0x24BDCDDB0]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.data.getter()
{
  return MEMORY[0x24BE19E68]();
}

uint64_t UUID.init(data:)()
{
  return MEMORY[0x24BE19E70]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x24BDCE9D0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t UUID.hashValue.getter()
{
  return MEMORY[0x24BDCEA30]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t type metadata accessor for XPCIdentity()
{
  return MEMORY[0x24BE19EB0]();
}

uint64_t static XPCInterface.isConnectionEntitled(_:)()
{
  return MEMORY[0x24BE19EB8]();
}

uint64_t MachServiceName.rawValue.getter()
{
  return MEMORY[0x24BE19EC8]();
}

uint64_t type metadata accessor for MachServiceName()
{
  return MEMORY[0x24BE19ED0]();
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  return MEMORY[0x24BE19ED8]();
}

{
  return MEMORY[0x24BE19EE8]();
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  return MEMORY[0x24BE19EF8]();
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  return MEMORY[0x24BE19F00]();
}

uint64_t Lock.withLock<A>(_:)()
{
  return MEMORY[0x24BE19F90]();
}

uint64_t Lock.init()()
{
  return MEMORY[0x24BE19FB0]();
}

uint64_t type metadata accessor for Lock()
{
  return MEMORY[0x24BE19FB8]();
}

uint64_t XPCClient.__allocating_init(listenerEndpoint:)()
{
  return MEMORY[0x24BE19FD0]();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.setter()
{
  return MEMORY[0x24BE19FD8]();
}

uint64_t XPCClient.withSynchronousHost<A>(body:errorHandler:)()
{
  return MEMORY[0x24BE19FE0]();
}

uint64_t XPCClient.queue.getter()
{
  return MEMORY[0x24BE19FE8]();
}

uint64_t XPCClient.withHost(body:errorHandler:)()
{
  return MEMORY[0x24BE19FF0]();
}

uint64_t GroupSessionProvider.isCrossAccount.getter()
{
  return MEMORY[0x24BDD1C30]();
}

uint64_t static GroupSessionProvider.providerIdentifier.getter()
{
  return MEMORY[0x24BDD1C38]();
}

uint64_t GroupSessionProvider.leave()()
{
  return MEMORY[0x24BDD1C50]();
}

uint64_t type metadata accessor for GroupSessionProviderState()
{
  return MEMORY[0x24BDD1D80]();
}

uint64_t AddressableMember.init(handle:)()
{
  return MEMORY[0x24BDD1F98]();
}

uint64_t type metadata accessor for AddressableMember()
{
  return MEMORY[0x24BDD1FA8]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A0]();
}

{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x24BE5C120]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x24BE5C1F0]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x24BDB9B40]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x24BDB9B90]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x24BDB9B98]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x24BDB9C78]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x24BDB9C90]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x24BDB9E98]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x24BDB9EA0]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x24BDB9EA8]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x24BDB9EC0]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x24BDB9EC8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x24BDB9ED0]();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return MEMORY[0x24BDB9ED8]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x24BDB9EF0]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x24BDBA128]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x24BEE5648]();
}

uint64_t Set.init()()
{
  return MEMORY[0x24BEE01C0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x24BEE0CD8]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1058]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE10D8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x24BEE6A30]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  MEMORY[0x24BEE6A38]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x24BEE6AA0]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x24BEE16D8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x24BEE1758]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)()
{
  return MEMORY[0x24BE1A008]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x24BDD0170]();
}

uint64_t NSCoder.decodeObject(of:forKey:)()
{
  return MEMORY[0x24BDD0178]();
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)()
{
  return MEMORY[0x24BDD0190]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.hash.getter()
{
  return MEMORY[0x24BDD05F0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BEE3278]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32F8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3448]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34A8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD07A0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x24BEE4310](*(_QWORD *)&a1);
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x24BEE4320]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x24BEE4330]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDD07D0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x24BEE5018]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x24BEE5020]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x24BEE5040]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x24BEE5048]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

